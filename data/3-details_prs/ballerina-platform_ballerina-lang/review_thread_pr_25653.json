{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNDIyMTAx", "number": 25653, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0OTo1M1rOEjRTZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDoxOToxOVrOEjhgyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE5MTEwOnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/Package.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0OTo1M1rOHRiPbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjoxNToyMFrOHRyQnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0ODg0Ng==", "bodyText": "Looks like this method is unused. If so, can we remove it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488148846", "createdAt": "2020-09-14T18:49:53Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -63,4 +64,8 @@ public Module getDefaultModule() {\n     public BallerinaToml ballerinaToml() {\n         return this.packageContext.ballerinaToml();\n     }\n+\n+    public Path packagePath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMTI5Mw==", "bodyText": "It is used inside write in BaloWriter class", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488411293", "createdAt": "2020-09-15T06:15:20Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -63,4 +64,8 @@ public Module getDefaultModule() {\n     public BallerinaToml ballerinaToml() {\n         return this.packageContext.ballerinaToml();\n     }\n+\n+    public Path packagePath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0ODg0Ng=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE5ODA3OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/PackageContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo1MTo0NVrOHRiTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjoyMToyNFrOHRyaQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0OTkyMw==", "bodyText": "We should not be exposing the packageConfig. Instead we expose individual fields (whichever is necessary). Anyway looks like there is only used in Package#packagePath() and so we would not need this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488149923", "createdAt": "2020-09-14T18:51:45Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/PackageContext.java", "diffHunk": "@@ -99,4 +99,8 @@ ModuleContext defaultModuleContext() {\n     BallerinaToml ballerinaToml() {\n         return this.ballerinaToml;\n     }\n+\n+    PackageConfig packageConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMzc2Mg==", "bodyText": "Changed implementation to:\nPath packagePath() {\n        return this.packageConfig.packagePath();\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488413762", "createdAt": "2020-09-15T06:21:24Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/PackageContext.java", "diffHunk": "@@ -99,4 +99,8 @@ ModuleContext defaultModuleContext() {\n     BallerinaToml ballerinaToml() {\n         return this.ballerinaToml;\n     }\n+\n+    PackageConfig packageConfig() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0OTkyMw=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDIzMTM3OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowMToxMVrOHRioGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjoyMzozOVrOHRyePw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NTE2MQ==", "bodyText": "We can use ProjectConstants.MODULES_ROOT without initializing a new constant", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488155161", "createdAt": "2020-09-14T19:01:11Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNDc4Mw==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488414783", "createdAt": "2020-09-15T06:23:39Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NTE2MQ=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDIzNTA5OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowMjoxM1rOHRiqXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowMjoxM1rOHRiqXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NTc0Mg==", "bodyText": "We can remove these unnecessary comments.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488155742", "createdAt": "2020-09-14T19:02:13Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDI4OTQ3OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToxNzozNFrOHRjLnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjoyOTowM1rOHRynBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2NDI1NQ==", "bodyText": "Since this is an IO related exception, IMO, we don't need a custom exception to handle permissions. We can throw an the existing java exception. IOException or to be more specific,  AccessDeniedException would suffice here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488164255", "createdAt": "2020-09-14T19:17:34Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNzAyOA==", "bodyText": "Used AccessDeniedException", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488417028", "createdAt": "2020-09-15T06:29:03Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2NDI1NQ=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDMxNjU3OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToyNTozNVrOHRjcJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1MDoyMVrOHRzLYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2ODQ4NA==", "bodyText": "We can write the Files.delete(balo); within the first catch block (before L99). This way we don't need to catch and re-throw the BLangCompilerException", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488168484", "createdAt": "2020-09-14T19:25:35Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNjMzOA==", "bodyText": "IOException in L 98. associate to the error when creating balo. At that case, we cant do Files.delete(balo); since balo is not created.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488426338", "createdAt": "2020-09-15T06:50:21Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2ODQ4NA=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDMzOTI4OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTozMjo0OFrOHRjqTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1MzowN1rOHRzQ0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3MjExMQ==", "bodyText": "We can use ProjectConstants.RESOURCE_DIR_NAME instead of the hardcoded string \"resources\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488172111", "createdAt": "2020-09-14T19:32:48Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(RepoUtils.getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(MODULES);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(MODULES).resolve(moduleDir.getName())\n+                            .resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(MODULES);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(\"resources\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 313}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNzcyOQ==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488427729", "createdAt": "2020-09-15T06:53:07Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(RepoUtils.getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(MODULES);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(MODULES).resolve(moduleDir.getName())\n+                            .resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(MODULES);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(\"resources\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3MjExMQ=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 313}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDM1MTcwOnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTozNjo0OFrOHRjyJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1MzoxMlrOHRzQ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NDExOQ==", "bodyText": "We can use ProjectConstants.BLANG_SOURCE_EXT instead of hardcoding the Ballerina file extension", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488174119", "createdAt": "2020-09-14T19:36:48Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(RepoUtils.getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(MODULES);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(MODULES).resolve(moduleDir.getName())\n+                            .resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(MODULES);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(\"resources\");\n+        Path resourcesSrcDir = sourceDir.resolve(\"resources\");\n+\n+        // if resources not exists ignore copying\n+        if (resourcesSrcDir.toFile().exists()) {\n+            File[] resourceFiles = new File(String.valueOf(resourcesSrcDir)).listFiles();\n+            if (resourceFiles != null && resourceFiles.length > 0) {\n+                Files.walkFileTree(resourcesSrcDir, new CopyResources(resourcesSrcDir, resourcesDir));\n+            }\n+        }\n+    }\n+\n+    private static void copyBallerinaSrcFiles(Path sourceDirPath, Path targetPath) throws IOException {\n+        File[] defaultModuleFiles = new File(String.valueOf(sourceDirPath)).listFiles();\n+        if (defaultModuleFiles != null) {\n+            for (File file : defaultModuleFiles) {\n+                if (file.isFile() && file.getName().endsWith(\".bal\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 329}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNzc2Mw==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488427763", "createdAt": "2020-09-15T06:53:12Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(RepoUtils.getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(MODULES);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(MODULES).resolve(moduleDir.getName())\n+                            .resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(MODULES);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(\"resources\");\n+        Path resourcesSrcDir = sourceDir.resolve(\"resources\");\n+\n+        // if resources not exists ignore copying\n+        if (resourcesSrcDir.toFile().exists()) {\n+            File[] resourceFiles = new File(String.valueOf(resourcesSrcDir)).listFiles();\n+            if (resourceFiles != null && resourceFiles.length > 0) {\n+                Files.walkFileTree(resourcesSrcDir, new CopyResources(resourcesSrcDir, resourcesDir));\n+            }\n+        }\n+    }\n+\n+    private static void copyBallerinaSrcFiles(Path sourceDirPath, Path targetPath) throws IOException {\n+        File[] defaultModuleFiles = new File(String.valueOf(sourceDirPath)).listFiles();\n+        if (defaultModuleFiles != null) {\n+            for (File file : defaultModuleFiles) {\n+                if (file.isFile() && file.getName().endsWith(\".bal\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NDExOQ=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDM1NTA1OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTozNzo0M1rOHRj0QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1NDo1NlrOHRzUPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NDY1Ng==", "bodyText": "Shall we move \"lib\" to ProjectConstants class?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488174656", "createdAt": "2020-09-14T19:37:43Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(RepoUtils.getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(MODULES);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(MODULES).resolve(moduleDir.getName())\n+                            .resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(MODULES);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(\"resources\");\n+        Path resourcesSrcDir = sourceDir.resolve(\"resources\");\n+\n+        // if resources not exists ignore copying\n+        if (resourcesSrcDir.toFile().exists()) {\n+            File[] resourceFiles = new File(String.valueOf(resourcesSrcDir)).listFiles();\n+            if (resourceFiles != null && resourceFiles.length > 0) {\n+                Files.walkFileTree(resourcesSrcDir, new CopyResources(resourcesSrcDir, resourcesDir));\n+            }\n+        }\n+    }\n+\n+    private static void copyBallerinaSrcFiles(Path sourceDirPath, Path targetPath) throws IOException {\n+        File[] defaultModuleFiles = new File(String.valueOf(sourceDirPath)).listFiles();\n+        if (defaultModuleFiles != null) {\n+            for (File file : defaultModuleFiles) {\n+                if (file.isFile() && file.getName().endsWith(\".bal\")) {\n+                    Files.copy(file.toPath(), targetPath.resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPlatformLibs(Path root, Path projectDirectory, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        //If platform libs are defined add them to balo\n+        List<Library> platformLibs = ballerinaToml.getPlatform().libraries;\n+        if (platformLibs == null) {\n+            return;\n+        }\n+        Path platformLibsDir = root.resolve(\"lib\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyODYwNA==", "bodyText": "Added LIB_DIR to ProjectConstants", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488428604", "createdAt": "2020-09-15T06:54:56Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(RepoUtils.getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(MODULES);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(MODULES).resolve(moduleDir.getName())\n+                            .resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(MODULES);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(\"resources\");\n+        Path resourcesSrcDir = sourceDir.resolve(\"resources\");\n+\n+        // if resources not exists ignore copying\n+        if (resourcesSrcDir.toFile().exists()) {\n+            File[] resourceFiles = new File(String.valueOf(resourcesSrcDir)).listFiles();\n+            if (resourceFiles != null && resourceFiles.length > 0) {\n+                Files.walkFileTree(resourcesSrcDir, new CopyResources(resourcesSrcDir, resourcesDir));\n+            }\n+        }\n+    }\n+\n+    private static void copyBallerinaSrcFiles(Path sourceDirPath, Path targetPath) throws IOException {\n+        File[] defaultModuleFiles = new File(String.valueOf(sourceDirPath)).listFiles();\n+        if (defaultModuleFiles != null) {\n+            for (File file : defaultModuleFiles) {\n+                if (file.isFile() && file.getName().endsWith(\".bal\")) {\n+                    Files.copy(file.toPath(), targetPath.resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPlatformLibs(Path root, Path projectDirectory, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        //If platform libs are defined add them to balo\n+        List<Library> platformLibs = ballerinaToml.getPlatform().libraries;\n+        if (platformLibs == null) {\n+            return;\n+        }\n+        Path platformLibsDir = root.resolve(\"lib\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NDY1Ng=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDM3NzA0OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo0NDo1NlrOHRkB7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo1Nzo1M1rOHR3z3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3ODE1Ng==", "bodyText": "Files.copy can throw an I/O exception for reasons other than for a file not found. Therefore, it would be better if we make it more generic and append the exception e to the message.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new BLangCompilerException(\"Dependency jar not found : \" + lib.toString());\n          \n          \n            \n                                throw new BLangCompilerException(\"Error while trying to add platform library to the BALO: \" + lib.toString(), e);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488178156", "createdAt": "2020-09-14T19:44:56Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(RepoUtils.getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(MODULES);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(MODULES).resolve(moduleDir.getName())\n+                            .resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(MODULES);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(\"resources\");\n+        Path resourcesSrcDir = sourceDir.resolve(\"resources\");\n+\n+        // if resources not exists ignore copying\n+        if (resourcesSrcDir.toFile().exists()) {\n+            File[] resourceFiles = new File(String.valueOf(resourcesSrcDir)).listFiles();\n+            if (resourceFiles != null && resourceFiles.length > 0) {\n+                Files.walkFileTree(resourcesSrcDir, new CopyResources(resourcesSrcDir, resourcesDir));\n+            }\n+        }\n+    }\n+\n+    private static void copyBallerinaSrcFiles(Path sourceDirPath, Path targetPath) throws IOException {\n+        File[] defaultModuleFiles = new File(String.valueOf(sourceDirPath)).listFiles();\n+        if (defaultModuleFiles != null) {\n+            for (File file : defaultModuleFiles) {\n+                if (file.isFile() && file.getName().endsWith(\".bal\")) {\n+                    Files.copy(file.toPath(), targetPath.resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPlatformLibs(Path root, Path projectDirectory, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        //If platform libs are defined add them to balo\n+        List<Library> platformLibs = ballerinaToml.getPlatform().libraries;\n+        if (platformLibs == null) {\n+            return;\n+        }\n+        Path platformLibsDir = root.resolve(\"lib\");\n+        Files.createDirectory(platformLibsDir);\n+\n+        for (Library lib : platformLibs) {\n+            if (lib.getModules() == null && lib.getScope() == null) {\n+                Path libPath = Paths.get(lib.getPath());\n+                Path nativeFile = projectDirectory.resolve(libPath);\n+                Path libFileName = libPath.getFileName();\n+                if (libFileName == null) {\n+                    continue;\n+                }\n+                Path targetPath = platformLibsDir.resolve(libFileName.toString());\n+                try {\n+                    Files.copy(nativeFile, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new BLangCompilerException(\"Dependency jar not found : \" + lib.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMjIzOQ==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488502239", "createdAt": "2020-09-15T08:57:53Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +59,347 @@\n  */\n public class BaloWriter {\n \n+    private static final String MODULES = \"modules\";\n+\n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n     public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n         // Check directory permissions\n-        // Handle any io errors\n+//        if (!new File(String.valueOf(path)).canWrite()) {\n+//            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+//        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new NoPermissionException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(RepoUtils.getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(MODULES);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(MODULES).resolve(moduleDir.getName())\n+                            .resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(MODULES);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(MODULES)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(\"resources\");\n+        Path resourcesSrcDir = sourceDir.resolve(\"resources\");\n+\n+        // if resources not exists ignore copying\n+        if (resourcesSrcDir.toFile().exists()) {\n+            File[] resourceFiles = new File(String.valueOf(resourcesSrcDir)).listFiles();\n+            if (resourceFiles != null && resourceFiles.length > 0) {\n+                Files.walkFileTree(resourcesSrcDir, new CopyResources(resourcesSrcDir, resourcesDir));\n+            }\n+        }\n+    }\n+\n+    private static void copyBallerinaSrcFiles(Path sourceDirPath, Path targetPath) throws IOException {\n+        File[] defaultModuleFiles = new File(String.valueOf(sourceDirPath)).listFiles();\n+        if (defaultModuleFiles != null) {\n+            for (File file : defaultModuleFiles) {\n+                if (file.isFile() && file.getName().endsWith(\".bal\")) {\n+                    Files.copy(file.toPath(), targetPath.resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPlatformLibs(Path root, Path projectDirectory, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        //If platform libs are defined add them to balo\n+        List<Library> platformLibs = ballerinaToml.getPlatform().libraries;\n+        if (platformLibs == null) {\n+            return;\n+        }\n+        Path platformLibsDir = root.resolve(\"lib\");\n+        Files.createDirectory(platformLibsDir);\n+\n+        for (Library lib : platformLibs) {\n+            if (lib.getModules() == null && lib.getScope() == null) {\n+                Path libPath = Paths.get(lib.getPath());\n+                Path nativeFile = projectDirectory.resolve(libPath);\n+                Path libFileName = libPath.getFileName();\n+                if (libFileName == null) {\n+                    continue;\n+                }\n+                Path targetPath = platformLibsDir.resolve(libFileName.toString());\n+                try {\n+                    Files.copy(nativeFile, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new BLangCompilerException(\"Dependency jar not found : \" + lib.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3ODE1Ng=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDM4NjE1OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/exceptions/NoPermissionException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo0NzoxOFrOHRkIJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo1ODowOVrOHR30nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3OTc1MQ==", "bodyText": "We can use IOExceptions instead of this custom exception.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488179751", "createdAt": "2020-09-14T19:47:18Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/exceptions/NoPermissionException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.writers.exceptions;\n+\n+/**\n+ * {@code NoPermissionException} throws when permission denied for certain action.\n+ *\n+ * @since 2.0.0\n+ */\n+public class NoPermissionException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMjQzMQ==", "bodyText": "Removed this custom exception", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488502431", "createdAt": "2020-09-15T08:58:09Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/exceptions/NoPermissionException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.writers.exceptions;\n+\n+/**\n+ * {@code NoPermissionException} throws when permission denied for certain action.\n+ *\n+ * @since 2.0.0\n+ */\n+public class NoPermissionException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3OTc1MQ=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjgwMzQxOnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDowNzozN1rOHR6i9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDoxNjowOVrOHR61ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0NzA2MA==", "bodyText": "We should use io.ballerina.projects.utils.ProjectUtils. Shall we copy the required utilities to this class from RepoUtils?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488547060", "createdAt": "2020-09-15T10:07:37Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -18,9 +18,39 @@\n \n package io.ballerina.projects.writers;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n import io.ballerina.projects.Package;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.BaloJson;\n+import io.ballerina.projects.model.Dependency;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.model.PlatformLibrary;\n+import io.ballerina.projects.model.adaptors.JsonCollectionsAdaptor;\n+import io.ballerina.projects.model.adaptors.JsonStringsAdaptor;\n+import io.ballerina.projects.writers.exceptions.NoPermissionException;\n+import org.ballerinalang.compiler.BLangCompilerException;\n+import org.ballerinalang.toml.model.Library;\n+import org.wso2.ballerinalang.util.RepoUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1MTg0Mw==", "bodyText": "Added to this class.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488551843", "createdAt": "2020-09-15T10:16:09Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -18,9 +18,39 @@\n \n package io.ballerina.projects.writers;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n import io.ballerina.projects.Package;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.BaloJson;\n+import io.ballerina.projects.model.Dependency;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.model.PlatformLibrary;\n+import io.ballerina.projects.model.adaptors.JsonCollectionsAdaptor;\n+import io.ballerina.projects.model.adaptors.JsonStringsAdaptor;\n+import io.ballerina.projects.writers.exceptions.NoPermissionException;\n+import org.ballerinalang.compiler.BLangCompilerException;\n+import org.ballerinalang.toml.model.Library;\n+import org.wso2.ballerinalang.util.RepoUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0NzA2MA=="}, "originalCommit": {"oid": "2efcb4da3eb6756bd07fb3b29b32a60b1d519f48"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njg0NjgzOnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDoxOToxOVrOHR69BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDoyNzo1MFrOHR7PiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1MzczMw==", "bodyText": "Since this method already throws an IOException, cant we get rid of this try-catch block?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488553733", "createdAt": "2020-09-15T10:19:19Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +62,356 @@\n  */\n public class BaloWriter {\n \n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n-    public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n+    public static Path write(Package pkg, Path path) throws AccessDeniedException {\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n-        // Check directory permissions\n-        // Handle any io errors\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new AccessDeniedException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(ProjectConstants.MODULES_ROOT);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(ProjectConstants.MODULES_ROOT)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(ProjectConstants.MODULES_ROOT)\n+                            .resolve(moduleDir.getName()).resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(ProjectConstants.MODULES_ROOT);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(ProjectConstants.MODULES_ROOT)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(ProjectConstants.RESOURCE_DIR_NAME);\n+        Path resourcesSrcDir = sourceDir.resolve(ProjectConstants.RESOURCE_DIR_NAME);\n+\n+        // if resources not exists ignore copying\n+        if (resourcesSrcDir.toFile().exists()) {\n+            File[] resourceFiles = new File(String.valueOf(resourcesSrcDir)).listFiles();\n+            if (resourceFiles != null && resourceFiles.length > 0) {\n+                Files.walkFileTree(resourcesSrcDir, new CopyResources(resourcesSrcDir, resourcesDir));\n+            }\n+        }\n+    }\n+\n+    private static void copyBallerinaSrcFiles(Path sourceDirPath, Path targetPath) throws IOException {\n+        File[] defaultModuleFiles = new File(String.valueOf(sourceDirPath)).listFiles();\n+        if (defaultModuleFiles != null) {\n+            for (File file : defaultModuleFiles) {\n+                if (file.isFile() && file.getName().endsWith(ProjectConstants.BLANG_SOURCE_EXT)) {\n+                    Files.copy(file.toPath(), targetPath.resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPlatformLibs(Path root, Path projectDirectory, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        //If platform libs are defined add them to balo\n+        List<Library> platformLibs = ballerinaToml.getPlatform().libraries;\n+        if (platformLibs == null) {\n+            return;\n+        }\n+        Path platformLibsDir = root.resolve(ProjectConstants.LIB_DIR);\n+        Files.createDirectory(platformLibsDir);\n+\n+        for (Library lib : platformLibs) {\n+            if (lib.getModules() == null && lib.getScope() == null) {\n+                Path libPath = Paths.get(lib.getPath());\n+                Path nativeFile = projectDirectory.resolve(libPath);\n+                Path libFileName = libPath.getFileName();\n+                if (libFileName == null) {\n+                    continue;\n+                }\n+                Path targetPath = platformLibsDir.resolve(libFileName.toString());\n+                try {\n+                    Files.copy(nativeFile, targetPath, StandardCopyOption.REPLACE_EXISTING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13af031af8b0b028b751bcc0fad53445140c6e90"}, "originalPosition": 354}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1ODQ3Mg==", "bodyText": "Let's keep this till we implement an exception model", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25653#discussion_r488558472", "createdAt": "2020-09-15T10:27:50Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -29,18 +62,356 @@\n  */\n public class BaloWriter {\n \n+    private BaloWriter() {}\n+\n     /**\n      * Write a package to a .balo and return the created .balo path.\n-     * @param pkg Package to be written as a .balo.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n      * @param path Directory where the .balo should be created.\n      * @return Newly created balo path\n      */\n-    public static Path write(Package pkg, Path path) {\n-        Path balo = path.resolve(\"org-name-any-version.balo\");\n+    public static Path write(Package pkg, Path path) throws AccessDeniedException {\n         // todo check if the given package is compiled properly\n-        // todo check if the path is a directory\n-        // Check directory permissions\n-        // Handle any io errors\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new AccessDeniedException(\"No write access to create balo:\" + path);\n+        }\n+\n+        BallerinaToml ballerinaToml = pkg.ballerinaToml();\n+        Path packagePath = pkg.packagePath();\n+        Path balo = path.resolve(getBaloName(ballerinaToml));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, packagePath, ballerinaToml);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n         return balo;\n     }\n+\n+    private static String getBaloName(BallerinaToml ballerinaToml) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        String platform = ballerinaToml.getPlatform().target;\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return ballerinaToml.getPackage().getOrg() + \"-\" + ballerinaToml.getPackage().getName() + \"-\"\n+                + platform + \"-\" + ballerinaToml.getPackage().getVersion() + \".balo\";\n+    }\n+\n+    private static FileSystem createBaloArchive(Path path) throws IOException {\n+        // TODO check apache commons zip file writer\n+        // Remove if file already exists\n+        if (path.toFile().exists()) {\n+            Files.delete(path);\n+        }\n+        // Define ZIP File System Properties\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        env.put(\"encoding\", \"UTF-8\");\n+\n+        /* Locate File on disk for creation */\n+        URI zipDisk = URI.create(\"jar:\" + path.toUri());\n+        /* Create ZIP file System */\n+        return FileSystems.newFileSystem(zipDisk, env);\n+    }\n+\n+    private static void populateBaloArchive(FileSystem baloFS, Path packagePath, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        Path root = baloFS.getPath(\"/\");\n+        String packageName = ballerinaToml.getPackage().getName();\n+\n+        //   Add spec directory structure items\n+        //\n+        //   org-foo-any-1.0.0.balo\n+        //    \u251c\u2500\u2500 balo.json             ---> Details about balo\n+        //    \u251c\u2500\u2500 package.json          ---> Details about package within balo\n+        //    \u251c\u2500\u2500 docs/\n+        //    \u2502\t   \u251c\u2500\u2500 Package.md       ---> MD file describing the package\n+        //    \u2502\t   \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u2502\t\u251c\u2500\u2500 foo/\n+        //    \u2502\t   \u2502\t\u2502\t \u2514\u2500\u2500 Module.md\n+        //    \u2502\t   \u2502    \u251c\u2500\u2500 foo.bar/\n+        //    \u2502\t   \u2502    \u2514\u2500\u2500 foo.baz/\n+        //    \u2502    \u2514\u2500\u2500 api-docs.json    ---> API Docs json file\n+        //    \u251c\u2500\u2500 modules/\n+        //    \u2502\t   \u251c\u2500\u2500 foo/             ---> content of default module\n+        //    \u2502    \u251c\u2500\u2500 foo.bar/         ---> content of sub module\n+        //    \u2502    \u2514\u2500\u2500 foo.baz/         ---> content of sub module\n+        //    \u2502\t\t    \u251c\u2500\u2500 resources/\n+        //    \u2502\t        \u251c\u2500\u2500 first.bal\n+        //    \u2502\t        \u251c\u2500\u2500 second.bal\n+        //    \u2502         \u2514\u2500\u2500 third.bal\n+        //    \u251c\u2500\u2500 lib/                  ---> Platform Libraries\n+        //    \u2502\t   \u251c\u2500\u2500\n+        //    \u2502\t   \u2514\u2500\u2500 third-party.jar\n+        //    \u2514\u2500\u2500 ext/\n+        //         \u251c\u2500\u2500 datamapper/\n+        //         \u2514\u2500\u2500 ext2/\n+\n+        addBaloJson(root);\n+        addPackageJson(root, ballerinaToml);\n+        addPackageDoc(root, packagePath, ballerinaToml.getPackage().getName());\n+        addPackageSource(root, packagePath, packageName);\n+        // Add platform libs only if it is not a template module\n+        if (!ballerinaToml.isTemplateModule(packageName)) {\n+            addPlatformLibs(root, packagePath, ballerinaToml);\n+        }\n+    }\n+\n+    private static void addBaloJson(Path root) {\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        String baloJson = gson.toJson(new BaloJson());\n+        try {\n+            Files.write(root.resolve(\"balo.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'balo.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageJson(Path root, BallerinaToml ballerinaToml) {\n+        io.ballerina.projects.model.Package pkg = ballerinaToml.getPackage();\n+        PackageJson packageJson = new PackageJson(pkg.getOrg(), pkg.getName(), pkg.getVersion());\n+\n+        // Information extracted from Ballerina.toml\n+        packageJson.setLicenses(pkg.getLicense());\n+        packageJson.setAuthors(pkg.getAuthors());\n+        packageJson.setSourceRepository(pkg.getRepository());\n+        packageJson.setKeywords(pkg.getKeywords());\n+        packageJson.setExported(pkg.getExported());\n+\n+        // Distribution details\n+        packageJson.setBallerinaVersion(getBallerinaVersion());\n+        // TODO Need to set platform, implementation_vendor & spec\n+\n+        // Dependencies and platform libraries\n+        List<Dependency> dependencies = new ArrayList<>();\n+        List<PlatformLibrary> platformLibraries = new ArrayList<>();\n+\n+        // TODO Need to get all the dependencies (Not mentioned in the toml)\n+        Map<String, Object> tomlDependencies = ballerinaToml.getDependencies();\n+        for (String key : tomlDependencies.keySet()) {\n+            Object dependency = tomlDependencies.get(key);\n+            // if String, then Dependency\n+            if (dependency instanceof String) {\n+                String[] keyParts = key.split(\"/\");\n+                Dependency dep = new Dependency(keyParts[0], keyParts[1], (String) dependency);\n+                dependencies.add(dep);\n+            } else { // else, PlatformLibrary\n+                // TODO Need to set platform libraries\n+            }\n+        }\n+\n+        // Remove fields with empty values from `package.json`\n+        Gson gson = new GsonBuilder()\n+                .registerTypeHierarchyAdapter(Collection.class, new JsonCollectionsAdaptor())\n+                .registerTypeHierarchyAdapter(String.class, new JsonStringsAdaptor())\n+                .setPrettyPrinting()\n+                .create();\n+\n+        String baloJson = gson.toJson(packageJson);\n+        try {\n+            Files.write(root.resolve(\"package.json\"), baloJson.getBytes(Charset.defaultCharset()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to write 'package.json' file: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void addPackageDoc(Path root, Path packageSourceDir, String pkgName) throws IOException {\n+        final String packageMdFileName = \"Package.md\";\n+        final String moduleMdFileName = \"Module.md\";\n+\n+        Path packageMd = packageSourceDir.resolve(packageMdFileName);\n+        Path docsDirInBalo = root.resolve(\"docs\");\n+\n+        // If `Package.md` exists, create the docs directory & add `Package.md`\n+        if (packageMd.toFile().exists()) {\n+            Files.createDirectory(docsDirInBalo);\n+            Path packageMdInBalo = docsDirInBalo.resolve(packageMdFileName);\n+            Files.copy(packageMd, packageMdInBalo);\n+        }\n+\n+        // If `Module.md` of default module exists, create `docs/modules` directory & add `Module.md`\n+        Path defaultModuleMd = packageSourceDir.resolve(moduleMdFileName);\n+        Path modulesDirInBaloDocs = docsDirInBalo.resolve(ProjectConstants.MODULES_ROOT);\n+\n+        if (defaultModuleMd.toFile().exists()) {\n+            Files.createDirectory(modulesDirInBaloDocs);\n+\n+            Path defaultModuleDirInBaloDocs = modulesDirInBaloDocs.resolve(pkgName);\n+            Files.createDirectory(defaultModuleDirInBaloDocs);\n+            Path defaultModuleMdInBaloDocs = modulesDirInBaloDocs.resolve(pkgName).resolve(moduleMdFileName);\n+            Files.copy(defaultModuleMd, defaultModuleMdInBaloDocs);\n+        }\n+\n+        // Add other module docs\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(ProjectConstants.MODULES_ROOT)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // Get `Module.md` path\n+                    Path otherModuleMd = packageSourceDir.resolve(ProjectConstants.MODULES_ROOT)\n+                            .resolve(moduleDir.getName()).resolve(moduleMdFileName);\n+                    // Create `package.module` folder, if `Module.md` path exists\n+                    if (otherModuleMd.toFile().exists()) {\n+                        Path otherModuleDirInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName());\n+                        Files.createDirectory(otherModuleDirInBaloDocs);\n+                        Path otherModuleMdInBaloDocs = modulesDirInBaloDocs\n+                                .resolve(pkgName + \".\" + moduleDir.getName()).resolve(moduleMdFileName);\n+                        Files.copy(otherModuleMd, otherModuleMdInBaloDocs);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPackageSource(Path root, Path packageSourceDir, String defaultPackageName)\n+            throws IOException {\n+        // create the module directory in zip\n+        Path packageInBalo = root.resolve(ProjectConstants.MODULES_ROOT);\n+        Files.createDirectory(packageInBalo);\n+\n+        // add default module\n+        Path defaultPkgDirInBalo = packageInBalo.resolve(defaultPackageName);\n+        Files.createDirectory(defaultPkgDirInBalo);\n+\n+        // copy resources directory\n+        copyResourcesDir(packageSourceDir, defaultPkgDirInBalo);\n+        // only add .bal files in the package root\n+        copyBallerinaSrcFiles(packageSourceDir, defaultPkgDirInBalo);\n+\n+        // add other modules\n+        File modulesSourceDir = new File(String.valueOf(packageSourceDir.resolve(ProjectConstants.MODULES_ROOT)));\n+        File[] directoryListing = modulesSourceDir.listFiles();\n+\n+        if (directoryListing != null) {\n+            for (File moduleDir : directoryListing) {\n+                if (moduleDir.isDirectory()) {\n+                    // add module\n+                    Path moduleDirInBalo = packageInBalo.resolve(defaultPackageName + \".\" + moduleDir.getName());\n+                    Files.createDirectory(moduleDirInBalo);\n+\n+                    // copy resources directory\n+                    copyResourcesDir(moduleDir.toPath(), moduleDirInBalo);\n+                    // only add .bal files in the module root\n+                    copyBallerinaSrcFiles(moduleDir.toPath(), moduleDirInBalo);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void copyResourcesDir(Path sourceDir, Path sourceDirInBalo) throws IOException {\n+        Path resourcesDir = sourceDirInBalo.resolve(ProjectConstants.RESOURCE_DIR_NAME);\n+        Path resourcesSrcDir = sourceDir.resolve(ProjectConstants.RESOURCE_DIR_NAME);\n+\n+        // if resources not exists ignore copying\n+        if (resourcesSrcDir.toFile().exists()) {\n+            File[] resourceFiles = new File(String.valueOf(resourcesSrcDir)).listFiles();\n+            if (resourceFiles != null && resourceFiles.length > 0) {\n+                Files.walkFileTree(resourcesSrcDir, new CopyResources(resourcesSrcDir, resourcesDir));\n+            }\n+        }\n+    }\n+\n+    private static void copyBallerinaSrcFiles(Path sourceDirPath, Path targetPath) throws IOException {\n+        File[] defaultModuleFiles = new File(String.valueOf(sourceDirPath)).listFiles();\n+        if (defaultModuleFiles != null) {\n+            for (File file : defaultModuleFiles) {\n+                if (file.isFile() && file.getName().endsWith(ProjectConstants.BLANG_SOURCE_EXT)) {\n+                    Files.copy(file.toPath(), targetPath.resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void addPlatformLibs(Path root, Path projectDirectory, BallerinaToml ballerinaToml)\n+            throws IOException {\n+        //If platform libs are defined add them to balo\n+        List<Library> platformLibs = ballerinaToml.getPlatform().libraries;\n+        if (platformLibs == null) {\n+            return;\n+        }\n+        Path platformLibsDir = root.resolve(ProjectConstants.LIB_DIR);\n+        Files.createDirectory(platformLibsDir);\n+\n+        for (Library lib : platformLibs) {\n+            if (lib.getModules() == null && lib.getScope() == null) {\n+                Path libPath = Paths.get(lib.getPath());\n+                Path nativeFile = projectDirectory.resolve(libPath);\n+                Path libFileName = libPath.getFileName();\n+                if (libFileName == null) {\n+                    continue;\n+                }\n+                Path targetPath = platformLibsDir.resolve(libFileName.toString());\n+                try {\n+                    Files.copy(nativeFile, targetPath, StandardCopyOption.REPLACE_EXISTING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1MzczMw=="}, "originalCommit": {"oid": "13af031af8b0b028b751bcc0fad53445140c6e90"}, "originalPosition": 354}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 197, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}