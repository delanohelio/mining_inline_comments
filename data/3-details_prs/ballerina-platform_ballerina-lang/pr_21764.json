{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTIwOTk0", "number": 21764, "title": "Fix query do action syntax to accommodate a return", "bodyText": "Purpose\n\n\nApproach\n\nThere is a confusion with the syntax of query-action where it was handled as a statement previously but it seems it should handled as similar expression to have return types. Hence the syntax would be something like below,\n\nvar x = from var student in studentList\n             where student.score > 1.0\n             do {\n                    FullName fullName = {firstName: student.firstName, lastName: student.lastName};\n                    nameList[nameList.length()] = fullName;\n              };\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-14T02:41:11Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764", "merged": true, "mergeCommit": {"oid": "0aab3a9819485d47e25fba8df3269a59d862d5d3"}, "closed": true, "closedAt": "2020-03-16T16:15:57Z", "author": {"login": "mohanvive"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNbnw3AH2gAyMzg4MTIwOTk0OmE2ZjZhZDFhNmYzZWQxZDMxYzQyNzhmMDIzODc2NGU2MzRlYWFmNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOHD7hgFqTM3NDkxNjMzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a6f6ad1a6f3ed1d31c4278f0238764e634eaaf52", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6f6ad1a6f3ed1d31c4278f0238764e634eaaf52", "committedDate": "2020-03-14T02:37:58Z", "message": "Fix query do action syntax to accommodate a return"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4694838039acae1bc64afd2facf56c80f9d5ca79", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4694838039acae1bc64afd2facf56c80f9d5ca79", "committedDate": "2020-03-14T03:57:32Z", "message": "Fix the checkstyle issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1582805268bab290c5bd69cae10014dea6878c16", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1582805268bab290c5bd69cae10014dea6878c16", "committedDate": "2020-03-14T05:28:50Z", "message": "Improve the code analyze to mark query-action as action expression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzMzMzQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#pullrequestreview-374733345", "createdAt": "2020-03-14T15:17:21Z", "commit": {"oid": "1582805268bab290c5bd69cae10014dea6878c16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxNzoyMVrOF2aJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxNzoyMVrOF2aJAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTcxMg==", "bodyText": "This has to be the union type of nil type and error type right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#discussion_r392595712", "createdAt": "2020-03-14T15:17:21Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -168,12 +169,26 @@ BLangBlockStmt desugarQueryAction(BLangQueryAction queryAction, SymbolEnv env) {\n         List<BLangWhereClause> whereClauseList = queryAction.whereClauseList;\n         DiagnosticPos pos = fromClause.pos;\n \n+        BLangExpression nilExpression = ASTBuilderUtil.createLiteral(pos, symTable.nilType, Names.NIL_VALUE);\n+        BVarSymbol outputVarSymbol = new BVarSymbol(0, new Name(\"$outputVar$\"),\n+                env.scope.owner.pkgID, symTable.nilType, env.scope.owner);\n+        BLangSimpleVariable outputVariable =\n+                ASTBuilderUtil.createVariable(pos, \"$outputVar$\", symTable.nilType,\n+                        nilExpression, outputVarSymbol);\n+        BLangSimpleVariableDef outputVariableDef =\n+                ASTBuilderUtil.createVariableDef(pos, outputVariable);\n+        BLangSimpleVarRef outputVarRef = ASTBuilderUtil.createVariableRef(pos, outputVariable.symbol);\n+\n         BLangForeach leafForeach = buildFromClauseBlock(fromClauseList);\n         BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n         buildWhereClauseBlock(whereClauseList, letClauseList, leafForeach, foreachBody, doClause.pos);\n         foreachBody.addStatement(doClause.body);\n+        blockNode.stmts.add(outputVariableDef);\n         blockNode.stmts.add(parentForeach);\n-        return blockNode;\n+\n+        BLangStatementExpression stmtExpr = ASTBuilderUtil.createStatementExpression(blockNode, outputVarRef);\n+        stmtExpr.type = symTable.nilType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1582805268bab290c5bd69cae10014dea6878c16"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzMzNTA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#pullrequestreview-374733509", "createdAt": "2020-03-14T15:19:39Z", "commit": {"oid": "1582805268bab290c5bd69cae10014dea6878c16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxOTo0MFrOF2aJmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxOTo0MFrOF2aJmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTg2Nw==", "bodyText": "This has to check if the return type is union of nil type and error type, not just nil type right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#discussion_r392595867", "createdAt": "2020-03-14T15:19:40Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2779,11 +2781,42 @@ public void visit(BLangQueryExpr queryExpr) {\n         }\n \n         BType selectType = checkExpr(selectClause.expression, whereEnv, expSelectType);\n-\n         resultType = selectType == symTable.semanticError ? selectType : new BArrayType(selectType);\n     }\n \n-    SymbolEnv typeCheckFromClause(BLangFromClause fromClause, SymbolEnv parentEnv) {\n+    @Override\n+    public void visit(BLangQueryAction queryAction) {\n+        List<? extends FromClauseNode> fromClauseList = queryAction.fromClauseList;\n+        List<? extends WhereClauseNode> whereClauseList = queryAction.whereClauseList;\n+        List<? extends LetClauseNode> letClauseList = queryAction.letClauseList;\n+        BLangDoClause doClauseNode = queryAction.doClause;\n+\n+        SymbolEnv parentEnv = env;\n+        for (FromClauseNode fromClause : fromClauseList) {\n+            parentEnv = typeCheckFromClause((BLangFromClause) fromClause, parentEnv);\n+        }\n+        for (LetClauseNode letClauseNode : letClauseList) {\n+            parentEnv = typeCheckLetClause((BLangLetClause) letClauseNode, parentEnv);\n+        }\n+\n+        SymbolEnv whereEnv = parentEnv;\n+        for (WhereClauseNode whereClauseNode : whereClauseList) {\n+            BLangWhereClause whereClause = (BLangWhereClause) whereClauseNode;\n+            checkExpr(whereClause.expression, parentEnv);\n+            whereEnv = typeNarrower.evaluateTruth(whereClause.expression, doClauseNode, parentEnv);\n+        }\n+\n+        SymbolEnv blockEnv = SymbolEnv.createBlockEnv(doClauseNode.body, whereEnv);\n+        // Analyze foreach node's statements.\n+        semanticAnalyzer.analyzeStmt(doClauseNode.body, blockEnv);\n+\n+        BType returnType = types.checkType(doClauseNode.pos, symTable.nilType, expType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1582805268bab290c5bd69cae10014dea6878c16"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d32b91783a929fe86f85689f422d78d13743e83", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d32b91783a929fe86f85689f422d78d13743e83", "committedDate": "2020-03-15T04:17:31Z", "message": "Accommodate review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70d31e6f7da56eeaa84351df78d329dce6a0e4b6", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70d31e6f7da56eeaa84351df78d329dce6a0e4b6", "committedDate": "2020-03-15T04:18:58Z", "message": "Accommodate review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODk5OTg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#pullrequestreview-374899985", "createdAt": "2020-03-16T03:58:16Z", "commit": {"oid": "70d31e6f7da56eeaa84351df78d329dce6a0e4b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTE2MzM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#pullrequestreview-374916335", "createdAt": "2020-03-16T05:14:39Z", "commit": {"oid": "70d31e6f7da56eeaa84351df78d329dce6a0e4b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3934, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}