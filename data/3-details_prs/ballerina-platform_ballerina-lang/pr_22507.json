{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjMyMDgx", "number": 22507, "title": "Syntax tree modifer functionality", "bodyText": "Fixes #22441\nSamples\n    /**\n     * An implementation of {@code SyntaxTreeModifier}.\n     */\n    private static class VariableDeclModifier extends SyntaxTreeModifier {\n\n        @Override\n        public Node transform(VariableDeclaration varDeclStmt) {\n            String oldVarName = varDeclStmt.variableName().getText();\n            Identifier newVarName = NodeFactory.createIdentifier(oldVarName + \"new\");\n            return NodeFactory.createVariableDeclaration(varDeclStmt.finalKeyword(), varDeclStmt.typeName(),\n                    newVarName, varDeclStmt.equalsToken(), varDeclStmt.initializer(), varDeclStmt.semicolonToken());\n        }\n    }\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-08T05:11:17Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22507", "merged": true, "mergeCommit": {"oid": "64fa6fe790ba424a5a13ff9a127401308a8a6f96"}, "closed": true, "closedAt": "2020-04-10T04:08:37Z", "author": {"login": "sameerajayasoma"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVelJUgH2gAyNDAwNjMyMDgxOmVhMjBhOTRkYzE3M2E3YzVmOTRjMWJiOTdlMzgyNDBkMmE2Y2ZhYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWIAWFAH2gAyNDAwNjMyMDgxOjE1MTBjOTE3NjVkZTg3MzBmMTljNzQyMzBlOGU0MWFmMmUxMjQxMTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea20a94dc173a7c5f94c1bb97e38240d2a6cfaa6", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea20a94dc173a7c5f94c1bb97e38240d2a6cfaa6", "committedDate": "2020-04-08T02:36:13Z", "message": "Add toString, hashCode and equals implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e61a5584e380ca58b340349b70743518fb37bf51", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e61a5584e380ca58b340349b70743518fb37bf51", "committedDate": "2020-04-08T02:38:00Z", "message": "Add a method create an unlinked external tree node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "253180b982004cecd90c6cce49ca84fe5258e360", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/253180b982004cecd90c6cce49ca84fe5258e360", "committedDate": "2020-04-08T04:58:27Z", "message": "Add a method to retrieve the text value of a token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f943e39720e871c3753cbbdaceb2053c59bae32", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f943e39720e871c3753cbbdaceb2053c59bae32", "committedDate": "2020-04-08T05:03:40Z", "message": "Introduce syntax tree modifier utility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38c2f6d828465a60e3e40708ba07a888280e58a", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b38c2f6d828465a60e3e40708ba07a888280e58a", "committedDate": "2020-04-08T05:04:21Z", "message": "Add test cases for the syntax tree modifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "474dabbf49b572e752a5526598b16f61b56c4201", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/474dabbf49b572e752a5526598b16f61b56c4201", "committedDate": "2020-04-08T05:12:10Z", "message": "Update variable_decl_stmt_modify.bal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTMwMzIw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22507#pullrequestreview-389930320", "createdAt": "2020-04-08T12:35:18Z", "commit": {"oid": "474dabbf49b572e752a5526598b16f61b56c4201"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjozNToxOFrOGCtHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjozNToxOFrOGCtHsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTU4Nw==", "bodyText": "Can we delegate this to a common method? something like: validateNodes(Node... nodes) that loops through and validates", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22507#discussion_r405489587", "createdAt": "2020-04-08T12:35:18Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+import io.ballerinalang.compiler.internal.parser.tree.STNodeFactory;\n+import io.ballerinalang.compiler.internal.parser.tree.STToken;\n+import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * A factory for creating nodes in the syntax tree.\n+ *\n+ * @since 1.3.0\n+ */\n+public class NodeFactory {\n+\n+    private NodeFactory() {\n+    }\n+\n+    public static ModulePart createModulePart(NodeList<ImportDeclaration> imports,\n+                                              NodeList<ModuleMemberDeclaration> members,\n+                                              Token eofToken) {\n+        Objects.requireNonNull(imports, \"imports must not be null\");\n+        Objects.requireNonNull(members, \"members must not be null\");\n+        Objects.requireNonNull(eofToken, \"eofToken must not be null\");\n+        STNode stModulePart = STNodeFactory.createModulePart(imports.underlyingListNode().internalNode(),\n+                members.underlyingListNode().internalNode(), eofToken.internalNode());\n+        return stModulePart.createUnlinkedFacade();\n+    }\n+\n+    public static FunctionDefinitionNode createFunctionDefinitionNode(Token visibilityQualifier,\n+                                                                      Token functionKeyword,\n+                                                                      Identifier functionName,\n+                                                                      Token openParenToken,\n+                                                                      NodeList<Parameter> parameters,\n+                                                                      Token closeParenToken,\n+                                                                      Node returnTypeDesc,\n+                                                                      BlockStatement functionBody) {\n+        Objects.requireNonNull(visibilityQualifier, \"visibilityQualifier must not be null\");\n+        Objects.requireNonNull(functionKeyword, \"functionKeyword must not be null\");\n+        Objects.requireNonNull(functionName, \"functionName must not be null\");\n+        Objects.requireNonNull(openParenToken, \"openParenToken must not be null\");\n+        Objects.requireNonNull(parameters, \"parameters must not be null\");\n+        Objects.requireNonNull(closeParenToken, \"closeParenToken must not be null\");\n+        Objects.requireNonNull(returnTypeDesc, \"returnTypeDesc must not be null\");\n+        Objects.requireNonNull(functionBody, \"functionBody must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474dabbf49b572e752a5526598b16f61b56c4201"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ab97c7b3e4333cb1f835f8e9a44f425cca88734", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ab97c7b3e4333cb1f835f8e9a44f425cca88734", "committedDate": "2020-04-08T18:51:54Z", "message": "Rename getText() to text() in token classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fe3110fe8b545b18745c8d6932f355adb2de6b4", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5fe3110fe8b545b18745c8d6932f355adb2de6b4", "committedDate": "2020-04-08T18:52:39Z", "message": "Add a test that renames all identifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544ff90a5a53fa4ea53b94deb97f0918fd3eb200", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/544ff90a5a53fa4ea53b94deb97f0918fd3eb200", "committedDate": "2020-04-10T01:23:26Z", "message": "Update internal/external syntax tree nodes\n\nInternal and external tree nodes have been generated using the tool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1510c91765de8730f19c74230e8e41af2e124111", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1510c91765de8730f19c74230e8e41af2e124111", "committedDate": "2020-04-10T02:52:02Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3673, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}