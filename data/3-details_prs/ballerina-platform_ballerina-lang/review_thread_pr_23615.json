{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MDY3MjUw", "number": 23615, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjoyODowMlrOEA3tQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0MTo0NlrOEA39Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzQ4MTYxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjoyODowMlrOGcaneA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozNzowNFrOGch5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0OTQwMA==", "bodyText": "extra space after = sign.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432449400", "createdAt": "2020-05-29T12:28:02Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1429,6 +1434,42 @@ public BLangNode transform(SyncSendActionNode syncSendActionNode) {\n         return workerSendExpr;\n     }\n \n+    @Override\n+    public BLangNode transform(ImplicitAnonymousFunctionExpressionNode implicitAnonymousFunctionExpressionNode) {\n+        BLangArrowFunction arrowFunction = (BLangArrowFunction) TreeBuilder.createArrowFunctionNode();\n+        arrowFunction.pos = getPosition(implicitAnonymousFunctionExpressionNode);\n+        arrowFunction.functionName = TreeBuilder.createIdentifierNode();\n+        //TODO initialize other attributes\n+        //arrowFunction.funcType;\n+        //arrowFunction.function;\n+\n+        // Set Parameters\n+        Node param = implicitAnonymousFunctionExpressionNode.params();\n+        if (param.kind() == SyntaxKind.INFER_PARAM_LIST) {\n+            try {\n+                ImplicitAnonymousFunctionParameters paramsNode = (ImplicitAnonymousFunctionParameters) param;\n+                SeparatedNodeList<SimpleNameReferenceNode> paramList = paramsNode.parameters();\n+\n+                for (SimpleNameReferenceNode child : paramList) {\n+                    BLangUserDefinedType userDefinedType = (BLangUserDefinedType) child.apply(this);\n+                    BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+                    parameter.name = userDefinedType.typeName;\n+                    arrowFunction.params.add(parameter);\n+                }\n+            } catch (Exception e) {\n+                System.out.println(\"Empty parameter list\");\n+            }\n+        } else {\n+            BLangUserDefinedType userDefinedType = (BLangUserDefinedType) param.apply(this);\n+            BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+            parameter.name = userDefinedType.typeName;\n+            arrowFunction.params.add(parameter);\n+        }\n+        arrowFunction.body = new BLangExprFunctionBody();\n+        arrowFunction.body.expr =  createExpression(implicitAnonymousFunctionExpressionNode.expression());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2ODY0NQ==", "bodyText": "Removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432568645", "createdAt": "2020-05-29T15:37:04Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1429,6 +1434,42 @@ public BLangNode transform(SyncSendActionNode syncSendActionNode) {\n         return workerSendExpr;\n     }\n \n+    @Override\n+    public BLangNode transform(ImplicitAnonymousFunctionExpressionNode implicitAnonymousFunctionExpressionNode) {\n+        BLangArrowFunction arrowFunction = (BLangArrowFunction) TreeBuilder.createArrowFunctionNode();\n+        arrowFunction.pos = getPosition(implicitAnonymousFunctionExpressionNode);\n+        arrowFunction.functionName = TreeBuilder.createIdentifierNode();\n+        //TODO initialize other attributes\n+        //arrowFunction.funcType;\n+        //arrowFunction.function;\n+\n+        // Set Parameters\n+        Node param = implicitAnonymousFunctionExpressionNode.params();\n+        if (param.kind() == SyntaxKind.INFER_PARAM_LIST) {\n+            try {\n+                ImplicitAnonymousFunctionParameters paramsNode = (ImplicitAnonymousFunctionParameters) param;\n+                SeparatedNodeList<SimpleNameReferenceNode> paramList = paramsNode.parameters();\n+\n+                for (SimpleNameReferenceNode child : paramList) {\n+                    BLangUserDefinedType userDefinedType = (BLangUserDefinedType) child.apply(this);\n+                    BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+                    parameter.name = userDefinedType.typeName;\n+                    arrowFunction.params.add(parameter);\n+                }\n+            } catch (Exception e) {\n+                System.out.println(\"Empty parameter list\");\n+            }\n+        } else {\n+            BLangUserDefinedType userDefinedType = (BLangUserDefinedType) param.apply(this);\n+            BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+            parameter.name = userDefinedType.typeName;\n+            arrowFunction.params.add(parameter);\n+        }\n+        arrowFunction.body = new BLangExprFunctionBody();\n+        arrowFunction.body.expr =  createExpression(implicitAnonymousFunctionExpressionNode.expression());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0OTQwMA=="}, "originalCommit": {"oid": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzUyMTQ0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0MToxOFrOGcbA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozNzoyOFrOGch6SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NTkwMA==", "bodyText": "above will fail the style guide.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432455900", "createdAt": "2020-05-29T12:41:18Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1429,6 +1434,42 @@ public BLangNode transform(SyncSendActionNode syncSendActionNode) {\n         return workerSendExpr;\n     }\n \n+    @Override\n+    public BLangNode transform(ImplicitAnonymousFunctionExpressionNode implicitAnonymousFunctionExpressionNode) {\n+        BLangArrowFunction arrowFunction = (BLangArrowFunction) TreeBuilder.createArrowFunctionNode();\n+        arrowFunction.pos = getPosition(implicitAnonymousFunctionExpressionNode);\n+        arrowFunction.functionName = TreeBuilder.createIdentifierNode();\n+        //TODO initialize other attributes\n+        //arrowFunction.funcType;\n+        //arrowFunction.function;\n+\n+        // Set Parameters\n+        Node param = implicitAnonymousFunctionExpressionNode.params();\n+        if (param.kind() == SyntaxKind.INFER_PARAM_LIST) {\n+            try {\n+                ImplicitAnonymousFunctionParameters paramsNode = (ImplicitAnonymousFunctionParameters) param;\n+                SeparatedNodeList<SimpleNameReferenceNode> paramList = paramsNode.parameters();\n+\n+                for (SimpleNameReferenceNode child : paramList) {\n+                    BLangUserDefinedType userDefinedType = (BLangUserDefinedType) child.apply(this);\n+                    BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+                    parameter.name = userDefinedType.typeName;\n+                    arrowFunction.params.add(parameter);\n+                }\n+            } catch (Exception e) {\n+                System.out.println(\"Empty parameter list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2ODkwNA==", "bodyText": "Removed try catch.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432568904", "createdAt": "2020-05-29T15:37:28Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1429,6 +1434,42 @@ public BLangNode transform(SyncSendActionNode syncSendActionNode) {\n         return workerSendExpr;\n     }\n \n+    @Override\n+    public BLangNode transform(ImplicitAnonymousFunctionExpressionNode implicitAnonymousFunctionExpressionNode) {\n+        BLangArrowFunction arrowFunction = (BLangArrowFunction) TreeBuilder.createArrowFunctionNode();\n+        arrowFunction.pos = getPosition(implicitAnonymousFunctionExpressionNode);\n+        arrowFunction.functionName = TreeBuilder.createIdentifierNode();\n+        //TODO initialize other attributes\n+        //arrowFunction.funcType;\n+        //arrowFunction.function;\n+\n+        // Set Parameters\n+        Node param = implicitAnonymousFunctionExpressionNode.params();\n+        if (param.kind() == SyntaxKind.INFER_PARAM_LIST) {\n+            try {\n+                ImplicitAnonymousFunctionParameters paramsNode = (ImplicitAnonymousFunctionParameters) param;\n+                SeparatedNodeList<SimpleNameReferenceNode> paramList = paramsNode.parameters();\n+\n+                for (SimpleNameReferenceNode child : paramList) {\n+                    BLangUserDefinedType userDefinedType = (BLangUserDefinedType) child.apply(this);\n+                    BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+                    parameter.name = userDefinedType.typeName;\n+                    arrowFunction.params.add(parameter);\n+                }\n+            } catch (Exception e) {\n+                System.out.println(\"Empty parameter list\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NTkwMA=="}, "originalCommit": {"oid": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzUyMjc1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0MTo0NlrOGcbBsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozNzozNFrOGch6hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NjExNQ==", "bodyText": "What is the Exception you are trying to catch? we should fix it properly form the parser side first.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432456115", "createdAt": "2020-05-29T12:41:46Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1429,6 +1434,42 @@ public BLangNode transform(SyncSendActionNode syncSendActionNode) {\n         return workerSendExpr;\n     }\n \n+    @Override\n+    public BLangNode transform(ImplicitAnonymousFunctionExpressionNode implicitAnonymousFunctionExpressionNode) {\n+        BLangArrowFunction arrowFunction = (BLangArrowFunction) TreeBuilder.createArrowFunctionNode();\n+        arrowFunction.pos = getPosition(implicitAnonymousFunctionExpressionNode);\n+        arrowFunction.functionName = TreeBuilder.createIdentifierNode();\n+        //TODO initialize other attributes\n+        //arrowFunction.funcType;\n+        //arrowFunction.function;\n+\n+        // Set Parameters\n+        Node param = implicitAnonymousFunctionExpressionNode.params();\n+        if (param.kind() == SyntaxKind.INFER_PARAM_LIST) {\n+            try {\n+                ImplicitAnonymousFunctionParameters paramsNode = (ImplicitAnonymousFunctionParameters) param;\n+                SeparatedNodeList<SimpleNameReferenceNode> paramList = paramsNode.parameters();\n+\n+                for (SimpleNameReferenceNode child : paramList) {\n+                    BLangUserDefinedType userDefinedType = (BLangUserDefinedType) child.apply(this);\n+                    BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+                    parameter.name = userDefinedType.typeName;\n+                    arrowFunction.params.add(parameter);\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2ODk2Ng==", "bodyText": "Removed try catch.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432568966", "createdAt": "2020-05-29T15:37:34Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1429,6 +1434,42 @@ public BLangNode transform(SyncSendActionNode syncSendActionNode) {\n         return workerSendExpr;\n     }\n \n+    @Override\n+    public BLangNode transform(ImplicitAnonymousFunctionExpressionNode implicitAnonymousFunctionExpressionNode) {\n+        BLangArrowFunction arrowFunction = (BLangArrowFunction) TreeBuilder.createArrowFunctionNode();\n+        arrowFunction.pos = getPosition(implicitAnonymousFunctionExpressionNode);\n+        arrowFunction.functionName = TreeBuilder.createIdentifierNode();\n+        //TODO initialize other attributes\n+        //arrowFunction.funcType;\n+        //arrowFunction.function;\n+\n+        // Set Parameters\n+        Node param = implicitAnonymousFunctionExpressionNode.params();\n+        if (param.kind() == SyntaxKind.INFER_PARAM_LIST) {\n+            try {\n+                ImplicitAnonymousFunctionParameters paramsNode = (ImplicitAnonymousFunctionParameters) param;\n+                SeparatedNodeList<SimpleNameReferenceNode> paramList = paramsNode.parameters();\n+\n+                for (SimpleNameReferenceNode child : paramList) {\n+                    BLangUserDefinedType userDefinedType = (BLangUserDefinedType) child.apply(this);\n+                    BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+                    parameter.name = userDefinedType.typeName;\n+                    arrowFunction.params.add(parameter);\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NjExNQ=="}, "originalCommit": {"oid": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3528, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}