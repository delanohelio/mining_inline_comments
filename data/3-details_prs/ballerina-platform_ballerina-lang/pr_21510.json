{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0Njk4MDE5", "number": 21510, "title": "Introduce client response data binding support", "bodyText": "Purpose\nRemote function definition\npublic remote function post(@untainted string path, RequestMessage message, TargetType targetType = Response) returns Response|PayloadType|ClientError {\nData Types\n# The types of response payload that are returned by HTTP `client` after data binding operation.\npublic type PayloadType string|xml|json|byte[]|record {| anydata...; |}|record {| anydata...; |}[];\n\n# The types of data values that are expected by HTTP `client` to return after data binding operation.\npublic type TargetType typedesc<Response|string|xml|json|byte[]|record {| anydata...; |}| record {| anydata...; |}[]>;\nExample\nvar payload = <json> check clientEndpoint->post(\"/get?test=123\", request, targetType = json);\njson j = <json> payload\nTwo error types will be introduced as ClientRequestError(4XX) and RemoteServerError (5XX). The response payload will be attached to the message field of error detail record and the status code will be populated to an optional field in the same error detail.\nDefinition :\n# Defines the possible client operation error types\npublic type ClientError ResiliencyError|ClientAuthError|...|\n                          RemoteServerError|ClientRequestError;\n\npublic type Detail record {|\n    string message;\n    error cause?;\n    int statusCode?;\n|};\n\n# Represents an error that occurred due to a failure of the remote server\npublic type RemoteServerError error<\"{ballerina/http}RemoteServerError\", Detail>;\n\n# Represents an error that occurred due to bad syntax or incomplete info of client request\npublic type ClientRequestError error<\"{ballerina/http}ClientRequestError\", Detail>;\nFixes #21128\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples\n``", "createdAt": "2020-03-06T08:37:21Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510", "merged": true, "mergeCommit": {"oid": "f22324096fc6f964a37330e6f0549acaabdb7ab7"}, "closed": true, "closedAt": "2020-04-06T03:40:13Z", "author": {"login": "chamil321"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHaig9gH2gAyMzg0Njk4MDE5OjFjY2I2MGIyYzQzM2JjMDIxYzVmYzA4YTViNWI2MjA0MDRjNzJkNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUt7tjgH2gAyMzg0Njk4MDE5OmMxYmYzM2Q1NjQyYWZhZjAwMzgxYjQzNzQ0YzNiOGQyNWIxYmFmN2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ccb60b2c433bc021c5fc08a5b5b620404c72d51", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ccb60b2c433bc021c5fc08a5b5b620404c72d51", "committedDate": "2020-02-24T09:58:47Z", "message": "Change function signature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a39f5081ea781a81757c4feb9e0d7fc6fc442560", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a39f5081ea781a81757c4feb9e0d7fc6fc442560", "committedDate": "2020-02-25T06:08:58Z", "message": "Add test logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd7afd09e1d390ac5f47516ae142fa0d31a59484", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd7afd09e1d390ac5f47516ae142fa0d31a59484", "committedDate": "2020-02-28T04:20:56Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into http-2.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b48bd5ffe35862226c21ece0fa054b4b54549ef7", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b48bd5ffe35862226c21ece0fa054b4b54549ef7", "committedDate": "2020-03-04T05:28:23Z", "message": "Modify chained clients with the API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bbb3fff26c4dc0386f1903c56b9e32387b68866", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bbb3fff26c4dc0386f1903c56b9e32387b68866", "committedDate": "2020-03-06T05:00:37Z", "message": "Add integration test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd83a14ef4c9c131f44287d45e8a6eebf2db3a4d", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd83a14ef4c9c131f44287d45e8a6eebf2db3a4d", "committedDate": "2020-03-06T05:25:19Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into http-2.0\n\n# Conflicts:\n#\tstdlib/http/src/main/ballerina/src/http/http_commons.bal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce3b012ff638c23c23b029cd551e6e6a5ec71b3e", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce3b012ff638c23c23b029cd551e6e6a5ec71b3e", "committedDate": "2020-03-06T08:29:55Z", "message": "Add test module for v2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ffc4f191f601f92e1ba95ce2deb2447c77f9414", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ffc4f191f601f92e1ba95ce2deb2447c77f9414", "committedDate": "2020-03-09T14:06:13Z", "message": "Add negative test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae89a931906be3e14ff78891b6d556a084eec96f", "committedDate": "2020-04-01T16:18:04Z", "message": "Address review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzI2NTk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#pullrequestreview-386326595", "createdAt": "2020-04-02T11:13:38Z", "commit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "state": "COMMENTED", "comments": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMToxMzozOFrOF_mbog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMToxOTo0MlrOF_mnZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDI3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234274", "createdAt": "2020-04-02T11:13:38Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -67,19 +67,28 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDQwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234404", "createdAt": "2020-04-02T11:13:54Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -67,19 +67,28 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDQ5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234493", "createdAt": "2020-04-02T11:14:04Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -67,19 +67,28 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDYwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response or an `http:ClientError` if failed to establish the communication with the upstream server", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234604", "createdAt": "2020-04-02T11:14:15Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -67,19 +67,28 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function post(@untainted string path, RequestMessage message, public TargetType targetType = Response)\n+            returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->post(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->post(path, req);\n+        }\n+        var result = self.httpClient->post(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.head()` function can be used to send HTTP HEAD requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function head(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + return - The response or an `http:ClientError` if failed to establish communication with the upstream server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDcxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234718", "createdAt": "2020-04-02T11:14:31Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -89,10 +98,18 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function put(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDgwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234802", "createdAt": "2020-04-02T11:14:43Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -89,10 +98,18 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function put(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDkyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234925", "createdAt": "2020-04-02T11:14:58Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -89,10 +98,18 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function put(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTA2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235066", "createdAt": "2020-04-02T11:15:13Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTIxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235213", "createdAt": "2020-04-02T11:15:30Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTMyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235321", "createdAt": "2020-04-02T11:15:41Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTYyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235621", "createdAt": "2020-04-02T11:16:23Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTcyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235725", "createdAt": "2020-04-02T11:16:36Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTgwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235805", "createdAt": "2020-04-02T11:16:44Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjA5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236090", "createdAt": "2020-04-02T11:17:21Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjIyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236221", "createdAt": "2020-04-02T11:17:39Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjI3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236276", "createdAt": "2020-04-02T11:17:46Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjQxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236414", "createdAt": "2020-04-02T11:18:03Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjUzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236534", "createdAt": "2020-04-02T11:18:16Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjU5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236594", "createdAt": "2020-04-02T11:18:24Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjc0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236740", "createdAt": "2020-04-02T11:18:37Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjgzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236839", "createdAt": "2020-04-02T11:18:51Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjkxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236915", "createdAt": "2020-04-02T11:18:59Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNzA0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402237048", "createdAt": "2020-04-02T11:19:13Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function options(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->options(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->options(path, message = req);\n+        }\n+        var result = self.httpClient->options(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.forward()` function can be used to invoke an HTTP call with inbound request's HTTP verb\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n-        return self.httpClient->forward(path, request);\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNzE4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402237189", "createdAt": "2020-04-02T11:19:29Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function options(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->options(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->options(path, message = req);\n+        }\n+        var result = self.httpClient->options(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.forward()` function can be used to invoke an HTTP call with inbound request's HTTP verb\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n-        return self.httpClient->forward(path, request);\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNzI4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402237284", "createdAt": "2020-04-02T11:19:42Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function options(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->options(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->options(path, message = req);\n+        }\n+        var result = self.httpClient->options(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.forward()` function can be used to invoke an HTTP call with inbound request's HTTP verb\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n-        return self.httpClient->forward(path, request);\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzMyODM4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#pullrequestreview-386332838", "createdAt": "2020-04-02T11:23:58Z", "commit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMToyOToyN1rOF_m6tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMToyOTo1MVrOF_m7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0MjIzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or the response payload if data-binding expected otherwise an\n          \n          \n            \n                # + return - The response for the request or the response payload if data binding is expected. Otherwise, an", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402242230", "createdAt": "2020-04-02T11:29:27Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -38,8 +38,11 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - The types of payloads that are expected be returned after data-binding\n+    # + return - The response for the request or the response payload if data-binding expected otherwise an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0MjQyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `http:ClientError` if failed to establish communication with the upstream server or data binding failure\n          \n          \n            \n                # `http:ClientError` is returned  if failed to establish the communication with the upstream server or data binding failure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402242428", "createdAt": "2020-04-02T11:29:51Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -38,8 +38,11 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - The types of payloads that are expected be returned after data-binding\n+    # + return - The response for the request or the response payload if data-binding expected otherwise an\n+    # `http:ClientError` if failed to establish communication with the upstream server or data binding failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzM4MDc4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#pullrequestreview-386338078", "createdAt": "2020-04-02T11:32:31Z", "commit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTozNToyNVrOF_nGBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTozNjozNlrOF_nIXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTEyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the reason string for the `http:IllegalDataBindingStateError`\n          \n          \n            \n            # Represents the reason string for the `http:IllegalDataBindingStateError`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245126", "createdAt": "2020-04-02T11:35:25Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTI3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents a data binding illegal state error\n          \n          \n            \n            # Represents an illegal data-binding  state error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245277", "createdAt": "2020-04-02T11:35:42Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTM5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the reason string for the `http:ClientRequestError`\n          \n          \n            \n            # Represents the reason string for the `http:ClientRequestError`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245398", "createdAt": "2020-04-02T11:35:55Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTU3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)\n          \n          \n            \n            # Represents an error, which occurred due to bad syntax or incomplete info in the client request(4xx HTTP response).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245572", "createdAt": "2020-04-02T11:36:15Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`\n+public const CLIENT_REQUEST_ERROR = \"{ballerina/http}ClientRequestError\";\n+# Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTYyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the reason string for the `http:RemoteServerError`\n          \n          \n            \n            # Represents the reason string for the `http:RemoteServerError`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245620", "createdAt": "2020-04-02T11:36:23Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`\n+public const CLIENT_REQUEST_ERROR = \"{ballerina/http}ClientRequestError\";\n+# Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)\n+public type ClientRequestError error<CLIENT_REQUEST_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:RemoteServerError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents an error that occurred due to a failure of the remote server(5xx HTTP response)\n          \n          \n            \n            # Represents an error, which occurred due to a failure of the remote server(5xx HTTP response).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245724", "createdAt": "2020-04-02T11:36:36Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`\n+public const CLIENT_REQUEST_ERROR = \"{ballerina/http}ClientRequestError\";\n+# Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)\n+public type ClientRequestError error<CLIENT_REQUEST_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:RemoteServerError`\n+public const REMOTE_SERVER_ERROR = \"{ballerina/http}RemoteServerError\";\n+# Represents an error that occurred due to a failure of the remote server(5xx HTTP response)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzQyNDgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#pullrequestreview-386342483", "createdAt": "2020-04-02T11:39:45Z", "commit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTozOTo0NVrOF_nOVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTozOTo0NVrOF_nOVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NzI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Ballerina HTTP Union Errors\n          \n          \n            \n            // Ballerina HTTP union errors.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402247252", "createdAt": "2020-04-02T11:39:45Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`\n+public const CLIENT_REQUEST_ERROR = \"{ballerina/http}ClientRequestError\";\n+# Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)\n+public type ClientRequestError error<CLIENT_REQUEST_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:RemoteServerError`\n+public const REMOTE_SERVER_ERROR = \"{ballerina/http}RemoteServerError\";\n+# Represents an error that occurred due to a failure of the remote server(5xx HTTP response)\n+public type RemoteServerError error<REMOTE_SERVER_ERROR, Detail>;\n+\n // Ballerina HTTP Union Errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzQ3Mzkz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#pullrequestreview-386347393", "createdAt": "2020-04-02T11:47:46Z", "commit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo0Nzo0NlrOF_ndgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo1NDo1NlrOF_nsPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTEzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents HTTP/1.0 protocol\n          \n          \n            \n            # Represents the HTTP/1.0 protocol", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251139", "createdAt": "2020-04-02T11:47:46Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTIyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents HTTP/1.1 protocol\n          \n          \n            \n            # Represents the HTTP/1.1 protocol", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251226", "createdAt": "2020-04-02T11:47:56Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTI5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents HTTP/2.0 protocol\n          \n          \n            \n            # Represents the HTTP/2.0 protocol", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251290", "createdAt": "2020-04-02T11:48:05Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTQ1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents http protocol scheme\n          \n          \n            \n            # Represents the HTTP protocol scheme", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251459", "createdAt": "2020-04-02T11:48:23Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTU4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents https protocol scheme\n          \n          \n            \n            # Represents the HTTPS protocol scheme", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251581", "createdAt": "2020-04-02T11:48:37Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MjA0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constant for the http error code\n          \n          \n            \n            # Constant for the http error code\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constant for the http error code\n          \n          \n            \n            # Constant for the HTTP error code", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402252040", "createdAt": "2020-04-02T11:49:27Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MjExMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constant for the default listener endpoint timeout\n          \n          \n            \n            # Constant for the default listener endpoint timeout", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402252113", "createdAt": "2020-04-02T11:49:36Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MzA2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Maximum number of requests that can be processed at a given time on a single connection.\n          \n          \n            \n            # Maximum number of requests that can be processed at a given time on a single connection", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402253067", "createdAt": "2020-04-02T11:51:28Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MzE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents multipart primary type\n          \n          \n            \n            # Represents the multipart primary type", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402253174", "createdAt": "2020-04-02T11:51:39Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDEwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constant for the identify not an HTTP Operation\n          \n          \n            \n            # Constant to identify a none-HTTP operation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254101", "createdAt": "2020-04-02T11:53:21Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDI0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n          \n          \n            \n            # `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254245", "createdAt": "2020-04-02T11:53:37Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDM2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #         otherwise chunking header is set in the outbound request/response\n          \n          \n            \n            #         Otherwise, the chunking header is set in the outbound request/response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254365", "createdAt": "2020-04-02T11:53:51Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDUyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `ALWAYS`: Always set chunking header in the response\n          \n          \n            \n            # `ALWAYS`: Always set the chunking header in the response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254527", "createdAt": "2020-04-02T11:54:09Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDY2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If the payload is less than 8KB, content-length header is set in the outbound request/response,\n          \n          \n            \n            # If the payload is less than 8KB, content-length header is set in the outbound request/response.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254666", "createdAt": "2020-04-02T11:54:25Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDkxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # otherwise chunking header is set in the outbound request/response.}\n          \n          \n            \n            # Otherwise, the chunking header is set in the outbound request/response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254910", "createdAt": "2020-04-02T11:54:56Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzYzOTI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#pullrequestreview-386363925", "createdAt": "2020-04-02T12:12:19Z", "commit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "state": "COMMENTED", "comments": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoxMjoxOVrOF_oRKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoyNTowMFrOF_ovMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NDM2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Always set chunking header in the response.\n          \n          \n            \n            # Always set the chunking header in the response.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402264360", "createdAt": "2020-04-02T12:12:19Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NDQ1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n          \n          \n            \n            # Never set the chunking header even if the payload is larger than 8KB in the outbound request/response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402264454", "createdAt": "2020-04-02T12:12:30Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NTIwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Options to compress using gzip or deflate.\n          \n          \n            \n            # Options to compress using GZIP or DEFLATE.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402265202", "createdAt": "2020-04-02T12:13:49Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NTcxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n          \n          \n            \n            # `ALWAYS`: Always set the accept-encoding/content-encoding in the outbound request/response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402265711", "createdAt": "2020-04-02T12:14:43Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NTg0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n          \n          \n            \n            # `NEVER`: Never set the accept-encoding/content-encoding header in the outbound request/response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402265845", "createdAt": "2020-04-02T12:14:57Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NjA4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n          \n          \n            \n            # When the service behaves as an HTTP gateway, the accept-encoding option of the inbound request/response is set as the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402266085", "createdAt": "2020-04-02T12:15:21Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NjUxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n          \n          \n            \n            # `AUTO`: When the service behaves as an HTTP gateway, the accept-encoding option of the inbound request/response is set as the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402266513", "createdAt": "2020-04-02T12:16:10Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NzEyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # outbound request/response accept-encoding/content-encoding option.\n          \n          \n            \n            # accept-encoding/content-encoding option of the outbound request/response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402267129", "createdAt": "2020-04-02T12:17:22Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NzMzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Always set accept-encoding/content-encoding in outbound request/response.\n          \n          \n            \n            # Always set the accept-encoding/content-encoding option in the outbound request/response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402267330", "createdAt": "2020-04-02T12:17:45Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NzUyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Never set accept-encoding/content-encoding header in outbound request/response.\n          \n          \n            \n            # Never set the accept-encoding/content-encoding header in the outbound request/response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402267527", "createdAt": "2020-04-02T12:18:07Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2Nzg3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n          \n          \n            \n            # The types of messages that are accepted by the HTTP `client` when sending out the outbound request", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402267872", "createdAt": "2020-04-02T12:18:42Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n          \n          \n            \n            # The types of messages that are accepted by the HTTP `listener` when sending out the outbound response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268173", "createdAt": "2020-04-02T12:19:03Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODM0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The type of user defined custom record.\n          \n          \n            \n            # The type of the user-defined custom record", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268344", "createdAt": "2020-04-02T12:19:17Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODU2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The types of response payload that are returned by HTTP `client` after data binding operation.\n          \n          \n            \n            # The types of the response payload that are returned by the HTTP `client` after the data binding operation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268563", "createdAt": "2020-04-02T12:19:41Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODc2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The types of data values that are expected by HTTP `client` to return after data binding operation.\n          \n          \n            \n            # The types of data values that are expected by the HTTP `client` to return after the data binding operation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268765", "createdAt": "2020-04-02T12:20:05Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODk2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n          \n          \n            \n            # Defines the HTTP operations related to the circuit breaker, failover, and load balancer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268961", "createdAt": "2020-04-02T12:20:24Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTA5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `FORWARD`: Forward the specified payload\n          \n          \n            \n            # `FORWARD`: Forwards the specified payload", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269091", "createdAt": "2020-04-02T12:20:35Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTE3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `GET`: Request a resource\n          \n          \n            \n            # `GET`: Requests a resource", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269171", "createdAt": "2020-04-02T12:20:43Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTIzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `POST`: Create a new resource\n          \n          \n            \n            # `POST`: Creates a new resource", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269237", "createdAt": "2020-04-02T12:20:50Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTM1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `OPTIONS`: Request communication options available\n          \n          \n            \n            # `OPTIONS`: Requests communication options that are available", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269351", "createdAt": "2020-04-02T12:21:04Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTQxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `PUT`: Replace the target resource\n          \n          \n            \n            # `PUT`: Replaces the target resource", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269418", "createdAt": "2020-04-02T12:21:12Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTQ4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `PATCH`: Apply partial modification to the resource\n          \n          \n            \n            # `PATCH`: Applies partial modification to the resource", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269485", "createdAt": "2020-04-02T12:21:21Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTc0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `SUBMIT`: Submits a http request and returns an HttpFuture object\n          \n          \n            \n            # `SUBMIT`: Submits an HTTP request and returns an `HttpFuture` object", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269748", "createdAt": "2020-04-02T12:21:47Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDA0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Common type used for HttpFuture and Response used for resiliency clients.\n          \n          \n            \n            // Common type used for the `HttpFuture` and Response used for resiliency clients.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270041", "createdAt": "2020-04-02T12:22:13Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDE0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # A record for configuring SSL/TLS protocol and version to be used.\n          \n          \n            \n            # A record for configuring the SSL/TLS protocol and version to be used.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270149", "createdAt": "2020-04-02T12:22:22Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDIzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + name - SSL Protocol to be used (e.g.: TLS1.2)\n          \n          \n            \n            # + name - SSL Protocol to be used (e.g., TLS1.2)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270232", "createdAt": "2020-04-02T12:22:30Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDMyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n          \n          \n            \n            # + versions - SSL/TLS protocols to be enabled (e.g., TLSv1,TLSv1.1,TLSv1.2)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270326", "createdAt": "2020-04-02T12:22:39Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cacheValidityPeriod - The time period for which a cache entry is valid\n          \n          \n            \n            # + cacheValidityPeriod - The time period during which a cache entry is valid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270514", "createdAt": "2020-04-02T12:22:57Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDY5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cacheValidityPeriod - The time period for which a cache entry is valid\n          \n          \n            \n            # + cacheValidityPeriod - The time period during which a cache entry is valid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270694", "createdAt": "2020-04-02T12:23:13Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDk1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + enable - The status of compression\n          \n          \n            \n            # + enable - The status of the compression", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270958", "createdAt": "2020-04-02T12:23:34Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTA2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + contentTypes - Content types which are allowed for compression\n          \n          \n            \n            # + contentTypes - Content types, which are allowed for compression", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271063", "createdAt": "2020-04-02T12:23:43Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTIzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + http1Settings - Configurations related to HTTP/1.x protocol\n          \n          \n            \n            # + http1Settings - Configurations related to the HTTP/1.x protocol", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271239", "createdAt": "2020-04-02T12:23:58Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTM5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + http2Settings - Configurations related to HTTP/2 protocol\n          \n          \n            \n            # + http2Settings - Configurations related to the HTTP/2 protocol", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271394", "createdAt": "2020-04-02T12:24:06Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTU3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + forwarded - The choice of setting `forwarded`/`x-forwarded` header\n          \n          \n            \n            # + forwarded - The choice of setting the `forwarded`/`x-forwarded` header", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271574", "createdAt": "2020-04-02T12:24:18Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol\n+# + timeoutInMillis - The maximum time to wait (in milliseconds) for a response before closing the connection\n+# + forwarded - The choice of setting `forwarded`/`x-forwarded` header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTY3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + followRedirects - Configurations associated with Redirection\n          \n          \n            \n            # + followRedirects - Configurations associated with the redirection", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271676", "createdAt": "2020-04-02T12:24:28Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol\n+# + timeoutInMillis - The maximum time to wait (in milliseconds) for a response before closing the connection\n+# + forwarded - The choice of setting `forwarded`/`x-forwarded` header\n+# + followRedirects - Configurations associated with Redirection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTgxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + compression - Specifies the way of handling compression (`accept-encoding`) header\n          \n          \n            \n            # + compression - Specifies the way of handling the compression (`accept-encoding`) header", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271811", "createdAt": "2020-04-02T12:24:41Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol\n+# + timeoutInMillis - The maximum time to wait (in milliseconds) for a response before closing the connection\n+# + forwarded - The choice of setting `forwarded`/`x-forwarded` header\n+# + followRedirects - Configurations associated with Redirection\n+# + poolConfig - Configurations associated with request pooling\n+# + cache - HTTP caching related configurations\n+# + compression - Specifies the way of handling compression (`accept-encoding`) header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MjA1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cookieConfig - Configurations associated with cookies\n          \n          \n            \n            # + cookieConfig - Configurations associated with the cookies", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402272050", "createdAt": "2020-04-02T12:25:00Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol\n+# + timeoutInMillis - The maximum time to wait (in milliseconds) for a response before closing the connection\n+# + forwarded - The choice of setting `forwarded`/`x-forwarded` header\n+# + followRedirects - Configurations associated with Redirection\n+# + poolConfig - Configurations associated with request pooling\n+# + cache - HTTP caching related configurations\n+# + compression - Specifies the way of handling compression (`accept-encoding`) header\n+# + auth - HTTP authentication-related configurations\n+# + circuitBreaker - Configurations associated with the behaviour of the Circuit Breaker\n+# + retryConfig - Configurations associated with retrying\n+# + cookieConfig - Configurations associated with cookies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f"}, "originalPosition": 214}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28d5215bb8da17e77fa81e355c925eeb22d9cae4", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28d5215bb8da17e77fa81e355c925eeb22d9cae4", "committedDate": "2020-04-04T18:29:07Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1bf33d5642afaf00381b43744c3b8d25b1baf7d", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1bf33d5642afaf00381b43744c3b8d25b1baf7d", "committedDate": "2020-04-05T17:55:31Z", "message": "Merge branch 'http-v2' of https://github.com/ballerina-platform/ballerina-lang into http-2.0\n\n# Conflicts:\n#\tstdlib/http/src/main/ballerina/src/http/http_secure_client.bal"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3992, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}