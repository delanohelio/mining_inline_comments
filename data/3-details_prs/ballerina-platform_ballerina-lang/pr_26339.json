{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyODEyODAw", "number": 26339, "title": "[Formatter] Implement some methods in NewFormattingTreeModifier", "bodyText": "Purpose\nImplement the following methods in the NewFormattingTreeModifier class\n\nNamedWorkerDeclarationNode\nArrayTypeDescriptorNode\nXMLElementNode\nXMLStartTagNode\nXMLEndTagNode\nXmlTypeDescriptorNode\nXMLAttributeNode\nXMLAttributeValue\n\nPartially Fixes #26052\nApproach\n\nOverride the methods and apply logic\n\nSamples\nRemarks\n\nTODO: Add more test cases for negative tests\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-10-13T20:38:49Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339", "merged": true, "mergeCommit": {"oid": "8853137d9f2ac571d19c9c1eec9e085ee26c8254"}, "closed": true, "closedAt": "2020-10-14T14:15:00Z", "author": {"login": "sanjana"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP0yqbAH2gAyNTAyODEyODAwOjVlYzBmM2ZiOTQ5YjQ3ODczMjcyNzhlMmNlNDNjODc1ODk0Y2MwZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSd2p6gFqTUwODM5MzQ2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5ec0f3fb949b4787327278e2ce43c875894cc0d7", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ec0f3fb949b4787327278e2ce43c875894cc0d7", "committedDate": "2020-10-06T09:16:30Z", "message": "Implement NamedWorkerDeclarationNode for new formatter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2590ec153a89c51f7ef5f3f0ecb71375232d8825", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2590ec153a89c51f7ef5f3f0ecb71375232d8825", "committedDate": "2020-10-08T08:42:17Z", "message": "Implement basics of ArrayTypeDescriptorNode in new formatting tree modifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc3747da412fab5281fdda55be602675e15e6a7", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccc3747da412fab5281fdda55be602675e15e6a7", "committedDate": "2020-10-08T09:23:55Z", "message": "Fix ArrayTypeDescriptorNode formatting issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aceedb35a1ae3bfa756cec1f18bf80028547130", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4aceedb35a1ae3bfa756cec1f18bf80028547130", "committedDate": "2020-10-13T08:38:04Z", "message": "Implement XML element, XML start tag, and XML end tag in new formatting tree modifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52966bd7bc53baeec37dfce4a947d5a6cad3eb2b", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52966bd7bc53baeec37dfce4a947d5a6cad3eb2b", "committedDate": "2020-10-13T08:42:58Z", "message": "Merge branch 'formatter-change' of https://github.com/ballerina-platform/ballerina-lang into formatter-change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da5b81fd54230777ee070434f45a2a636290fa44", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da5b81fd54230777ee070434f45a2a636290fa44", "committedDate": "2020-10-13T09:20:39Z", "message": "Fix method re-declaration error in new formatting tree modifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d76343895ed3878532637ceef33dff5391bfa1f0", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d76343895ed3878532637ceef33dff5391bfa1f0", "committedDate": "2020-10-13T20:26:00Z", "message": "Implement XmlAttribute and XmlAttributeValue methods in NewFormattingTreeModifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0faab39515042600f7df951e3d919fe86a1c1fba", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0faab39515042600f7df951e3d919fe86a1c1fba", "committedDate": "2020-10-13T20:27:31Z", "message": "Merge remote-tracking branch 'upstream/formatter-change' into formatter-change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "committedDate": "2020-10-13T20:44:22Z", "message": "Reformat code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTY0NDI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#pullrequestreview-507964425", "createdAt": "2020-10-14T03:13:44Z", "commit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxMzo0NFrOHhAmIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzozNToyN1rOHhA9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NDgxOQ==", "bodyText": "Don't we need a newline after the workers?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504374819", "createdAt": "2020-10-14T03:13:44Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -389,6 +389,13 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTMyMw==", "bodyText": "Last child in all nodes (i.e: in all  the transform methods), should take the trailing WS/NL from the global variable.\nYou can refer to the existing methods..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504375323", "createdAt": "2020-10-14T03:15:38Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODY2Mw==", "bodyText": "Shouldn't there be a newline after each annotation? please refer to the other places on how the annotations are formatted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504378663", "createdAt": "2020-10-14T03:27:50Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODk4NQ==", "bodyText": "Need a WS after the return type-desc", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504378985", "createdAt": "2020-10-14T03:29:07Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTUwMA==", "bodyText": "This is in the wrong order. Close bracket is visited before the array-length.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504379500", "createdAt": "2020-10-14T03:30:53Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTU5NA==", "bodyText": "since isPresent() check is done, you can directly call arrayLength().get()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504379594", "createdAt": "2020-10-14T03:31:21Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDIxOA==", "bodyText": "Last child in all nodes (i.e: in all the transform methods), should take the trailing WS/NL from the global variable.\nLets fix that in all places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504380218", "createdAt": "2020-10-14T03:33:46Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDY3Mw==", "bodyText": "use get() instead of orElse(null)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504380673", "createdAt": "2020-10-14T03:35:27Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), 0, 0);\n+\n+        return xMLElementNode.modify()\n+                .withStartTag(startTagNode)\n+                .withContent(content)\n+                .withEndTag(endTagNode)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLStartTagNode transform(XMLStartTagNode xMLStartTagNode) {\n+        Token ltToken = formatToken(xMLStartTagNode.ltToken(), 0, 0);\n+        int nameTrailingWS = xMLStartTagNode.attributes().isEmpty() ? 0 : 1;\n+        XMLNameNode name = formatNode(xMLStartTagNode.name(), nameTrailingWS, 0);\n+        NodeList<XMLAttributeNode> attributes = formatNodeList(xMLStartTagNode.attributes(), 1, 0, 0, 0);\n+        Token getToken = formatToken(xMLStartTagNode.getToken(), 0, 0);\n+\n+        return xMLStartTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withName(name)\n+                .withAttributes(attributes)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLEndTagNode transform(XMLEndTagNode xMLEndTagNode) {\n+        Token ltToken = formatToken(xMLEndTagNode.ltToken(), 0, 0);\n+        Token slashToken = formatToken(xMLEndTagNode.slashToken(), 0, 0);\n+        XMLNameNode name = formatNode(xMLEndTagNode.name(), 0,0);\n+        Token getToken = formatToken(xMLEndTagNode.getToken(), 0,0);\n+\n+        return xMLEndTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withSlashToken(slashToken)\n+                .withName(name)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XmlTypeDescriptorNode transform(XmlTypeDescriptorNode xmlTypeDescriptorNode) {\n+        Token xmlKeywordToken = formatToken(xmlTypeDescriptorNode.xmlKeywordToken(), 1, 0);\n+        if (xmlTypeDescriptorNode.xmlTypeParamsNode().isPresent()) {\n+            TypeParameterNode xmlTypeParamsNode = formatNode(xmlTypeDescriptorNode.xmlTypeParamsNode().orElse(null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 199}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6862d4d552e5cf4e5f2c9961e225fa034c506a7d", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6862d4d552e5cf4e5f2c9961e225fa034c506a7d", "committedDate": "2020-10-14T05:57:01Z", "message": "Add blank newline after named worker declarations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5168abfc264e530d909576dac4ca03f19f4d581", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5168abfc264e530d909576dac4ca03f19f4d581", "committedDate": "2020-10-14T09:54:07Z", "message": "Add newlines after annotations of named worker declaration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204e9739f833a7439a326f1cde54291886a57e6c", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/204e9739f833a7439a326f1cde54291886a57e6c", "committedDate": "2020-10-14T10:02:45Z", "message": "Add whitespace after return type-desc of workers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d912466f4d53ae7d3f5f861e8954ae3dc558d29", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d912466f4d53ae7d3f5f861e8954ae3dc558d29", "committedDate": "2020-10-14T10:41:07Z", "message": "Improve code suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07a4874a84e4a488b70ba5dab37bece581b46427", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07a4874a84e4a488b70ba5dab37bece581b46427", "committedDate": "2020-10-14T10:42:44Z", "message": "Get trailing WS/NL from global variable for last child of each node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdaa37b9f498322489b9241c3cdbd1d03b3376b6", "committedDate": "2020-10-14T10:44:34Z", "message": "Merge remote-tracking branch 'upstream/formatter-change' into formatter-change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjQ0MDgx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#pullrequestreview-508244081", "createdAt": "2020-10-14T11:21:25Z", "commit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMToyMToyNlrOHhOQRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMToyMToyNlrOHhOQRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw==", "bodyText": "Shall we keep a single trailing newline here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504598597", "createdAt": "2020-10-14T11:21:26Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjcxMzY5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#pullrequestreview-508271369", "createdAt": "2020-10-14T12:01:18Z", "commit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowMToxOFrOHhPjYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowMToxOFrOHhPjYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxOTg3NQ==", "bodyText": "Can we simplify this logic to something like [1]?\n[1] \n  \n    \n      ballerina-lang/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java\n    \n    \n         Line 348\n      in\n      bdaa37b\n    \n    \n    \n    \n\n        \n          \n           Token closePara;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504619875", "createdAt": "2020-10-14T12:01:18Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -3315,6 +3277,136 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 1, 0, 1);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 1, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), this.trailingWS, this.trailingNL);\n+\n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().get(), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, this.trailingNL);\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), this.trailingWS, this.trailingNL);\n+\n+        return xMLElementNode.modify()\n+                .withStartTag(startTagNode)\n+                .withContent(content)\n+                .withEndTag(endTagNode)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLStartTagNode transform(XMLStartTagNode xMLStartTagNode) {\n+        Token ltToken = formatToken(xMLStartTagNode.ltToken(), 0, 0);\n+        int nameTrailingWS = xMLStartTagNode.attributes().isEmpty() ? 0 : 1;\n+        XMLNameNode name = formatNode(xMLStartTagNode.name(), nameTrailingWS, 0);\n+        NodeList<XMLAttributeNode> attributes = formatNodeList(xMLStartTagNode.attributes(), 1, 0, 0, 0);\n+        Token getToken = formatToken(xMLStartTagNode.getToken(), this.trailingWS, this.trailingNL);\n+\n+        return xMLStartTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withName(name)\n+                .withAttributes(attributes)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLEndTagNode transform(XMLEndTagNode xMLEndTagNode) {\n+        Token ltToken = formatToken(xMLEndTagNode.ltToken(), 0, 0);\n+        Token slashToken = formatToken(xMLEndTagNode.slashToken(), 0, 0);\n+        XMLNameNode name = formatNode(xMLEndTagNode.name(), 0,0);\n+        Token getToken = formatToken(xMLEndTagNode.getToken(), this.trailingWS,this.trailingNL);\n+\n+        return xMLEndTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withSlashToken(slashToken)\n+                .withName(name)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XmlTypeDescriptorNode transform(XmlTypeDescriptorNode xmlTypeDescriptorNode) {\n+        int trailingWS = xmlTypeDescriptorNode.xmlTypeParamsNode().isEmpty() ? this.trailingWS : 0;\n+        int trailingNL = xmlTypeDescriptorNode.xmlTypeParamsNode().isEmpty() ? this.trailingNL : 0;\n+        Token xmlKeywordToken = formatToken(xmlTypeDescriptorNode.xmlKeywordToken(), trailingWS, trailingNL);\n+        if (xmlTypeDescriptorNode.xmlTypeParamsNode().isPresent()) {\n+            TypeParameterNode xmlTypeParamsNode = formatNode(xmlTypeDescriptorNode.xmlTypeParamsNode().get(),\n+                    this.trailingWS, this.trailingNL);\n+            xmlTypeDescriptorNode = xmlTypeDescriptorNode.modify()\n+                    .withXmlTypeParamsNode(xmlTypeParamsNode)\n+                    .apply();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 199}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cc633b7a36557aa6f54fd6a65556c873b9a432b", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7cc633b7a36557aa6f54fd6a65556c873b9a432b", "committedDate": "2020-10-14T12:50:46Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a192125b1cb27ccf79350fe28771cd26d0ccee6", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a192125b1cb27ccf79350fe28771cd26d0ccee6", "committedDate": "2020-10-14T12:55:56Z", "message": "Merge remote-tracking branch 'upstream/formatter-change' into formatter-change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac6a25b2ae60275833f1219f772dcd015fe4cf19", "author": {"user": {"login": "sanjana", "name": "Sivanandan Anjana"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac6a25b2ae60275833f1219f772dcd015fe4cf19", "committedDate": "2020-10-14T13:04:45Z", "message": "Refactor code and resolve conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MzkzNDY3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#pullrequestreview-508393467", "createdAt": "2020-10-14T14:14:49Z", "commit": {"oid": "ac6a25b2ae60275833f1219f772dcd015fe4cf19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4355, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}