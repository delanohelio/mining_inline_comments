{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NzY5MTg1", "number": 22856, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjo0NDozNVrOD3LSoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1NDozNFrOD4Z71A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTgzMjY1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjo0NDozNVrOGNSJsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToyMjoxNVrOGOhBng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MjA2NA==", "bodyText": "Shall we update the comment to something like:\nRest variable type of Record ref (record destructuring assignment) is a map where T is the broad type of all fields that are not specified in the destructuring pattern. Here we set the rest type of record type to T.\nPlease feel free to change the message appropriately", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r416582064", "createdAt": "2020-04-28T12:44:35Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1405,11 +1405,16 @@ public void visit(BLangRecordVarRef varRefExpr) {\n         varRefExpr.symbol = new BVarSymbol(0, recordSymbol.name,\n                 env.enclPkg.symbol.pkgID, bRecordType, env.scope.owner);\n \n-        if (varRefExpr.restParam == null) {\n+        if (restParam == null) {\n             bRecordType.sealed = true;\n             bRecordType.restFieldType = symTable.noType;\n-        } else {\n+        } else if (restParam.type == symTable.semanticError) {\n             bRecordType.restFieldType = symTable.mapType;\n+        } else {\n+            // Since the variable ref for a map returns the Map type and the model stores the constraint of the map type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34bafe7f57db9cd4dcfb0a5d6fdd64005f89fda"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NDMzNA==", "bodyText": "Fixed with 60bfc55", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r417874334", "createdAt": "2020-04-30T09:22:15Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1405,11 +1405,16 @@ public void visit(BLangRecordVarRef varRefExpr) {\n         varRefExpr.symbol = new BVarSymbol(0, recordSymbol.name,\n                 env.enclPkg.symbol.pkgID, bRecordType, env.scope.owner);\n \n-        if (varRefExpr.restParam == null) {\n+        if (restParam == null) {\n             bRecordType.sealed = true;\n             bRecordType.restFieldType = symTable.noType;\n-        } else {\n+        } else if (restParam.type == symTable.semanticError) {\n             bRecordType.restFieldType = symTable.mapType;\n+        } else {\n+            // Since the variable ref for a map returns the Map type and the model stores the constraint of the map type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MjA2NA=="}, "originalCommit": {"oid": "f34bafe7f57db9cd4dcfb0a5d6fdd64005f89fda"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTg0NjY5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/lists/ArrayDestructureTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjo0ODowOFrOGNSScQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToyMjoyNlrOGOhCDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4NDMwNQ==", "bodyText": "I think this test belong here https://github.com/ballerina-platform/ballerina-lang/tree/e8ad87cc9c315cd9892905ecd5eacf49018efb4c/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r416584305", "createdAt": "2020-04-28T12:48:08Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/lists/ArrayDestructureTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.types.lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34bafe7f57db9cd4dcfb0a5d6fdd64005f89fda"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NDQ0NA==", "bodyText": "fixed with 60bfc55", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r417874444", "createdAt": "2020-04-30T09:22:26Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/lists/ArrayDestructureTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.types.lists;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4NDMwNQ=="}, "originalCommit": {"oid": "f34bafe7f57db9cd4dcfb0a5d6fdd64005f89fda"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDcxNzY0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1NDozNFrOGPNk8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODozOToxOFrOGP3SWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwNDI3Mg==", "bodyText": "We usually break the line after the COMMA", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r418604272", "createdAt": "2020-05-01T15:54:34Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.expressions.varref;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test case for list destructure bindings.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ArrayDestructureTest {\n+\n+    CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        compileResult = BCompileUtil.compile(\"test-src/expressions/varref/array_destructure_test.bal\");\n+    }\n+\n+    @Test\n+    public void testSimpleArrayDestructureBinding() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testSimpleListBindingPattern\");\n+    }\n+\n+    @Test\n+    public void testSimpleArrayDestructureWithUndefinedSize() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testSimpleListBindingPatternWithUndefinedSize\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructure() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPattern\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructureWithUndefinedSize() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPatternWithUndefinedSize\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructureWithRecordDestructure() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPatternWithRecordDestructure\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructureWithUndefinedSizeAndDifferentType() {\n+        BValue[] result = BRunUtil.invoke(compileResult\n+                , \"testReferenceListBindingPatternForUndefinedSizeWithDifferentType\");\n+    }\n+\n+    @Test\n+    public void testReferenceListBindingPatternWithTuples() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPatternWithTuples\");\n+    }\n+\n+    @Test\n+    public void testSimpleArrayDestructureNegative() {\n+        CompileResult negativeTestCompile = BCompileUtil\n+                .compile(\"test-src/expressions/varref/array_destructure_negative.bal\");\n+        Assert.assertEquals(negativeTestCompile.getErrorCount(), 5);\n+\n+        int index = 0;\n+        BAssertUtil.validateError(negativeTestCompile, index++\n+                , \"incompatible types: expected '[int,int,int,int,int]', found 'int[4]'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60bfc55bf8770aabed455f6920a8e2c1cea82dcd"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4NzY0Mg==", "bodyText": "Fixed in 222780f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22856#discussion_r419287642", "createdAt": "2020-05-04T08:39:18Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/varref/ArrayDestructureTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.expressions.varref;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test case for list destructure bindings.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ArrayDestructureTest {\n+\n+    CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        compileResult = BCompileUtil.compile(\"test-src/expressions/varref/array_destructure_test.bal\");\n+    }\n+\n+    @Test\n+    public void testSimpleArrayDestructureBinding() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testSimpleListBindingPattern\");\n+    }\n+\n+    @Test\n+    public void testSimpleArrayDestructureWithUndefinedSize() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testSimpleListBindingPatternWithUndefinedSize\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructure() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPattern\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructureWithUndefinedSize() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPatternWithUndefinedSize\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructureWithRecordDestructure() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPatternWithRecordDestructure\");\n+    }\n+\n+    @Test\n+    public void testReferenceArrayDestructureWithUndefinedSizeAndDifferentType() {\n+        BValue[] result = BRunUtil.invoke(compileResult\n+                , \"testReferenceListBindingPatternForUndefinedSizeWithDifferentType\");\n+    }\n+\n+    @Test\n+    public void testReferenceListBindingPatternWithTuples() {\n+        BValue[] result = BRunUtil.invoke(compileResult, \"testReferenceListBindingPatternWithTuples\");\n+    }\n+\n+    @Test\n+    public void testSimpleArrayDestructureNegative() {\n+        CompileResult negativeTestCompile = BCompileUtil\n+                .compile(\"test-src/expressions/varref/array_destructure_negative.bal\");\n+        Assert.assertEquals(negativeTestCompile.getErrorCount(), 5);\n+\n+        int index = 0;\n+        BAssertUtil.validateError(negativeTestCompile, index++\n+                , \"incompatible types: expected '[int,int,int,int,int]', found 'int[4]'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwNDI3Mg=="}, "originalCommit": {"oid": "60bfc55bf8770aabed455f6920a8e2c1cea82dcd"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3772, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}