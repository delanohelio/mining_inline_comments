{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjEyNjg2", "number": 21024, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1OTozOFrODfJrew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjoyNjoxMFrODg648A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTkxMDM1OnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1OTozOFrOFor-Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzowNzo1MVrOFot1TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean messageExists(String messageName) {\n          \n          \n            \n                public boolean isMessageExist(String messageName) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378207798", "createdAt": "2020-02-12T11:59:38Z", "author": {"login": "chamil321"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.net.grpc.builder.components;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * Holds the abstract features of the stubs which are common to service and client stubs.\n+ */\n+public abstract class AbstractStub {\n+    private List<Message> messageList = new ArrayList<>();\n+    private List<EnumMessage> enumList = new ArrayList<>();\n+    private String rootDescriptor;\n+    private Set<Descriptor> descriptors = new TreeSet<>((descriptor1, descriptor2) -> {\n+        if (descriptor1.getKey().equalsIgnoreCase(descriptor2.getKey())) {\n+            return 0;\n+        }\n+        return 1;\n+    });\n+    public void addMessage(Message message) {\n+        messageList.add(message);\n+    }\n+\n+    public boolean messageExists(String messageName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841c474d2d9cf8a72a838465cd02a2005fd23730"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzODI4NA==", "bodyText": "Fixed in 2d72836", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378238284", "createdAt": "2020-02-12T13:07:51Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.net.grpc.builder.components;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * Holds the abstract features of the stubs which are common to service and client stubs.\n+ */\n+public abstract class AbstractStub {\n+    private List<Message> messageList = new ArrayList<>();\n+    private List<EnumMessage> enumList = new ArrayList<>();\n+    private String rootDescriptor;\n+    private Set<Descriptor> descriptors = new TreeSet<>((descriptor1, descriptor2) -> {\n+        if (descriptor1.getKey().equalsIgnoreCase(descriptor2.getKey())) {\n+            return 0;\n+        }\n+        return 1;\n+    });\n+    public void addMessage(Message message) {\n+        messageList.add(message);\n+    }\n+\n+    public boolean messageExists(String messageName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzc5OA=="}, "originalCommit": {"oid": "841c474d2d9cf8a72a838465cd02a2005fd23730"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTkxMTMxOnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1OTo1OFrOFor-1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzowODowMVrOFot1mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzk1OA==", "bodyText": "Shall we leave a new line here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378207958", "createdAt": "2020-02-12T11:59:58Z", "author": {"login": "chamil321"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.net.grpc.builder.components;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * Holds the abstract features of the stubs which are common to service and client stubs.\n+ */\n+public abstract class AbstractStub {\n+    private List<Message> messageList = new ArrayList<>();\n+    private List<EnumMessage> enumList = new ArrayList<>();\n+    private String rootDescriptor;\n+    private Set<Descriptor> descriptors = new TreeSet<>((descriptor1, descriptor2) -> {\n+        if (descriptor1.getKey().equalsIgnoreCase(descriptor2.getKey())) {\n+            return 0;\n+        }\n+        return 1;\n+    });\n+    public void addMessage(Message message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841c474d2d9cf8a72a838465cd02a2005fd23730"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzODM2Mg==", "bodyText": "Fixed in 2d72836", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378238362", "createdAt": "2020-02-12T13:08:01Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.net.grpc.builder.components;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * Holds the abstract features of the stubs which are common to service and client stubs.\n+ */\n+public abstract class AbstractStub {\n+    private List<Message> messageList = new ArrayList<>();\n+    private List<EnumMessage> enumList = new ArrayList<>();\n+    private String rootDescriptor;\n+    private Set<Descriptor> descriptors = new TreeSet<>((descriptor1, descriptor2) -> {\n+        if (descriptor1.getKey().equalsIgnoreCase(descriptor2.getKey())) {\n+            return 0;\n+        }\n+        return 1;\n+    });\n+    public void addMessage(Message message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzk1OA=="}, "originalCommit": {"oid": "841c474d2d9cf8a72a838465cd02a2005fd23730"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODQwODgyOnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/resources/templates/skeleton/service_sample.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMTo1NDoyMVrOFrYsPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozNjo0MFrOFrfHpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzNzYyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {{#enumList}}{{> enum}}{{/enumList}}{{#if rootDescriptor}}const string ROOT_DESCRIPTOR = \"{{rootDescriptor}}\";\n          \n          \n            \n            {{#enumList}}{{> enum}}{{/enumList}}{{#if rootDescriptor}}\n          \n          \n            \n            const string ROOT_DESCRIPTOR = \"{{rootDescriptor}}\";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381037628", "createdAt": "2020-02-19T01:54:21Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/resources/templates/skeleton/service_sample.mustache", "diffHunk": "@@ -38,3 +38,12 @@ service {{serviceName}} on ep {\n         // You should return a {{outputType}}\n     }{{/unaryFunctions}}\n }\n+\n+{{#each messageList}}{{> message}}{{/each}}\n+{{#enumList}}{{> enum}}{{/enumList}}{{#if rootDescriptor}}const string ROOT_DESCRIPTOR = \"{{rootDescriptor}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0Mjk0OA==", "bodyText": "Fixed in f18fc70", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381142948", "createdAt": "2020-02-19T08:36:40Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/src/main/resources/templates/skeleton/service_sample.mustache", "diffHunk": "@@ -38,3 +38,12 @@ service {{serviceName}} on ep {\n         // You should return a {{outputType}}\n     }{{/unaryFunctions}}\n }\n+\n+{{#each messageList}}{{> message}}{{/each}}\n+{{#enumList}}{{> enum}}{{/enumList}}{{#if rootDescriptor}}const string ROOT_DESCRIPTOR = \"{{rootDescriptor}}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzNzYyOA=="}, "originalCommit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODQyMTExOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/tool/StubGeneratorTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjowMjowMVrOFrYzyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozNzoyM1rOFrfI9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzOTU2Mw==", "bodyText": "Shall we compile the generated file and check whether there is any compilation error. and check whether message types and descriptor also there.\nCompileResult compileResult = BCompileUtil.compile(sampleServiceFile.toString());\nassertEquals(compileResult.getDiagnostics().length, 0);\nassertEquals(((BLangPackage) compileResult.getAST()).constants.size(), 1,\n                \"Expected constants not found in compile results.\");\nassertEquals(((BLangPackage) compileResult.getAST()).globalVars.size(), 1,\n                \"Expected global variables not found in compile results.\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381039563", "createdAt": "2020-02-19T02:02:01Z", "author": {"login": "daneshk"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/tool/StubGeneratorTestCase.java", "diffHunk": "@@ -333,6 +334,27 @@ public void testOneofFieldRecordGeneration() throws IllegalAccessException, Clas\n                 \"Expected imports not found in compile results.\");\n     }\n \n+    @Test(description = \"Test case checks creation of only the service file, in the service mode, with single service\")\n+    public void testServiceFileGenWithoutStub() throws IllegalAccessException, ClassNotFoundException,\n+            InstantiationException {\n+        Class<?> grpcCmd = Class.forName(\"org.ballerinalang.protobuf.cmd.GrpcCmd\");\n+        GrpcCmd grpcCommand = (GrpcCmd) grpcCmd.newInstance();\n+        Path tempDirPath = outputDirPath.resolve(\"service\");\n+        Path protoPath = Paths.get(\"helloWorld.proto\");\n+        Path protoRoot = resourceDir.resolve(protoPath);\n+        grpcCommand.setBalOutPath(tempDirPath.toAbsolutePath().toString());\n+        grpcCommand.setProtoPath(protoRoot.toAbsolutePath().toString());\n+        grpcCommand.setMode(\"service\");\n+        grpcCommand.execute();\n+        Path sampleServiceFile = Paths.get(TMP_DIRECTORY_PATH, \"grpc\", \"service\", \"helloWorld_sample_service.bal\");\n+\n+        // This file should not be created when --mode service enabled with one service\n+        Path sampleStubFile = Paths.get(TMP_DIRECTORY_PATH, \"grpc\", \"service\", \"helloWorld_pb.bal\");\n+\n+        assertTrue(Files.exists(sampleServiceFile));\n+        assertFalse(Files.exists(sampleStubFile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MzI4Ng==", "bodyText": "Fixed in 355d18b", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381143286", "createdAt": "2020-02-19T08:37:23Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/tool/StubGeneratorTestCase.java", "diffHunk": "@@ -333,6 +334,27 @@ public void testOneofFieldRecordGeneration() throws IllegalAccessException, Clas\n                 \"Expected imports not found in compile results.\");\n     }\n \n+    @Test(description = \"Test case checks creation of only the service file, in the service mode, with single service\")\n+    public void testServiceFileGenWithoutStub() throws IllegalAccessException, ClassNotFoundException,\n+            InstantiationException {\n+        Class<?> grpcCmd = Class.forName(\"org.ballerinalang.protobuf.cmd.GrpcCmd\");\n+        GrpcCmd grpcCommand = (GrpcCmd) grpcCmd.newInstance();\n+        Path tempDirPath = outputDirPath.resolve(\"service\");\n+        Path protoPath = Paths.get(\"helloWorld.proto\");\n+        Path protoRoot = resourceDir.resolve(protoPath);\n+        grpcCommand.setBalOutPath(tempDirPath.toAbsolutePath().toString());\n+        grpcCommand.setProtoPath(protoRoot.toAbsolutePath().toString());\n+        grpcCommand.setMode(\"service\");\n+        grpcCommand.execute();\n+        Path sampleServiceFile = Paths.get(TMP_DIRECTORY_PATH, \"grpc\", \"service\", \"helloWorld_sample_service.bal\");\n+\n+        // This file should not be created when --mode service enabled with one service\n+        Path sampleStubFile = Paths.get(TMP_DIRECTORY_PATH, \"grpc\", \"service\", \"helloWorld_pb.bal\");\n+\n+        assertTrue(Files.exists(sampleServiceFile));\n+        assertFalse(Files.exists(sampleStubFile));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzOTU2Mw=="}, "originalCommit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODQ1ODcyOnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/BallerinaFileBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjoyNjoxMFrOFrZK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODozNjo1NlrOFrfIHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTQ4OQ==", "bodyText": "Shall we create a new service stub template file with the only message types and descriptors?\nand generate that stub file when it is service mode. Because we don't need stub functions in service mode.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381045489", "createdAt": "2020-02-19T02:26:10Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/BallerinaFileBuilder.java", "diffHunk": "@@ -174,32 +198,43 @@ private void computeSourceContent(byte[] descriptor, String mode) throws CodeBui\n                 }\n                 serviceStubBuilder.setType(ServiceStub.StubType.NONBLOCKING);\n                 stubFileObject.addServiceStub(serviceStubBuilder.build());\n-                if (GRPC_CLIENT.equals(mode)) {\n-                    String clientFilePath = generateOutputFile(this.balOutPath, serviceDescriptor.getName() +\n-                            SAMPLE_FILE_PREFIX);\n-                    writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains), DEFAULT_SAMPLE_DIR,\n-                            SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n-                }\n+\n                 if (GRPC_SERVICE.equals(mode)) {\n+                    serviceFile = sampleServiceBuilder.build();\n+                    if (!needStubFile) {\n+                        serviceFile.setMessageList(messageList);\n+                        serviceFile.setEnumList(enumList);\n+                        serviceFile.setDescriptors(descriptors);\n+                        if (!stubRootDescriptor.isEmpty()) {\n+                            serviceFile.setRootDescriptor(stubRootDescriptor);\n+                        }\n+                    }\n                     String servicePath = generateOutputFile(this.balOutPath, serviceDescriptor.getName() +\n                             SAMPLE_SERVICE_FILE_PREFIX);\n-                    writeOutputFile(sampleServiceBuilder.build(), DEFAULT_SAMPLE_DIR, SAMPLE_SERVICE_TEMPLATE_NAME,\n+                    writeOutputFile(serviceFile, DEFAULT_SAMPLE_DIR, SAMPLE_SERVICE_TEMPLATE_NAME,\n                             servicePath);\n+                } else if (GRPC_CLIENT.equals(mode)) {\n+                    String clientFilePath = generateOutputFile(\n+                            this.balOutPath,\n+                            serviceDescriptor.getName() + SAMPLE_FILE_PREFIX\n+                    );\n+                    writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains),\n+                            DEFAULT_SAMPLE_DIR,\n+                            SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n+\n                 }\n             }\n-            // read message types.\n-            for (DescriptorProtos.DescriptorProto descriptorProto : messageTypeList) {\n-                Message message = Message.newBuilder(descriptorProto).build();\n-                stubFileObject.addMessage(message);\n-            }\n-            // read enum types.\n-            for (DescriptorProtos.EnumDescriptorProto descriptorProto : enumDescriptorProtos) {\n-                EnumMessage enumMessage = EnumMessage.newBuilder(descriptorProto).build();\n-                stubFileObject.addEnumMessage(enumMessage);\n-            }\n \n-            String stubFilePath = generateOutputFile(this.balOutPath, filename + STUB_FILE_PREFIX);\n-            writeOutputFile(stubFileObject, DEFAULT_SKELETON_DIR, SKELETON_TEMPLATE_NAME, stubFilePath);\n+            if (!GRPC_SERVICE.equals(mode) || needStubFile) {\n+                stubFileObject.setMessageList(messageList);\n+                stubFileObject.setEnumList(enumList);\n+                stubFileObject.setDescriptors(descriptors);\n+                if (!stubRootDescriptor.isEmpty()) {\n+                    stubFileObject.setRootDescriptor(stubRootDescriptor);\n+                }\n+                String stubFilePath = generateOutputFile(this.balOutPath, filename + STUB_FILE_PREFIX);\n+                writeOutputFile(stubFileObject, DEFAULT_SKELETON_DIR, SKELETON_TEMPLATE_NAME, stubFilePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MzA2OQ==", "bodyText": "Fixed in f18fc70", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381143069", "createdAt": "2020-02-19T08:36:56Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/BallerinaFileBuilder.java", "diffHunk": "@@ -174,32 +198,43 @@ private void computeSourceContent(byte[] descriptor, String mode) throws CodeBui\n                 }\n                 serviceStubBuilder.setType(ServiceStub.StubType.NONBLOCKING);\n                 stubFileObject.addServiceStub(serviceStubBuilder.build());\n-                if (GRPC_CLIENT.equals(mode)) {\n-                    String clientFilePath = generateOutputFile(this.balOutPath, serviceDescriptor.getName() +\n-                            SAMPLE_FILE_PREFIX);\n-                    writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains), DEFAULT_SAMPLE_DIR,\n-                            SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n-                }\n+\n                 if (GRPC_SERVICE.equals(mode)) {\n+                    serviceFile = sampleServiceBuilder.build();\n+                    if (!needStubFile) {\n+                        serviceFile.setMessageList(messageList);\n+                        serviceFile.setEnumList(enumList);\n+                        serviceFile.setDescriptors(descriptors);\n+                        if (!stubRootDescriptor.isEmpty()) {\n+                            serviceFile.setRootDescriptor(stubRootDescriptor);\n+                        }\n+                    }\n                     String servicePath = generateOutputFile(this.balOutPath, serviceDescriptor.getName() +\n                             SAMPLE_SERVICE_FILE_PREFIX);\n-                    writeOutputFile(sampleServiceBuilder.build(), DEFAULT_SAMPLE_DIR, SAMPLE_SERVICE_TEMPLATE_NAME,\n+                    writeOutputFile(serviceFile, DEFAULT_SAMPLE_DIR, SAMPLE_SERVICE_TEMPLATE_NAME,\n                             servicePath);\n+                } else if (GRPC_CLIENT.equals(mode)) {\n+                    String clientFilePath = generateOutputFile(\n+                            this.balOutPath,\n+                            serviceDescriptor.getName() + SAMPLE_FILE_PREFIX\n+                    );\n+                    writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains),\n+                            DEFAULT_SAMPLE_DIR,\n+                            SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n+\n                 }\n             }\n-            // read message types.\n-            for (DescriptorProtos.DescriptorProto descriptorProto : messageTypeList) {\n-                Message message = Message.newBuilder(descriptorProto).build();\n-                stubFileObject.addMessage(message);\n-            }\n-            // read enum types.\n-            for (DescriptorProtos.EnumDescriptorProto descriptorProto : enumDescriptorProtos) {\n-                EnumMessage enumMessage = EnumMessage.newBuilder(descriptorProto).build();\n-                stubFileObject.addEnumMessage(enumMessage);\n-            }\n \n-            String stubFilePath = generateOutputFile(this.balOutPath, filename + STUB_FILE_PREFIX);\n-            writeOutputFile(stubFileObject, DEFAULT_SKELETON_DIR, SKELETON_TEMPLATE_NAME, stubFilePath);\n+            if (!GRPC_SERVICE.equals(mode) || needStubFile) {\n+                stubFileObject.setMessageList(messageList);\n+                stubFileObject.setEnumList(enumList);\n+                stubFileObject.setDescriptors(descriptors);\n+                if (!stubRootDescriptor.isEmpty()) {\n+                    stubFileObject.setRootDescriptor(stubRootDescriptor);\n+                }\n+                String stubFilePath = generateOutputFile(this.balOutPath, filename + STUB_FILE_PREFIX);\n+                writeOutputFile(stubFileObject, DEFAULT_SKELETON_DIR, SKELETON_TEMPLATE_NAME, stubFilePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTQ4OQ=="}, "originalCommit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "originalPosition": 167}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1243, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}