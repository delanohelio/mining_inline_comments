{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNDAyNjQ2", "number": 27356, "title": "Enable Observability Control Flow Recording", "bodyText": "Purpose\nWith this PR, we could enhance the observability by enabling the control flow recording feature. Users will be able to detect the exact request path as well as the time taken between each construct.\nApproach\nThe observability instrumentation has been carried out at the BIR level. current instrumentation applies for the packages with entry points. The JI calls for the Basic blocks are added based on the positions of instructions and terminators while the priority has been given for the instructions position.\nThese checkpoints added could be viewed using Jaeger under the Logs with the moduleID and positionID as a key,value pair\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-12-07T06:07:31Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356", "merged": true, "mergeCommit": {"oid": "5828dd32a9bc200244181a139f96cd187026269c"}, "closed": true, "closedAt": "2021-01-04T06:39:36Z", "author": {"login": "sachiniSam"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjxLPwgBqjQwNzgzMTM3MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeuP_PCgFqTcxNTEzOTYxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4196311ac86a546038559c7981d496b47c9e9e38", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4196311ac86a546038559c7981d496b47c9e9e38", "committedDate": "2020-12-03T11:37:22Z", "message": "Update span event properties"}, "afterCommit": {"oid": "8c9f232c4b29cba856338e753cb43f6ebd6b4b17", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c9f232c4b29cba856338e753cb43f6ebd6b4b17", "committedDate": "2020-12-07T08:19:55Z", "message": "Update span event properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b20c290c2513bb8e87915095494fae1881f82369", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b20c290c2513bb8e87915095494fae1881f82369", "committedDate": "2020-12-09T14:29:22Z", "message": "Add positions to BlangIf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af4edc7848141c8d977ba514fd83790d3c3acffb", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af4edc7848141c8d977ba514fd83790d3c3acffb", "committedDate": "2020-12-09T14:29:22Z", "message": "Add record checkpoint constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16db3b84c18c13d99327c0f1e7b6e432981af2b6", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16db3b84c18c13d99327c0f1e7b6e432981af2b6", "committedDate": "2020-12-09T14:29:22Z", "message": "Add entry point check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81b8b7482b33899332f23cadcbfdf733e383f071", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81b8b7482b33899332f23cadcbfdf733e383f071", "committedDate": "2020-12-09T14:29:22Z", "message": "Add Control flow checkpoint logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7262a3a4e2130b434cca0cd16ed04c67a7ea4e8d", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7262a3a4e2130b434cca0cd16ed04c67a7ea4e8d", "committedDate": "2020-12-09T14:29:22Z", "message": "Add runtime observability checkpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b66a443c73ef746801524e565872313cbac639e", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b66a443c73ef746801524e565872313cbac639e", "committedDate": "2020-12-09T14:29:22Z", "message": "Append position with module ID"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be616bf8ab4ef7a4bb9beefa4d128d45c8e970fc", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be616bf8ab4ef7a4bb9beefa4d128d45c8e970fc", "committedDate": "2020-12-09T14:29:22Z", "message": "Add instructions for attached functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55f9dd4b460aed1018b7dbd1e0f2cc1e5fd5ff54", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/55f9dd4b460aed1018b7dbd1e0f2cc1e5fd5ff54", "committedDate": "2020-12-09T14:29:23Z", "message": "Add event to active span"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a63b3875a74795182bf40e3d571cc2fc557d6b82", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a63b3875a74795182bf40e3d571cc2fc557d6b82", "committedDate": "2020-12-09T14:29:23Z", "message": "Add events to Choreo Trace Span"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87377a6968c42cc5cdb129a111483b8fbf687b1d", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87377a6968c42cc5cdb129a111483b8fbf687b1d", "committedDate": "2020-12-09T14:29:23Z", "message": "Add SpanEvent object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad97365fa870e2c415691261398490e0b5041150", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad97365fa870e2c415691261398490e0b5041150", "committedDate": "2020-12-09T14:29:23Z", "message": "Update the telemetry proto with Checkpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d597c559ef6bd2d9e9ff4f9aec088732690c7d2", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d597c559ef6bd2d9e9ff4f9aec088732690c7d2", "committedDate": "2020-12-09T14:29:23Z", "message": "Add the new trace span to Telemetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc5e57d5f8ce518e86f6ea8a4a075f782d461540", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dc5e57d5f8ce518e86f6ea8a4a075f782d461540", "committedDate": "2020-12-09T14:29:23Z", "message": "Refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d59738e78d991978b9790ecbaf350c8374a5e0f", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d59738e78d991978b9790ecbaf350c8374a5e0f", "committedDate": "2020-12-09T14:29:23Z", "message": "Update message checkpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29fbace0a6445f409ff68674993a094bc3fe701a", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29fbace0a6445f409ff68674993a094bc3fe701a", "committedDate": "2020-12-09T14:29:23Z", "message": "Add jaeger span log check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db319b33e19865086a37d2f16b12ef478e5d17d2", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db319b33e19865086a37d2f16b12ef478e5d17d2", "committedDate": "2020-12-09T14:29:23Z", "message": "Update ChoreoTraceSpan doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035c7791612f94e93d84f47afd8ad3dbf9d39ec1", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/035c7791612f94e93d84f47afd8ad3dbf9d39ec1", "committedDate": "2020-12-09T14:29:23Z", "message": "Update span event properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a41cdee2bfa4735ad55f820ab258b0681f32b10e", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a41cdee2bfa4735ad55f820ab258b0681f32b10e", "committedDate": "2020-12-09T14:29:23Z", "message": "Update Blang If-else position"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c33ee5f7ff8709f2bb5ca6f9356ec1d9c9dd245", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c33ee5f7ff8709f2bb5ca6f9356ec1d9c9dd245", "committedDate": "2020-12-07T11:51:38Z", "message": "Update BLangIf position data"}, "afterCommit": {"oid": "a41cdee2bfa4735ad55f820ab258b0681f32b10e", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a41cdee2bfa4735ad55f820ab258b0681f32b10e", "committedDate": "2020-12-09T14:29:23Z", "message": "Update Blang If-else position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1900aad9a6e5973aa0f3e5955a12d5877c51cc0", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1900aad9a6e5973aa0f3e5955a12d5877c51cc0", "committedDate": "2020-12-11T11:40:48Z", "message": "Remove if-body end position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9290c86f6b9d660866556873e0f61a7b0ec2fa9e", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9290c86f6b9d660866556873e0f61a7b0ec2fa9e", "committedDate": "2020-12-11T11:57:24Z", "message": "Remove instrumentation on initializations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23337e185ca5ffd4848029ab0dec32404978788d", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23337e185ca5ffd4848029ab0dec32404978788d", "committedDate": "2020-12-14T06:03:51Z", "message": "Update checkpoint environment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73ab9483af5cc67b8011721fe7cc040d05c0fd5e", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73ab9483af5cc67b8011721fe7cc040d05c0fd5e", "committedDate": "2020-12-14T13:52:00Z", "message": "Fix error entries in error entry table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c7f6f80cafd5b8279c17ac7b25d6bdef0085e73", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c7f6f80cafd5b8279c17ac7b25d6bdef0085e73", "committedDate": "2020-12-16T11:52:29Z", "message": "Disable Testerina testWithCoverage test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3908654f30770280e760a8c33dd15e554e6052c8", "committedDate": "2020-12-16T12:12:51Z", "message": "Refactor the  code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMTA2MTA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#pullrequestreview-551106109", "createdAt": "2020-12-14T07:40:42Z", "commit": {"oid": "23337e185ca5ffd4848029ab0dec32404978788d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzo0MDo0MlrOIFDa6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowMjo0MlrOIIegIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2OTgzMg==", "bodyText": "Shall we rename the constant name to CHECKPOINT_EVENT_NAME to be more meaningful ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r542169832", "createdAt": "2020-12-14T07:40:42Z", "author": {"login": "nadundesilva"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObservabilityConstants.java", "diffHunk": "@@ -83,4 +83,7 @@ private ObservabilityConstants() {\n \n     // Tracing Configs\n     public static final String CONFIG_TRACING_ENABLED = CONFIG_TABLE_TRACING + \".enabled\";\n+\n+    // Checkpoint Configs\n+    public static final String CHECKPOINT = \"CHECKPOINT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23337e185ca5ffd4848029ab0dec32404978788d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwODMwNg==", "bodyText": "We can merge these two methods and not create eventAttributes map if observerContext == null and span == null. Also checking tracingEnabled twice can be removed as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r544808306", "createdAt": "2020-12-17T04:44:11Z", "author": {"login": "nadundesilva"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "diffHunk": "@@ -124,6 +125,50 @@ public static void startResourceObservation(Environment env, BString serviceName\n         env.setStrandLocal(ObservabilityConstants.SERVICE_NAME, service);\n     }\n \n+    /**\n+     * Add record checkpoint data to trace span.\n+     *\n+     * @param env The Environment the observable code segment belong to\n+     * @param pkg The package the instrumented code belongs to\n+     * @param position The source code position the instrumented code defined in\n+     */\n+    public static void recordCheckpoint(Environment env, BString pkg, BString position) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        // Adding Position and Module ID to the Jaeger Span\n+        Map<String, String> eventAttributes = new HashMap<>(2);\n+        eventAttributes.put(TAG_KEY_MODULE, pkg.getValue());\n+        eventAttributes.put(TAG_KEY_INVOCATION_POSITION, position.getValue());\n+\n+        addEventToActiveSpan(eventAttributes, env);\n+    }\n+\n+    /**\n+     * Add checkpoint event to the active span.\n+     *\n+     * @param eventAttributes The map of event attributes, the Module and the source code position\n+     * @param env The Environment the observable code segment belong to\n+     */\n+    private static void addEventToActiveSpan(Map<String, String> eventAttributes, Environment env) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        ObserverContext observerContext = (ObserverContext) env.getStrandLocal(KEY_OBSERVER_CONTEXT);\n+        if (observerContext == null) {\n+            return;\n+        }\n+        BSpan span = (BSpan) observerContext.getProperty(KEY_SPAN);\n+        if (span == null) {\n+            return;\n+        }\n+        HashMap<String, Object> events = new HashMap<>(1);\n+        events.put(CHECKPOINT, eventAttributes);\n+        span.log(events);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU5MDIyOA==", "bodyText": "Aren't there constants already defined for these values in Ballerina ? If so let's use them.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545590228", "createdAt": "2020-12-18T05:59:45Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -108,6 +109,9 @@\n     private static final String FUNC_BODY_INSTRUMENTATION_TYPE = \"funcBody\";\n     private static final Location COMPILE_TIME_CONST_POS =\n             new BLangDiagnosticLocation(null, -1, -1, -1, -1);\n+    private static final String INIT_FUNC = \".<init>\";\n+    private static final String START_FUNC = \".<start>\";\n+    private static final String STOP_FUNC = \".<stop>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1NzEzMg==", "bodyText": "Shall we change startBB ? Maybe currentBB ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545757132", "createdAt": "2020-12-18T10:58:35Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1Nzc0MQ==", "bodyText": "Missing space at the beginning of the comment.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545757741", "createdAt": "2020-12-18T10:59:44Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1ODA1MA==", "bodyText": "Should have an empty line between description and params.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545758050", "createdAt": "2020-12-18T11:00:18Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table\n+                fixErrorTable(func, startBB, newBB);\n+                i += 1; // Number of inserted BBs\n+            }\n+            i += 1;\n+        }\n+    }\n+\n+    /**\n+     * Inject checkpoint JI method call to a basic block.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1ODc3Mw==", "bodyText": "Shall we rename desugaredInsPosition to originalInsPosition ? Both are the same here, but we switch names halfway in this function method body.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545758773", "createdAt": "2020-12-18T11:01:45Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table\n+                fixErrorTable(func, startBB, newBB);\n+                i += 1; // Number of inserted BBs\n+            }\n+            i += 1;\n+        }\n+    }\n+\n+    /**\n+     * Inject checkpoint JI method call to a basic block.\n+     * @param startBB The basic block to which the checkpoint call should be injected\n+     * @param pkg The package the invocation belongs to\n+     * @param desugaredInsPosition The source code position of the invocation\n+     */\n+    private void injectCheckpointCall(BIRBasicBlock startBB, BIRPackage pkg, Location desugaredInsPosition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1OTI2Nw==", "bodyText": "Let's rename observeStartCallTerminator to recordCheckPointCallTerminator", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545759267", "createdAt": "2020-12-18T11:02:42Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table\n+                fixErrorTable(func, startBB, newBB);\n+                i += 1; // Number of inserted BBs\n+            }\n+            i += 1;\n+        }\n+    }\n+\n+    /**\n+     * Inject checkpoint JI method call to a basic block.\n+     * @param startBB The basic block to which the checkpoint call should be injected\n+     * @param pkg The package the invocation belongs to\n+     * @param desugaredInsPosition The source code position of the invocation\n+     */\n+    private void injectCheckpointCall(BIRBasicBlock startBB, BIRPackage pkg, Location desugaredInsPosition) {\n+        String pkgId = generatePackageId(pkg);\n+        String position = generatePositionId(desugaredInsPosition);\n+\n+        BIROperand pkgOperand = generateGlobalConstantOperand(pkg, symbolTable.stringType, pkgId);\n+        BIROperand originalInsPosOperand = generateGlobalConstantOperand(pkg, symbolTable.stringType, position);\n+\n+        JIMethodCall observeStartCallTerminator = new JIMethodCall(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b0e99874342a76149e6517811b081505eadff3", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0b0e99874342a76149e6517811b081505eadff3", "committedDate": "2020-12-19T07:26:41Z", "message": "Fix review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e0439f9564a8128f3435fff93c0d3dc80c42e5d", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e0439f9564a8128f3435fff93c0d3dc80c42e5d", "committedDate": "2020-12-19T07:05:22Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "a0b0e99874342a76149e6517811b081505eadff3", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0b0e99874342a76149e6517811b081505eadff3", "committedDate": "2020-12-19T07:26:41Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "007e574ef0c2ed537bcca9b7a3d14995aaa01a63", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/007e574ef0c2ed537bcca9b7a3d14995aaa01a63", "committedDate": "2020-12-20T03:45:26Z", "message": "Add checkpoint integration test for main function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "committedDate": "2020-12-20T04:38:30Z", "message": "Fix checkstyle issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f473668cef703eba8f7e7de41fcad7502d394050", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f473668cef703eba8f7e7de41fcad7502d394050", "committedDate": "2020-12-20T04:22:14Z", "message": "Fix checkstyle issue"}, "afterCommit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34", "committedDate": "2020-12-20T04:38:30Z", "message": "Fix checkstyle issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MjEwNjM4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#pullrequestreview-557210638", "createdAt": "2020-12-22T16:35:48Z", "commit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjozNTo0OVrOIKBVBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozMzoyMVrOIKYUKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3ODQzOA==", "bodyText": "We should revert this change. Please check for any changes to the license header in other files in the PR and revert.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547378438", "createdAt": "2020-12-22T16:35:49Z", "author": {"login": "nadundesilva"}, "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzMjc0NQ==", "bodyText": "Minor alignment issue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547632745", "createdAt": "2020-12-23T04:27:37Z", "author": {"login": "nadundesilva"}, "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java", "diffHunk": "@@ -79,4 +91,58 @@ public void setParentId(long parentId) {\n     public void setTags(Map<String, Object> tags) {\n         this.tags = tags;\n     }\n+\n+    public List<MockSpan.LogEntry> getEvents() {\n+    return events;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NDQ3Nw==", "bodyText": "Minor alignment issue", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547754477", "createdAt": "2020-12-23T07:32:27Z", "author": {"login": "nadundesilva"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java", "diffHunk": "@@ -73,6 +96,7 @@ public void testMainMethod() throws Exception {\n                     new AbstractMap.SimpleEntry<>(\"src.entry_point.main\", \"true\"),\n                     new AbstractMap.SimpleEntry<>(\"function\", \"main\")\n             ));\n+           Assert.assertEquals(span.getCheckpoints(), expectedCheckpoints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NTA1MQ==", "bodyText": "Should align with final keyword", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547755051", "createdAt": "2020-12-23T07:33:21Z", "author": {"login": "nadundesilva"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java", "diffHunk": "@@ -48,6 +48,29 @@ public void testMainMethod() throws Exception {\n         final String span4Position = FILE_NAME + \":24:15\";\n         final String span5Position = FILE_NAME + \":32:21\";\n         final String span6Position = FILE_NAME + \":38:16\";\n+        final String moduleID = \"intg_tests/tracing_tests:0.0.1\";\n+        final List<BMockSpan.BMockSpanEvent> expectedCheckpoints = Arrays.asList(\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":20:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":22:13\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":25:23\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":32:16\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":32:21\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":33:11\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":38:16\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":39:11\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":53:33\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":53:33\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, \":0:0\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, \":0:0\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":54:31\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":55:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":55:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":56:11\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":56:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":56:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":57:1\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":29:9\")\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c", "author": {"user": {"login": "sachiniSam", "name": "Sachini Samson"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e055ec3c199a7fd20e05af100fba7a38e1c7311c", "committedDate": "2021-01-04T05:24:44Z", "message": "Remove position zero instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMzMzMjA3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#pullrequestreview-563333207", "createdAt": "2021-01-07T09:30:16Z", "commit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwOTozMDoxNlrOIPlLuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwOTozMDoxNlrOIPlLuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIwODc2Mw==", "bodyText": "should this be start line ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r553208763", "createdAt": "2021-01-07T09:30:16Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1526,9 +1527,18 @@ public void visit(BLangIf astIfStmt) {\n \n             // If a terminator statement has not been set for the else-block then just add it.\n             if (this.env.enclBB.terminator == null) {\n-                this.env.enclBB.terminator = new BIRTerminator.GOTO(null, nextBB);\n+                if (astIfStmt.elseStmt.pos != null) {\n+                    Location newLocation = new BLangDiagnosticLocation(\n+                            astIfStmt.elseStmt.pos.lineRange().filePath(),\n+                            astIfStmt.elseStmt.pos.lineRange().endLine().line(),\n+                            astIfStmt.elseStmt.pos.lineRange().endLine().line(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMzU4MDU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#pullrequestreview-563358054", "createdAt": "2021-01-07T10:03:56Z", "commit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDowMzo1NlrOIPmX-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDowMzo1NlrOIPmX-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIyODI4Mw==", "bodyText": "let's make this a top level.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r553228283", "createdAt": "2021-01-07T10:03:56Z", "author": {"login": "manuranga"}, "path": "misc/tracing-extensions/modules/ballerina-choreo-extension/src/main/java/org/ballerinalang/observe/trace/extension/choreo/model/ChoreoTraceSpan.java", "diffHunk": "@@ -112,4 +119,31 @@ public Type getRefType() {\n             FOLLOWS_FROM\n         }\n     }\n+\n+    /**\n+    * Trace Span Event.\n+    */\n+    public static class SpanEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MTMzMTM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#pullrequestreview-715133135", "createdAt": "2021-07-26T17:58:58Z", "commit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQxNzo1ODo1OFrOKFeI3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQxNzo1ODo1OFrOKFeI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgyNTMxMQ==", "bodyText": "Declaration should be Map", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r676825311", "createdAt": "2021-07-26T17:58:58Z", "author": {"login": "tishan89"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "diffHunk": "@@ -124,6 +125,37 @@ public static void startResourceObservation(Environment env, BString serviceName\n         env.setStrandLocal(ObservabilityConstants.SERVICE_NAME, service);\n     }\n \n+    /**\n+     * Add record checkpoint data to active Trace Span.\n+     *\n+     * @param env The Ballerina Environment\n+     * @param pkg The package the instrumented code belongs to\n+     * @param position The source code position the instrumented code defined in\n+     */\n+    public static void recordCheckpoint(Environment env, BString pkg, BString position) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        ObserverContext observerContext = (ObserverContext) env.getStrandLocal(KEY_OBSERVER_CONTEXT);\n+        if (observerContext == null) {\n+            return;\n+        }\n+        BSpan span = (BSpan) observerContext.getProperty(KEY_SPAN);\n+        if (span == null) {\n+            return;\n+        }\n+\n+        // Adding Position and Module ID to the Jaeger Span\n+        Map<String, String> eventAttributes = new HashMap<>(2);\n+        eventAttributes.put(TAG_KEY_MODULE, pkg.getValue());\n+        eventAttributes.put(TAG_KEY_INVOCATION_POSITION, position.getValue());\n+\n+        HashMap<String, Object> events = new HashMap<>(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MTM5NjEw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#pullrequestreview-715139610", "createdAt": "2021-07-26T18:06:32Z", "commit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQxODowNjozM1rOKFecGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQxODowNjozM1rOKFecGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgzMDIzNQ==", "bodyText": "is this enabled?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r676830235", "createdAt": "2021-07-26T18:06:33Z", "author": {"login": "tishan89"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/TestReportTest.java", "diffHunk": "@@ -62,7 +62,7 @@ public void testWarningForReportTools() throws BallerinaTestException, IOExcepti\n         clientLeecher.waitForText(60000);\n     }\n \n-    @Test ()\n+    @Test (enabled = false) // TODO: Enable the test case once the mismatch on line coverage is fixed. issue:#27524", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4751, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}