{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDUxMjAx", "number": 22222, "title": "Add observability compiler extension", "bodyText": "Purpose\n\nDescribe the problems, issues, or needs driving this feature/fix and include links to related issues.\n\nBallerina is a sequence diagram based programming language. Sequence diagram information for a Ballerina program can also be used to visualize observability data. In the is PR we are trying to embed sequence diagram information to the Ballerina program artifact so that we can easily use that information during runtime to visualize observability data on top of the sequence diagram.\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nDuring program compilation the sequence diagram information is captured in memory. The during executable jar creation time the information is embedded as a JSON file in the program JAR.\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-26T09:27:25Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222", "merged": true, "mergeCommit": {"oid": "5bc2c63a2ef4e82f321d161a0b95fb8adec85777"}, "closed": true, "closedAt": "2020-03-30T11:11:13Z", "author": {"login": "a5anka"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRYmZDgH2gAyMzk0MDUxMjAxOjI4YTE1MmZmYWQyOGQ0ZGRhZjhiMmFjYTMxYzNlYjFmNDAyNjJiNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSshqxgFqTM4Mzc0OTkxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "28a152ffad28d4ddaf8b2aca31c3eb1f40262b5d", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28a152ffad28d4ddaf8b2aca31c3eb1f40262b5d", "committedDate": "2020-03-26T09:22:27Z", "message": "Add AST gen module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0172d32432e20590a81783ff92cd0e4910c36654", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0172d32432e20590a81783ff92cd0e4910c36654", "committedDate": "2020-03-26T09:23:00Z", "message": "Implement AST data collection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64f926fb1f7d56f4fb18bbd2db1be804aac04f04", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64f926fb1f7d56f4fb18bbd2db1be804aac04f04", "committedDate": "2020-03-26T09:23:13Z", "message": "Init symbol collector after loading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b849103a0a09a17d506e6c746dbae491f369c51", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b849103a0a09a17d506e6c746dbae491f369c51", "committedDate": "2020-03-26T09:23:24Z", "message": "Implement storing AST data to program JAR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ada90d1a4327f1909c47adb3cbf19cd2860f5b00", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ada90d1a4327f1909c47adb3cbf19cd2860f5b00", "committedDate": "2020-03-26T10:46:42Z", "message": "Merge with 'observability-improvements'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd77bb79dd2f599dcf74f0f5fe6ab265cd3e95bc", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd77bb79dd2f599dcf74f0f5fe6ab265cd3e95bc", "committedDate": "2020-03-27T05:21:02Z", "message": "Remove unwanted debug logs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e465ea068799f63c7d5eb0872e897b0e4ec5b8b7", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e465ea068799f63c7d5eb0872e897b0e4ec5b8b7", "committedDate": "2020-03-26T13:38:50Z", "message": "Remove unwanted debug logs"}, "afterCommit": {"oid": "bd77bb79dd2f599dcf74f0f5fe6ab265cd3e95bc", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd77bb79dd2f599dcf74f0f5fe6ab265cd3e95bc", "committedDate": "2020-03-27T05:21:02Z", "message": "Remove unwanted debug logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28e3e366af91af5f08c3549d31f73c78986f155d", "committedDate": "2020-03-27T10:14:16Z", "message": "Improve error handling of the observerbilty collector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzU4NDI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#pullrequestreview-382758425", "createdAt": "2020-03-27T10:58:43Z", "commit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDo1ODo0NFrOF8sR_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowMjo1N1rOF8uNzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NDM4MA==", "bodyText": "I think we need this task for Test and Run command as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399184380", "createdAt": "2020-03-27T10:58:44Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/BuildCommand.java", "diffHunk": "@@ -390,6 +391,7 @@ public void execute() {\n                 // create the jar.\n                 .addTask(new CreateJarTask(this.dumpBIR, skipCopyLibsFromDist))\n                 .addTask(new CopyResourcesTask(), isSingleFileBuild)\n+                .addTask(new CopyObservabilitySymbolsTask(), isSingleFileBuild)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwOTE0Mw==", "bodyText": "Shall we move this to createJarTask. AFAIU module jar with entry points should contain those sequence diagram json.\nThere is writeJarFile in CodeGenerater where we might need to modify that api with those resource files. So we do not need to create Jar File System again.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399209143", "createdAt": "2020-03-27T11:48:31Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyObservabilitySymbolsTask.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.task;\n+\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.wso2.ballerinalang.compiler.semantics.analyzer.ObserverbilitySymbolCollectorRunner;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Copy collected observability symbol to module jar.\n+ */\n+public class CopyObservabilitySymbolsTask implements Task {\n+\n+    @Override\n+    public void execute(BuildContext buildContext) {\n+        List<BLangPackage> modulesWithEntryPoints = buildContext.getModules().stream()\n+                .filter(m -> m.symbol.entryPointExists)\n+                .collect(Collectors.toList());\n+\n+        if (!modulesWithEntryPoints.isEmpty()) {\n+            CompilerContext compilerContext = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+            ObservabilitySymbolCollector observabilitySymbolCollector\n+                    = ObserverbilitySymbolCollectorRunner.getInstance(compilerContext);\n+\n+            for (BLangPackage module : modulesWithEntryPoints) {\n+                PackageID packageID = module.packageID;\n+                Path moduleJarPath = buildContext.getJarPathFromTargetCache(packageID);\n+                URI uberJarUri = URI.create(\"jar:\" + moduleJarPath.toUri().toString());\n+\n+                try (FileSystem toFs = FileSystems.newFileSystem(uberJarUri, Collections.emptyMap())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMDcwNw==", "bodyText": "I think we do not need this file since no spotbug element is skip.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399210707", "createdAt": "2020-03-27T11:51:46Z", "author": {"login": "warunalakshitha"}, "path": "misc/observerability-symbol-collector/spotbugs-exclude.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMTIwMg==", "bodyText": "Shall we fix licence year and missing licence in other places as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399211202", "createdAt": "2020-03-27T11:52:49Z", "author": {"login": "warunalakshitha"}, "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNDgyMA==", "bodyText": "We do not recommend to use stream api if performance is critical", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399214820", "createdAt": "2020-03-27T12:00:13Z", "author": {"login": "warunalakshitha"}, "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.observability.anaylze;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.ballerinalang.langserver.compiler.common.modal.SymbolMetaInfo;\n+import org.ballerinalang.langserver.compiler.format.JSONGenerationException;\n+import org.ballerinalang.langserver.compiler.format.TextDocumentFormatUtil;\n+import org.ballerinalang.langserver.extensions.VisibleEndpointVisitor;\n+import org.ballerinalang.util.diagnostic.Diagnostic;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.SourceDirectory;\n+import org.wso2.ballerinalang.compiler.SourceDirectoryManager;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.BLangDiagnosticLogHelper;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Default implementation of ObserverbilitySymbolCollector.\n+ */\n+public class DefaultObservabilitySymbolCollector implements ObservabilitySymbolCollector {\n+    private final PrintStream console = System.out;\n+\n+    private static final String NAME = \"name\";\n+    private static final String ORG_NAME = \"orgName\";\n+    private static final String PKG_VERSION = \"pkgVersion\";\n+    private static final String COMPILATION_UNITS = \"compilationUnits\";\n+    private static final String SRC = \"src\";\n+    private static final String KEY_URI = \"uri\";\n+    private static final String AST = \"ast\";\n+    private static final String JSON = \".json\";\n+    public static final String PROGRAM_HASH_KEY = \"PROGRAM_HASH\";\n+    public static final String AST_META_FILENAME = \"meta.properties\";\n+\n+    private CompilerContext compilerContext;\n+\n+    private DiagnosticLog diagnosticLog;\n+\n+    @Override\n+    public void init(CompilerContext context) {\n+        compilerContext = context;\n+        diagnosticLog = BLangDiagnosticLogHelper.getInstance(context);\n+    }\n+\n+    @Override\n+    public void process(BLangPackage module) {\n+        JsonObject moduleJson = getModuleJson(module);\n+        JsonASTHolder.getInstance().addAST(module.packageID.name.getValue(), moduleJson);\n+    }\n+\n+    @Override\n+    public void writeCollectedSymbols(BLangPackage module, Path destination) throws IOException {\n+        Path targetDirPath = destination.resolve(AST);\n+        if (Files.notExists(targetDirPath)) {\n+            Files.createDirectory(targetDirPath);\n+        }\n+        Set<String> packages = getUserPackages();\n+\n+        JsonObject ast = new JsonObject();\n+        for (Map.Entry<String, JsonObject> entry : JsonASTHolder.getInstance()\n+                .getASTMap().entrySet()) {\n+            if (packages.contains(entry.getKey())) {\n+                ast.add(entry.getKey(), entry.getValue());\n+            }\n+        }\n+\n+        String astDataString = JsonCanonicalizer.getEncodedString(ast.toString());\n+        Files.write(targetDirPath.resolve(AST + JSON), astDataString.getBytes(StandardCharsets.UTF_8));\n+\n+        Properties props = new Properties();\n+        props.setProperty(PROGRAM_HASH_KEY, String.valueOf(astDataString.hashCode()));\n+        try (OutputStream outputStream = Files.newOutputStream(targetDirPath.resolve(AST_META_FILENAME))) {\n+            props.store(outputStream, null);\n+        }\n+    }\n+\n+    private Set<String> getUserPackages() {\n+        SourceDirectoryManager sourceDirectoryManager = SourceDirectoryManager.getInstance(compilerContext);\n+        return sourceDirectoryManager.listSourceFilesAndPackages()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNjA3Nw==", "bodyText": "Do we need to encode the json.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399216077", "createdAt": "2020-03-27T12:02:57Z", "author": {"login": "warunalakshitha"}, "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.observability.anaylze;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.ballerinalang.langserver.compiler.common.modal.SymbolMetaInfo;\n+import org.ballerinalang.langserver.compiler.format.JSONGenerationException;\n+import org.ballerinalang.langserver.compiler.format.TextDocumentFormatUtil;\n+import org.ballerinalang.langserver.extensions.VisibleEndpointVisitor;\n+import org.ballerinalang.util.diagnostic.Diagnostic;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.SourceDirectory;\n+import org.wso2.ballerinalang.compiler.SourceDirectoryManager;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.BLangDiagnosticLogHelper;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Default implementation of ObserverbilitySymbolCollector.\n+ */\n+public class DefaultObservabilitySymbolCollector implements ObservabilitySymbolCollector {\n+    private final PrintStream console = System.out;\n+\n+    private static final String NAME = \"name\";\n+    private static final String ORG_NAME = \"orgName\";\n+    private static final String PKG_VERSION = \"pkgVersion\";\n+    private static final String COMPILATION_UNITS = \"compilationUnits\";\n+    private static final String SRC = \"src\";\n+    private static final String KEY_URI = \"uri\";\n+    private static final String AST = \"ast\";\n+    private static final String JSON = \".json\";\n+    public static final String PROGRAM_HASH_KEY = \"PROGRAM_HASH\";\n+    public static final String AST_META_FILENAME = \"meta.properties\";\n+\n+    private CompilerContext compilerContext;\n+\n+    private DiagnosticLog diagnosticLog;\n+\n+    @Override\n+    public void init(CompilerContext context) {\n+        compilerContext = context;\n+        diagnosticLog = BLangDiagnosticLogHelper.getInstance(context);\n+    }\n+\n+    @Override\n+    public void process(BLangPackage module) {\n+        JsonObject moduleJson = getModuleJson(module);\n+        JsonASTHolder.getInstance().addAST(module.packageID.name.getValue(), moduleJson);\n+    }\n+\n+    @Override\n+    public void writeCollectedSymbols(BLangPackage module, Path destination) throws IOException {\n+        Path targetDirPath = destination.resolve(AST);\n+        if (Files.notExists(targetDirPath)) {\n+            Files.createDirectory(targetDirPath);\n+        }\n+        Set<String> packages = getUserPackages();\n+\n+        JsonObject ast = new JsonObject();\n+        for (Map.Entry<String, JsonObject> entry : JsonASTHolder.getInstance()\n+                .getASTMap().entrySet()) {\n+            if (packages.contains(entry.getKey())) {\n+                ast.add(entry.getKey(), entry.getValue());\n+            }\n+        }\n+\n+        String astDataString = JsonCanonicalizer.getEncodedString(ast.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTQxMTY5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#pullrequestreview-383541169", "createdAt": "2020-03-30T05:35:55Z", "commit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTozNTo1NVrOF9aNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTozNTo1NVrOF9aNNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzNjgyMQ==", "bodyText": "No Licence header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399936821", "createdAt": "2020-03-30T05:35:55Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/NullObservabiltySymbolCollector.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTQxNDIz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#pullrequestreview-383541423", "createdAt": "2020-03-30T05:36:50Z", "commit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTozNjo1MFrOF9aOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTozNjo1MFrOF9aOBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzNzAyOA==", "bodyText": "As a practice, we add @since annotation. Please add that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399937028", "createdAt": "2020-03-30T05:36:50Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/NullObservabiltySymbolCollector.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;\n+\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.nio.file.Path;\n+\n+/**\n+ * Null Object for ObserverbilitySymbolCollector interface.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTQxNTE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#pullrequestreview-383541517", "createdAt": "2020-03-30T05:37:05Z", "commit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTozNzowNlrOF9aOTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTozNzowNlrOF9aOTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzNzEwMQ==", "bodyText": "Missing Licence header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399937101", "createdAt": "2020-03-30T05:37:06Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/ObserverbilitySymbolCollectorRunner.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTQ0NDcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#pullrequestreview-383544471", "createdAt": "2020-03-30T05:46:19Z", "commit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTo0NjoxOVrOF9aYPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTo0NjoxOVrOF9aYPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzOTY0Nw==", "bodyText": "Missing Licence header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399939647", "createdAt": "2020-03-30T05:46:19Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/spi/ObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.wso2.ballerinalang.compiler.spi;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf4932a1cd98261bc1f3094c00b36f5bd6f7ea0", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/faf4932a1cd98261bc1f3094c00b36f5bd6f7ea0", "committedDate": "2020-03-30T06:07:38Z", "message": "Remove spotbugs-exclude file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d92d0173e4f07bc39b4fcb5872e6b58522a09f94", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d92d0173e4f07bc39b4fcb5872e6b58522a09f94", "committedDate": "2020-03-30T06:24:36Z", "message": "Update copyright header"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd255a18850878ffea85ba71ec06823e8f8d2460", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd255a18850878ffea85ba71ec06823e8f8d2460", "committedDate": "2020-03-30T06:11:56Z", "message": "Update copyright header"}, "afterCommit": {"oid": "d92d0173e4f07bc39b4fcb5872e6b58522a09f94", "author": {"user": {"login": "a5anka", "name": "Asanka Abeyweera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d92d0173e4f07bc39b4fcb5872e6b58522a09f94", "committedDate": "2020-03-30T06:24:36Z", "message": "Update copyright header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNzQ5OTE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#pullrequestreview-383749919", "createdAt": "2020-03-30T11:09:19Z", "commit": {"oid": "d92d0173e4f07bc39b4fcb5872e6b58522a09f94"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4211, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}