{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzU4NTYz", "number": 23732, "title": "Fix expressions are supported as function-call lhs", "bodyText": "Purpose\n$subject.\nFixes #23632\nApproach\nN/A\nSamples\nN/A\nRemarks\nN/A\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-06-04T11:04:26Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732", "merged": true, "mergeCommit": {"oid": "35e2218fe4df217e408f6e339b8324cc01fcf747"}, "closed": true, "closedAt": "2020-06-10T06:30:21Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn9j1sgBqjM0MDY2OTk5ODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpzsASAFqTQyNzc0NTMwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bbd51bdf902efba60c647ea52a02092f5a8265ca", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bbd51bdf902efba60c647ea52a02092f5a8265ca", "committedDate": "2020-06-04T10:59:44Z", "message": "Change functional call parsing"}, "afterCommit": {"oid": "0128b4f86331e9d37562e6b19e25c825977651e5", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0128b4f86331e9d37562e6b19e25c825977651e5", "committedDate": "2020-06-04T12:51:56Z", "message": "Change functional call parsing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0128b4f86331e9d37562e6b19e25c825977651e5", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0128b4f86331e9d37562e6b19e25c825977651e5", "committedDate": "2020-06-04T12:51:56Z", "message": "Change functional call parsing"}, "afterCommit": {"oid": "d3d741d0c9805bb2c7752cf442049d85319f1518", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3d741d0c9805bb2c7752cf442049d85319f1518", "committedDate": "2020-06-04T12:54:08Z", "message": "Change function call parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a859a3c6507a2582e6fd5a847fa18fa3500b981", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a859a3c6507a2582e6fd5a847fa18fa3500b981", "committedDate": "2020-06-05T09:35:06Z", "message": "Revamp function call parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20a1af404b552bed3dd8f0e099cb243b4d6f030f", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20a1af404b552bed3dd8f0e099cb243b4d6f030f", "committedDate": "2020-06-05T09:36:09Z", "message": "Revamp function call recovery and add recovery tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3d741d0c9805bb2c7752cf442049d85319f1518", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3d741d0c9805bb2c7752cf442049d85319f1518", "committedDate": "2020-06-04T12:54:08Z", "message": "Change function call parsing"}, "afterCommit": {"oid": "20a1af404b552bed3dd8f0e099cb243b4d6f030f", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20a1af404b552bed3dd8f0e099cb243b4d6f030f", "committedDate": "2020-06-05T09:36:09Z", "message": "Revamp function call recovery and add recovery tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MTY1NzUx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#pullrequestreview-425165751", "createdAt": "2020-06-05T10:02:42Z", "commit": {"oid": "20a1af404b552bed3dd8f0e099cb243b4d6f030f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowMjo0MlrOGfoZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowMjo0MlrOGfoZcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMDkxNA==", "bodyText": "Under ARG_LIST context, ARG_LIST_START is always there as an alternative.\nIn other contexts, ARG_LIST_START is added as an alternative only if allowFuncCall is true.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#discussion_r435820914", "createdAt": "2020-06-05T10:02:42Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1765,82 +1768,97 @@ private Result seekInAccessExpression(ParserRuleContext currentCtx, int lookahea\n      */\n     private Result seekMatchInExpressionRhs(int lookahead, int currentDepth, int currentMatches, boolean isEntryPoint) {\n         ParserRuleContext parentCtx = getParentContext();\n-        ParserRuleContext[] next;\n+        if (parentCtx == ParserRuleContext.FUNCTION_CALL_START) {\n+            endContext();\n+            return seekMatchInExpressionRhs(lookahead, currentDepth, currentMatches, isEntryPoint, true);\n+        } else {\n+            return seekMatchInExpressionRhs(lookahead, currentDepth, currentMatches, isEntryPoint, false);\n+        }\n+    }\n+\n+    private Result seekMatchInExpressionRhs(int lookahead, int currentDepth, int currentMatches, boolean isEntryPoint,\n+                                            boolean allowFuncCall) {\n+        ParserRuleContext parentCtx = getParentContext();\n+        ParserRuleContext[] alternatives = null;\n         switch (parentCtx) {\n             case ARG_LIST:\n-                next = new ParserRuleContext[] { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n                         ParserRuleContext.ANNOT_CHAINING_TOKEN, ParserRuleContext.OPTIONAL_CHAINING_TOKEN,\n                         ParserRuleContext.CONDITIONAL_EXPRESSION, ParserRuleContext.XML_NAVIGATE_EXPR,\n                         ParserRuleContext.MEMBER_ACCESS_KEY_EXPR, ParserRuleContext.COMMA,\n                         ParserRuleContext.ARG_LIST_START, ParserRuleContext.ARG_LIST_END };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, alternatives, isEntryPoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a1af404b552bed3dd8f0e099cb243b4d6f030f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04654775ff71bda4e848de10915aef00b0ffc477", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04654775ff71bda4e848de10915aef00b0ffc477", "committedDate": "2020-06-08T04:00:23Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTIzMjkz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#pullrequestreview-425923293", "createdAt": "2020-06-08T05:28:58Z", "commit": {"oid": "04654775ff71bda4e848de10915aef00b0ffc477"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNToyODo1OFrOGgPoNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0ODo0MVrOGgP7uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2MzY3MA==", "bodyText": "Shouldn't this be merged with isValidExprRhsStart?\nBecause there are other places where we use isValidExprRhsStart for the same purpose, and those should behave the same way right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#discussion_r436463670", "createdAt": "2020-06-08T05:28:58Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4299,6 +4299,15 @@ private boolean isValidExprRhsStart(SyntaxKind tokenKind) {\n         }\n     }\n \n+    private boolean isInvalidFunctionCallStart(SyntaxKind tokenKind, STNode lhsExpr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04654775ff71bda4e848de10915aef00b0ffc477"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzE5MQ==", "bodyText": "This operation is a bit expensive. Can we avoid this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#discussion_r436467191", "createdAt": "2020-06-08T05:43:04Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1875,16 +1893,24 @@ private Result seekMatchInExpressionRhs(int lookahead, int currentDepth, int cur\n             throw new IllegalStateException(parentCtx.toString());\n         }\n \n-        ParserRuleContext[] alternatives =\n-                { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.IS_KEYWORD, ParserRuleContext.DOT,\n-                        ParserRuleContext.ANNOT_CHAINING_TOKEN, ParserRuleContext.OPTIONAL_CHAINING_TOKEN,\n-                        ParserRuleContext.CONDITIONAL_EXPRESSION, ParserRuleContext.XML_NAVIGATE_EXPR,\n-                        ParserRuleContext.MEMBER_ACCESS_KEY_EXPR, ParserRuleContext.RIGHT_ARROW,\n-                        ParserRuleContext.SYNC_SEND_TOKEN, nextContext, ParserRuleContext.ARG_LIST_START };\n+        alternatives = new ParserRuleContext[] { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.IS_KEYWORD,\n+                ParserRuleContext.DOT, ParserRuleContext.ANNOT_CHAINING_TOKEN,\n+                ParserRuleContext.OPTIONAL_CHAINING_TOKEN, ParserRuleContext.CONDITIONAL_EXPRESSION,\n+                ParserRuleContext.XML_NAVIGATE_EXPR, ParserRuleContext.MEMBER_ACCESS_KEY_EXPR,\n+                ParserRuleContext.RIGHT_ARROW, ParserRuleContext.SYNC_SEND_TOKEN, nextContext };\n \n+        if (allowFuncCall) {\n+            alternatives = addNewAlternative(alternatives, ParserRuleContext.ARG_LIST_START);\n+        }\n         return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, alternatives, isEntryPoint);\n     }\n \n+    private ParserRuleContext[] addNewAlternative(ParserRuleContext[] alternatives, ParserRuleContext newAlternative) {\n+        List<ParserRuleContext> alternativesList = new ArrayList<>(Arrays.asList(alternatives));\n+        alternativesList.add(newAlternative);\n+        return alternativesList.toArray(alternatives);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04654775ff71bda4e848de10915aef00b0ffc477"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2ODY2Nw==", "bodyText": "Why is that needed?\nWhat if I write expr() inside func-args?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#discussion_r436468667", "createdAt": "2020-06-08T05:48:41Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1765,82 +1768,97 @@ private Result seekInAccessExpression(ParserRuleContext currentCtx, int lookahea\n      */\n     private Result seekMatchInExpressionRhs(int lookahead, int currentDepth, int currentMatches, boolean isEntryPoint) {\n         ParserRuleContext parentCtx = getParentContext();\n-        ParserRuleContext[] next;\n+        if (parentCtx == ParserRuleContext.FUNCTION_CALL_START) {\n+            endContext();\n+            return seekMatchInExpressionRhs(lookahead, currentDepth, currentMatches, isEntryPoint, true);\n+        } else {\n+            return seekMatchInExpressionRhs(lookahead, currentDepth, currentMatches, isEntryPoint, false);\n+        }\n+    }\n+\n+    private Result seekMatchInExpressionRhs(int lookahead, int currentDepth, int currentMatches, boolean isEntryPoint,\n+                                            boolean allowFuncCall) {\n+        ParserRuleContext parentCtx = getParentContext();\n+        ParserRuleContext[] alternatives = null;\n         switch (parentCtx) {\n             case ARG_LIST:\n-                next = new ParserRuleContext[] { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n                         ParserRuleContext.ANNOT_CHAINING_TOKEN, ParserRuleContext.OPTIONAL_CHAINING_TOKEN,\n                         ParserRuleContext.CONDITIONAL_EXPRESSION, ParserRuleContext.XML_NAVIGATE_EXPR,\n                         ParserRuleContext.MEMBER_ACCESS_KEY_EXPR, ParserRuleContext.COMMA,\n                         ParserRuleContext.ARG_LIST_START, ParserRuleContext.ARG_LIST_END };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, alternatives, isEntryPoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMDkxNA=="}, "originalCommit": {"oid": "20a1af404b552bed3dd8f0e099cb243b4d6f030f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTMyMTcw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#pullrequestreview-425932170", "createdAt": "2020-06-08T05:57:21Z", "commit": {"oid": "04654775ff71bda4e848de10915aef00b0ffc477"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo1NzoyMVrOGgQExQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo1ODo0NlrOGgQGNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ3MDk4MQ==", "bodyText": "Can we do it without starting a context? because it is also an expensive operation. Should use that only if theres no other way.\nWhat if we give an alias, say \"VARIABLE_REF_RHS\", and that will call the seekMatchInExpressionRhs with the flag on/off", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#discussion_r436470981", "createdAt": "2020-06-08T05:57:21Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -3522,6 +3548,22 @@ private ParserRuleContext getNextRuleForExpr() {\n         return ParserRuleContext.EXPRESSION_RHS;\n     }\n \n+    private ParserRuleContext getNextRuleForExprStartsWithIdentifier() {\n+        ParserRuleContext parentCtx;\n+        parentCtx = getParentContext();\n+        if (parentCtx == ParserRuleContext.CONSTANT_EXPRESSION) {\n+            endContext();\n+            return getNextRuleForConstExpr();\n+        }\n+        return getNextRuleForExprWithFuncCallEnabled();\n+    }\n+\n+    private ParserRuleContext getNextRuleForExprWithFuncCallEnabled() {\n+        // Here we start a new context so that expr-rhs will allow function calls\n+        startContext(ParserRuleContext.FUNCTION_CALL_START);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04654775ff71bda4e848de10915aef00b0ffc477"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ3MTM1MA==", "bodyText": "Will the above logic be simplified, if we take the common things out, similar to the second switch-case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#discussion_r436471350", "createdAt": "2020-06-08T05:58:46Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1770,82 +1773,97 @@ private Result seekInAccessExpression(ParserRuleContext currentCtx, int lookahea\n      */\n     private Result seekMatchInExpressionRhs(int lookahead, int currentDepth, int currentMatches, boolean isEntryPoint) {\n         ParserRuleContext parentCtx = getParentContext();\n-        ParserRuleContext[] next;\n+        if (parentCtx == ParserRuleContext.FUNCTION_CALL_START) {\n+            endContext();\n+            return seekMatchInExpressionRhs(lookahead, currentDepth, currentMatches, isEntryPoint, true);\n+        } else {\n+            return seekMatchInExpressionRhs(lookahead, currentDepth, currentMatches, isEntryPoint, false);\n+        }\n+    }\n+\n+    private Result seekMatchInExpressionRhs(int lookahead, int currentDepth, int currentMatches, boolean isEntryPoint,\n+                                            boolean allowFuncCall) {\n+        ParserRuleContext parentCtx = getParentContext();\n+        ParserRuleContext[] alternatives = null;\n         switch (parentCtx) {\n             case ARG_LIST:\n-                next = new ParserRuleContext[] { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n                         ParserRuleContext.ANNOT_CHAINING_TOKEN, ParserRuleContext.OPTIONAL_CHAINING_TOKEN,\n                         ParserRuleContext.CONDITIONAL_EXPRESSION, ParserRuleContext.XML_NAVIGATE_EXPR,\n                         ParserRuleContext.MEMBER_ACCESS_KEY_EXPR, ParserRuleContext.COMMA,\n                         ParserRuleContext.ARG_LIST_START, ParserRuleContext.ARG_LIST_END };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, alternatives, isEntryPoint);\n             case MAPPING_CONSTRUCTOR:\n             case MULTI_WAIT_FIELDS:\n-                next = new ParserRuleContext[] { ParserRuleContext.CLOSE_BRACE, ParserRuleContext.BINARY_OPERATOR,\n-                        ParserRuleContext.DOT, ParserRuleContext.ANNOT_CHAINING_TOKEN,\n-                        ParserRuleContext.OPTIONAL_CHAINING_TOKEN, ParserRuleContext.CONDITIONAL_EXPRESSION,\n-                        ParserRuleContext.XML_NAVIGATE_EXPR, ParserRuleContext.MEMBER_ACCESS_KEY_EXPR,\n-                        ParserRuleContext.COMMA, ParserRuleContext.ARG_LIST_START };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.CLOSE_BRACE,\n+                        ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n+                        ParserRuleContext.ANNOT_CHAINING_TOKEN, ParserRuleContext.OPTIONAL_CHAINING_TOKEN,\n+                        ParserRuleContext.CONDITIONAL_EXPRESSION, ParserRuleContext.XML_NAVIGATE_EXPR,\n+                        ParserRuleContext.MEMBER_ACCESS_KEY_EXPR, ParserRuleContext.COMMA };\n+                break;\n             case COMPUTED_FIELD_NAME:\n                 // Here we give high priority to the comma. Therefore order of the below array matters.\n-                next = new ParserRuleContext[] { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.BINARY_OPERATOR,\n-                        ParserRuleContext.DOT, ParserRuleContext.ANNOT_CHAINING_TOKEN,\n-                        ParserRuleContext.OPTIONAL_CHAINING_TOKEN, ParserRuleContext.CONDITIONAL_EXPRESSION,\n-                        ParserRuleContext.XML_NAVIGATE_EXPR, ParserRuleContext.OPEN_BRACKET,\n-                        ParserRuleContext.ARG_LIST_START };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.CLOSE_BRACKET,\n+                        ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n+                        ParserRuleContext.ANNOT_CHAINING_TOKEN, ParserRuleContext.OPTIONAL_CHAINING_TOKEN,\n+                        ParserRuleContext.CONDITIONAL_EXPRESSION, ParserRuleContext.XML_NAVIGATE_EXPR,\n+                        ParserRuleContext.OPEN_BRACKET };\n+                break;\n             case LISTENERS_LIST:\n-                next = new ParserRuleContext[] { ParserRuleContext.COMMA, ParserRuleContext.BINARY_OPERATOR,\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.COMMA, ParserRuleContext.BINARY_OPERATOR,\n                         ParserRuleContext.DOT, ParserRuleContext.ANNOT_CHAINING_TOKEN,\n                         ParserRuleContext.OPTIONAL_CHAINING_TOKEN, ParserRuleContext.CONDITIONAL_EXPRESSION,\n                         ParserRuleContext.XML_NAVIGATE_EXPR, ParserRuleContext.MEMBER_ACCESS_KEY_EXPR,\n-                        ParserRuleContext.OPEN_BRACE, ParserRuleContext.ARG_LIST_START };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                        ParserRuleContext.OPEN_BRACE };\n+                break;\n             case LIST_CONSTRUCTOR:\n             case MEMBER_ACCESS_KEY_EXPR:\n             case BRACKETED_LIST:\n             case STMT_START_BRACKETED_LIST:\n-                next = new ParserRuleContext[] { ParserRuleContext.COMMA, ParserRuleContext.BINARY_OPERATOR,\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.COMMA, ParserRuleContext.BINARY_OPERATOR,\n                         ParserRuleContext.DOT, ParserRuleContext.ANNOT_CHAINING_TOKEN,\n                         ParserRuleContext.OPTIONAL_CHAINING_TOKEN, ParserRuleContext.CONDITIONAL_EXPRESSION,\n                         ParserRuleContext.XML_NAVIGATE_EXPR, ParserRuleContext.MEMBER_ACCESS_KEY_EXPR,\n-                        ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.ARG_LIST_START };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                        ParserRuleContext.CLOSE_BRACKET };\n+                break;\n             case LET_EXPR_LET_VAR_DECL:\n-                next = new ParserRuleContext[] { ParserRuleContext.COMMA, ParserRuleContext.BINARY_OPERATOR,\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.COMMA, ParserRuleContext.BINARY_OPERATOR,\n                         ParserRuleContext.DOT, ParserRuleContext.ANNOT_CHAINING_TOKEN,\n                         ParserRuleContext.OPTIONAL_CHAINING_TOKEN, ParserRuleContext.CONDITIONAL_EXPRESSION,\n                         ParserRuleContext.XML_NAVIGATE_EXPR, ParserRuleContext.MEMBER_ACCESS_KEY_EXPR,\n-                        ParserRuleContext.IN_KEYWORD, ParserRuleContext.ARG_LIST_START };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                        ParserRuleContext.IN_KEYWORD };\n+                break;\n             case LET_CLAUSE_LET_VAR_DECL:\n-                next = new ParserRuleContext[] { ParserRuleContext.COMMA, ParserRuleContext.BINARY_OPERATOR,\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.COMMA, ParserRuleContext.BINARY_OPERATOR,\n                         ParserRuleContext.DOT, ParserRuleContext.ANNOT_CHAINING_TOKEN,\n                         ParserRuleContext.OPTIONAL_CHAINING_TOKEN, ParserRuleContext.CONDITIONAL_EXPRESSION,\n                         ParserRuleContext.XML_NAVIGATE_EXPR, ParserRuleContext.MEMBER_ACCESS_KEY_EXPR,\n-                        ParserRuleContext.LET_CLAUSE_END, ParserRuleContext.ARG_LIST_START };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                        ParserRuleContext.LET_CLAUSE_END };\n+                break;\n             case QUERY_EXPRESSION:\n-                next = new ParserRuleContext[] { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n+                alternatives = new ParserRuleContext[] { ParserRuleContext.BINARY_OPERATOR, ParserRuleContext.DOT,\n                         ParserRuleContext.ANNOT_CHAINING_TOKEN, ParserRuleContext.OPTIONAL_CHAINING_TOKEN,\n                         ParserRuleContext.CONDITIONAL_EXPRESSION, ParserRuleContext.XML_NAVIGATE_EXPR,\n-                        ParserRuleContext.MEMBER_ACCESS_KEY_EXPR, ParserRuleContext.QUERY_PIPELINE_RHS,\n-                        ParserRuleContext.ARG_LIST_START };\n-                return seekInAlternativesPaths(lookahead, currentDepth, currentMatches, next, isEntryPoint);\n+                        ParserRuleContext.MEMBER_ACCESS_KEY_EXPR, ParserRuleContext.QUERY_PIPELINE_RHS };\n+                break;\n             default:\n                 if (isParameter(parentCtx)) {\n-                    next = new ParserRuleContext[] { ParserRuleContext.CLOSE_PARENTHESIS,\n+                    alternatives = new ParserRuleContext[] { ParserRuleContext.CLOSE_PARENTHESIS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04654775ff71bda4e848de10915aef00b0ffc477"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1d174fc5c1382b3a5383bc152ef201db598582", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa1d174fc5c1382b3a5383bc152ef201db598582", "committedDate": "2020-06-09T06:34:19Z", "message": "Revamp function call parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2dd815545f1b18dbdaa92d10d3aca95766d8663", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2dd815545f1b18dbdaa92d10d3aca95766d8663", "committedDate": "2020-06-09T06:35:23Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/test/resources/expressions/func-call/func_call_assert_12.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d07c3320e16287f82093ac49b8514cd0f380714", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d07c3320e16287f82093ac49b8514cd0f380714", "committedDate": "2020-06-09T06:47:18Z", "message": "Resolve a json file conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "804f5ef0aad7e12fde796ea5d3cfd7f8c7fd75c5", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/804f5ef0aad7e12fde796ea5d3cfd7f8c7fd75c5", "committedDate": "2020-06-09T09:28:32Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6bc95b4beb73012061545f7fbf8248a66555767", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6bc95b4beb73012061545f7fbf8248a66555767", "committedDate": "2020-06-09T10:03:04Z", "message": "Merge branch 'fix-parser-issues' of https://github.com/SupunS/ballerina into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dab293032e94dbec70fe242a7a6bb8ad8296509", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2dab293032e94dbec70fe242a7a6bb8ad8296509", "committedDate": "2020-06-09T10:15:26Z", "message": "Fix checkStyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be7eaf037225f3d1f268806a357a49e72e22740c", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be7eaf037225f3d1f268806a357a49e72e22740c", "committedDate": "2020-06-09T10:12:17Z", "message": "Fix checkStyle"}, "afterCommit": {"oid": "2dab293032e94dbec70fe242a7a6bb8ad8296509", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2dab293032e94dbec70fe242a7a6bb8ad8296509", "committedDate": "2020-06-09T10:15:26Z", "message": "Fix checkStyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b85af3e9dd6c0238ccac05ff87eb40865861a2b0", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b85af3e9dd6c0238ccac05ff87eb40865861a2b0", "committedDate": "2020-06-10T04:08:54Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzQ1MzA4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23732#pullrequestreview-427745308", "createdAt": "2020-06-10T06:30:12Z", "commit": {"oid": "b85af3e9dd6c0238ccac05ff87eb40865861a2b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4398, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}