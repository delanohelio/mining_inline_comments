{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MjE2NDg0", "number": 25302, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0NjoyMFrOEZUgOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzowMDo0MlrOEckEQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTg1Nzg2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0NjoyMFrOHCENxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0NjoyMFrOHCENxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyODI2Mw==", "bodyText": "\ud83c\udfd5\ufe0f  Not related to this PR", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r471928263", "createdAt": "2020-08-18T05:46:20Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2118,7 +2119,7 @@ public void visit(BLangSimpleVarRef varRefExpr) {\n             //  locally defined record type defs. This check should be removed once local var referencing is supported.\n             if (((symbol.tag & SymTag.VARIABLE) == SymTag.VARIABLE)) {\n                 BVarSymbol varSym = (BVarSymbol) symbol;\n-                checkSefReferences(varRefExpr.pos, env, varSym);\n+                checkSelfReferences(varRefExpr.pos, env, varSym);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c938aed5d5c2c46cccf35c30eb365286c036c896"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTQ0NzMzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangObjectCtorExpr.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzo1MToyMFrOHC64Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzo1MToyMFrOHC64Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgyMzg1OA==", "bodyText": "\ud83d\udd27 Need to remove all unused methods", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r472823858", "createdAt": "2020-08-19T07:51:20Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangObjectCtorExpr.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.SimpleVariableNode;\n+import org.ballerinalang.model.tree.types.StructureTypeNode;\n+import org.ballerinalang.model.tree.types.TypeNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents the object-constructor-expr.\n+ *\n+ * @since slp3\n+ */\n+public class BLangObjectCtorExpr extends BLangExpression implements StructureTypeNode {\n+\n+    public BLangObjectTypeNode objectTypeNode;\n+    public BLangTypeInit typeInit;\n+    public BLangType referenceType;\n+\n+    public BLangObjectCtorExpr(BLangObjectTypeNode objectTypeNode) {\n+        super();\n+        this.objectTypeNode = objectTypeNode;\n+    }\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    /**\n+     * Returns the kind of this node.\n+     *\n+     * @return the kind of this node.\n+     */\n+    @Override\n+    public NodeKind getKind() {\n+\n+        return NodeKind.OBJECT_CTOR_EXPRESSION;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder(\"OCE {\");\n+        sb.append(this.objectTypeNode.toString());\n+        sb.append(\"};\\n\");\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public boolean getIsAnonymous() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1062f8f8826a6f5b9d6a09e2c4579c1e1fd9cf"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjAyNTU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNDo1NlrOHD8I7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNDo1NlrOHD8I7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MzEwMg==", "bodyText": "Shall we add these grammar rules as a doc comment? you can check other places for a sample", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473893102", "createdAt": "2020-08-20T11:14:56Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjAyNzQ0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNToyOFrOHD8KBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNToyOFrOHD8KBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MzM4MA==", "bodyText": "these context starts  and closes are not necessary.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473893380", "createdAt": "2020-08-20T11:15:28Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjAzMTEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNjo0MVrOHD8MSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNjo0MVrOHD8MSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5Mzk2MA==", "bodyText": "Since we come here after checking next token is CLIENT_KEYWORD, we can directly use consume() without going to parseClientKeyword()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473893960", "createdAt": "2020-08-20T11:16:41Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjAzODcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxODo0M1rOHD8Qbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoxMjoxNFrOHGFlLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NTAyMw==", "bodyText": "we need type-reference := identifier | qualified-identifier right? not a typeDescriptor\ncan use parseQualifiedIdentifier() for that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473895023", "createdAt": "2020-08-20T11:18:43Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQwMDQ5NA==", "bodyText": "Please help check changed according to this and comment #25302 (comment)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r474400494", "createdAt": "2020-08-21T04:23:15Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NTAyMw=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE0NDk0Mg==", "bodyText": "Current way of parsing looks OK to me!", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r476144942", "createdAt": "2020-08-25T04:12:14Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NTAyMw=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjA0MjI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxOTo0OFrOHD8Sbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxOTo0OFrOHD8Sbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NTUzNA==", "bodyText": "Shall we change method name parseObjectConstructorExpressionNode to parseObjectConstructorExpression to be aligned with other expressions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473895534", "createdAt": "2020-08-20T11:19:48Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjA0ODA1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyMToxOVrOHD8Vow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyMToxOVrOHD8Vow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NjM1NQ==", "bodyText": "don't need this context as well since we are already inside OBJECT_CONSTRUCTOR context", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473896355", "createdAt": "2020-08-20T11:21:19Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);\n+        } else {\n+            typeDescriptor = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectCtorBody = parseObjectConstructorBody();\n+\n+        endContext();\n+\n+        return STNodeFactory.createObjectConstructorExpressionNode(annots,\n+                objectTypeQualifier, objectKeyword, typeDescriptor, objectCtorBody);\n+    }\n+\n+    private STNode parseObjectConstructorBody() {\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR_BODY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjA1MjkzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyMzowNFrOHD8YpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyNjo1OFrOHFXryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NzEyNA==", "bodyText": "I think currently parseObjectMembers() allows object-type-inclusion := * type-reference ; as well.\nI can fix this when adding error recovery though. :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473897124", "createdAt": "2020-08-20T11:23:04Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);\n+        } else {\n+            typeDescriptor = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectCtorBody = parseObjectConstructorBody();\n+\n+        endContext();\n+\n+        return STNodeFactory.createObjectConstructorExpressionNode(annots,\n+                objectTypeQualifier, objectKeyword, typeDescriptor, objectCtorBody);\n+    }\n+\n+    private STNode parseObjectConstructorBody() {\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR_BODY);\n+\n+        STNode openBrace = parseOpenBrace();\n+        STNode objectMembers = parseObjectMembers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MDY3Mw==", "bodyText": "Do we have to duplicate functions or can we set a class level boolean to handle this easily?\nAs an example.\neg:\nskipInclusion = true;\nSTNode objectMembers = parseObjectMembers();\nskipInclusion = false;\nThen conditionally handle at parseObjectMemberWithoutMeta.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473950673", "createdAt": "2020-08-20T13:00:42Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);\n+        } else {\n+            typeDescriptor = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectCtorBody = parseObjectConstructorBody();\n+\n+        endContext();\n+\n+        return STNodeFactory.createObjectConstructorExpressionNode(annots,\n+                objectTypeQualifier, objectKeyword, typeDescriptor, objectCtorBody);\n+    }\n+\n+    private STNode parseObjectConstructorBody() {\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR_BODY);\n+\n+        STNode openBrace = parseOpenBrace();\n+        STNode objectMembers = parseObjectMembers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NzEyNA=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk2Mzc0MA==", "bodyText": "Class level variables can be dangerous since the parser is recursive-descent.\neg: an anon-object inside the object constructor - then the flag is set to true when the parser reaches the inner construct, where it should have been false\nPassing a flag to the method as a parameter would be fine though.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473963740", "createdAt": "2020-08-20T13:20:21Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);\n+        } else {\n+            typeDescriptor = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectCtorBody = parseObjectConstructorBody();\n+\n+        endContext();\n+\n+        return STNodeFactory.createObjectConstructorExpressionNode(annots,\n+                objectTypeQualifier, objectKeyword, typeDescriptor, objectCtorBody);\n+    }\n+\n+    private STNode parseObjectConstructorBody() {\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR_BODY);\n+\n+        STNode openBrace = parseOpenBrace();\n+        STNode objectMembers = parseObjectMembers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NzEyNA=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5Mjk3MQ==", "bodyText": "Done with commit : df2ec9d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r475392971", "createdAt": "2020-08-24T07:26:58Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);\n+        } else {\n+            typeDescriptor = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectCtorBody = parseObjectConstructorBody();\n+\n+        endContext();\n+\n+        return STNodeFactory.createObjectConstructorExpressionNode(annots,\n+                objectTypeQualifier, objectKeyword, typeDescriptor, objectCtorBody);\n+    }\n+\n+    private STNode parseObjectConstructorBody() {\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR_BODY);\n+\n+        STNode openBrace = parseOpenBrace();\n+        STNode objectMembers = parseObjectMembers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NzEyNA=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjA1NzU1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyNDo0MVrOHD8big==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDoxODo0NFrOHEbC2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5Nzg2Ng==", "bodyText": "I think it is better to merge two nodes. @SupunS WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473897866", "createdAt": "2020-08-20T11:24:41Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectKeyword\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"typeDescriptor\",\n+                    \"type\": \"TypeDescriptorNode\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectConstructorBody\",\n+                    \"type\": \"ObjectConstructorBodyNode\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"ObjectConstructorBodyNode\",\n+            \"base\": \"Node\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR_BODY\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"openBraceToken\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"members\",\n+                    \"type\": \"Node\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"closeBraceToken\",\n+                    \"type\": \"Token\"\n+                }\n+            ]\n+        },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3MTE2Mw==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473971163", "createdAt": "2020-08-20T13:27:21Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectKeyword\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"typeDescriptor\",\n+                    \"type\": \"TypeDescriptorNode\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectConstructorBody\",\n+                    \"type\": \"ObjectConstructorBodyNode\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"ObjectConstructorBodyNode\",\n+            \"base\": \"Node\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR_BODY\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"openBraceToken\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"members\",\n+                    \"type\": \"Node\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"closeBraceToken\",\n+                    \"type\": \"Token\"\n+                }\n+            ]\n+        },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5Nzg2Ng=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5OTQ0OA==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r474399448", "createdAt": "2020-08-21T04:18:44Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectKeyword\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"typeDescriptor\",\n+                    \"type\": \"TypeDescriptorNode\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectConstructorBody\",\n+                    \"type\": \"ObjectConstructorBodyNode\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"ObjectConstructorBodyNode\",\n+            \"base\": \"Node\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR_BODY\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"openBraceToken\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"members\",\n+                    \"type\": \"Node\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"closeBraceToken\",\n+                    \"type\": \"Token\"\n+                }\n+            ]\n+        },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5Nzg2Ng=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjA3MDMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyODoyMlrOHD8jAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDoyMToxNFrOHEbE8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5OTc3OQ==", "bodyText": "{\n                    \"name\": \"qualifierList\",\n                    \"type\": \"Token\",\n                    \"occurrences\": \"MULTIPLE\"\n                }\nShall we use qualifierList instead?  bcz when there's a change to no of preceding qualifiers we don't need to change the syntax tree.\nCheck MethodDeclarationNode there's similar case with remote-qual := remote", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473899779", "createdAt": "2020-08-20T11:28:22Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk2NTc3Ng==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473965776", "createdAt": "2020-08-20T13:22:14Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5OTc3OQ=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5OTk4NQ==", "bodyText": "I changed this. Accept as a qualifier list (not optional) and throw an exception on Node transformer for unexpected tokens hope this the correct way to handle this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r474399985", "createdAt": "2020-08-21T04:21:14Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5OTc3OQ=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjA3MzY2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression_negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTozMlrOHD8lJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTozMlrOHD8lJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMDMyNA==", "bodyText": "missing EOF newline", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473900324", "createdAt": "2020-08-20T11:29:32Z", "author": {"login": "lochana-chathura"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression_negative.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// test object reference type\n+\n+type SampleRec record {};\n+\n+var objCreatedViaConstructor = object SampleRec {};\n+\n+var notClient = object {\n+    private remote function remoteFunc() {}\n+};\n+\n+var invalidInit = object {\n+    private function init(int x) {}\n+};\n+\n+var objVariable = object {\n+    private function init() {\n+    }\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjA3NDEwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTo0MlrOHD8lcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTo0MlrOHD8lcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMDQwMA==", "bodyText": "add new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473900400", "createdAt": "2020-08-20T11:29:42Z", "author": {"login": "lochana-chathura"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression.bal", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// test object field access\n+\n+type MO object {\n+    int x = 0;\n+};\n+\n+type MOO object {\n+    *MO;\n+    int n = 0;\n+\n+    public function init() {\n+        self.x = 5;\n+    }\n+};\n+\n+var objCreatedViaConstructor = object MOO {\n+    int n = 20;\n+    int y = 5;\n+\n+    public function init() {\n+        self.x = 4;\n+        self.y = 10;\n+    }\n+};\n+\n+function testObjectCreationViaObjectConstructor() {\n+    assertValueEquality(20, objCreatedViaConstructor.n);\n+    assertValueEquality(4, objCreatedViaConstructor.x);\n+    assertValueEquality(10, objCreatedViaConstructor.y);\n+}\n+\n+// Test annotation attachment and access\n+\n+public type ObjectData record {|\n+    string descriptor = \"\";\n+|};\n+\n+public annotation ObjectData OBJAnnots on type;\n+\n+var obj = @OBJAnnots { descriptor: \"ConstructedObject\" }\n+    object {\n+        int n = 0;\n+        function inc() {\n+            self.n += 1;\n+        }\n+    };\n+\n+function testObjectConstructorAnnotationAttachment() {\n+    typedesc<object{}> t = typeof obj;\n+    ObjectData annotationVal = <ObjectData>t.@OBJAnnots;\n+    assertValueEquality(\"ConstructedObject\", annotationVal.descriptor);\n+}\n+\n+function testObjectConstructorObjectFunctionInvocation() {\n+    obj.inc();\n+    assertTrue(obj.n == 1);\n+    obj.inc();\n+    assertTrue(obj.n == 2);\n+}\n+\n+//var remoteObject = @OBJAnnots { descriptor: \"ConstructedObject\" }\n+//    client object {\n+//        int n = 0;\n+//        remote function remoteFunc() {\n+//            self.n += 1;\n+//        }\n+//\n+//        function inc() {\n+//            self.n += 1;\n+//        }\n+//    };\n+//\n+//function testObjectConstructorClientKeyword() {\n+//    remoteObject->remoteFunc();\n+//    assertTrue(remoteObject.n == 1);\n+//    remoteObject.inc();\n+//    assertTrue(remoteObject.n == 2);\n+//}\n+\n+type MoAdvanced object {\n+    int n = 0;\n+\n+    public function setN(int userN) {\n+        self.n = userN;\n+    }\n+\n+    public function init() {\n+        self.n = 0;\n+    }\n+};\n+\n+function testObjectConstructorIncludedMethod() {\n+    var objWithIncludedMethod = object MoAdvanced {\n+\n+        public function init() {\n+            self.n = -1;\n+        }\n+\n+        public function setN(int userN) {\n+            self.n = userN;\n+        }\n+    };\n+\n+    objWithIncludedMethod.setN(200);\n+    assertTrue(objWithIncludedMethod.n == 200);\n+    objWithIncludedMethod.setN(100);\n+    assertTrue(objWithIncludedMethod.n == 100);\n+}\n+\n+// assertion helpers\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertTrue(any|error actual) {\n+    if actual is boolean && actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected 'true', found '\" + actual.toString () + \"'\");\n+}\n+\n+function assertFalse(any|error actual) {\n+    if actual is boolean && !actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected 'false', found '\" + actual.toString () + \"'\");\n+}\n+\n+function assertValueEquality(anydata|error expected, anydata|error actual) {\n+    if expected == actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expected.toString() + \"', found '\" + actual.toString () + \"'\");\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjA3NDYyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_balo/object/test_objects.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTo1M1rOHD8lyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTo1M1rOHD8lyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMDQ4OQ==", "bodyText": "add new liine :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473900489", "createdAt": "2020-08-20T11:29:53Z", "author": {"login": "lochana-chathura"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_balo/object/test_objects.bal", "diffHunk": "@@ -303,4 +303,4 @@ public function testObjectReferingNonAbstractObjLoadedFromBalo() {\n     utils:assertEquality((), cemp1.setWorkingFromHomeAllowance(50));\n     utils:assertEquality(\"Contactless hello! John\", cemp1.getName());\n     utils:assertEquality(20, cemp1.Age());\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjMzMjY0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0Mjo0N1rOHD-_2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0Mjo0N1rOHD-_2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzOTkyOQ==", "bodyText": "If we invert the conditions of if-else stmts, we can reduce the number of nested levels.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473939929", "createdAt": "2020-08-20T12:42:47Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -898,6 +901,104 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    @Override\n+    public BLangNode transform(ObjectConstructorBodyNode objectConstructorBodyNode) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        NodeList<Node> members = objectConstructorBodyNode.members();\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            if (bLangNode.getKind() == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    if (objectTypeNode.initFunction == null) {\n+                        if (bLangFunction.requiredParams.size() != 0) {\n+                            dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjM0NTY0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0NjoyN1rOHD_H4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0NjoyN1rOHD_H4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MTk4Nw==", "bodyText": "Ideally we shouldn't reach here. So throwing an exception would be better.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473941987", "createdAt": "2020-08-20T12:46:27Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -898,6 +901,104 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    @Override\n+    public BLangNode transform(ObjectConstructorBodyNode objectConstructorBodyNode) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        NodeList<Node> members = objectConstructorBodyNode.members();\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            if (bLangNode.getKind() == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    if (objectTypeNode.initFunction == null) {\n+                        if (bLangFunction.requiredParams.size() != 0) {\n+                            dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                            continue;\n+                        }\n+                        bLangFunction.objInitFunction = true;\n+                        objectTypeNode.initFunction = bLangFunction;\n+                    } else {\n+                        objectTypeNode.addFunction(bLangFunction);\n+                    }\n+                } else {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                }\n+            } else if (bLangNode.getKind() == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (bLangNode.getKind() == NodeKind.USER_DEFINED_TYPE) {\n+                objectTypeNode.addTypeReference((BLangType) bLangNode);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        objectTypeNode.pos = getPosition(objectConstructorBodyNode);\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+\n+        DiagnosticPos pos = getPositionWithoutMetadata(objectConstructorExpressionNode);\n+\n+        BLangObjectTypeNode objectTypeNode =\n+                (BLangObjectTypeNode) createTypeNode(objectConstructorExpressionNode.objectConstructorBody());\n+\n+        BLangObjectCtorExpr objectCtorExpression = TreeBuilder.createObjectCtorExpression(objectTypeNode);\n+        objectCtorExpression.pos = pos;\n+\n+        Optional<TypeDescriptorNode> typeDescriptor = objectConstructorExpressionNode.typeDescriptor();\n+\n+        typeDescriptor.ifPresent(typeDescriptorNode -> {\n+            BLangType type = createTypeNode(typeDescriptorNode);\n+            objectCtorExpression.addTypeReference(type);\n+        });\n+\n+        // create a type definition and attach annotations\n+        BLangTypeDefinition bLTypeDef = createTypeDefinitionWithTypeNode(objectTypeNode);\n+        Optional<Token> objectTypeQualifier = objectConstructorExpressionNode.objectTypeQualifier();\n+\n+        objectTypeQualifier.ifPresent(qualifier -> {\n+            if (qualifier.kind() == SyntaxKind.CLIENT_KEYWORD) {\n+                objectTypeNode.flagSet.add(Flag.CLIENT);\n+                bLTypeDef.flagSet.add(Flag.CLIENT);\n+                objectCtorExpression.isClient = true;\n+            } else {\n+                dlog.error(pos, DiagnosticCode.INVALID_TOKEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjM1MzA4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangObjectCtorExpr.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0ODozMVrOHD_MoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0ODozMVrOHD_MoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MzIwMA==", "bodyText": "Better to use the complete name BLangObjectConstructorExpression, since this is part of the public API.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473943200", "createdAt": "2020-08-20T12:48:31Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangObjectCtorExpr.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.types.TypeNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangType;\n+\n+\n+/**\n+ * Represents the object-constructor-expr.\n+ *\n+ * @since slp3\n+ */\n+public class BLangObjectCtorExpr extends BLangExpression {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjM1NTM3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangObjectCtorExpr.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0OTowNlrOHD_N-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0OTowNlrOHD_N-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MzU0NQ==", "bodyText": "extra newline", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473943545", "createdAt": "2020-08-20T12:49:06Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangObjectCtorExpr.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.types.TypeNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangType;\n+\n+\n+/**\n+ * Represents the object-constructor-expr.\n+ *\n+ * @since slp3\n+ */\n+public class BLangObjectCtorExpr extends BLangExpression {\n+\n+    public BLangObjectTypeNode objectTypeNode;\n+    public BLangTypeInit typeInit;\n+    public BLangType referenceType;\n+    public boolean isClient;\n+\n+    public BLangObjectCtorExpr(BLangObjectTypeNode objectTypeNode) {\n+        super();\n+        this.objectTypeNode = objectTypeNode;\n+        this.isClient = false;\n+    }\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    /**\n+     * Returns the kind of this node.\n+     *\n+     * @return the kind of this node.\n+     */\n+    @Override\n+    public NodeKind getKind() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjM1NzcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0OTo0NlrOHD_PZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0OTo0NlrOHD_PZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MzkwOQ==", "bodyText": "Let's complete these parameters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473943909", "createdAt": "2020-08-20T12:49:46Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjM4NjY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo1NzowMVrOHD_hCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyNjowMFrOHFXp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0ODQyNg==", "bodyText": "Here there are three possible paths:\n\nclient keyword --> parse the qualifiers\nobject keyword --> parse object\nnon of the above --> recover and re-parse\n\nThus, to handle these three cases we need a switch-case here. Refer parseFunctionBody() for a similar method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473948426", "createdAt": "2020-08-20T12:57:01Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MjQ4OQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r475392489", "createdAt": "2020-08-24T07:26:00Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0ODQyNg=="}, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjM5MDk1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo1ODowOVrOHD_jvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo1ODowOVrOHD_jvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0OTExNw==", "bodyText": "Same as my prev comment in L#4399", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473949117", "createdAt": "2020-08-20T12:58:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjM5NzYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo1OTo1NVrOHD_n2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo1OTo1NVrOHD_n2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MDE2OA==", "bodyText": "Shall we remove these additional newlines?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473950168", "createdAt": "2020-08-20T12:59:55Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);\n+        } else {\n+            typeDescriptor = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectCtorBody = parseObjectConstructorBody();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjQwODc5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/testng-new-parser.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowMjo0OFrOHD_uyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowMjo0OFrOHD_uyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MTk0NA==", "bodyText": "We can add the package under <packages>. Then we don't have to update this xml for every new test class..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473951944", "createdAt": "2020-08-20T13:02:48Z", "author": {"login": "SupunS"}, "path": "tests/jballerina-unit-test/src/test/resources/testng-new-parser.xml", "diffHunk": "@@ -146,6 +146,7 @@\n             <class name=\"org.ballerinalang.test.statements.transaction.NestedTransactionTest\"/>\n             <class name=\"org.ballerinalang.test.statements.transaction.NestedRetryTransactionStmtsTest\" />\n             <class name=\"org.ballerinalang.test.statements.transaction.SetRollbackOnlyTest\" />\n+            <class name=\"org.ballerinalang.test.expressions.object.ObjectConstructorTest\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjUzNzMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoyOToxM1rOHEBBig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoyOToxM1rOHEBBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3MzEzMA==", "bodyText": "Should the name be \"typeReference\"?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473973130", "createdAt": "2020-08-20T13:29:13Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectKeyword\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"typeDescriptor\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTI4MzQ5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDo1MDoxMVrOHEbfbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDo1MDoxMVrOHEbfbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQwNjc2Nw==", "bodyText": "Shall we use parseTypeReference() here rather than directly using parseQualifiedIdentifier()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r474406767", "createdAt": "2020-08-21T04:50:11Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4402,6 +4432,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**\n+     * Parse object constructor expression type qualifiers.\n+     *\n+     * @return Parsed qualifier list with only client or empty node list\n+     */\n+    private STNode parseObjectConstructorExpressionQualifier() {\n+        STNode qualifier;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                qualifier = parseClientKeyword();\n+                break;\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR);\n+                return parseObjectConstructorExpressionQualifier();\n+        }\n+        return qualifier;\n+    }\n+\n+    /**\n+     /**\n+     * Parse object constructor expression type reference.\n+     *\n+     * @return Parsed type reference or empty node\n+     */\n+    private STNode parseObjectConstructorExpressionTypeReference() {\n+        STNode typeReference;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case IDENTIFIER_TOKEN:\n+                typeReference = parseQualifiedIdentifier(ParserRuleContext.TYPE_REFERENCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d3d171dc872437869dc0e005086fc1d45382f"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjUwMDUyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozODoyNlrOHG93oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozODoyNlrOHG93oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2NzE2OQ==", "bodyText": "Shouldn't we return a qualifer list?\nList<STNode> qualifiers = new ArrayList<>();\nqualifiers.add(qualifier);\nreturn STNodeFactory.createNodeList(qualifiers);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477067169", "createdAt": "2020-08-26T06:38:26Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4523,6 +4555,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**\n+     * Parse object constructor expression type qualifiers.\n+     *\n+     * @return Parsed qualifier list with only client or empty node list\n+     */\n+    private STNode parseObjectConstructorExpressionQualifier() {\n+        STNode qualifier;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                qualifier = parseClientKeyword();\n+                break;\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR);\n+                return parseObjectConstructorExpressionQualifier();\n+        }\n+        return qualifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjUwNjc2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MDo0OVrOHG97bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MDo0OVrOHG97bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2ODE0Mg==", "bodyText": "Since we check if the next token is a CLIENT_KEYWORD(in this switch case) and reach here don't need to check it again inside parseClientKeyword() right?. can use consume() directly", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477068142", "createdAt": "2020-08-26T06:40:49Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4523,6 +4555,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**\n+     * Parse object constructor expression type qualifiers.\n+     *\n+     * @return Parsed qualifier list with only client or empty node list\n+     */\n+    private STNode parseObjectConstructorExpressionQualifier() {\n+        STNode qualifier;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                qualifier = parseClientKeyword();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjUwODU1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MTozMFrOHG98jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoyNjoxOVrOHHBaUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2ODQyOA==", "bodyText": "extra line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477068428", "createdAt": "2020-08-26T06:41:30Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4523,6 +4555,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyNTIwMQ==", "bodyText": "thanks", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477125201", "createdAt": "2020-08-26T08:26:19Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4523,6 +4555,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2ODQyOA=="}, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjUwOTMzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MTo0NVrOHG99CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MTo0NVrOHG99CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2ODU1Mw==", "bodyText": "extra line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477068553", "createdAt": "2020-08-26T06:41:45Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4523,6 +4555,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**\n+     * Parse object constructor expression type qualifiers.\n+     *\n+     * @return Parsed qualifier list with only client or empty node list\n+     */\n+    private STNode parseObjectConstructorExpressionQualifier() {\n+        STNode qualifier;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                qualifier = parseClientKeyword();\n+                break;\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR);\n+                return parseObjectConstructorExpressionQualifier();\n+        }\n+        return qualifier;\n+    }\n+\n+    /**\n+     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjUxMTg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0Mjo0MlrOHG9-ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0Mjo0MlrOHG9-ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2ODkzOA==", "bodyText": "extra line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477068938", "createdAt": "2020-08-26T06:42:42Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4488,13 +4493,40 @@ private STNode parseObjectTypeDescriptor() {\n         STNode objectTypeQualifiers = parseObjectTypeQualifiers();\n         STNode objectKeyword = parseObjectKeyword();\n         STNode openBrace = parseOpenBrace();\n-        STNode objectMembers = parseObjectMembers();\n+        STNode objectMembers = parseObjectMembers(false);\n         STNode closeBrace = parseCloseBrace();\n         endContext();\n         return STNodeFactory.createObjectTypeDescriptorNode(objectTypeQualifiers, objectKeyword, openBrace,\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * <p>\n+     * Parse object constructor expression.\n+     * </p>\n+     * <code>object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }</code>\n+     * <code>object-member := object-field | method-defn</code>\n+     *\n+     * @param annots annotations attached to object constructor\n+     * @return Parsed object constructor expression node\n+     */\n+    private STNode parseObjectConstructorExpression(STNode annots) {\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+        STNode objectTypeQualifier = parseObjectConstructorExpressionQualifier();\n+        STNode objectKeyword = parseObjectKeyword();\n+        STNode typeReference = parseObjectConstructorExpressionTypeReference();\n+        STNode openBrace = parseOpenBrace();\n+        STNode objectMembers = parseObjectMembers(true);\n+        STNode closeBrace = parseCloseBrace();\n+        endContext();\n+        return STNodeFactory.createObjectConstructorExpressionNode(annots,\n+                objectTypeQualifier, objectKeyword, typeReference, openBrace, objectMembers, closeBrace);\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mjg1NTE3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoyMjoyMFrOHHBPSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoyMjoyMFrOHHBPSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMjM3OA==", "bodyText": "With the introduction of classes BLangObjectTypeNode should not have method implementations, only the method declarations. Shall we move this to a BLangClassDefinition", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477122378", "createdAt": "2020-08-26T08:22:20Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -900,6 +902,95 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    public BLangObjectTypeNode createObjectExpressionBody(NodeList<Node> members) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            NodeKind nodeKind =  bLangNode.getKind();\n+            if (nodeKind == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (!Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (objectTypeNode.initFunction != null) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (bLangFunction.requiredParams.size() != 0) {\n+                    dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                    continue;\n+                }\n+                bLangFunction.objInitFunction = true;\n+                objectTypeNode.initFunction = bLangFunction;\n+            } else if (nodeKind == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (nodeKind == NodeKind.USER_DEFINED_TYPE) {\n+                dlog.error(bLangNode.pos, DiagnosticCode.OBJECT_CTOR_DOES_NOT_SUPPORT_TYPE_REFERENCE_MEMBERS);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+\n+        DiagnosticPos pos = getPositionWithoutMetadata(objectConstructorExpressionNode);\n+\n+        BLangObjectTypeNode objectTypeNode = createObjectExpressionBody(objectConstructorExpressionNode.members());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mzg0MDU3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1NDo0NFrOHHKsIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzowNjo0N1rOHHLKjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NzIxOQ==", "bodyText": "Any other method in TreeBuilder doesn't seem to take arguments. I'm not completely sure why it was designed like that but I think it would be better to adhere to that constraint.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477277219", "createdAt": "2020-08-26T12:54:44Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -900,6 +902,95 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    public BLangObjectTypeNode createObjectExpressionBody(NodeList<Node> members) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            NodeKind nodeKind =  bLangNode.getKind();\n+            if (nodeKind == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (!Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (objectTypeNode.initFunction != null) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (bLangFunction.requiredParams.size() != 0) {\n+                    dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                    continue;\n+                }\n+                bLangFunction.objInitFunction = true;\n+                objectTypeNode.initFunction = bLangFunction;\n+            } else if (nodeKind == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (nodeKind == NodeKind.USER_DEFINED_TYPE) {\n+                dlog.error(bLangNode.pos, DiagnosticCode.OBJECT_CTOR_DOES_NOT_SUPPORT_TYPE_REFERENCE_MEMBERS);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+\n+        DiagnosticPos pos = getPositionWithoutMetadata(objectConstructorExpressionNode);\n+\n+        BLangObjectTypeNode objectTypeNode = createObjectExpressionBody(objectConstructorExpressionNode.members());\n+        objectTypeNode.pos = pos;\n+        BLangObjectConstructorExpression objectCtorExpression = TreeBuilder.createObjectCtorExpression(objectTypeNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NTAwNw==", "bodyText": "We don't seem to use this objectCtorExpression again, shall we remove this maybe", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477285007", "createdAt": "2020-08-26T13:06:47Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -900,6 +902,95 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    public BLangObjectTypeNode createObjectExpressionBody(NodeList<Node> members) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            NodeKind nodeKind =  bLangNode.getKind();\n+            if (nodeKind == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (!Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (objectTypeNode.initFunction != null) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (bLangFunction.requiredParams.size() != 0) {\n+                    dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                    continue;\n+                }\n+                bLangFunction.objInitFunction = true;\n+                objectTypeNode.initFunction = bLangFunction;\n+            } else if (nodeKind == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (nodeKind == NodeKind.USER_DEFINED_TYPE) {\n+                dlog.error(bLangNode.pos, DiagnosticCode.OBJECT_CTOR_DOES_NOT_SUPPORT_TYPE_REFERENCE_MEMBERS);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+\n+        DiagnosticPos pos = getPositionWithoutMetadata(objectConstructorExpressionNode);\n+\n+        BLangObjectTypeNode objectTypeNode = createObjectExpressionBody(objectConstructorExpressionNode.members());\n+        objectTypeNode.pos = pos;\n+        BLangObjectConstructorExpression objectCtorExpression = TreeBuilder.createObjectCtorExpression(objectTypeNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NzIxOQ=="}, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mzg1NDQ5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1ODoxMVrOHHK02A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1ODoxMVrOHHK02A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3OTQ0OA==", "bodyText": "Shall we add a comment explaining that there is a desugaring happening here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477279448", "createdAt": "2020-08-26T12:58:11Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -900,6 +902,95 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    public BLangObjectTypeNode createObjectExpressionBody(NodeList<Node> members) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            NodeKind nodeKind =  bLangNode.getKind();\n+            if (nodeKind == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (!Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (objectTypeNode.initFunction != null) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (bLangFunction.requiredParams.size() != 0) {\n+                    dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                    continue;\n+                }\n+                bLangFunction.objInitFunction = true;\n+                objectTypeNode.initFunction = bLangFunction;\n+            } else if (nodeKind == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (nodeKind == NodeKind.USER_DEFINED_TYPE) {\n+                dlog.error(bLangNode.pos, DiagnosticCode.OBJECT_CTOR_DOES_NOT_SUPPORT_TYPE_REFERENCE_MEMBERS);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mzg2NDk4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzowMDo0MlrOHHK7Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzowMDo0MlrOHHK7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4MTExMA==", "bodyText": "no need to break the line I think", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477281110", "createdAt": "2020-08-26T13:00:42Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -900,6 +902,95 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    public BLangObjectTypeNode createObjectExpressionBody(NodeList<Node> members) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            NodeKind nodeKind =  bLangNode.getKind();\n+            if (nodeKind == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (!Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (objectTypeNode.initFunction != null) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (bLangFunction.requiredParams.size() != 0) {\n+                    dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                    continue;\n+                }\n+                bLangFunction.objInitFunction = true;\n+                objectTypeNode.initFunction = bLangFunction;\n+            } else if (nodeKind == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (nodeKind == NodeKind.USER_DEFINED_TYPE) {\n+                dlog.error(bLangNode.pos, DiagnosticCode.OBJECT_CTOR_DOES_NOT_SUPPORT_TYPE_REFERENCE_MEMBERS);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+\n+        DiagnosticPos pos = getPositionWithoutMetadata(objectConstructorExpressionNode);\n+\n+        BLangObjectTypeNode objectTypeNode = createObjectExpressionBody(objectConstructorExpressionNode.members());\n+        objectTypeNode.pos = pos;\n+        BLangObjectConstructorExpression objectCtorExpression = TreeBuilder.createObjectCtorExpression(objectTypeNode);\n+        objectCtorExpression.pos = pos;\n+\n+        Optional<TypeDescriptorNode> typeReference = objectConstructorExpressionNode.typeReference();\n+        typeReference.ifPresent(typeReferenceNode -> {\n+            objectCtorExpression.addTypeReference(createTypeNode(typeReferenceNode));\n+        });\n+\n+        BLangTypeDefinition bLTypeDef = createTypeDefinitionWithTypeNode(objectTypeNode);\n+\n+        NodeList<Token> objectConstructorQualifierList = objectConstructorExpressionNode.objectTypeQualifiers();\n+        for (Token qualifier : objectConstructorQualifierList) {\n+            if (qualifier.kind() == SyntaxKind.CLIENT_KEYWORD) {\n+                objectTypeNode.flagSet.add(Flag.CLIENT);\n+                objectCtorExpression.isClient = true;\n+            } else {\n+                throw new RuntimeException(\"Syntax kind is not supported: \" + qualifier.kind());\n+            }\n+        }\n+        bLTypeDef.annAttachments = applyAll(objectConstructorExpressionNode.annotations());\n+        addToTop(bLTypeDef);\n+\n+        BLangIdentifier identifier = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n+        BLangUserDefinedType userDefinedType = createUserDefinedType(pos,\n+                identifier, bLTypeDef.name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 238, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}