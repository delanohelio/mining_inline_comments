{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODA4MzQx", "number": 22649, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMjo0MDoxOFrODyUJGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjoxMTowOVrODyxuig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDg1NDAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMjo0MDoxOFrOGGSbsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo0NjozMFrOGGfhHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NjY0MA==", "bodyText": "Can this handle  a nilable-array or nil scenario:  i.e: int?[]? x;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409246640", "createdAt": "2020-04-16T02:40:18Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1608,12 +1616,26 @@ private STNode parseTypeDescriptor() {\n         STNode type = parseTypeDescriptor(token.kind);\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n-            // If next token after a type descriptor is <code>?</code> then it is an Optional type descriptor\n+            //If next token after a type descriptor is <code>?</code> then it is an optional type descriptor\n             case QUESTION_MARK_TOKEN:\n-                return parseOptionalTypeDescriptor(type);\n+                type =  parseOptionalTypeDescriptor(type);\n+                break;\n+            //If next token after a type descriptor is <code>[</code> then it is an array type descriptor\n+            case OPEN_BRACKET_TOKEN:\n+                type =  parseArrayTypeDescriptor(type);\n+                break;\n             default:\n                 return type;\n         }\n+        //This part is to handle int?[] and int[]? type declarations\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.QUESTION_MARK_TOKEN && type.kind == SyntaxKind.ARRAY_TYPE) {\n+            return parseOptionalTypeDescriptor(type);\n+        } else if (nextToken.kind == SyntaxKind.OPEN_BRACKET_TOKEN && type.kind == SyntaxKind.OPTIONAL_TYPE) {\n+            return parseArrayTypeDescriptor(type);\n+        } else {\n+            return type;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6705c81089f57e870904b604e890b509fbd17c8b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NzM0NQ==", "bodyText": "Should we use recusrsion?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409247345", "createdAt": "2020-04-16T02:42:53Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1608,12 +1616,26 @@ private STNode parseTypeDescriptor() {\n         STNode type = parseTypeDescriptor(token.kind);\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n-            // If next token after a type descriptor is <code>?</code> then it is an Optional type descriptor\n+            //If next token after a type descriptor is <code>?</code> then it is an optional type descriptor\n             case QUESTION_MARK_TOKEN:\n-                return parseOptionalTypeDescriptor(type);\n+                type =  parseOptionalTypeDescriptor(type);\n+                break;\n+            //If next token after a type descriptor is <code>[</code> then it is an array type descriptor\n+            case OPEN_BRACKET_TOKEN:\n+                type =  parseArrayTypeDescriptor(type);\n+                break;\n             default:\n                 return type;\n         }\n+        //This part is to handle int?[] and int[]? type declarations\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.QUESTION_MARK_TOKEN && type.kind == SyntaxKind.ARRAY_TYPE) {\n+            return parseOptionalTypeDescriptor(type);\n+        } else if (nextToken.kind == SyntaxKind.OPEN_BRACKET_TOKEN && type.kind == SyntaxKind.OPTIONAL_TYPE) {\n+            return parseArrayTypeDescriptor(type);\n+        } else {\n+            return type;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NjY0MA=="}, "originalCommit": {"oid": "6705c81089f57e870904b604e890b509fbd17c8b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDY5MA==", "bodyText": "Currently, it cannot handle it. Yes, recursion would be helpful, I'll fix that. Thank you.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409270690", "createdAt": "2020-04-16T04:13:38Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1608,12 +1616,26 @@ private STNode parseTypeDescriptor() {\n         STNode type = parseTypeDescriptor(token.kind);\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n-            // If next token after a type descriptor is <code>?</code> then it is an Optional type descriptor\n+            //If next token after a type descriptor is <code>?</code> then it is an optional type descriptor\n             case QUESTION_MARK_TOKEN:\n-                return parseOptionalTypeDescriptor(type);\n+                type =  parseOptionalTypeDescriptor(type);\n+                break;\n+            //If next token after a type descriptor is <code>[</code> then it is an array type descriptor\n+            case OPEN_BRACKET_TOKEN:\n+                type =  parseArrayTypeDescriptor(type);\n+                break;\n             default:\n                 return type;\n         }\n+        //This part is to handle int?[] and int[]? type declarations\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.QUESTION_MARK_TOKEN && type.kind == SyntaxKind.ARRAY_TYPE) {\n+            return parseOptionalTypeDescriptor(type);\n+        } else if (nextToken.kind == SyntaxKind.OPEN_BRACKET_TOKEN && type.kind == SyntaxKind.OPTIONAL_TYPE) {\n+            return parseArrayTypeDescriptor(type);\n+        } else {\n+            return type;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NjY0MA=="}, "originalCommit": {"oid": "6705c81089f57e870904b604e890b509fbd17c8b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MTAyMQ==", "bodyText": "@SupunS I have fixed this. Please review.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409461021", "createdAt": "2020-04-16T10:46:30Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1608,12 +1616,26 @@ private STNode parseTypeDescriptor() {\n         STNode type = parseTypeDescriptor(token.kind);\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n-            // If next token after a type descriptor is <code>?</code> then it is an Optional type descriptor\n+            //If next token after a type descriptor is <code>?</code> then it is an optional type descriptor\n             case QUESTION_MARK_TOKEN:\n-                return parseOptionalTypeDescriptor(type);\n+                type =  parseOptionalTypeDescriptor(type);\n+                break;\n+            //If next token after a type descriptor is <code>[</code> then it is an array type descriptor\n+            case OPEN_BRACKET_TOKEN:\n+                type =  parseArrayTypeDescriptor(type);\n+                break;\n             default:\n                 return type;\n         }\n+        //This part is to handle int?[] and int[]? type declarations\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.QUESTION_MARK_TOKEN && type.kind == SyntaxKind.ARRAY_TYPE) {\n+            return parseOptionalTypeDescriptor(type);\n+        } else if (nextToken.kind == SyntaxKind.OPEN_BRACKET_TOKEN && type.kind == SyntaxKind.OPTIONAL_TYPE) {\n+            return parseArrayTypeDescriptor(type);\n+        } else {\n+            return type;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NjY0MA=="}, "originalCommit": {"oid": "6705c81089f57e870904b604e890b509fbd17c8b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDg3MTM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMjo0OToxNVrOGGSluQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo0NjozOVrOGGfhhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0OTIwOQ==", "bodyText": "I think the structure of the resulting tree is a bit different to the spec.\ne.g. for something like int[][][], this model group the tree nodes as (int) ([][][]).\nBut in the spec, it is: (((int)[])[])[].\nI feel recursion would solve this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409249209", "createdAt": "2020-04-16T02:49:15Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5209,6 +5235,88 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n         }\n     }\n \n+    /**\n+     * Parse array type descriptor.\n+     * <p>\n+     * <code>\n+     * array-type-descriptor := member-type-descriptor [ [ array-length ] ]\n+     * member-type-descriptor := type-descriptor\n+     * array-length :=\n+     *    int-literal\n+     *    | constant-reference-expr\n+     *    | inferred-array-length\n+     * inferred-array-length := *\n+     * </code>\n+     * </p>\n+     * @param typeDescriptorNode\n+     * @return Parsed Node\n+     */\n+\n+    private STNode parseArrayTypeDescriptor(STNode typeDescriptorNode) {\n+        startContext(ParserRuleContext.ARRAY_TYPE_DESCRIPTOR);\n+        STNode dimensions = parseDimensions();\n+\n+        endContext();\n+        return STNodeFactory.createArrayTypeDescriptor(typeDescriptorNode, dimensions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6705c81089f57e870904b604e890b509fbd17c8b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDM3OQ==", "bodyText": "I'll fix that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409270379", "createdAt": "2020-04-16T04:12:28Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5209,6 +5235,88 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n         }\n     }\n \n+    /**\n+     * Parse array type descriptor.\n+     * <p>\n+     * <code>\n+     * array-type-descriptor := member-type-descriptor [ [ array-length ] ]\n+     * member-type-descriptor := type-descriptor\n+     * array-length :=\n+     *    int-literal\n+     *    | constant-reference-expr\n+     *    | inferred-array-length\n+     * inferred-array-length := *\n+     * </code>\n+     * </p>\n+     * @param typeDescriptorNode\n+     * @return Parsed Node\n+     */\n+\n+    private STNode parseArrayTypeDescriptor(STNode typeDescriptorNode) {\n+        startContext(ParserRuleContext.ARRAY_TYPE_DESCRIPTOR);\n+        STNode dimensions = parseDimensions();\n+\n+        endContext();\n+        return STNodeFactory.createArrayTypeDescriptor(typeDescriptorNode, dimensions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0OTIwOQ=="}, "originalCommit": {"oid": "6705c81089f57e870904b604e890b509fbd17c8b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MTEyNg==", "bodyText": "@SupunS I have fixed this. Please review.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409461126", "createdAt": "2020-04-16T10:46:39Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5209,6 +5235,88 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n         }\n     }\n \n+    /**\n+     * Parse array type descriptor.\n+     * <p>\n+     * <code>\n+     * array-type-descriptor := member-type-descriptor [ [ array-length ] ]\n+     * member-type-descriptor := type-descriptor\n+     * array-length :=\n+     *    int-literal\n+     *    | constant-reference-expr\n+     *    | inferred-array-length\n+     * inferred-array-length := *\n+     * </code>\n+     * </p>\n+     * @param typeDescriptorNode\n+     * @return Parsed Node\n+     */\n+\n+    private STNode parseArrayTypeDescriptor(STNode typeDescriptorNode) {\n+        startContext(ParserRuleContext.ARRAY_TYPE_DESCRIPTOR);\n+        STNode dimensions = parseDimensions();\n+\n+        endContext();\n+        return STNodeFactory.createArrayTypeDescriptor(typeDescriptorNode, dimensions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0OTIwOQ=="}, "originalCommit": {"oid": "6705c81089f57e870904b604e890b509fbd17c8b"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDg3NDk3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMjo1MToxMVrOGGSnyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo0NTo0MFrOGGffdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0OTczNw==", "bodyText": "keep a newline between the description and the params/returns in doc comments.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409249737", "createdAt": "2020-04-16T02:51:11Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5209,6 +5235,88 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n         }\n     }\n \n+    /**\n+     * Parse array type descriptor.\n+     * <p>\n+     * <code>\n+     * array-type-descriptor := member-type-descriptor [ [ array-length ] ]\n+     * member-type-descriptor := type-descriptor\n+     * array-length :=\n+     *    int-literal\n+     *    | constant-reference-expr\n+     *    | inferred-array-length\n+     * inferred-array-length := *\n+     * </code>\n+     * </p>\n+     * @param typeDescriptorNode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6705c81089f57e870904b604e890b509fbd17c8b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MDU5OQ==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409460599", "createdAt": "2020-04-16T10:45:40Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5209,6 +5235,88 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n         }\n     }\n \n+    /**\n+     * Parse array type descriptor.\n+     * <p>\n+     * <code>\n+     * array-type-descriptor := member-type-descriptor [ [ array-length ] ]\n+     * member-type-descriptor := type-descriptor\n+     * array-length :=\n+     *    int-literal\n+     *    | constant-reference-expr\n+     *    | inferred-array-length\n+     * inferred-array-length := *\n+     * </code>\n+     * </p>\n+     * @param typeDescriptorNode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0OTczNw=="}, "originalCommit": {"oid": "6705c81089f57e870904b604e890b509fbd17c8b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjcwODEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzowMjoyMlrOGGkLGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDo1OToxMFrOGG__7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzNzMwNw==", "bodyText": "STATEMENT_START_IDENTIFIER should be replaced with VARIABLE_REF.\nBoth indeed refers to identifiers, but the contexts are different..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409537307", "createdAt": "2020-04-16T13:02:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -198,6 +198,10 @@\n     private static final ParserRuleContext[] CONST_DECL_RHS =\n             { ParserRuleContext.STATEMENT_START_IDENTIFIER, ParserRuleContext.ASSIGN_OP };\n \n+    private static final ParserRuleContext[] ARRAY_LENGTH = { ParserRuleContext.CLOSE_BRACKET,\n+            ParserRuleContext.DECIMAL_INTEGER_LITERAL, ParserRuleContext.HEX_INTEGER_LITERAL,\n+            ParserRuleContext.ASTERISK, ParserRuleContext.STATEMENT_START_IDENTIFIER};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb55a6ea4f84941f30f6bc371d42964a98574ab0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MzE5OQ==", "bodyText": "Done :-)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r409993199", "createdAt": "2020-04-17T04:59:10Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -198,6 +198,10 @@\n     private static final ParserRuleContext[] CONST_DECL_RHS =\n             { ParserRuleContext.STATEMENT_START_IDENTIFIER, ParserRuleContext.ASSIGN_OP };\n \n+    private static final ParserRuleContext[] ARRAY_LENGTH = { ParserRuleContext.CLOSE_BRACKET,\n+            ParserRuleContext.DECIMAL_INTEGER_LITERAL, ParserRuleContext.HEX_INTEGER_LITERAL,\n+            ParserRuleContext.ASTERISK, ParserRuleContext.STATEMENT_START_IDENTIFIER};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzNzMwNw=="}, "originalCommit": {"oid": "fb55a6ea4f84941f30f6bc371d42964a98574ab0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTcwMDY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjoxMDo1MVrOGHBGYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjoxMDo1MVrOGHBGYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMTIzMw==", "bodyText": "Naming pattern: ArrayTypeDescriptorNode", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r410011233", "createdAt": "2020-04-17T06:10:51Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1449,6 +1449,40 @@\n                     \"type\": \"Node\"\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"ArrayTypeDescriptor\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310255bf66cd302812f31c1997126a34de9ecc81"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTcwMTIyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjoxMTowOVrOGHBGsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzoyNjo1N1rOGHC5YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMTMxNQ==", "bodyText": "Can we flattened this? i.e: make [, array-len and ] part of the ArrayTypeDescriptorNode", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r410011315", "createdAt": "2020-04-17T06:11:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1449,6 +1449,40 @@\n                     \"type\": \"Node\"\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"ArrayTypeDescriptor\",\n+            \"base\": \"Node\",\n+            \"kind\": \"ARRAY_TYPE\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"typeDescriptorNode\",\n+                    \"type\": \"Node\"\n+                },\n+                {\n+                    \"name\": \"dimensions\",\n+                    \"type\": \"Node\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310255bf66cd302812f31c1997126a34de9ecc81"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMTI3NA==", "bodyText": "Yes, since we have changed the structure we can do it now. I'll change it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r410021274", "createdAt": "2020-04-17T06:41:46Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1449,6 +1449,40 @@\n                     \"type\": \"Node\"\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"ArrayTypeDescriptor\",\n+            \"base\": \"Node\",\n+            \"kind\": \"ARRAY_TYPE\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"typeDescriptorNode\",\n+                    \"type\": \"Node\"\n+                },\n+                {\n+                    \"name\": \"dimensions\",\n+                    \"type\": \"Node\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMTMxNQ=="}, "originalCommit": {"oid": "310255bf66cd302812f31c1997126a34de9ecc81"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0MDY3Mw==", "bodyText": "@SupunS Done please review", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22649#discussion_r410040673", "createdAt": "2020-04-17T07:26:57Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1449,6 +1449,40 @@\n                     \"type\": \"Node\"\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"ArrayTypeDescriptor\",\n+            \"base\": \"Node\",\n+            \"kind\": \"ARRAY_TYPE\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"typeDescriptorNode\",\n+                    \"type\": \"Node\"\n+                },\n+                {\n+                    \"name\": \"dimensions\",\n+                    \"type\": \"Node\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMTMxNQ=="}, "originalCommit": {"oid": "310255bf66cd302812f31c1997126a34de9ecc81"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3859, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}