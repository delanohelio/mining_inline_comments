{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNzI1MjQy", "number": 27326, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo0Mzo1OFrOFCJrIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo1MTo0MFrOFCJzzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Nzk5OTY4OnYy", "diffSide": "RIGHT", "path": "tests/observability-test-utils/src/main/ballerina/Ballerina.toml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo0Mzo1OFrOIBJdKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoyMjoyMVrOIBbArA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NDQwOQ==", "bodyText": "do we need to commit these toml changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27326#discussion_r538074409", "createdAt": "2020-12-08T06:43:58Z", "author": {"login": "rdhananjaya"}, "path": "tests/observability-test-utils/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -4,7 +4,7 @@ name = \"testobserve\"\n version = \"0.0.0\"\n \n [[platform.java11.dependency]]\n-path = \"../libs/observability-test-utils-2.0.0-Preview7.jar\"\n+path = \"../libs/observability-test-utils-2.0.0-Preview8-SNAPSHOT.jar\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "186a70af7d0fda7be5cb86dc7f69329ad95007ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2MjAyOA==", "bodyText": "Most of the lang modules and other modules seem to have been committed with the new version. Shall I revert this change ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27326#discussion_r538362028", "createdAt": "2020-12-08T13:22:21Z", "author": {"login": "nadundesilva"}, "path": "tests/observability-test-utils/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -4,7 +4,7 @@ name = \"testobserve\"\n version = \"0.0.0\"\n \n [[platform.java11.dependency]]\n-path = \"../libs/observability-test-utils-2.0.0-Preview7.jar\"\n+path = \"../libs/observability-test-utils-2.0.0-Preview8-SNAPSHOT.jar\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NDQwOQ=="}, "originalCommit": {"oid": "186a70af7d0fda7be5cb86dc7f69329ad95007ca"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODAyMTkwOnYy", "diffSide": "RIGHT", "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/listenerendpoint/Resource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo1MTo0MFrOIBJpOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoyNTozMFrOIBbNVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NzQ5Nw==", "bodyText": "What does this validation do? Is this specific to the test case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27326#discussion_r538077497", "createdAt": "2020-12-08T06:51:40Z", "author": {"login": "rdhananjaya"}, "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/listenerendpoint/Resource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerina.testobserve.listenerendpoint;\n+\n+import io.ballerina.runtime.api.types.ResourceFunctionType;\n+import io.ballerina.runtime.api.types.Type;\n+import io.ballerina.runtime.api.values.BObject;\n+\n+import java.util.Objects;\n+\n+import static io.ballerina.runtime.api.constants.TypeConstants.STRING_TNAME;\n+import static org.ballerina.testobserve.listenerendpoint.Constants.CALLER_TYPE_NAME;\n+import static org.ballerina.testobserve.listenerendpoint.Constants.TEST_OBSERVE_PACKAGE;\n+\n+/**\n+ * Holds information related to a Ballerina service resource.\n+ */\n+public class Resource {\n+    private final BObject serviceObject;\n+    private final ResourceFunctionType resourceFunctionType;\n+    private final String basePath;\n+\n+    public Resource(BObject serviceObject, ResourceFunctionType resourceFunctionType, String basePath) {\n+        this.serviceObject = serviceObject;\n+        this.resourceFunctionType = resourceFunctionType;\n+        this.basePath = basePath;\n+\n+        // Validate resource\n+        int paramCount = this.getParamTypes().length;\n+        String resourcePath = this.getResourcePath();\n+        if (paramCount > 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "186a70af7d0fda7be5cb86dc7f69329ad95007ca"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2NTI2OA==", "bodyText": "This is a validation for the mock listener. The listener at the moment, only supports resource functions and only accepts two arguments.\nThe validation is there as a way to throw an error if a developer doesn't adhere to the expected format. This is not something used by the end users.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27326#discussion_r538365268", "createdAt": "2020-12-08T13:25:30Z", "author": {"login": "nadundesilva"}, "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/listenerendpoint/Resource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerina.testobserve.listenerendpoint;\n+\n+import io.ballerina.runtime.api.types.ResourceFunctionType;\n+import io.ballerina.runtime.api.types.Type;\n+import io.ballerina.runtime.api.values.BObject;\n+\n+import java.util.Objects;\n+\n+import static io.ballerina.runtime.api.constants.TypeConstants.STRING_TNAME;\n+import static org.ballerina.testobserve.listenerendpoint.Constants.CALLER_TYPE_NAME;\n+import static org.ballerina.testobserve.listenerendpoint.Constants.TEST_OBSERVE_PACKAGE;\n+\n+/**\n+ * Holds information related to a Ballerina service resource.\n+ */\n+public class Resource {\n+    private final BObject serviceObject;\n+    private final ResourceFunctionType resourceFunctionType;\n+    private final String basePath;\n+\n+    public Resource(BObject serviceObject, ResourceFunctionType resourceFunctionType, String basePath) {\n+        this.serviceObject = serviceObject;\n+        this.resourceFunctionType = resourceFunctionType;\n+        this.basePath = basePath;\n+\n+        // Validate resource\n+        int paramCount = this.getParamTypes().length;\n+        String resourcePath = this.getResourcePath();\n+        if (paramCount > 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NzQ5Nw=="}, "originalCommit": {"oid": "186a70af7d0fda7be5cb86dc7f69329ad95007ca"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2844, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}