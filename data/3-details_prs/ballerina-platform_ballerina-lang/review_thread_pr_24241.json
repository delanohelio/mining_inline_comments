{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NjExMDQz", "number": 24241, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODowNjowN1rOEGPbGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTo0NjoxMlrOENvkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTc5NjExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODowNjowN1rOGk6byw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzozMTo0NVrOGlF4YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1OTMwNw==", "bodyText": "This applies to XML literal as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24241#discussion_r441359307", "createdAt": "2020-06-17T08:06:07Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3916,7 +3916,9 @@ private BLangLiteral createSimpleLiteral(Node literal, SyntaxKind sign, boolean\n                 position = matcher.end() - 2;\n                 matcher = UNICODE_PATTERN.matcher(text);\n             }\n-            text = StringEscapeUtils.unescapeJava(text);\n+            if (type != SyntaxKind.TEMPLATE_STRING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a5394706fc6d0316815c6c9ae6c6d9d64d8ff17"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0Njg0OA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24241#discussion_r441546848", "createdAt": "2020-06-17T13:31:45Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3916,7 +3916,9 @@ private BLangLiteral createSimpleLiteral(Node literal, SyntaxKind sign, boolean\n                 position = matcher.end() - 2;\n                 matcher = UNICODE_PATTERN.matcher(text);\n             }\n-            text = StringEscapeUtils.unescapeJava(text);\n+            if (type != SyntaxKind.TEMPLATE_STRING) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1OTMwNw=="}, "originalCommit": {"oid": "7a5394706fc6d0316815c6c9ae6c6d9d64d8ff17"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODQ2MjY1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/XMLQueryExpressionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTo0NjoxMlrOGwhK-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTo0NjoxMlrOGwhK-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyODMxMw==", "bodyText": "I think this is correct.\nSpec [1] says:  Within a BacktickString, every character that is not part of an interpolation is interpreted as a literal character.\n[1] - https://ballerina.io/ballerina-spec/spec.html#section_6.6.1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24241#discussion_r453528313", "createdAt": "2020-07-13T09:46:12Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/XMLQueryExpressionTest.java", "diffHunk": "@@ -48,13 +48,13 @@ public void testSimpleQueryExprForXML() {\n                 \"<name>Sherlock Holmes</name><name>The Da Vinci Code</name>\");\n     }\n \n-    @Test(description = \"Test simple query expression for XMLs - #2\")\n+    @Test(groups = { \"disableOnOldParser\" }, description = \"Test simple query expression for XMLs - #2\")\n     public void testSimpleQueryExprForXML2() {\n         BValue[] returnValues = BRunUtil.invoke(result, \"testSimpleQueryExprForXML2\");\n         Assert.assertNotNull(returnValues);\n \n         Assert.assertEquals(returnValues[0].stringValue(),\n-                \"<book>the book</book>bit of text\u2702\u2705\");\n+                \"<book>the book</book>bit of text\\\\u2702\\\\u2705\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400aa091507b8bc70788e2114fa2de71a095f080"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3321, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}