{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NjUwMDEz", "number": 26882, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNTowMTo1NlrOE77ZKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxMDoxNFrOFDRlwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjc0NTM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNTowMTo1NlrOH3z2EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1Nzo0MlrOH5MREg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4MzE1Mg==", "bodyText": "Shouldn't we reuse the method above?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528283152", "createdAt": "2020-11-22T05:01:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java", "diffHunk": "@@ -450,6 +450,10 @@ public static RecordLiteralNode createRecordLiteralNode() {\n         return new BLangRecordLiteral();\n     }\n \n+    public static BLangRecordLiteral createBLangRecordLiteralNode() {\n+        return new BLangRecordLiteral();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMTg1OA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529731858", "createdAt": "2020-11-24T16:57:42Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java", "diffHunk": "@@ -450,6 +450,10 @@ public static RecordLiteralNode createRecordLiteralNode() {\n         return new BLangRecordLiteral();\n     }\n \n+    public static BLangRecordLiteral createBLangRecordLiteralNode() {\n+        return new BLangRecordLiteral();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4MzE1Mg=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjc1MTc0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNToxMTo0MFrOH3z46Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1Nzo0N1rOH5MRTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4Mzg4MQ==", "bodyText": "Shall we format this so that Map<String, BLangExpression> namedArgs is on a single line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528283881", "createdAt": "2020-11-22T05:11:40Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMTkxOQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529731919", "createdAt": "2020-11-24T16:57:47Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4Mzg4MQ=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjc1NzE5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNToyMDowM1rOH3z7Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1Nzo1N1rOH5MRyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4NDQ5NQ==", "bodyText": "Shall we extract param.type out to a variable outside the for loops?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528284495", "createdAt": "2020-11-22T05:20:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {\n+        BLangRecordLiteral recordLiteral = TreeBuilder.createBLangRecordLiteralNode();\n+        recordLiteral.type = param.type;\n+        if (param == ((BInvokableSymbol) iExpr.symbol).incRecordParamAllowAdditionalFields) {\n+            for (String name : namedArgs.keySet()) {\n+                BLangNamedArgsExpression expr = (BLangNamedArgsExpression) namedArgs.get(name);\n+                if (!((BRecordType) param.type).fields.containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMjA0Mw==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529732043", "createdAt": "2020-11-24T16:57:57Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {\n+        BLangRecordLiteral recordLiteral = TreeBuilder.createBLangRecordLiteralNode();\n+        recordLiteral.type = param.type;\n+        if (param == ((BInvokableSymbol) iExpr.symbol).incRecordParamAllowAdditionalFields) {\n+            for (String name : namedArgs.keySet()) {\n+                BLangNamedArgsExpression expr = (BLangNamedArgsExpression) namedArgs.get(name);\n+                if (!((BRecordType) param.type).fields.containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4NDQ5NQ=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjgxMTM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNjozODo1MVrOH30T1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoxOToxNlrOH74olQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5MDc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            error.defaultable.parameter.cannot.be.included.record.parameter = defaultable parameter cannot be included \\\n          \n          \n            \n            error.defaultable.parameter.cannot.be.included.record.parameter=defaultable parameter cannot be included \\\n          \n      \n    \n    \n  \n\nShall we also change the error to something like\nan included record parameter cannot be a defaultable parameter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528290775", "createdAt": "2020-11-22T06:38:51Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "diffHunk": "@@ -242,6 +242,8 @@ error.required.parameter.after.the.defaultable.parameter=required parameter afte\n error.named.arg.followed.by.positional.arg=named arg followed by positional arg\n error.arg.followed.by.rest.arg=arg followed by rest arg\n error.binding.pattern.not.allowed=binding pattern not allowed\n+error.defaultable.parameter.cannot.be.included.record.parameter = defaultable parameter cannot be included \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzU1MA==", "bodyText": "In here I took the invalid node as *. So due to that, I set the error as defaultable parameter cannot be included. So if set the error as the mentioned way I want to change the invalid node as =.  Is there any special reason to make such a change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407550", "createdAt": "2020-11-27T06:39:10Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "diffHunk": "@@ -242,6 +242,8 @@ error.required.parameter.after.the.defaultable.parameter=required parameter afte\n error.named.arg.followed.by.positional.arg=named arg followed by positional arg\n error.arg.followed.by.rest.arg=arg followed by rest arg\n error.binding.pattern.not.allowed=binding pattern not allowed\n+error.defaultable.parameter.cannot.be.included.record.parameter = defaultable parameter cannot be included \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5MDc3NQ=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMTA5OQ==", "bodyText": "This was based on the assumption that when the user sees this error it's more likely that they'll continue to have it as an included param rather than a defaultable param.\nGiven that it's just an assumption, let's go ahead with this.\nBut shall we say something like \"a defaultable parameter cannot be an include parameter\"?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531421099", "createdAt": "2020-11-27T07:22:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "diffHunk": "@@ -242,6 +242,8 @@ error.required.parameter.after.the.defaultable.parameter=required parameter afte\n error.named.arg.followed.by.positional.arg=named arg followed by positional arg\n error.arg.followed.by.rest.arg=arg followed by rest arg\n error.binding.pattern.not.allowed=binding pattern not allowed\n+error.defaultable.parameter.cannot.be.included.record.parameter = defaultable parameter cannot be included \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5MDc3NQ=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NTkyNQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r532555925", "createdAt": "2020-11-30T12:19:16Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "diffHunk": "@@ -242,6 +242,8 @@ error.required.parameter.after.the.defaultable.parameter=required parameter afte\n error.named.arg.followed.by.positional.arg=named arg followed by positional arg\n error.arg.followed.by.rest.arg=arg followed by rest arg\n error.binding.pattern.not.allowed=binding pattern not allowed\n+error.defaultable.parameter.cannot.be.included.record.parameter = defaultable parameter cannot be included \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5MDc3NQ=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjk4NDk2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMDowMzo1OVrOH31lmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjozOToxNVrOH6yiyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMxMTcwNg==", "bodyText": "Can't we reuse the normal error here, instead of introducing a new error? There's nothing about a record field when it comes to an argument itself right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528311706", "createdAt": "2020-11-22T10:03:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -918,6 +918,9 @@ error.rest.arg.defined.after.named.arg=\\\n error.missing.required.parameter=\\\n   missing required parameter ''{0}'' in call to ''{1}''()\n \n+error.missing.required.included.record.parameter.field=\\\n+  missing non-defaultable required record field ''{0}'' in call to ''{1}''()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzU2Mg==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407562", "createdAt": "2020-11-27T06:39:15Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -918,6 +918,9 @@ error.rest.arg.defined.after.named.arg=\\\n error.missing.required.parameter=\\\n   missing required parameter ''{0}'' in call to ''{1}''()\n \n+error.missing.required.included.record.parameter.field=\\\n+  missing non-defaultable required record field ''{0}'' in call to ''{1}''()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMxMTcwNg=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDEwNTkwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMzoyODoyOFrOH3-aMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjozOToyM1rOH6yi6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NjI0Mw==", "bodyText": "Instead of doing this, can't we rely on the REQUIRED flag of a record field?\nA record may or may not be used as an included record parameter, and unless we don't already have the necessary info in the record, IMO we should try and use whatever info already available in the record definition/type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528456243", "createdAt": "2020-11-23T03:28:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1543,6 +1544,9 @@ public void visit(BLangSimpleVariable varNode) {\n \n         BVarSymbol varSymbol = defineVarSymbol(varNode.name.pos, varNode.flagSet, varNode.type, varName, env,\n                                                varNode.internal);\n+        if (varNode.expr != null) {\n+            varSymbol.defaultableParam = true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1Njc2MQ==", "bodyText": "I don't think the current approach will work with optional fields anyway.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528456761", "createdAt": "2020-11-23T03:31:11Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1543,6 +1544,9 @@ public void visit(BLangSimpleVariable varNode) {\n \n         BVarSymbol varSymbol = defineVarSymbol(varNode.name.pos, varNode.flagSet, varNode.type, varName, env,\n                                                varNode.internal);\n+        if (varNode.expr != null) {\n+            varSymbol.defaultableParam = true;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NjI0Mw=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzU5Mg==", "bodyText": "Changed. Also, work with optional fields with the new changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407592", "createdAt": "2020-11-27T06:39:23Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1543,6 +1544,9 @@ public void visit(BLangSimpleVariable varNode) {\n \n         BVarSymbol varSymbol = defineVarSymbol(varNode.name.pos, varNode.flagSet, varNode.type, varName, env,\n                                                varNode.internal);\n+        if (varNode.expr != null) {\n+            varSymbol.defaultableParam = true;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NjI0Mw=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDExOTc2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMzozODowNVrOH3-hYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1ODo0NlrOH5MT9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1ODA4MQ==", "bodyText": "Why are we skipping the optional fields?\nThe following doesn't work atm.\ntype Options record {|\n    string name?;\n|};\n\nfunction foo(int id, *Options options) {\n    string? name = options?.name; \n}\n\npublic function main() {\n    foo(1, name = \"bar\"); // error: undefined defaultable parameter 'name'\n}\nShouldn't this work?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528458081", "createdAt": "2020-11-23T03:38:05Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -2378,13 +2385,34 @@ private void defineInvokableSymbolParams(BLangInvokableNode invokableNode, BInvo\n                 symbol.flags |= Flags.OPTIONAL;\n                 symbol.defaultableParam = true;\n             }\n+            if (varNode.flagSet.contains(Flag.INCLUDED) && varNode.type.getKind() == TypeKind.RECORD) {\n+                symbol.flags |= Flags.INCLUDED;\n+                if (((BRecordType) varNode.type).restFieldType != symTable.noType) {\n+                    openIncludedRecordParams.add(symbol);\n+                }\n+                LinkedHashMap<String, BField> fields = ((BRecordType) varNode.type).fields;\n+                for (String field : fields.keySet()) {\n+                    if (!Symbols.isFlagOn(Flags.asMask(fields.get(field).symbol.getFlags()), Flags.OPTIONAL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMjU5OA==", "bodyText": "this should be work. I misunderstood with optional fields and the disallow fields. I fixed it and now it works for optional fields also.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529732598", "createdAt": "2020-11-24T16:58:46Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -2378,13 +2385,34 @@ private void defineInvokableSymbolParams(BLangInvokableNode invokableNode, BInvo\n                 symbol.flags |= Flags.OPTIONAL;\n                 symbol.defaultableParam = true;\n             }\n+            if (varNode.flagSet.contains(Flag.INCLUDED) && varNode.type.getKind() == TypeKind.RECORD) {\n+                symbol.flags |= Flags.INCLUDED;\n+                if (((BRecordType) varNode.type).restFieldType != symTable.noType) {\n+                    openIncludedRecordParams.add(symbol);\n+                }\n+                LinkedHashMap<String, BField> fields = ((BRecordType) varNode.type).fields;\n+                for (String field : fields.keySet()) {\n+                    if (!Symbols.isFlagOn(Flags.asMask(fields.get(field).symbol.getFlags()), Flags.OPTIONAL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1ODA4MQ=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDE2OTkzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNDoxNjozOFrOH3-7ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1OTowM1rOH5MUtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDc0MA==", "bodyText": "Isn't this count misleading? While parameterCount contains the individual params including the included record params, invokableSymbol.includedRecordParams contains all the fields from the individual included record params, the sum is therefore more than the actual param count.\nThe following doesn't fail atm\ntype Options record {|\n    string name;\n|};\n\nfunction foo(int id, *Options options) {\n    string? name = options?.name; // \"baz\" is set\n}\n\npublic function main() {\n    foo(1, name = \"bar\", options = {name: \"baz\"}); // `name` is passed as an individual named arg as well as via `options`\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528464740", "createdAt": "2020-11-23T04:16:38Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5302,7 +5303,8 @@ private BType checkInvocationParam(BLangInvocation iExpr) {\n             switch (expr.getKind()) {\n                 case NAMED_ARGS_EXPR:\n                     foundNamedArg = true;\n-                    if (i < parameterCount) {\n+                    if (i < parameterCount + invokableSymbol.includedRecordParams.size() ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMjc4OA==", "bodyText": "I have fixed this. Now it fails with too many arguments in call to 'foo()' error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529732788", "createdAt": "2020-11-24T16:59:03Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5302,7 +5303,8 @@ private BType checkInvocationParam(BLangInvocation iExpr) {\n             switch (expr.getKind()) {\n                 case NAMED_ARGS_EXPR:\n                     foundNamedArg = true;\n-                    if (i < parameterCount) {\n+                    if (i < parameterCount + invokableSymbol.includedRecordParams.size() ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDc0MA=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDE3MDc2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNDoxNzoxNFrOH3-70g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjozOTozMlrOH6yjFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDg1MA==", "bodyText": "Please recheck formatting for the new methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528464850", "createdAt": "2020-11-23T04:17:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5571,6 +5593,28 @@ private void checkArrayLibSortFuncArgs(BLangInvocation iExpr) {\n         }\n     }\n \n+    private BVarSymbol checkParameterNameForDefaultArgument(BLangIdentifier argName,\n+                       BLangExpression expr, List<BVarSymbol> nonRestParams, List<BVarSymbol> includedRecordParams,\n+                                                            BVarSymbol incRecordParamAllowAdditionalFields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzYzOQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407639", "createdAt": "2020-11-27T06:39:32Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5571,6 +5593,28 @@ private void checkArrayLibSortFuncArgs(BLangInvocation iExpr) {\n         }\n     }\n \n+    private BVarSymbol checkParameterNameForDefaultArgument(BLangIdentifier argName,\n+                       BLangExpression expr, List<BVarSymbol> nonRestParams, List<BVarSymbol> includedRecordParams,\n+                                                            BVarSymbol incRecordParamAllowAdditionalFields) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDg1MA=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDE3MTIzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNDoxNzo0NFrOH3-8Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjozOTozOFrOH6yjVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDkxNA==", "bodyText": "Missing the @since annotation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528464914", "createdAt": "2020-11-23T04:17:44Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test function signatures and calling with included record params.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzcwMA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407700", "createdAt": "2020-11-27T06:39:38Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test function signatures and calling with included record params.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDkxNA=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDE3ODMzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BInvokableSymbol.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNDoyMzoxOVrOH3-_xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoyMDowMlrOH74qZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NTg2Mg==", "bodyText": "Do we need these fields in BInvokableSymbol.java? Can't we compute this info where needed from the param list?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528465862", "createdAt": "2020-11-23T04:23:19Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BInvokableSymbol.java", "diffHunk": "@@ -40,6 +40,8 @@\n public class BInvokableSymbol extends BVarSymbol implements InvokableSymbol {\n \n     public List<BVarSymbol> params;\n+    public List<BVarSymbol> includedRecordParams;\n+    public BVarSymbol incRecordParamAllowAdditionalFields;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMzA1MA==", "bodyText": "If we are not keeping these two fields we need to check for an open included record which allows extra fields in typechecker and desugar phase also. We can avoid the effect of repeating the same task through this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529733050", "createdAt": "2020-11-24T16:59:24Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BInvokableSymbol.java", "diffHunk": "@@ -40,6 +40,8 @@\n public class BInvokableSymbol extends BVarSymbol implements InvokableSymbol {\n \n     public List<BVarSymbol> params;\n+    public List<BVarSymbol> includedRecordParams;\n+    public BVarSymbol incRecordParamAllowAdditionalFields;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NTg2Mg=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMzEzMg==", "bodyText": "In desugar it's just the additional checks for two flags, right? One to see if the parameter has the INCLUDED flag and the other to see if the record is open? IMO, that is OK rather than adding these fields just for the desugar phase.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531423132", "createdAt": "2020-11-27T07:28:43Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BInvokableSymbol.java", "diffHunk": "@@ -40,6 +40,8 @@\n public class BInvokableSymbol extends BVarSymbol implements InvokableSymbol {\n \n     public List<BVarSymbol> params;\n+    public List<BVarSymbol> includedRecordParams;\n+    public BVarSymbol incRecordParamAllowAdditionalFields;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NTg2Mg=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NjM4OQ==", "bodyText": "Removed includedRecordParams and incRecordParamAllowAdditionalFields fields.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r532556389", "createdAt": "2020-11-30T12:20:02Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BInvokableSymbol.java", "diffHunk": "@@ -40,6 +40,8 @@\n public class BInvokableSymbol extends BVarSymbol implements InvokableSymbol {\n \n     public List<BVarSymbol> params;\n+    public List<BVarSymbol> includedRecordParams;\n+    public BVarSymbol incRecordParamAllowAdditionalFields;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NTg2Mg=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDIxOTg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNDo1MzoyMlrOH3_Veg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo1OTozM1rOH5MWLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MTQxOA==", "bodyText": "Shouldn't we check if the fields in the open record are optional and a subtype of never?\nShouldn't the following fail at compile-time?\ntype Options record {|\n    string name;\n|};\n\ntype OthRecord record {|\n    float id?;\n    boolean name?;\n    int...;    \n|};\n\nfunction foo(int id, *OthRecord othRec, *Options options) {\n    string? name = options?.name;\n}\n\npublic function main() {\n    foo(1, name = \"bar\", options = {name: \"baz\"});\n}\nCurrently panics at runtime.\n$ ballerina run test.bal \n\nCompiling source\n        test.bal\n\nRunning executable\n\nerror: {ballerina/lang.map}InherentTypeViolation {\"message\":\"invalid value for record field 'options': expected value of type 'int', found 'Options'\"}\n        at test:main(test.bal:16)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528471418", "createdAt": "2020-11-23T04:53:22Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -2412,6 +2440,26 @@ private void defineInvokableSymbolParams(BLangInvokableNode invokableNode, BInvo\n         invokableSymbol.type.tsymbol = functionTypeSymbol;\n     }\n \n+    private boolean isIncRecordParamAllowAdditionalFields(List<BVarSymbol> inclusiveIncludedRecordParams,\n+                                                          Set<String> requiredParamNames) {\n+        if (inclusiveIncludedRecordParams.size() != 1) {\n+            return false;\n+        }\n+\n+        LinkedHashMap<String, BField> fields = ((BRecordType) inclusiveIncludedRecordParams.get(0).type).fields;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMzE2Nw==", "bodyText": "This happens due to early mention issue. I have fixed it. This program now fails with the following errors.\nCompiling source\n        test3.bal\nERROR [test3.bal:(149:23,149:39)] redeclared symbol 'id'\nERROR [test3.bal:(149:42,149:57)] redeclared symbol 'name'\nERROR [test3.bal:(154:19,154:24)] incompatible types: expected 'boolean', found 'string'\nerror: compilation contains errors", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r529733167", "createdAt": "2020-11-24T16:59:33Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -2412,6 +2440,26 @@ private void defineInvokableSymbolParams(BLangInvokableNode invokableNode, BInvo\n         invokableSymbol.type.tsymbol = functionTypeSymbol;\n     }\n \n+    private boolean isIncRecordParamAllowAdditionalFields(List<BVarSymbol> inclusiveIncludedRecordParams,\n+                                                          Set<String> requiredParamNames) {\n+        if (inclusiveIncludedRecordParams.size() != 1) {\n+            return false;\n+        }\n+\n+        LinkedHashMap<String, BField> fields = ((BRecordType) inclusiveIncludedRecordParams.get(0).type).fields;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MTQxOA=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDI3NjEzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNTozMzozNlrOH3_zMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoxOTowMFrOH74oEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3OTAyNg==", "bodyText": "Wouldn't it be better to\n\niterate through the param list and identify\n\n\nall included record params of a closed record type\nthe single included record param of an open record type, if present\n\n\nthen iterate through the named args and add to the relevant records based on the expected names?\n\n\nif the name is present in a particular included record param, and the type is not a subtype of never, the field belongs to that record\nif the name is present in a particular included record param, and the type is a subtype of never, the field does not belongs to that record\nif the name is not present in a particular included record param, and it is an open record, the field belongs to that record", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528479026", "createdAt": "2020-11-23T05:33:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {\n+        BLangRecordLiteral recordLiteral = TreeBuilder.createBLangRecordLiteralNode();\n+        recordLiteral.type = param.type;\n+        if (param == ((BInvokableSymbol) iExpr.symbol).incRecordParamAllowAdditionalFields) {\n+            for (String name : namedArgs.keySet()) {\n+                BLangNamedArgsExpression expr = (BLangNamedArgsExpression) namedArgs.get(name);\n+                if (!((BRecordType) param.type).fields.containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NTc5NQ==", "bodyText": "Refactor the logic according to the mentioned way.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r532555795", "createdAt": "2020-11-30T12:19:00Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {\n+        BLangRecordLiteral recordLiteral = TreeBuilder.createBLangRecordLiteralNode();\n+        recordLiteral.type = param.type;\n+        if (param == ((BInvokableSymbol) iExpr.symbol).incRecordParamAllowAdditionalFields) {\n+            for (String name : namedArgs.keySet()) {\n+                BLangNamedArgsExpression expr = (BLangNamedArgsExpression) namedArgs.get(name);\n+                if (!((BRecordType) param.type).fields.containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3OTAyNg=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDk1MTgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxNzozNlrOH5l6Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjozOTo1MlrOH6yjkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MjAxNQ==", "bodyText": "Shall we rearrange the login inside for loop like this, it will be more readable,\nfor (BVarSymbol symbol : invokableSymbol.params) {\n   if (!Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\n       continue;\n   }\n   .......\n   if (fields.isEmpty()) {\n       continue;\n   }\n   for (String field : fields.keySet()) {\n   }\n}\n\nPlease check the other places if possible.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r530152015", "createdAt": "2020-11-25T07:17:36Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5303,10 +5303,25 @@ private BType checkInvocationParam(BLangInvocation iExpr) {\n             return symTable.noType;\n         }\n \n-        List<BType> paramTypes = ((BInvokableType) iExpr.symbol.type).getParameterTypes();\n+        BInvokableSymbol invokableSymbol = ((BInvokableSymbol) iExpr.symbol);\n+        List<BType> paramTypes = ((BInvokableType) invokableSymbol.type).getParameterTypes();\n \n-        int parameterCount = paramTypes.size();\n+        int parameterCountForPositionalArgs = paramTypes.size();\n+        int parameterCountForNamedArgs = parameterCountForPositionalArgs + invokableSymbol.includedRecordParams.size();\n         iExpr.requiredArgs = new ArrayList<>();\n+        for (BVarSymbol symbol : invokableSymbol.params) {\n+            if (Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\n+                LinkedHashMap<String, BField> fields = ((BRecordType) symbol.type).fields;\n+                if (!fields.isEmpty()) {\n+                    for (String field : fields.keySet()) {\n+                        if (fields.get(field).type.tag != TypeTags.NEVER) {\n+                            parameterCountForNamedArgs = parameterCountForNamedArgs - 1;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e57bbe2670c76c5f939790b2b9c788b474f131f5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzc2MQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r531407761", "createdAt": "2020-11-27T06:39:52Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5303,10 +5303,25 @@ private BType checkInvocationParam(BLangInvocation iExpr) {\n             return symTable.noType;\n         }\n \n-        List<BType> paramTypes = ((BInvokableType) iExpr.symbol.type).getParameterTypes();\n+        BInvokableSymbol invokableSymbol = ((BInvokableSymbol) iExpr.symbol);\n+        List<BType> paramTypes = ((BInvokableType) invokableSymbol.type).getParameterTypes();\n \n-        int parameterCount = paramTypes.size();\n+        int parameterCountForPositionalArgs = paramTypes.size();\n+        int parameterCountForNamedArgs = parameterCountForPositionalArgs + invokableSymbol.includedRecordParams.size();\n         iExpr.requiredArgs = new ArrayList<>();\n+        for (BVarSymbol symbol : invokableSymbol.params) {\n+            if (Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\n+                LinkedHashMap<String, BField> fields = ((BRecordType) symbol.type).fields;\n+                if (!fields.isEmpty()) {\n+                    for (String field : fields.keySet()) {\n+                        if (fields.get(field).type.tag != TypeTags.NEVER) {\n+                            parameterCountForNamedArgs = parameterCountForNamedArgs - 1;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MjAxNQ=="}, "originalCommit": {"oid": "e57bbe2670c76c5f939790b2b9c788b474f131f5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzgxNTY0OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzowOTowMlrOICANMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODozMzo0NFrOIOORZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MTQ0MQ==", "bodyText": "Do we need to remove the node kind?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538971441", "createdAt": "2020-12-09T03:09:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -945,13 +945,17 @@\n         {\n             \"name\": \"RequiredParameterNode\",\n             \"base\": \"ParameterNode\",\n-            \"kind\": \"REQUIRED_PARAM\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NDQ0Nw==", "bodyText": "Looks like we are using two different kinds for the same node.\nBut that allows someone to have the asterisk-token in the node, but use the REQUIRED_PARAM as the node kind, which is not correct. We can avoid that if we introduce a separate node for INCLUDED_RECORD_PARAM.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538974447", "createdAt": "2020-12-09T03:17:52Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -945,13 +945,17 @@\n         {\n             \"name\": \"RequiredParameterNode\",\n             \"base\": \"ParameterNode\",\n-            \"kind\": \"REQUIRED_PARAM\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MTQ0MQ=="}, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMjg4MA==", "bodyText": "I did this because the asterisk is the only additional token in included record param when compared with required param. yes. It can be done. But isn't it an intentional work done in the parser side?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539032880", "createdAt": "2020-12-09T06:02:24Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -945,13 +945,17 @@\n         {\n             \"name\": \"RequiredParameterNode\",\n             \"base\": \"ParameterNode\",\n-            \"kind\": \"REQUIRED_PARAM\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MTQ0MQ=="}, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc5NDg3NQ==", "bodyText": "Catch is, with the existence of asterisk, the node becomes a completely different node, with a different node kind. So the issue I mentioned above is there.\nThe intention of optional fields is to support truly optional fields for a given node. For eg. metadata (documentation and annotations) is an optional node. The owner, say a function-decl node, doesn't become a different node, regardless of the existence of the metadata. func-decl node stays as a func-decl node. But here it is not the case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539794875", "createdAt": "2020-12-10T02:23:25Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -945,13 +945,17 @@\n         {\n             \"name\": \"RequiredParameterNode\",\n             \"base\": \"ParameterNode\",\n-            \"kind\": \"REQUIRED_PARAM\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MTQ0MQ=="}, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4NDgwNQ==", "bodyText": "Changed as we discussed offline. #27662", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551784805", "createdAt": "2021-01-05T08:33:44Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -945,13 +945,17 @@\n         {\n             \"name\": \"RequiredParameterNode\",\n             \"base\": \"ParameterNode\",\n-            \"kind\": \"REQUIRED_PARAM\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MTQ0MQ=="}, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzgyMDY2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoxMTowMlrOICAP8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjowMzoxNlrOICD-ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MjE0NA==", "bodyText": "Can we use STNodeFactory.createEmptyNode() instead of null?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538972144", "createdAt": "2020-12-09T03:11:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1669,9 +1669,8 @@ private STNode getUpdatedParamList(STNode parameters, int index) {\n                 case REQUIRED_PARAM:\n                     STRequiredParameterNode requiredParam = (STRequiredParameterNode) param;\n                     if (isEmpty(requiredParam.paramName)) {\n-                        param = STNodeFactory\n-                                .createRequiredParameterNode(requiredParam.annotations, requiredParam.typeName,\n-                                        paramName);\n+                        param = STNodeFactory.createRequiredParameterNode(SyntaxKind.REQUIRED_PARAM,\n+                                requiredParam.annotations, null, requiredParam.typeName, paramName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzE5NA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539033194", "createdAt": "2020-12-09T06:03:16Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1669,9 +1669,8 @@ private STNode getUpdatedParamList(STNode parameters, int index) {\n                 case REQUIRED_PARAM:\n                     STRequiredParameterNode requiredParam = (STRequiredParameterNode) param;\n                     if (isEmpty(requiredParam.paramName)) {\n-                        param = STNodeFactory\n-                                .createRequiredParameterNode(requiredParam.annotations, requiredParam.typeName,\n-                                        paramName);\n+                        param = STNodeFactory.createRequiredParameterNode(SyntaxKind.REQUIRED_PARAM,\n+                                requiredParam.annotations, null, requiredParam.typeName, paramName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MjE0NA=="}, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzgyNjg3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoxMzoyOVrOICATNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjowNDozNFrOICEAWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3Mjk4MQ==", "bodyText": "Will this support function foo(@someAnnot *Bar b)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538972981", "createdAt": "2020-12-09T03:13:29Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,23 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n+                inclusionSymbol = STNodeFactory.createEmptyNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzY5MQ==", "bodyText": "Fixed. Now it works with annotations also.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539033691", "createdAt": "2020-12-09T06:04:34Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,23 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n+                inclusionSymbol = STNodeFactory.createEmptyNode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3Mjk4MQ=="}, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzgzOTM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoxODozNVrOICAZug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjowNDo1M1rOICEA2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NDY1MA==", "bodyText": "Do we need this second check inclusionSymbol.kind == SyntaxKind.ASTERISK_TOKEN?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538974650", "createdAt": "2020-12-09T03:18:35Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2047,12 +2053,18 @@ private STNode parseEllipsis() {\n      * @param paramName     Name of the parameter\n      * @return Parsed parameter node\n      */\n-    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode type,\n+    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode inclusionSymbol, STNode type,\n                                      STNode paramName) {\n         STToken nextToken = peek();\n         // Required parameters\n         if (isEndOfParameter(nextToken.kind)) {\n-            return STNodeFactory.createRequiredParameterNode(annots, type, paramName);\n+            if (inclusionSymbol != null && inclusionSymbol.kind == SyntaxKind.ASTERISK_TOKEN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzgxOQ==", "bodyText": "Removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539033819", "createdAt": "2020-12-09T06:04:53Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2047,12 +2053,18 @@ private STNode parseEllipsis() {\n      * @param paramName     Name of the parameter\n      * @return Parsed parameter node\n      */\n-    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode type,\n+    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode inclusionSymbol, STNode type,\n                                      STNode paramName) {\n         STToken nextToken = peek();\n         // Required parameters\n         if (isEndOfParameter(nextToken.kind)) {\n-            return STNodeFactory.createRequiredParameterNode(annots, type, paramName);\n+            if (inclusionSymbol != null && inclusionSymbol.kind == SyntaxKind.ASTERISK_TOKEN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NDY1MA=="}, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mzg1NjI4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionParamsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoyNDo1NlrOICAiqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjo0NzoxNlrOICFBvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NjkzOQ==", "bodyText": "Shall we add some negative syntax tests as well?\ne.g: additional tokens before and after asterisk, missing tokens before and after asterisk, etc", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538976939", "createdAt": "2020-12-09T03:24:56Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionParamsTest.java", "diffHunk": "@@ -66,4 +66,14 @@ public void testIncompleteBinarExprInDefaultableParams() {\n     public void testMoreParamsAfterRestParam() {\n         test(\"func-definition/func_params_source_07.bal\", \"func-definition/func_params_assert_07.json\");\n     }\n+\n+    @Test\n+    public void testIncludedRecordParam() {\n+        test(\"func-definition/func_params_source_09.bal\", \"func-definition/func_params_assert_09.json\");\n+    }\n+\n+    @Test\n+    public void testIncludedRecordParamWithDefaultValues() {\n+        test(\"func-definition/func_params_source_10.bal\", \"func-definition/func_params_assert_10.json\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1MDQzMA==", "bodyText": "Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539050430", "createdAt": "2020-12-09T06:47:16Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionParamsTest.java", "diffHunk": "@@ -66,4 +66,14 @@ public void testIncompleteBinarExprInDefaultableParams() {\n     public void testMoreParamsAfterRestParam() {\n         test(\"func-definition/func_params_source_07.bal\", \"func-definition/func_params_assert_07.json\");\n     }\n+\n+    @Test\n+    public void testIncludedRecordParam() {\n+        test(\"func-definition/func_params_source_09.bal\", \"func-definition/func_params_assert_09.json\");\n+    }\n+\n+    @Test\n+    public void testIncludedRecordParamWithDefaultValues() {\n+        test(\"func-definition/func_params_source_10.bal\", \"func-definition/func_params_assert_10.json\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NjkzOQ=="}, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTY4NjIyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDoyOToyNFrOIC1A5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDoyOToyNFrOIC1A5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNjY0NA==", "bodyText": "Parsing the inclusionSymbol in a single place like this is cleaner to me\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);\n          \n          \n            \n                    STNode inclusionSymbol = parseInclusionSymbol();\n          \n          \n            \n                    STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539836644", "createdAt": "2020-12-10T04:29:24Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1978,11 +1989,10 @@ private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptio\n         }\n \n         STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTY5NDM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozMjo1M1rOIC1FIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODozMTozMlrOIOONdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNzcyOQ==", "bodyText": "Related to above comment.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private STNode parseAsteriskToken() {\n          \n          \n            \n                    STToken nextToken = peek();\n          \n          \n            \n                    if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n          \n          \n            \n                        return consume();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        recover(nextToken, ParserRuleContext.ASTERISK);\n          \n          \n            \n                        return parseAsteriskToken();\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private STNode parseInclusionSymbol() {  \n          \n          \n            \n                    STToken nextToken = peek();\n          \n          \n            \n                    if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n          \n          \n            \n                        return consume();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return STNodeFactory.createEmptyNode();\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539837729", "createdAt": "2020-12-10T04:32:53Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7606,6 +7626,21 @@ private STNode parseAtToken() {\n         }\n     }\n \n+    /**\n+     * Parse '*' token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseAsteriskToken() {\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n+            return consume();\n+        } else {\n+            recover(nextToken, ParserRuleContext.ASTERISK);\n+            return parseAsteriskToken();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4Mzc5Ng==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551783796", "createdAt": "2021-01-05T08:31:32Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7606,6 +7626,21 @@ private STNode parseAtToken() {\n         }\n     }\n \n+    /**\n+     * Parse '*' token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseAsteriskToken() {\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n+            return consume();\n+        } else {\n+            recover(nextToken, ParserRuleContext.ASTERISK);\n+            return parseAsteriskToken();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNzcyOQ=="}, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc2OTE3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowNDozM1rOIC1sZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODozMjoyMVrOIOOO-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0Nzc4MA==", "bodyText": "We can directly use consume() here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539847780", "createdAt": "2020-12-10T05:04:33Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4NDE4NQ==", "bodyText": "Fixed with #27662", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551784185", "createdAt": "2021-01-05T08:32:21Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0Nzc4MA=="}, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc3MDk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowNToyMFrOIC1tXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODozMjozNVrOIOOPcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODAzMQ==", "bodyText": "can use consume() and remove parseAsteriskToken() method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539848031", "createdAt": "2020-12-10T05:05:20Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }\n+                break;\n+            case ASTERISK_TOKEN:\n+                inclusionSymbol = parseAsteriskToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4NDMwNQ==", "bodyText": "Fixed with #27662", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551784305", "createdAt": "2021-01-05T08:32:35Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }\n+                break;\n+            case ASTERISK_TOKEN:\n+                inclusionSymbol = parseAsteriskToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODAzMQ=="}, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc3MTI0OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowNToyM1rOIC1tgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODozMjoxMFrOIOOOsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODA2NA==", "bodyText": "Why do we have to skip these tests?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539848064", "createdAt": "2020-12-10T05:05:23Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "diffHunk": "@@ -173,7 +173,8 @@ public void test(String fileName, String path) throws IOException {\n                 \"annot_decl_source_02.bal\", \"class_def_source_11.bal\", \"object_type_def_source_26.bal\",\n                 \"ambiguity_source_32.bal\", \"service_object_constructor_source_01.bal\",\n                 \"service_object_constructor_source_02.bal\", \"object_constructor_source_08.bal\",\n-                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\");\n+                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\", \"func_params_source_10.bal\",\n+                \"func_params_source_11.bal\", \"func_params_source_13.bal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4NDExMg==", "bodyText": "Fixed with #27662", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551784112", "createdAt": "2021-01-05T08:32:10Z", "author": {"login": "chiranSachintha"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "diffHunk": "@@ -173,7 +173,8 @@ public void test(String fileName, String path) throws IOException {\n                 \"annot_decl_source_02.bal\", \"class_def_source_11.bal\", \"object_type_def_source_26.bal\",\n                 \"ambiguity_source_32.bal\", \"service_object_constructor_source_01.bal\",\n                 \"service_object_constructor_source_02.bal\", \"object_constructor_source_08.bal\",\n-                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\");\n+                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\", \"func_params_source_10.bal\",\n+                \"func_params_source_11.bal\", \"func_params_source_13.bal\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODA2NA=="}, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc4MjQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxMDoxNFrOIC1zmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODoyMTozM1rOION62w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA==", "bodyText": "This will not handle syntax errors that could come after annotations. We need to introduce another level to parse and recover the content after the annots.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539849624", "createdAt": "2020-12-10T05:10:14Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MDc1Mw==", "bodyText": "+1 I think we need to handle recovery for the included record param", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539860753", "createdAt": "2020-12-10T05:43:21Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA=="}, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MTE1Nw==", "bodyText": "isn't it enough going to recovery inside the parseTypeDescriptor when there's an error followed by annotations?\nReason is error handler will never pick INSERT * as the optimal path. It will always go for the required-param, defaultable-param or rest-param", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539861157", "createdAt": "2020-12-10T05:44:26Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA=="}, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2NTIwMw==", "bodyText": "sorry. we can something like @untainted invalidtoken *Options options\n+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539865203", "createdAt": "2020-12-10T05:56:06Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA=="}, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3OTAzNQ==", "bodyText": "Fixed with #26882", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r551779035", "createdAt": "2021-01-05T08:21:33Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA=="}, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3158, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}