{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5ODc0Mzgx", "number": 24456, "title": "Add list-match-pattern support to match statement", "bodyText": "Purpose\nAdd list-match-pattern support to match statement with recovery logic and test cases.\nFixes #24291\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-06-25T09:18:40Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456", "merged": true, "mergeCommit": {"oid": "b90706ca081a6f6422f9307acc1df0b2c6e5dbf2"}, "closed": true, "closedAt": "2020-06-30T09:25:50Z", "author": {"login": "rdulmina"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuYy8jAH2gAyNDM5ODc0MzgxOjU1ZTc3NzkwNjQ4NThhYTQzMWVjODE3YWM2MjNhZmJiMjhhYzQ3ZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwSL2ggFqTQzOTgzNTE4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "55e7779064858aa431ec817ac623afbb28ac47e7", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/55e7779064858aa431ec817ac623afbb28ac47e7", "committedDate": "2020-06-24T11:59:58Z", "message": "List-match-pattern support to match statement."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e81afa9301f6e95188e0d9c8f3dc4fdc97f0de", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50e81afa9301f6e95188e0d9c8f3dc4fdc97f0de", "committedDate": "2020-06-24T12:00:53Z", "message": "Add missing files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "084d54026376ae1e3aeda2d20ad32e9f2176cf8b", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/084d54026376ae1e3aeda2d20ad32e9f2176cf8b", "committedDate": "2020-06-24T13:32:51Z", "message": "Recovery logic for list match pattern for map pattern."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d3bf1a6794ca7ca9b21771e1c9e1227205553a9", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d3bf1a6794ca7ca9b21771e1c9e1227205553a9", "committedDate": "2020-06-25T09:07:43Z", "message": "Test cases for adding list match pattern support for match statement."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1293cbac3cdcec24732d6e09bfe780c96db967fc", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1293cbac3cdcec24732d6e09bfe780c96db967fc", "committedDate": "2020-06-25T09:12:54Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MTE5Mjg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#pullrequestreview-439119289", "createdAt": "2020-06-29T13:02:45Z", "commit": {"oid": "1293cbac3cdcec24732d6e09bfe780c96db967fc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowMjo0NlrOGqP3yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowNjozN1rOGqQBNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MzQxNg==", "bodyText": "Can we keep the original name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#discussion_r446953416", "createdAt": "2020-06-29T13:02:46Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -500,7 +500,7 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseMatchGuard();\n             case MATCH_PATTERN_START:\n                 return parseMatchPattern();\n-            case MATCH_PATTERN_RHS:\n+            case MATCH_PATTERN_OUTER_RHS:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1293cbac3cdcec24732d6e09bfe780c96db967fc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1Mzk3OA==", "bodyText": "list match pattern can also be an empty list. So a while loop would be a better option?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#discussion_r446953978", "createdAt": "2020-06-29T13:03:39Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12492,6 +12496,100 @@ private STNode parseVarKeyword() {\n         }\n     }\n \n+    /**\n+     * Parse list match pattern.\n+     * <p>\n+     *     <code>\n+     *         list-match-pattern := [ list-member-match-patterns ]\n+     *         list-member-match-patterns :=\n+     *          match-pattern (, match-pattern)* [, rest-match-pattern]\n+     *          | [ rest-match-pattern ]\n+     *     </code>\n+     * </p>\n+     *\n+     * @return Parsed list match pattern node\n+     */\n+    private STNode parseListMatchPattern() {\n+        startContext(ParserRuleContext.LIST_MATCH_PATTERN);\n+        STNode openBracketToken = parseOpenBracket();\n+        List<STNode> matchPatternList = new ArrayList<>();\n+        STNode restMatchPattern = null;\n+        STNode matchPatternMemberRhs;\n+\n+        do {\n+            STToken nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                restMatchPattern = parseRestMatchPattern();\n+                break;\n+            }\n+            STNode matchPatternListMember = parseMatchPattern();\n+            matchPatternList.add(matchPatternListMember);\n+            matchPatternMemberRhs = parseListMatchPatternMemberRhs();\n+\n+            if (matchPatternMemberRhs != null) {\n+                matchPatternList.add(matchPatternMemberRhs);\n+            }\n+        } while (matchPatternMemberRhs != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1293cbac3cdcec24732d6e09bfe780c96db967fc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NTgzMA==", "bodyText": "should we add => also here? What if the close bracket is missing?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#discussion_r446955830", "createdAt": "2020-06-29T13:06:37Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12492,6 +12496,100 @@ private STNode parseVarKeyword() {\n         }\n     }\n \n+    /**\n+     * Parse list match pattern.\n+     * <p>\n+     *     <code>\n+     *         list-match-pattern := [ list-member-match-patterns ]\n+     *         list-member-match-patterns :=\n+     *          match-pattern (, match-pattern)* [, rest-match-pattern]\n+     *          | [ rest-match-pattern ]\n+     *     </code>\n+     * </p>\n+     *\n+     * @return Parsed list match pattern node\n+     */\n+    private STNode parseListMatchPattern() {\n+        startContext(ParserRuleContext.LIST_MATCH_PATTERN);\n+        STNode openBracketToken = parseOpenBracket();\n+        List<STNode> matchPatternList = new ArrayList<>();\n+        STNode restMatchPattern = null;\n+        STNode matchPatternMemberRhs;\n+\n+        do {\n+            STToken nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                restMatchPattern = parseRestMatchPattern();\n+                break;\n+            }\n+            STNode matchPatternListMember = parseMatchPattern();\n+            matchPatternList.add(matchPatternListMember);\n+            matchPatternMemberRhs = parseListMatchPatternMemberRhs();\n+\n+            if (matchPatternMemberRhs != null) {\n+                matchPatternList.add(matchPatternMemberRhs);\n+            }\n+        } while (matchPatternMemberRhs != null);\n+\n+        if (restMatchPattern == null) {\n+            restMatchPattern = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode matchPatternListNode =  STNodeFactory.createNodeList(matchPatternList);\n+        STNode closeBracketToken = parseCloseBracket();\n+        endContext();\n+\n+        return STNodeFactory.createListMatchPatternNode(openBracketToken, matchPatternListNode, restMatchPattern,\n+                closeBracketToken);\n+    }\n+\n+    /** Parse rest match pattern.\n+     *<p>\n+     *     <code>\n+     *         rest-match-pattern := ... var variable-name\n+     *     </code>\n+     *</p>\n+     *\n+     * @return Parsed rest match pattern node\n+     */\n+    private STNode parseRestMatchPattern() {\n+        startContext(ParserRuleContext.REST_MATCH_PATTERN);\n+        //We approach here only after seeing ellipsis token hence consume.\n+        STNode ellipsisToken = consume();\n+        STNode varKeywordToken = parseVarKeyword();\n+        STNode variableName = parseVariableName();\n+        endContext();\n+\n+        STSimpleNameReferenceNode simpleNameReferenceNode =\n+                (STSimpleNameReferenceNode) STNodeFactory.createSimpleNameReferenceNode(variableName);\n+        return STNodeFactory.createRestMatchPatternNode(ellipsisToken, varKeywordToken, simpleNameReferenceNode);\n+    }\n+\n+    private STNode parseListMatchPatternMemberRhs() {\n+        return parseListMatchPatternMemberRhs(peek().kind);\n+    }\n+\n+    private STNode parseListMatchPatternMemberRhs(SyntaxKind nextTokenKind) {\n+        switch (nextTokenKind) {\n+            case COMMA_TOKEN:\n+                return parseComma();\n+            case CLOSE_BRACKET_TOKEN:\n+            case EOF_TOKEN:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1293cbac3cdcec24732d6e09bfe780c96db967fc"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd1723e40c25fe9c1f884850bb28d66d87cae26", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bcd1723e40c25fe9c1f884850bb28d66d87cae26", "committedDate": "2020-06-30T04:35:22Z", "message": "Make requested changes.\nUndo rename MATCH_PATTERN_RHS to MATCH_PATTERN_OUTER_RHS. Change do while loop to while loop."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d5f1a3775c18ac9809ab4d50e65c88a2565b1f", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4d5f1a3775c18ac9809ab4d50e65c88a2565b1f", "committedDate": "2020-06-30T05:04:09Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d94cfd8e9c5c31cbe941eaad289f52cfe2f79459", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d94cfd8e9c5c31cbe941eaad289f52cfe2f79459", "committedDate": "2020-06-30T07:09:28Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "801c7252b8059213aff250e57b2bad7401d796fa", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/801c7252b8059213aff250e57b2bad7401d796fa", "committedDate": "2020-06-30T07:42:38Z", "message": "Rename method isEndOfMatchPattern to isEndOfListMatchPattern."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODM1MTgw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24456#pullrequestreview-439835180", "createdAt": "2020-06-30T09:25:41Z", "commit": {"oid": "801c7252b8059213aff250e57b2bad7401d796fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4222, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}