{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1OTAxMjIy", "number": 27100, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToxNjozOFrOE8XDIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowMjo1N1rOFHr1nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzI3NjUwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToxNjozOFrOH4b1AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzo0NDo1M1rOH6z2Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzODI0MQ==", "bodyText": "Shall we move these tests to org.ballerinalang.langlib.test.LangLibValueTest#testFromJsonWithType?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r528938241", "createdAt": "2020-11-23T19:16:38Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java", "diffHunk": "@@ -133,4 +133,9 @@ public void testConvertMapJsonWithDecimalToOpenRecord() {\n     public void testConvertMapJsonWithDecimalUnionTarget() {\n         BRunUtil.invoke(compileResult, \"testConvertMapJsonWithDecimalUnionTarget\");\n     }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0131e6acee2227ef17352b3c52cb4284a9fc4050"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODk2Mw==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r531428963", "createdAt": "2020-11-27T07:44:53Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java", "diffHunk": "@@ -133,4 +133,9 @@ public void testConvertMapJsonWithDecimalToOpenRecord() {\n     public void testConvertMapJsonWithDecimalUnionTarget() {\n         BRunUtil.invoke(compileResult, \"testConvertMapJsonWithDecimalUnionTarget\");\n     }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzODI0MQ=="}, "originalCommit": {"oid": "0131e6acee2227ef17352b3c52cb4284a9fc4050"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU2Nzk1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNjoxNFrOICiU8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNjoxNFrOICiU8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMDQ4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                json expectedJson = { \"value\": 132 };\n          \n          \n            \n                json expectedJson = {\"value\": 132};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539530481", "createdAt": "2020-12-09T18:06:14Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU2ODI3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNjoyM1rOICiVNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNjoyM1rOICiVNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMDU0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Argument expected = { \"value\": 132 };\n          \n          \n            \n                Argument expected = {\"value\": 132};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539530548", "createdAt": "2020-12-09T18:06:23Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };\n+\n+    Argument expected = { \"value\": 132 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU3MDQwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNjo1MlrOICiWgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNjo1MlrOICiWgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMDg4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else {\n          \n          \n            \n                    assert(actual, expected);\n          \n          \n            \n                }\n          \n          \n            \n                }\n          \n          \n            \n                assert(actual, expected);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539530881", "createdAt": "2020-12-09T18:06:52Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };\n+\n+    Argument expected = { \"value\": 132 };\n+    var actual = expectedJson.cloneWithType(Argument);\n+\n+    if (actual is error) {\n+        panic error(\"`cloneWithType` returned an error.\");\n+    } else {\n+        assert(actual, expected);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU3NTMzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNzo1N1rOICiZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNzo1N1rOICiZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMTYwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    name: \"foo\",\n          \n          \n            \n                    factor: 1.23d\n          \n          \n            \n                name: \"foo\",\n          \n          \n            \n                factor: 1.23d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539531609", "createdAt": "2020-12-09T18:07:57Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -78,7 +78,7 @@ type OpenRecordWithUnionTarget record {|\n map<json> mp = {\n         name: \"foo\",\n         factor: 1.23d", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU4MzE2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowOTo1N1rOICieJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowOTo1N1rOICieJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMjgzNg==", "bodyText": "Shouldn't the name reflect that it's conversion with numeric types?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539532836", "createdAt": "2020-12-09T18:09:57Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java", "diffHunk": "@@ -133,4 +133,9 @@ public void testConvertMapJsonWithDecimalToOpenRecord() {\n     public void testConvertMapJsonWithDecimalUnionTarget() {\n         BRunUtil.invoke(compileResult, \"testConvertMapJsonWithDecimalUnionTarget\");\n     }\n+\n+    @Test\n+    void testConvertUnion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzY0NzIxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyNDo0MVrOICjErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowMTowN1rOIHl-5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MjcwMA==", "bodyText": "Were we able to reproduce the original CCE mentioned in #26632? Both this example and the one in the issue seem to result in \"ballerina/lang.typedesc}ConversionError\" errors on slp7.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539542700", "createdAt": "2020-12-09T18:24:41Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };\n+\n+    Argument expected = { \"value\": 132 };\n+    var actual = expectedJson.cloneWithType(Argument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxMDQ0OA==", "bodyText": "CCE is not reproducible. Found a different bug and fixed it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r544810448", "createdAt": "2020-12-17T04:51:02Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };\n+\n+    Argument expected = { \"value\": 132 };\n+    var actual = expectedJson.cloneWithType(Argument);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MjcwMA=="}, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxNDY1Ng==", "bodyText": "I tried the same on slp3 also but still couldn't reproduce the CCE. Fails with the following which I believe has/is been fixed.\nerror: {ballerina/lang.typedesc}ConversionError message='map<json>' value cannot be converted to 'Argument'\n        at ballerina.lang_value.1_0_0:cloneWithType(value.bal:67)\n           xyz:main(xyz.bal:174)\nBut since the CCE has been observed shall we keep that issue open to try and reproduce the CCE and fix it, and create a new issue for what we're fixing here? Let's also add a comment on the issue to say the CCE is not reproducible with that code.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r544814656", "createdAt": "2020-12-17T05:04:16Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };\n+\n+    Argument expected = { \"value\": 132 };\n+    var actual = expectedJson.cloneWithType(Argument);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MjcwMA=="}, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMzI1NQ==", "bodyText": "+1. Will do that", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r544833255", "createdAt": "2020-12-17T06:01:07Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };\n+\n+    Argument expected = { \"value\": 132 };\n+    var actual = expectedJson.cloneWithType(Argument);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MjcwMA=="}, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzY1MDg1OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyNToyN1rOICjGsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyNToyN1rOICjGsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MzIxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        name: \"foo\",\n          \n          \n            \n                        factor: 1.23d\n          \n          \n            \n                    name: \"foo\",\n          \n          \n            \n                    factor: 1.23d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539543216", "createdAt": "2020-12-09T18:25:27Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -1245,3 +1245,23 @@ function testEnsureTypeNegative() {\n     assertEquality(\"error(\\\"{ballerina}TypeCastError\\\",message=\\\"incompatible types: '()' cannot be cast to 'int'\\\")\", e5.toString());\n     assertEquality(\"error(\\\"{ballerina/lang.map}KeyNotFound\\\",message=\\\"Key 'children' not found in JSON mapping\\\")\", e6.toString());\n }\n+\n+type OpenRecordWithUnionTarget record {|\n+    string|decimal...;\n+|};\n+\n+function tesFromJsonWithTypeMapWithDecimal() {\n+    map<json> mp = {\n+            name: \"foo\",\n+            factor: 1.23d", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzcwNDA2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozNzowNVrOICjmUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozNzowNVrOICjmUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1MTMxNA==", "bodyText": "Don't we still have to check for > 1 convertible types? That should also be an error, right? Let's add a test for the same.\nThe following should fail.\npublic type Maps record {|int i; int...;|}|record {|int i?;|};\n\npublic type Value record {|\n    Maps value;\n|};\n\npublic function main() {\n    json j = {\"value\": <map<int>> {i: 1}};\n    Value res = checkpanic j.cloneWithType(Value);\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539551314", "createdAt": "2020-12-09T18:37:05Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -355,7 +355,7 @@ private static boolean isConvertibleToRecordType(Object sourceValue, BRecordType\n             } else {\n                 if (targetFieldTypes.containsKey(fieldName)) {\n                     if (getConvertibleTypes(valueEntry.getValue(), targetFieldTypes.get(fieldName),\n-                            unresolvedValues).size() != 1) {\n+                            unresolvedValues).size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDk4MDYwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNjo1Mjo1N1rOIJFt6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjozNTo0M1rOIJNtNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwMTc3MQ==", "bodyText": "In L248 shouldn't we directly check io.ballerina.runtime.internal.TypeChecker#checkIsType(java.lang.Object, io.ballerina.runtime.api.types.Type) instead?\nChecking .equals() may not work for subtypes, right? Wouldn't work with structurally equivalent types too.\nLet's also add tests for such scenarios.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546401771", "createdAt": "2020-12-20T16:52:57Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {\n+        Type valueType = TypeChecker.getType(value);\n+        if (valueType.equals(targetType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2e7d77c6e1430eb04a1b2a0d68b007cf43974"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyNTk5Mg==", "bodyText": "For anything which is not the exact type shouldn't we resort to getConvertibleTypes method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546525992", "createdAt": "2020-12-21T06:11:21Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {\n+        Type valueType = TypeChecker.getType(value);\n+        if (valueType.equals(targetType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwMTc3MQ=="}, "originalCommit": {"oid": "95e2e7d77c6e1430eb04a1b2a0d68b007cf43974"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyODc0Nw==", "bodyText": "Yeah, I guess we should look for an exact match, or we won't be able to widen the type using cloneWithType. This is OK.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546528747", "createdAt": "2020-12-21T06:21:21Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {\n+        Type valueType = TypeChecker.getType(value);\n+        if (valueType.equals(targetType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwMTc3MQ=="}, "originalCommit": {"oid": "95e2e7d77c6e1430eb04a1b2a0d68b007cf43974"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMjY2MA==", "bodyText": "We should ideally be able to rely on == here though, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546532660", "createdAt": "2020-12-21T06:35:43Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {\n+        Type valueType = TypeChecker.getType(value);\n+        if (valueType.equals(targetType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwMTc3MQ=="}, "originalCommit": {"oid": "95e2e7d77c6e1430eb04a1b2a0d68b007cf43974"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAyNTg5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowMjo1N1rOIJOK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoyMDowMFrOIJOfaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI2MA==", "bodyText": "Shall we call this checkIsSameType instead? Because checkIsType means something else in TypeChecker?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546540260", "createdAt": "2020-12-21T07:02:57Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef515f404bea49b6b71b96518974f4c9feaf26"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDY4OQ==", "bodyText": "+1. Will do", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546540689", "createdAt": "2020-12-21T07:04:21Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI2MA=="}, "originalCommit": {"oid": "16ef515f404bea49b6b71b96518974f4c9feaf26"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NTUxMg==", "bodyText": "Should we just move this in-line?\nTypeChecker.getType(value) == targetType", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546545512", "createdAt": "2020-12-21T07:20:00Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI2MA=="}, "originalCommit": {"oid": "16ef515f404bea49b6b71b96518974f4c9feaf26"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2936, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}