{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMDc2ODM1", "number": 25378, "title": "Add fromJsonFloatString and fromJsonDecimalString langlib functions for value", "bodyText": "Purpose\n\n$subject.\n\nFixes #25341\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-08-23T05:21:00Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378", "merged": true, "mergeCommit": {"oid": "a88750b649ed9babe03e212477c17511f8925eac"}, "closed": true, "closedAt": "2020-09-16T06:21:52Z", "author": {"login": "chiranSachintha"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBmxYCgH2gAyNDcyMDc2ODM1OjRlODQ5M2VkNjI2Y2FjZDhkODQ0Zjc5Yjg1YWE5YjhmNzJhZWJmOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJWTWYAFqTQ4OTMwNjgyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4e8493ed626cacd8d844f79b85aa9b8f72aebf97", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e8493ed626cacd8d844f79b85aa9b8f72aebf97", "committedDate": "2020-08-23T05:01:29Z", "message": "Add fromJsonFloatString and fromJsonDecimalString functions for value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "263568010bb6189acce197f1b6168708a066784c", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/263568010bb6189acce197f1b6168708a066784c", "committedDate": "2020-08-23T06:40:57Z", "message": "Refactor processNonStringValue function in JSONParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fa6b883161f728c13d4021026c6ab756791697d", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fa6b883161f728c13d4021026c6ab756791697d", "committedDate": "2020-08-23T06:41:07Z", "message": "Add tests for fromJsonFloatString and fromJsonDecimalString"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ccc9f642bf9ae3a5a9b644300b4b579090624b5", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ccc9f642bf9ae3a5a9b644300b4b579090624b5", "committedDate": "2020-08-23T05:10:37Z", "message": "Add tests for fromJsonFloatString and fromJsonDecimalString"}, "afterCommit": {"oid": "8fa6b883161f728c13d4021026c6ab756791697d", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fa6b883161f728c13d4021026c6ab756791697d", "committedDate": "2020-08-23T06:41:07Z", "message": "Add tests for fromJsonFloatString and fromJsonDecimalString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3c2fa78294e260469de8887289a32643f7b22d6", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3c2fa78294e260469de8887289a32643f7b22d6", "committedDate": "2020-08-23T18:55:18Z", "message": "Add support for decimal values in JSON"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDYyMjE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-473062219", "createdAt": "2020-08-24T00:33:25Z", "commit": {"oid": "d3c2fa78294e260469de8887289a32643f7b22d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMDozMzoyNVrOHFRV5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMDozMzoyNVrOHFRV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI4OTA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Parses a string in JSON format and returns the the value that it represents.\n          \n          \n            \n            # Parses a string in JSON format and returns the value that it represents.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r475289062", "createdAt": "2020-08-24T00:33:25Z", "author": {"login": "dulajdilshan"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -140,13 +140,31 @@ public function toJson(anydata v) returns json = external;\n public function toJsonString(anydata v) returns string = external;\n \n # Parses a string in JSON format and returns the the value that it represents.\n-# All numbers in the JSON will be represented as float values.\n+# All integer numbers in the JSON will be represented as integer values.\n+# All decimal numbers except -0.0 in the JSON will be represent as decimal values.\n+# -0.0 in the JSON will be represent as float value.\n # Returns an error if the string cannot be parsed.\n #\n # + str - string representation of json\n # + return - `str` parsed to json or error\n public function fromJsonString(string str) returns json|error = external;\n \n+# Parses a string in JSON format and returns the the value that it represents.\n+# All numbers in the JSON will be represented as float values.\n+# Returns an error if the string cannot be parsed.\n+#\n+# + str - string representation of json\n+# + return - `str` parsed to json or error\n+public function fromJsonFloatString(string str) returns json|error = external;\n+\n+# Parses a string in JSON format and returns the the value that it represents.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c2fa78294e260469de8887289a32643f7b22d6"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDYyMjU4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-473062258", "createdAt": "2020-08-24T00:33:45Z", "commit": {"oid": "d3c2fa78294e260469de8887289a32643f7b22d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMDozMzo0NVrOHFRWEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMDozMzo0NVrOHFRWEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI4OTEwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Parses a string in JSON format and returns the the value that it represents.\n          \n          \n            \n            # Parses a string in JSON format and returns the value that it represents.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r475289107", "createdAt": "2020-08-24T00:33:45Z", "author": {"login": "dulajdilshan"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -140,13 +140,31 @@ public function toJson(anydata v) returns json = external;\n public function toJsonString(anydata v) returns string = external;\n \n # Parses a string in JSON format and returns the the value that it represents.\n-# All numbers in the JSON will be represented as float values.\n+# All integer numbers in the JSON will be represented as integer values.\n+# All decimal numbers except -0.0 in the JSON will be represent as decimal values.\n+# -0.0 in the JSON will be represent as float value.\n # Returns an error if the string cannot be parsed.\n #\n # + str - string representation of json\n # + return - `str` parsed to json or error\n public function fromJsonString(string str) returns json|error = external;\n \n+# Parses a string in JSON format and returns the the value that it represents.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c2fa78294e260469de8887289a32643f7b22d6"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDk2NTQ0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-473096544", "createdAt": "2020-08-24T03:22:57Z", "commit": {"oid": "d3c2fa78294e260469de8887289a32643f7b22d6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMzoyMjo1N1rOHFTUUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMzozMDo1MFrOHFTbIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMyMTQyNg==", "bodyText": "We don't need !fromJsonFloatStringMode in first if condition due to second if else condition fromJsonFloatStringMode.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r475321426", "createdAt": "2020-08-24T03:22:57Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -874,28 +875,49 @@ private void processNonStringValue(ValueType type) throws JsonParserException {\n                     }\n                 } else {\n                     try {\n-                        long longValue = Long.parseLong(str);\n-                        switch (type) {\n-                            case ARRAY_ELEMENT:\n-                                ((ArrayValue) this.currentJsonNode).append(longValue);\n-                                break;\n-                            case FIELD:\n-                                ((MapValueImpl<BString, Object>) this.currentJsonNode).put(\n-                                        StringUtils.fromString(this.fieldNames.pop()), longValue);\n-                                break;\n-                            case VALUE:\n-                                currentJsonNode = longValue;\n-                                break;\n-                            default:\n-                                break;\n+                        if (ch == '-' && !fromJsonFloatStringMode && !fromJsonDecimalStringMode && isZero(str)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c2fa78294e260469de8887289a32643f7b22d6"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMyMTUzNw==", "bodyText": "We don't need !fromJsonFloatStringMode in first if condition due to second if else condition fromJsonFloatStringMode.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r475321537", "createdAt": "2020-08-24T03:23:31Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -806,23 +809,21 @@ public State transition(StateMachine sm, char[] buff, int i, int count) throws J\n         private void processNonStringValue(ValueType type) throws JsonParserException {\n             String str = value();\n             if (str.indexOf('.') >= 0) {\n+                char ch = str.charAt(0);\n                 try {\n-                    double doubleValue = Double.parseDouble(str);\n-                    switch (type) {\n-                        case ARRAY_ELEMENT:\n-                            ((ArrayValue) this.currentJsonNode).append(doubleValue);\n-                            break;\n-                        case FIELD:\n-                            ((MapValueImpl<BString, Object>) this.currentJsonNode).put(\n-                                    StringUtils.fromString(this.fieldNames.pop()), doubleValue);\n-                            break;\n-                        case VALUE:\n-                            currentJsonNode = doubleValue;\n-                            break;\n-                        default:\n-                            break;\n+                    if (ch == '-' && !fromJsonFloatStringMode && !fromJsonDecimalStringMode && isZero(str)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c2fa78294e260469de8887289a32643f7b22d6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMyMzE2OQ==", "bodyText": "not sure a static state variable is a good idea. And to properly set it to false we may need to set it to false when there is an exception also.\nAlso when the condition str.equals(\"null\") is true we forget to set it back to false.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r475323169", "createdAt": "2020-08-24T03:30:50Z", "author": {"login": "KRVPerera"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/FromJsonFloatString.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Parse a string in JSON format and return the the value that it represents.\n+ * All numbers in the JSON will be represented as float values.\n+ */\n+\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n+        functionName = \"fromJsonFloatString\",\n+        args = {@Argument(name = \"str\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.JSON), @ReturnType(type = TypeKind.ERROR)},\n+        isPublic = true\n+)\n+\n+public class FromJsonFloatString {\n+\n+    public static Object fromJsonFloatString(Strand strand, BString value) {\n+\n+        JSONParser.fromJsonFloatStringMode = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c2fa78294e260469de8887289a32643f7b22d6"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef9d6b538c6d3bac94fb0a1562fd8f0d4a7f8898", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ef9d6b538c6d3bac94fb0a1562fd8f0d4a7f8898", "committedDate": "2020-08-24T13:05:47Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NzIwMzQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-474720345", "createdAt": "2020-08-25T17:52:55Z", "commit": {"oid": "ef9d6b538c6d3bac94fb0a1562fd8f0d4a7f8898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo1Mjo1NVrOHGjZsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo1Mjo1NVrOHGjZsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMzUyMQ==", "bodyText": "Can't we merge these two conditions, it seems that same this is doing in both cases.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r476633521", "createdAt": "2020-08-25T17:52:55Z", "author": {"login": "KavinduZoysa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -806,23 +809,21 @@ public State transition(StateMachine sm, char[] buff, int i, int count) throws J\n         private void processNonStringValue(ValueType type) throws JsonParserException {\n             String str = value();\n             if (str.indexOf('.') >= 0) {\n+                char ch = str.charAt(0);\n                 try {\n-                    double doubleValue = Double.parseDouble(str);\n-                    switch (type) {\n-                        case ARRAY_ELEMENT:\n-                            ((ArrayValue) this.currentJsonNode).append(doubleValue);\n-                            break;\n-                        case FIELD:\n-                            ((MapValueImpl<BString, Object>) this.currentJsonNode).put(\n-                                    StringUtils.fromString(this.fieldNames.pop()), doubleValue);\n-                            break;\n-                        case VALUE:\n-                            currentJsonNode = doubleValue;\n-                            break;\n-                        default:\n-                            break;\n+                    if (ch == '-' && !fromJsonDecimalStringMode && isZero(str)) {\n+                        double doubleValue = Double.parseDouble(str);\n+                        setValueToJsonType(type, doubleValue);\n+                    } else if (fromJsonFloatStringMode) {\n+                        double doubleValue = Double.parseDouble(str);\n+                        setValueToJsonType(type, doubleValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef9d6b538c6d3bac94fb0a1562fd8f0d4a7f8898"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b979acf04ea612ee9d385a44db32f6dfa657b18f", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b979acf04ea612ee9d385a44db32f6dfa657b18f", "committedDate": "2020-08-26T11:46:53Z", "message": "Fix review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0f15bbaf747a16cdd626db9738703b7b98af512", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0f15bbaf747a16cdd626db9738703b7b98af512", "committedDate": "2020-08-26T10:47:10Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "b979acf04ea612ee9d385a44db32f6dfa657b18f", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b979acf04ea612ee9d385a44db32f6dfa657b18f", "committedDate": "2020-08-26T11:46:53Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f511ab3405eca0e8208adc340e48b72923a91451", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f511ab3405eca0e8208adc340e48b72923a91451", "committedDate": "2020-08-27T02:38:41Z", "message": "fix lang server test fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2354669bc22a5b40e53a480b309c7f100b85ff15", "committedDate": "2020-08-27T03:24:12Z", "message": "Merge pull request #2 from nadeeshaan/issue-25341\n\nFix lang server test fails"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Mzc0MTE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-476374117", "createdAt": "2020-08-27T04:18:45Z", "commit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNDoxODo0NVrOHH8OXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNDoxODo0NVrOHH8OXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4ODc5OA==", "bodyText": "Return type of fromJsonFloatString should be JsonFloat. This will fix with #25446", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r478088798", "createdAt": "2020-08-27T04:18:45Z", "author": {"login": "chiranSachintha"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -140,13 +140,31 @@ public function toJson(anydata v) returns json = external;\n public function toJsonString(anydata v) returns string = external;\n \n # Parses a string in JSON format and returns the the value that it represents.\n-# All numbers in the JSON will be represented as float values.\n+# All integer numbers in the JSON will be represented as integer values.\n+# All decimal numbers except -0.0 in the JSON will be represent as decimal values.\n+# -0.0 in the JSON will be represent as float value.\n # Returns an error if the string cannot be parsed.\n #\n # + str - string representation of json\n # + return - `str` parsed to json or error\n public function fromJsonString(string str) returns json|error = external;\n \n+# Parses a string in JSON format and returns the value that it represents.\n+# All numbers in the JSON will be represented as float values.\n+# Returns an error if the string cannot be parsed.\n+#\n+# + str - string representation of json\n+# + return - `str` parsed to json or error\n+public function fromJsonFloatString(string str) returns json|error = external;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Mzc1MDY4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-476375068", "createdAt": "2020-08-27T04:22:22Z", "commit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNDoyMjoyMlrOHH8cHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNDoyMjoyMlrOHH8cHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA5MjMxNg==", "bodyText": "Return type of fromJsonDecimalString should be JsonDecimal. This will fix with #25446", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r478092316", "createdAt": "2020-08-27T04:22:22Z", "author": {"login": "chiranSachintha"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -140,13 +140,31 @@ public function toJson(anydata v) returns json = external;\n public function toJsonString(anydata v) returns string = external;\n \n # Parses a string in JSON format and returns the the value that it represents.\n-# All numbers in the JSON will be represented as float values.\n+# All integer numbers in the JSON will be represented as integer values.\n+# All decimal numbers except -0.0 in the JSON will be represent as decimal values.\n+# -0.0 in the JSON will be represent as float value.\n # Returns an error if the string cannot be parsed.\n #\n # + str - string representation of json\n # + return - `str` parsed to json or error\n public function fromJsonString(string str) returns json|error = external;\n \n+# Parses a string in JSON format and returns the value that it represents.\n+# All numbers in the JSON will be represented as float values.\n+# Returns an error if the string cannot be parsed.\n+#\n+# + str - string representation of json\n+# + return - `str` parsed to json or error\n+public function fromJsonFloatString(string str) returns json|error = external;\n+\n+# Parses a string in JSON format and returns the value that it represents.\n+# All numbers in the JSON will be represented as decimal values.\n+# Returns an error if the string cannot be parsed.\n+#\n+# + str - string representation of json\n+# + return - `str` parsed to json or error\n+public function fromJsonDecimalString(string str) returns json|error = external;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjI4MjU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-477228254", "createdAt": "2020-08-28T04:11:21Z", "commit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNTE3Nzcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-480517773", "createdAt": "2020-09-02T06:28:45Z", "commit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyODo0NVrOHLdxMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo1OToxN1rOHLiOTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDExMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param mode    set the mode which process numeric values\n          \n          \n            \n                 * @param mode    the mode to use when processing numeric values", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r481784113", "createdAt": "2020-09-02T06:28:45Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -93,6 +101,18 @@ public static Object parse(String jsonStr) throws BallerinaException {\n         return parse(new StringReader(jsonStr));\n     }\n \n+    /**\n+     * Parses the contents in the given string and returns a json.\n+     *\n+     * @param jsonStr the string which contains the JSON content\n+     * @param mode    set the mode which process numeric values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NDM5OA==", "bodyText": "Shall we say\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return JSON structure\n          \n          \n            \n                 * @return JSON value if parsing is successful", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r481784398", "createdAt": "2020-09-02T06:29:08Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -93,6 +101,18 @@ public static Object parse(String jsonStr) throws BallerinaException {\n         return parse(new StringReader(jsonStr));\n     }\n \n+    /**\n+     * Parses the contents in the given string and returns a json.\n+     *\n+     * @param jsonStr the string which contains the JSON content\n+     * @param mode    set the mode which process numeric values\n+     * @return JSON structure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NTk2Ng==", "bodyText": "This method seems to duplicate the logic in org.ballerinalang.jvm.JSONParser#parse(java.io.Reader). Shall we call this method from that by passing the default mode as the second arg?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r481785966", "createdAt": "2020-09-02T06:31:16Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -118,6 +138,26 @@ public static Object parse(Reader reader) throws BallerinaException {\n         }\n     }\n \n+    /**\n+     * Parses the contents in the given {@link Reader} and returns a json.\n+     *\n+     * @param reader reader which contains the JSON content\n+     * @param mode   set the mode which process numeric values\n+     * @return JSON structure\n+     * @throws BallerinaException for any parsing error\n+     */\n+    public static Object parse(Reader reader, NonStringValueProcessingMode mode) throws BallerinaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg1MzMyNw==", "bodyText": "Would this static variable approach work with concurrent invocations of functions that use the JSON parser? We seem to be updating this via instance methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r481853327", "createdAt": "2020-09-02T07:55:05Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -181,6 +221,7 @@ public JsonParserException(String msg) {\n                 new StringFieldUnicodeHexProcessingState();\n         private static final State STRING_VALUE_UNICODE_HEX_PROCESSING_STATE =\n                 new StringValueUnicodeHexProcessingState();\n+        private static NonStringValueProcessingMode mode = NonStringValueProcessingMode.FROM_JSON_STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg1NTgyNQ==", "bodyText": "Since we only use this in conjunction with ch == '-', IMO, we can change this method to something like isNegativeZero, and bring the ch == '-' check also into this method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r481855825", "createdAt": "2020-09-02T07:57:51Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -896,6 +939,27 @@ private void processNonStringValue(ValueType type) throws JsonParserException {\n             }\n         }\n \n+        private void setValueToJsonType(ValueType type, Object value) {\n+            switch (type) {\n+                case ARRAY_ELEMENT:\n+                    ((ArrayValue) this.currentJsonNode).append(value);\n+                    break;\n+                case FIELD:\n+                    ((MapValueImpl<BString, Object>) this.currentJsonNode).put(\n+                            StringUtils.fromString(this.fieldNames.pop()), value);\n+                    break;\n+                case VALUE:\n+                    currentJsonNode = value;\n+                    break;\n+                default:\n+                    break;\n+            }\n+        }\n+\n+        private boolean isZero(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg1NzEwMg==", "bodyText": "Do we need a separate variable for this? If we do, IMO, it has to be final.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r481857102", "createdAt": "2020-09-02T07:59:17Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/FromJsonDecimalString.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Parse a string in JSON format and return the the value that it represents.\n+ * All numbers in the JSON will be represented as decimal values.\n+ */\n+\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n+        functionName = \"fromJsonDecimalString\",\n+        args = {@Argument(name = \"str\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.JSON), @ReturnType(type = TypeKind.ERROR)},\n+        isPublic = true\n+)\n+\n+public class FromJsonDecimalString {\n+\n+    public static Object fromJsonDecimalString(Strand strand, BString value) {\n+\n+        JSONParser.NonStringValueProcessingMode mode = JSONParser.NonStringValueProcessingMode.FROM_JSON_DECIMAL_STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2354669bc22a5b40e53a480b309c7f100b85ff15"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d9b2b7f62c6c16d78ccfa22790c8115c831904b", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d9b2b7f62c6c16d78ccfa22790c8115c831904b", "committedDate": "2020-09-07T05:45:22Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69307e47af6918b273067e8c33247a51917fb8cc", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/69307e47af6918b273067e8c33247a51917fb8cc", "committedDate": "2020-09-07T06:26:27Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-25341\n\n\u0001 Conflicts:\n\u0001\tstdlib/database/sql/src/main/java/org/ballerinalang/sql/utils/RecordIteratorUtils.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTA3NTA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-484907506", "createdAt": "2020-09-09T11:21:55Z", "commit": {"oid": "69307e47af6918b273067e8c33247a51917fb8cc"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToyMTo1NlrOHPCrBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo0Mzo1NlrOHPDXLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNDQ2OA==", "bodyText": "Shall we document these fields since these modes aren't quite intuitive when it comes to the JSONParser?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r485534468", "createdAt": "2020-09-09T11:21:56Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -53,6 +54,13 @@ public StateMachine initialValue() {\n         }\n     };\n \n+    /**\n+     * Represents the modes which process numeric values.\n+     */\n+    public enum NonStringValueProcessingMode {\n+        FROM_JSON_STRING, FROM_JSON_FLOAT_STRING, FROM_JSON_DECIMAL_STRING", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69307e47af6918b273067e8c33247a51917fb8cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzOTE0Ng==", "bodyText": "Still not sure if we can set the mode directly to the state machine even though it is a thread local variable since we can have a scenario with multiple workers on the same thread?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r485539146", "createdAt": "2020-09-09T11:31:27Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -107,8 +128,9 @@ private static Object changeForBString(Object jsonObj) {\n      * @return JSON structure\n      * @throws BallerinaException for any parsing error\n      */\n-    public static Object parse(Reader reader) throws BallerinaException {\n+    public static Object parse(Reader reader, NonStringValueProcessingMode mode) throws BallerinaException {\n         StateMachine sm = tlStateMachine.get();\n+        sm.mode = mode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69307e47af6918b273067e8c33247a51917fb8cc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzOTYzMA==", "bodyText": "Is this used?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r485539630", "createdAt": "2020-09-09T11:32:21Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -806,20 +830,21 @@ public State transition(StateMachine sm, char[] buff, int i, int count) throws J\n         private void processNonStringValue(ValueType type) throws JsonParserException {\n             String str = value();\n             if (str.indexOf('.') >= 0) {\n+                char ch = str.charAt(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69307e47af6918b273067e8c33247a51917fb8cc"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MzE1OA==", "bodyText": "Can't we make this the default case and remove the one below?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r485543158", "createdAt": "2020-09-09T11:38:54Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -896,6 +921,27 @@ private void processNonStringValue(ValueType type) throws JsonParserException {\n             }\n         }\n \n+        private void setValueToJsonType(ValueType type, Object value) {\n+            switch (type) {\n+                case ARRAY_ELEMENT:\n+                    ((ArrayValue) this.currentJsonNode).append(value);\n+                    break;\n+                case FIELD:\n+                    ((MapValueImpl<BString, Object>) this.currentJsonNode).put(\n+                            StringUtils.fromString(this.fieldNames.pop()), value);\n+                    break;\n+                case VALUE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69307e47af6918b273067e8c33247a51917fb8cc"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NTc3Mg==", "bodyText": "The prefix we use usually indicates the langlib module the error originates from, so in this case it has to be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return BallerinaErrors.createError(\"{ballerina}FromJsonDecimalStringError\", e.getMessage());\n          \n          \n            \n                        return BallerinaErrors.createError(\"{ballerina/lang.value}FromJsonDecimalStringError\", e.getMessage());\n          \n      \n    \n    \n  \n\nfromJsonString also seems to have just {ballerina}.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r485545772", "createdAt": "2020-09-09T11:43:56Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/FromJsonDecimalString.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Parse a string in JSON format and return the the value that it represents.\n+ * All numbers in the JSON will be represented as decimal values.\n+ */\n+\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n+        functionName = \"fromJsonDecimalString\",\n+        args = {@Argument(name = \"str\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.JSON), @ReturnType(type = TypeKind.ERROR)},\n+        isPublic = true\n+)\n+\n+public class FromJsonDecimalString {\n+\n+    public static Object fromJsonDecimalString(Strand strand, BString value) {\n+\n+        String str = value.getValue();\n+        if (str.equals(\"null\")) {\n+            return null;\n+        }\n+        try {\n+            return JSONParser.parse(str, JSONParser.NonStringValueProcessingMode.FROM_JSON_DECIMAL_STRING);\n+        } catch (BallerinaException e) {\n+            return BallerinaErrors.createError(\"{ballerina}FromJsonDecimalStringError\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69307e47af6918b273067e8c33247a51917fb8cc"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3467730b4ee01d91493e19f9c98c3df54fccbca", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3467730b4ee01d91493e19f9c98c3df54fccbca", "committedDate": "2020-09-14T05:11:15Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a22c00344ee1dc34b462f7560c1c91f0fba0e92", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a22c00344ee1dc34b462f7560c1c91f0fba0e92", "committedDate": "2020-09-15T08:48:13Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-25341"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33a2d5e0319784f974865b67ae9e4ca8760d910f", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33a2d5e0319784f974865b67ae9e4ca8760d910f", "committedDate": "2020-09-15T09:05:50Z", "message": "fix failing lang server tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NzgxNzM3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-488781737", "createdAt": "2020-09-15T15:03:59Z", "commit": {"oid": "33a2d5e0319784f974865b67ae9e4ca8760d910f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTowNDowMFrOHSGaBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0MjoyNFrOHSIKCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0MTM4MQ==", "bodyText": "We can document this at field level.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Represents the modes which process numeric values.\n          \n          \n            \n                 * FROM_JSON_STRING convert numeric values that starts with minus(-) and numerically equal zero(0) to -0.0f, numeric\n          \n          \n            \n                 * values that is syntactically an integer to int and all other numeric values to decimal while converting a string\n          \n          \n            \n                 * to JSON\n          \n          \n            \n                 * FROM_JSON_FLOAT_STRING convert all numerical values to float while converting a string to JSON\n          \n          \n            \n                 * FROM_JSON_DECIMAL_STRING convert all numerical values to decimal while converting a string to JSON\n          \n          \n            \n                 */\n          \n          \n            \n                public enum NonStringValueProcessingMode {\n          \n          \n            \n                    FROM_JSON_STRING, FROM_JSON_FLOAT_STRING, FROM_JSON_DECIMAL_STRING\n          \n          \n            \n                }\n          \n          \n            \n                /**\n          \n          \n            \n                 * Represents the modes which process numeric values while converting a string to JSON.\n          \n          \n            \n                 */\n          \n          \n            \n                public enum NonStringValueProcessingMode {\n          \n          \n            \n                    /**\n          \n          \n            \n                     * FROM_JSON_STRING converts a numeric value that\n          \n          \n            \n                     * - starts with the negative sign (-) and is numerically equal to zero (0) to `-0.0f`\n          \n          \n            \n                     * - is syntactically an integer to an `int`\n          \n          \n            \n                     * - doesn't belong to the above to decimal.\n          \n          \n            \n                     */\n          \n          \n            \n                    FROM_JSON_STRING,\n          \n          \n            \n            \n          \n          \n            \n                    /**\n          \n          \n            \n                     * FROM_JSON_FLOAT_STRING converts all numerical values to float.\n          \n          \n            \n                     */\n          \n          \n            \n                    FROM_JSON_FLOAT_STRING,\n          \n          \n            \n            \n          \n          \n            \n                    /**\n          \n          \n            \n                     * FROM_JSON_DECIMAL_STRING converts all numerical values to decimal.\n          \n          \n            \n                     */\n          \n          \n            \n                    FROM_JSON_DECIMAL_STRING\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nSuggested a few changes to the documentation itself too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r488741381", "createdAt": "2020-09-15T15:04:00Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -53,6 +54,18 @@ public StateMachine initialValue() {\n         }\n     };\n \n+    /**\n+     * Represents the modes which process numeric values.\n+     * FROM_JSON_STRING convert numeric values that starts with minus(-) and numerically equal zero(0) to -0.0f, numeric\n+     * values that is syntactically an integer to int and all other numeric values to decimal while converting a string\n+     * to JSON\n+     * FROM_JSON_FLOAT_STRING convert all numerical values to float while converting a string to JSON\n+     * FROM_JSON_DECIMAL_STRING convert all numerical values to decimal while converting a string to JSON\n+     */\n+    public enum NonStringValueProcessingMode {\n+        FROM_JSON_STRING, FROM_JSON_FLOAT_STRING, FROM_JSON_DECIMAL_STRING\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33a2d5e0319784f974865b67ae9e4ca8760d910f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0OTM5Ng==", "bodyText": "If this PR gets merged after merging the isolated function change, we need to mark these functions as isolated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r488749396", "createdAt": "2020-09-15T15:14:31Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -140,13 +140,31 @@ public function toJson(anydata v) returns json = external;\n public function toJsonString(anydata v) returns string = external;\n \n # Parses a string in JSON format and returns the the value that it represents.\n-# All numbers in the JSON will be represented as float values.\n+# All integer numbers in the JSON will be represented as integer values.\n+# All decimal numbers except -0.0 in the JSON will be represent as decimal values.\n+# -0.0 in the JSON will be represent as float value.\n # Returns an error if the string cannot be parsed.\n #\n # + str - string representation of json\n # + return - `str` parsed to json or error\n public function fromJsonString(string str) returns json|error = external;\n \n+# Parses a string in JSON format and returns the value that it represents.\n+# All numbers in the JSON will be represented as float values.\n+# Returns an error if the string cannot be parsed.\n+#\n+# + str - string representation of json\n+# + return - `str` parsed to json or error\n+public function fromJsonFloatString(string str) returns json|error = external;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33a2d5e0319784f974865b67ae9e4ca8760d910f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MDA1OA==", "bodyText": "Yeah, we'll have to verify this and introduce changes if required.\nI guess we can go ahead with Chiran's changes for the time-being if this is an issue in general, but let's verify first.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#discussion_r488770058", "createdAt": "2020-09-15T15:42:24Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONParser.java", "diffHunk": "@@ -107,8 +128,9 @@ private static Object changeForBString(Object jsonObj) {\n      * @return JSON structure\n      * @throws BallerinaException for any parsing error\n      */\n-    public static Object parse(Reader reader) throws BallerinaException {\n+    public static Object parse(Reader reader, NonStringValueProcessingMode mode) throws BallerinaException {\n         StateMachine sm = tlStateMachine.get();\n+        sm.mode = mode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzOTE0Ng=="}, "originalCommit": {"oid": "69307e47af6918b273067e8c33247a51917fb8cc"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzA2ODI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25378#pullrequestreview-489306828", "createdAt": "2020-09-16T06:21:36Z", "commit": {"oid": "33a2d5e0319784f974865b67ae9e4ca8760d910f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4911, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}