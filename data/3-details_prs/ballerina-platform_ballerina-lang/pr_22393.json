{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODg1Nzcw", "number": 22393, "title": "Add subtyping feature and improvements to the Ballerina bindgen tool", "bodyText": "Purpose\nThis PR consists of the following improvements and issue fixes to the Ballerina bindgen tool.\nImprovements:\n\nProvide support for Java subtyping.\nAn improvement to the folder structure of the generated bindings.\nImprovements to error messages and information provided to the user.\n\nFixes:\n\nFixes an issue in the generation of child classes.\nFixes an issue that occurs while reading constants file when re-running the tool.\nFixes some issues related to type mappings.\n\nFixes #22089\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-01T09:52:12Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393", "merged": true, "mergeCommit": {"oid": "3b78e7ce733c574ee6a82d8035d18c61ed60beec"}, "closed": true, "closedAt": "2020-04-02T02:05:04Z", "author": {"login": "IrushiL"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTVmDkgFqTM4NTQ3NTM0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTiiVVgFqTM4NjA2Mzk4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDc1MzQ0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393#pullrequestreview-385475344", "createdAt": "2020-04-01T10:56:06Z", "commit": {"oid": "54f9a85d0c3ba8fb7b1a2d1fbf7925b59c3cfcb2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1NjowNlrOF-7XSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1ODo1OFrOF-7c8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyODY0OA==", "bodyText": "If you use temp variable to hold the outputPath var and set its values to userDir if null, then we get remove duplicate codes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393#discussion_r401528648", "createdAt": "2020-04-01T10:56:06Z", "author": {"login": "warunalakshitha"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/command/BindingsGenerator.java", "diffHunk": "@@ -56,90 +58,121 @@\n  */\n public class BindingsGenerator {\n \n-    private String outputPath;\n     private Path modulePath;\n     private Path dependenciesPath;\n+    private Path utilsDirPath;\n+    private String outputPath;\n     private Set<String> classPaths = new HashSet<>();\n     private Set<String> classNames = new HashSet<>();\n+    private static boolean directJavaClass = true;\n     private static final PrintStream errStream = System.err;\n     private static final PrintStream outStream = System.out;\n     private static Path userDir = Paths.get(System.getProperty(USER_DIR));\n \n-    public static boolean directJavaClass = true;\n-    public static Set<String> allClasses = new HashSet<>();\n-    public static Set<String> classListForLooping = new HashSet<>();\n-    public static Set<String> allJavaClasses = new HashSet<>();\n-    public static Set<String> failedClassGens = new HashSet<>();\n+    private static Set<String> allClasses = new HashSet<>();\n+    private static Set<String> classListForLooping = new HashSet<>();\n+    private static Set<String> allJavaClasses = new HashSet<>();\n+    private static Map<String, String> failedClassGens = new HashMap<>();\n \n     void generateJavaBindings() throws BindgenException {\n \n-        ClassLoader classLoader;\n-        try {\n-            if (!this.classPaths.isEmpty()) {\n-                classLoader = getClassLoader(this.classPaths, this.getClass().getClassLoader());\n-            } else {\n-                classLoader = this.getClass().getClassLoader();\n-            }\n-        } catch (BindgenException e) {\n-            throw new BindgenException(\"Error while loading the classpaths.\", e);\n-        }\n+        ClassLoader classLoader = setClassLoader();\n         if (classLoader != null) {\n-            if (this.outputPath == null) {\n-                this.modulePath = Paths.get(userDir.toString(), BALLERINA_BINDINGS_DIR);\n-                this.dependenciesPath = Paths.get(userDir.toString(), BALLERINA_BINDINGS_DIR, DEPENDENCIES_DIR_NAME);\n-            } else {\n-                this.modulePath = Paths.get(outputPath, BALLERINA_BINDINGS_DIR);\n-                this.dependenciesPath = Paths.get(outputPath, BALLERINA_BINDINGS_DIR, DEPENDENCIES_DIR_NAME);\n-            }\n-            outStream.println(\"Generating bindings for: \");\n-            String modulePathString = modulePath.toString();\n-            String utilsDirPath = Paths.get(modulePathString, DEPENDENCIES_DIR_NAME, UTILS_DIR).toString();\n+            setDirectoryPaths();\n+\n+            // Generate bindings for directly specified Java classes.\n+            outStream.println(\"\\nGenerating bindings for: \");\n             generateBindings(classNames, classLoader, modulePath);\n \n+            // Generate bindings for dependent Java classes.\n             if (!classListForLooping.isEmpty()) {\n                 outStream.println(\"\\nGenerating dependency bindings for: \");\n+                setDependentJavaClass();\n             }\n-            createDirectory(dependenciesPath.toString());\n-            directJavaClass = false;\n             while (!classListForLooping.isEmpty()) {\n                 Set<String> newSet = new HashSet<>(classListForLooping);\n                 newSet.removeAll(classNames);\n+                List<String> existingBindings = getExistingBindings(newSet, modulePath.toFile());\n+                newSet.removeAll(existingBindings);\n                 allJavaClasses.addAll(newSet);\n                 classListForLooping.clear();\n                 generateBindings(newSet, classLoader, dependenciesPath);\n             }\n-            createDirectory(utilsDirPath);\n-            writeOutputFile(null, DEFAULT_TEMPLATE_DIR, JOBJECT_TEMPLATE_NAME,\n-                    Paths.get(utilsDirPath, JOBJECT_FILE_NAME).toString(), false);\n-            writeOutputFile(null, DEFAULT_TEMPLATE_DIR, ARRAY_UTILS_TEMPLATE_NAME,\n-                    Paths.get(utilsDirPath, ARRAY_UTILS_FILE_NAME).toString(), false);\n-\n-            Path constantsPath = Paths.get(utilsDirPath, CONSTANTS_FILE_NAME);\n-            Set<String> names = new HashSet<>(allClasses);\n-            if (constantsPath.toFile().exists()) {\n-                getUpdatedConstantsList(constantsPath, names);\n-                notifyExistingDependencies(classNames, dependenciesPath.toFile());\n-            }\n-            writeOutputFile(names, DEFAULT_TEMPLATE_DIR, CONSTANTS_TEMPLATE_NAME, constantsPath.toString(), true);\n \n+            // Generate the required util files.\n+            generateUtilFiles();\n+\n+            // Handle failed binding generations.\n             if (failedClassGens != null) {\n-                errStream.print(\"\\n\");\n-                for (String className : failedClassGens) {\n-                    if (classNames.contains(className)) {\n-                        errStream.println(\"Bindings for '\" + className + \"' class could not be generated.\");\n-                    }\n-                    String simpleClassName = className.substring(className.lastIndexOf('.') + 1);\n-                    writeOutputFile(className, DEFAULT_TEMPLATE_DIR, EMPTY_OBJECT_TEMPLATE_NAME,\n-                            Paths.get(modulePathString, DEPENDENCIES_DIR_NAME,\n-                                    simpleClassName + BAL_EXTENSION).toString(), false);\n-                }\n+                handleFailedClassGens();\n             }\n-            if (classLoader instanceof URLClassLoader) {\n-                try {\n-                    ((URLClassLoader) classLoader).close();\n-                } catch (IOException ignored) {\n-                }\n+        }\n+    }\n+\n+    private ClassLoader setClassLoader() throws BindgenException {\n+\n+        ClassLoader classLoader;\n+        try {\n+            if (!this.classPaths.isEmpty()) {\n+                classLoader = getClassLoader(this.classPaths, this.getClass().getClassLoader());\n+            } else {\n+                outStream.println(\"No classpaths were detected.\");\n+                classLoader = this.getClass().getClassLoader();\n+            }\n+        } catch (BindgenException e) {\n+            throw new BindgenException(\"Error while loading the classpaths.\", e);\n+        }\n+        return classLoader;\n+    }\n+\n+    private void setDirectoryPaths() {\n+\n+        if (outputPath == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f9a85d0c3ba8fb7b1a2d1fbf7925b59c3cfcb2"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMDA5Ng==", "bodyText": "extra new line. You also can remove the extra new lines after each method signature as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393#discussion_r401530096", "createdAt": "2020-04-01T10:58:58Z", "author": {"login": "warunalakshitha"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JParameter.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.bindgen.model;\n+\n+import java.lang.reflect.Parameter;\n+\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.getAllJavaClasses;\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.setClassListForLooping;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING_ARRAY;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaHandleType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaParamType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getPrimitiveArrayType;\n+\n+/**\n+ * Class for storing specific parameter details of a Java method used for Ballerina bridge code generation.\n+ */\n+public class JParameter {\n+\n+    private String type;\n+    private String externalType;\n+    private String shortTypeName;\n+    private String componentType;\n+    private String fieldName;\n+\n+    private Boolean isObj = false;\n+    private Boolean hasNext = true;\n+    private Boolean isString = false;\n+    private Boolean isObjArray = false;\n+    private Boolean isPrimitiveArray = false;\n+\n+    JParameter(Class parameterClass) {\n+\n+        type = parameterClass.getName();\n+        shortTypeName = getBallerinaParamType(parameterClass);\n+\n+        if (!parameterClass.isPrimitive()) {\n+            isObj = true;\n+        }\n+        if (parameterClass.equals(String.class)) {\n+            isString = true;\n+            shortTypeName = BALLERINA_STRING;\n+        } else if (parameterClass.equals(String[].class)) {\n+            isString = true;\n+            shortTypeName = BALLERINA_STRING_ARRAY;\n+        } else {\n+            if (!parameterClass.isPrimitive()) {\n+                if (parameterClass.isArray()) {\n+                    setArrayAttributes(parameterClass);\n+                } else {\n+                    String paramType = parameterClass.getName();\n+                    if (!getAllJavaClasses().contains(paramType)) {\n+                        setClassListForLooping(paramType);\n+                    }\n+                }\n+            }\n+        }\n+        externalType = getBallerinaHandleType(parameterClass);\n+        fieldName = \"arg\";\n+    }\n+\n+    JParameter(Parameter parameter) {\n+\n+        this(parameter.getType());\n+        fieldName = parameter.getName();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f9a85d0c3ba8fb7b1a2d1fbf7925b59c3cfcb2"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTY2MTM4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393#pullrequestreview-385566138", "createdAt": "2020-04-01T13:08:18Z", "commit": {"oid": "1181d3ebce92962695a6ab741b99891926e1fcd3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "603d5d9a72c56499f795d8143a7bf3c8a2f27bc2", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/603d5d9a72c56499f795d8143a7bf3c8a2f27bc2", "committedDate": "2020-04-01T19:38:06Z", "message": "Fix the issue with loading inner classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a98f0977f02a9c7fc5f1f2d34ed5a02c8179772", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a98f0977f02a9c7fc5f1f2d34ed5a02c8179772", "committedDate": "2020-04-01T19:38:06Z", "message": "Fix the issue with reading the constants file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "991377666cc187d132467c112495ea6714e6df24", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/991377666cc187d132467c112495ea6714e6df24", "committedDate": "2020-04-01T19:38:06Z", "message": "Improve the file structure of generated bindings and error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c960b466efd2bace1024db50803d193e5dae79f", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c960b466efd2bace1024db50803d193e5dae79f", "committedDate": "2020-04-01T19:38:06Z", "message": "Add support for Java subtyping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7fa641d9ca8ce5f8fdce5a67e03717d2afc8454", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7fa641d9ca8ce5f8fdce5a67e03717d2afc8454", "committedDate": "2020-04-01T19:38:06Z", "message": "Refactor the template logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce5f43f601ce44baaed1a4fea51eb4da442a6562", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce5f43f601ce44baaed1a4fea51eb4da442a6562", "committedDate": "2020-04-01T19:38:06Z", "message": "Add object tags for all implemented interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b40a7df7d342d7afaa8e842282f00d0c75f77aa", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b40a7df7d342d7afaa8e842282f00d0c75f77aa", "committedDate": "2020-04-01T19:38:06Z", "message": "Fix the issue with getting string array from handle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "032ed3c243864db0d5102d5ea4b25aa6226854fa", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/032ed3c243864db0d5102d5ea4b25aa6226854fa", "committedDate": "2020-04-01T19:38:06Z", "message": "Fix issues related to type mappings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8e038425450889b2a56f13a52cf9efddd3f8947", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d8e038425450889b2a56f13a52cf9efddd3f8947", "committedDate": "2020-04-01T19:38:06Z", "message": "Refactor the code and template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d69f8eac2e2c73aca560e9f8b36a9f010461da79", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d69f8eac2e2c73aca560e9f8b36a9f010461da79", "committedDate": "2020-04-01T19:38:06Z", "message": "Fix a compilation issue in the generated template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c63857c0e6c32ea060535bda2cc32aac0ac64c9", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c63857c0e6c32ea060535bda2cc32aac0ac64c9", "committedDate": "2020-04-01T19:38:07Z", "message": "Improve and refactor the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7b38de17b8f0e8bad924e3ab8be91e22f53109a", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7b38de17b8f0e8bad924e3ab8be91e22f53109a", "committedDate": "2020-04-01T19:38:07Z", "message": "Add review changes to the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66fe8a005562ea15a65a81decd3301b1ba19558c", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66fe8a005562ea15a65a81decd3301b1ba19558c", "committedDate": "2020-04-01T19:38:07Z", "message": "Add the since annotation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d262e6bf1604f0988532292df5d4cca957923c6", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d262e6bf1604f0988532292df5d4cca957923c6", "committedDate": "2020-04-01T13:30:32Z", "message": "Add the since annotation"}, "afterCommit": {"oid": "66fe8a005562ea15a65a81decd3301b1ba19558c", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66fe8a005562ea15a65a81decd3301b1ba19558c", "committedDate": "2020-04-01T19:38:07Z", "message": "Add the since annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDYzOTgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393#pullrequestreview-386063983", "createdAt": "2020-04-02T02:04:55Z", "commit": {"oid": "66fe8a005562ea15a65a81decd3301b1ba19558c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4133, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}