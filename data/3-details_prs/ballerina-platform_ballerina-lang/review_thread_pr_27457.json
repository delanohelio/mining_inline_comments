{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NzI2MzA5", "number": 27457, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTozNToxOFrOFD8eKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo0NToyMFrOFD8ssQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjgwODExOnYy", "diffSide": "RIGHT", "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/utils/LangLibUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTozNToxOFrOID0-ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1MjowM1rOID1hoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NDY2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String LANG_VALUE = \"value\";\n          \n          \n            \n                private static final String LANG_VALUE = \"value\";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540884666", "createdAt": "2020-12-11T11:35:18Z", "author": {"login": "praveennadarajah"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/utils/LangLibUtils.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerinalang.debugadapter.evaluation.utils;\n+\n+import org.ballerinalang.debugadapter.SuspendedContext;\n+import org.ballerinalang.debugadapter.evaluation.BExpressionValue;\n+import org.ballerinalang.debugadapter.evaluation.EvaluationException;\n+import org.ballerinalang.debugadapter.evaluation.EvaluationExceptionKind;\n+import org.ballerinalang.debugadapter.evaluation.engine.GeneratedStaticMethod;\n+import org.ballerinalang.debugadapter.variable.BVariableType;\n+\n+import java.util.StringJoiner;\n+\n+import static io.ballerina.runtime.internal.IdentifierUtils.encodeIdentifier;\n+import static io.ballerina.runtime.internal.IdentifierUtils.encodeNonFunctionIdentifier;\n+import static org.ballerinalang.debugadapter.evaluation.utils.EvaluationUtils.getGeneratedMethod;\n+import static org.ballerinalang.debugadapter.variable.BVariableType.ARRAY;\n+import static org.ballerinalang.debugadapter.variable.BVariableType.INT;\n+import static org.ballerinalang.debugadapter.variable.BVariableType.MAP;\n+\n+/**\n+ * Ballerina lang libraries related utils.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LangLibUtils {\n+\n+    public static final String LANG_LIB_ORG = \"ballerina\";\n+    public static final String LANG_LIB_PACKAGE_PREFIX = \"lang.\";\n+    public static final String LANG_VALUE = \"value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec8d381b3c4b88e18b59a7cfb5a5ab430895547"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MzYwMA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540893600", "createdAt": "2020-12-11T11:52:03Z", "author": {"login": "NipunaRanasinghe"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/utils/LangLibUtils.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerinalang.debugadapter.evaluation.utils;\n+\n+import org.ballerinalang.debugadapter.SuspendedContext;\n+import org.ballerinalang.debugadapter.evaluation.BExpressionValue;\n+import org.ballerinalang.debugadapter.evaluation.EvaluationException;\n+import org.ballerinalang.debugadapter.evaluation.EvaluationExceptionKind;\n+import org.ballerinalang.debugadapter.evaluation.engine.GeneratedStaticMethod;\n+import org.ballerinalang.debugadapter.variable.BVariableType;\n+\n+import java.util.StringJoiner;\n+\n+import static io.ballerina.runtime.internal.IdentifierUtils.encodeIdentifier;\n+import static io.ballerina.runtime.internal.IdentifierUtils.encodeNonFunctionIdentifier;\n+import static org.ballerinalang.debugadapter.evaluation.utils.EvaluationUtils.getGeneratedMethod;\n+import static org.ballerinalang.debugadapter.variable.BVariableType.ARRAY;\n+import static org.ballerinalang.debugadapter.variable.BVariableType.INT;\n+import static org.ballerinalang.debugadapter.variable.BVariableType.MAP;\n+\n+/**\n+ * Ballerina lang libraries related utils.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LangLibUtils {\n+\n+    public static final String LANG_LIB_ORG = \"ballerina\";\n+    public static final String LANG_LIB_PACKAGE_PREFIX = \"lang.\";\n+    public static final String LANG_VALUE = \"value\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NDY2Ng=="}, "originalCommit": {"oid": "cec8d381b3c4b88e18b59a7cfb5a5ab430895547"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Njg0NTI5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/DebugTestRunner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo0NToyMFrOID1Txg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjowMTozMVrOID11pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDA1NA==", "bodyText": "Why do we need to introduce AssertionMode? Why do we need soft assert here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540890054", "createdAt": "2020-12-11T11:45:20Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/DebugTestRunner.java", "diffHunk": "@@ -575,4 +626,12 @@ public static void destroy() {\n     public BalServer getBalServer() {\n         return balServer;\n     }\n+\n+    /**\n+     * Debugger test framework supports both modes (hard assertions and soft assertions).\n+    */\n+    public enum AssertionMode {\n+        HARD_ASSERT,\n+        SOFT_ASSERT,\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cec8d381b3c4b88e18b59a7cfb5a5ab430895547"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NTY5Mg==", "bodyText": "@praveennadarajah Yes please refer 23fdb18. Added this soft assertion mode to see all the assertion failures at once, instead of immediately failing on a single assertion error. (This mode is useful specially when fixing test failures). Anyway the tests are running in hard assertion mode by default.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540895692", "createdAt": "2020-12-11T11:55:49Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/DebugTestRunner.java", "diffHunk": "@@ -575,4 +626,12 @@ public static void destroy() {\n     public BalServer getBalServer() {\n         return balServer;\n     }\n+\n+    /**\n+     * Debugger test framework supports both modes (hard assertions and soft assertions).\n+    */\n+    public enum AssertionMode {\n+        HARD_ASSERT,\n+        SOFT_ASSERT,\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDA1NA=="}, "originalCommit": {"oid": "cec8d381b3c4b88e18b59a7cfb5a5ab430895547"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5ODcyNw==", "bodyText": "+1 for having soft assert.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27457#discussion_r540898727", "createdAt": "2020-12-11T12:01:31Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/DebugTestRunner.java", "diffHunk": "@@ -575,4 +626,12 @@ public static void destroy() {\n     public BalServer getBalServer() {\n         return balServer;\n     }\n+\n+    /**\n+     * Debugger test framework supports both modes (hard assertions and soft assertions).\n+    */\n+    public enum AssertionMode {\n+        HARD_ASSERT,\n+        SOFT_ASSERT,\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDA1NA=="}, "originalCommit": {"oid": "cec8d381b3c4b88e18b59a7cfb5a5ab430895547"}, "originalPosition": 177}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2929, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}