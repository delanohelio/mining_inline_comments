{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwMTM3NjQ1", "number": 23773, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowOTo0MlrOEDUuVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowOTo0MlrOEDUuVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTIwNzI2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowOTo0MlrOGgRkCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTowNDo1MlrOGgY-Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NTM3MA==", "bodyText": "shall we check the tag instead ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23773#discussion_r436495370", "createdAt": "2020-06-08T07:09:42Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1464,12 +1472,26 @@ private void populateArgsInvocation(NewExpressionNode expression, BLangInvocatio\n     }\n \n     @Override\n-    public BLangIndexBasedAccess transform(IndexedExpressionNode indexedExpressionNode) {\n+    public BLangNode transform(IndexedExpressionNode indexedExpressionNode) {\n         BLangIndexBasedAccess indexBasedAccess = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n         indexBasedAccess.pos = getPosition(indexedExpressionNode);\n         // TODO : Add BLangTableMultiKeyExpr for indexExpr if it is available\n         indexBasedAccess.indexExpr = createExpression(indexedExpressionNode.keyExpression().get(0));\n-        indexBasedAccess.expr = createExpression(indexedExpressionNode.containerExpression());\n+\n+        BLangExpression expression = createExpression(indexedExpressionNode.containerExpression());\n+        if (expression instanceof BLangGroupExpr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87865c6292136d61f3ccafb6551898aefb4962a9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxNjczNA==", "bodyText": "+1, changes this to check the kind", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23773#discussion_r436616734", "createdAt": "2020-06-08T11:04:52Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1464,12 +1472,26 @@ private void populateArgsInvocation(NewExpressionNode expression, BLangInvocatio\n     }\n \n     @Override\n-    public BLangIndexBasedAccess transform(IndexedExpressionNode indexedExpressionNode) {\n+    public BLangNode transform(IndexedExpressionNode indexedExpressionNode) {\n         BLangIndexBasedAccess indexBasedAccess = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n         indexBasedAccess.pos = getPosition(indexedExpressionNode);\n         // TODO : Add BLangTableMultiKeyExpr for indexExpr if it is available\n         indexBasedAccess.indexExpr = createExpression(indexedExpressionNode.keyExpression().get(0));\n-        indexBasedAccess.expr = createExpression(indexedExpressionNode.containerExpression());\n+\n+        BLangExpression expression = createExpression(indexedExpressionNode.containerExpression());\n+        if (expression instanceof BLangGroupExpr) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NTM3MA=="}, "originalCommit": {"oid": "87865c6292136d61f3ccafb6551898aefb4962a9"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3465, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}