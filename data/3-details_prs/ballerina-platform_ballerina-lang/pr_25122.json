{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTcwOTQ2", "number": 25122, "title": "Change the formatter implementation to use the new parser", "bodyText": "Purpose\nFixes #24602\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-08-04T07:02:27Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122", "merged": true, "mergeCommit": {"oid": "591f1d481994ce53a044a84cd34c19fcf3a7d834"}, "closed": true, "closedAt": "2020-08-12T09:34:15Z", "author": {"login": "IrushiL"}, "timelineItems": {"totalCount": 81, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7i-XDAFqTQ2MDYzNjcyOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-HdFAgFqTQ2NTcxNjYzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjM2NzI5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-460636729", "createdAt": "2020-08-04T09:12:29Z", "commit": {"oid": "1b72faad13b973766a11b0c45bcb8d94015a18b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToxMjoyOVrOG7YBHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToxMjoyOVrOG7YBHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxMjY2OA==", "bodyText": "@IrushiL ; Does this have to be 2020?\nThere were some other classes too", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r464912668", "createdAt": "2020-08-04T09:12:29Z", "author": {"login": "keizer619"}, "path": "misc/formatter/modules/formatter-cli/src/main/java/org/ballerinalang/formatter/cli/FormatCmd.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b72faad13b973766a11b0c45bcb8d94015a18b6"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTg5NjM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-462189634", "createdAt": "2020-08-06T05:04:32Z", "commit": {"oid": "1b72faad13b973766a11b0c45bcb8d94015a18b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTowNDozM1rOG8ja1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTowNDozM1rOG8ja1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0ODA1NQ==", "bodyText": "Why this is commented everywhere?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r466148055", "createdAt": "2020-08-06T05:04:33Z", "author": {"login": "suganyasuven"}, "path": "misc/formatter/modules/formatter-cli/src/test/java/org/ballerinalang/formatter/cli/FormatCmdTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.tool.BLauncherException;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Format CLI tool test suit for testing tool's exceptions.\n+ */\n+public class FormatCmdTest {\n+    private static final Path RES_DIR = Paths.get(\"src/test/resources/\").toAbsolutePath();\n+\n+    @Test(description = \"Test to check the exception for too many argument provided.\")\n+    public void formatCLITooManyArgumentsTest() {\n+        Path sourceRoot = RES_DIR.resolve(\"notAProject\");\n+        List<String> argList = new ArrayList<>();\n+        argList.add(\"pkg2\");\n+        argList.add(\"asd\");\n+        try {\n+//            FormatUtil.execute(argList, false, false, sourceRoot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b72faad13b973766a11b0c45bcb8d94015a18b6"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1207e361152cb0590be8396328d69a7983ff9d4", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e1207e361152cb0590be8396328d69a7983ff9d4", "committedDate": "2020-08-11T07:55:40Z", "message": "Update the license headers"}, "afterCommit": {"oid": "e8d42da874537ec9fb41c669f1741f85cd5311ed", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8d42da874537ec9fb41c669f1741f85cd5311ed", "committedDate": "2020-08-11T08:01:48Z", "message": "Update the license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c016e817e2675ff24f30f9d1d4a4ab625d0db7f4", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c016e817e2675ff24f30f9d1d4a4ab625d0db7f4", "committedDate": "2020-08-11T20:05:07Z", "message": "add initial tree modifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fda7e956166dabaeb2612840f14203337041b8b", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fda7e956166dabaeb2612840f14203337041b8b", "committedDate": "2020-08-11T20:05:07Z", "message": "Initial commit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "406ed59e785b5080a09706bf30e791e24c649f1b", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/406ed59e785b5080a09706bf30e791e24c649f1b", "committedDate": "2020-08-11T20:05:07Z", "message": "add the empty minutiae list from abstract node factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "723d30b67be1337d912cbd11205c4715b41b1265", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/723d30b67be1337d912cbd11205c4715b41b1265", "committedDate": "2020-08-11T20:05:07Z", "message": "Add function arguments formatting support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63983517d05c838a135727123e1f1439f302d9b6", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63983517d05c838a135727123e1f1439f302d9b6", "committedDate": "2020-08-11T20:05:07Z", "message": "Add function visibility qualifier formatting support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5b34b24e15e8605f2cffa68592c5bff546401f9", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5b34b24e15e8605f2cffa68592c5bff546401f9", "committedDate": "2020-08-11T20:05:07Z", "message": "Add function parameter formatting support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55636add217289cb4e48fbbcdf3c14e36f8fca9f", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/55636add217289cb4e48fbbcdf3c14e36f8fca9f", "committedDate": "2020-08-11T20:05:07Z", "message": "Fix function keyword formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4013110d86fdb010c54ecdd17ee270d74224d80d", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4013110d86fdb010c54ecdd17ee270d74224d80d", "committedDate": "2020-08-11T20:05:07Z", "message": "Add import node formatting support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6851d7566cc37bda917b8631cb8ec0e299d1770", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6851d7566cc37bda917b8631cb8ec0e299d1770", "committedDate": "2020-08-11T20:05:07Z", "message": "Fix qualified name reference node formatting issue.\nAdded ParenthesizedArgList formatting support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f299ca4d6e83563fdc13b4be50ed27a5e2b357c", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0f299ca4d6e83563fdc13b4be50ed27a5e2b357c", "committedDate": "2020-08-11T20:05:07Z", "message": "Add variable declaration node."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cda6c93d32208a3627a07aad590d1f289f121b8", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7cda6c93d32208a3627a07aad590d1f289f121b8", "committedDate": "2020-08-11T20:05:08Z", "message": "Fix getToken method call."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d85d3d02203e04870f4a57601b28abf8cf9cb81", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d85d3d02203e04870f4a57601b28abf8cf9cb81", "committedDate": "2020-08-11T20:05:08Z", "message": "Add RemoteMethodCallActionNode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44529cc214e5e90459b0ab4ae5808674b32aa5f", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f44529cc214e5e90459b0ab4ae5808674b32aa5f", "committedDate": "2020-08-11T20:05:08Z", "message": "Add TypedBindingPatternNode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73ff4d2e64a58571789bd9f648d27193a02e0b4d", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73ff4d2e64a58571789bd9f648d27193a02e0b4d", "committedDate": "2020-08-11T20:05:08Z", "message": "Add BindingPatternNodes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b72d2ba4c7eb6f932aa9ee4effc5d8632a4388d4", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b72d2ba4c7eb6f932aa9ee4effc5d8632a4388d4", "committedDate": "2020-08-11T20:05:08Z", "message": "Add simple name reference node."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e1bef97ac6eee63aeb10e24bbc797be9942cc4", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6e1bef97ac6eee63aeb10e24bbc797be9942cc4", "committedDate": "2020-08-11T20:05:08Z", "message": "Fix semicolon newline issue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d253d70a9c0305b4d88814fbcaebd1978edbe811", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d253d70a9c0305b4d88814fbcaebd1978edbe811", "committedDate": "2020-08-11T20:05:08Z", "message": "Add IfElseStatementNode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14a6172658f65858016b02721e6050293dc923d2", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/14a6172658f65858016b02721e6050293dc923d2", "committedDate": "2020-08-11T20:05:08Z", "message": "Add BracedExpressionNode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b900f74a79e977accfcac97b378ceb6503b8dc2", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b900f74a79e977accfcac97b378ceb6503b8dc2", "committedDate": "2020-08-11T20:05:08Z", "message": "Add TypeTestExpressionNode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18650d691ab8a0bcd45f811860f327bb14d2b6f8", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18650d691ab8a0bcd45f811860f327bb14d2b6f8", "committedDate": "2020-08-11T20:05:08Z", "message": "Add ErrorTypeDescriptorNode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31ddee8fc298bbacad9947d58e51aba083fd7ce2", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31ddee8fc298bbacad9947d58e51aba083fd7ce2", "committedDate": "2020-08-11T20:05:08Z", "message": "Add BlockStatementNode."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eff97f8f931d603f0325360498d0ba3f61c479a8", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eff97f8f931d603f0325360498d0ba3f61c479a8", "committedDate": "2020-08-11T20:05:08Z", "message": "Add getParent method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff49295eb285855473fdc344da0a3904169b204", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fff49295eb285855473fdc344da0a3904169b204", "committedDate": "2020-08-11T20:05:08Z", "message": "Fix error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b522465eefb5987072ed22226db5bb2773cf788e", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b522465eefb5987072ed22226db5bb2773cf788e", "committedDate": "2020-08-11T20:05:08Z", "message": "Add module variable declaration node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd573b61ef35418eae9ac432e0e1b371e4b417c6", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd573b61ef35418eae9ac432e0e1b371e4b417c6", "committedDate": "2020-08-11T20:05:08Z", "message": "Add get start column method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69478c0f8c484995aa12e4826703d020d2159d92", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/69478c0f8c484995aa12e4826703d020d2159d92", "committedDate": "2020-08-11T20:05:09Z", "message": "Add new node kind support for formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "418a79ddccc4d1d28128719c940444eb7ec03713", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/418a79ddccc4d1d28128719c940444eb7ec03713", "committedDate": "2020-08-11T20:05:09Z", "message": "Add new nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ee02e576f47ce4bcd3eb6ee4328a5eeb5dc4c8", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7ee02e576f47ce4bcd3eb6ee4328a5eeb5dc4c8", "committedDate": "2020-08-11T20:05:09Z", "message": "Add test files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7d7c0d98b63cd9682c96b00fece7a0c7aac1c71", "author": {"user": {"login": "gigara", "name": "Chamupathi Gigara Hettige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c7d7c0d98b63cd9682c96b00fece7a0c7aac1c71", "committedDate": "2020-08-11T20:05:09Z", "message": "Add new nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79d7825cbfa38c650ea1423a7dfa8c4d0fe24f14", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79d7825cbfa38c650ea1423a7dfa8c4d0fe24f14", "committedDate": "2020-08-11T20:05:09Z", "message": "Add the formatter core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cc9caaf7489c97c369867f48b93295c024b0c5e", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cc9caaf7489c97c369867f48b93295c024b0c5e", "committedDate": "2020-08-11T20:05:09Z", "message": "Add the formatter core APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45b0af4f27336db647feb409a8c6816d29b46092", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/45b0af4f27336db647feb409a8c6816d29b46092", "committedDate": "2020-08-11T20:05:09Z", "message": "Add the formatter core test suite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffa71196c3043441e547dae49ad3d74c22c99114", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ffa71196c3043441e547dae49ad3d74c22c99114", "committedDate": "2020-08-11T20:05:09Z", "message": "Add leading new line to function definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1422fdb1dd426a48732cfc00b5a6d873e0f7f6", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa1422fdb1dd426a48732cfc00b5a6d873e0f7f6", "committedDate": "2020-08-11T20:05:09Z", "message": "Add the formatter cli"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd98c472775d2233ff79d46718d4c851ac167547", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd98c472775d2233ff79d46718d4c851ac167547", "committedDate": "2020-08-11T20:05:10Z", "message": "Remove formatter from the language server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a79966e367113c7cc3fe0ef9a3200a5e2c3458ca", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a79966e367113c7cc3fe0ef9a3200a5e2c3458ca", "committedDate": "2020-08-11T20:05:10Z", "message": "Fix formatting issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "711b6c3c96aede00a07cafb74e7cad7b0be1d521", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/711b6c3c96aede00a07cafb74e7cad7b0be1d521", "committedDate": "2020-08-11T20:05:10Z", "message": "Improve the test suite structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30a521b10a33dcbb05652b1abdd7a85e37992cab", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30a521b10a33dcbb05652b1abdd7a85e37992cab", "committedDate": "2020-08-11T20:05:10Z", "message": "Add nil type formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "696decbda417b88b919a3fefbc63ada994e4e7dc", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/696decbda417b88b919a3fefbc63ada994e4e7dc", "committedDate": "2020-08-11T20:05:10Z", "message": "Fix the comment dropping issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bc076b27acb0e77137815d191e823586def80e6", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5bc076b27acb0e77137815d191e823586def80e6", "committedDate": "2020-08-11T20:05:10Z", "message": "Add the union type transformer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae6a4d7b4132d195bfec84402e17cc01cc8d0316", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae6a4d7b4132d195bfec84402e17cc01cc8d0316", "committedDate": "2020-08-11T20:05:10Z", "message": "Add the XML transformers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1363eebc316795c6c9375404671531bc53fbed7", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1363eebc316795c6c9375404671531bc53fbed7", "committedDate": "2020-08-11T20:05:10Z", "message": "Add template expression transformation and other fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3789a1755792275600d0d0f6972099eb2e3697d", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3789a1755792275600d0d0f6972099eb2e3697d", "committedDate": "2020-08-11T20:05:10Z", "message": "Add byte array literal transformation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "febdc51a7cb8e2ad0bc8d13167ff481413b259bd", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/febdc51a7cb8e2ad0bc8d13167ff481413b259bd", "committedDate": "2020-08-11T20:05:10Z", "message": "Add new node transformers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37a41cde3cca1edeff5840339ac5919283ff745e", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37a41cde3cca1edeff5840339ac5919283ff745e", "committedDate": "2020-08-11T20:05:10Z", "message": "Fail test cases on compilation errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "812de374e58f55e86c675860d4d1c5c64b8e3d43", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/812de374e58f55e86c675860d4d1c5c64b8e3d43", "committedDate": "2020-08-11T20:05:10Z", "message": "Refactor the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cbc0da4a67e50a2b78abdcb680f0ba397e20a1c", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8cbc0da4a67e50a2b78abdcb680f0ba397e20a1c", "committedDate": "2020-08-11T20:05:10Z", "message": "Update the license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a671db81e16a811e7cf1f5a13830adb87f3b7340", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a671db81e16a811e7cf1f5a13830adb87f3b7340", "committedDate": "2020-08-11T20:05:11Z", "message": "Fix the API changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b4fd22b79e5719a07c8b6dd2499f593bad7262f", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b4fd22b79e5719a07c8b6dd2499f593bad7262f", "committedDate": "2020-08-11T20:05:11Z", "message": "Refactor and complete test framework"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "147216c3612c85a57346f58430eddfd39cd44b4c", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/147216c3612c85a57346f58430eddfd39cd44b4c", "committedDate": "2020-08-11T19:57:57Z", "message": "Refactor and complete test framework"}, "afterCommit": {"oid": "6b4fd22b79e5719a07c8b6dd2499f593bad7262f", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b4fd22b79e5719a07c8b6dd2499f593bad7262f", "committedDate": "2020-08-11T20:05:11Z", "message": "Refactor and complete test framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66ad69ee6bcd77f3c712b6d550e6c0207fd1ade", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d66ad69ee6bcd77f3c712b6d550e6c0207fd1ade", "committedDate": "2020-08-11T23:43:08Z", "message": "Implementation of the formatter CLI tool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa9b25d798e56f84c703525e5cce98ff757f7d62", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa9b25d798e56f84c703525e5cce98ff757f7d62", "committedDate": "2020-08-11T23:54:29Z", "message": "Refactor dependencies in formatter CLI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb76e00c3d3a8755e41d17a5ce6d6b31b8e5eef1", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb76e00c3d3a8755e41d17a5ce6d6b31b8e5eef1", "committedDate": "2020-08-12T00:39:50Z", "message": "Improvements to formatter APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1180e9947470e963cc92f649e3e0096c09f34dd5", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1180e9947470e963cc92f649e3e0096c09f34dd5", "committedDate": "2020-08-12T00:45:40Z", "message": "Fix an API change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7e19c051e00c96639d8193a84f3c9264c9e1b61", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7e19c051e00c96639d8193a84f3c9264c9e1b61", "committedDate": "2020-08-12T06:05:07Z", "message": "Refactoring the test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/85029404a6672a4d0d0d519148be5b133324530f", "committedDate": "2020-08-12T06:53:11Z", "message": "Fix the wondows issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9666bd40db5961231e8a04a755f680a17d3ac014", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9666bd40db5961231e8a04a755f680a17d3ac014", "committedDate": "2020-08-12T07:17:24Z", "message": "Improvements to the formatter CLI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fc8ed4f0e71d1519a4dd45d3fae63a3dc5b8865", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fc8ed4f0e71d1519a4dd45d3fae63a3dc5b8865", "committedDate": "2020-08-12T07:21:23Z", "message": "Remove the previous ballerina formatter module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjUyMzAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465652300", "createdAt": "2020-08-12T07:21:37Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyMTozN1rOG_U7Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyMTozN1rOG_U7Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1NjMyMw==", "bodyText": "If there a bal files inside nested directories of the module directory, then the file path gets changed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469056323", "createdAt": "2020-08-12T07:21:37Z", "author": {"login": "hemikak"}, "path": "misc/formatter/modules/formatter-cli/src/main/java/org/ballerinalang/formatter/cli/FormatUtil.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.formatter.core.Formatter;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.NEW_PARSER_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * Util class for compilation and format execution for formatting CLI tool.\n+ */\n+class FormatUtil {\n+    static final String CMD_NAME = \"format\";\n+    private static final PrintStream outStream = System.err;\n+    private static EmptyPrintStream emptyPrintStream;\n+\n+    /**\n+     * Execute formatter.\n+     *\n+     * @param argList        argument list from the console\n+     * @param helpFlag       flag to get the help page\n+     * @param dryRun         run the whole formatting\n+     * @param sourceRootPath execution path\n+     */\n+    static void execute(List<String> argList, boolean helpFlag, boolean dryRun, Path sourceRootPath) {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(CMD_NAME);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList != null && argList.size() > 1) {\n+            throw LauncherUtils.createLauncherException(Messages.getArgumentError());\n+        }\n+\n+        String moduleName;\n+        String ballerinaFilePath;\n+\n+        try {\n+            // If parameters are available user has given either the module name or the ballerina file path.\n+            // Else user is in a ballerina project and expecting to format the whole ballerina project\n+            if (argList != null && !argList.isEmpty()) {\n+                if (FormatUtil.isBalFile(argList.get(0))) {\n+                    ballerinaFilePath = argList.get(0);\n+                    Path filePath = Paths.get(ballerinaFilePath);\n+\n+                    // If the file doesn't exist or is a directory.\n+                    if (!filePath.toFile().exists() || filePath.toFile().isDirectory()) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNoBallerinaFile(ballerinaFilePath));\n+                    }\n+\n+                    String source = new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8);\n+                    // Format and get the generated formatted source code content.\n+                    String formattedSourceCode = Formatter.format(source);\n+\n+                    if (doChangesAvailable(source, formattedSourceCode)) {\n+                        if (!dryRun) {\n+                            // Write the formatted content back to the file.\n+                            FormatUtil.writeFile(filePath.toAbsolutePath().toString(), formattedSourceCode);\n+                            outStream.println(Messages.getModifiedFiles() + System.lineSeparator() + ballerinaFilePath);\n+                            outStream.println(System.lineSeparator() + Messages.getSuccessMessage());\n+                        } else {\n+                            outStream.println(Messages.getFilesToModify() + System.lineSeparator() + ballerinaFilePath);\n+                        }\n+                    } else {\n+                        outStream.println(Messages.getNoChanges());\n+                    }\n+                } else if (Paths.get(argList.get(0)).toFile().isFile()) {\n+                    // If file is a regular file but not a ballerina source file\n+                    // throw the following exception.\n+                    throw LauncherUtils.createLauncherException(Messages.getNotABallerinaFile());\n+                } else {\n+                    moduleName = argList.get(0);\n+\n+                    // Check whether the module dir exists.\n+                    if (!FormatUtil.isModuleExist(moduleName, sourceRootPath)) {\n+                        // If module directory doesn't exist and contains a \".\"\n+                        // throw a exception to say file or module doesn't exist.\n+                        // Else throw a exception to say module doesn't exist.\n+                        if (moduleName.contains(\".\")) {\n+                            throw LauncherUtils.createLauncherException(Messages\n+                                    .getNoBallerinaModuleOrFile(moduleName));\n+                        } else {\n+                            throw LauncherUtils.createLauncherException(Messages.getNoModuleFound(moduleName));\n+                        }\n+                    }\n+\n+                    // Check whether the given directory is not in a ballerina project.\n+                    if (FormatUtil.notABallerinaProject(sourceRootPath)) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNotBallerinaProject());\n+                    }\n+                    BLangPackage bLangPackage = FormatUtil\n+                            .compileModule(sourceRootPath, getModuleName(moduleName));\n+\n+                    // Iterate and format the ballerina package.\n+                    List<String> formattedFiles = iterateAndFormat(bLangPackage, sourceRootPath, dryRun);\n+                    generateChangeReport(formattedFiles, dryRun);\n+                }\n+            } else {\n+                List<BLangPackage> packages = FormatUtil.compileProject(sourceRootPath);\n+                List<String> formattedFiles = new ArrayList<>();\n+                // Iterate and format all the ballerina packages.\n+                for (BLangPackage bLangPackage : packages) {\n+                    formattedFiles.addAll(iterateAndFormat(bLangPackage, sourceRootPath, dryRun));\n+                }\n+\n+                generateChangeReport(formattedFiles, dryRun);\n+            }\n+        } catch (IOException | NullPointerException e) {\n+            throw LauncherUtils.createLauncherException(Messages.getException());\n+        }\n+    }\n+\n+    private static void generateChangeReport(List<String> formattedFiles, boolean dryRun) {\n+        if (!formattedFiles.isEmpty()) {\n+            StringBuilder fileList = new StringBuilder();\n+            if (dryRun) {\n+                fileList.append(Messages.getFilesToModify()).append(System.lineSeparator());\n+            } else {\n+                fileList.append(Messages.getModifiedFiles()).append(System.lineSeparator());\n+            }\n+            for (String file : formattedFiles) {\n+                fileList.append(file).append(System.lineSeparator());\n+            }\n+            outStream.println(fileList.toString());\n+            if (!dryRun) {\n+                outStream.println(Messages.getSuccessMessage());\n+            }\n+        } else {\n+            outStream.println(Messages.getNoChanges());\n+        }\n+    }\n+\n+    private static String getModuleName(String moduleName) {\n+        String pattern = Pattern.quote(File.separator);\n+        String[] splitedTokens = moduleName.split(pattern);\n+        return splitedTokens[splitedTokens.length - 1];\n+    }\n+\n+    /**\n+     * Compile whole ballerina project.\n+     *\n+     * @param sourceRoot source root\n+     * @return {@link List<BLangPackage>} list of BLangPackages\n+     */\n+    private static List<BLangPackage> compileProject(Path sourceRoot) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compilePackages(false);\n+    }\n+\n+    /**\n+     * Compile only a ballerina module.\n+     *\n+     * @param sourceRoot source root\n+     * @param moduleName name of the module to be compiled\n+     * @return {@link BLangPackage} ballerina package\n+     */\n+    private static BLangPackage compileModule(Path sourceRoot, String moduleName) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compile(moduleName);\n+    }\n+\n+    private static void formatAndWrite(BLangCompilationUnit compilationUnit, Path sourceRootPath,\n+                                       List<String> formattedFiles, boolean dryRun) throws IOException {\n+        String fileName = sourceRootPath.toString() + File.separator\n+                + \"src\"\n+                + File.separator\n+                + compilationUnit.getPosition().getSource().getPackageName()\n+                + File.separator\n+                + compilationUnit.getPosition().getSource().getCompilationUnitName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjUzNzkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465653791", "createdAt": "2020-08-12T07:23:55Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyMzo1NVrOG_VADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyMzo1NVrOG_VADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1NzU0OQ==", "bodyText": "Dry run is hidden ? Why ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469057549", "createdAt": "2020-08-12T07:23:55Z", "author": {"login": "hemikak"}, "path": "misc/formatter/modules/formatter-cli/src/main/java/org/ballerinalang/formatter/cli/FormatCmd.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.tool.BLauncherCmd;\n+import picocli.CommandLine;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+/**\n+ * Class to implement \"format\" command for ballerina.\n+ * Ex: ballerina format [ballerinaFile | ModuleName] [-d | --dry-run]\n+ */\n+@CommandLine.Command(name = \"format\", description = \"format given Ballerina source file\")\n+public class FormatCmd implements BLauncherCmd {\n+    private static final String USER_DIR = \"user.dir\";\n+    private static final String NOT_SUPPORTED_MESSAGE = \"user.dir\";\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"-h\", \"--help\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = {\"-d\", \"--dry-run\"}, hidden = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjUzOTY1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465653965", "createdAt": "2020-08-12T07:24:12Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNDoxMlrOG_VAmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNDoxMlrOG_VAmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1NzY4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    // throw a exception to say file or module doesn't exist.\n          \n          \n            \n                                    // throw an exception to say file or module doesn't exist.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469057688", "createdAt": "2020-08-12T07:24:12Z", "author": {"login": "azinneera"}, "path": "misc/formatter/modules/formatter-cli/src/main/java/org/ballerinalang/formatter/cli/FormatUtil.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.formatter.core.Formatter;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.NEW_PARSER_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * Util class for compilation and format execution for formatting CLI tool.\n+ */\n+class FormatUtil {\n+    static final String CMD_NAME = \"format\";\n+    private static final PrintStream outStream = System.err;\n+    private static EmptyPrintStream emptyPrintStream;\n+\n+    /**\n+     * Execute formatter.\n+     *\n+     * @param argList        argument list from the console\n+     * @param helpFlag       flag to get the help page\n+     * @param dryRun         run the whole formatting\n+     * @param sourceRootPath execution path\n+     */\n+    static void execute(List<String> argList, boolean helpFlag, boolean dryRun, Path sourceRootPath) {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(CMD_NAME);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList != null && argList.size() > 1) {\n+            throw LauncherUtils.createLauncherException(Messages.getArgumentError());\n+        }\n+\n+        String moduleName;\n+        String ballerinaFilePath;\n+\n+        try {\n+            // If parameters are available user has given either the module name or the ballerina file path.\n+            // Else user is in a ballerina project and expecting to format the whole ballerina project\n+            if (argList != null && !argList.isEmpty()) {\n+                if (FormatUtil.isBalFile(argList.get(0))) {\n+                    ballerinaFilePath = argList.get(0);\n+                    Path filePath = Paths.get(ballerinaFilePath);\n+\n+                    // If the file doesn't exist or is a directory.\n+                    if (!filePath.toFile().exists() || filePath.toFile().isDirectory()) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNoBallerinaFile(ballerinaFilePath));\n+                    }\n+\n+                    String source = new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8);\n+                    // Format and get the generated formatted source code content.\n+                    String formattedSourceCode = Formatter.format(source);\n+\n+                    if (doChangesAvailable(source, formattedSourceCode)) {\n+                        if (!dryRun) {\n+                            // Write the formatted content back to the file.\n+                            FormatUtil.writeFile(filePath.toAbsolutePath().toString(), formattedSourceCode);\n+                            outStream.println(Messages.getModifiedFiles() + System.lineSeparator() + ballerinaFilePath);\n+                            outStream.println(System.lineSeparator() + Messages.getSuccessMessage());\n+                        } else {\n+                            outStream.println(Messages.getFilesToModify() + System.lineSeparator() + ballerinaFilePath);\n+                        }\n+                    } else {\n+                        outStream.println(Messages.getNoChanges());\n+                    }\n+                } else if (Paths.get(argList.get(0)).toFile().isFile()) {\n+                    // If file is a regular file but not a ballerina source file\n+                    // throw the following exception.\n+                    throw LauncherUtils.createLauncherException(Messages.getNotABallerinaFile());\n+                } else {\n+                    moduleName = argList.get(0);\n+\n+                    // Check whether the module dir exists.\n+                    if (!FormatUtil.isModuleExist(moduleName, sourceRootPath)) {\n+                        // If module directory doesn't exist and contains a \".\"\n+                        // throw a exception to say file or module doesn't exist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjU0MjQ3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465654247", "createdAt": "2020-08-12T07:24:39Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNDozOVrOG_VBfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNDozOVrOG_VBfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1NzkxNw==", "bodyText": "Should tests run ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469057917", "createdAt": "2020-08-12T07:24:39Z", "author": {"login": "hemikak"}, "path": "misc/formatter/modules/formatter-cli/src/main/java/org/ballerinalang/formatter/cli/FormatUtil.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.formatter.core.Formatter;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.NEW_PARSER_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * Util class for compilation and format execution for formatting CLI tool.\n+ */\n+class FormatUtil {\n+    static final String CMD_NAME = \"format\";\n+    private static final PrintStream outStream = System.err;\n+    private static EmptyPrintStream emptyPrintStream;\n+\n+    /**\n+     * Execute formatter.\n+     *\n+     * @param argList        argument list from the console\n+     * @param helpFlag       flag to get the help page\n+     * @param dryRun         run the whole formatting\n+     * @param sourceRootPath execution path\n+     */\n+    static void execute(List<String> argList, boolean helpFlag, boolean dryRun, Path sourceRootPath) {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(CMD_NAME);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList != null && argList.size() > 1) {\n+            throw LauncherUtils.createLauncherException(Messages.getArgumentError());\n+        }\n+\n+        String moduleName;\n+        String ballerinaFilePath;\n+\n+        try {\n+            // If parameters are available user has given either the module name or the ballerina file path.\n+            // Else user is in a ballerina project and expecting to format the whole ballerina project\n+            if (argList != null && !argList.isEmpty()) {\n+                if (FormatUtil.isBalFile(argList.get(0))) {\n+                    ballerinaFilePath = argList.get(0);\n+                    Path filePath = Paths.get(ballerinaFilePath);\n+\n+                    // If the file doesn't exist or is a directory.\n+                    if (!filePath.toFile().exists() || filePath.toFile().isDirectory()) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNoBallerinaFile(ballerinaFilePath));\n+                    }\n+\n+                    String source = new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8);\n+                    // Format and get the generated formatted source code content.\n+                    String formattedSourceCode = Formatter.format(source);\n+\n+                    if (doChangesAvailable(source, formattedSourceCode)) {\n+                        if (!dryRun) {\n+                            // Write the formatted content back to the file.\n+                            FormatUtil.writeFile(filePath.toAbsolutePath().toString(), formattedSourceCode);\n+                            outStream.println(Messages.getModifiedFiles() + System.lineSeparator() + ballerinaFilePath);\n+                            outStream.println(System.lineSeparator() + Messages.getSuccessMessage());\n+                        } else {\n+                            outStream.println(Messages.getFilesToModify() + System.lineSeparator() + ballerinaFilePath);\n+                        }\n+                    } else {\n+                        outStream.println(Messages.getNoChanges());\n+                    }\n+                } else if (Paths.get(argList.get(0)).toFile().isFile()) {\n+                    // If file is a regular file but not a ballerina source file\n+                    // throw the following exception.\n+                    throw LauncherUtils.createLauncherException(Messages.getNotABallerinaFile());\n+                } else {\n+                    moduleName = argList.get(0);\n+\n+                    // Check whether the module dir exists.\n+                    if (!FormatUtil.isModuleExist(moduleName, sourceRootPath)) {\n+                        // If module directory doesn't exist and contains a \".\"\n+                        // throw a exception to say file or module doesn't exist.\n+                        // Else throw a exception to say module doesn't exist.\n+                        if (moduleName.contains(\".\")) {\n+                            throw LauncherUtils.createLauncherException(Messages\n+                                    .getNoBallerinaModuleOrFile(moduleName));\n+                        } else {\n+                            throw LauncherUtils.createLauncherException(Messages.getNoModuleFound(moduleName));\n+                        }\n+                    }\n+\n+                    // Check whether the given directory is not in a ballerina project.\n+                    if (FormatUtil.notABallerinaProject(sourceRootPath)) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNotBallerinaProject());\n+                    }\n+                    BLangPackage bLangPackage = FormatUtil\n+                            .compileModule(sourceRootPath, getModuleName(moduleName));\n+\n+                    // Iterate and format the ballerina package.\n+                    List<String> formattedFiles = iterateAndFormat(bLangPackage, sourceRootPath, dryRun);\n+                    generateChangeReport(formattedFiles, dryRun);\n+                }\n+            } else {\n+                List<BLangPackage> packages = FormatUtil.compileProject(sourceRootPath);\n+                List<String> formattedFiles = new ArrayList<>();\n+                // Iterate and format all the ballerina packages.\n+                for (BLangPackage bLangPackage : packages) {\n+                    formattedFiles.addAll(iterateAndFormat(bLangPackage, sourceRootPath, dryRun));\n+                }\n+\n+                generateChangeReport(formattedFiles, dryRun);\n+            }\n+        } catch (IOException | NullPointerException e) {\n+            throw LauncherUtils.createLauncherException(Messages.getException());\n+        }\n+    }\n+\n+    private static void generateChangeReport(List<String> formattedFiles, boolean dryRun) {\n+        if (!formattedFiles.isEmpty()) {\n+            StringBuilder fileList = new StringBuilder();\n+            if (dryRun) {\n+                fileList.append(Messages.getFilesToModify()).append(System.lineSeparator());\n+            } else {\n+                fileList.append(Messages.getModifiedFiles()).append(System.lineSeparator());\n+            }\n+            for (String file : formattedFiles) {\n+                fileList.append(file).append(System.lineSeparator());\n+            }\n+            outStream.println(fileList.toString());\n+            if (!dryRun) {\n+                outStream.println(Messages.getSuccessMessage());\n+            }\n+        } else {\n+            outStream.println(Messages.getNoChanges());\n+        }\n+    }\n+\n+    private static String getModuleName(String moduleName) {\n+        String pattern = Pattern.quote(File.separator);\n+        String[] splitedTokens = moduleName.split(pattern);\n+        return splitedTokens[splitedTokens.length - 1];\n+    }\n+\n+    /**\n+     * Compile whole ballerina project.\n+     *\n+     * @param sourceRoot source root\n+     * @return {@link List<BLangPackage>} list of BLangPackages\n+     */\n+    private static List<BLangPackage> compileProject(Path sourceRoot) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compilePackages(false);\n+    }\n+\n+    /**\n+     * Compile only a ballerina module.\n+     *\n+     * @param sourceRoot source root\n+     * @param moduleName name of the module to be compiled\n+     * @return {@link BLangPackage} ballerina package\n+     */\n+    private static BLangPackage compileModule(Path sourceRoot, String moduleName) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compile(moduleName);\n+    }\n+\n+    private static void formatAndWrite(BLangCompilationUnit compilationUnit, Path sourceRootPath,\n+                                       List<String> formattedFiles, boolean dryRun) throws IOException {\n+        String fileName = sourceRootPath.toString() + File.separator\n+                + \"src\"\n+                + File.separator\n+                + compilationUnit.getPosition().getSource().getPackageName()\n+                + File.separator\n+                + compilationUnit.getPosition().getSource().getCompilationUnitName();\n+\n+        // Format and get the formatted source.\n+        String formattedSource = Formatter.format(new String(Files.readAllBytes(Paths.get(fileName)),\n+                StandardCharsets.UTF_8));\n+\n+        if (doChangesAvailable(formattedSource, formattedSource)) {\n+            if (!dryRun) {\n+                // Write formatted content to the file.\n+                FormatUtil.writeFile(fileName, formattedSource);\n+            }\n+            formattedFiles.add(fileName);\n+        }\n+    }\n+\n+    private static List<String> iterateAndFormat(BLangPackage bLangPackage, Path sourceRootPath, boolean dryRun)\n+            throws IOException {\n+        List<String> formattedFiles = new ArrayList<>();\n+\n+        // Iterate compilation units and format.\n+        for (BLangCompilationUnit compilationUnit : bLangPackage.getCompilationUnits()) {\n+            formatAndWrite(compilationUnit, sourceRootPath, formattedFiles, dryRun);\n+        }\n+\n+        // Iterate testable packages and format.\n+        for (BLangTestablePackage testablePackage : bLangPackage.getTestablePkgs()) {\n+            for (BLangCompilationUnit compilationUnit : testablePackage.getCompilationUnits()) {\n+                formatAndWrite(compilationUnit, sourceRootPath, formattedFiles, dryRun);\n+            }\n+        }\n+\n+        return formattedFiles;\n+    }\n+\n+    /**\n+     * Get prepared compiler context.\n+     *\n+     * @param sourceRootPath ballerina compilable source root path\n+     * @return {@link CompilerContext} compiler context\n+     */\n+    private static CompilerContext getCompilerContext(Path sourceRootPath) {\n+        CompilerPhase compilerPhase = CompilerPhase.DEFINE;\n+        CompilerContext context = new CompilerContext();\n+        CompilerOptions options = CompilerOptions.getInstance(context);\n+        options.put(PROJECT_DIR, sourceRootPath.toString());\n+        options.put(OFFLINE, Boolean.toString(false));\n+        options.put(COMPILER_PHASE, compilerPhase.toString());\n+        options.put(SKIP_TESTS, Boolean.toString(false));\n+        options.put(TEST_ENABLED, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 271}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjU1MTQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465655141", "createdAt": "2020-08-12T07:26:02Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNjowMlrOG_VEMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNjowMlrOG_VEMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1ODYwOQ==", "bodyText": "Better function name would be isBallerinaProject instead of negative reply.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469058609", "createdAt": "2020-08-12T07:26:02Z", "author": {"login": "hemikak"}, "path": "misc/formatter/modules/formatter-cli/src/main/java/org/ballerinalang/formatter/cli/FormatUtil.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.formatter.core.Formatter;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.NEW_PARSER_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * Util class for compilation and format execution for formatting CLI tool.\n+ */\n+class FormatUtil {\n+    static final String CMD_NAME = \"format\";\n+    private static final PrintStream outStream = System.err;\n+    private static EmptyPrintStream emptyPrintStream;\n+\n+    /**\n+     * Execute formatter.\n+     *\n+     * @param argList        argument list from the console\n+     * @param helpFlag       flag to get the help page\n+     * @param dryRun         run the whole formatting\n+     * @param sourceRootPath execution path\n+     */\n+    static void execute(List<String> argList, boolean helpFlag, boolean dryRun, Path sourceRootPath) {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(CMD_NAME);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList != null && argList.size() > 1) {\n+            throw LauncherUtils.createLauncherException(Messages.getArgumentError());\n+        }\n+\n+        String moduleName;\n+        String ballerinaFilePath;\n+\n+        try {\n+            // If parameters are available user has given either the module name or the ballerina file path.\n+            // Else user is in a ballerina project and expecting to format the whole ballerina project\n+            if (argList != null && !argList.isEmpty()) {\n+                if (FormatUtil.isBalFile(argList.get(0))) {\n+                    ballerinaFilePath = argList.get(0);\n+                    Path filePath = Paths.get(ballerinaFilePath);\n+\n+                    // If the file doesn't exist or is a directory.\n+                    if (!filePath.toFile().exists() || filePath.toFile().isDirectory()) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNoBallerinaFile(ballerinaFilePath));\n+                    }\n+\n+                    String source = new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8);\n+                    // Format and get the generated formatted source code content.\n+                    String formattedSourceCode = Formatter.format(source);\n+\n+                    if (doChangesAvailable(source, formattedSourceCode)) {\n+                        if (!dryRun) {\n+                            // Write the formatted content back to the file.\n+                            FormatUtil.writeFile(filePath.toAbsolutePath().toString(), formattedSourceCode);\n+                            outStream.println(Messages.getModifiedFiles() + System.lineSeparator() + ballerinaFilePath);\n+                            outStream.println(System.lineSeparator() + Messages.getSuccessMessage());\n+                        } else {\n+                            outStream.println(Messages.getFilesToModify() + System.lineSeparator() + ballerinaFilePath);\n+                        }\n+                    } else {\n+                        outStream.println(Messages.getNoChanges());\n+                    }\n+                } else if (Paths.get(argList.get(0)).toFile().isFile()) {\n+                    // If file is a regular file but not a ballerina source file\n+                    // throw the following exception.\n+                    throw LauncherUtils.createLauncherException(Messages.getNotABallerinaFile());\n+                } else {\n+                    moduleName = argList.get(0);\n+\n+                    // Check whether the module dir exists.\n+                    if (!FormatUtil.isModuleExist(moduleName, sourceRootPath)) {\n+                        // If module directory doesn't exist and contains a \".\"\n+                        // throw a exception to say file or module doesn't exist.\n+                        // Else throw a exception to say module doesn't exist.\n+                        if (moduleName.contains(\".\")) {\n+                            throw LauncherUtils.createLauncherException(Messages\n+                                    .getNoBallerinaModuleOrFile(moduleName));\n+                        } else {\n+                            throw LauncherUtils.createLauncherException(Messages.getNoModuleFound(moduleName));\n+                        }\n+                    }\n+\n+                    // Check whether the given directory is not in a ballerina project.\n+                    if (FormatUtil.notABallerinaProject(sourceRootPath)) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNotBallerinaProject());\n+                    }\n+                    BLangPackage bLangPackage = FormatUtil\n+                            .compileModule(sourceRootPath, getModuleName(moduleName));\n+\n+                    // Iterate and format the ballerina package.\n+                    List<String> formattedFiles = iterateAndFormat(bLangPackage, sourceRootPath, dryRun);\n+                    generateChangeReport(formattedFiles, dryRun);\n+                }\n+            } else {\n+                List<BLangPackage> packages = FormatUtil.compileProject(sourceRootPath);\n+                List<String> formattedFiles = new ArrayList<>();\n+                // Iterate and format all the ballerina packages.\n+                for (BLangPackage bLangPackage : packages) {\n+                    formattedFiles.addAll(iterateAndFormat(bLangPackage, sourceRootPath, dryRun));\n+                }\n+\n+                generateChangeReport(formattedFiles, dryRun);\n+            }\n+        } catch (IOException | NullPointerException e) {\n+            throw LauncherUtils.createLauncherException(Messages.getException());\n+        }\n+    }\n+\n+    private static void generateChangeReport(List<String> formattedFiles, boolean dryRun) {\n+        if (!formattedFiles.isEmpty()) {\n+            StringBuilder fileList = new StringBuilder();\n+            if (dryRun) {\n+                fileList.append(Messages.getFilesToModify()).append(System.lineSeparator());\n+            } else {\n+                fileList.append(Messages.getModifiedFiles()).append(System.lineSeparator());\n+            }\n+            for (String file : formattedFiles) {\n+                fileList.append(file).append(System.lineSeparator());\n+            }\n+            outStream.println(fileList.toString());\n+            if (!dryRun) {\n+                outStream.println(Messages.getSuccessMessage());\n+            }\n+        } else {\n+            outStream.println(Messages.getNoChanges());\n+        }\n+    }\n+\n+    private static String getModuleName(String moduleName) {\n+        String pattern = Pattern.quote(File.separator);\n+        String[] splitedTokens = moduleName.split(pattern);\n+        return splitedTokens[splitedTokens.length - 1];\n+    }\n+\n+    /**\n+     * Compile whole ballerina project.\n+     *\n+     * @param sourceRoot source root\n+     * @return {@link List<BLangPackage>} list of BLangPackages\n+     */\n+    private static List<BLangPackage> compileProject(Path sourceRoot) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compilePackages(false);\n+    }\n+\n+    /**\n+     * Compile only a ballerina module.\n+     *\n+     * @param sourceRoot source root\n+     * @param moduleName name of the module to be compiled\n+     * @return {@link BLangPackage} ballerina package\n+     */\n+    private static BLangPackage compileModule(Path sourceRoot, String moduleName) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compile(moduleName);\n+    }\n+\n+    private static void formatAndWrite(BLangCompilationUnit compilationUnit, Path sourceRootPath,\n+                                       List<String> formattedFiles, boolean dryRun) throws IOException {\n+        String fileName = sourceRootPath.toString() + File.separator\n+                + \"src\"\n+                + File.separator\n+                + compilationUnit.getPosition().getSource().getPackageName()\n+                + File.separator\n+                + compilationUnit.getPosition().getSource().getCompilationUnitName();\n+\n+        // Format and get the formatted source.\n+        String formattedSource = Formatter.format(new String(Files.readAllBytes(Paths.get(fileName)),\n+                StandardCharsets.UTF_8));\n+\n+        if (doChangesAvailable(formattedSource, formattedSource)) {\n+            if (!dryRun) {\n+                // Write formatted content to the file.\n+                FormatUtil.writeFile(fileName, formattedSource);\n+            }\n+            formattedFiles.add(fileName);\n+        }\n+    }\n+\n+    private static List<String> iterateAndFormat(BLangPackage bLangPackage, Path sourceRootPath, boolean dryRun)\n+            throws IOException {\n+        List<String> formattedFiles = new ArrayList<>();\n+\n+        // Iterate compilation units and format.\n+        for (BLangCompilationUnit compilationUnit : bLangPackage.getCompilationUnits()) {\n+            formatAndWrite(compilationUnit, sourceRootPath, formattedFiles, dryRun);\n+        }\n+\n+        // Iterate testable packages and format.\n+        for (BLangTestablePackage testablePackage : bLangPackage.getTestablePkgs()) {\n+            for (BLangCompilationUnit compilationUnit : testablePackage.getCompilationUnits()) {\n+                formatAndWrite(compilationUnit, sourceRootPath, formattedFiles, dryRun);\n+            }\n+        }\n+\n+        return formattedFiles;\n+    }\n+\n+    /**\n+     * Get prepared compiler context.\n+     *\n+     * @param sourceRootPath ballerina compilable source root path\n+     * @return {@link CompilerContext} compiler context\n+     */\n+    private static CompilerContext getCompilerContext(Path sourceRootPath) {\n+        CompilerPhase compilerPhase = CompilerPhase.DEFINE;\n+        CompilerContext context = new CompilerContext();\n+        CompilerOptions options = CompilerOptions.getInstance(context);\n+        options.put(PROJECT_DIR, sourceRootPath.toString());\n+        options.put(OFFLINE, Boolean.toString(false));\n+        options.put(COMPILER_PHASE, compilerPhase.toString());\n+        options.put(SKIP_TESTS, Boolean.toString(false));\n+        options.put(TEST_ENABLED, \"true\");\n+        options.put(LOCK_ENABLED, Boolean.toString(false));\n+        options.put(EXPERIMENTAL_FEATURES_ENABLED, Boolean.toString(true));\n+        options.put(PRESERVE_WHITESPACE, Boolean.toString(true));\n+        options.put(NEW_PARSER_ENABLED, Boolean.toString(false));\n+\n+        return context;\n+    }\n+\n+    /**\n+     * Check whether the given module name exists.\n+     *\n+     * @param module      module name\n+     * @param projectRoot path of the ballerina project root\n+     * @return {@link Boolean} true or false\n+     */\n+    private static boolean isModuleExist(String module, Path projectRoot) {\n+        Path modulePath;\n+        if (module.startsWith(\"src/\")) {\n+            modulePath = projectRoot.resolve(module);\n+        } else {\n+            modulePath = projectRoot.resolve(\"src\").resolve(module);\n+        }\n+\n+        return modulePath.toFile().isDirectory();\n+    }\n+\n+    /**\n+     * Check whether the given path isn't a source root of a ballerina project.\n+     *\n+     * @param path - path where the command is executed from\n+     * @return {@link boolean} true or false\n+     */\n+    private static boolean notABallerinaProject(Path path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 304}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjU1NTI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465655526", "createdAt": "2020-08-12T07:26:40Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNjo0MFrOG_VFXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNjo0MFrOG_VFXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1ODkwOA==", "bodyText": "Shall we append the original exception e as well? That would  give more information on the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469058908", "createdAt": "2020-08-12T07:26:40Z", "author": {"login": "azinneera"}, "path": "misc/formatter/modules/formatter-cli/src/main/java/org/ballerinalang/formatter/cli/FormatUtil.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.formatter.core.Formatter;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.NEW_PARSER_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * Util class for compilation and format execution for formatting CLI tool.\n+ */\n+class FormatUtil {\n+    static final String CMD_NAME = \"format\";\n+    private static final PrintStream outStream = System.err;\n+    private static EmptyPrintStream emptyPrintStream;\n+\n+    /**\n+     * Execute formatter.\n+     *\n+     * @param argList        argument list from the console\n+     * @param helpFlag       flag to get the help page\n+     * @param dryRun         run the whole formatting\n+     * @param sourceRootPath execution path\n+     */\n+    static void execute(List<String> argList, boolean helpFlag, boolean dryRun, Path sourceRootPath) {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(CMD_NAME);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList != null && argList.size() > 1) {\n+            throw LauncherUtils.createLauncherException(Messages.getArgumentError());\n+        }\n+\n+        String moduleName;\n+        String ballerinaFilePath;\n+\n+        try {\n+            // If parameters are available user has given either the module name or the ballerina file path.\n+            // Else user is in a ballerina project and expecting to format the whole ballerina project\n+            if (argList != null && !argList.isEmpty()) {\n+                if (FormatUtil.isBalFile(argList.get(0))) {\n+                    ballerinaFilePath = argList.get(0);\n+                    Path filePath = Paths.get(ballerinaFilePath);\n+\n+                    // If the file doesn't exist or is a directory.\n+                    if (!filePath.toFile().exists() || filePath.toFile().isDirectory()) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNoBallerinaFile(ballerinaFilePath));\n+                    }\n+\n+                    String source = new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8);\n+                    // Format and get the generated formatted source code content.\n+                    String formattedSourceCode = Formatter.format(source);\n+\n+                    if (doChangesAvailable(source, formattedSourceCode)) {\n+                        if (!dryRun) {\n+                            // Write the formatted content back to the file.\n+                            FormatUtil.writeFile(filePath.toAbsolutePath().toString(), formattedSourceCode);\n+                            outStream.println(Messages.getModifiedFiles() + System.lineSeparator() + ballerinaFilePath);\n+                            outStream.println(System.lineSeparator() + Messages.getSuccessMessage());\n+                        } else {\n+                            outStream.println(Messages.getFilesToModify() + System.lineSeparator() + ballerinaFilePath);\n+                        }\n+                    } else {\n+                        outStream.println(Messages.getNoChanges());\n+                    }\n+                } else if (Paths.get(argList.get(0)).toFile().isFile()) {\n+                    // If file is a regular file but not a ballerina source file\n+                    // throw the following exception.\n+                    throw LauncherUtils.createLauncherException(Messages.getNotABallerinaFile());\n+                } else {\n+                    moduleName = argList.get(0);\n+\n+                    // Check whether the module dir exists.\n+                    if (!FormatUtil.isModuleExist(moduleName, sourceRootPath)) {\n+                        // If module directory doesn't exist and contains a \".\"\n+                        // throw a exception to say file or module doesn't exist.\n+                        // Else throw a exception to say module doesn't exist.\n+                        if (moduleName.contains(\".\")) {\n+                            throw LauncherUtils.createLauncherException(Messages\n+                                    .getNoBallerinaModuleOrFile(moduleName));\n+                        } else {\n+                            throw LauncherUtils.createLauncherException(Messages.getNoModuleFound(moduleName));\n+                        }\n+                    }\n+\n+                    // Check whether the given directory is not in a ballerina project.\n+                    if (FormatUtil.notABallerinaProject(sourceRootPath)) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNotBallerinaProject());\n+                    }\n+                    BLangPackage bLangPackage = FormatUtil\n+                            .compileModule(sourceRootPath, getModuleName(moduleName));\n+\n+                    // Iterate and format the ballerina package.\n+                    List<String> formattedFiles = iterateAndFormat(bLangPackage, sourceRootPath, dryRun);\n+                    generateChangeReport(formattedFiles, dryRun);\n+                }\n+            } else {\n+                List<BLangPackage> packages = FormatUtil.compileProject(sourceRootPath);\n+                List<String> formattedFiles = new ArrayList<>();\n+                // Iterate and format all the ballerina packages.\n+                for (BLangPackage bLangPackage : packages) {\n+                    formattedFiles.addAll(iterateAndFormat(bLangPackage, sourceRootPath, dryRun));\n+                }\n+\n+                generateChangeReport(formattedFiles, dryRun);\n+            }\n+        } catch (IOException | NullPointerException e) {\n+            throw LauncherUtils.createLauncherException(Messages.getException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjU1NTYz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465655563", "createdAt": "2020-08-12T07:26:44Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNjo0NFrOG_VFeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNjo0NFrOG_VFeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1ODkzNw==", "bodyText": "Does areChangesAvailable makes sense instead of doChangesAvailable ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469058937", "createdAt": "2020-08-12T07:26:44Z", "author": {"login": "hemikak"}, "path": "misc/formatter/modules/formatter-cli/src/main/java/org/ballerinalang/formatter/cli/FormatUtil.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.formatter.core.Formatter;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.NEW_PARSER_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * Util class for compilation and format execution for formatting CLI tool.\n+ */\n+class FormatUtil {\n+    static final String CMD_NAME = \"format\";\n+    private static final PrintStream outStream = System.err;\n+    private static EmptyPrintStream emptyPrintStream;\n+\n+    /**\n+     * Execute formatter.\n+     *\n+     * @param argList        argument list from the console\n+     * @param helpFlag       flag to get the help page\n+     * @param dryRun         run the whole formatting\n+     * @param sourceRootPath execution path\n+     */\n+    static void execute(List<String> argList, boolean helpFlag, boolean dryRun, Path sourceRootPath) {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(CMD_NAME);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList != null && argList.size() > 1) {\n+            throw LauncherUtils.createLauncherException(Messages.getArgumentError());\n+        }\n+\n+        String moduleName;\n+        String ballerinaFilePath;\n+\n+        try {\n+            // If parameters are available user has given either the module name or the ballerina file path.\n+            // Else user is in a ballerina project and expecting to format the whole ballerina project\n+            if (argList != null && !argList.isEmpty()) {\n+                if (FormatUtil.isBalFile(argList.get(0))) {\n+                    ballerinaFilePath = argList.get(0);\n+                    Path filePath = Paths.get(ballerinaFilePath);\n+\n+                    // If the file doesn't exist or is a directory.\n+                    if (!filePath.toFile().exists() || filePath.toFile().isDirectory()) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNoBallerinaFile(ballerinaFilePath));\n+                    }\n+\n+                    String source = new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8);\n+                    // Format and get the generated formatted source code content.\n+                    String formattedSourceCode = Formatter.format(source);\n+\n+                    if (doChangesAvailable(source, formattedSourceCode)) {\n+                        if (!dryRun) {\n+                            // Write the formatted content back to the file.\n+                            FormatUtil.writeFile(filePath.toAbsolutePath().toString(), formattedSourceCode);\n+                            outStream.println(Messages.getModifiedFiles() + System.lineSeparator() + ballerinaFilePath);\n+                            outStream.println(System.lineSeparator() + Messages.getSuccessMessage());\n+                        } else {\n+                            outStream.println(Messages.getFilesToModify() + System.lineSeparator() + ballerinaFilePath);\n+                        }\n+                    } else {\n+                        outStream.println(Messages.getNoChanges());\n+                    }\n+                } else if (Paths.get(argList.get(0)).toFile().isFile()) {\n+                    // If file is a regular file but not a ballerina source file\n+                    // throw the following exception.\n+                    throw LauncherUtils.createLauncherException(Messages.getNotABallerinaFile());\n+                } else {\n+                    moduleName = argList.get(0);\n+\n+                    // Check whether the module dir exists.\n+                    if (!FormatUtil.isModuleExist(moduleName, sourceRootPath)) {\n+                        // If module directory doesn't exist and contains a \".\"\n+                        // throw a exception to say file or module doesn't exist.\n+                        // Else throw a exception to say module doesn't exist.\n+                        if (moduleName.contains(\".\")) {\n+                            throw LauncherUtils.createLauncherException(Messages\n+                                    .getNoBallerinaModuleOrFile(moduleName));\n+                        } else {\n+                            throw LauncherUtils.createLauncherException(Messages.getNoModuleFound(moduleName));\n+                        }\n+                    }\n+\n+                    // Check whether the given directory is not in a ballerina project.\n+                    if (FormatUtil.notABallerinaProject(sourceRootPath)) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNotBallerinaProject());\n+                    }\n+                    BLangPackage bLangPackage = FormatUtil\n+                            .compileModule(sourceRootPath, getModuleName(moduleName));\n+\n+                    // Iterate and format the ballerina package.\n+                    List<String> formattedFiles = iterateAndFormat(bLangPackage, sourceRootPath, dryRun);\n+                    generateChangeReport(formattedFiles, dryRun);\n+                }\n+            } else {\n+                List<BLangPackage> packages = FormatUtil.compileProject(sourceRootPath);\n+                List<String> formattedFiles = new ArrayList<>();\n+                // Iterate and format all the ballerina packages.\n+                for (BLangPackage bLangPackage : packages) {\n+                    formattedFiles.addAll(iterateAndFormat(bLangPackage, sourceRootPath, dryRun));\n+                }\n+\n+                generateChangeReport(formattedFiles, dryRun);\n+            }\n+        } catch (IOException | NullPointerException e) {\n+            throw LauncherUtils.createLauncherException(Messages.getException());\n+        }\n+    }\n+\n+    private static void generateChangeReport(List<String> formattedFiles, boolean dryRun) {\n+        if (!formattedFiles.isEmpty()) {\n+            StringBuilder fileList = new StringBuilder();\n+            if (dryRun) {\n+                fileList.append(Messages.getFilesToModify()).append(System.lineSeparator());\n+            } else {\n+                fileList.append(Messages.getModifiedFiles()).append(System.lineSeparator());\n+            }\n+            for (String file : formattedFiles) {\n+                fileList.append(file).append(System.lineSeparator());\n+            }\n+            outStream.println(fileList.toString());\n+            if (!dryRun) {\n+                outStream.println(Messages.getSuccessMessage());\n+            }\n+        } else {\n+            outStream.println(Messages.getNoChanges());\n+        }\n+    }\n+\n+    private static String getModuleName(String moduleName) {\n+        String pattern = Pattern.quote(File.separator);\n+        String[] splitedTokens = moduleName.split(pattern);\n+        return splitedTokens[splitedTokens.length - 1];\n+    }\n+\n+    /**\n+     * Compile whole ballerina project.\n+     *\n+     * @param sourceRoot source root\n+     * @return {@link List<BLangPackage>} list of BLangPackages\n+     */\n+    private static List<BLangPackage> compileProject(Path sourceRoot) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compilePackages(false);\n+    }\n+\n+    /**\n+     * Compile only a ballerina module.\n+     *\n+     * @param sourceRoot source root\n+     * @param moduleName name of the module to be compiled\n+     * @return {@link BLangPackage} ballerina package\n+     */\n+    private static BLangPackage compileModule(Path sourceRoot, String moduleName) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compile(moduleName);\n+    }\n+\n+    private static void formatAndWrite(BLangCompilationUnit compilationUnit, Path sourceRootPath,\n+                                       List<String> formattedFiles, boolean dryRun) throws IOException {\n+        String fileName = sourceRootPath.toString() + File.separator\n+                + \"src\"\n+                + File.separator\n+                + compilationUnit.getPosition().getSource().getPackageName()\n+                + File.separator\n+                + compilationUnit.getPosition().getSource().getCompilationUnitName();\n+\n+        // Format and get the formatted source.\n+        String formattedSource = Formatter.format(new String(Files.readAllBytes(Paths.get(fileName)),\n+                StandardCharsets.UTF_8));\n+\n+        if (doChangesAvailable(formattedSource, formattedSource)) {\n+            if (!dryRun) {\n+                // Write formatted content to the file.\n+                FormatUtil.writeFile(fileName, formattedSource);\n+            }\n+            formattedFiles.add(fileName);\n+        }\n+    }\n+\n+    private static List<String> iterateAndFormat(BLangPackage bLangPackage, Path sourceRootPath, boolean dryRun)\n+            throws IOException {\n+        List<String> formattedFiles = new ArrayList<>();\n+\n+        // Iterate compilation units and format.\n+        for (BLangCompilationUnit compilationUnit : bLangPackage.getCompilationUnits()) {\n+            formatAndWrite(compilationUnit, sourceRootPath, formattedFiles, dryRun);\n+        }\n+\n+        // Iterate testable packages and format.\n+        for (BLangTestablePackage testablePackage : bLangPackage.getTestablePkgs()) {\n+            for (BLangCompilationUnit compilationUnit : testablePackage.getCompilationUnits()) {\n+                formatAndWrite(compilationUnit, sourceRootPath, formattedFiles, dryRun);\n+            }\n+        }\n+\n+        return formattedFiles;\n+    }\n+\n+    /**\n+     * Get prepared compiler context.\n+     *\n+     * @param sourceRootPath ballerina compilable source root path\n+     * @return {@link CompilerContext} compiler context\n+     */\n+    private static CompilerContext getCompilerContext(Path sourceRootPath) {\n+        CompilerPhase compilerPhase = CompilerPhase.DEFINE;\n+        CompilerContext context = new CompilerContext();\n+        CompilerOptions options = CompilerOptions.getInstance(context);\n+        options.put(PROJECT_DIR, sourceRootPath.toString());\n+        options.put(OFFLINE, Boolean.toString(false));\n+        options.put(COMPILER_PHASE, compilerPhase.toString());\n+        options.put(SKIP_TESTS, Boolean.toString(false));\n+        options.put(TEST_ENABLED, \"true\");\n+        options.put(LOCK_ENABLED, Boolean.toString(false));\n+        options.put(EXPERIMENTAL_FEATURES_ENABLED, Boolean.toString(true));\n+        options.put(PRESERVE_WHITESPACE, Boolean.toString(true));\n+        options.put(NEW_PARSER_ENABLED, Boolean.toString(false));\n+\n+        return context;\n+    }\n+\n+    /**\n+     * Check whether the given module name exists.\n+     *\n+     * @param module      module name\n+     * @param projectRoot path of the ballerina project root\n+     * @return {@link Boolean} true or false\n+     */\n+    private static boolean isModuleExist(String module, Path projectRoot) {\n+        Path modulePath;\n+        if (module.startsWith(\"src/\")) {\n+            modulePath = projectRoot.resolve(module);\n+        } else {\n+            modulePath = projectRoot.resolve(\"src\").resolve(module);\n+        }\n+\n+        return modulePath.toFile().isDirectory();\n+    }\n+\n+    /**\n+     * Check whether the given path isn't a source root of a ballerina project.\n+     *\n+     * @param path - path where the command is executed from\n+     * @return {@link boolean} true or false\n+     */\n+    private static boolean notABallerinaProject(Path path) {\n+        Path cachePath = path.resolve(\"Ballerina.toml\");\n+        return !cachePath.toFile().exists();\n+    }\n+\n+    /**\n+     * Write content to a file.\n+     *\n+     * @param filePath - path of the file to add the content\n+     * @param content  - content to be added to the file\n+     * @throws IOException - throws and IO exception\n+     */\n+    private static void writeFile(String filePath, String content) throws IOException {\n+        OutputStreamWriter fileWriter = null;\n+        try {\n+            try (FileOutputStream fileStream = new FileOutputStream(new File(filePath))) {\n+                fileWriter = new OutputStreamWriter(fileStream, StandardCharsets.UTF_8);\n+            }\n+            fileWriter.write(content);\n+        } finally {\n+            if (fileWriter != null) {\n+                fileWriter.close();\n+            }\n+        }\n+    }\n+\n+    private static boolean doChangesAvailable(String originalSource, String formattedSource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 330}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjU2MDAz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465656003", "createdAt": "2020-08-12T07:27:22Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNzoyMlrOG_VG5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNzoyMlrOG_VG5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTMwMQ==", "bodyText": "Should there be an entry in this ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469059301", "createdAt": "2020-08-12T07:27:22Z", "author": {"login": "hemikak"}, "path": "misc/formatter/modules/formatter-cli/src/main/resources/META-INF/services/org.ballerinalang.tool.BLauncherCmd", "diffHunk": "@@ -0,0 +1 @@\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjU2NzQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465656741", "createdAt": "2020-08-12T07:28:29Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyODozMFrOG_VJFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyODozMFrOG_VJFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTg2Mg==", "bodyText": "Will this work in windows ? Using resolve function would help. Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469059862", "createdAt": "2020-08-12T07:28:30Z", "author": {"login": "hemikak"}, "path": "misc/formatter/modules/formatter-cli/src/test/java/org/ballerinalang/formatter/cli/FormatCmdTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.tool.BLauncherException;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Format CLI tool test suit for testing tool's exceptions.\n+ */\n+public class FormatCmdTest {\n+    private static final Path RES_DIR = Paths.get(\"src/test/resources/\").toAbsolutePath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjU3Mzk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465657395", "createdAt": "2020-08-12T07:29:28Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyOToyOFrOG_VLEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyOToyOFrOG_VLEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2MDM2OQ==", "bodyText": "Is this TODO still valid ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469060369", "createdAt": "2020-08-12T07:29:28Z", "author": {"login": "hemikak"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/Formatter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerinalang.compiler.syntax.tree.ModulePartNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxTree;\n+import io.ballerinalang.compiler.text.LineRange;\n+import io.ballerinalang.compiler.text.TextDocument;\n+import io.ballerinalang.compiler.text.TextDocuments;\n+\n+/**\n+ * Class that exposes the formatting APIs.\n+ */\n+public class Formatter {\n+\n+    // TODO: Add test cases for syntax error scenarios as well", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjYwMDIw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465660020", "createdAt": "2020-08-12T07:33:31Z", "commit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzozMzozMVrOG_VTnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzozMzozMVrOG_VTnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2MjU1OQ==", "bodyText": "You can use Paths.get().resolve().... instead of using File.separator", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469062559", "createdAt": "2020-08-12T07:33:31Z", "author": {"login": "hemikak"}, "path": "misc/formatter/modules/formatter-cli/src/main/java/org/ballerinalang/formatter/cli/FormatUtil.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.cli;\n+\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.formatter.core.Formatter;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTestablePackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.NEW_PARSER_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * Util class for compilation and format execution for formatting CLI tool.\n+ */\n+class FormatUtil {\n+    static final String CMD_NAME = \"format\";\n+    private static final PrintStream outStream = System.err;\n+    private static EmptyPrintStream emptyPrintStream;\n+\n+    /**\n+     * Execute formatter.\n+     *\n+     * @param argList        argument list from the console\n+     * @param helpFlag       flag to get the help page\n+     * @param dryRun         run the whole formatting\n+     * @param sourceRootPath execution path\n+     */\n+    static void execute(List<String> argList, boolean helpFlag, boolean dryRun, Path sourceRootPath) {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(CMD_NAME);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList != null && argList.size() > 1) {\n+            throw LauncherUtils.createLauncherException(Messages.getArgumentError());\n+        }\n+\n+        String moduleName;\n+        String ballerinaFilePath;\n+\n+        try {\n+            // If parameters are available user has given either the module name or the ballerina file path.\n+            // Else user is in a ballerina project and expecting to format the whole ballerina project\n+            if (argList != null && !argList.isEmpty()) {\n+                if (FormatUtil.isBalFile(argList.get(0))) {\n+                    ballerinaFilePath = argList.get(0);\n+                    Path filePath = Paths.get(ballerinaFilePath);\n+\n+                    // If the file doesn't exist or is a directory.\n+                    if (!filePath.toFile().exists() || filePath.toFile().isDirectory()) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNoBallerinaFile(ballerinaFilePath));\n+                    }\n+\n+                    String source = new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8);\n+                    // Format and get the generated formatted source code content.\n+                    String formattedSourceCode = Formatter.format(source);\n+\n+                    if (doChangesAvailable(source, formattedSourceCode)) {\n+                        if (!dryRun) {\n+                            // Write the formatted content back to the file.\n+                            FormatUtil.writeFile(filePath.toAbsolutePath().toString(), formattedSourceCode);\n+                            outStream.println(Messages.getModifiedFiles() + System.lineSeparator() + ballerinaFilePath);\n+                            outStream.println(System.lineSeparator() + Messages.getSuccessMessage());\n+                        } else {\n+                            outStream.println(Messages.getFilesToModify() + System.lineSeparator() + ballerinaFilePath);\n+                        }\n+                    } else {\n+                        outStream.println(Messages.getNoChanges());\n+                    }\n+                } else if (Paths.get(argList.get(0)).toFile().isFile()) {\n+                    // If file is a regular file but not a ballerina source file\n+                    // throw the following exception.\n+                    throw LauncherUtils.createLauncherException(Messages.getNotABallerinaFile());\n+                } else {\n+                    moduleName = argList.get(0);\n+\n+                    // Check whether the module dir exists.\n+                    if (!FormatUtil.isModuleExist(moduleName, sourceRootPath)) {\n+                        // If module directory doesn't exist and contains a \".\"\n+                        // throw a exception to say file or module doesn't exist.\n+                        // Else throw a exception to say module doesn't exist.\n+                        if (moduleName.contains(\".\")) {\n+                            throw LauncherUtils.createLauncherException(Messages\n+                                    .getNoBallerinaModuleOrFile(moduleName));\n+                        } else {\n+                            throw LauncherUtils.createLauncherException(Messages.getNoModuleFound(moduleName));\n+                        }\n+                    }\n+\n+                    // Check whether the given directory is not in a ballerina project.\n+                    if (FormatUtil.notABallerinaProject(sourceRootPath)) {\n+                        throw LauncherUtils.createLauncherException(Messages.getNotBallerinaProject());\n+                    }\n+                    BLangPackage bLangPackage = FormatUtil\n+                            .compileModule(sourceRootPath, getModuleName(moduleName));\n+\n+                    // Iterate and format the ballerina package.\n+                    List<String> formattedFiles = iterateAndFormat(bLangPackage, sourceRootPath, dryRun);\n+                    generateChangeReport(formattedFiles, dryRun);\n+                }\n+            } else {\n+                List<BLangPackage> packages = FormatUtil.compileProject(sourceRootPath);\n+                List<String> formattedFiles = new ArrayList<>();\n+                // Iterate and format all the ballerina packages.\n+                for (BLangPackage bLangPackage : packages) {\n+                    formattedFiles.addAll(iterateAndFormat(bLangPackage, sourceRootPath, dryRun));\n+                }\n+\n+                generateChangeReport(formattedFiles, dryRun);\n+            }\n+        } catch (IOException | NullPointerException e) {\n+            throw LauncherUtils.createLauncherException(Messages.getException());\n+        }\n+    }\n+\n+    private static void generateChangeReport(List<String> formattedFiles, boolean dryRun) {\n+        if (!formattedFiles.isEmpty()) {\n+            StringBuilder fileList = new StringBuilder();\n+            if (dryRun) {\n+                fileList.append(Messages.getFilesToModify()).append(System.lineSeparator());\n+            } else {\n+                fileList.append(Messages.getModifiedFiles()).append(System.lineSeparator());\n+            }\n+            for (String file : formattedFiles) {\n+                fileList.append(file).append(System.lineSeparator());\n+            }\n+            outStream.println(fileList.toString());\n+            if (!dryRun) {\n+                outStream.println(Messages.getSuccessMessage());\n+            }\n+        } else {\n+            outStream.println(Messages.getNoChanges());\n+        }\n+    }\n+\n+    private static String getModuleName(String moduleName) {\n+        String pattern = Pattern.quote(File.separator);\n+        String[] splitedTokens = moduleName.split(pattern);\n+        return splitedTokens[splitedTokens.length - 1];\n+    }\n+\n+    /**\n+     * Compile whole ballerina project.\n+     *\n+     * @param sourceRoot source root\n+     * @return {@link List<BLangPackage>} list of BLangPackages\n+     */\n+    private static List<BLangPackage> compileProject(Path sourceRoot) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compilePackages(false);\n+    }\n+\n+    /**\n+     * Compile only a ballerina module.\n+     *\n+     * @param sourceRoot source root\n+     * @param moduleName name of the module to be compiled\n+     * @return {@link BLangPackage} ballerina package\n+     */\n+    private static BLangPackage compileModule(Path sourceRoot, String moduleName) throws UnsupportedEncodingException {\n+        emptyPrintStream = new EmptyPrintStream();\n+        CompilerContext context = getCompilerContext(sourceRoot);\n+        Compiler compiler = Compiler.getInstance(context);\n+        // Set an EmptyPrintStream to hide unnecessary outputs from compiler.\n+        compiler.setOutStream(emptyPrintStream);\n+        return compiler.compile(moduleName);\n+    }\n+\n+    private static void formatAndWrite(BLangCompilationUnit compilationUnit, Path sourceRootPath,\n+                                       List<String> formattedFiles, boolean dryRun) throws IOException {\n+        String fileName = sourceRootPath.toString() + File.separator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85029404a6672a4d0d0d519148be5b133324530f"}, "originalPosition": 218}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd11e18d02f89bd7c4083018f0ceaba728cbf5eb", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd11e18d02f89bd7c4083018f0ceaba728cbf5eb", "committedDate": "2020-08-12T07:57:41Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Njg1NjU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465685657", "createdAt": "2020-08-12T08:10:57Z", "commit": {"oid": "bd11e18d02f89bd7c4083018f0ceaba728cbf5eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxMDo1N1rOG_WiSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxMDo1N1rOG_WiSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4MjY5Nw==", "bodyText": "Method never used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469082697", "createdAt": "2020-08-12T08:10:57Z", "author": {"login": "pramodya1994"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/Formatter.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerinalang.compiler.syntax.tree.ModulePartNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxTree;\n+import io.ballerinalang.compiler.text.LineRange;\n+import io.ballerinalang.compiler.text.TextDocument;\n+import io.ballerinalang.compiler.text.TextDocuments;\n+\n+/**\n+ * Class that exposes the formatting APIs.\n+ */\n+public class Formatter {\n+\n+    /**\n+     * Formats the provided source string and returns back the formatted source string.\n+     *\n+     * @param source A Ballerina source in string form\n+     * @return A modified source string after formatting changes\n+     */\n+    public static String format(String source) {\n+        return format(source, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats a line range of the provided SyntaxTree. All the nodes falling within the line range\n+     * specified will be formatted.\n+     *\n+     * @param syntaxTree The complete SyntaxTree, of which a part is to be formatted\n+     * @param range LineRange which specifies the range to be formatted\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree, LineRange range) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11e18d02f89bd7c4083018f0ceaba728cbf5eb"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Njg1OTc0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465685974", "createdAt": "2020-08-12T08:11:28Z", "commit": {"oid": "bd11e18d02f89bd7c4083018f0ceaba728cbf5eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxMToyOFrOG_WjOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxMToyOFrOG_WjOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4MjkzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static String format(String source, FormattingOptions options) {\n          \n          \n            \n                private static String format(String source, FormattingOptions options) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469082936", "createdAt": "2020-08-12T08:11:28Z", "author": {"login": "pramodya1994"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/Formatter.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerinalang.compiler.syntax.tree.ModulePartNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxTree;\n+import io.ballerinalang.compiler.text.LineRange;\n+import io.ballerinalang.compiler.text.TextDocument;\n+import io.ballerinalang.compiler.text.TextDocuments;\n+\n+/**\n+ * Class that exposes the formatting APIs.\n+ */\n+public class Formatter {\n+\n+    /**\n+     * Formats the provided source string and returns back the formatted source string.\n+     *\n+     * @param source A Ballerina source in string form\n+     * @return A modified source string after formatting changes\n+     */\n+    public static String format(String source) {\n+        return format(source, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats a line range of the provided SyntaxTree. All the nodes falling within the line range\n+     * specified will be formatted.\n+     *\n+     * @param syntaxTree The complete SyntaxTree, of which a part is to be formatted\n+     * @param range LineRange which specifies the range to be formatted\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree, LineRange range) {\n+        return format(syntaxTree, range, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats the provided SyntaxTree and returns back a formatted SyntaxTree.\n+     *\n+     * @param syntaxTree The SyntaxTree which is to be formatted\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree) {\n+        return format(syntaxTree, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats the provided source string while using the formatting options provided.\n+     *\n+     * @param source A Ballerina source in string form\n+     * @param options Formatting options that are to be used when formatting\n+     * @return A modified source string after formatting changes\n+     */\n+    public static String format(String source, FormattingOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11e18d02f89bd7c4083018f0ceaba728cbf5eb"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Njg2Mzcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465686371", "createdAt": "2020-08-12T08:12:01Z", "commit": {"oid": "bd11e18d02f89bd7c4083018f0ceaba728cbf5eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxMjowMVrOG_Wkgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxMjowMVrOG_Wkgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4MzI2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static SyntaxTree format(SyntaxTree syntaxTree, LineRange range, FormattingOptions options) {\n          \n          \n            \n                private static SyntaxTree format(SyntaxTree syntaxTree, LineRange range, FormattingOptions options) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469083266", "createdAt": "2020-08-12T08:12:01Z", "author": {"login": "pramodya1994"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/Formatter.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerinalang.compiler.syntax.tree.ModulePartNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxTree;\n+import io.ballerinalang.compiler.text.LineRange;\n+import io.ballerinalang.compiler.text.TextDocument;\n+import io.ballerinalang.compiler.text.TextDocuments;\n+\n+/**\n+ * Class that exposes the formatting APIs.\n+ */\n+public class Formatter {\n+\n+    /**\n+     * Formats the provided source string and returns back the formatted source string.\n+     *\n+     * @param source A Ballerina source in string form\n+     * @return A modified source string after formatting changes\n+     */\n+    public static String format(String source) {\n+        return format(source, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats a line range of the provided SyntaxTree. All the nodes falling within the line range\n+     * specified will be formatted.\n+     *\n+     * @param syntaxTree The complete SyntaxTree, of which a part is to be formatted\n+     * @param range LineRange which specifies the range to be formatted\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree, LineRange range) {\n+        return format(syntaxTree, range, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats the provided SyntaxTree and returns back a formatted SyntaxTree.\n+     *\n+     * @param syntaxTree The SyntaxTree which is to be formatted\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree) {\n+        return format(syntaxTree, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats the provided source string while using the formatting options provided.\n+     *\n+     * @param source A Ballerina source in string form\n+     * @param options Formatting options that are to be used when formatting\n+     * @return A modified source string after formatting changes\n+     */\n+    public static String format(String source, FormattingOptions options) {\n+        TextDocument textDocument = TextDocuments.from(source);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument);\n+        FormattingTreeModifier treeModifier = new FormattingTreeModifier();\n+        ModulePartNode newModulePart = treeModifier.transform((ModulePartNode) syntaxTree.rootNode());\n+        if (options != null) {\n+            treeModifier.setFormattingOptions(options);\n+        }\n+        return syntaxTree.modifyWith(newModulePart).toSourceCode();\n+    }\n+\n+    /**\n+     * Formats a line range of the provided SyntaxTree while using the formatting options provided. All the\n+     * nodes falling within the line range provided will be formatted.\n+     *\n+     * @param syntaxTree The complete SyntaxTree, of which a part is to be formatted\n+     * @param range LineRange which needs to be formatted\n+     * @param options Formatting options that are to be used when formatting\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree, LineRange range, FormattingOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11e18d02f89bd7c4083018f0ceaba728cbf5eb"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Njg2NjY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465686666", "createdAt": "2020-08-12T08:12:26Z", "commit": {"oid": "bd11e18d02f89bd7c4083018f0ceaba728cbf5eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxMjoyN1rOG_WlbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxMjoyN1rOG_WlbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4MzUwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static SyntaxTree format(SyntaxTree syntaxTree, FormattingOptions options) {\n          \n          \n            \n                private static SyntaxTree format(SyntaxTree syntaxTree, FormattingOptions options) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469083500", "createdAt": "2020-08-12T08:12:27Z", "author": {"login": "pramodya1994"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/Formatter.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerinalang.compiler.syntax.tree.ModulePartNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxTree;\n+import io.ballerinalang.compiler.text.LineRange;\n+import io.ballerinalang.compiler.text.TextDocument;\n+import io.ballerinalang.compiler.text.TextDocuments;\n+\n+/**\n+ * Class that exposes the formatting APIs.\n+ */\n+public class Formatter {\n+\n+    /**\n+     * Formats the provided source string and returns back the formatted source string.\n+     *\n+     * @param source A Ballerina source in string form\n+     * @return A modified source string after formatting changes\n+     */\n+    public static String format(String source) {\n+        return format(source, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats a line range of the provided SyntaxTree. All the nodes falling within the line range\n+     * specified will be formatted.\n+     *\n+     * @param syntaxTree The complete SyntaxTree, of which a part is to be formatted\n+     * @param range LineRange which specifies the range to be formatted\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree, LineRange range) {\n+        return format(syntaxTree, range, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats the provided SyntaxTree and returns back a formatted SyntaxTree.\n+     *\n+     * @param syntaxTree The SyntaxTree which is to be formatted\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree) {\n+        return format(syntaxTree, new FormattingOptions());\n+    }\n+\n+    /**\n+     * Formats the provided source string while using the formatting options provided.\n+     *\n+     * @param source A Ballerina source in string form\n+     * @param options Formatting options that are to be used when formatting\n+     * @return A modified source string after formatting changes\n+     */\n+    public static String format(String source, FormattingOptions options) {\n+        TextDocument textDocument = TextDocuments.from(source);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument);\n+        FormattingTreeModifier treeModifier = new FormattingTreeModifier();\n+        ModulePartNode newModulePart = treeModifier.transform((ModulePartNode) syntaxTree.rootNode());\n+        if (options != null) {\n+            treeModifier.setFormattingOptions(options);\n+        }\n+        return syntaxTree.modifyWith(newModulePart).toSourceCode();\n+    }\n+\n+    /**\n+     * Formats a line range of the provided SyntaxTree while using the formatting options provided. All the\n+     * nodes falling within the line range provided will be formatted.\n+     *\n+     * @param syntaxTree The complete SyntaxTree, of which a part is to be formatted\n+     * @param range LineRange which needs to be formatted\n+     * @param options Formatting options that are to be used when formatting\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree, LineRange range, FormattingOptions options) {\n+        FormattingTreeModifier treeModifier = new FormattingTreeModifier();\n+        ModulePartNode modulePartNode = syntaxTree.rootNode();\n+        treeModifier.setLineRange(range);\n+        if (options != null) {\n+            treeModifier.setFormattingOptions(options);\n+        }\n+        return syntaxTree.modifyWith(treeModifier.transform(modulePartNode));\n+    }\n+\n+    /**\n+     * Formats the provided SyntaxTree while using the formatting options provided.\n+     *\n+     * @param syntaxTree The SyntaxTree which is to be formatted\n+     * @param options Formatting options that are to be used when formatting\n+     * @return The modified SyntaxTree after formatting changes\n+     */\n+    public static SyntaxTree format(SyntaxTree syntaxTree, FormattingOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11e18d02f89bd7c4083018f0ceaba728cbf5eb"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cd5c53f28192688cf2a96e1d6fbdd66cd64d6e1", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2cd5c53f28192688cf2a96e1d6fbdd66cd64d6e1", "committedDate": "2020-08-12T08:39:55Z", "message": "Merge branch 'master' into formatterImpl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzEwMjgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465710283", "createdAt": "2020-08-12T08:42:10Z", "commit": {"oid": "2cd5c53f28192688cf2a96e1d6fbdd66cd64d6e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzE1OTQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465715941", "createdAt": "2020-08-12T08:49:39Z", "commit": {"oid": "2cd5c53f28192688cf2a96e1d6fbdd66cd64d6e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0OTozOVrOG_X8fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0OTozOVrOG_X8fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNTc4OQ==", "bodyText": "Why do we have a test class for each expression or construct type. Can we simply rely on a file structure to organize the test cases and run from a single test runner.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#discussion_r469105789", "createdAt": "2020-08-12T08:49:39Z", "author": {"login": "hevayo"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/expressions/StringTemplateExpressionsTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.formatter.core.expressions;\n+\n+import org.ballerinalang.formatter.core.FormatterTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Test the formatting of string template expressions.\n+ *\n+ * @since 2.0.0\n+ */\n+public class StringTemplateExpressionsTest extends FormatterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd5c53f28192688cf2a96e1d6fbdd66cd64d6e1"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzE2NjMx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25122#pullrequestreview-465716631", "createdAt": "2020-08-12T08:50:29Z", "commit": {"oid": "2cd5c53f28192688cf2a96e1d6fbdd66cd64d6e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4991, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}