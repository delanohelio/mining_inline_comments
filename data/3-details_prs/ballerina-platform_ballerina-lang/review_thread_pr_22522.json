{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODA3Mzgw", "number": 22522, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNjo1MlrODyC3iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxODozMVrODyC59g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODAyMzc5OnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNjo1MlrOGF29GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNjo1MlrOGF29GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5NjQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `http:ListenerError` if failed to respond\n          \n          \n            \n            # + return - An `http:ListenerError` if failed to respond or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22522#discussion_r408796440", "createdAt": "2020-04-15T12:16:52Z", "author": {"login": "daneshk"}, "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -172,6 +172,65 @@ public type Caller client object {\n         response.statusCode = STATUS_ACCEPTED;\n         return self->respond(response);\n     }\n+\n+# Sends the outbound response to the caller with the status 204 No Content. If the given response contains a body\n+# that will be removed.\n+# ```ballerina\n+# http:ListenerError? err = caller->noContent();\n+# ```\n+#\n+# + message - The outbound response, which is optional\n+# + return - An `http:ListenerError` if failed to respond", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fef8498cd76a9ca8fb2aa565c4b21679810e7bd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODAyNjkxOnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNzo0M1rOGF2-6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNzo0M1rOGF2-6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5NjkwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `http:ListenerError` if failed to respond\n          \n          \n            \n            # + return - An `http:ListenerError` if failed to respond or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22522#discussion_r408796906", "createdAt": "2020-04-15T12:17:43Z", "author": {"login": "daneshk"}, "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -172,6 +172,65 @@ public type Caller client object {\n         response.statusCode = STATUS_ACCEPTED;\n         return self->respond(response);\n     }\n+\n+# Sends the outbound response to the caller with the status 204 No Content. If the given response contains a body\n+# that will be removed.\n+# ```ballerina\n+# http:ListenerError? err = caller->noContent();\n+# ```\n+#\n+# + message - The outbound response, which is optional\n+# + return - An `http:ListenerError` if failed to respond\n+    public remote function noContent(Response? message = ()) returns ListenerError? {\n+        Response newResponse = new;\n+        if message is Response {\n+            newResponse = message;\n+        }\n+        newResponse.statusCode = STATUS_NO_CONTENT;\n+        return self->respond(newResponse);\n+    }\n+\n+# Sends the outbound response to the caller with the status 400 Bad Request.\n+# ```ballerina\n+# http:ListenerError? err = caller->badRequest();\n+# ```\n+#\n+# + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`, `io:ByteChannel`,\n+#             or `mime:Entity[]`\n+# + return - An `http:ListenerError` if failed to respond", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fef8498cd76a9ca8fb2aa565c4b21679810e7bd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODAyOTAyOnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxODoxNlrOGF3AKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxODoxNlrOGF3AKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5NzIyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `http:ListenerError` if failed to respond\n          \n          \n            \n            # + return - An `http:ListenerError` if failed to respond or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22522#discussion_r408797224", "createdAt": "2020-04-15T12:18:16Z", "author": {"login": "daneshk"}, "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -172,6 +172,65 @@ public type Caller client object {\n         response.statusCode = STATUS_ACCEPTED;\n         return self->respond(response);\n     }\n+\n+# Sends the outbound response to the caller with the status 204 No Content. If the given response contains a body\n+# that will be removed.\n+# ```ballerina\n+# http:ListenerError? err = caller->noContent();\n+# ```\n+#\n+# + message - The outbound response, which is optional\n+# + return - An `http:ListenerError` if failed to respond\n+    public remote function noContent(Response? message = ()) returns ListenerError? {\n+        Response newResponse = new;\n+        if message is Response {\n+            newResponse = message;\n+        }\n+        newResponse.statusCode = STATUS_NO_CONTENT;\n+        return self->respond(newResponse);\n+    }\n+\n+# Sends the outbound response to the caller with the status 400 Bad Request.\n+# ```ballerina\n+# http:ListenerError? err = caller->badRequest();\n+# ```\n+#\n+# + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`, `io:ByteChannel`,\n+#             or `mime:Entity[]`\n+# + return - An `http:ListenerError` if failed to respond\n+    public remote function badRequest(ResponseMessage message = ()) returns ListenerError? {\n+        Response response = buildResponse(message);\n+        response.statusCode = STATUS_BAD_REQUEST;\n+        return self->respond(response);\n+    }\n+\n+# Sends the outbound response to the caller with the status 404 Not Found.\n+# ```ballerina\n+# http:ListenerError? err = caller->notFound();\n+# ```\n+#\n+# + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`, `io:ByteChannel`,\n+#             or `mime:Entity[]`\n+# + return - An `http:ListenerError` if failed to respond\n+    public remote function notFound(ResponseMessage message = ()) returns ListenerError? {\n+        Response response = buildResponse(message);\n+        response.statusCode = STATUS_NOT_FOUND;\n+        return self->respond(response);\n+    }\n+\n+# Sends the outbound response to the caller with the status 500 Internal Server Error.\n+# ```ballerina\n+# http:ListenerError? err = caller->internalServerError();\n+# ```\n+#\n+# + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`, `io:ByteChannel`,\n+#             or `mime:Entity[]`\n+# + return - An `http:ListenerError` if failed to respond", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fef8498cd76a9ca8fb2aa565c4b21679810e7bd"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODAyOTk4OnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxODozMVrOGF3AvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxODozMVrOGF3AvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5NzM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `http:ListenerError` if failed to respond\n          \n          \n            \n            # + return - An `http:ListenerError` if failed to respond or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22522#discussion_r408797372", "createdAt": "2020-04-15T12:18:31Z", "author": {"login": "daneshk"}, "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -172,6 +172,65 @@ public type Caller client object {\n         response.statusCode = STATUS_ACCEPTED;\n         return self->respond(response);\n     }\n+\n+# Sends the outbound response to the caller with the status 204 No Content. If the given response contains a body\n+# that will be removed.\n+# ```ballerina\n+# http:ListenerError? err = caller->noContent();\n+# ```\n+#\n+# + message - The outbound response, which is optional\n+# + return - An `http:ListenerError` if failed to respond\n+    public remote function noContent(Response? message = ()) returns ListenerError? {\n+        Response newResponse = new;\n+        if message is Response {\n+            newResponse = message;\n+        }\n+        newResponse.statusCode = STATUS_NO_CONTENT;\n+        return self->respond(newResponse);\n+    }\n+\n+# Sends the outbound response to the caller with the status 400 Bad Request.\n+# ```ballerina\n+# http:ListenerError? err = caller->badRequest();\n+# ```\n+#\n+# + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`, `io:ByteChannel`,\n+#             or `mime:Entity[]`\n+# + return - An `http:ListenerError` if failed to respond\n+    public remote function badRequest(ResponseMessage message = ()) returns ListenerError? {\n+        Response response = buildResponse(message);\n+        response.statusCode = STATUS_BAD_REQUEST;\n+        return self->respond(response);\n+    }\n+\n+# Sends the outbound response to the caller with the status 404 Not Found.\n+# ```ballerina\n+# http:ListenerError? err = caller->notFound();\n+# ```\n+#\n+# + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`, `io:ByteChannel`,\n+#             or `mime:Entity[]`\n+# + return - An `http:ListenerError` if failed to respond", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fef8498cd76a9ca8fb2aa565c4b21679810e7bd"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4049, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}