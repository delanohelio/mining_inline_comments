{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTk2OTE4", "number": 23528, "title": "Add implementation of Dependency Resolver API", "bodyText": "Purpose\n\n$title\n\nFixes #23352\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-27T04:19:31Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528", "merged": true, "mergeCommit": {"oid": "50b1047ec2863ed7fe2c87c51a44303d62b229db"}, "closed": true, "closedAt": "2020-05-27T15:54:35Z", "author": {"login": "suganyasuven"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckwkPZgH2gAyNDIzNTk2OTE4OmVjNjA4MDllODFlMTE0OGVjOThlN2Q2YzQ4ZGIzZjc2ODczYzViODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclYFqNgFqTQxOTEyNDEwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ec60809e81e1148ec98e7d6c48db3f76873c5b88", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec60809e81e1148ec98e7d6c48db3f76873c5b88", "committedDate": "2020-05-25T14:02:23Z", "message": "Implement dependency resolver API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c48a257bcdfb97e3e8797e8241f5282b1d4a2b3b", "author": {"user": {"login": "hevayo", "name": "Joseph Fonseka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c48a257bcdfb97e3e8797e8241f5282b1d4a2b3b", "committedDate": "2020-05-26T08:39:52Z", "message": "Merge pull request #23480 from suganyasuven/jar-resolver\n\nImplement dependency resolver API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e16c4aac217a328afc232ce526b334e51eb1f3d1", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e16c4aac217a328afc232ce526b334e51eb1f3d1", "committedDate": "2020-05-26T12:06:08Z", "message": "Refactor the implementation of dependency resolver API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039", "author": {"user": {"login": "hevayo", "name": "Joseph Fonseka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b7813fe98e73b1c3744db627f134197c1379039", "committedDate": "2020-05-26T13:11:31Z", "message": "Merge pull request #23512 from suganyasuven/jar-resolver\n\nRefactor the implementation of dependency resolver API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDA5NzMz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419009733", "createdAt": "2020-05-27T09:19:53Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxOTo1M1rOGbAxBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxOTo1M1rOGbAxBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NzI4Nw==", "bodyText": "The license header is missing.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430977287", "createdAt": "2020-05-27T09:19:53Z", "author": {"login": "IrushiL"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/NativeDependencyResolverImpl.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package org.ballerinalang.packerina;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDEwNDI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419010427", "createdAt": "2020-05-27T09:20:46Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMDo0NlrOGbAzMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMDo0NlrOGbAzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3Nzg0Mg==", "bodyText": "Please include license header", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430977842", "createdAt": "2020-05-27T09:20:46Z", "author": {"login": "keizer619"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/NativeDependencyResolver.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.wso2.ballerinalang.compiler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDExNzgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419011783", "createdAt": "2020-05-27T09:22:32Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMjozMlrOGbA3Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMjozMlrOGbA3Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3ODg5NA==", "bodyText": "License header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430978894", "createdAt": "2020-05-27T09:22:32Z", "author": {"login": "IrushiL"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/NativeDependencyResolver.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.wso2.ballerinalang.compiler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDEyNjk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419012695", "createdAt": "2020-05-27T09:23:38Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMzozOFrOGbA6HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMzozOFrOGbA6HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTYxMw==", "bodyText": "Extra line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430979613", "createdAt": "2020-05-27T09:23:38Z", "author": {"login": "IrushiL"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/NativeDependencyResolver.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.wso2.ballerinalang.compiler;\n+\n+import org.ballerinalang.model.elements.PackageID;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+/**\n+ * Contains methods to resolve the module jars and native libraries.\n+ *\n+ * @since 1.3.0\n+ */\n+public interface NativeDependencyResolver {\n+\n+    Path moduleJar(PackageID packageID, String platform);\n+\n+    List<Path> nativeDependencies(PackageID packageID);\n+\n+    List<Path> nativeDependenciesForTests(PackageID packageID);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDEzNzQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419013741", "createdAt": "2020-05-27T09:24:57Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyNDo1N1rOGbA9RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyNDo1N1rOGbA9RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MDQyMA==", "bodyText": "Since 1.3.0 is an old release I was wondering if this is correct. Same for the NativeDependencyResolverImpl class.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430980420", "createdAt": "2020-05-27T09:24:57Z", "author": {"login": "IrushiL"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/NativeDependencyResolver.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.wso2.ballerinalang.compiler;\n+\n+import org.ballerinalang.model.elements.PackageID;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+/**\n+ * Contains methods to resolve the module jars and native libraries.\n+ *\n+ * @since 1.3.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDE0MDc4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419014078", "createdAt": "2020-05-27T09:25:25Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyNToyNVrOGbA-ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyNToyNVrOGbA-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MDcwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    supportedPlatforms.add(\"any\");\n          \n          \n            \n                    supportedPlatforms.add(ProgramFileConstants.ANY_PLATFORM);\n          \n      \n    \n    \n  \n\nCan we use this content without adding a String here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430980709", "createdAt": "2020-05-27T09:25:25Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/NativeDependencyResolverImpl.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package org.ballerinalang.packerina;\n+\n+import com.moandjiezana.toml.Toml;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.ballerinalang.toml.model.Dependency;\n+import org.ballerinalang.toml.model.Library;\n+import org.ballerinalang.toml.model.Manifest;\n+import org.ballerinalang.toml.parser.ManifestProcessor;\n+import org.wso2.ballerinalang.compiler.NativeDependencyResolver;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BALO_PLATFORM_LIB_DIR_NAME;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_JAR_EXT;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_PKG_DEFAULT_VERSION;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.DIST_BIR_CACHE_DIR_NAME;\n+\n+/**\n+ * Resolves jars and native libs for modules.\n+ *\n+ * @since 1.3.0\n+ */\n+public class NativeDependencyResolverImpl implements NativeDependencyResolver {\n+    private static final CompilerContext.Key<NativeDependencyResolver> JAR_RESOLVER_KEY = new CompilerContext.Key<>();\n+    private List<String> supportedPlatforms = Arrays.stream(ProgramFileConstants.SUPPORTED_PLATFORMS)\n+            .collect(Collectors.toList());\n+    private final BuildContext buildContext;\n+    private final Path sourceRootPath;\n+    private final String balHomePath;\n+    private final Manifest manifest;\n+    private boolean skipCopyLibsFromDist;\n+\n+    public static NativeDependencyResolver getInstance(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        NativeDependencyResolver nativeDependencyResolver = context.get(JAR_RESOLVER_KEY);\n+        if (nativeDependencyResolver == null) {\n+            nativeDependencyResolver = new NativeDependencyResolverImpl(buildContext, skipCopyLibsFromDist);\n+        }\n+        context.put(JAR_RESOLVER_KEY, nativeDependencyResolver);\n+        return nativeDependencyResolver;\n+    }\n+\n+    private NativeDependencyResolverImpl(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        this.buildContext = buildContext;\n+        this.manifest = ManifestProcessor.getInstance(context).getManifest();\n+        this.sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n+        this.skipCopyLibsFromDist = skipCopyLibsFromDist;\n+        this.balHomePath = buildContext.get(BuildContextField.HOME_REPO).toString();\n+        supportedPlatforms.add(\"any\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDIwNTM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419020534", "createdAt": "2020-05-27T09:33:31Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTozMzozMVrOGbBR8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTozMzozMVrOGbBR8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4NTcxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (baloPath != null && Files.exists(baloPath)) {\n          \n          \n            \n                        if (baloPath != null && baloPath.toFile().exists()) {\n          \n      \n    \n    \n  \n\nAccording to SonarLint Java 8's Files.exists() method has noticibly poor performance in JDK8, So Shall we use toFile().exists()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430985714", "createdAt": "2020-05-27T09:33:31Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/NativeDependencyResolverImpl.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package org.ballerinalang.packerina;\n+\n+import com.moandjiezana.toml.Toml;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.ballerinalang.toml.model.Dependency;\n+import org.ballerinalang.toml.model.Library;\n+import org.ballerinalang.toml.model.Manifest;\n+import org.ballerinalang.toml.parser.ManifestProcessor;\n+import org.wso2.ballerinalang.compiler.NativeDependencyResolver;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BALO_PLATFORM_LIB_DIR_NAME;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_JAR_EXT;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_PKG_DEFAULT_VERSION;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.DIST_BIR_CACHE_DIR_NAME;\n+\n+/**\n+ * Resolves jars and native libs for modules.\n+ *\n+ * @since 1.3.0\n+ */\n+public class NativeDependencyResolverImpl implements NativeDependencyResolver {\n+    private static final CompilerContext.Key<NativeDependencyResolver> JAR_RESOLVER_KEY = new CompilerContext.Key<>();\n+    private List<String> supportedPlatforms = Arrays.stream(ProgramFileConstants.SUPPORTED_PLATFORMS)\n+            .collect(Collectors.toList());\n+    private final BuildContext buildContext;\n+    private final Path sourceRootPath;\n+    private final String balHomePath;\n+    private final Manifest manifest;\n+    private boolean skipCopyLibsFromDist;\n+\n+    public static NativeDependencyResolver getInstance(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        NativeDependencyResolver nativeDependencyResolver = context.get(JAR_RESOLVER_KEY);\n+        if (nativeDependencyResolver == null) {\n+            nativeDependencyResolver = new NativeDependencyResolverImpl(buildContext, skipCopyLibsFromDist);\n+        }\n+        context.put(JAR_RESOLVER_KEY, nativeDependencyResolver);\n+        return nativeDependencyResolver;\n+    }\n+\n+    private NativeDependencyResolverImpl(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        this.buildContext = buildContext;\n+        this.manifest = ManifestProcessor.getInstance(context).getManifest();\n+        this.sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n+        this.skipCopyLibsFromDist = skipCopyLibsFromDist;\n+        this.balHomePath = buildContext.get(BuildContextField.HOME_REPO).toString();\n+        supportedPlatforms.add(\"any\");\n+    }\n+\n+    @Override\n+    public Path moduleJar(PackageID packageID, String platform) {\n+        // Look if it is a project module.\n+        if (isProjectModule(packageID)) {\n+            // If so fetch from project balo cache\n+            return buildContext.getBaloFromTarget(packageID);\n+        } else if (isPathDependency(packageID)) {\n+            // If so fetch from project jar cache\n+            return buildContext.getJarPathFromTargetCache(packageID);\n+        } else if (isModuleInDistribution(packageID)) {\n+            return getJarFromDistribution(packageID);\n+        } else {\n+            // If not fetch from home balo cache.\n+            return buildContext.getBaloFromHomeCache(packageID, platform);\n+        }\n+    }\n+\n+    @Override\n+    public List<Path> nativeDependencies(PackageID packageID) {\n+        List<Path> modulePlatformLibs = new ArrayList<>();\n+        // copy platform libs for all modules(imported modules as well)\n+        addPlatformLibs(packageID, modulePlatformLibs);\n+\n+        if (isProjectModule(packageID)) {\n+            return modulePlatformLibs;\n+        } else if (isPathDependency(packageID)) {\n+            addLibsFromBaloDependency(packageID, modulePlatformLibs);\n+        } else if (isModuleInDistribution(packageID)) {\n+            addLibsFromDistribution(packageID, modulePlatformLibs);\n+        } else {\n+            addLibsFromHomeBaloCache(packageID, modulePlatformLibs);\n+        }\n+        return modulePlatformLibs;\n+    }\n+\n+    @Override\n+    public List<Path> nativeDependenciesForTests(PackageID packageID) {\n+        List<Path> testPlatformLibs = new ArrayList<>();\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+        if (libraries != null) {\n+            for (Library library : libraries) {\n+                if ((library.getModules() == null ||\n+                        Arrays.asList(library.getModules()).contains(packageID.name.value)) &&\n+                        (library.getScope() != null && library.getScope().equalsIgnoreCase(\"testOnly\"))) {\n+                    String libFilePath = library.getPath();\n+                    if (libFilePath == null) {\n+                        continue;\n+                    }\n+                    Path nativeFile = sourceRootPath.resolve(Paths.get(libFilePath));\n+                    testPlatformLibs.add(nativeFile);\n+                }\n+            }\n+        }\n+        return testPlatformLibs;\n+    }\n+\n+    private boolean isModuleInDistribution(PackageID packageID) {\n+        return getTomlFilePath(packageID).exists();\n+    }\n+\n+    private File getTomlFilePath(PackageID packageID) {\n+        String version = BLANG_PKG_DEFAULT_VERSION;\n+        if (!packageID.version.value.equals(\"\")) {\n+            version = packageID.version.value;\n+        }\n+\n+        return Paths.get(balHomePath, DIST_BIR_CACHE_DIR_NAME, packageID.orgName.value,\n+                packageID.name.value, version, \"Ballerina.toml\").toFile();\n+    }\n+\n+    private boolean isPathDependency(PackageID packageID) {\n+        return buildContext.getImportPathDependency(packageID).isPresent();\n+    }\n+\n+    private boolean isProjectModule(PackageID packageID) {\n+        return manifest.getProject().getOrgName().equals(packageID.orgName.value) &&\n+                ProjectDirs.isModuleExist(sourceRootPath, packageID.name.value);\n+    }\n+\n+    private void addLibsFromHomeBaloCache(PackageID packageID, List<Path> modulePlatformLibs) {\n+        for (String platform : supportedPlatforms) {\n+            Path baloPath = buildContext.getBaloFromHomeCache(packageID, platform);\n+            if (baloPath != null && Files.exists(baloPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDIxMTg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419021187", "createdAt": "2020-05-27T09:34:20Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTozNDoyMVrOGbBTyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTozNDoyMVrOGbBTyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4NjE4Ng==", "bodyText": "Shall we remove this extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430986186", "createdAt": "2020-05-27T09:34:21Z", "author": {"login": "keizer619"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/NativeDependencyResolverImpl.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package org.ballerinalang.packerina;\n+\n+import com.moandjiezana.toml.Toml;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.ballerinalang.toml.model.Dependency;\n+import org.ballerinalang.toml.model.Library;\n+import org.ballerinalang.toml.model.Manifest;\n+import org.ballerinalang.toml.parser.ManifestProcessor;\n+import org.wso2.ballerinalang.compiler.NativeDependencyResolver;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BALO_PLATFORM_LIB_DIR_NAME;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_JAR_EXT;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_PKG_DEFAULT_VERSION;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.DIST_BIR_CACHE_DIR_NAME;\n+\n+/**\n+ * Resolves jars and native libs for modules.\n+ *\n+ * @since 1.3.0\n+ */\n+public class NativeDependencyResolverImpl implements NativeDependencyResolver {\n+    private static final CompilerContext.Key<NativeDependencyResolver> JAR_RESOLVER_KEY = new CompilerContext.Key<>();\n+    private List<String> supportedPlatforms = Arrays.stream(ProgramFileConstants.SUPPORTED_PLATFORMS)\n+            .collect(Collectors.toList());\n+    private final BuildContext buildContext;\n+    private final Path sourceRootPath;\n+    private final String balHomePath;\n+    private final Manifest manifest;\n+    private boolean skipCopyLibsFromDist;\n+\n+    public static NativeDependencyResolver getInstance(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        NativeDependencyResolver nativeDependencyResolver = context.get(JAR_RESOLVER_KEY);\n+        if (nativeDependencyResolver == null) {\n+            nativeDependencyResolver = new NativeDependencyResolverImpl(buildContext, skipCopyLibsFromDist);\n+        }\n+        context.put(JAR_RESOLVER_KEY, nativeDependencyResolver);\n+        return nativeDependencyResolver;\n+    }\n+\n+    private NativeDependencyResolverImpl(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        this.buildContext = buildContext;\n+        this.manifest = ManifestProcessor.getInstance(context).getManifest();\n+        this.sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n+        this.skipCopyLibsFromDist = skipCopyLibsFromDist;\n+        this.balHomePath = buildContext.get(BuildContextField.HOME_REPO).toString();\n+        supportedPlatforms.add(\"any\");\n+    }\n+\n+    @Override\n+    public Path moduleJar(PackageID packageID, String platform) {\n+        // Look if it is a project module.\n+        if (isProjectModule(packageID)) {\n+            // If so fetch from project balo cache\n+            return buildContext.getBaloFromTarget(packageID);\n+        } else if (isPathDependency(packageID)) {\n+            // If so fetch from project jar cache\n+            return buildContext.getJarPathFromTargetCache(packageID);\n+        } else if (isModuleInDistribution(packageID)) {\n+            return getJarFromDistribution(packageID);\n+        } else {\n+            // If not fetch from home balo cache.\n+            return buildContext.getBaloFromHomeCache(packageID, platform);\n+        }\n+    }\n+\n+    @Override\n+    public List<Path> nativeDependencies(PackageID packageID) {\n+        List<Path> modulePlatformLibs = new ArrayList<>();\n+        // copy platform libs for all modules(imported modules as well)\n+        addPlatformLibs(packageID, modulePlatformLibs);\n+\n+        if (isProjectModule(packageID)) {\n+            return modulePlatformLibs;\n+        } else if (isPathDependency(packageID)) {\n+            addLibsFromBaloDependency(packageID, modulePlatformLibs);\n+        } else if (isModuleInDistribution(packageID)) {\n+            addLibsFromDistribution(packageID, modulePlatformLibs);\n+        } else {\n+            addLibsFromHomeBaloCache(packageID, modulePlatformLibs);\n+        }\n+        return modulePlatformLibs;\n+    }\n+\n+    @Override\n+    public List<Path> nativeDependenciesForTests(PackageID packageID) {\n+        List<Path> testPlatformLibs = new ArrayList<>();\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+        if (libraries != null) {\n+            for (Library library : libraries) {\n+                if ((library.getModules() == null ||\n+                        Arrays.asList(library.getModules()).contains(packageID.name.value)) &&\n+                        (library.getScope() != null && library.getScope().equalsIgnoreCase(\"testOnly\"))) {\n+                    String libFilePath = library.getPath();\n+                    if (libFilePath == null) {\n+                        continue;\n+                    }\n+                    Path nativeFile = sourceRootPath.resolve(Paths.get(libFilePath));\n+                    testPlatformLibs.add(nativeFile);\n+                }\n+            }\n+        }\n+        return testPlatformLibs;\n+    }\n+\n+    private boolean isModuleInDistribution(PackageID packageID) {\n+        return getTomlFilePath(packageID).exists();\n+    }\n+\n+    private File getTomlFilePath(PackageID packageID) {\n+        String version = BLANG_PKG_DEFAULT_VERSION;\n+        if (!packageID.version.value.equals(\"\")) {\n+            version = packageID.version.value;\n+        }\n+\n+        return Paths.get(balHomePath, DIST_BIR_CACHE_DIR_NAME, packageID.orgName.value,\n+                packageID.name.value, version, \"Ballerina.toml\").toFile();\n+    }\n+\n+    private boolean isPathDependency(PackageID packageID) {\n+        return buildContext.getImportPathDependency(packageID).isPresent();\n+    }\n+\n+    private boolean isProjectModule(PackageID packageID) {\n+        return manifest.getProject().getOrgName().equals(packageID.orgName.value) &&\n+                ProjectDirs.isModuleExist(sourceRootPath, packageID.name.value);\n+    }\n+\n+    private void addLibsFromHomeBaloCache(PackageID packageID, List<Path> modulePlatformLibs) {\n+        for (String platform : supportedPlatforms) {\n+            Path baloPath = buildContext.getBaloFromHomeCache(packageID, platform);\n+            if (baloPath != null && Files.exists(baloPath)) {\n+                addLibsFromBalo(baloPath, modulePlatformLibs);\n+            }\n+        }\n+    }\n+\n+    private void addLibsFromBaloDependency(PackageID packageID, List<Path> modulePlatformLibs) {\n+        addLibsFromBalo(buildContext.getImportPathDependency(packageID).get().getMetadata().getPath(),\n+                modulePlatformLibs);\n+    }\n+\n+    private void addLibsFromDistribution(PackageID packageID, List<Path> modulePlatformLibs) {\n+        List<Path> dependencies = getDependenciesFromDist(packageID);\n+        if (dependencies != null) {\n+            modulePlatformLibs.addAll(dependencies);\n+        }\n+    }\n+\n+    private void addPlatformLibs(PackageID packageID, List<Path> modulePlatformLibs) {\n+        List<Path> platformLibs = new ArrayList<>();\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+\n+        Optional<Dependency> importPathDependency = buildContext.getImportPathDependency(packageID);\n+        if (libraries != null) {\n+            for (Library library : libraries) {\n+                if ((library.getModules() == null ||\n+                        Arrays.asList(library.getModules()).contains(packageID.name.value) ||\n+                        Arrays.asList(library.getModules()).contains(packageID.orgName.value + \"/\" +\n+                                packageID.name.value)) &&\n+                        !(library.getScope() != null && library.getScope().equalsIgnoreCase(\"testOnly\"))) {\n+                    String libFilePath = library.getPath();\n+                    if (libFilePath == null) {\n+                        continue;\n+                    }\n+\n+                    Path nativeFile = sourceRootPath.resolve(Paths.get(libFilePath));\n+                    if (importPathDependency.isPresent()) {\n+                        platformLibs.add(nativeFile.getFileName());\n+                    }\n+                    modulePlatformLibs.add(nativeFile);\n+                }\n+            }\n+        }\n+\n+        importPathDependency.ifPresent(dependency -> validateBaloDependencies(packageID, platformLibs,\n+                dependency.getMetadata().getPath()));\n+    }\n+\n+    private void validateBaloDependencies(PackageID packageID, List<Path> platformLibs, Path importDependencyPath) {\n+        Manifest manifestFromBalo = RepoUtils.getManifestFromBalo(importDependencyPath);\n+        List<Library> baloDependencies = manifestFromBalo.getPlatform().libraries;\n+        List<Path> baloCompileScopeDependencies = new ArrayList<>();\n+        if (baloDependencies == null) {\n+            return;\n+        }\n+\n+        for (Library baloTomlLib : baloDependencies) {\n+            if (baloTomlLib.getScope() != null && baloTomlLib.getScope().equalsIgnoreCase(\"provided\")) {\n+                baloCompileScopeDependencies.add(Paths.get(baloTomlLib.getPath()).getFileName());\n+            }\n+        }\n+\n+        for (Path baloTomlLib : baloCompileScopeDependencies) {\n+            if (!platformLibs.contains(baloTomlLib)) {\n+                buildContext.out().println(\"warning: \" + packageID + \" is missing a native library dependency - \" +\n+                        baloTomlLib);\n+            }\n+        }\n+    }\n+\n+    private void addLibsFromBalo(Path baloFilePath, List<Path> moduleDependencySet) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 228}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDI2MTA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419026106", "createdAt": "2020-05-27T09:40:54Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo0MDo1NFrOGbBijQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo0MDo1NFrOGbBijQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4OTk2NQ==", "bodyText": "'Optional.get()' without 'isPresent()' check\nPls check whether you can use orElse() for get()\nMore info: https://softwareengineering.stackexchange.com/questions/318912/why-is-optional-get-without-calling-ispresent-bad-but-not-iterator-next", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430989965", "createdAt": "2020-05-27T09:40:54Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/NativeDependencyResolverImpl.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package org.ballerinalang.packerina;\n+\n+import com.moandjiezana.toml.Toml;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.ballerinalang.toml.model.Dependency;\n+import org.ballerinalang.toml.model.Library;\n+import org.ballerinalang.toml.model.Manifest;\n+import org.ballerinalang.toml.parser.ManifestProcessor;\n+import org.wso2.ballerinalang.compiler.NativeDependencyResolver;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BALO_PLATFORM_LIB_DIR_NAME;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_JAR_EXT;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_PKG_DEFAULT_VERSION;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.DIST_BIR_CACHE_DIR_NAME;\n+\n+/**\n+ * Resolves jars and native libs for modules.\n+ *\n+ * @since 1.3.0\n+ */\n+public class NativeDependencyResolverImpl implements NativeDependencyResolver {\n+    private static final CompilerContext.Key<NativeDependencyResolver> JAR_RESOLVER_KEY = new CompilerContext.Key<>();\n+    private List<String> supportedPlatforms = Arrays.stream(ProgramFileConstants.SUPPORTED_PLATFORMS)\n+            .collect(Collectors.toList());\n+    private final BuildContext buildContext;\n+    private final Path sourceRootPath;\n+    private final String balHomePath;\n+    private final Manifest manifest;\n+    private boolean skipCopyLibsFromDist;\n+\n+    public static NativeDependencyResolver getInstance(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        NativeDependencyResolver nativeDependencyResolver = context.get(JAR_RESOLVER_KEY);\n+        if (nativeDependencyResolver == null) {\n+            nativeDependencyResolver = new NativeDependencyResolverImpl(buildContext, skipCopyLibsFromDist);\n+        }\n+        context.put(JAR_RESOLVER_KEY, nativeDependencyResolver);\n+        return nativeDependencyResolver;\n+    }\n+\n+    private NativeDependencyResolverImpl(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        this.buildContext = buildContext;\n+        this.manifest = ManifestProcessor.getInstance(context).getManifest();\n+        this.sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n+        this.skipCopyLibsFromDist = skipCopyLibsFromDist;\n+        this.balHomePath = buildContext.get(BuildContextField.HOME_REPO).toString();\n+        supportedPlatforms.add(\"any\");\n+    }\n+\n+    @Override\n+    public Path moduleJar(PackageID packageID, String platform) {\n+        // Look if it is a project module.\n+        if (isProjectModule(packageID)) {\n+            // If so fetch from project balo cache\n+            return buildContext.getBaloFromTarget(packageID);\n+        } else if (isPathDependency(packageID)) {\n+            // If so fetch from project jar cache\n+            return buildContext.getJarPathFromTargetCache(packageID);\n+        } else if (isModuleInDistribution(packageID)) {\n+            return getJarFromDistribution(packageID);\n+        } else {\n+            // If not fetch from home balo cache.\n+            return buildContext.getBaloFromHomeCache(packageID, platform);\n+        }\n+    }\n+\n+    @Override\n+    public List<Path> nativeDependencies(PackageID packageID) {\n+        List<Path> modulePlatformLibs = new ArrayList<>();\n+        // copy platform libs for all modules(imported modules as well)\n+        addPlatformLibs(packageID, modulePlatformLibs);\n+\n+        if (isProjectModule(packageID)) {\n+            return modulePlatformLibs;\n+        } else if (isPathDependency(packageID)) {\n+            addLibsFromBaloDependency(packageID, modulePlatformLibs);\n+        } else if (isModuleInDistribution(packageID)) {\n+            addLibsFromDistribution(packageID, modulePlatformLibs);\n+        } else {\n+            addLibsFromHomeBaloCache(packageID, modulePlatformLibs);\n+        }\n+        return modulePlatformLibs;\n+    }\n+\n+    @Override\n+    public List<Path> nativeDependenciesForTests(PackageID packageID) {\n+        List<Path> testPlatformLibs = new ArrayList<>();\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+        if (libraries != null) {\n+            for (Library library : libraries) {\n+                if ((library.getModules() == null ||\n+                        Arrays.asList(library.getModules()).contains(packageID.name.value)) &&\n+                        (library.getScope() != null && library.getScope().equalsIgnoreCase(\"testOnly\"))) {\n+                    String libFilePath = library.getPath();\n+                    if (libFilePath == null) {\n+                        continue;\n+                    }\n+                    Path nativeFile = sourceRootPath.resolve(Paths.get(libFilePath));\n+                    testPlatformLibs.add(nativeFile);\n+                }\n+            }\n+        }\n+        return testPlatformLibs;\n+    }\n+\n+    private boolean isModuleInDistribution(PackageID packageID) {\n+        return getTomlFilePath(packageID).exists();\n+    }\n+\n+    private File getTomlFilePath(PackageID packageID) {\n+        String version = BLANG_PKG_DEFAULT_VERSION;\n+        if (!packageID.version.value.equals(\"\")) {\n+            version = packageID.version.value;\n+        }\n+\n+        return Paths.get(balHomePath, DIST_BIR_CACHE_DIR_NAME, packageID.orgName.value,\n+                packageID.name.value, version, \"Ballerina.toml\").toFile();\n+    }\n+\n+    private boolean isPathDependency(PackageID packageID) {\n+        return buildContext.getImportPathDependency(packageID).isPresent();\n+    }\n+\n+    private boolean isProjectModule(PackageID packageID) {\n+        return manifest.getProject().getOrgName().equals(packageID.orgName.value) &&\n+                ProjectDirs.isModuleExist(sourceRootPath, packageID.name.value);\n+    }\n+\n+    private void addLibsFromHomeBaloCache(PackageID packageID, List<Path> modulePlatformLibs) {\n+        for (String platform : supportedPlatforms) {\n+            Path baloPath = buildContext.getBaloFromHomeCache(packageID, platform);\n+            if (baloPath != null && Files.exists(baloPath)) {\n+                addLibsFromBalo(baloPath, modulePlatformLibs);\n+            }\n+        }\n+    }\n+\n+    private void addLibsFromBaloDependency(PackageID packageID, List<Path> modulePlatformLibs) {\n+        addLibsFromBalo(buildContext.getImportPathDependency(packageID).get().getMetadata().getPath(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDMwOTk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419030999", "createdAt": "2020-05-27T09:47:34Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo0NzozNFrOGbBxSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo0NzozNFrOGbBxSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MzczOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            fileName.substring(0, fileName.lastIndexOf(\".\")));\n          \n          \n            \n                            fileName.substring(0, fileName.lastIndexOf('.')));\n          \n      \n    \n    \n  \n\nCan we make this a char argument?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#discussion_r430993739", "createdAt": "2020-05-27T09:47:34Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/NativeDependencyResolverImpl.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package org.ballerinalang.packerina;\n+\n+import com.moandjiezana.toml.Toml;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.ballerinalang.toml.model.Dependency;\n+import org.ballerinalang.toml.model.Library;\n+import org.ballerinalang.toml.model.Manifest;\n+import org.ballerinalang.toml.parser.ManifestProcessor;\n+import org.wso2.ballerinalang.compiler.NativeDependencyResolver;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BALO_PLATFORM_LIB_DIR_NAME;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_JAR_EXT;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_PKG_DEFAULT_VERSION;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.DIST_BIR_CACHE_DIR_NAME;\n+\n+/**\n+ * Resolves jars and native libs for modules.\n+ *\n+ * @since 1.3.0\n+ */\n+public class NativeDependencyResolverImpl implements NativeDependencyResolver {\n+    private static final CompilerContext.Key<NativeDependencyResolver> JAR_RESOLVER_KEY = new CompilerContext.Key<>();\n+    private List<String> supportedPlatforms = Arrays.stream(ProgramFileConstants.SUPPORTED_PLATFORMS)\n+            .collect(Collectors.toList());\n+    private final BuildContext buildContext;\n+    private final Path sourceRootPath;\n+    private final String balHomePath;\n+    private final Manifest manifest;\n+    private boolean skipCopyLibsFromDist;\n+\n+    public static NativeDependencyResolver getInstance(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        NativeDependencyResolver nativeDependencyResolver = context.get(JAR_RESOLVER_KEY);\n+        if (nativeDependencyResolver == null) {\n+            nativeDependencyResolver = new NativeDependencyResolverImpl(buildContext, skipCopyLibsFromDist);\n+        }\n+        context.put(JAR_RESOLVER_KEY, nativeDependencyResolver);\n+        return nativeDependencyResolver;\n+    }\n+\n+    private NativeDependencyResolverImpl(BuildContext buildContext, boolean skipCopyLibsFromDist) {\n+        CompilerContext context = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+        this.buildContext = buildContext;\n+        this.manifest = ManifestProcessor.getInstance(context).getManifest();\n+        this.sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n+        this.skipCopyLibsFromDist = skipCopyLibsFromDist;\n+        this.balHomePath = buildContext.get(BuildContextField.HOME_REPO).toString();\n+        supportedPlatforms.add(\"any\");\n+    }\n+\n+    @Override\n+    public Path moduleJar(PackageID packageID, String platform) {\n+        // Look if it is a project module.\n+        if (isProjectModule(packageID)) {\n+            // If so fetch from project balo cache\n+            return buildContext.getBaloFromTarget(packageID);\n+        } else if (isPathDependency(packageID)) {\n+            // If so fetch from project jar cache\n+            return buildContext.getJarPathFromTargetCache(packageID);\n+        } else if (isModuleInDistribution(packageID)) {\n+            return getJarFromDistribution(packageID);\n+        } else {\n+            // If not fetch from home balo cache.\n+            return buildContext.getBaloFromHomeCache(packageID, platform);\n+        }\n+    }\n+\n+    @Override\n+    public List<Path> nativeDependencies(PackageID packageID) {\n+        List<Path> modulePlatformLibs = new ArrayList<>();\n+        // copy platform libs for all modules(imported modules as well)\n+        addPlatformLibs(packageID, modulePlatformLibs);\n+\n+        if (isProjectModule(packageID)) {\n+            return modulePlatformLibs;\n+        } else if (isPathDependency(packageID)) {\n+            addLibsFromBaloDependency(packageID, modulePlatformLibs);\n+        } else if (isModuleInDistribution(packageID)) {\n+            addLibsFromDistribution(packageID, modulePlatformLibs);\n+        } else {\n+            addLibsFromHomeBaloCache(packageID, modulePlatformLibs);\n+        }\n+        return modulePlatformLibs;\n+    }\n+\n+    @Override\n+    public List<Path> nativeDependenciesForTests(PackageID packageID) {\n+        List<Path> testPlatformLibs = new ArrayList<>();\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+        if (libraries != null) {\n+            for (Library library : libraries) {\n+                if ((library.getModules() == null ||\n+                        Arrays.asList(library.getModules()).contains(packageID.name.value)) &&\n+                        (library.getScope() != null && library.getScope().equalsIgnoreCase(\"testOnly\"))) {\n+                    String libFilePath = library.getPath();\n+                    if (libFilePath == null) {\n+                        continue;\n+                    }\n+                    Path nativeFile = sourceRootPath.resolve(Paths.get(libFilePath));\n+                    testPlatformLibs.add(nativeFile);\n+                }\n+            }\n+        }\n+        return testPlatformLibs;\n+    }\n+\n+    private boolean isModuleInDistribution(PackageID packageID) {\n+        return getTomlFilePath(packageID).exists();\n+    }\n+\n+    private File getTomlFilePath(PackageID packageID) {\n+        String version = BLANG_PKG_DEFAULT_VERSION;\n+        if (!packageID.version.value.equals(\"\")) {\n+            version = packageID.version.value;\n+        }\n+\n+        return Paths.get(balHomePath, DIST_BIR_CACHE_DIR_NAME, packageID.orgName.value,\n+                packageID.name.value, version, \"Ballerina.toml\").toFile();\n+    }\n+\n+    private boolean isPathDependency(PackageID packageID) {\n+        return buildContext.getImportPathDependency(packageID).isPresent();\n+    }\n+\n+    private boolean isProjectModule(PackageID packageID) {\n+        return manifest.getProject().getOrgName().equals(packageID.orgName.value) &&\n+                ProjectDirs.isModuleExist(sourceRootPath, packageID.name.value);\n+    }\n+\n+    private void addLibsFromHomeBaloCache(PackageID packageID, List<Path> modulePlatformLibs) {\n+        for (String platform : supportedPlatforms) {\n+            Path baloPath = buildContext.getBaloFromHomeCache(packageID, platform);\n+            if (baloPath != null && Files.exists(baloPath)) {\n+                addLibsFromBalo(baloPath, modulePlatformLibs);\n+            }\n+        }\n+    }\n+\n+    private void addLibsFromBaloDependency(PackageID packageID, List<Path> modulePlatformLibs) {\n+        addLibsFromBalo(buildContext.getImportPathDependency(packageID).get().getMetadata().getPath(),\n+                modulePlatformLibs);\n+    }\n+\n+    private void addLibsFromDistribution(PackageID packageID, List<Path> modulePlatformLibs) {\n+        List<Path> dependencies = getDependenciesFromDist(packageID);\n+        if (dependencies != null) {\n+            modulePlatformLibs.addAll(dependencies);\n+        }\n+    }\n+\n+    private void addPlatformLibs(PackageID packageID, List<Path> modulePlatformLibs) {\n+        List<Path> platformLibs = new ArrayList<>();\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+\n+        Optional<Dependency> importPathDependency = buildContext.getImportPathDependency(packageID);\n+        if (libraries != null) {\n+            for (Library library : libraries) {\n+                if ((library.getModules() == null ||\n+                        Arrays.asList(library.getModules()).contains(packageID.name.value) ||\n+                        Arrays.asList(library.getModules()).contains(packageID.orgName.value + \"/\" +\n+                                packageID.name.value)) &&\n+                        !(library.getScope() != null && library.getScope().equalsIgnoreCase(\"testOnly\"))) {\n+                    String libFilePath = library.getPath();\n+                    if (libFilePath == null) {\n+                        continue;\n+                    }\n+\n+                    Path nativeFile = sourceRootPath.resolve(Paths.get(libFilePath));\n+                    if (importPathDependency.isPresent()) {\n+                        platformLibs.add(nativeFile.getFileName());\n+                    }\n+                    modulePlatformLibs.add(nativeFile);\n+                }\n+            }\n+        }\n+\n+        importPathDependency.ifPresent(dependency -> validateBaloDependencies(packageID, platformLibs,\n+                dependency.getMetadata().getPath()));\n+    }\n+\n+    private void validateBaloDependencies(PackageID packageID, List<Path> platformLibs, Path importDependencyPath) {\n+        Manifest manifestFromBalo = RepoUtils.getManifestFromBalo(importDependencyPath);\n+        List<Library> baloDependencies = manifestFromBalo.getPlatform().libraries;\n+        List<Path> baloCompileScopeDependencies = new ArrayList<>();\n+        if (baloDependencies == null) {\n+            return;\n+        }\n+\n+        for (Library baloTomlLib : baloDependencies) {\n+            if (baloTomlLib.getScope() != null && baloTomlLib.getScope().equalsIgnoreCase(\"provided\")) {\n+                baloCompileScopeDependencies.add(Paths.get(baloTomlLib.getPath()).getFileName());\n+            }\n+        }\n+\n+        for (Path baloTomlLib : baloCompileScopeDependencies) {\n+            if (!platformLibs.contains(baloTomlLib)) {\n+                buildContext.out().println(\"warning: \" + packageID + \" is missing a native library dependency - \" +\n+                        baloTomlLib);\n+            }\n+        }\n+    }\n+\n+    private void addLibsFromBalo(Path baloFilePath, List<Path> moduleDependencySet) {\n+\n+        String fileName = baloFilePath.getFileName().toString();\n+        Path baloFileUnzipDirectory = Paths.get(baloFilePath.getParent().toString(),\n+                fileName.substring(0, fileName.lastIndexOf(\".\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "originalPosition": 231}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDM1NTQz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419035543", "createdAt": "2020-05-27T09:53:24Z", "commit": {"oid": "5b7813fe98e73b1c3744db627f134197c1379039"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "222730030b8d483f26ed57dee8d6188c66d4485f", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/222730030b8d483f26ed57dee8d6188c66d4485f", "committedDate": "2020-05-27T09:58:51Z", "message": "Add license header and apply suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "030d5c191dc02604870b6da291051782e531c4fb", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/030d5c191dc02604870b6da291051782e531c4fb", "committedDate": "2020-05-27T11:00:13Z", "message": "Merge pull request #23538 from suganyasuven/jar-resolver\n\nRefactor dependency resolver api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTI0MTAx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23528#pullrequestreview-419124101", "createdAt": "2020-05-27T12:05:11Z", "commit": {"oid": "030d5c191dc02604870b6da291051782e531c4fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4579, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}