{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzIwMDUw", "number": 23052, "title": "Add tests for tables as function arguments", "bodyText": "Purpose\n\nDescribe the problems, issues, or needs driving this feature/fix and include links to related issues.\n\n$Subject\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-04T03:25:11Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23052", "merged": true, "mergeCommit": {"oid": "98e776a9bfc7bc31bf2a6845099a5b1bb85595ae"}, "closed": true, "closedAt": "2020-05-06T08:29:49Z", "author": {"login": "gimantha"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcd21D7gH2gAyNDEyNzIwMDUwOjg3MzBhYmMzOWQ1OTk4ZDgwYmNiZjE5ZjEwOTM1ZWJjZjk1ZmQwYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd7PB1AFqTQwNDc5NDAzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8730abc39d5998d80bcbf19f10935ebcf95fd0a0", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8730abc39d5998d80bcbf19f10935ebcf95fd0a0", "committedDate": "2020-05-04T03:22:43Z", "message": "Add tests for tables as function arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98e776a9bfc7bc31bf2a6845099a5b1bb85595ae", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/98e776a9bfc7bc31bf2a6845099a5b1bb85595ae", "committedDate": "2020-05-04T03:27:00Z", "message": "Add class level description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NzMxMDAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23052#pullrequestreview-404731000", "createdAt": "2020-05-04T06:26:52Z", "commit": {"oid": "98e776a9bfc7bc31bf2a6845099a5b1bb85595ae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjoyNjo1MlrOGPz6KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjoyNzowOFrOGPz6fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIzMjI5Nw==", "bodyText": "Need a new line space", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23052#discussion_r419232297", "createdAt": "2020-05-04T06:26:52Z", "author": {"login": "mohanvive"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/table/TablesAsFuncArgs.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.test.types.table;\n+\n+import org.ballerinalang.model.values.BBoolean;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * This class contains tests for tables as function arguments.\n+ *\n+ * @since 1.3.0\n+ */\n+public class TablesAsFuncArgs {\n+    private CompileResult result, negativeResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/types/table/tables-as-func-arguments.bal\");\n+        negativeResult = BCompileUtil.compile(\"test-src/types/table/tables-as-func-args-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testSameKeySpecifierInParamAndArg() {\n+        BValue[] values = BRunUtil.invoke(result, \"testSameKeySpecifierInParamAndArg\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testKeySpecifierAndKeyConstraint() {\n+        BValue[] values = BRunUtil.invoke(result, \"testKeySpecifierAndKeyConstraint\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testSameKeyConstraintInArgAndParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testSameKeyConstraintInArgAndParam\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testNoKeyConstraintParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testNoKeyConstraintParam1\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+\n+        values = BRunUtil.invoke(result, \"testNoKeyConstraintParam2\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testUnionTypeInParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testUnionTypeInParam\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testUnionConstraintParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testUnionConstraintParam\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testUnionKeyConstraintParam() {\n+        BValue[] values = BRunUtil.invoke(result, \"testUnionKeyConstraintParam\", new BValue[]{});\n+        Assert.assertTrue(((BBoolean) values[0]).booleanValue());\n+    }\n+\n+    @Test\n+    public void testDifferentKeySpecifierInParamAndArg() {\n+        Assert.assertEquals(7, negativeResult.getErrorCount());\n+        int i = 0;\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key(name)', found 'table<Person> key(age)'\",\n+                45, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<string>', found 'table<Person> key(age)'\",\n+                54, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<string>', found 'table<Person> key(age)'\",\n+                63, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<int>', found 'table<Person>'\",\n+                72, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<int>', found 'table<Person>'\",\n+                81, 43);\n+        BAssertUtil.validateError(negativeResult, i++,\n+                \"incompatible types: expected 'table<Person> key<string>', found 'table<Person> key(age)'\",\n+                90, 13);\n+        BAssertUtil.validateError(negativeResult, i,\n+                \"incompatible types: expected 'table<Person> key(name)', found 'table<Person> key(age)'\",\n+                98, 13);\n+\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98e776a9bfc7bc31bf2a6845099a5b1bb85595ae"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIzMjM4Mg==", "bodyText": "Remove unnecessary line spaces.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23052#discussion_r419232382", "createdAt": "2020-05-04T06:27:08Z", "author": {"login": "mohanvive"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/table/tables-as-func-args-negative.bal", "diffHunk": "@@ -0,0 +1,103 @@\n+type Person record {\n+    readonly string name;\n+    readonly int age;\n+};\n+\n+type Customer record {\n+    readonly int id;\n+    readonly string name;\n+    string lname;\n+};\n+\n+type CustomerTable table<Customer> key(id, name);\n+\n+type PersonTable table<Person> key(name);\n+\n+function getStringRepresentation1(table<Person> key(name) tab) returns string {\n+    return tab.toString();\n+}\n+\n+function getStringRepresentation2(table<Person> key<string> tab) returns string {\n+    return tab.toString();\n+}\n+\n+function getStringRepresentation3(table<Person> key<int> tab) returns string {\n+    return tab.toString();\n+}\n+\n+function getStringRepresentation4(table<Person> key<string> | table<Customer> key<[int, string]> tab) returns string {\n+    return tab.toString();\n+}\n+\n+function getStringRepresentation5(table<Person|Customer> key<string> tab) returns string {\n+    return tab.toString();\n+}\n+\n+function getStringRepresentation6(table<Person> key<string|int> tab) returns string {\n+    return tab.toString();\n+}\n+\n+function testDifferentKeySpecifierInParamAndArg() returns boolean {\n+    table<Person> key(age) tab1 = table [\n+        { name: \"AAA\", age: 31 },\n+        { name: \"CCC\", age: 34 }\n+        ];\n+    string str = getStringRepresentation1(tab1);\n+    return str == \"name=AAA age=31\\nname=CCC age=34\";\n+}\n+\n+function testKeySpecifierAndKeyConstraint() returns boolean {\n+    table<Person> key(age) tab1 = table [\n+        { name: \"AAA\", age: 31 },\n+        { name: \"CCC\", age: 34 }\n+        ];\n+    string str = getStringRepresentation2(tab1);\n+    return str == \"name=AAA age=31\\nname=CCC age=34\";\n+}\n+\n+function testSameKeyConstraintInArgAndParam() returns boolean {\n+    table<Person> key<int> tab1 = table key(age) [\n+        { name: \"AAA\", age: 31 },\n+        { name: \"CCC\", age: 34 }\n+        ];\n+    string str = getStringRepresentation2(tab1);\n+    return str == \"name=AAA age=31\\nname=CCC age=34\";\n+}\n+\n+function testNoKeyConstraintParam1() returns boolean {\n+    table<Person> tab1 = table [\n+        { name: \"AAA\", age: 31 },\n+        { name: \"CCC\", age: 34 }\n+        ];\n+    string str = getStringRepresentation3(tab1);\n+    return str == \"name=AAA age=31\\nname=CCC age=34\";\n+}\n+\n+function testNoKeyConstraintParam2() returns boolean {\n+    table<Person> tab1 = table [\n+        { name: \"AAA\", age: 31 },\n+        { name: \"CCC\", age: 34 }\n+        ];\n+    string str = getStringRepresentation3(tab1);\n+    return str == \"name=AAA age=31\\nname=CCC age=34\";\n+}\n+\n+function getTable1() returns (table<Person> key<string>) {\n+    table<Person> key(age) tab = table [\n+         { name: \"AAA\", age: 31 },\n+         { name: \"CCC\", age: 34 }\n+    ];\n+    return  tab;\n+}\n+\n+function getTable2() returns (table<Person> key(name)) {\n+    table<Person> key(age) tab = table [\n+         { name: \"AAA\", age: 31 },\n+         { name: \"CCC\", age: 34 }\n+    ];\n+    return  tab;\n+}\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98e776a9bfc7bc31bf2a6845099a5b1bb85595ae"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Nzk0MDMy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23052#pullrequestreview-404794032", "createdAt": "2020-05-04T08:30:42Z", "commit": {"oid": "98e776a9bfc7bc31bf2a6845099a5b1bb85595ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3362, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}