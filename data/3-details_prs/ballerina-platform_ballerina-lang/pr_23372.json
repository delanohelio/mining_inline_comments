{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMTA5OTcx", "number": 23372, "title": "Add optional field access and conditional expression parsing", "bodyText": "Purpose\n\nAdd optional field access and conditional expression support\n\nFixes #23268\nFixes #23267\nApproach\n\nN/A\n\nSamples\n\nN/A\n\nRemarks\n\nN/A\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-19T13:11:57Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23372", "merged": true, "mergeCommit": {"oid": "920f6e2e76364a15a617504bafd6a8fc0bb0db3f"}, "closed": true, "closedAt": "2020-05-22T01:49:24Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciveiYAH2gAyNDIwMTA5OTcxOjEzMzVlODU4MzI3MWE4MDQyMWNmMWU3NjJiYzliYTA4ZjczYzIxNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjoR7agFqTQxNjU5ODg1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1335e8583271a80421cf1e762bc9ba08f73c2178", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1335e8583271a80421cf1e762bc9ba08f73c2178", "committedDate": "2020-05-19T07:38:24Z", "message": "Add optional field access support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b22c97858d7e2369f3898f271f35f63fee907a5", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b22c97858d7e2369f3898f271f35f63fee907a5", "committedDate": "2020-05-19T07:39:16Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5377948f1c10cfee299ae705437fc35452c4cb8", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5377948f1c10cfee299ae705437fc35452c4cb8", "committedDate": "2020-05-19T13:01:42Z", "message": "Add conditional expression support partially"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8fd9631b50a2bf62fd7c6676d34bb16b6b8941", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a8fd9631b50a2bf62fd7c6676d34bb16b6b8941", "committedDate": "2020-05-19T13:02:22Z", "message": "Add test cases for elvis conditional expression parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bd31d47993d09d69796a2e83840f780007c16b7", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bd31d47993d09d69796a2e83840f780007c16b7", "committedDate": "2020-05-20T10:06:49Z", "message": "Change condition expression parsing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTg4Njk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23372#pullrequestreview-415188696", "createdAt": "2020-05-20T10:13:10Z", "commit": {"oid": "1bd31d47993d09d69796a2e83840f780007c16b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxMzoxMVrOGYEv1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxMzoxMVrOGYEv1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5Njc4OQ==", "bodyText": "Assuming qualified-identifier gets the higher precedence a ? b:c : d passes as anticipated.\nBut, If we consider simple a ? b : c, it cannot be parsed as b:c is parsed as a qualified-identifier.\nThat's problem I'm facing now", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23372#discussion_r427896789", "createdAt": "2020-05-20T10:13:11Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9077,4 +9097,45 @@ private STNode parseIntersectionTypeDescriptor(STNode leftTypeDesc, ParserRuleCo\n         STNode rightTypeDesc = parseTypeDescriptor(context);\n         return STNodeFactory.createIntersectionTypeDescriptorNode(leftTypeDesc, bitwiseAndToken, rightTypeDesc);\n     }\n+\n+    /**\n+     * Parse optional field access expression .\n+     *\n+     * @param lhsExpr Preceding expression of the optional field access\n+     * @return <code>optional-field-access-expr</code>.\n+     */\n+    private STNode parseOptionalFieldAccessExpression(STNode lhsExpr) {\n+        STNode optionalFieldAccessToken = parseOptionalFieldAccessToken();\n+        STNode fieldName = parseIdentifier(ParserRuleContext.FIELD_OR_FUNC_NAME);\n+        return STNodeFactory.createOptionalFieldAccessExpressionNode(lhsExpr, optionalFieldAccessToken, fieldName);\n+    }\n+\n+    /**\n+     * Parse optional-field-access-token.\n+     *\n+     * @return parsed node\n+     */\n+    private STNode parseOptionalFieldAccessToken() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.OPTIONAL_CHAINING_TOKEN) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.OPTIONAL_CHAINING_TOKEN);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse conditional expression.\n+     *\n+     * @param lhsExpr Preceding expression of the question mark\n+     * @return <code>conditional-expr</code>.\n+     */\n+    private STNode parseConditionalExpression(STNode lhsExpr) {\n+        STNode questionMark = parseQuestionMark();\n+        STNode middleExpr = parseExpression(OperatorPrecedence.ELVIS_CONDITIONAL, true, false);\n+        STNode colon = parseColon();\n+        STNode endExpr = parseExpression(OperatorPrecedence.ELVIS_CONDITIONAL, true, false);\n+        return STNodeFactory.createConditionalExpressionNode(lhsExpr, questionMark, middleExpr, colon, endExpr);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bd31d47993d09d69796a2e83840f780007c16b7"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e4186836d9e1ab9bfed9b553f2e9ed6f1581a0b", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e4186836d9e1ab9bfed9b553f2e9ed6f1581a0b", "committedDate": "2020-05-21T10:54:30Z", "message": "Add test cases for conditional-expr validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb9a5b1495b8c57f9b74ebb16bd7da78923a112", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/afb9a5b1495b8c57f9b74ebb16bd7da78923a112", "committedDate": "2020-05-21T11:24:18Z", "message": "Refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "199c96c07f221608598f3d704617fd16c5aa6fda", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/199c96c07f221608598f3d704617fd16c5aa6fda", "committedDate": "2020-05-21T13:43:07Z", "message": "Add conditional-expr recovery and recovery tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1499429ca62677759653e6face6171ccbe8e24ed", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1499429ca62677759653e6face6171ccbe8e24ed", "committedDate": "2020-05-21T14:02:41Z", "message": "Refactor optional field access test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a578ab1e5dd0d68783d1c20df2a4a83fd1dd0d1c", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a578ab1e5dd0d68783d1c20df2a4a83fd1dd0d1c", "committedDate": "2020-05-21T18:28:58Z", "message": "Merge branch 'actions' of https://github.com/SupunS/ballerina into expr-support\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/ParserRuleContext.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/ParserTestUtils.java\n\u0001\tcompiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/AccessExpressionsTest.java\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1a311574a255d65e18d0103a8a31f2902f59e02", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1a311574a255d65e18d0103a8a31f2902f59e02", "committedDate": "2020-05-21T18:48:45Z", "message": "Regenerate tree after merging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad2e8fd4e5d2f4e31e1f31394e289efda23c40c6", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad2e8fd4e5d2f4e31e1f31394e289efda23c40c6", "committedDate": "2020-05-21T19:13:26Z", "message": "Fix AnnotationsTest > testRecoveryInAnnotValue test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04e1cfaccbb17ff41f02974699f781f11ce76656", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04e1cfaccbb17ff41f02974699f781f11ce76656", "committedDate": "2020-05-21T19:14:32Z", "message": "Fix json indentation and new line in misc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5604bd8bf6e909d9ce288c812f104478135e532", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5604bd8bf6e909d9ce288c812f104478135e532", "committedDate": "2020-05-21T19:38:34Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into expr-support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTk4ODU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23372#pullrequestreview-416598854", "createdAt": "2020-05-22T01:49:13Z", "commit": {"oid": "e5604bd8bf6e909d9ce288c812f104478135e532"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3341, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}