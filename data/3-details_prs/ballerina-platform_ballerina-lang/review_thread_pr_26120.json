{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzODM2MzE0", "number": 26120, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMzoyNDo0NFrOEn6SGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMzoyOTo0OFrOEn6Uug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjg0ODI2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMzoyNDo0NFrOHYtWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNDozMToxM1rOHYuIbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MDg2Mg==", "bodyText": "missing break after   case NAMED_WORKER_DECL_START:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r495670862", "createdAt": "2020-09-28T03:24:44Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1860,6 +1865,8 @@ private Result seekMatchInStmtRelatedAlternativePaths(ParserRuleContext currentC\n             case REGULAR_COMPOUND_STMT_RHS:\n                 alternativeRules = REGULAR_COMPOUND_STMT_RHS;\n                 break;\n+            case NAMED_WORKER_DECL_START:\n+                alternativeRules = NAMED_WORKER_DECL_START;\n             default:\n                 return seekMatchInExprRelatedAlternativePaths(currentCtx, lookahead, currentDepth, matchingRulesCount,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4MzY5NA==", "bodyText": "added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r495683694", "createdAt": "2020-09-28T04:31:13Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1860,6 +1865,8 @@ private Result seekMatchInStmtRelatedAlternativePaths(ParserRuleContext currentC\n             case REGULAR_COMPOUND_STMT_RHS:\n                 alternativeRules = REGULAR_COMPOUND_STMT_RHS;\n                 break;\n+            case NAMED_WORKER_DECL_START:\n+                alternativeRules = NAMED_WORKER_DECL_START;\n             default:\n                 return seekMatchInExprRelatedAlternativePaths(currentCtx, lookahead, currentDepth, matchingRulesCount,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MDg2Mg=="}, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjg0OTA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMzoyNToxNFrOHYtWwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNDozMDo1MFrOHYuIFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MDk3Nw==", "bodyText": "I think we can remove this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r495670977", "createdAt": "2020-09-28T03:25:14Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1993,6 +2000,9 @@ private Result seekMatchInExprRelatedAlternativePaths(ParserRuleContext currentC\n             case LISTENERS_LIST_END:\n                 alternativeRules = LISTENERS_LIST_END;\n                 break;\n+            case NAMED_WORKER_DECL_START:\n+                alternativeRules = NAMED_WORKER_DECL_START;\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4MzYwNA==", "bodyText": "removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r495683604", "createdAt": "2020-09-28T04:30:50Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1993,6 +2000,9 @@ private Result seekMatchInExprRelatedAlternativePaths(ParserRuleContext currentC\n             case LISTENERS_LIST_END:\n                 alternativeRules = LISTENERS_LIST_END;\n                 break;\n+            case NAMED_WORKER_DECL_START:\n+                alternativeRules = NAMED_WORKER_DECL_START;\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MDk3Nw=="}, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjg1NDk4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMzoyOTo0OFrOHYtaBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNToxMjo1NFrOHbhajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MTgxNQ==", "bodyText": "Do we need recovery for worker keyword @SupunS  WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r495671815", "createdAt": "2020-09-28T03:29:48Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3118,9 +3118,12 @@ private STNode parseStatement(STNode annots) {\n                 // any statement starts with `[` can be either a var-decl with tuple type\n                 // or a destructuring assignment with list-binding-pattern.\n                 return parseStatementStartsWithOpenBracket(getAnnotations(annots), false);\n+            case TRANSACTIONAL_KEYWORD:\n+                if (peek(2).kind == SyntaxKind.WORKER_KEYWORD) {\n+                    return parseNamedWorkerDeclaration(getAnnotations(annots));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNTQxOQ==", "bodyText": "yeah, I think we need to.\nOtherwise if there are additional tokens like:\ntransactional someJunkToken worker w1 {\n\n}\nor if the worker keyword is missing like:\ntransactional  w1 {\n\n}\nthe parsing will go haywire.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r495715419", "createdAt": "2020-09-28T06:32:31Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3118,9 +3118,12 @@ private STNode parseStatement(STNode annots) {\n                 // any statement starts with `[` can be either a var-decl with tuple type\n                 // or a destructuring assignment with list-binding-pattern.\n                 return parseStatementStartsWithOpenBracket(getAnnotations(annots), false);\n+            case TRANSACTIONAL_KEYWORD:\n+                if (peek(2).kind == SyntaxKind.WORKER_KEYWORD) {\n+                    return parseNamedWorkerDeclaration(getAnnotations(annots));\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MTgxNQ=="}, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1NDI5OQ==", "bodyText": "Shall I open another issue to add recovery for worker keyword and link it to this PR? @SupunS @rdulmina", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r497254299", "createdAt": "2020-09-30T05:40:38Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3118,9 +3118,12 @@ private STNode parseStatement(STNode annots) {\n                 // any statement starts with `[` can be either a var-decl with tuple type\n                 // or a destructuring assignment with list-binding-pattern.\n                 return parseStatementStartsWithOpenBracket(getAnnotations(annots), false);\n+            case TRANSACTIONAL_KEYWORD:\n+                if (peek(2).kind == SyntaxKind.WORKER_KEYWORD) {\n+                    return parseNamedWorkerDeclaration(getAnnotations(annots));\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MTgxNQ=="}, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1NzM2OQ==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r497257369", "createdAt": "2020-09-30T05:51:01Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3118,9 +3118,12 @@ private STNode parseStatement(STNode annots) {\n                 // any statement starts with `[` can be either a var-decl with tuple type\n                 // or a destructuring assignment with list-binding-pattern.\n                 return parseStatementStartsWithOpenBracket(getAnnotations(annots), false);\n+            case TRANSACTIONAL_KEYWORD:\n+                if (peek(2).kind == SyntaxKind.WORKER_KEYWORD) {\n+                    return parseNamedWorkerDeclaration(getAnnotations(annots));\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MTgxNQ=="}, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NDQ1MA==", "bodyText": "+1. But lets fix it soon, since this is a blocker for auto-completion in LS.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r497294450", "createdAt": "2020-09-30T07:22:57Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3118,9 +3118,12 @@ private STNode parseStatement(STNode annots) {\n                 // any statement starts with `[` can be either a var-decl with tuple type\n                 // or a destructuring assignment with list-binding-pattern.\n                 return parseStatementStartsWithOpenBracket(getAnnotations(annots), false);\n+            case TRANSACTIONAL_KEYWORD:\n+                if (peek(2).kind == SyntaxKind.WORKER_KEYWORD) {\n+                    return parseNamedWorkerDeclaration(getAnnotations(annots));\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MTgxNQ=="}, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyMTA3MA==", "bodyText": "We will be fixing this in a different issue #26176", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26120#discussion_r498621070", "createdAt": "2020-10-02T05:12:54Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3118,9 +3118,12 @@ private STNode parseStatement(STNode annots) {\n                 // any statement starts with `[` can be either a var-decl with tuple type\n                 // or a destructuring assignment with list-binding-pattern.\n                 return parseStatementStartsWithOpenBracket(getAnnotations(annots), false);\n+            case TRANSACTIONAL_KEYWORD:\n+                if (peek(2).kind == SyntaxKind.WORKER_KEYWORD) {\n+                    return parseNamedWorkerDeclaration(getAnnotations(annots));\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MTgxNQ=="}, "originalCommit": {"oid": "a87ad60c94a07cf52c003144fd906388d8746e7d"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4816, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}