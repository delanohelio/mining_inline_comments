{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODE2NjYw", "number": 24732, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzo0MjozOVrOEOg0nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjozMjoxN1rOEOqcPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjUzMjc5OnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzo0MjozOVrOGxtE5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTozMTo1MFrOGx2Gcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3MTk0MQ==", "bodyText": "Shall we add a test case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24732#discussion_r454771941", "createdAt": "2020-07-15T03:42:39Z", "author": {"login": "chamil321"}, "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -229,9 +230,18 @@ function parseCookieHeader(string cookieStringValue) returns Cookie[] {\n     string cookieValue = cookieStringValue;\n     string[] nameValuePairs = stringutils:split(cookieValue, SEMICOLON + SPACE);\n     foreach var item in nameValuePairs {\n-        string[] nameValue = stringutils:split(item, EQUALS);\n-        Cookie cookie = new (nameValue[0], nameValue[1]);\n-        cookiesInRequest.push(cookie);\n+        if (stringutils:matches(item, \"^([^=]+)=.*$\")) {\n+            string[] nameValue = stringutils:split(item, EQUALS);\n+            Cookie cookie;\n+            if (nameValue.length() > 1) {\n+                cookie = new (nameValue[0], nameValue[1]);\n+            } else {\n+                cookie = new (nameValue[0], \"\");\n+            }\n+            cookiesInRequest.push(cookie);\n+        } else {\n+            log:printError(\"Invalid cookie: \" + item + \", which must be in the format as [{name}=].\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abab44a84693159aee0803759267e27119f6795"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxOTc5NQ==", "bodyText": "Added in the c6932c6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24732#discussion_r454919795", "createdAt": "2020-07-15T09:31:50Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -229,9 +230,18 @@ function parseCookieHeader(string cookieStringValue) returns Cookie[] {\n     string cookieValue = cookieStringValue;\n     string[] nameValuePairs = stringutils:split(cookieValue, SEMICOLON + SPACE);\n     foreach var item in nameValuePairs {\n-        string[] nameValue = stringutils:split(item, EQUALS);\n-        Cookie cookie = new (nameValue[0], nameValue[1]);\n-        cookiesInRequest.push(cookie);\n+        if (stringutils:matches(item, \"^([^=]+)=.*$\")) {\n+            string[] nameValue = stringutils:split(item, EQUALS);\n+            Cookie cookie;\n+            if (nameValue.length() > 1) {\n+                cookie = new (nameValue[0], nameValue[1]);\n+            } else {\n+                cookie = new (nameValue[0], \"\");\n+            }\n+            cookiesInRequest.push(cookie);\n+        } else {\n+            log:printError(\"Invalid cookie: \" + item + \", which must be in the format as [{name}=].\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3MTk0MQ=="}, "originalCommit": {"oid": "8abab44a84693159aee0803759267e27119f6795"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzQxMjg5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/43_http_cookies.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTowOTowOFrOGx1SOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTowOTowOFrOGx1SOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNjQyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    http:Cookie[] reqstCookies=req.getCookies();\n          \n          \n            \n                    http:Cookie[] reqstCookies = req.getCookies();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24732#discussion_r454906427", "createdAt": "2020-07-15T09:09:08Z", "author": {"login": "chamil321"}, "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/43_http_cookies.bal", "diffHunk": "@@ -258,4 +258,23 @@ service cookie on new http:Listener(9253) {\n             var result = caller->respond(res);\n         }\n     }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/cookieBackend_13\"\n+   }\n+    resource function validateCookie(http:Caller caller, http:Request req) {\n+        http:Cookie[] reqstCookies=req.getCookies();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bad7407bd2cea5289c5862fc910c0a7e68c752"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzQxMzkzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/43_http_cookies.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTowOToyNVrOGx1S4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTowOToyNVrOGx1S4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNjU5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    foreach http:Cookie cookie in  reqstCookies {\n          \n          \n            \n                    foreach http:Cookie cookie in reqstCookies {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24732#discussion_r454906593", "createdAt": "2020-07-15T09:09:25Z", "author": {"login": "chamil321"}, "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/43_http_cookies.bal", "diffHunk": "@@ -258,4 +258,23 @@ service cookie on new http:Listener(9253) {\n             var result = caller->respond(res);\n         }\n     }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/cookieBackend_13\"\n+   }\n+    resource function validateCookie(http:Caller caller, http:Request req) {\n+        http:Cookie[] reqstCookies=req.getCookies();\n+        string meesage = \"Valid cookies: \";\n+        foreach http:Cookie cookie in  reqstCookies {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bad7407bd2cea5289c5862fc910c0a7e68c752"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzQyMDI2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/43_http_cookies.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToxMTowOFrOGx1WtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToxMTowOFrOGx1WtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNzU3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    string meesage = \"Valid cookies: \";\n          \n          \n            \n                    string message = \"Valid cookies: \";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24732#discussion_r454907572", "createdAt": "2020-07-15T09:11:08Z", "author": {"login": "chamil321"}, "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/43_http_cookies.bal", "diffHunk": "@@ -258,4 +258,23 @@ service cookie on new http:Listener(9253) {\n             var result = caller->respond(res);\n         }\n     }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/cookieBackend_13\"\n+   }\n+    resource function validateCookie(http:Caller caller, http:Request req) {\n+        http:Cookie[] reqstCookies=req.getCookies();\n+        string meesage = \"Valid cookies: \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bad7407bd2cea5289c5862fc910c0a7e68c752"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzQ2OTQzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/43_http_cookies.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToyNDoyNVrOGx11Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToyNDoyNVrOGx11Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxNTMzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            message = meesage.concat(name, \"=\", value , \",\");\n          \n          \n            \n                            message = mesage.concat(name, \"=\", value , \",\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24732#discussion_r454915339", "createdAt": "2020-07-15T09:24:25Z", "author": {"login": "chamil321"}, "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/43_http_cookies.bal", "diffHunk": "@@ -258,4 +258,23 @@ service cookie on new http:Listener(9253) {\n             var result = caller->respond(res);\n         }\n     }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/cookieBackend_13\"\n+   }\n+    resource function validateCookie(http:Caller caller, http:Request req) {\n+        http:Cookie[] reqstCookies = req.getCookies();\n+        string message = \"Valid cookies: \";\n+        foreach http:Cookie cookie in reqstCookies {\n+            var value = cookie.value;\n+            var name = cookie.name;\n+            if (value is string && name is string) {\n+                message = meesage.concat(name, \"=\", value , \",\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bfc08cd817aebc62e458a4007b0f32c33efd975"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODEwMDc0OnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/request/RequestNativeFunctionSuccessTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjozMDowMlrOGx712Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo0ODozOFrOGx8glA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxMzg0OQ==", "bodyText": "Isn't this assertion already implied by the previous assertion ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24732#discussion_r455013849", "createdAt": "2020-07-15T12:30:02Z", "author": {"login": "hemikak"}, "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/request/RequestNativeFunctionSuccessTest.java", "diffHunk": "@@ -748,4 +748,16 @@ public void testGetCookies() {\n                            \"No cookie objects in the Return Values\");\n         Assert.assertTrue(returnVals.length == 1);\n     }\n+\n+    @Test\n+    public void testGetCookiesWithEmptyValue() {\n+        ObjectValue inRequest = createRequestObject();\n+        ObjectValue entity = createEntityObject();\n+        inRequest.set(REQUEST_ENTITY_FIELD, entity);\n+        BValue[] returnVals = BRunUtil.invoke(compileResult, \"testGetCookiesWithEmptyValue\",\n+                new Object[]{inRequest});\n+        Assert.assertFalse(returnVals.length == 0 || returnVals[0] == null,\n+                \"No cookie objects in the Return Values\");\n+        Assert.assertEquals(returnVals.length, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346ed62f7ebfe70b677c3bed56ddd8233ae7cd0f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNDc4OA==", "bodyText": "I think it is not implied by the previous assertion because here, we are checking the actual length of the output but the previous assertion is checking that the output and output's first value are not empty.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24732#discussion_r455024788", "createdAt": "2020-07-15T12:48:38Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/request/RequestNativeFunctionSuccessTest.java", "diffHunk": "@@ -748,4 +748,16 @@ public void testGetCookies() {\n                            \"No cookie objects in the Return Values\");\n         Assert.assertTrue(returnVals.length == 1);\n     }\n+\n+    @Test\n+    public void testGetCookiesWithEmptyValue() {\n+        ObjectValue inRequest = createRequestObject();\n+        ObjectValue entity = createEntityObject();\n+        inRequest.set(REQUEST_ENTITY_FIELD, entity);\n+        BValue[] returnVals = BRunUtil.invoke(compileResult, \"testGetCookiesWithEmptyValue\",\n+                new Object[]{inRequest});\n+        Assert.assertFalse(returnVals.length == 0 || returnVals[0] == null,\n+                \"No cookie objects in the Return Values\");\n+        Assert.assertEquals(returnVals.length, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxMzg0OQ=="}, "originalCommit": {"oid": "346ed62f7ebfe70b677c3bed56ddd8233ae7cd0f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODEwODc5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjozMjoxN1rOGx76zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjozMjoxN1rOGx76zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxNTExNw==", "bodyText": "We can use Paths.get() function here to create the path.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24732#discussion_r455015117", "createdAt": "2020-07-15T12:32:17Z", "author": {"login": "hemikak"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -169,4 +169,15 @@ public void testSendPersistentCookiesWithoutPersistentCookieHandler() throws Bal\n                 \"cookieClient_12.bal\"}, balFilePath);\n         Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n     }\n+\n+    @Test(description = \"Test the cookie validation when using the getCookies()\")\n+    public void testCookieValidation() throws BallerinaTestException {\n+        String balFilePath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "346ed62f7ebfe70b677c3bed56ddd8233ae7cd0f"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 477, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}