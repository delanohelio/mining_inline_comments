{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNjY5Mjc4", "number": 25683, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDo0NDoyMVrOEh8l9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDo0NDo0MVrOEh8mKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDMxMjIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDo0NDoyMVrOHPivRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo0NzozNlrOHPlX_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1OTg0NA==", "bodyText": "shall we update the grammar rule in the doc comment above this method with limit clause?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25683#discussion_r486059844", "createdAt": "2020-09-10T04:44:21Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9066,11 +9065,12 @@ private STNode parseIntermediateClause(boolean isRhsExpr) {\n             case ASCENDING_KEYWORD:\n             case DESCENDING_KEYWORD:\n                 return parseOrderByClause(isRhsExpr);\n+            case LIMIT_KEYWORD:\n+                return parseLimitClause(isRhsExpr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e08218b3524c2dfe9f8090983ee23cc7ebf5ccb8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwMzAzNw==", "bodyText": "fixed in : f2064f7", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25683#discussion_r486103037", "createdAt": "2020-09-10T06:47:36Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9066,11 +9065,12 @@ private STNode parseIntermediateClause(boolean isRhsExpr) {\n             case ASCENDING_KEYWORD:\n             case DESCENDING_KEYWORD:\n                 return parseOrderByClause(isRhsExpr);\n+            case LIMIT_KEYWORD:\n+                return parseLimitClause(isRhsExpr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1OTg0NA=="}, "originalCommit": {"oid": "e08218b3524c2dfe9f8090983ee23cc7ebf5ccb8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDMxMjcyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDo0NDo0MVrOHPivkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo0NzoyOFrOHPlXtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1OTkyMA==", "bodyText": "doc above this method also", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25683#discussion_r486059920", "createdAt": "2020-09-10T04:44:41Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9034,9 +9034,8 @@ private STNode parseQueryExprRhs(STNode queryConstructType, boolean isRhsExpr) {\n         STNode intermediateClauses = STNodeFactory.createNodeList(clauses);\n         STNode queryPipeline = STNodeFactory.createQueryPipelineNode(fromClause, intermediateClauses);\n         STNode onConflictClause = parseOnConflictClause(isRhsExpr);\n-        STNode limitClause = parseLimitClause(isRhsExpr);\n         return STNodeFactory.createQueryExpressionNode(queryConstructType, queryPipeline, selectClause,\n-                onConflictClause, limitClause);\n+                onConflictClause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e08218b3524c2dfe9f8090983ee23cc7ebf5ccb8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwMjk2Nw==", "bodyText": "fixed in : f2064f7", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25683#discussion_r486102967", "createdAt": "2020-09-10T06:47:28Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9034,9 +9034,8 @@ private STNode parseQueryExprRhs(STNode queryConstructType, boolean isRhsExpr) {\n         STNode intermediateClauses = STNodeFactory.createNodeList(clauses);\n         STNode queryPipeline = STNodeFactory.createQueryPipelineNode(fromClause, intermediateClauses);\n         STNode onConflictClause = parseOnConflictClause(isRhsExpr);\n-        STNode limitClause = parseLimitClause(isRhsExpr);\n         return STNodeFactory.createQueryExpressionNode(queryConstructType, queryPipeline, selectClause,\n-                onConflictClause, limitClause);\n+                onConflictClause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1OTkyMA=="}, "originalCommit": {"oid": "e08218b3524c2dfe9f8090983ee23cc7ebf5ccb8"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 57, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}