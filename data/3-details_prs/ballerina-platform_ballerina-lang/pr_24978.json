{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NzU2NTA1", "number": 24978, "title": "Enable read and write IO APIs to a properties file", "bodyText": "Purpose\nFixes #22615\nApproach\nEnable the following APIs.\n\nreadProperty(key)\nreadAllProperties()\nwriteProperties(map<string> properties)\n\nSamples\nReading\nstring propertyFilePath = \"<PATH_TO_PROPERTIES_FILE>/config.properties\";\n    \nio:ReadableByteChannel rbc = check io:openReadableFile(propertyFilePath);\nio:ReadableCharacterChannel rch = new (rbc, \"UTF8\");\nio:println(rch.readProperty(\"name\"));\nstring propertyFilePath = \"<PATH_TO_PROPERTIES_FILE>/config.properties\";\n    \nio:ReadableByteChannel rbc = check io:openReadableFile(propertyFilePath);\nio:ReadableCharacterChannel rch = new (rbc, \"UTF8\");\nio:println(rch.readAllProperties());\nWriting\nstring propertyFilePath = \"<PATH_TO_PROPERTIES_FILE>/config.properties\";\n\nio:WritableByteChannel wbc = check io:openWritableFile(propertyFilePath);\nio:WritableCharacterChannel wch = new (wbc, \"UTF8\");\nmap<string> properties = {\n    name: \"John Smith\",\n    age: \"25\",\n    occupation: \"Banker\"\n};\n\nvar writeResults = wch.writeProperties(properties);\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-07-28T11:47:12Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978", "merged": true, "mergeCommit": {"oid": "049cdd47e19504177de6d479b2e083ee60397aeb"}, "closed": true, "closedAt": "2020-07-31T16:16:48Z", "author": {"login": "BuddhiWathsala"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5WVFBAFqTQ1NjYyMjc5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6V37VgFqTQ1OTI2MDM5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjIyNzk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#pullrequestreview-456622796", "createdAt": "2020-07-28T13:20:41Z", "commit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzoyMDo0MVrOG4MNJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzoyMDo0MVrOG4MNJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3MzQxNQ==", "bodyText": "We can move doc comments to align with the function now. The issue we had earlier is now fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461573415", "createdAt": "2020-07-28T13:20:41Z", "author": {"login": "daneshk"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -64,6 +64,26 @@ public type ReadableCharacterChannel object {\n         return readXmlExtern(self);\n     }\n \n+# Reads a property from a .properties file.\n+# ```ballerina\n+# string|io:Error result = readableCharChannel.readProperty(key);\n+# ```\n+# + key - The property key needs to read.\n+# + return - The read property value or else an `io:Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjI0NzU2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#pullrequestreview-456624756", "createdAt": "2020-07-28T13:22:53Z", "commit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzoyMjo1M1rOG4MTTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozNToyMFrOG4M2sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3NDk4OQ==", "bodyText": "Let's say I have to read 2 properties file in single ballerina code. Due to this only the first reader will be successful isn't it? We have to load properties every time from the reader.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461574989", "createdAt": "2020-07-28T13:22:53Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/java/org/ballerinalang/stdlib/io/utils/PropertyUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.io.utils;\n+\n+import org.ballerinalang.jvm.StringUtils;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+import org.ballerinalang.jvm.values.MappingInitialValueEntry;\n+import org.ballerinalang.jvm.values.api.BMap;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+/**\n+ * The utility class used to execute read/write operations to a property file.\n+ *\n+ */\n+public class PropertyUtils {\n+    private static final Logger log = LoggerFactory.getLogger(PropertyUtils.class);\n+    private static final BMapType mapType = new BMapType(BTypes.typeString);\n+    private static Properties properties = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3NzIwNw==", "bodyText": "Remove log", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461577207", "createdAt": "2020-07-28T13:26:05Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/java/org/ballerinalang/stdlib/io/utils/PropertyUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.io.utils;\n+\n+import org.ballerinalang.jvm.StringUtils;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+import org.ballerinalang.jvm.values.MappingInitialValueEntry;\n+import org.ballerinalang.jvm.values.api.BMap;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+/**\n+ * The utility class used to execute read/write operations to a property file.\n+ *\n+ */\n+public class PropertyUtils {\n+    private static final Logger log = LoggerFactory.getLogger(PropertyUtils.class);\n+    private static final BMapType mapType = new BMapType(BTypes.typeString);\n+    private static Properties properties = null;\n+\n+    // Read a property related to a given key and return the BString value.\n+    public static BString readProperty(Reader reader, BString key) throws IOException {\n+        if (properties == null) {\n+            properties = new Properties();\n+            properties.load(reader);\n+        }\n+        return org.ballerinalang.jvm.StringUtils.fromString(properties.getProperty(key.getValue()));\n+    }\n+\n+    // Read all properties and return as a ballerina map\n+    public static MapValue<BString, BString> readAllProperties(Reader reader) throws IOException {\n+        if (properties == null) {\n+            properties = new Properties();\n+            properties.load(reader);\n+        }\n+        MappingInitialValueEntry.KeyValueEntry[] keyValues = new MappingInitialValueEntry\n+                .KeyValueEntry[properties.stringPropertyNames().size()];\n+        int i = 0;\n+        for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\n+            String key = (String) e.nextElement();\n+            String value = properties.getProperty(key);\n+            MappingInitialValueEntry.KeyValueEntry keyValue = new MappingInitialValueEntry.KeyValueEntry(\n+                    StringUtils.fromString(key), StringUtils.fromString(value));\n+            keyValues[i] = keyValue;\n+            i++;\n+        }\n+        return new MapValueImpl<>(mapType, keyValues);\n+    }\n+\n+    // Generate writable string content to a property file using a given map.\n+    public static String getWritablePropertyContent(BMap<BString, BString> propertiesMap) {\n+        Set<Map.Entry<BString, BString>> propertiesSet = propertiesMap.entrySet();\n+        Iterator<Map.Entry<BString, BString>> iterator = propertiesSet.iterator();\n+        String content = \"\";\n+        while (iterator.hasNext()) {\n+            Map.Entry<BString, BString> entry = iterator.next();\n+            content = content +\n+                   entry.getKey().getValue() + \"=\" + entry.getValue().getValue() + \"\\n\";\n+        }\n+        log.info(content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3OTA0Ng==", "bodyText": "Shall we include default value too? If not nil this will return the default value in case property is not set in the file.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461579046", "createdAt": "2020-07-28T13:28:42Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -64,6 +64,26 @@ public type ReadableCharacterChannel object {\n         return readXmlExtern(self);\n     }\n \n+# Reads a property from a .properties file.\n+# ```ballerina\n+# string|io:Error result = readableCharChannel.readProperty(key);\n+# ```\n+# + key - The property key needs to read.\n+# + return - The read property value or else an `io:Error`\n+    public function readProperty(string key) returns @tainted string|Error {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4MzYxNg==", "bodyText": "Any reason to write properties using custom content rather than using Properties.store()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461583616", "createdAt": "2020-07-28T13:34:47Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/java/org/ballerinalang/stdlib/io/nativeimpl/CharacterChannelUtils.java", "diffHunk": "@@ -146,4 +168,16 @@ public static Object writeXml(ObjectValue characterChannelObj, XMLValue content)\n         }\n         return null;\n     }\n+\n+    public static Object writeProperties(ObjectValue characterChannelObj, BMap<BString, BString> propertyMap) {\n+        try {\n+            CharacterChannel characterChannel = (CharacterChannel) characterChannelObj\n+                    .getNativeData(CHARACTER_CHANNEL_NAME);\n+            String content = PropertyUtils.getWritablePropertyContent(propertyMap);\n+            IOUtils.writeFull(characterChannel, content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NDA0OA==", "bodyText": "Comments can be aligned properly now. The issue with the doc is fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461584048", "createdAt": "2020-07-28T13:35:20Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -64,6 +64,26 @@ public type ReadableCharacterChannel object {\n         return readXmlExtern(self);\n     }\n \n+# Reads a property from a .properties file.\n+# ```ballerina\n+# string|io:Error result = readableCharChannel.readProperty(key);\n+# ```\n+# + key - The property key needs to read.\n+# + return - The read property value or else an `io:Error`\n+    public function readProperty(string key) returns @tainted string|Error {\n+        return readPropertyExtern(self, key);\n+    }\n+\n+# Reads all properties from a .properties file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjM3NjM3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#pullrequestreview-456637637", "createdAt": "2020-07-28T13:36:46Z", "commit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5", "committedDate": "2020-07-28T12:00:16Z", "message": "fix style"}, "afterCommit": {"oid": "f88a789ab5ed7de828b16fe62483e93dc68ddb40", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f88a789ab5ed7de828b16fe62483e93dc68ddb40", "committedDate": "2020-07-28T19:18:38Z", "message": "enable tests for read/write properties"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7206c9b4d00548985d2ec5d4cf5e0c4b64fb4f21", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7206c9b4d00548985d2ec5d4cf5e0c4b64fb4f21", "committedDate": "2020-07-28T20:43:32Z", "message": "fix writeProperties tests"}, "afterCommit": {"oid": "7eae9a467332264d96abf876f12cdb5dec5e275c", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7eae9a467332264d96abf876f12cdb5dec5e275c", "committedDate": "2020-07-29T10:30:32Z", "message": "update tests with default value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MTY1Mzgy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#pullrequestreview-458165382", "createdAt": "2020-07-30T07:52:57Z", "commit": {"oid": "7eae9a467332264d96abf876f12cdb5dec5e275c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1Mjo1N1rOG5YAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1NjowNlrOG5YHhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNTM0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (result is string) {\n          \n          \n            \n                        return result;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return result;\n          \n          \n            \n                    }\n          \n          \n            \n                    return result;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r462815348", "createdAt": "2020-07-30T07:52:57Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/test/resources/test-src/io/char_io.bal", "diffHunk": "@@ -130,6 +130,61 @@ function readXml() returns @tainted xml|error {\n     return e;\n }\n \n+function readAvailableProperty(string key) returns @tainted string?|error {\n+    var rCha = rch;\n+    if(rCha is io:ReadableCharacterChannel) {\n+        var result = rCha.readProperty(key);\n+        if (result is string) {\n+            return result;\n+        } else {\n+            return result;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eae9a467332264d96abf876f12cdb5dec5e275c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNzE1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + comments - The comments to be added to the file.\n          \n          \n            \n                # + comment - Comment describing the property list\n          \n      \n    \n    \n  \n\nChange in the api too", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r462817158", "createdAt": "2020-07-30T07:56:06Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,46 +32,57 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, charset);\n     }\n \n-# Writes a given sequence of characters (string).\n-# ```ballerina\n-# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n-# ```\n-#\n-# + content - Content, which should be written\n-# + startOffset - Number of characters, which should be offset when writing the content\n-# + return - Content length that written or else `io:Error`\n+    # Writes a given sequence of characters (string).\n+    # ```ballerina\n+    # int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+    # ```\n+    #\n+    # + content - Content, which should be written\n+    # + startOffset - Number of characters, which should be offset when writing the content\n+    # + return - Content length that written or else `io:Error`\n     public function write(string content, int startOffset) returns int|Error {\n         return writeExtern(self, content, startOffset);\n     }\n \n-# Writes a given JSON to the given channel.\n-# ```ballerina\n-# io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n-# ```\n-#\n-# + content - The JSON, which should be written\n-# + return - If an `io:Error` occurred while writing\n+    # Writes a given JSON to the given channel.\n+    # ```ballerina\n+    # io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n+    # ```\n+    #\n+    # + content - The JSON, which should be written\n+    # + return - If an `io:Error` occurred while writing\n     public function writeJson(json content) returns Error? {\n         return writeJsonExtern(self, content);\n     }\n \n-# Writes a given XML to the channel.\n-# ```ballerina\n-# io:Error? err = writableCharChannel.writeXml(inputXml, 0);\n-# ```\n-# \n-# + content - The XML, which should be written\n-# + return - `()` or else `io:Error` if any error occurred\n+    # Writes a given XML to the channel.\n+    # ```ballerina\n+    # io:Error? err = writableCharChannel.writeXml(inputXml, 0);\n+    # ```\n+    #\n+    # + content - The XML, which should be written\n+    # + return - `()` or else `io:Error` if any error occurred\n     public function writeXml(xml content) returns Error? {\n         return writeXmlExtern(self, content);\n     }\n \n-# Closes a given `WritableCharacterChannel` channel.\n-# ```ballerina\n-# io:Error err = writableCharChannel.close();\n-# ```\n-#\n-# + return - `()` or else an `io:Error` if any error occurred\n+    # Writes a given key-valued pair `map<string>` to a property file.\n+    # ```ballerina\n+    # io:Error? err = writableCharChannel.writeProperties(properties);\n+    # ```\n+    # + properties - The map<string> that contains keys and values.\n+    # + comments - The comments to be added to the file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eae9a467332264d96abf876f12cdb5dec5e275c"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75412e86237f0870bceb0f59675184a3d3fad2cf", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/75412e86237f0870bceb0f59675184a3d3fad2cf", "committedDate": "2020-07-30T08:07:55Z", "message": "Update stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal\n\nCo-authored-by: Niveathika <niveathika@wso2.com>"}, "afterCommit": {"oid": "a049ed9eebce67cb1c929a1c282c403dafbcf130", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a049ed9eebce67cb1c929a1c282c403dafbcf130", "committedDate": "2020-07-30T08:18:46Z", "message": "Minor improvements to the IO test and API doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a049ed9eebce67cb1c929a1c282c403dafbcf130", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a049ed9eebce67cb1c929a1c282c403dafbcf130", "committedDate": "2020-07-30T08:18:46Z", "message": "Minor improvements to the IO test and API doc"}, "afterCommit": {"oid": "b963c08db5ff03986129160e50ad1f6d24df3662", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b963c08db5ff03986129160e50ad1f6d24df3662", "committedDate": "2020-07-30T08:39:54Z", "message": "Add test for property read and write"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1264b1a95fd5287e119fe25d65a19a65d97a46a", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1264b1a95fd5287e119fe25d65a19a65d97a46a", "committedDate": "2020-07-30T09:16:48Z", "message": "Rename comments parameter"}, "afterCommit": {"oid": "b6cdce0427a4eb57d56230a51b76e75d9dcd54cb", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6cdce0427a4eb57d56230a51b76e75d9dcd54cb", "committedDate": "2020-07-30T09:50:25Z", "message": "Rename comments parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3cc99f7e6e0008912c08b853f9f806806eac55", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a3cc99f7e6e0008912c08b853f9f806806eac55", "committedDate": "2020-07-31T07:34:40Z", "message": "Add util functions for property read/write"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f20a12a90622cf7ff61db9b72b3ff5fc25098629", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f20a12a90622cf7ff61db9b72b3ff5fc25098629", "committedDate": "2020-07-31T07:34:41Z", "message": "Enable property read/write interop functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad07182e23a6120b349ce6fe97f00e36bf6ab2ee", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad07182e23a6120b349ce6fe97f00e36bf6ab2ee", "committedDate": "2020-07-31T07:34:41Z", "message": "Enable property read APIs and fix doc comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5220fa560db2066cd1502645568d23ee895b211", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5220fa560db2066cd1502645568d23ee895b211", "committedDate": "2020-07-31T07:34:41Z", "message": "Enable property write APIs and fix doc comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a31abbe5423a5596f290fb9987468209edef5914", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a31abbe5423a5596f290fb9987468209edef5914", "committedDate": "2020-07-31T07:34:41Z", "message": "Add test properties file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c2ca837b747a775476278bc0f69c74e0180b9e", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1c2ca837b747a775476278bc0f69c74e0180b9e", "committedDate": "2020-07-31T07:34:41Z", "message": "Add test for property read and write"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8e0ee9e79c437c4b8f3e3ed63ab6f7eefd896be", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8e0ee9e79c437c4b8f3e3ed63ab6f7eefd896be", "committedDate": "2020-07-31T07:34:41Z", "message": "Rename comments parameter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6cdce0427a4eb57d56230a51b76e75d9dcd54cb", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6cdce0427a4eb57d56230a51b76e75d9dcd54cb", "committedDate": "2020-07-30T09:50:25Z", "message": "Rename comments parameter"}, "afterCommit": {"oid": "e8e0ee9e79c437c4b8f3e3ed63ab6f7eefd896be", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8e0ee9e79c437c4b8f3e3ed63ab6f7eefd896be", "committedDate": "2020-07-31T07:34:41Z", "message": "Rename comments parameter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjYwMzkw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#pullrequestreview-459260390", "createdAt": "2020-07-31T15:22:47Z", "commit": {"oid": "e8e0ee9e79c437c4b8f3e3ed63ab6f7eefd896be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3727, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}