{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MDQzODM4", "number": 26137, "title": "Implement Testerina Code coverage for Multiple modules", "bodyText": "Purpose\nImplement code coverage for test cases that cover source files from separate modules.\nFixes #25791\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-09-28T10:28:09Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137", "merged": true, "mergeCommit": {"oid": "cd2bb8344e16460779849ee60842f03f04c682e5"}, "closed": true, "closedAt": "2020-10-16T03:01:31Z", "author": {"login": "Ibaqu"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNiwaRABqjM4MTc4Mzk1NDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdStIygAFqTUwOTExNzQ1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20ca7b262cc5bf0187b72cf9caf5670db0527553", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20ca7b262cc5bf0187b72cf9caf5670db0527553", "committedDate": "2020-09-28T10:25:23Z", "message": "Overwrite functionality for CodeCoverage"}, "afterCommit": {"oid": "923cf2bfda8cbe3f2082a9d9e88b1e6490d9c1be", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/923cf2bfda8cbe3f2082a9d9e88b1e6490d9c1be", "committedDate": "2020-09-29T07:07:20Z", "message": "Overwrite functionality for CodeCoverage"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd85f5af3309d8194cd5d675d839c1f709a68b76", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd85f5af3309d8194cd5d675d839c1f709a68b76", "committedDate": "2020-09-30T05:14:00Z", "message": "Refactoring Code coverage improvement"}, "afterCommit": {"oid": "e434a1652ddc73586560a6d785d208ec0b0ae80f", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e434a1652ddc73586560a6d785d208ec0b0ae80f", "committedDate": "2020-10-05T10:13:54Z", "message": "Refactoring Code coverage improvement"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81e83c35ba0298c1a4064b25c678bab944c3956d", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81e83c35ba0298c1a4064b25c678bab944c3956d", "committedDate": "2020-10-05T10:33:41Z", "message": "Add Testerina TestReportTests"}, "afterCommit": {"oid": "0882ecb76c4d2bd282cef2bc8ea80410011f6002", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0882ecb76c4d2bd282cef2bc8ea80410011f6002", "committedDate": "2020-10-06T05:06:26Z", "message": "Add Testerina TestReportTests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "328d9a4a983269d5b4d587e762b0b6f9f52649e0", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/328d9a4a983269d5b4d587e762b0b6f9f52649e0", "committedDate": "2020-10-06T10:21:03Z", "message": "Testerina code coverage spotbugs fix"}, "afterCommit": {"oid": "b8f6976bf2a4e7230da0a684b0a04d73ab8407d6", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8f6976bf2a4e7230da0a684b0a04d73ab8407d6", "committedDate": "2020-10-07T06:02:55Z", "message": "Testerina code coverage spotbugs fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNjA0MTE0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#pullrequestreview-503604114", "createdAt": "2020-10-07T07:42:05Z", "commit": {"oid": "b8f6976bf2a4e7230da0a684b0a04d73ab8407d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo0MjowNVrOHdmhfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo0MjowNVrOHdmhfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwMTkxNw==", "bodyText": "Lets resolve each child directory. i.e. targetDirPath.resolve(\"caches\").resolve(\"jar_cache\").resolve(orgName)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r500801917", "createdAt": "2020-10-07T07:42:05Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java", "diffHunk": "@@ -68,6 +69,9 @@ public CoverageReport(Path sourceJarPath, Path targetDirPath, String orgName, St\n         this.classesDirectory = projectDir.resolve(TesterinaConstants.BIN_DIR);\n         this.executionDataFile = projectDir.resolve(TesterinaConstants.EXEC_FILE_NAME);\n         this.execFileLoader = new ExecFileLoader();\n+\n+        this.jarCache = targetDirPath.resolve(\"caches/jar_cache/\").resolve(orgName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f6976bf2a4e7230da0a684b0a04d73ab8407d6"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNjA2NTg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#pullrequestreview-503606589", "createdAt": "2020-10-07T07:45:16Z", "commit": {"oid": "b8f6976bf2a4e7230da0a684b0a04d73ab8407d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo0NToxNlrOHdmo6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo0NToxNlrOHdmo6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwMzgxNw==", "bodyText": "unnecessary new lines", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r500803817", "createdAt": "2020-10-07T07:45:16Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/ModuleCoverage.java", "diffHunk": "@@ -1,3 +1,5 @@\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f6976bf2a4e7230da0a684b0a04d73ab8407d6"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "296b53835ef3dcd8760be8a9e87612cea5e53059", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/296b53835ef3dcd8760be8a9e87612cea5e53059", "committedDate": "2020-10-07T08:08:13Z", "message": "Address PR comments"}, "afterCommit": {"oid": "5e92a4c0edf72e515749c1a633c3d113fedcba84", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e92a4c0edf72e515749c1a633c3d113fedcba84", "committedDate": "2020-10-13T05:24:57Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDkxNzI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#pullrequestreview-507091728", "createdAt": "2020-10-13T06:02:44Z", "commit": {"oid": "5e92a4c0edf72e515749c1a633c3d113fedcba84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowMjo0NFrOHgWj8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowMjo0NFrOHgWj8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4NjEyOA==", "bodyText": "How did we come up with this value as 5 for maxDepth?\nShall we define it as a constant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503686128", "createdAt": "2020-10-13T06:02:44Z", "author": {"login": "Dilhasha"}, "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java", "diffHunk": "@@ -76,60 +80,94 @@ public CoverageReport(Path sourceJarPath, Path targetDirPath, String orgName, St\n      * @throws IOException when file operations are failed\n      */\n     public void generateReport() throws IOException {\n-        try {\n-            CodeCoverageUtils.unzipCompiledSource(sourceJarPath, projectDir, orgName, moduleName, version);\n-        } catch (NoSuchFileException e) {\n+\n+        // Obtain a path list of all the .jar files generated\n+        List<Path> pathList;\n+        try (Stream<Path> walk = Files.walk(this.jarCache, 5)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e92a4c0edf72e515749c1a633c3d113fedcba84"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDkyMjU2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#pullrequestreview-507092256", "createdAt": "2020-10-13T06:03:54Z", "commit": {"oid": "5e92a4c0edf72e515749c1a633c3d113fedcba84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowMzo1NFrOHgWlig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowMzo1NFrOHgWlig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4NjUzOA==", "bodyText": "Is this a TODO?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503686538", "createdAt": "2020-10-13T06:03:54Z", "author": {"login": "Dilhasha"}, "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java", "diffHunk": "@@ -76,60 +80,94 @@ public CoverageReport(Path sourceJarPath, Path targetDirPath, String orgName, St\n      * @throws IOException when file operations are failed\n      */\n     public void generateReport() throws IOException {\n-        try {\n-            CodeCoverageUtils.unzipCompiledSource(sourceJarPath, projectDir, orgName, moduleName, version);\n-        } catch (NoSuchFileException e) {\n+\n+        // Obtain a path list of all the .jar files generated\n+        List<Path> pathList;\n+        try (Stream<Path> walk = Files.walk(this.jarCache, 5)) {\n+            pathList = walk.map(path -> path).filter(f -> f.toString().endsWith(version + \".jar\")).collect(\n+                    Collectors.toList());\n+        } catch (IOException e) {\n             return;\n         }\n \n-        execFileLoader.load(executionDataFile.toFile());\n+        if (!pathList.isEmpty()) {\n+            // For each jar file found, we unzip it for this particular module\n+            for (Path moduleJarPath : pathList) {\n+                try {\n+                    // Creates coverage folder with each class per module\n+                    CodeCoverageUtils.unzipCompiledSource(moduleJarPath, projectDir, orgName, moduleName, version);\n+                } catch (NoSuchFileException e) {\n+                    return;\n+                }\n+            }\n+\n+            execFileLoader.load(executionDataFile.toFile());\n+            final IBundleCoverage bundleCoverage = analyzeStructure();\n+            createReport(bundleCoverage);\n+        } else {\n+            String msg = \"Unable to generate code coverage for the module \" + moduleName + \". Jar files dont exist.\";\n+            throw new NoSuchFileException(msg);\n+        }\n \n-        final IBundleCoverage bundleCoverage = analyzeStructure();\n-        createReport(bundleCoverage);\n     }\n \n     private IBundleCoverage analyzeStructure() throws IOException {\n         final CoverageBuilder coverageBuilder = new CoverageBuilder();\n-        final Analyzer analyzer = new Analyzer(\n-                execFileLoader.getExecutionDataStore(), coverageBuilder);\n+        final Analyzer analyzer = new Analyzer(execFileLoader.getExecutionDataStore(), coverageBuilder);\n         analyzer.analyzeAll(classesDirectory.toFile());\n         return coverageBuilder.getBundle(title);\n     }\n \n     private void createReport(final IBundleCoverage bundleCoverage) {\n-        boolean containsSourceFiles;\n+        boolean containsSourceFiles = true;\n \n         for (IPackageCoverage packageCoverage : bundleCoverage.getPackages()) {\n+            // I havent tested the behaviour of single files", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e92a4c0edf72e515749c1a633c3d113fedcba84"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDk1MjY0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#pullrequestreview-507095264", "createdAt": "2020-10-13T06:10:50Z", "commit": {"oid": "5e92a4c0edf72e515749c1a633c3d113fedcba84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxMDo1MFrOHgWvLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxMDo1MFrOHgWvLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTAwNA==", "bodyText": "The module name can include \".\" as well right?\nLet's assume we have a project with 2 modules as \"module_test\" & \"module.test\", will this have an impact?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#discussion_r503689004", "createdAt": "2020-10-13T06:10:50Z", "author": {"login": "Dilhasha"}, "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/entity/CoverageReport.java", "diffHunk": "@@ -76,60 +80,94 @@ public CoverageReport(Path sourceJarPath, Path targetDirPath, String orgName, St\n      * @throws IOException when file operations are failed\n      */\n     public void generateReport() throws IOException {\n-        try {\n-            CodeCoverageUtils.unzipCompiledSource(sourceJarPath, projectDir, orgName, moduleName, version);\n-        } catch (NoSuchFileException e) {\n+\n+        // Obtain a path list of all the .jar files generated\n+        List<Path> pathList;\n+        try (Stream<Path> walk = Files.walk(this.jarCache, 5)) {\n+            pathList = walk.map(path -> path).filter(f -> f.toString().endsWith(version + \".jar\")).collect(\n+                    Collectors.toList());\n+        } catch (IOException e) {\n             return;\n         }\n \n-        execFileLoader.load(executionDataFile.toFile());\n+        if (!pathList.isEmpty()) {\n+            // For each jar file found, we unzip it for this particular module\n+            for (Path moduleJarPath : pathList) {\n+                try {\n+                    // Creates coverage folder with each class per module\n+                    CodeCoverageUtils.unzipCompiledSource(moduleJarPath, projectDir, orgName, moduleName, version);\n+                } catch (NoSuchFileException e) {\n+                    return;\n+                }\n+            }\n+\n+            execFileLoader.load(executionDataFile.toFile());\n+            final IBundleCoverage bundleCoverage = analyzeStructure();\n+            createReport(bundleCoverage);\n+        } else {\n+            String msg = \"Unable to generate code coverage for the module \" + moduleName + \". Jar files dont exist.\";\n+            throw new NoSuchFileException(msg);\n+        }\n \n-        final IBundleCoverage bundleCoverage = analyzeStructure();\n-        createReport(bundleCoverage);\n     }\n \n     private IBundleCoverage analyzeStructure() throws IOException {\n         final CoverageBuilder coverageBuilder = new CoverageBuilder();\n-        final Analyzer analyzer = new Analyzer(\n-                execFileLoader.getExecutionDataStore(), coverageBuilder);\n+        final Analyzer analyzer = new Analyzer(execFileLoader.getExecutionDataStore(), coverageBuilder);\n         analyzer.analyzeAll(classesDirectory.toFile());\n         return coverageBuilder.getBundle(title);\n     }\n \n     private void createReport(final IBundleCoverage bundleCoverage) {\n-        boolean containsSourceFiles;\n+        boolean containsSourceFiles = true;\n \n         for (IPackageCoverage packageCoverage : bundleCoverage.getPackages()) {\n+            // I havent tested the behaviour of single files\n             if (TesterinaConstants.DOT.equals(moduleName)) {\n                 containsSourceFiles = packageCoverage.getName().isEmpty();\n-            } else {\n-                containsSourceFiles = packageCoverage.getName().contains(orgName + \"/\" + moduleName);\n             }\n+\n             if (containsSourceFiles) {\n                 for (ISourceFileCoverage sourceFileCoverage : packageCoverage.getSourceFiles()) {\n-                    if (sourceFileCoverage.getName().contains(BLangConstants.BLANG_SRC_FILE_SUFFIX) &&\n-                            !sourceFileCoverage.getName().contains(\"tests/\")) {\n+\n+                    // Extract the Module name individually for each source file\n+                    // This is done since some source files come from other modules\n+                    // sourceFileCoverage : \"<orgname>/<moduleName>:<version>\n+                    String sourceFileModule = sourceFileCoverage.getPackageName().split(\"/\")[1];\n+\n+                    if (sourceFileCoverage.getName().contains(BLangConstants.BLANG_SRC_FILE_SUFFIX)\n+                            && !sourceFileCoverage.getName().contains(\"tests/\")) {\n                         List<Integer> coveredLines = new ArrayList<>();\n                         List<Integer> missedLines = new ArrayList<>();\n+\n                         for (int i = sourceFileCoverage.getFirstLine(); i <= sourceFileCoverage.getLastLine(); i++) {\n                             ILine line = sourceFileCoverage.getLine(i);\n-                            if (line.getInstructionCounter().getTotalCount() == 0\n-                                    && line.getBranchCounter().getTotalCount() == 0) {\n+\n+                            if (line.getInstructionCounter().getTotalCount() == 0 &&\n+                                    line.getBranchCounter().getTotalCount() == 0) {\n                                 // do nothing. This is to capture the empty lines\n-                            } else if ((line.getBranchCounter().getCoveredCount() == 0\n-                                    && line.getBranchCounter().getMissedCount() > 0)\n-                                    || line.getStatus() == NOT_COVERED) {\n+                            } else if ((line.getBranchCounter().getCoveredCount() == 0 &&\n+                                    line.getBranchCounter().getMissedCount() > 0) || line.getStatus() == NOT_COVERED) {\n                                 missedLines.add(i);\n                             } else if (line.getStatus() == PARTLY_COVERED || line.getStatus() == FULLY_COVERED) {\n                                 coveredLines.add(i);\n                             }\n                         }\n-                        ModuleCoverage.getInstance().addSourceFileCoverage(moduleName, sourceFileCoverage.getName(),\n-                                coveredLines, missedLines);\n+\n+                        // Only add the source files that belong to the same module\n+                        if (sourceFileModule.equals(moduleName)) {\n+                            ModuleCoverage.getInstance().addSourceFileCoverage(sourceFileModule,\n+                                    sourceFileCoverage.getName(), coveredLines, missedLines);\n+                        } else {\n+                            String jsonCachePath = this.jsonCache.toString() + \"/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e92a4c0edf72e515749c1a633c3d113fedcba84"}, "originalPosition": 152}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e92a4c0edf72e515749c1a633c3d113fedcba84", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e92a4c0edf72e515749c1a633c3d113fedcba84", "committedDate": "2020-10-13T05:24:57Z", "message": "Address PR comments"}, "afterCommit": {"oid": "0db566f333d0e2978e5612d188b5736ff60cabb7", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0db566f333d0e2978e5612d188b5736ff60cabb7", "committedDate": "2020-10-13T07:49:22Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e07dfa122cfd317da13980ce62ed265ed442f5af", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e07dfa122cfd317da13980ce62ed265ed442f5af", "committedDate": "2020-10-14T08:00:47Z", "message": "Testerina Code Coverage improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3ab4e1e33e9f5b30e6021aed85cafd66b7a2e31", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3ab4e1e33e9f5b30e6021aed85cafd66b7a2e31", "committedDate": "2020-10-14T08:00:47Z", "message": "Fix line coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3638ec50892476a9c9263ed8b0bf0837a61540df", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3638ec50892476a9c9263ed8b0bf0837a61540df", "committedDate": "2020-10-14T08:00:47Z", "message": "Overwrite functionality for CodeCoverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "860a004403efbc848aa5a45c18e239850d81bf65", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/860a004403efbc848aa5a45c18e239850d81bf65", "committedDate": "2020-10-14T08:00:47Z", "message": "Refactoring Code coverage improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5478c4a63051cd4f4fd335d1dcdd843fd4591c37", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5478c4a63051cd4f4fd335d1dcdd843fd4591c37", "committedDate": "2020-10-14T08:00:47Z", "message": "Add Testerina TestReportTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ca13cda858f8b40f20f3ced9a048164ca78e4be", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ca13cda858f8b40f20f3ced9a048164ca78e4be", "committedDate": "2020-10-14T08:00:47Z", "message": "Testerina code coverage spotbugs fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e45af1a7bc232ccdee2631cdb4f79525303bff5", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e45af1a7bc232ccdee2631cdb4f79525303bff5", "committedDate": "2020-10-14T08:00:47Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0db566f333d0e2978e5612d188b5736ff60cabb7", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0db566f333d0e2978e5612d188b5736ff60cabb7", "committedDate": "2020-10-13T07:49:22Z", "message": "Address PR comments"}, "afterCommit": {"oid": "0e45af1a7bc232ccdee2631cdb4f79525303bff5", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e45af1a7bc232ccdee2631cdb4f79525303bff5", "committedDate": "2020-10-14T08:00:47Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b07678d29427a60e2e0792319117e547f044702", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b07678d29427a60e2e0792319117e547f044702", "committedDate": "2020-10-14T10:18:27Z", "message": "Pretty print json"}, "afterCommit": {"oid": "3dae5c29a78641c314b99f3658a73b99d22198fb", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3dae5c29a78641c314b99f3658a73b99d22198fb", "committedDate": "2020-10-14T14:23:23Z", "message": "Pretty print json"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dae5c29a78641c314b99f3658a73b99d22198fb", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3dae5c29a78641c314b99f3658a73b99d22198fb", "committedDate": "2020-10-14T14:23:23Z", "message": "Pretty print json"}, "afterCommit": {"oid": "7e8386a144346df88466ce5afe7ca7919a5ca394", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e8386a144346df88466ce5afe7ca7919a5ca394", "committedDate": "2020-10-15T03:52:11Z", "message": "Fix failing Code coverage test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f81cc94d69dce56e94776aaf88b21d0e80e73515", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f81cc94d69dce56e94776aaf88b21d0e80e73515", "committedDate": "2020-10-15T07:20:52Z", "message": "Fix failing Code coverage test case"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e8386a144346df88466ce5afe7ca7919a5ca394", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e8386a144346df88466ce5afe7ca7919a5ca394", "committedDate": "2020-10-15T03:52:11Z", "message": "Fix failing Code coverage test case"}, "afterCommit": {"oid": "f81cc94d69dce56e94776aaf88b21d0e80e73515", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f81cc94d69dce56e94776aaf88b21d0e80e73515", "committedDate": "2020-10-15T07:20:52Z", "message": "Fix failing Code coverage test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MTE3NDU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26137#pullrequestreview-509117455", "createdAt": "2020-10-15T08:03:12Z", "commit": {"oid": "f81cc94d69dce56e94776aaf88b21d0e80e73515"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4470, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}