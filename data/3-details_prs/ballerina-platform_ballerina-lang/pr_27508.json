{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNDc1NjY4", "number": 27508, "title": "[Debugger Expression Evaluation] Enhance function, object method and langlib invocations support using semantic API ", "bodyText": "Purpose\nThis PR improves the existing ballerina debugger expression evaluation engine support for function, method invocation and langlib invocations, by using the new semantic APIs to retrieve function definition information.\nFixes #27476.\nRemarks\nHowever, this implementation is having a blocker as the semantic API supports only a subset of lang libraries (pre-declared) when accessing lang lib function information, resulting array and value library functions are not supported ATM. Refer #27520 to track the progress.\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-12-15T17:46:13Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27508", "merged": true, "mergeCommit": {"oid": "869332aa46b048763c3ed73c20fd46dd6ad60903"}, "closed": true, "closedAt": "2020-12-21T13:04:37Z", "author": {"login": "NipunaRanasinghe"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmZHP1AH2gAyNTQwNDc1NjY4OmY1M2Q2YjI5OGMzOGMwMzE0OWZmMDFiM2MzMzVkNzNjMjYyMzlmMjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoVj_-AFqTU1NjM2MTk0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f53d6b298c38c03149ff01b3c335d73c26239f26", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f53d6b298c38c03149ff01b3c335d73c26239f26", "committedDate": "2020-12-15T12:01:54Z", "message": "Integrate semantic API for function invocation evaluation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6589344630f86d1c3b628b7ef2f8d20fa8a2b207", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6589344630f86d1c3b628b7ef2f8d20fa8a2b207", "committedDate": "2020-12-15T13:46:23Z", "message": "Refactor evaluation utils and improve defaultable parameter handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2aebf966c8c7448fb8dc577ddf4df7fa61376c5", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2aebf966c8c7448fb8dc577ddf4df7fa61376c5", "committedDate": "2020-12-15T15:04:12Z", "message": "Fix object methods with semantic API support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5343fcbb2ea28a717f7e2aceefd0bf09c71affd2", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5343fcbb2ea28a717f7e2aceefd0bf09c71affd2", "committedDate": "2020-12-15T17:35:37Z", "message": "Fix runtime identifier encoding API related issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c9b0b2ce39e24fc81df43389975abc0b98a495", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8c9b0b2ce39e24fc81df43389975abc0b98a495", "committedDate": "2020-12-16T07:09:21Z", "message": "Improve langlib invocations using semantic API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0522e4d56077e83b857374ca7f8102b69756aee6", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0522e4d56077e83b857374ca7f8102b69756aee6", "committedDate": "2020-12-16T07:10:02Z", "message": "Disable failing test scenarios due to a semantic API bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db7f78ed0b9266862090ea47409d50f8e83edbd", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0db7f78ed0b9266862090ea47409d50f8e83edbd", "committedDate": "2020-12-16T07:20:23Z", "message": "Remove obsolete utils which extracts lang lib versions from loaded classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c482685a47a63c648c467e08f9249717d9bbb828", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c482685a47a63c648c467e08f9249717d9bbb828", "committedDate": "2020-12-16T07:33:49Z", "message": "Fix failing tests due to semantic API bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcab4970c32b9b40e187cd3d49be30a55862e847", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dcab4970c32b9b40e187cd3d49be30a55862e847", "committedDate": "2020-12-16T07:40:17Z", "message": "Sync with master and resolve merge conflicts\n\n# Conflicts:\n#\tmisc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/SuspendedContext.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aefc37dc1b078de38872baa94c3da206a09b76f3", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aefc37dc1b078de38872baa94c3da206a09b76f3", "committedDate": "2020-12-16T08:36:59Z", "message": "Resolve more conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDY0NTQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27508#pullrequestreview-553464545", "createdAt": "2020-12-16T08:44:06Z", "commit": {"oid": "dcab4970c32b9b40e187cd3d49be30a55862e847"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODo0NDowNlrOIG6BEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODo0NDowNlrOIG6BEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDExMjkxNQ==", "bodyText": "If the goal is to find the function from within the constructs in the module itself, you can use the moduleLevelSymbols() API. It basically retrieves the symbols of all the module-level constructs, including non-public ones.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27508#discussion_r544112915", "createdAt": "2020-12-16T08:44:06Z", "author": {"login": "pubudu91"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/FunctionInvocationExpressionEvaluator.java", "diffHunk": "@@ -83,69 +87,39 @@ public BExpressionValue evaluate() throws EvaluationException {\n         }\n     }\n \n-    /**\n-     * Searches for a matching jvm method for a given ballerina function using its syntax node and the debug context\n-     * information.\n-     *\n-     * @return the matching JVM method, if available\n-     */\n-    private Optional<GeneratedStaticMethod> findFunctionFromLoadedClasses() {\n-        List<ReferenceType> allClasses = context.getAttachedVm().allClasses();\n-        DebugSourceType sourceType = context.getSourceType();\n-        for (ReferenceType cls : allClasses) {\n-            try {\n-                // Expected class name should end with the file name of the ballerina source, only for single\n-                // ballerina sources. (We cannot be sure about the module context, as we can invoke any method\n-                // defined within the module.)\n-                if (sourceType == DebugSourceType.SINGLE_FILE && !cls.name().endsWith(context.getFileName().get())) {\n-                    continue;\n-                }\n-                // If the sources reside inside a ballerina module/project, generated class name should start with the\n-                // organization name of the ballerina module/project source.\n-                if (sourceType == DebugSourceType.PACKAGE && !cls.name().startsWith(context.getPackageOrg().get())) {\n-                    continue;\n-                }\n-                List<Method> methods = cls.methodsByName(functionName);\n-                for (Method method : methods) {\n-                    // Note - All the ballerina functions are represented as java static methods and all the generated\n-                    // jvm methods contain strand as its first argument.\n-                    if (method.isStatic()) {\n-                        return Optional.of(new GeneratedStaticMethod(context, cls, method));\n-                    }\n-                }\n-            } catch (ClassNotPreparedException ignored) {\n-                // Unprepared classes should be skipped.\n-            }\n+    private Optional<FunctionSymbol> findFunctionWithinModule() {\n+        SemanticModel semanticContext = context.getDebugCompiler().getSemanticInfo();\n+        LinePosition position = LinePosition.from(context.getLineNumber(), 0);\n+        List<Symbol> functionMatches = semanticContext.visibleSymbols(context.getFileNameWithExt().get(), position)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcab4970c32b9b40e187cd3d49be30a55862e847"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDc0MDk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27508#pullrequestreview-553474099", "createdAt": "2020-12-16T08:56:23Z", "commit": {"oid": "dcab4970c32b9b40e187cd3d49be30a55862e847"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODo1NjoyM1rOIG6hNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODo1NjoyM1rOIG6hNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTE0Mw==", "bodyText": "Same comment as above here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27508#discussion_r544121143", "createdAt": "2020-12-16T08:56:23Z", "author": {"login": "pubudu91"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/MethodCallExpressionEvaluator.java", "diffHunk": "@@ -91,6 +113,99 @@ public BExpressionValue evaluate() throws EvaluationException {\n         }\n     }\n \n+    private Value invokeObjectMethod(BVariable resultVar) throws EvaluationException {\n+        boolean isFoundObjectMethod = false;\n+        try {\n+            String className = resultVar.getDapVariable().getValue();\n+            Optional<ClassSymbol> classDef = findClassDefWithinModule(className);\n+            if (classDef.isEmpty()) {\n+                throw new EvaluationException(String.format(EvaluationExceptionKind.CLASS_NOT_FOUND.getString(),\n+                        className));\n+            }\n+\n+            Optional<MethodSymbol> objectMethodDef = findObjectMethodInClass(classDef.get(), methodName);\n+            if (objectMethodDef.isEmpty()) {\n+                throw new EvaluationException(\n+                        String.format(EvaluationExceptionKind.OBJECT_METHOD_NOT_FOUND.getString(),\n+                                syntaxNode.methodName().toString().trim(), className));\n+            }\n+\n+            isFoundObjectMethod = true;\n+            GeneratedInstanceMethod objectMethod = getObjectMethodByName(resultVar, methodName);\n+            objectMethod.setNamedArgValues(generateNamedArgs(context, methodName, objectMethodDef.get().\n+                    typeDescriptor(), argEvaluators));\n+            return objectMethod.invoke();\n+        } catch (EvaluationException e) {\n+            // If the object method is not found, we have to ignore the Evaluation Exception and try find any\n+            // matching lang library functions.\n+            if (isFoundObjectMethod) {\n+                throw e;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private Value invokeLangLibMethod(BExpressionValue resultVar) throws EvaluationException {\n+\n+        FunctionSymbol langLibFunctionDef = null;\n+        GeneratedStaticMethod langLibMethod = null;\n+\n+        // Tries to use the dedicated lang library functions.\n+        String langLibName = getAssociatedLangLibName(resultVar.getType());\n+        Optional<ModuleSymbol> langLibDef = getLangLibDefinition(context, langLibName);\n+        if (langLibDef.isPresent()) {\n+            Optional<FunctionSymbol> functionDef = getLangLibFunctionDefinition(context, langLibDef.get(), methodName);\n+            if (functionDef.isPresent()) {\n+                String langLibCls = getQualifiedLangLibClassName(langLibDef.get(), langLibName);\n+                langLibFunctionDef = functionDef.get();\n+                langLibMethod = loadLangLibMethod(context, resultVar, langLibCls, methodName);\n+            }\n+        }\n+\n+        // Tries to use \"value\" lang library functions.\n+        if (langLibMethod == null) {\n+            Optional<ModuleSymbol> valueLibDef = getLangLibDefinition(context, LANG_LIB_VALUE);\n+            if (valueLibDef.isEmpty()) {\n+                throw new EvaluationException(String.format(EvaluationExceptionKind.LANG_LIB_NOT_FOUND.getString(),\n+                        LANG_LIB_PACKAGE_PREFIX + langLibName + \", \" + LANG_LIB_PACKAGE_PREFIX + LANG_LIB_VALUE));\n+            }\n+\n+            Optional<FunctionSymbol> functionDef = getLangLibFunctionDefinition(context, valueLibDef.get(), methodName);\n+            if (functionDef.isEmpty()) {\n+                throw new EvaluationException(String.format(EvaluationExceptionKind.LANG_LIB_METHOD_NOT_FOUND.\n+                        getString(), methodName, langLibName));\n+            }\n+\n+            String langLibCls = getQualifiedLangLibClassName(valueLibDef.get(), LANG_LIB_VALUE);\n+            langLibFunctionDef = functionDef.get();\n+            langLibMethod = loadLangLibMethod(context, resultVar, langLibCls, methodName);\n+        }\n+\n+        argEvaluators.add(0, new AbstractMap.SimpleEntry<>(\"\", objectExpressionEvaluator));\n+        FunctionTypeSymbol functionTypeDesc = langLibFunctionDef.typeDescriptor();\n+        Map<String, Value> argValueMap = generateNamedArgs(context, methodName, functionTypeDesc, argEvaluators);\n+        langLibMethod.setNamedArgValues(argValueMap);\n+        return langLibMethod.invoke();\n+    }\n+\n+    private Optional<ClassSymbol> findClassDefWithinModule(String className) {\n+        SemanticModel semanticContext = context.getDebugCompiler().getSemanticInfo();\n+        LinePosition position = LinePosition.from(context.getLineNumber(), 0);\n+\n+        return semanticContext.visibleSymbols(context.getFileNameWithExt().get(), position)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcab4970c32b9b40e187cd3d49be30a55862e847"}, "originalPosition": 169}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1c2ab669be7fb1afc32e20ddf56e57933e50d76", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e1c2ab669be7fb1afc32e20ddf56e57933e50d76", "committedDate": "2020-12-16T11:00:43Z", "message": "Add review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MzYxOTQy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27508#pullrequestreview-556361942", "createdAt": "2020-12-21T13:01:32Z", "commit": {"oid": "e1c2ab669be7fb1afc32e20ddf56e57933e50d76"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4616, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}