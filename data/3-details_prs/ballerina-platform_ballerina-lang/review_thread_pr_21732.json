{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MjM3NTM3", "number": 21732, "reviewThreads": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1Mjo1MlrODoB3kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MzoyNFrODocB4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwMjQxOnYy", "diffSide": "RIGHT", "path": "examples/index.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1Mjo1MlrOF2Xlmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1Mjo1MlrOF2Xlmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzg4Mw==", "bodyText": "I think we should make this category the second one, before experimental features.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392553883", "createdAt": "2020-03-14T03:52:52Z", "author": {"login": "MaryamZi"}, "path": "examples/index.json", "diffHunk": "@@ -1082,5 +1082,31 @@\n                 \"url\": \"transactions-distributed\"\n             }\n         ]\n+    },\n+    {\n+        \"title\": \"Streams\",\n+        \"column\": 0,\n+        \"category\": \"Preview features\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwMjgzOnYy", "diffSide": "RIGHT", "path": "examples/index.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1NDo0MlrOF2Xl3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDo1OTo1N1rOF2llvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzk1MA==", "bodyText": "Shall we group this with the rest of the \"Language concepts\" examples?\nAnd I guess the column should be 2 and we should list this after the \"Concurrency\" examples maybe?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392553950", "createdAt": "2020-03-14T03:54:42Z", "author": {"login": "MaryamZi"}, "path": "examples/index.json", "diffHunk": "@@ -1082,5 +1082,31 @@\n                 \"url\": \"transactions-distributed\"\n             }\n         ]\n+    },\n+    {\n+        \"title\": \"Streams\",\n+        \"column\": 0,\n+        \"category\": \"Preview features\",\n+        \"samples\": [\n+            {\n+                \"name\": \"Streams\",\n+                \"url\": \"streams\"\n+            }\n+        ]\n+    },\n+    {\n+        \"title\": \"Query\",\n+        \"column\": 0,\n+        \"category\": \"Language concepts\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MzI5Mg==", "bodyText": "For the moment, we'll be putting Query bbes under Preview features as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392783292", "createdAt": "2020-03-16T04:59:57Z", "author": {"login": "pcnfernando"}, "path": "examples/index.json", "diffHunk": "@@ -1082,5 +1082,31 @@\n                 \"url\": \"transactions-distributed\"\n             }\n         ]\n+    },\n+    {\n+        \"title\": \"Streams\",\n+        \"column\": 0,\n+        \"category\": \"Preview features\",\n+        \"samples\": [\n+            {\n+                \"name\": \"Streams\",\n+                \"url\": \"streams\"\n+            }\n+        ]\n+    },\n+    {\n+        \"title\": \"Query\",\n+        \"column\": 0,\n+        \"category\": \"Language concepts\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzk1MA=="}, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwMzM1OnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1NTo0OVrOF2XmJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyODowNVrOF2lOLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDAyMg==", "bodyText": "Unnecessary indentation?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554022", "createdAt": "2020-03-14T03:55:49Z", "author": {"login": "MaryamZi"}, "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NzI2Mw==", "bodyText": "Seems the format tool has some issues. Will fix them manually", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392777263", "createdAt": "2020-03-16T04:28:05Z", "author": {"login": "pcnfernando"}, "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDAyMg=="}, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNDU1OnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1ODo0MVrOF2Xmvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1ODo0MVrOF2Xmvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDE3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //The block inside the `do` clause is executed for each iteration.\n          \n          \n            \n                    // The block inside the `do` clause is executed for each iteration.\n          \n      \n    \n    \n  \n\nPlease fix for all comments.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554174", "createdAt": "2020-03-14T03:58:41Z", "author": {"login": "MaryamZi"}, "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.\n+        //It can be used to iterate through any iterable value.\n+        from var student in studentList\n+        //The block inside the `do` clause is executed for each iteration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNDkwOnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1OTozNlrOF2Xm-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1OTozNlrOF2Xm-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDIzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Like a query-expression, a query-action can be used with a value iterable with any error type.\n          \n          \n            \n            //The result of the query-action is the termination value of the iterator.\n          \n          \n            \n            //Thus, if the source type is infallibly iterable, the result will be () and can be ignored.\n          \n          \n            \n            // Like a query-expression, a query-action can be used with a value iterable with any error type.\n          \n          \n            \n            // The result of the query-action is the termination value of the iterator.\n          \n          \n            \n            // Thus, if the source type is infallibly iterable, the result will be () and can be ignored.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554232", "createdAt": "2020-03-14T03:59:36Z", "author": {"login": "MaryamZi"}, "path": "examples/query-action/query_action.description", "diffHunk": "@@ -0,0 +1,3 @@\n+//Like a query-expression, a query-action can be used with a value iterable with any error type.\n+//The result of the query-action is the termination value of the iterator.\n+//Thus, if the source type is infallibly iterable, the result will be () and can be ignored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNDk1OnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.out", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1OTo0OVrOF2Xm_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1OTo0OVrOF2Xm_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDIzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554238", "createdAt": "2020-03-14T03:59:49Z", "author": {"login": "MaryamZi"}, "path": "examples/query-action/query_action.out", "diffHunk": "@@ -0,0 +1,9 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-action.bal\n+\n+Iterate record list and map it to another record type:\n+firstName=Alex lastName=George\n+firstName=Ranjan lastName=Fonseka\n+firstName=John lastName=David\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNTA4OnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowMDowMlrOF2XnDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowMDowMlrOF2XnDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDI1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            $ ballerina run query-action.bal\n          \n          \n            \n            $ ballerina run query_action.bal", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554254", "createdAt": "2020-03-14T04:00:02Z", "author": {"login": "MaryamZi"}, "path": "examples/query-action/query_action.out", "diffHunk": "@@ -0,0 +1,9 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-action.bal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNTMzOnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowMDoyNlrOF2XnLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowMDoyNlrOF2XnLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDI4Ng==", "bodyText": "Do we need this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554286", "createdAt": "2020-03-14T04:00:26Z", "author": {"login": "MaryamZi"}, "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNTY5OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowMDo1NFrOF2XnWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowMDo1NFrOF2XnWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDMyOA==", "bodyText": "Again, since these examples only demo one example, I think we don't need this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554328", "createdAt": "2020-03-14T04:00:54Z", "author": {"login": "MaryamZi"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNjEwOnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowMTo0N1rOF2Xnjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowMzoxMFrOF2Xn1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDM4Mw==", "bodyText": "Shouldn't these be indented?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554383", "createdAt": "2020-03-14T04:01:47Z", "author": {"login": "MaryamZi"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.\n+    where student.score >= 1\n+    //The `let` clause binds variables.\n+    let string degreeName = \"Bachelor of Medicine\", int graduationYear = calGraduationYear(student.intakeYear)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDQ1Mw==", "bodyText": "Also, please check the column count. The maximum we should have in examples is 80.\nPlease see https://github.com/ballerina-platform/ballerina-lang/blob/master/docs/bbe-guidelines/bbe-guidelines.md", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554453", "createdAt": "2020-03-14T04:03:10Z", "author": {"login": "MaryamZi"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.\n+    where student.score >= 1\n+    //The `let` clause binds variables.\n+    let string degreeName = \"Bachelor of Medicine\", int graduationYear = calGraduationYear(student.intakeYear)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDM4Mw=="}, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNzA0OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.description", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowNDowOVrOF2XoBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowNTowOFrOF2XoJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDUwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n          \n          \n            \n            //It consists of four kinds of clauses: `from`, `let`, `where` and `select`.\n          \n          \n            \n            //The first clause must be a `from` clause and the last clause must be a `select`.\n          \n          \n            \n            //The result of the query expression is a list.\n          \n          \n            \n            // A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n          \n          \n            \n            // It consists of four kinds of clauses: `from`, `let`, `where`, and `select`.\n          \n          \n            \n            // The first clause must be a `from` clause and the last clause must be a `select`.\n          \n          \n            \n            // The result of a query expression is a list.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554501", "createdAt": "2020-03-14T04:04:09Z", "author": {"login": "MaryamZi"}, "path": "examples/query-expression/query_expression.description", "diffHunk": "@@ -0,0 +1,4 @@\n+//A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n+//It consists of four kinds of clauses: `from`, `let`, `where` and `select`.\n+//The first clause must be a `from` clause and the last clause must be a `select`.\n+//The result of the query expression is a list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDUzNA==", "bodyText": "Also \"iterable with any error type\" seems a bit confusing.\nDo we mean \"any value that is iterable with error\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554534", "createdAt": "2020-03-14T04:05:08Z", "author": {"login": "MaryamZi"}, "path": "examples/query-expression/query_expression.description", "diffHunk": "@@ -0,0 +1,4 @@\n+//A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n+//It consists of four kinds of clauses: `from`, `let`, `where` and `select`.\n+//The first clause must be a `from` clause and the last clause must be a `select`.\n+//The result of the query expression is a list.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDUwMQ=="}, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNzI1OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowNToxNVrOF2XoLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowNToxNVrOF2XoLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDU0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554540", "createdAt": "2020-03-14T04:05:15Z", "author": {"login": "MaryamZi"}, "path": "examples/query-expression/query_expression.out", "diffHunk": "@@ -0,0 +1,7 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-expression.bal\n+Iterating a record list and filtering students with score greater than 1:\n+name=Alex degree=Bachelor of Medicine expectedGradYear=2025\n+name=John degree=Bachelor of Medicine expectedGradYear=2027\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwNzI4OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowNToyNFrOF2XoLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowNToyNFrOF2XoLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDU0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            $ ballerina run query-expression.bal\n          \n          \n            \n            $ ballerina run query_expression.bal", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554543", "createdAt": "2020-03-14T04:05:24Z", "author": {"login": "MaryamZi"}, "path": "examples/query-expression/query_expression.out", "diffHunk": "@@ -0,0 +1,7 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-expression.bal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwODg5OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowOTowM1rOF2Xo_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowOTowM1rOF2Xo_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Defines an object called OddNumberGenerator. Each object has its own next() method,\n          \n          \n            \n            //which gets invoked when the stream's next() gets called.\n          \n          \n            \n            // Define an object named OddNumberGenerator, with its own `next()` method.\n          \n          \n            \n            // When a stream is based on this object, the stream's `next` operation  \n          \n          \n            \n            // will call this `next()` operation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554751", "createdAt": "2020-03-14T04:09:03Z", "author": {"login": "MaryamZi"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwODkzOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowOTowOVrOF2XpAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowOTowOVrOF2XpAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDc1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int i = 1;\n          \n          \n            \n                int i = 1;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554755", "createdAt": "2020-03-14T04:09:09Z", "author": {"login": "MaryamZi"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwOTA0OnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowOTozOVrOF2XpFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDowOTozOVrOF2XpFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            nameList[nameList.length()] = fullName;\n          \n          \n            \n                            nameList.push(fullName);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554772", "createdAt": "2020-03-14T04:09:39Z", "author": {"login": "MaryamZi"}, "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.\n+        //It can be used to iterate through any iterable value.\n+        from var student in studentList\n+        //The block inside the `do` clause is executed for each iteration.\n+          do {\n+                FullName fullName = {firstName: student.firstName, lastName: student.lastName};\n+                nameList[nameList.length()] = fullName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwOTI1OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMDoyMVrOF2XpMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMDoyMVrOF2XpMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgwMA==", "bodyText": "Let's remove output if unnecessary and make them comments maybe? That way they'll get rendered side-by-side.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554800", "createdAt": "2020-03-14T04:10:21Z", "author": {"login": "MaryamZi"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwOTMyOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMDoyOVrOF2XpOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMDoyOVrOF2XpOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                OddNumberGenerator oddGen = new ();\n          \n          \n            \n                OddNumberGenerator oddGen = new;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554809", "createdAt": "2020-03-14T04:10:29Z", "author": {"login": "MaryamZi"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwOTM1OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMDozNlrOF2XpPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMDozNlrOF2XpPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                var oddNumberStream = new stream<int,error>(oddGen);\n          \n          \n            \n                var oddNumberStream = new stream<int, error>(oddGen);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554814", "createdAt": "2020-03-14T04:10:36Z", "author": {"login": "MaryamZi"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwOTg2OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMTowN1rOF2Xpdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMTowN1rOF2Xpdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDg3MA==", "bodyText": "Indentation issue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554870", "createdAt": "2020-03-14T04:11:07Z", "author": {"login": "MaryamZi"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAxMjgwOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxODowN1rOF2Xq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxODowN1rOF2Xq0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTIxOQ==", "bodyText": "Can we say something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //The `stream` type represents a sequence that may be constructed lazily\n          \n          \n            \n            //and is able to iterate a sequence of values of type T with error type E.\n          \n          \n            \n            //stream<T> is short for stream<T,never>.\n          \n          \n            \n            //A stream can be iterated over at most once.\n          \n          \n            \n            //A stream has a next() method; a stream's iterator works by calling this method.\n          \n          \n            \n            //The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.\n          \n          \n            \n            //The stream type does not provide a length method.\n          \n          \n            \n            // The `stream` type represents a sequence that may be constructed lazily\n          \n          \n            \n            // and is used to iterate over the sequence of values of type T with error type E.\n          \n          \n            \n            // `stream<T>` is short for `stream<T, never>`.\n          \n          \n            \n            // A stream can be iterated over at most once.\n          \n          \n            \n            // A stream has a `next()` method; a stream's iterator works by calling this method.\n          \n          \n            \n            // The stream type provides methods similar to lists such as `map`, `foreach`, `filter`, `reduce`, and `iterator`.\n          \n          \n            \n            // The stream type does not provide a length method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392555219", "createdAt": "2020-03-14T04:18:07Z", "author": {"login": "MaryamZi"}, "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.\n+//A stream has a next() method; a stream's iterator works by calling this method.\n+//The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.\n+//The stream type does not provide a length method.\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NTA4OnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NTo1M1rOF2YtnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NTo1M1rOF2YtnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjMxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //It can be used to iterate through any iterable value.\n          \n          \n            \n                    //It can be used to iterate any iterable value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572317", "createdAt": "2020-03-14T09:45:53Z", "author": {"login": "praneesha"}, "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.\n+        //It can be used to iterate through any iterable value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NTI3OnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NjoyNFrOF2YttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NjoyNFrOF2YttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjM0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file, and execute the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572341", "createdAt": "2020-03-14T09:46:24Z", "author": {"login": "praneesha"}, "path": "examples/query-action/query_action.out", "diffHunk": "@@ -0,0 +1,9 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NTUwOnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NjozOVrOF2Yt0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NjozOVrOF2Yt0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjM3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Iterate record list and map it to another record type:\n          \n          \n            \n            Iterate the record list and map it to another record type:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572370", "createdAt": "2020-03-14T09:46:39Z", "author": {"login": "praneesha"}, "path": "examples/query-action/query_action.out", "diffHunk": "@@ -0,0 +1,9 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-action.bal\n+\n+Iterate record list and map it to another record type:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NTYyOnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0Njo1NVrOF2Yt4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0Njo1NVrOF2Yt4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n          \n          \n            \n                io:println(\"Iterating a record list and filtering students with a score greater than 1:\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572385", "createdAt": "2020-03-14T09:46:55Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NTcyOnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NzowOFrOF2Yt7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NzowOFrOF2Yt7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //It can be used to iterate through any iterable value.\n          \n          \n            \n                //It can be used to iterate any iterable value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572397", "createdAt": "2020-03-14T09:47:08Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NTc1OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NzoxNVrOF2Yt8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NzoxNVrOF2Yt8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //`outputStudentList` is the result of the `query` expression\n          \n          \n            \n                //The `outputStudentList` is the result of the `query` expression.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572403", "createdAt": "2020-03-14T09:47:15Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NTc2OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NzoyNFrOF2Yt9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NzoyNFrOF2Yt9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n          \n          \n            \n                //The `where` clause provides a way to perform conditional execution and works similarly to an `if` condition.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572405", "createdAt": "2020-03-14T09:47:24Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NTg0OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NzozOFrOF2YuAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0NzozOFrOF2YuAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //When the where condition evaluates to false, the iteration skips following clauses.\n          \n          \n            \n                //When the `where` condition evaluates to false, the iteration skips following the clauses.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572417", "createdAt": "2020-03-14T09:47:38Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NTk2OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0Nzo1NVrOF2YuEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0Nzo1NVrOF2YuEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //The `let` clause binds variables.\n          \n          \n            \n                //The `let` clause binds the variables.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572432", "createdAt": "2020-03-14T09:47:55Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.\n+    where student.score >= 1\n+    //The `let` clause binds variables.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NjAyOnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODowM1rOF2YuFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODowM1rOF2YuFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //The `select` clause is evaluated for each iteration;\n          \n          \n            \n                //The `select` clause is evaluated for each iteration.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572438", "createdAt": "2020-03-14T09:48:03Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.\n+    where student.score >= 1\n+    //The `let` clause binds variables.\n+    let string degreeName = \"Bachelor of Medicine\", int graduationYear = calGraduationYear(student.intakeYear)\n+    //The `select` clause is evaluated for each iteration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NjE0OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODoxN1rOF2YuJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODoxN1rOF2YuJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQ1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //the result of the query expression is a list(`reportList`) whose members are the result of the select clause.\n          \n          \n            \n                //The result of the query expression is a list(`reportList`) whose members are the result of the `select` clause.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572452", "createdAt": "2020-03-14T09:48:17Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.\n+    where student.score >= 1\n+    //The `let` clause binds variables.\n+    let string degreeName = \"Bachelor of Medicine\", int graduationYear = calGraduationYear(student.intakeYear)\n+    //The `select` clause is evaluated for each iteration;\n+    //the result of the query expression is a list(`reportList`) whose members are the result of the select clause.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NjE5OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODozMVrOF2YuLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODozMVrOF2YuLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n          \n          \n            \n            //A `query expression` is a list comprehension, which can be used with a value that is iterable with any error type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572462", "createdAt": "2020-03-14T09:48:31Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.description", "diffHunk": "@@ -0,0 +1,4 @@\n+//A `query expression` is a list comprehension which can be used with a value iterable with any error type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NjI1OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODo0MVrOF2YuNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODo0MVrOF2YuNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQ3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //It consists of four kinds of clauses: `from`, `let`, `where` and `select`.\n          \n          \n            \n            //It consists of four kinds of clauses: `from`, `let`, `where`, and `select`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572470", "createdAt": "2020-03-14T09:48:41Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.description", "diffHunk": "@@ -0,0 +1,4 @@\n+//A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n+//It consists of four kinds of clauses: `from`, `let`, `where` and `select`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NjQ0OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODo1NlrOF2YuSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0ODo1NlrOF2YuSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file, and execute the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572491", "createdAt": "2020-03-14T09:48:56Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.out", "diffHunk": "@@ -0,0 +1,7 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NjU0OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OTowNlrOF2YuVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OTowNlrOF2YuVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Iterating a record list and filtering students with score greater than 1:\n          \n          \n            \n            Iterating a record list and filtering students with a score greater than 1:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572501", "createdAt": "2020-03-14T09:49:06Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.out", "diffHunk": "@@ -0,0 +1,7 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-expression.bal\n+Iterating a record list and filtering students with score greater than 1:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NjYwOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OToyMFrOF2YuXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OToyMFrOF2YuXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Defines an object called OddNumberGenerator. Each object has its own next() method,\n          \n          \n            \n            //Defines an object called `OddNumberGenerator`. Each object has its own next() method,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572508", "createdAt": "2020-03-14T09:49:20Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NjY3OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OTozM1rOF2YuaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OTozM1rOF2YuaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //which gets invoked when the stream's next() gets called.\n          \n          \n            \n            //which gets invoked when the stream's `next()` function gets called.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572520", "createdAt": "2020-03-14T09:49:33Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0Njc1OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OTo0OVrOF2YucQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OTo0OVrOF2YucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //Construct a stream passing an OddNumberGenerator object\n          \n          \n            \n                //Construct a stream passing an `OddNumberGenerator` object.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572529", "createdAt": "2020-03-14T09:49:49Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NjgxOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OTo1N1rOF2YueA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo0OTo1N1rOF2YueA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //Iterable types can be converted to a stream\n          \n          \n            \n                //Iterable types can be converted to a stream.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572536", "createdAt": "2020-03-14T09:49:57Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0Njg3OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MDowNFrOF2Yufg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MDowNFrOF2Yufg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjU0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //`filter` and `map` functions return streams and work lazily\n          \n          \n            \n                //The `filter` and `map` functions return streams and work lazily.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572542", "createdAt": "2020-03-14T09:50:04Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NzA3OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MDoxNlrOF2YulA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MDoxNlrOF2YulA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //`reduce` function reduces the stream to a single value\n          \n          \n            \n                //The `reduce` function reduces the stream to a single value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572564", "createdAt": "2020-03-14T09:50:16Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream\n+        . filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    })\n+        . 'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //`reduce` function reduces the stream to a single value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NzEzOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MDozNVrOF2YunQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MDozNVrOF2YunQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjU3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //A stream can be iterated over at most once. Hence, creating another stream from the record list\n          \n          \n            \n                //A stream can be iterated at most for once. Hence, another stream gets created from the record list.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572573", "createdAt": "2020-03-14T09:50:35Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream\n+        . filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    })\n+        . 'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //`reduce` function reduces the stream to a single value\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated over at most once. Hence, creating another stream from the record list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0NzQxOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MTowMFrOF2Yuvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MTowMFrOF2Yuvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjYwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //Calls next() operation to retrieve the data from the stream.\n          \n          \n            \n                //Calls the `next()` operation to retrieve the data from the stream.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572606", "createdAt": "2020-03-14T09:51:00Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream\n+        . filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    })\n+        . 'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //`reduce` function reduces the stream to a single value\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated over at most once. Hence, creating another stream from the record list\n+       stream<Student> studentStream2 = studentList.toStream();\n+\n+    io:println(\"Calls next method manually and get the next iteration value: \");\n+    //Calls next() operation to retrieve the data from the stream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0ODAyOnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MjoxMlrOF2YvBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MjoxMlrOF2YvBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjY3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //`query-action` works similarly to a `foreach` statement.\n          \n          \n            \n                    //The `query-action` works similarly to a `foreach` statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572676", "createdAt": "2020-03-14T09:52:12Z", "author": {"login": "praneesha"}, "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0ODI4OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MjozN1rOF2YvJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1MjozN1rOF2YvJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //`from` clause works similarly to a `foreach` statement.\n          \n          \n            \n                //The `from` clause works similarly to a `foreach` statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572708", "createdAt": "2020-03-14T09:52:37Z", "author": {"login": "praneesha"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0ODk0OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NDozNlrOF2Yvfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NDozNlrOF2Yvfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3Mjc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //Calls next() operation on the iterator to retrieve the next data from the stream.\n          \n          \n            \n                //Calls the `next()` operation on the iterator to retrieve the next data from the stream.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572798", "createdAt": "2020-03-14T09:54:36Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream\n+        . filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    })\n+        . 'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //`reduce` function reduces the stream to a single value\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated over at most once. Hence, creating another stream from the record list\n+       stream<Student> studentStream2 = studentList.toStream();\n+\n+    io:println(\"Calls next method manually and get the next iteration value: \");\n+    //Calls next() operation to retrieve the data from the stream.\n+    record {|Student value;|}|error? student = studentStream2.next();\n+    if (student is StudentValue) {\n+        io:println(student.value);\n+    }\n+\n+    io:println(\"Use foreach method to loop through the rest of the stream: \");\n+\n+    //If there is any error during the iteration of the\n+    // studentList2 stream, the result stream will terminate and return the error.\n+    error? e = studentStream2.forEach(function (Student student) {\n+        io:println(\"Student \", student.firstName, \" has a score of \", student.score);\n+    });\n+\n+    //Check and handle the error during the iteration of the stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    stream<Student> studentStream3 = studentList.toStream();\n+    var iterator = studentStream3.iterator();\n+\n+    //Calls next() operation on the iterator to retrieve the next data from the stream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0OTA1OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NDo1M1rOF2Yvkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NDo1M1rOF2Yvkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjgxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //stream<T> is short for stream<T,never>.\n          \n          \n            \n            //The stream<T> is short for stream<T,never>.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572818", "createdAt": "2020-03-14T09:54:53Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0OTE0OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NTowM1rOF2Yvnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NTowM1rOF2Yvnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //A stream can be iterated over at most once.\n          \n          \n            \n            //A stream can be iterated at most for once.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572831", "createdAt": "2020-03-14T09:55:03Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0OTE5OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.description", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NToxMlrOF2Yvpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NToxMlrOF2Yvpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //A stream has a next() method; a stream's iterator works by calling this method.\n          \n          \n            \n            //A stream has a `next()` method; a stream's iterator works by calling this method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572838", "createdAt": "2020-03-14T09:55:12Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.\n+//A stream has a next() method; a stream's iterator works by calling this method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0OTIzOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NToyMlrOF2YvrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NToyMlrOF2YvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3Mjg0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.\n          \n          \n            \n            //The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce`, and `iterator`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572845", "createdAt": "2020-03-14T09:55:22Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.\n+//A stream has a next() method; a stream's iterator works by calling this method.\n+//The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0OTI3OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NTozMlrOF2Yvsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NTozMlrOF2Yvsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3Mjg1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //The stream type does not provide a length method.\n          \n          \n            \n            //The stream type does not provide a `length` method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572850", "createdAt": "2020-03-14T09:55:32Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.\n+//A stream has a next() method; a stream's iterator works by calling this method.\n+//The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.\n+//The stream type does not provide a length method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0OTM3OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NTo0NFrOF2YvvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NTo0NFrOF2YvvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3Mjg2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file, and execute the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572860", "createdAt": "2020-03-14T09:55:44Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.out", "diffHunk": "@@ -0,0 +1,14 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE0OTgxOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NjowM1rOF2Yv6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NjowM1rOF2Yv6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Calls next method manually and get the next iteration value:\n          \n          \n            \n            Call the `next` method manually and get the next iteration value:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572907", "createdAt": "2020-03-14T09:56:03Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.out", "diffHunk": "@@ -0,0 +1,14 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run streams.bal\n+Creating a stream using stream constructor:\n+Retrieved odd number: 3\n+Filter records and map them to a different type :\n+Calculate the average score of the subscribed students:\n+Average: 0.8999999999999999\n+Calls next method manually and get the next iteration value:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzE1MDAwOnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.out", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NjozM1rOF2YwBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwOTo1NjozM1rOF2YwBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjkzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use foreach method to loop through the rest of the stream:\n          \n          \n            \n            Use the `foreach` method to loop through the rest of the stream:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572933", "createdAt": "2020-03-14T09:56:33Z", "author": {"login": "praneesha"}, "path": "examples/streams/streams.out", "diffHunk": "@@ -0,0 +1,14 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run streams.bal\n+Creating a stream using stream constructor:\n+Retrieved odd number: 3\n+Filter records and map them to a different type :\n+Calculate the average score of the subscribed students:\n+Average: 0.8999999999999999\n+Calls next method manually and get the next iteration value:\n+firstName=Alex lastName=George score=1.5\n+Use foreach method to loop through the rest of the stream:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e93bcb0c321c29f023c1f3bca297720bfec2a73"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzI3Mzg2OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzozOToyM1rOF2_BNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzozOToyM1rOF2_BNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5OTkyNQ==", "bodyText": "We usually leave a space after \"// \".\nShall we fix everywhere? Maybe in a separate PR?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r393199925", "createdAt": "2020-03-16T17:39:23Z", "author": {"login": "MaryamZi"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,118 @@\n+import ballerina/io;\n+\n+//Defines an object called `OddNumberGenerator`. Each object has its own next() method,\n+//which gets invoked when the stream's `next()` function gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    \n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    OddNumberGenerator oddGen = new;\n+\n+    //Creating a stream passing an OddNumberGenerator object to the stream constructor\n+    var oddNumberStream = new stream<int, error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream.\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //The `filter` and `map` functions return streams and work lazily.\n+    stream<Subscription> subscriptionStream = studentStream.filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    }).'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //The `reduce` function reduces the stream to a single value.\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated at most for once. Hence, another stream gets created from the record list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e57356c6d24f0c93420c30d349f60407d9256"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzI3ODI5OnYy", "diffSide": "RIGHT", "path": "examples/streams/streams.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MDozNVrOF2_EAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MDozNVrOF2_EAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMDY0Mg==", "bodyText": "We can combine these lines\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    io:println(\"ForEach operation on the stream failed!\");\n          \n          \n            \n                    io:println(e);\n          \n          \n            \n                    io:println(\"ForEach operation on the stream failed: \", e);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r393200642", "createdAt": "2020-03-16T17:40:35Z", "author": {"login": "MaryamZi"}, "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,118 @@\n+import ballerina/io;\n+\n+//Defines an object called `OddNumberGenerator`. Each object has its own next() method,\n+//which gets invoked when the stream's `next()` function gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    \n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    OddNumberGenerator oddGen = new;\n+\n+    //Creating a stream passing an OddNumberGenerator object to the stream constructor\n+    var oddNumberStream = new stream<int, error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream.\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //The `filter` and `map` functions return streams and work lazily.\n+    stream<Subscription> subscriptionStream = studentStream.filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    }).'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //The `reduce` function reduces the stream to a single value.\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated at most for once. Hence, another stream gets created from the record list.\n+       stream<Student> studentStream2 = studentList.toStream();\n+\n+    io:println(\"Calls next method manually and get the next iteration value: \");\n+    //Calls the `next()` operation to retrieve the data from the stream.\n+    record {|Student value;|}|error? student = studentStream2.next();\n+    if (student is StudentValue) {\n+        io:println(student.value);\n+    }\n+\n+    io:println(\"Use foreach method to loop through the rest of the stream: \");\n+\n+    //If there is any error during the iteration of the\n+    // studentList2 stream, the result stream will terminate and return the error.\n+    error? e = studentStream2.forEach(function (Student student) {\n+        io:println(\"Student \", student.firstName, \" has a score of \", student.score);\n+    });\n+\n+    //Check and handle the error during the iteration of the stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e57356c6d24f0c93420c30d349f60407d9256"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzI4MjA2OnYy", "diffSide": "RIGHT", "path": "examples/query-expression/query_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MTozNVrOF2_GkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MTozNVrOF2_GkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMTI5Nw==", "bodyText": "Shouldn't these be indented similar to L37?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r393201297", "createdAt": "2020-03-16T17:41:35Z", "author": {"login": "MaryamZi"}, "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //The `from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate any iterable value.\n+    //The `outputStudentList` is the result of the `query` expression.\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to an `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the `where` condition evaluates to false, the iteration skips following the clauses.\n+    where student.score >= 1\n+    //The `let` clause binds the variables.\n+    let string degreeName = \"Bachelor of Medicine\",\n+    int graduationYear = calGraduationYear(student.intakeYear)\n+    //The `select` clause is evaluated for each iteration.\n+    //The result of the query expression is a list(`reportList`) whose members are the result of the `select` clause.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e57356c6d24f0c93420c30d349f60407d9256"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzI4ODY1OnYy", "diffSide": "RIGHT", "path": "examples/query-action/query_action.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MzoyNFrOF2_KzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MzoyNFrOF2_KzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMjM4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                do {\n          \n          \n            \n                    FullName fullName = {firstName: student.firstName, lastName: student.lastName};\n          \n          \n            \n                    nameList[nameList.length()] = fullName;\n          \n          \n            \n                    }\n          \n          \n            \n                do {\n          \n          \n            \n                    FullName fullName = {firstName: student.firstName, lastName: student.lastName};\n          \n          \n            \n                    nameList.push(fullName);\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r393202380", "createdAt": "2020-03-16T17:43:24Z", "author": {"login": "MaryamZi"}, "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,36 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    FullName[] nameList = [];\n+    //`query-action` works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //The result of the query-action is the termination value of the iterable value.\n+    //It can be either an error or ().\n+    var e = from var student in studentList\n+    // The block inside the `do` clause is executed for each iteration.\n+    do {\n+        FullName fullName = {firstName: student.firstName, lastName: student.lastName};\n+        nameList[nameList.length()] = fullName;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5e57356c6d24f0c93420c30d349f60407d9256"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 865, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}