{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTAwMDM0", "number": 21520, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzoyMjo1OVrODmE3Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToyMzoxMFrODmjL-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjUyMTc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzoyMjo1OVrOFzTmcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzoxNToxNVrOF0rV4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjgzNA==", "bodyText": "what about Lambda functions. ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21520#discussion_r389342834", "createdAt": "2020-03-08T07:22:59Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -440,6 +438,21 @@ private void addRequiredParamsToGeneratedInitFunction(BLangFunction initFunction\n         }\n     }\n \n+    private BLangExpression createRequiredParamExpr(BLangExpression expr) {\n+        if (expr == null) {\n+            return null;\n+        }\n+        // Since the expression of the requiredParam of both init functions refer to same object,\n+        // expression should be cloned.\n+        BLangExpression expression = this.nodeCloner.clone(expr);\n+        if (expression.getKind() == NodeKind.ARROW_EXPR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87f1d864823139afcfb04cd949412a5a3e12e59"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMjg2NA==", "bodyText": "Checked it locally, this fix is not working for lambda functions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21520#discussion_r390102864", "createdAt": "2020-03-10T05:32:01Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -440,6 +438,21 @@ private void addRequiredParamsToGeneratedInitFunction(BLangFunction initFunction\n         }\n     }\n \n+    private BLangExpression createRequiredParamExpr(BLangExpression expr) {\n+        if (expr == null) {\n+            return null;\n+        }\n+        // Since the expression of the requiredParam of both init functions refer to same object,\n+        // expression should be cloned.\n+        BLangExpression expression = this.nodeCloner.clone(expr);\n+        if (expression.getKind() == NodeKind.ARROW_EXPR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjgzNA=="}, "originalCommit": {"oid": "f87f1d864823139afcfb04cd949412a5a3e12e59"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MDM4NQ==", "bodyText": "Fixed with commit 30718c3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21520#discussion_r390780385", "createdAt": "2020-03-11T07:15:15Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -440,6 +438,21 @@ private void addRequiredParamsToGeneratedInitFunction(BLangFunction initFunction\n         }\n     }\n \n+    private BLangExpression createRequiredParamExpr(BLangExpression expr) {\n+        if (expr == null) {\n+            return null;\n+        }\n+        // Since the expression of the requiredParam of both init functions refer to same object,\n+        // expression should be cloned.\n+        BLangExpression expression = this.nodeCloner.clone(expr);\n+        if (expression.getKind() == NodeKind.ARROW_EXPR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MjgzNA=="}, "originalCommit": {"oid": "f87f1d864823139afcfb04cd949412a5a3e12e59"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjUyMjI2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/init/object-initializer.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzoyMzozNVrOFzTmpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzoxNDozNFrOF0rVGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjg4NA==", "bodyText": "Shall we add an example, including lambda function as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21520#discussion_r389342884", "createdAt": "2020-03-08T07:23:35Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/init/object-initializer.bal", "diffHunk": "@@ -562,3 +562,30 @@ function testConstRefsAsDefaultValue() returns (boolean) {\n     [string , int, TYPE, TYPE ] details = s.getDetails();\n     return details[0] == \"Andrew\" && details[1] == 11 && details[2] == \"John\" && details[3] == 11;\n }\n+\n+function getData(string n) returns string {\n+    return n;\n+}\n+\n+type Student11 object {\n+    string name;\n+    function __init(string n, function (string) returns string fn = (x) => \"John\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87f1d864823139afcfb04cd949412a5a3e12e59"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MDE4Nw==", "bodyText": "+1, Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21520#discussion_r390780187", "createdAt": "2020-03-11T07:14:34Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/init/object-initializer.bal", "diffHunk": "@@ -562,3 +562,30 @@ function testConstRefsAsDefaultValue() returns (boolean) {\n     [string , int, TYPE, TYPE ] details = s.getDetails();\n     return details[0] == \"Andrew\" && details[1] == 11 && details[2] == \"John\" && details[3] == 11;\n }\n+\n+function getData(string n) returns string {\n+    return n;\n+}\n+\n+type Student11 object {\n+    string name;\n+    function __init(string n, function (string) returns string fn = (x) => \"John\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Mjg4NA=="}, "originalCommit": {"oid": "f87f1d864823139afcfb04cd949412a5a3e12e59"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQ3MTU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToxMTo0MlrOF0BtKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzoxNDozMVrOF0rVCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5ODIxOA==", "bodyText": "Shall we add a comment here explaining why we're simply assigning env instead of a clone?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21520#discussion_r390098218", "createdAt": "2020-03-10T05:11:42Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4134,6 +4147,7 @@ public void visit(BLangArrowFunction bLangArrowFunction) {\n \n         lambdaFunction.function.pos = bLangArrowFunction.pos;\n         lambdaFunction.function.body.pos = bLangArrowFunction.pos;\n+        lambdaFunction.capturedClosureEnv = env;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87f1d864823139afcfb04cd949412a5a3e12e59"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5ODYzMQ==", "bodyText": "The reasoning is by the time desugar phase runs, the program is guaranteed to be semantically correct. Which means in the lambda function, there are no references to out of scope symbols. Therefore, we can simply consider the enclosing env as the captured closure env as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21520#discussion_r390098631", "createdAt": "2020-03-10T05:13:45Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4134,6 +4147,7 @@ public void visit(BLangArrowFunction bLangArrowFunction) {\n \n         lambdaFunction.function.pos = bLangArrowFunction.pos;\n         lambdaFunction.function.body.pos = bLangArrowFunction.pos;\n+        lambdaFunction.capturedClosureEnv = env;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5ODIxOA=="}, "originalCommit": {"oid": "f87f1d864823139afcfb04cd949412a5a3e12e59"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MDE3MQ==", "bodyText": "Added a comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21520#discussion_r390780171", "createdAt": "2020-03-11T07:14:31Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4134,6 +4147,7 @@ public void visit(BLangArrowFunction bLangArrowFunction) {\n \n         lambdaFunction.function.pos = bLangArrowFunction.pos;\n         lambdaFunction.function.body.pos = bLangArrowFunction.pos;\n+        lambdaFunction.capturedClosureEnv = env;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5ODIxOA=="}, "originalCommit": {"oid": "f87f1d864823139afcfb04cd949412a5a3e12e59"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQ4OTg3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToyMzoxMFrOF0B3dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToyMzoxMFrOF0B3dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMDg1NQ==", "bodyText": "I think we don't need to clone the env here as well. But let's verify that later. Created #21547 to track this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21520#discussion_r390100855", "createdAt": "2020-03-10T05:23:10Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1043,9 +1056,9 @@ private BLangFunction desugarParticipantFunction(BLangFunction funcNode,\n         BLangLambdaFunction trxMainFunc\n                 = createLambdaFunction(funcNode.pos, \"$anonTrxParticipantFunc$\", Collections.emptyList(),\n                                        trxReturnNode, trxMainBody);\n-        trxMainWrapperFunc.cachedEnv = trxMainFunc.function.clonedEnv;\n-        commitFunc.cachedEnv = env.createClone();\n-        abortFunc.cachedEnv = env.createClone();\n+        trxMainWrapperFunc.capturedClosureEnv = trxMainFunc.function.clonedEnv;\n+        commitFunc.capturedClosureEnv = env.createClone();\n+        abortFunc.capturedClosureEnv = env.createClone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87f1d864823139afcfb04cd949412a5a3e12e59"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 960, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}