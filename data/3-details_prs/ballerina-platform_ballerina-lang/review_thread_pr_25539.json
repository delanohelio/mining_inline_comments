{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MTI1Njcw", "number": 25539, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjoyODo0NlrOEhGWtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoyOToxNFrOEj_g7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTQyNTgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjoyODo0NlrOHOOdaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjoyODo0NlrOHOOdaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3OTAxOQ==", "bodyText": "extra new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484679019", "createdAt": "2020-09-08T06:28:46Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +248,79 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTU2NjYyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/services/JVMEmbeddedExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNTo0MlrOHOPxUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNTo0MlrOHOPxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwMDQ5Nw==", "bodyText": "move $_init to a constant", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484700497", "createdAt": "2020-09-08T07:15:42Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/services/JVMEmbeddedExecutor.java", "diffHunk": "@@ -96,7 +96,7 @@ private void runStartOnSchedule(String moduleName, String moduleVersion, Schedul\n             throws RuntimeException {\n         try {\n             Class<?> initClazz = Class.forName(\"ballerina.\" + moduleName + \".\" +\n-                                                       moduleVersion.replace(\".\", \"_\") + \".___init\");\n+                                                       moduleVersion.replace(\".\", \"_\") + \".$_init\");\n             final Method initMethod = initClazz.getDeclaredMethod(\"$moduleStart\", Strand.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTYzNDA4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzozNDoxN1rOHOQZ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzozNDoxN1rOHOQZ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxMDkxMQ==", "bodyText": "write the logic using StringBuilder", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484710911", "createdAt": "2020-09-08T07:34:17Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +110,20 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    public static String decodeTypeName(String typeName) {\n+        if (typeName == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTY3NjM2OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzo0NjowMlrOHOQ0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo0NzowMFrOHSeDaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNzU4Mg==", "bodyText": "Analyse the reason of replacing (readonly  type -at master)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484717582", "createdAt": "2020-09-08T07:46:02Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -131,20 +132,24 @@ static void createFunctionPointer(MethodVisitor mv, String className, String lam\n     }\n \n     /**\n-     * Cleanup type name by replacing '$' with '_'.\n+     * Cleanup type name by replacing '/ ' with '_' for readonly types.\n      *\n      * @param name name to be replaced and cleaned\n      * @return cleaned name\n      */\n-    static String cleanupTypeName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyODgwOQ==", "bodyText": "We can't move this logic to jvm desugar phase, because some type names are called from instruction level. (Eg. NEW_TYPEDESC)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489128809", "createdAt": "2020-09-16T02:47:00Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -131,20 +132,24 @@ static void createFunctionPointer(MethodVisitor mv, String className, String lam\n     }\n \n     /**\n-     * Cleanup type name by replacing '$' with '_'.\n+     * Cleanup type name by replacing '/ ' with '_' for readonly types.\n      *\n      * @param name name to be replaced and cleaned\n      * @return cleaned name\n      */\n-    static String cleanupTypeName(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNzU4Mg=="}, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTY4NDgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzo0ODozMVrOHOQ5TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODowNzo0MVrOHORkGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxODkyNQ==", "bodyText": "rename rewriteCallterminator()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484718925", "createdAt": "2020-09-08T07:48:31Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -131,20 +132,24 @@ static void createFunctionPointer(MethodVisitor mv, String className, String lam\n     }\n \n     /**\n-     * Cleanup type name by replacing '$' with '_'.\n+     * Cleanup type name by replacing '/ ' with '_' for readonly types.\n      *\n      * @param name name to be replaced and cleaned\n      * @return cleaned name\n      */\n-    static String cleanupTypeName(String name) {\n-        return name.replaceAll(\"[/$ .]\", \"_\");\n+    static String cleanupReadOnlyTypeName(String name) {\n+        return name.contains(\"readonly\") ? name.replaceAll(\"[/ .]\", \"_\") : name;\n     }\n \n     static String cleanupPathSeparators(String name) {\n         name = cleanupBalExt(name);\n         return name.replace(WINDOWS_PATH_SEPERATOR, JAVA_PACKAGE_SEPERATOR);\n     }\n \n+    static String rewriteInsName(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcyOTg4MQ==", "bodyText": "move to jvmDesugar if possible", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484729881", "createdAt": "2020-09-08T08:07:41Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -131,20 +132,24 @@ static void createFunctionPointer(MethodVisitor mv, String className, String lam\n     }\n \n     /**\n-     * Cleanup type name by replacing '$' with '_'.\n+     * Cleanup type name by replacing '/ ' with '_' for readonly types.\n      *\n      * @param name name to be replaced and cleaned\n      * @return cleaned name\n      */\n-    static String cleanupTypeName(String name) {\n-        return name.replaceAll(\"[/$ .]\", \"_\");\n+    static String cleanupReadOnlyTypeName(String name) {\n+        return name.contains(\"readonly\") ? name.replaceAll(\"[/ .]\", \"_\") : name;\n     }\n \n     static String cleanupPathSeparators(String name) {\n         name = cleanupBalExt(name);\n         return name.replace(WINDOWS_PATH_SEPERATOR, JAVA_PACKAGE_SEPERATOR);\n     }\n \n+    static String rewriteInsName(String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxODkyNQ=="}, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTg1OTcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjoxODoyOFrOHO4O7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjoxODoyOFrOHO4O7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2MzQzOQ==", "bodyText": "add todo saying remove after adding $ to all generated names in front-end\ncreate an issue and link it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485363439", "createdAt": "2020-09-09T06:18:28Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -257,7 +262,8 @@ static String getStrandMetadataVarName(String parentFunction) {\n     }\n \n     public static String cleanupFunctionName(String functionName) {\n-        return functionName.replaceAll(\"[\\\\.:/<>]\", \"_\");\n+        return functionName.matches(\"(.*)[\\\\.:/<>](.*)\") ? \"$\" + functionName.replaceAll(\"[\\\\.:/<>]\", \"_\") :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTk4MDEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo1OTo1MlrOHO5XNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzowNjoxNlrOHO5inA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MTk0MA==", "bodyText": "check for issues with read-only identifiers with special characters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485381940", "createdAt": "2020-09-09T06:59:52Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -1513,7 +1513,7 @@ private static void loadUserDefinedType(MethodVisitor mv, BType bType) {\n      */\n     private static String getTypeFieldName(String typeName) {\n \n-        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupTypeName(typeName));\n+        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupReadOnlyTypeName(typeName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MzMzNw==", "bodyText": "try to move it to jvm desugar phase", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485383337", "createdAt": "2020-09-09T07:02:46Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -1513,7 +1513,7 @@ private static void loadUserDefinedType(MethodVisitor mv, BType bType) {\n      */\n     private static String getTypeFieldName(String typeName) {\n \n-        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupTypeName(typeName));\n+        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupReadOnlyTypeName(typeName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MTk0MA=="}, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NDg2MA==", "bodyText": "use readonly type tag", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485384860", "createdAt": "2020-09-09T07:06:16Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -1513,7 +1513,7 @@ private static void loadUserDefinedType(MethodVisitor mv, BType bType) {\n      */\n     private static String getTypeFieldName(String typeName) {\n \n-        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupTypeName(typeName));\n+        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupReadOnlyTypeName(typeName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MTk0MA=="}, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjAxNTI4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxMTo1N1rOHO5s5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxMTo1N1rOHO5s5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NzQ5NQ==", "bodyText": "check if we need encoding for these identifiers if we don't use the encoded identifiers", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485387495", "createdAt": "2020-09-09T07:11:57Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -1287,7 +1290,7 @@ private void createRecordGetKeysMethod(ClassWriter cw, Map<String, BField> field\n             Label ifNotPresent = new Label();\n \n             // If its an optional field, generate if-condition to check the presense of the field.\n-            String fieldName = optionalField.name.value;\n+            String fieldName = IdentifierEncoder.decodeIdentifiers(optionalField.name.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjE2NjEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1NDoxOVrOHO7Jng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1NDoxOVrOHO7Jng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxMTIzMA==", "bodyText": "change the other part into else {...}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485411230", "createdAt": "2020-09-09T07:54:19Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+                continue;\n+            }\n+            sb.append(identifier.charAt(index));\n+            index++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjE4NDc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1OToxOFrOHO7VTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1OToxOFrOHO7VTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxNDIyMg==", "bodyText": "change logic where check $#xxxx inside loops", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485414222", "createdAt": "2020-09-09T07:59:18Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+                continue;\n+            }\n+            sb.append(identifier.charAt(index));\n+            index++;\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {\n+        if (encodedName == null) {\n+            return encodedName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < encodedName.length()) {\n+            if (encodedName.charAt(index) == '$' && index + 4 < encodedName.length()) {\n+                String unicodePoint = encodedName.substring(index + 1, index + 5);\n+                if (containsOnlyDigits(unicodePoint)) {\n+                    sb.append((char) Integer.parseInt(unicodePoint));\n+                    index += 5;\n+                    continue;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjIzNzAyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxMzoyN1rOHO71rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxMzoyN1rOHO71rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMjUxMQ==", "bodyText": "get line 94 inside else", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485422511", "createdAt": "2020-09-09T08:13:27Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+                continue;\n+            }\n+            sb.append(identifier.charAt(index));\n+            index++;\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {\n+        if (encodedName == null) {\n+            return encodedName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < encodedName.length()) {\n+            if (encodedName.charAt(index) == '$' && index + 4 < encodedName.length()) {\n+                String unicodePoint = encodedName.substring(index + 1, index + 5);\n+                if (containsOnlyDigits(unicodePoint)) {\n+                    sb.append((char) Integer.parseInt(unicodePoint));\n+                    index += 5;\n+                    continue;\n+                }\n+            }\n+            sb.append(encodedName.charAt(index));\n+            index++;\n+        }\n+        return sb.toString().replaceAll(\"(\\\\$#)(\\\\d{4})\", \"\\\\$$2\");\n+    }\n+\n+    private static boolean containsOnlyDigits(String digitString) {\n+        for (int i = 0; i < digitString.length(); i++) {\n+            if (!Character.isDigit(digitString.charAt(i))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static String escapeSpecialCharacters(String identifier) {\n+        String specialCharSet = \"([$&+,:;=\\\\?@#|/' \\\\[\\\\}\\\\]<\\\\>.\\\"^*{}~`()%!-])\";\n+        return identifier.replaceAll(\"(?<!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*\" + specialCharSet, \"\\\\\\\\$1\");\n+    }\n+\n+    public static String encodeIdentifier(String identifier) {\n+        if (identifier == null) {\n+            return identifier;\n+        }\n+        identifier = identifier.replaceAll(ENCODING_PATTERN, \"\\\\$#$1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU0NTcxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/literals/IdentifierLiteralPackageTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo1OToyNVrOHRSkaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToyNjoyNFrOHR9LUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjA3Mw==", "bodyText": "is this failing with your changes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487892073", "createdAt": "2020-09-14T12:59:25Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/literals/IdentifierLiteralPackageTest.java", "diffHunk": "@@ -32,7 +32,7 @@\n /**\n  * Identifier literal test cases with package.\n  */\n-@Test(groups = { \"disableOnOldParser\" })\n+@Test(groups = { \"disableOnOldParser\", \"brokenOnNewParser\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MDE0NA==", "bodyText": "yes. It still need to be fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487960144", "createdAt": "2020-09-14T14:12:24Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/literals/IdentifierLiteralPackageTest.java", "diffHunk": "@@ -32,7 +32,7 @@\n /**\n  * Identifier literal test cases with package.\n  */\n-@Test(groups = { \"disableOnOldParser\" })\n+@Test(groups = { \"disableOnOldParser\", \"brokenOnNewParser\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjA3Mw=="}, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MDE2Mw==", "bodyText": "fixed in last commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r488590163", "createdAt": "2020-09-15T11:26:24Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/literals/IdentifierLiteralPackageTest.java", "diffHunk": "@@ -32,7 +32,7 @@\n /**\n  * Identifier literal test cases with package.\n  */\n-@Test(groups = { \"disableOnOldParser\" })\n+@Test(groups = { \"disableOnOldParser\", \"brokenOnNewParser\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjA3Mw=="}, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU1NDAxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMToxNlrOHRSpSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMToxNlrOHRSpSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzMyMw==", "bodyText": "Lets add a method description of what this method does and why it is needed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487893323", "createdAt": "2020-09-14T13:01:16Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,50 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    public static String decodeTypeName(String typeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU1NzcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjoxMFrOHRSrlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjoxMFrOHRSrlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzkwOQ==", "bodyText": "shall we inverse the if ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487893909", "createdAt": "2020-09-14T13:02:10Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +246,78 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+    }\n+\n+    private static void encodeTypeDefIdentifiers(List<BIRTypeDefinition> typeDefs) {\n+        for (BIRTypeDefinition typeDefinition : typeDefs) {\n+            typeDefinition.name.value = encodeIdentifier(typeDefinition.name.value);\n+            encodeFunctionIdentifiers(typeDefinition.attachedFuncs);\n+            BType bType = typeDefinition.type;\n+            if (bType.tag == TypeTags.OBJECT) {\n+                BObjectType objectType = (BObjectType) bType;\n+                BObjectTypeSymbol objectTypeSymbol = (BObjectTypeSymbol) bType.tsymbol;\n+                if (objectTypeSymbol.attachedFuncs != null) {\n+                    encodeAttachedFunctionIdentifiers(objectTypeSymbol.attachedFuncs);\n+                }\n+                for (BField field : objectType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+            if (bType.tag == TypeTags.RECORD) {\n+                BRecordType recordType = (BRecordType) bType;\n+                for (BField field : recordType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void encodeFunctionIdentifiers(List<BIRFunction> functions) {\n+        for (BIRFunction function : functions) {\n+            function.name.value = encodeIdentifier(function.name.value);\n+            for (BIRNode.BIRVariableDcl localVar : function.localVars) {\n+                if (localVar.metaVarName != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU1ODQ2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjoyM1rOHRSsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjoyM1rOHRSsDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDAzMA==", "bodyText": "same here, shall we inverse the if ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487894030", "createdAt": "2020-09-14T13:02:23Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +246,78 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+    }\n+\n+    private static void encodeTypeDefIdentifiers(List<BIRTypeDefinition> typeDefs) {\n+        for (BIRTypeDefinition typeDefinition : typeDefs) {\n+            typeDefinition.name.value = encodeIdentifier(typeDefinition.name.value);\n+            encodeFunctionIdentifiers(typeDefinition.attachedFuncs);\n+            BType bType = typeDefinition.type;\n+            if (bType.tag == TypeTags.OBJECT) {\n+                BObjectType objectType = (BObjectType) bType;\n+                BObjectTypeSymbol objectTypeSymbol = (BObjectTypeSymbol) bType.tsymbol;\n+                if (objectTypeSymbol.attachedFuncs != null) {\n+                    encodeAttachedFunctionIdentifiers(objectTypeSymbol.attachedFuncs);\n+                }\n+                for (BField field : objectType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+            if (bType.tag == TypeTags.RECORD) {\n+                BRecordType recordType = (BRecordType) bType;\n+                for (BField field : recordType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void encodeFunctionIdentifiers(List<BIRFunction> functions) {\n+        for (BIRFunction function : functions) {\n+            function.name.value = encodeIdentifier(function.name.value);\n+            for (BIRNode.BIRVariableDcl localVar : function.localVars) {\n+                if (localVar.metaVarName != null) {\n+                    localVar.metaVarName = encodeIdentifier(localVar.metaVarName);\n+                }\n+            }\n+            for (BIRNode.BIRParameter parameter : function.requiredParams) {\n+                if (parameter.name != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU1OTA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjozMVrOHRSsYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjozMVrOHRSsYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDExMw==", "bodyText": "shall we inverse the if ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487894113", "createdAt": "2020-09-14T13:02:31Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +246,78 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+    }\n+\n+    private static void encodeTypeDefIdentifiers(List<BIRTypeDefinition> typeDefs) {\n+        for (BIRTypeDefinition typeDefinition : typeDefs) {\n+            typeDefinition.name.value = encodeIdentifier(typeDefinition.name.value);\n+            encodeFunctionIdentifiers(typeDefinition.attachedFuncs);\n+            BType bType = typeDefinition.type;\n+            if (bType.tag == TypeTags.OBJECT) {\n+                BObjectType objectType = (BObjectType) bType;\n+                BObjectTypeSymbol objectTypeSymbol = (BObjectTypeSymbol) bType.tsymbol;\n+                if (objectTypeSymbol.attachedFuncs != null) {\n+                    encodeAttachedFunctionIdentifiers(objectTypeSymbol.attachedFuncs);\n+                }\n+                for (BField field : objectType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+            if (bType.tag == TypeTags.RECORD) {\n+                BRecordType recordType = (BRecordType) bType;\n+                for (BField field : recordType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void encodeFunctionIdentifiers(List<BIRFunction> functions) {\n+        for (BIRFunction function : functions) {\n+            function.name.value = encodeIdentifier(function.name.value);\n+            for (BIRNode.BIRVariableDcl localVar : function.localVars) {\n+                if (localVar.metaVarName != null) {\n+                    localVar.metaVarName = encodeIdentifier(localVar.metaVarName);\n+                }\n+            }\n+            for (BIRNode.BIRParameter parameter : function.requiredParams) {\n+                if (parameter.name != null) {\n+                    parameter.name.value = encodeIdentifier(parameter.name.value);\n+                }\n+            }\n+            encodeWorkerName(function);\n+        }\n+    }\n+\n+    private static void encodeWorkerName(BIRFunction function) {\n+        if (function.workerName != null) {\n+            function.workerName.value = encodeIdentifier(function.workerName.value);\n+        }\n+        for (BIRNode.ChannelDetails channel : function.workerChannels) {\n+            channel.name = encodeIdentifier(channel.name);\n+        }\n+    }\n+\n+    private static void encodeAttachedFunctionIdentifiers(List<BAttachedFunction> functions) {\n+        for (BAttachedFunction function : functions) {\n+            function.funcName.value = encodeIdentifier(function.funcName.value);\n+            function.symbol.name.value = encodeIdentifier(function.symbol.name.value);\n+            if (function.symbol.receiverSymbol != null) {\n+                function.symbol.receiverSymbol.name.value = encodeIdentifier(function.symbol.receiverSymbol.name.value);\n+            }\n+        }\n+    }\n+\n+    private static void encodeGlobalVariableIdentifiers(List<BIRNode.BIRGlobalVariableDcl> globalVars) {\n+        for (BIRNode.BIRGlobalVariableDcl globalVar : globalVars) {\n+            if (globalVar != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU2MDkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjo1N1rOHRStfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjo1N1rOHRStfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDM5OQ==", "bodyText": "why this is in a new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487894399", "createdAt": "2020-09-14T13:02:57Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java", "diffHunk": "@@ -1205,7 +1207,8 @@ private void submitToScheduler(BIROperand lhsOp, String moduleClassName, BType a\n     }\n \n     static String getStrandMetadataVarName(String typeName, String parentFunction) {\n-        return STRAND_METADATA_VAR_PREFIX + JvmCodeGenUtil.cleanupTypeName(typeName) + \"$\" + parentFunction + \"$\";\n+        return STRAND_METADATA_VAR_PREFIX + typeName + \"$\" + parentFunction +\n+                \"$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTc2NTcwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1Mzo0MFrOHRwnxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1Mzo0MFrOHRwnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NDQ1Mg==", "bodyText": "There should be a new line in between the method desc and param desc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r488384452", "createdAt": "2020-09-15T04:53:40Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,55 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    /**\n+     * Decode the encoded Type name for runtime name calls.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTc3NDc1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/readonly/SelectivelyImmutableTypeBaloTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1ODoxM1rOHRwtMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjozNjozMFrOHSd5LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTg0Mg==", "bodyText": "why testorg/selectively_immutable became testorg_selectively_immutable ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r488385842", "createdAt": "2020-09-15T04:58:13Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/readonly/SelectivelyImmutableTypeBaloTest.java", "diffHunk": "@@ -57,33 +57,33 @@ public void testImmutableTypesNegative() {\n         int index = 0;\n \n         // Assignment and initialization.\n-        validateError(result, index++, \"incompatible types: expected '(testorg/selectively_immutable:1.0\" +\n-                \".0:MixedRecord & readonly)', found 'testorg/selectively_immutable:1.0.0:MixedRecord'\", 20, 38);\n+        validateError(result, index++, \"incompatible types: expected '(testorg_selectively_immutable:\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyNjE4OA==", "bodyText": "reverted in last commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489126188", "createdAt": "2020-09-16T02:36:30Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/readonly/SelectivelyImmutableTypeBaloTest.java", "diffHunk": "@@ -57,33 +57,33 @@ public void testImmutableTypesNegative() {\n         int index = 0;\n \n         // Assignment and initialization.\n-        validateError(result, index++, \"incompatible types: expected '(testorg/selectively_immutable:1.0\" +\n-                \".0:MixedRecord & readonly)', found 'testorg/selectively_immutable:1.0.0:MixedRecord'\", 20, 38);\n+        validateError(result, index++, \"incompatible types: expected '(testorg_selectively_immutable:\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTg0Mg=="}, "originalCommit": {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDYxNjk0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDozNDo1OVrOHSftZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjowODozMFrOHShfeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTk0MA==", "bodyText": "we can bring this if into while loop condition", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489155940", "createdAt": "2020-09-16T04:34:59Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,56 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    /**\n+     * Decode the encoded Type name for runtime name calls.\n+     *\n+     * @param typeName Name of the defined type\n+     * @return decoded name String\n+     */\n+    public static String decodeTypeName(String typeName) {\n+        if (typeName == null) {\n+            return typeName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < typeName.length()) {\n+            if (typeName.charAt(index) == '$' && index + 4 < typeName.length()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NTE0Ng==", "bodyText": "This is not possible because we have an else condition inside the loop.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489185146", "createdAt": "2020-09-16T06:08:30Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,56 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    /**\n+     * Decode the encoded Type name for runtime name calls.\n+     *\n+     * @param typeName Name of the defined type\n+     * @return decoded name String\n+     */\n+    public static String decodeTypeName(String typeName) {\n+        if (typeName == null) {\n+            return typeName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < typeName.length()) {\n+            if (typeName.charAt(index) == '$' && index + 4 < typeName.length()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTk0MA=="}, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDYzNTE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDo0NTo1OVrOHSf4BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoyNjozNFrOHSh68Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODY2MA==", "bodyText": "This appears to be exactly the same code as decodeTypeName. Can't we reuse code? It is very very important to avoid duplication", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489158660", "createdAt": "2020-09-16T04:45:59Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+            } else {\n+                sb.append(identifier.charAt(index));\n+                index++;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5MjE3Nw==", "bodyText": "modified in last commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489192177", "createdAt": "2020-09-16T06:26:34Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+            } else {\n+                sb.append(identifier.charAt(index));\n+                index++;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODY2MA=="}, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDYzODU3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-service.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDo0ODoxOFrOHSf6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNToxMDozMVrOHSgWjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTE3OQ==", "bodyText": "If this is a new file shall we change the year?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489159179", "createdAt": "2020-09-16T04:48:18Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-service.bal", "diffHunk": "@@ -1,3 +1,19 @@\n+// Copyright (c) 2017 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NjQ3Ng==", "bodyText": "The file was created in 2017 but without license header. I added it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489166476", "createdAt": "2020-09-16T05:10:31Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-service.bal", "diffHunk": "@@ -1,3 +1,19 @@\n+// Copyright (c) 2017 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTE3OQ=="}, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDYzODk3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-success.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDo0ODozNVrOHSf6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNToxMDo0NlrOHSgWxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTIzNA==", "bodyText": "If this is a new file shall we change the year?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489159234", "createdAt": "2020-09-16T04:48:35Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-success.bal", "diffHunk": "@@ -1,130 +1,299 @@\n+// Copyright (c) 2017 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NjUzNA==", "bodyText": "The file was created in 2017 but without license header. I added it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489166534", "createdAt": "2020-09-16T05:10:46Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-success.bal", "diffHunk": "@@ -1,130 +1,299 @@\n+// Copyright (c) 2017 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTIzNA=="}, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTc2MjM4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IdentifierEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoyOToxNFrOHSqjWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjoxMDo0M1rOHSt0HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzMzU5NQ==", "bodyText": "String.replaceAll has a performance impact as it is internally compiled like the below\nPattern.compile(regex).matcher(str).replaceAll(repl)\nSo to get some improvement on performance on this encode method, shall we use the below approach ?\nHave the Pattern.compile called once (may be as a class level constant) and then call the match on it within the encode method? That way, it only compiles once\nreferences - https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#replaceAll-java.lang.String-java.lang.String-\nSO - https://stackoverflow.com/questions/1466959/string-replaceall-vs-matcher-replaceall-performance-differences", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489333595", "createdAt": "2020-09-16T10:29:14Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+            } else {\n+                sb.append(identifier.charAt(index));\n+                index++;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String escapeSpecialCharacters(String identifier) {\n+        String specialCharSet = \"([$&+,:;=\\\\?@#|/' \\\\[\\\\}\\\\]<\\\\>.\\\"^*{}~`()%!-])\";\n+        return identifier.replaceAll(\"(?<!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*\" + specialCharSet, \"\\\\\\\\$1\");\n+    }\n+\n+    /**\n+     * Encode the identifiers to avoid using jvm reserved characters.\n+     *\n+     * @param identifier identifier string\n+     * @return encoded identifier\n+     */\n+    public static String encodeIdentifier(String identifier) {\n+        if (identifier == null) {\n+            return identifier;\n+        }\n+        if (identifier.contains(ESCAPE_PREFIX)) {\n+            identifier = encodeSpecialCharacters(identifier);\n+        } else {\n+            identifier = identifier.replaceAll(ENCODING_PATTERN, \"\\\\$#$1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4NzAzNg==", "bodyText": "Changed the replaceAll into matcher.replaceAll()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489387036", "createdAt": "2020-09-16T12:10:43Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+            } else {\n+                sb.append(identifier.charAt(index));\n+                index++;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String escapeSpecialCharacters(String identifier) {\n+        String specialCharSet = \"([$&+,:;=\\\\?@#|/' \\\\[\\\\}\\\\]<\\\\>.\\\"^*{}~`()%!-])\";\n+        return identifier.replaceAll(\"(?<!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*\" + specialCharSet, \"\\\\\\\\$1\");\n+    }\n+\n+    /**\n+     * Encode the identifiers to avoid using jvm reserved characters.\n+     *\n+     * @param identifier identifier string\n+     * @return encoded identifier\n+     */\n+    public static String encodeIdentifier(String identifier) {\n+        if (identifier == null) {\n+            return identifier;\n+        }\n+        if (identifier.contains(ESCAPE_PREFIX)) {\n+            identifier = encodeSpecialCharacters(identifier);\n+        } else {\n+            identifier = identifier.replaceAll(ENCODING_PATTERN, \"\\\\$#$1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzMzU5NQ=="}, "originalCommit": {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 149, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}