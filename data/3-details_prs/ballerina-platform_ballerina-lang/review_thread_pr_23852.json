{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODM2ODAy", "number": 23852, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODozNjo0OVrOEFVxbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxOTowNzozN1rOEFV4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDM1MDU0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODozNjo0OVrOGjetmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODozNjo0OVrOGjetmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1NjUzOA==", "bodyText": "Let's use InherentTypeViolation in https://github.com/ballerina-platform/ballerina-lang/blob/master/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/exceptions/BallerinaErrorReasons.java#L64 here instead.\nCheck map/tuple violation check", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23852#discussion_r439856538", "createdAt": "2020-06-14T18:36:49Z", "author": {"login": "pcnfernando"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java", "diffHunk": "@@ -538,6 +542,14 @@ private void updateIndexKeyMappings(Long hash) {\n         }\n     }\n \n+    // This method checks for inherent table type violation\n+    private void checkInherentTypeViolation(MapValue dataMap, BTableType type) {\n+        if (!TypeChecker.checkIsType(dataMap.getType(), type.getConstrainedType())) {\n+            throw BallerinaErrors.createError(VALUE_INCONSISTENT_WITH_TABLE_TYPE_ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223b7551f1aa5f3c532a6457e3037f4b4722c6b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDM2ODQ0OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxOTowNzozN1rOGje2rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxOTowNzozN1rOGje2rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1ODg2Mw==", "bodyText": "Shall we do use a map as table constrained and try to add () as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23852#discussion_r439858863", "createdAt": "2020-06-14T19:07:37Z", "author": {"login": "pcnfernando"}, "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "diffHunk": "@@ -42,6 +61,14 @@ type CustomerTable table<Customer> key(id);\n \n type CustomerKeyLessTable table<Customer>;\n \n+type PersonTable table<Person>;\n+\n+type EngineerTable table<Engineer>;\n+\n+type InternTable table<Intern>;\n+\n+type PersonAnyTable table<map<any>>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b223b7551f1aa5f3c532a6457e3037f4b4722c6b"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3499, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}