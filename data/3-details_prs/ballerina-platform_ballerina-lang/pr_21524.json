{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTI3NTY1", "number": 21524, "title": "Rewrite stream functionality with ballerina", "bodyText": "Purpose\nPlease refer to the discussions in ballerina-platform/ballerina-spec#406\nFixes #21223, #21486, #21481", "createdAt": "2020-03-07T09:52:42Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524", "merged": true, "mergeCommit": {"oid": "4833d18ee01eb1ee64efb7359a8078cb432a6af1"}, "closed": true, "closedAt": "2020-03-10T17:43:00Z", "author": {"login": "gimantha"}, "timelineItems": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIDo0zgH2gAyMzg1MTI3NTY1OjQ5YmMyODM0N2ZiNGE0MmMzN2E0MDc2YmVkNzY5NWIxMDZiODMyZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMVrPygFqTM3MjE1MzEyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "49bc28347fb4a42c37a4076bed7695b106b832f6", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49bc28347fb4a42c37a4076bed7695b106b832f6", "committedDate": "2020-02-26T09:51:47Z", "message": "Change stream constructor to take an iterable object:runtime changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b027fa9d4956f8b55f9879feaccc478316334fde", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b027fa9d4956f8b55f9879feaccc478316334fde", "committedDate": "2020-02-27T04:22:46Z", "message": "Add error type support and remove stream construct"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103636445e8b80657b7191ba5ae960e2839d7dc0", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/103636445e8b80657b7191ba5ae960e2839d7dc0", "committedDate": "2020-02-27T04:26:25Z", "message": "Fix compile errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95df9e50fd489056f9fa8ae70c4b465cb41f4f4b", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95df9e50fd489056f9fa8ae70c4b465cb41f4f4b", "committedDate": "2020-02-27T05:09:54Z", "message": "Merge with upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ec56bd19c4844f924af16370f5285de0a3d0c70", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ec56bd19c4844f924af16370f5285de0a3d0c70", "committedDate": "2020-02-27T09:43:33Z", "message": "Refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "381129c6018ef9a9fefd8e50fdc10aba5c8ccdf7", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/381129c6018ef9a9fefd8e50fdc10aba5c8ccdf7", "committedDate": "2020-02-28T12:47:03Z", "message": "Add implicit stream construct"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4d4720dc15e347573239ba37acdb840d3346fb0", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4d4720dc15e347573239ba37acdb840d3346fb0", "committedDate": "2020-02-28T12:54:54Z", "message": "Merge upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4908b4f77bf7022084f63191a9af95a8f5fc7017", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4908b4f77bf7022084f63191a9af95a8f5fc7017", "committedDate": "2020-03-01T07:49:27Z", "message": "Add explicit stream construct"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad1703ef6a6c7a8df59031ab5c2fdcff8ac6299", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ad1703ef6a6c7a8df59031ab5c2fdcff8ac6299", "committedDate": "2020-03-02T06:10:34Z", "message": "Set correct type params for toStream function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9af26c5baeea5bee1346256b3fe233eacc524ff7", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9af26c5baeea5bee1346256b3fe233eacc524ff7", "committedDate": "2020-03-02T08:38:48Z", "message": "Enable BStreamValue tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bac620a844adb32d5f42a3036a4b0c0cafec2a34", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bac620a844adb32d5f42a3036a4b0c0cafec2a34", "committedDate": "2020-03-02T08:40:23Z", "message": "Merge branch 'streams-rewrite' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e6191c36e6e8a6e7bc13167aad25ed4a4bbbe4b", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e6191c36e6e8a6e7bc13167aad25ed4a4bbbe4b", "committedDate": "2020-03-02T09:25:53Z", "message": "Fix stream value type name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40912a975e20496ef287af240709fa09a35b0375", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40912a975e20496ef287af240709fa09a35b0375", "committedDate": "2020-03-02T11:01:11Z", "message": "Merge branch 'streams-rewrite' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00a8ab6b92a67fb57e20a0bcb97bb92d51102de3", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00a8ab6b92a67fb57e20a0bcb97bb92d51102de3", "committedDate": "2020-03-03T02:30:02Z", "message": "Allow user defined error types with streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe7e60f825246f50e2227c6866c7e150e5bef52b", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe7e60f825246f50e2227c6866c7e150e5bef52b", "committedDate": "2020-03-03T05:17:44Z", "message": "Merge branch 'streams-rewrite' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9076ce93f73259ed068b21fed8b75a81c28e3f2", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9076ce93f73259ed068b21fed8b75a81c28e3f2", "committedDate": "2020-03-03T09:03:12Z", "message": "Improve type checking for stream type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d85570685dd638141be493e3cd4bc01d520bcb5a", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d85570685dd638141be493e3cd4bc01d520bcb5a", "committedDate": "2020-03-04T04:40:53Z", "message": "Fix explicit stream definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d8f4393a243ab1506a2c60a8cac54de19eb9574", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d8f4393a243ab1506a2c60a8cac54de19eb9574", "committedDate": "2020-03-04T09:33:15Z", "message": "Add test cases for BStream type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51c82b76b97eed452ee2c94f486383f9187aa0ff", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/51c82b76b97eed452ee2c94f486383f9187aa0ff", "committedDate": "2020-03-04T10:18:22Z", "message": "Remove special check for streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8fd8779b4d19e3f46946bc47f794ac561c8150c", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8fd8779b4d19e3f46946bc47f794ac561c8150c", "committedDate": "2020-03-04T10:18:42Z", "message": "Refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa16b09ac572719f644daea2d4e6678e77145336", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa16b09ac572719f644daea2d4e6678e77145336", "committedDate": "2020-03-04T10:18:51Z", "message": "Merge branch 'streams-rewrite' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8f2591d52248dabd5c93535c7a3daec9893bd84", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8f2591d52248dabd5c93535c7a3daec9893bd84", "committedDate": "2020-03-04T10:32:17Z", "message": "Fix stream tests compilation issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "830836651e7ab15cfb90ea58cf762df920111dc0", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/830836651e7ab15cfb90ea58cf762df920111dc0", "committedDate": "2020-03-04T14:53:06Z", "message": "Allow streams to have union of errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e225060ae9da723f3d320a4d6c9dd1c2d253491", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e225060ae9da723f3d320a4d6c9dd1c2d253491", "committedDate": "2020-03-04T14:54:02Z", "message": "Merge branch 'streams-rewrite' of github.com:ballerina-platform/ballerina-lang into new-stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "300206a87ef065aac660ca4d3aa9c1eba0e52f46", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/300206a87ef065aac660ca4d3aa9c1eba0e52f46", "committedDate": "2020-03-04T15:07:20Z", "message": "Disable streams negative tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6312d1e6115c7914d289792d3ee622fb4bdee17", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6312d1e6115c7914d289792d3ee622fb4bdee17", "committedDate": "2020-03-04T23:27:15Z", "message": "Add close function to stream - initial cut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd9eb8ffe1597be8dbcaa3c116d1569b85438bb", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bd9eb8ffe1597be8dbcaa3c116d1569b85438bb", "committedDate": "2020-03-04T23:34:06Z", "message": "Fix taken from https://github.com/ballerina-platform/ballerina-lang/pull/21459"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45c85ed073276c804abbd212999ff2c0c6e4fdf3", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/45c85ed073276c804abbd212999ff2c0c6e4fdf3", "committedDate": "2020-03-06T06:43:05Z", "message": "Refactor stream.bal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbb78cd4fa96513a4ca5e3c6fd1d7ad5db537b9c", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbb78cd4fa96513a4ca5e3c6fd1d7ad5db537b9c", "committedDate": "2020-03-06T09:44:07Z", "message": "Fix typeParam issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0abcf05359bf7be7190c286c718a26e058bd036c", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0abcf05359bf7be7190c286c718a26e058bd036c", "committedDate": "2020-03-06T09:52:55Z", "message": "Merge upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7887dec5240450536b8fb09a69ac33838d9fe6e", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7887dec5240450536b8fb09a69ac33838d9fe6e", "committedDate": "2020-03-06T10:55:41Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java\n#\tlanguage-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/common/LSNodeVisitor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "252b53b5775c973dc1ad0dd12ccf89093cf015cc", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/252b53b5775c973dc1ad0dd12ccf89093cf015cc", "committedDate": "2020-03-06T10:55:52Z", "message": "Merge branch 'streams-rewrite' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc406303a28558ce056d46a60599ee962b5f6b9", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccc406303a28558ce056d46a60599ee962b5f6b9", "committedDate": "2020-03-07T07:24:32Z", "message": "Merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf8c0e87169da7ad4e8d950ed94ee80d4773247", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fcf8c0e87169da7ad4e8d950ed94ee80d4773247", "committedDate": "2020-03-07T07:52:26Z", "message": "Merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0accccfb53f8050f732f55f04db1d56283a9c22", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0accccfb53f8050f732f55f04db1d56283a9c22", "committedDate": "2020-03-08T04:42:59Z", "message": "Fix lang server core tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a71233a0d21e17916303c9b6919b7d2c96c966e8", "committedDate": "2020-03-08T04:43:27Z", "message": "Refactor comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjg2MDA0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#pullrequestreview-371286004", "createdAt": "2020-03-09T15:30:30Z", "commit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozMDozMVrOFztk_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozMzowN1rOFztr5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc2ODQ0Nw==", "bodyText": "Remove the commented line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r389768447", "createdAt": "2020-03-09T15:30:31Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -531,9 +538,11 @@ private BType getMatchingBoundType(BType expType, SymbolEnv env, HashSet<BType>\n                 return new BMapType(TypeTags.MAP, getMatchingBoundType(constraint, env, resolvedTypes),\n                         symTable.mapType.tsymbol);\n             case TypeTags.STREAM:\n-                BType streamConstraint = ((BStreamType) expType).constraint;\n-                return new BStreamType(TypeTags.STREAM, getMatchingBoundType(streamConstraint, env, resolvedTypes),\n-                                       symTable.streamType.tsymbol);\n+                BType streamConstraint = getMatchingBoundType(((BStreamType) expType).constraint, env, resolvedTypes);\n+//                BType streamErrorType = getMatchingBoundType(((BStreamType) expType).error, env, resolvedTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc2ODk0Mw==", "bodyText": "Does this change required?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r389768943", "createdAt": "2020-03-09T15:31:14Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -641,10 +650,6 @@ private BType getMatchingObjectBoundType(BObjectType expType, SymbolEnv env, Has\n     }\n \n     private BType getMatchingOptionalBoundType(BUnionType expType, SymbolEnv env, HashSet<BType> resolvedTypes) {\n-\n-        if (!expType.isNullable() || expType.getMemberTypes().size() != 2) {\n-            return expType;\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MDIxNA==", "bodyText": "Remove the commented code blog.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r389770214", "createdAt": "2020-03-09T15:33:07Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1230,10 +1230,14 @@ private boolean checkNextFuncReturnType(BType returnType) {\n             return false;\n         }\n \n-        if (types.size() != 1) {\n-            return false;\n+        if (!types.removeIf(type -> type.tag == TypeTags.ERROR)) {\n+            // return false;\n         }\n \n+//        if (types.size() != 1) {\n+//            return false;\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d605382ea89c95ac6306a07a734d5906b4dadf", "author": {"user": {"login": "grainier", "name": "Grainier Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f3d605382ea89c95ac6306a07a734d5906b4dadf", "committedDate": "2020-03-10T04:30:10Z", "message": "Make stream constraint optional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4efa6a5f5c8c26c33612266a2487f49a31fcdf", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c4efa6a5f5c8c26c33612266a2487f49a31fcdf", "committedDate": "2020-03-10T04:41:46Z", "message": "support stream streamA = new(foo); var streamA = new stream(foo);"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e40487a24b112e43a47fe3adf7f90678940fb5c", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e40487a24b112e43a47fe3adf7f90678940fb5c", "committedDate": "2020-03-10T05:11:05Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657c38151131b7b2585d230a8775bca2879367ba", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/657c38151131b7b2585d230a8775bca2879367ba", "committedDate": "2020-03-10T05:14:04Z", "message": "Refactor imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040", "committedDate": "2020-03-10T05:16:40Z", "message": "Fix git review issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjk1MzIz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#pullrequestreview-371695323", "createdAt": "2020-03-10T05:52:37Z", "commit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo1MjozN1rOF0CQjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo1MjozN1rOF0CQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNzI3Nw==", "bodyText": "Check how dependencies work for stream init", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390107277", "createdAt": "2020-03-10T05:52:37Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -788,7 +789,8 @@ private void addDependency(BSymbol dependent, BSymbol provider) {\n     @Override\n     public void visit(BLangTypeInit typeInitExpr) {\n         typeInitExpr.argsExpr.forEach(argExpr -> analyzeNode(argExpr, env));\n-        if (this.currDependentSymbol.peek() != null) {\n+        if (this.currDependentSymbol.peek() != null\n+                && (typeInitExpr.type.tag != TypeTags.STREAM)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjk4NDYw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#pullrequestreview-371698460", "createdAt": "2020-03-10T06:04:37Z", "commit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowNDozN1rOF0CbAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowNDozN1rOF0CbAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwOTk1NA==", "bodyText": "add test cases to cover negative cases", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390109954", "createdAt": "2020-03-10T06:04:37Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1724,9 +1721,36 @@ public void visit(BLangTypeInit cIExpr) {\n                 }\n                 break;\n             case TypeTags.STREAM:\n-                dlog.error(cIExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR,\n-                           cIExpr.initInvocation.name);\n-                resultType = symTable.semanticError;\n+                if (cIExpr.initInvocation.argExprs.size() != 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjk5NjY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#pullrequestreview-371699666", "createdAt": "2020-03-10T06:09:05Z", "commit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowOTowNVrOF0CfJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowOTowNVrOF0CfJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTAxMw==", "bodyText": "double check - what if user sets ()  for errorType? in stream<constraintType, ErrorType?>", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390111013", "createdAt": "2020-03-10T06:09:05Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1724,9 +1721,36 @@ public void visit(BLangTypeInit cIExpr) {\n                 }\n                 break;\n             case TypeTags.STREAM:\n-                dlog.error(cIExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR,\n-                           cIExpr.initInvocation.name);\n-                resultType = symTable.semanticError;\n+                if (cIExpr.initInvocation.argExprs.size() != 1) {\n+                    dlog.error(cIExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR, cIExpr.initInvocation.name);\n+                    resultType = symTable.semanticError;\n+                    return;\n+                }\n+\n+                BStreamType actualStreamType = (BStreamType) actualType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzExODk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#pullrequestreview-371711895", "createdAt": "2020-03-10T06:50:56Z", "commit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjo1MDo1NlrOF0DHCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjo1MDo1NlrOF0DHCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMTIyNA==", "bodyText": "return error not the reduced value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390121224", "createdAt": "2020-03-10T06:50:56Z", "author": {"login": "gimantha"}, "path": "langlib/lang.stream/src/main/ballerina/src/lang.stream/stream.bal", "diffHunk": "@@ -13,127 +13,189 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n+\n import ballerina/lang.__internal as internal;\n \n-//TODO: stream<Type, E>, supporting E is not implemented yet.\n-# A type parameter that is a subtype of `anydata|error`.\n+# A type parameter that is a subtype of `any|error`.\n # Has the special semantic that when used in a declaration\n # all uses in the declaration must refer to same type.\n @typeParam\n-type PureType1 anydata | error;\n+type Type any|error;\n \n+# A type parameter that is a subtype of `error`.\n+# Has the special semantic that when used in a declaration\n+# all uses in the declaration must refer to same type.\n @typeParam\n-type PureType2 anydata | error;\n+type ErrorType error?;\n \n+# A type parameter that is a subtype of `any|error`.\n+# Has the special semantic that when used in a declaration\n+# all uses in the declaration must refer to same type.\n @typeParam\n-type Type any | error;\n-\n+type Type1 any|error;\n \n-# Selects the members from an array for which the `func` function returns true.\n+# Selects the members from a stream for which a function returns true.\n #\n-# + strm - The stream\n+# + stm - the stream\n # + func - a predicate to apply to each member to test whether it should be selected\n-# + return - new stream only containing members of `strm` for which `func` evaluates to true\n-public function filter(stream<PureType1> strm, function(PureType1 val) returns boolean func) returns stream<PureType1> {\n-    return stream {\n+# + return - new stream only containing members of `stm` for which `func` evaluates to true\n+public function filter(stream<Type,ErrorType> stm, function(Type val) returns boolean func)\n+   returns stream<Type,ErrorType>  {\n+    object {\n+        public stream<Type, ErrorType> strm;\n+        public any func;\n+\n+        public function __init(stream<Type, ErrorType> strm, function(Type val) returns boolean func) {\n+            self.strm = strm;\n+            self.func = func;\n+        }\n+\n+        public function next() returns record {|Type value;|}|ErrorType? {\n             // while loop is required to continue filtering until we find a value which matches the filter or ().\n             while(true) {\n-                var nextVal = next(strm);\n+                var nextVal = next(self.strm);\n                 if (nextVal is ()) {\n                     return ();\n+                } else if (nextVal is error) {\n+                    return nextVal;\n                 } else {\n                     var value = nextVal?.value;\n+                    function(any|error) returns boolean func = internal:getFilterFunc(self.func);\n                     if (func(value)) {\n                         return nextVal;\n                     }\n                 }\n             }\n             return ();\n-        };\n+        }\n+    } itrObj = new(stm, func);\n+    return internal:construct(internal:getElementType(typeof stm), itrObj);\n }\n \n # Returns the next element in the stream wrapped in a record or () if the stream ends.\n #\n # + strm - The stream\n # + return - If the stream has elements, return the element wrapped in a record with single field called `value`,\n #            otherwise returns ()\n-public function next(stream<PureType1> strm) returns record {| PureType1 value; |}? {\n-    var fp = getGenFunc(strm);\n-    return internal:createClone(fp());\n+public function next(stream<Type, ErrorType> strm) returns record {| Type value; |}|ErrorType? {\n+    abstract object {\n+        public function next() returns record {|Type value;|}|ErrorType?;\n+    } iteratorObj = <abstract object {\n+                            public function next() returns record {|Type value;|}|ErrorType?;\n+                     }>internal:getIteratorObj(strm);\n+    var next1 = iteratorObj.next();\n+    if (next1 is ()) {\n+        return ();\n+    } else if (next1 is error) {\n+        return next1;\n+    } else {\n+        return internal:setNarrowType(internal:getElementType(typeof strm), {value : next1.value});\n+    }\n }\n \n-# Applies a function to each member of a stream and returns a new stream of the results.\n+# Applies a function to each member of a stream and returns a stream of the results.\n #\n-# + strm - The stream\n-# + func - A function to apply to each member\n-# + return - New stream containing result of applying `func` to each member of `strm` in order\n-public function 'map(stream<PureType1> strm, function(PureType1 val) returns PureType2 func) returns stream<PureType2> {\n-    return stream {\n-        var nextVal = next(strm);\n-        if (nextVal is ()) {\n-            return ();\n-        } else {\n-            function(anydata | error) returns anydata | error mappingFunc = func;\n-            var value = mappingFunc(nextVal.value);\n-            return internal:setNarrowType(typeof value, {value : value});\n-        }\n-    };\n+# + stm - the stream\n+# + func - a function to apply to each member\n+# + return - new stream containing result of applying `func` to each member of `stm` in order\n+public function 'map(stream<Type,ErrorType> stm, function(Type val) returns Type1 func)\n+   returns stream<Type1,ErrorType> {\n+    object {\n+       public stream<Type, ErrorType> strm;\n+       public any func;\n+\n+       public function __init(stream<Type, ErrorType> strm, function(Type val) returns Type1 func) {\n+           self.strm = strm;\n+           self.func = func;\n+       }\n+\n+       public function next() returns record {|Type value;|}|ErrorType? {\n+           var nextVal = next(self.strm);\n+           if (nextVal is ()) {\n+               return ();\n+           } else {\n+               function(any | error) returns any | error mappingFunc = internal:getMapFunc(self.func);\n+               if (nextVal is error) {\n+                    return nextVal;\n+               } else {\n+                    var value = mappingFunc(nextVal.value);\n+                    return internal:setNarrowType(typeof value, {value : value});\n+               }\n+           }\n+       }\n+    } iteratorObj = new(stm, func);\n+    return internal:construct(internal:getReturnType(func), iteratorObj);\n }\n \n-# Combines the members of an stream using a combining function.\n+// Refer to issue https://github.com/ballerina-platform/ballerina-lang/issues/21527\n+# Combines the members of a stream using a combining function.\n # The combining function takes the combined value so far and a member of the stream,\n # and returns a new combined value.\n #\n-# + strm - the stream\n+# + stm - the stream\n # + func - combining function\n-# + initial - initial value for the first argument of combining parameter `func`\n-# + return - result of combining the members of `strm` using `func`\n-#\n-# For example\n-# ```\n-# reduce([1, 2, 3].toStream(), function (int total, int n) returns int { return total + n; }, 0)\n-# ```\n-# is the same as `sum(1, 2, 3)`.\n-public function reduce(stream<PureType1> strm, function(Type accum, PureType1 val) returns Type func, Type initial) returns Type {\n+# + initial - initial value for the first argument of combining function\n+# + return - result of combining the members of `stm` using the combining function\n+public function reduce(stream<Type,ErrorType> stm, function(Type1 accum, Type val) returns Type1 func, Type1 initial)\n+   returns Type1|ErrorType {\n     any | error reducedValue = initial;\n     while (true) {\n-        var nextVal = next(strm);\n+        var nextVal = next(stm);\n         if (nextVal is ()) {\n             return reducedValue;\n+        } else if (nextVal is error) {\n+            return reducedValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 178}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac4639da161701236524bfc846071e9ced42763d", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac4639da161701236524bfc846071e9ced42763d", "committedDate": "2020-03-10T08:42:16Z", "message": "Fix git reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4326632d0daabb26a45abc61332ecccef4857b07", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4326632d0daabb26a45abc61332ecccef4857b07", "committedDate": "2020-03-10T10:15:18Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5be6a51490295b7e4a5340d2dab56cf4548aefc0", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5be6a51490295b7e4a5340d2dab56cf4548aefc0", "committedDate": "2020-03-10T10:15:58Z", "message": "Revert change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b11e54bcf64ab7ccdb5b0174e50a3b24480c4f", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15b11e54bcf64ab7ccdb5b0174e50a3b24480c4f", "committedDate": "2020-03-10T11:18:57Z", "message": "Refactor imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e679edc8fc85a6a03b6ffa631723adfa212abbb", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e679edc8fc85a6a03b6ffa631723adfa212abbb", "committedDate": "2020-03-10T12:50:57Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bc85f24c20eb9619ef599121e7f6dda95a0c0c1", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bc85f24c20eb9619ef599121e7f6dda95a0c0c1", "committedDate": "2020-03-10T13:04:25Z", "message": "Add stream type to JMethodResolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30eef82f55676f1c3e19df9e4d47c369c4a85f81", "author": {"user": {"login": "gimantha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30eef82f55676f1c3e19df9e4d47c369c4a85f81", "committedDate": "2020-03-10T13:13:57Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into streams-rewrite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDA2Nzg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#pullrequestreview-372006785", "createdAt": "2020-03-10T14:31:34Z", "commit": {"oid": "30eef82f55676f1c3e19df9e4d47c369c4a85f81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTUzMTIz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#pullrequestreview-372153123", "createdAt": "2020-03-10T17:08:25Z", "commit": {"oid": "30eef82f55676f1c3e19df9e4d47c369c4a85f81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4002, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}