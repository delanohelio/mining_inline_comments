{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MDQ1Mzgx", "number": 26703, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjo1MDoyMFrOE1DaHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjoxNjo1NVrOE1Fa1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDY1ODIyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/types/BallerinaFieldSymbol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjo1MDoyMFrOHtHZDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjo1MDoyMFrOHtHZDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2OTA3MQ==", "bodyText": "Shall we minimize the two returns to a single return statement?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26703#discussion_r517069071", "createdAt": "2020-11-04T02:50:20Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/types/BallerinaFieldSymbol.java", "diffHunk": "@@ -71,7 +73,12 @@ public boolean hasDefaultValue() {\n      */\n     @Override\n     public TypeSymbol typeDescriptor() {\n-        return TypesFactory.getTypeDescriptor(this.bField.getType());\n+        if (this.typeDescriptor != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d182f244c5d6a0ed2d26935f121de16ef20b86"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDY3MTYwOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/builder/FunctionCompletionItemBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjo1ODo1NlrOHtHhQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjo1ODo1NlrOHtHhQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3MTE3MQ==", "bodyText": "Shall we merge this with the wrapping if condition?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26703#discussion_r517071171", "createdAt": "2020-11-04T02:58:56Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/builder/FunctionCompletionItemBuilder.java", "diffHunk": "@@ -94,7 +96,12 @@ public static CompletionItem build(FunctionSymbol functionSymbol, LSContext cont\n     }\n \n     public static CompletionItem build(ObjectTypeSymbol typeDesc, InitializerBuildMode mode, LSContext ctx) {\n-        MethodSymbol initMethod = typeDesc.initMethod().isEmpty() ? null : typeDesc.initMethod().get();\n+        MethodSymbol initMethod = null;\n+        if (typeDesc.kind() == SymbolKind.CLASS) {\n+            ClassSymbol classSymbol = (ClassSymbol) typeDesc;\n+            initMethod = classSymbol.initMethod().isPresent() ? classSymbol.initMethod().get() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d182f244c5d6a0ed2d26935f121de16ef20b86"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDY5NzIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzoxNDoyOVrOHtHwNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjowMjozMVrOHtVMFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3NDk5Ng==", "bodyText": "Should this be a part of the SymbolFinder?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26703#discussion_r517074996", "createdAt": "2020-11-04T03:14:29Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -111,7 +115,14 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n             return Optional.empty();\n         }\n \n+        if (isTypeSymbol(symbolAtCursor) && !PositionUtil.withinBlock(position, symbolAtCursor.pos)) {\n+            ModuleID moduleID = new BallerinaModuleID(symbolAtCursor.pkgID);\n+            return Optional.of(new BallerinaTypeReferenceTypeSymbol(moduleID, symbolAtCursor.type,\n+                                                                    symbolAtCursor.getName().getValue()));\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d182f244c5d6a0ed2d26935f121de16ef20b86"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEzMzY5NQ==", "bodyText": "Can't really do that right? What's being checked here is the following case:\ntype Person record {|\n    string name;\n|};\n\nfunction bar() {\n    <cursor>Person p = { name: \"Pubudu\" };\n}\nIn this case, I want to return a TypeReferenceTypeSymbol instance, not a TypeDefinitionSymbol. To check which one to return, have to check the BSymbol's position against the user provided position.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26703#discussion_r517133695", "createdAt": "2020-11-04T07:08:25Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -111,7 +115,14 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n             return Optional.empty();\n         }\n \n+        if (isTypeSymbol(symbolAtCursor) && !PositionUtil.withinBlock(position, symbolAtCursor.pos)) {\n+            ModuleID moduleID = new BallerinaModuleID(symbolAtCursor.pkgID);\n+            return Optional.of(new BallerinaTypeReferenceTypeSymbol(moduleID, symbolAtCursor.type,\n+                                                                    symbolAtCursor.getName().getValue()));\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3NDk5Ng=="}, "originalCommit": {"oid": "77d182f244c5d6a0ed2d26935f121de16ef20b86"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI2MTU1Mw==", "bodyText": "In the AST we would know its a type-reference right?\nfor e.g.: in public void visit(BLangSimpleVariable varNode) {} method, we know what we need to return is a TypeReferenceTypeSymbol", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26703#discussion_r517261553", "createdAt": "2020-11-04T10:58:45Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -111,7 +115,14 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n             return Optional.empty();\n         }\n \n+        if (isTypeSymbol(symbolAtCursor) && !PositionUtil.withinBlock(position, symbolAtCursor.pos)) {\n+            ModuleID moduleID = new BallerinaModuleID(symbolAtCursor.pkgID);\n+            return Optional.of(new BallerinaTypeReferenceTypeSymbol(moduleID, symbolAtCursor.type,\n+                                                                    symbolAtCursor.getName().getValue()));\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3NDk5Ng=="}, "originalCommit": {"oid": "77d182f244c5d6a0ed2d26935f121de16ef20b86"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTEyNA==", "bodyText": "Yeah, but the thing is, we return a BSymbol from the SymbolFinder, not the node.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26703#discussion_r517295124", "createdAt": "2020-11-04T12:02:31Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -111,7 +115,14 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n             return Optional.empty();\n         }\n \n+        if (isTypeSymbol(symbolAtCursor) && !PositionUtil.withinBlock(position, symbolAtCursor.pos)) {\n+            ModuleID moduleID = new BallerinaModuleID(symbolAtCursor.pkgID);\n+            return Optional.of(new BallerinaTypeReferenceTypeSymbol(moduleID, symbolAtCursor.type,\n+                                                                    symbolAtCursor.getName().getValue()));\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3NDk5Ng=="}, "originalCommit": {"oid": "77d182f244c5d6a0ed2d26935f121de16ef20b86"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDk4Nzc0OnYy", "diffSide": "RIGHT", "path": "tests/ballerina-compiler-api-test/src/test/resources/test-src/class_symbols_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjoxNjo1NVrOHtKWqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjoxNjo1NVrOHtKWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzExNzYxMQ==", "bodyText": "Missing eof", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26703#discussion_r517117611", "createdAt": "2020-11-04T06:16:55Z", "author": {"login": "SupunS"}, "path": "tests/ballerina-compiler-api-test/src/test/resources/test-src/class_symbols_test.bal", "diffHunk": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+class Person1 {\n+    string fname;\n+    string lname;\n+\n+    public function init(string fname, string lname) {\n+        self.fname = fname;\n+        self.lname = lname;\n+    }\n+\n+    public function getFullName() returns string {\n+        return self.fname + \" \" + self.lname;\n+    }\n+}\n+\n+class Person2 {\n+    string fname = \"John\";\n+    string lname = \"Doe\";\n+\n+    public function getFullName() returns string {\n+        return self.fname + \" \" + self.lname;\n+    }\n+}\n+\n+function test() {\n+    Person1 p1 = new(\"Pubudu\", \"Fernando\");\n+    Person2 p2 = new;\n+    p2 = new Person2();\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc0f7ad7f69f247850f52045ff7161a81e26a86e"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4708, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}