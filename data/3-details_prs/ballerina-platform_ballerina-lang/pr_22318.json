{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NjEzNzcz", "number": 22318, "title": "Issue an error on stack and queue method calls on fixed-length lists", "bodyText": "Purpose\nPush/Pop functions do not natively support annotation or a way to declare that they will change the length of the list. This is not allowed in fixed-length arrays.\nFixes #18662\nApproach\npush,pop, shift and unshift names are hardcoded and checked against invocations on fixed-length arrays and tuples without rest parameters to identify the invalid calls on compile time.\nFor unions of array types. When all the arrays are sealed types error will be given at compile time. Ignored otherwise.\nSamples\nCode\nint[1] fixedLengthArray = [1];\nfixedLengthArray.push(4);\nOutput\nerror: .::filename.bal:<line>:<column>: cannot call 'push' on fixed length list(s) of type 'int[1]'\n\nRemarks\n\nSome other functions like setLength and removeAll also eligible for an compile-time check but spec does not specifically request a compile-time check.\nSpec issue # 345 may provide a way to implement this elegantly in the future.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-30T12:20:09Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318", "merged": true, "mergeCommit": {"oid": "8b26828e30589512d938031ecc115c03a1a57800"}, "closed": true, "closedAt": "2020-04-21T05:20:06Z", "author": {"login": "KRVPerera"}, "timelineItems": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcStnJEABqjMxNzgzNjY2MTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZsqYNAFqTM5Njk5MjY0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee83cb1104512202aa3ad983b00f893a88eb3b47", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee83cb1104512202aa3ad983b00f893a88eb3b47", "committedDate": "2020-03-30T11:40:42Z", "message": "Issue error on push/pop call on fixed-length lists\n\nPush/Pop functions does not natively support annotation or a way to\ndeclare that they will change the length of the list. This is not\nallowed in fixed-length arrays.\n\n`push` and `pop` names are hardcoded and checked against invocations on\nfixed-length arrays and tuples without rest parameters to identify the\ninvalid calls on compile time.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "6c9e90c22600a6b393134a38fd0728dc7d8d3508", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6c9e90c22600a6b393134a38fd0728dc7d8d3508", "committedDate": "2020-03-30T12:24:57Z", "message": "Issue error on push/pop call on fixed-length lists\n\nPush/Pop functions do not natively support annotation or a way to\ndeclare that they will change the length of the list. This is not\nallowed in fixed-length arrays.\n\n`push` and `pop` names are hardcoded and checked against invocations on\nfixed-length arrays and tuples without rest parameters to identify the\ninvalid calls on compile time.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4775d8c8b5e98b4c159de450b9c694db9d69c002", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4775d8c8b5e98b4c159de450b9c694db9d69c002", "committedDate": "2020-03-30T20:03:22Z", "message": "Add shift and unshift queue operations\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5", "committedDate": "2020-03-30T20:05:53Z", "message": "Add shift/unshift for modifier method list\n\nNow these method will give error when called on fixed-length lists\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDMwMzg2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-385030386", "createdAt": "2020-03-31T19:15:54Z", "commit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNTo1NFrOF-keIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNToxNzoxNFrOF-xHgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzU3MQ==", "bodyText": "Unnecessary change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401153571", "createdAt": "2020-03-31T19:15:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -124,7 +124,6 @@ public static Types getInstance(CompilerContext context) {\n         if (types == null) {\n             types = new Types(context);\n         }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzgwMw==", "bodyText": "Why are removing these? Can we also add new lines between the newly added error messages?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401153803", "createdAt": "2020-03-31T19:16:23Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1225,12 +1225,13 @@ error.unsupported.primitive.type.reason=\\\n \n error.method.signature.not.match=\\\n   '{ballerina/java}'METHOD_SIGNATURE_DOES_NOT_MATCH ''{0}''\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NDM3NQ==", "bodyText": "Can we call this something like initModifierFunctions() instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401354375", "createdAt": "2020-04-01T04:50:11Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -229,6 +231,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        init();\n+    }\n+\n+    private void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NTUwNw==", "bodyText": "Can we add tests for inferred size too?\n   int[*] x = [1, 2, 3, 4];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401355507", "createdAt": "2020-04-01T04:54:49Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,45 @@\n+function testPushOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NTc0Nw==", "bodyText": "Unused? Can we also make this private?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401355747", "createdAt": "2020-04-01T04:55:54Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Push.java", "diffHunk": "@@ -43,6 +43,8 @@\n )\n public class Push {\n \n+    public static final String FUNCTION_SIGNATURE = \"push()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NTgwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String FUNCTION_SIGNATURE = \"pop()\";\n          \n          \n            \n                private static final String FUNCTION_SIGNATURE = \"pop()\";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401355807", "createdAt": "2020-04-01T04:56:11Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Pop.java", "diffHunk": "@@ -40,8 +40,10 @@\n )\n public class Pop {\n \n+    public static final String FUNCTION_SIGNATURE = \"pop()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NzkxMw==", "bodyText": "What about unions of arrays, tuples, and combinations of arrays and tuples?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401357913", "createdAt": "2020-04-01T05:05:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1769,6 +1779,26 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        if (varRefType.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1Nzk5NQ==", "bodyText": "I think we'll have to use one error and say\n  cannot call ''{0}'' on fixed length lists\n\nto handle unions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401357995", "createdAt": "2020-04-01T05:06:06Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1225,12 +1225,13 @@ error.unsupported.primitive.type.reason=\\\n \n error.method.signature.not.match=\\\n   '{ballerina/java}'METHOD_SIGNATURE_DOES_NOT_MATCH ''{0}''\n-\n error.invalid.deprecation.documentation=\\\n   invalid documentation: ''Deprecated'' documentation is only allowed on constructs annotated as ''@deprecated''\n-\n error.deprecation.documentation.should.available=\\\n   constructs annotated as ''@deprecated'' must have ''Deprecated'' documentation\n-\n error.invalid.attribute.reference=\\\n   invalid attribute reference\n+error.illegal.function.array.size=\\\n+  cannot call ''{0}'' on fixed length array ''{1}''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM2MDc2OA==", "bodyText": "Or have three errors\n  cannot call ''{0}'' on fixed length arrays\n\n  cannot call ''{0}'' on fixed length tuples\n\n  cannot call ''{0}'' on fixed length lists // for unions of arrays + tuples", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401360768", "createdAt": "2020-04-01T05:17:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1225,12 +1225,13 @@ error.unsupported.primitive.type.reason=\\\n \n error.method.signature.not.match=\\\n   '{ballerina/java}'METHOD_SIGNATURE_DOES_NOT_MATCH ''{0}''\n-\n error.invalid.deprecation.documentation=\\\n   invalid documentation: ''Deprecated'' documentation is only allowed on constructs annotated as ''@deprecated''\n-\n error.deprecation.documentation.should.available=\\\n   constructs annotated as ''@deprecated'' must have ''Deprecated'' documentation\n-\n error.invalid.attribute.reference=\\\n   invalid attribute reference\n+error.illegal.function.array.size=\\\n+  cannot call ''{0}'' on fixed length array ''{1}''", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1Nzk5NQ=="}, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08e96a92ed0afbb966eb58f2b3a27763ed37a6bd", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/08e96a92ed0afbb966eb58f2b3a27763ed37a6bd", "committedDate": "2020-04-01T10:28:04Z", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "f0da7f798e436d99f824ecedf9d992d8765d0749", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0da7f798e436d99f824ecedf9d992d8765d0749", "committedDate": "2020-04-01T16:23:35Z", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0da7f798e436d99f824ecedf9d992d8765d0749", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0da7f798e436d99f824ecedf9d992d8765d0749", "committedDate": "2020-04-01T16:23:35Z", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "8f9752b7f5b5bb6d3636100378d6752da55611a5", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f9752b7f5b5bb6d3636100378d6752da55611a5", "committedDate": "2020-04-01T18:10:53Z", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f9752b7f5b5bb6d3636100378d6752da55611a5", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f9752b7f5b5bb6d3636100378d6752da55611a5", "committedDate": "2020-04-01T18:10:53Z", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "61e62b4399ba0f2bc1c54ea191e96e2ce58ed1ab", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61e62b4399ba0f2bc1c54ea191e96e2ce58ed1ab", "committedDate": "2020-04-01T19:04:18Z", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDUyMzg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-386452387", "createdAt": "2020-04-02T13:57:47Z", "commit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo1Nzo0N1rOF_shKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowMzowMlrOF_swfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzMzk5Mg==", "bodyText": "Can we call these function something like isFixedLengthList?\nWe don't use the term sealed anymore.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402333992", "createdAt": "2020-04-02T13:57:47Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNTE5Mg==", "bodyText": "We don't use streams due to potential performance impacts, we can use an ordinary foreach loop maybe.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402335192", "createdAt": "2020-04-02T13:59:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return isPureSealed((BArrayType) type);\n+            case TypeTags.TUPLE:\n+                return isPureSealed((BTupleType) type);\n+            case TypeTags.UNION:\n+                return isPureSealed((BUnionType) type);\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPureSealed(BArrayType arrayType) {\n+        return (arrayType.state == BArrayState.CLOSED_SEALED);\n+    }\n+\n+    private boolean isPureSealed(BTupleType tupleType) {\n+        return (tupleType.restType == null);\n+    }\n+\n+    private boolean isPureSealed(BUnionType unionType) {\n+        return unionType.getMemberTypes().stream().allMatch(type -> isPureSealed(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNTc2NA==", "bodyText": "We don't need separate functions for these right? These are just one line single condition checks.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402335764", "createdAt": "2020-04-02T13:59:57Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return isPureSealed((BArrayType) type);\n+            case TypeTags.TUPLE:\n+                return isPureSealed((BTupleType) type);\n+            case TypeTags.UNION:\n+                return isPureSealed((BUnionType) type);\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPureSealed(BArrayType arrayType) {\n+        return (arrayType.state == BArrayState.CLOSED_SEALED);\n+    }\n+\n+    private boolean isPureSealed(BTupleType tupleType) {\n+        return (tupleType.restType == null);\n+    }\n+\n+    private boolean isPureSealed(BUnionType unionType) {\n+        return unionType.getMemberTypes().stream().allMatch(type -> isPureSealed(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNjgyMg==", "bodyText": "Shall we extract iExpr.name.getValue() out to a variable? We seem to be reusing it at L1747 (at times).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402336822", "createdAt": "2020-04-02T14:01:25Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return isPureSealed((BArrayType) type);\n+            case TypeTags.TUPLE:\n+                return isPureSealed((BTupleType) type);\n+            case TypeTags.UNION:\n+                return isPureSealed((BUnionType) type);\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPureSealed(BArrayType arrayType) {\n+        return (arrayType.state == BArrayState.CLOSED_SEALED);\n+    }\n+\n+    private boolean isPureSealed(BTupleType tupleType) {\n+        return (tupleType.restType == null);\n+    }\n+\n+    private boolean isPureSealed(BUnionType unionType) {\n+        return unionType.getMemberTypes().stream().allMatch(type -> isPureSealed(type));\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        if (!modifierFunctions.contains(iExpr.name.getValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNzcyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [int, int][1] | [float, float][1] fixedLengthArray = <[float, float][1]> [[1.0, 2.3]];\n          \n          \n            \n                [int, int][1]|[float, float][1] fixedLengthArray = <[float, float][1]> [[1.0, 2.3]];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402337723", "createdAt": "2020-04-02T14:02:43Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,70 @@\n+function testPushOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    fixedLengthArray.push(4);\n+}\n+\n+function testPushOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    fixedLengthTuple.push(4);\n+}\n+\n+function testPopOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    int popped = fixedLengthArray.pop();\n+}\n+\n+function testPopOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    int popped = fixedLengthTuple.pop();\n+}\n+\n+function testShift() returns [int[], int] {\n+    int[] s = [1, 2, 3, 4, 5];\n+    var e = s.shift();\n+    return [s, e];\n+}\n+\n+function testShiftOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    int x = fixedLengthArray.shift();\n+}\n+\n+function testUnShiftOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    fixedLengthArray.unshift(5);\n+}\n+\n+function testShiftOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    int popped = fixedLengthTuple.shift();\n+}\n+\n+function testUnShiftOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    fixedLengthTuple.unshift();\n+}\n+\n+// inferred fixed length arrays\n+function testPushPopShiftUnshitOnInferredFixedLengthArray() {\n+    int[*] fixedLengthArray = [1, 2];\n+    fixedLengthArray.push(4);\n+    int x = fixedLengthArray.pop();\n+    x = fixedLengthArray.shift();\n+    fixedLengthArray.unshift();\n+}\n+\n+function testPushOnFixedLengthArrayUnions() {\n+    int[1]|float[1] fixedLengthArray = <int[1]> [1];\n+    fixedLengthArray.push(4);\n+}\n+\n+function testPushOnFixedLengthTupleUnion() {\n+    [int, int][1] | [float, float][1] fixedLengthArray = <[float, float][1]> [[1.0, 2.3]];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNzkxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [int, int][1] | [float, float][] fixedLengthArray = <[float, float][1]> [[1, 2]];\n          \n          \n            \n                [int, int][1]|[float, float][] fixedLengthArray = <[float, float][1]> [[1, 2]];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402337916", "createdAt": "2020-04-02T14:03:02Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,70 @@\n+function testPushOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    fixedLengthArray.push(4);\n+}\n+\n+function testPushOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    fixedLengthTuple.push(4);\n+}\n+\n+function testPopOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    int popped = fixedLengthArray.pop();\n+}\n+\n+function testPopOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    int popped = fixedLengthTuple.pop();\n+}\n+\n+function testShift() returns [int[], int] {\n+    int[] s = [1, 2, 3, 4, 5];\n+    var e = s.shift();\n+    return [s, e];\n+}\n+\n+function testShiftOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    int x = fixedLengthArray.shift();\n+}\n+\n+function testUnShiftOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    fixedLengthArray.unshift(5);\n+}\n+\n+function testShiftOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    int popped = fixedLengthTuple.shift();\n+}\n+\n+function testUnShiftOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    fixedLengthTuple.unshift();\n+}\n+\n+// inferred fixed length arrays\n+function testPushPopShiftUnshitOnInferredFixedLengthArray() {\n+    int[*] fixedLengthArray = [1, 2];\n+    fixedLengthArray.push(4);\n+    int x = fixedLengthArray.pop();\n+    x = fixedLengthArray.shift();\n+    fixedLengthArray.unshift();\n+}\n+\n+function testPushOnFixedLengthArrayUnions() {\n+    int[1]|float[1] fixedLengthArray = <int[1]> [1];\n+    fixedLengthArray.push(4);\n+}\n+\n+function testPushOnFixedLengthTupleUnion() {\n+    [int, int][1] | [float, float][1] fixedLengthArray = <[float, float][1]> [[1.0, 2.3]];\n+    fixedLengthArray.push(<[float, float]>[1, 2]);\n+}\n+\n+// run time panic no compile time error\n+function testPushOnFixedLengthAndDynamicTupleUnion() {\n+    [int, int][1] | [float, float][] fixedLengthArray = <[float, float][1]> [[1, 2]];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTU5MDc0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-386959074", "createdAt": "2020-04-03T06:12:32Z", "commit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjoxMjozMlrOGAGT2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo0MDowOVrOGAG4Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1NjU3MA==", "bodyText": "When we reach this point the state of inferred array types is always set as CLOSED_SEALED right? Or we'll have to check\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return (((BArrayType) type).state == BArrayState.CLOSED_SEALED);\n          \n          \n            \n                            return (((BArrayType) type).state != BArrayState.UNSEALED);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402756570", "createdAt": "2020-04-03T06:12:32Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,40 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state == BArrayState.CLOSED_SEALED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA==", "bodyText": "Have a small doubt regarding shift() on a tuple, created a spec issue - ballerina-platform/ballerina-spec#474.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402765684", "createdAt": "2020-04-03T06:39:35Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +229,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {\n+        this.modifierFunctions.add(\"push\");\n+        this.modifierFunctions.add(\"pop\");\n+        this.modifierFunctions.add(\"shift\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTg2Ng==", "bodyText": "Shall we add the licence header for the bal file too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402765866", "createdAt": "2020-04-03T06:40:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,70 @@\n+function testPushOnFixedLengthArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzA3MDA4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-387307008", "createdAt": "2020-04-03T14:27:36Z", "commit": {"oid": "714edb48df99b7d411f8100bd5df60c0b2e2b05b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyNzozN1rOGAX5eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyNzozN1rOGAX5eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NDcyOQ==", "bodyText": "We could initialize this in a static block.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403044729", "createdAt": "2020-04-03T14:27:37Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +233,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714edb48df99b7d411f8100bd5df60c0b2e2b05b"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzA3NDAx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-387307401", "createdAt": "2020-04-03T14:28:02Z", "commit": {"oid": "714edb48df99b7d411f8100bd5df60c0b2e2b05b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyODowMlrOGAX6rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyODowMlrOGAX6rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NTAzNg==", "bodyText": "This could be a static variable", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403045036", "createdAt": "2020-04-03T14:28:02Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -194,6 +198,8 @@\n     private BLangAnonymousModelHelper anonymousModelHelper;\n     private SemanticAnalyzer semanticAnalyzer;\n     private boolean nonErrorLoggingCheck = false;\n+    private Set<String> modifierFunctions = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714edb48df99b7d411f8100bd5df60c0b2e2b05b"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3bad54163f1193c6fa4c351865e53ec679575065", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bad54163f1193c6fa4c351865e53ec679575065", "committedDate": "2020-04-03T16:06:56Z", "message": "Refactor TypeChecker modifier functions set\n\nFunction set will be changed to static and initialized in a static block\nin the TypeChecker.java\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "d9d1222ebd2f15e8eb8cc80333d36825d92b488a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9d1222ebd2f15e8eb8cc80333d36825d92b488a", "committedDate": "2020-04-03T16:41:04Z", "message": "Refactor TypeChecker modifier functions set\n\nFunction set will be changed to static and initialized in a static block\nin the TypeChecker.java\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c72846a97e72888fd6ccfb2062bd2ad20002ecdd", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c72846a97e72888fd6ccfb2062bd2ad20002ecdd", "committedDate": "2020-04-03T16:46:14Z", "message": "Resolve conflicts of compiler.properties\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "2d11d6d4aed88ee4dcc0d822a168ccd28dee6c11", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d11d6d4aed88ee4dcc0d822a168ccd28dee6c11", "committedDate": "2020-04-03T20:41:55Z", "message": "Resolve conflicts of compiler.properties\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d11d6d4aed88ee4dcc0d822a168ccd28dee6c11", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d11d6d4aed88ee4dcc0d822a168ccd28dee6c11", "committedDate": "2020-04-03T20:41:55Z", "message": "Resolve conflicts of compiler.properties\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "d9d1222ebd2f15e8eb8cc80333d36825d92b488a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9d1222ebd2f15e8eb8cc80333d36825d92b488a", "committedDate": "2020-04-03T16:41:04Z", "message": "Refactor TypeChecker modifier functions set\n\nFunction set will be changed to static and initialized in a static block\nin the TypeChecker.java\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTM2NTIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-389136521", "createdAt": "2020-04-07T13:51:29Z", "commit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDY0NTY0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-393464564", "createdAt": "2020-04-15T05:27:20Z", "commit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyNzoyMFrOGFqSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjowMjozN1rOGFq7xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODgyMg==", "bodyText": "Shall we follow a FUNCTION_NAME_XXX format instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r408588822", "createdAt": "2020-04-15T05:27:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -176,9 +176,14 @@\n  */\n public class TypeChecker extends BLangNodeVisitor {\n \n-    private static final CompilerContext.Key<TypeChecker> TYPE_CHECKER_KEY =\n-            new CompilerContext.Key<>();\n+    private static final CompilerContext.Key<TypeChecker> TYPE_CHECKER_KEY = new CompilerContext.Key<>();\n+    private static Set<String> modifierFunctions = new HashSet<>();\n+\n     private static final String TABLE_TNAME = \"table\";\n+    private static final String FUNCTION_PUSH_NAME = \"push\";\n+    private static final String FUNCTION_POP_NAME = \"pop\";\n+    private static final String FUNCTION_SHIFT_NAME = \"shift\";\n+    private static final String FUNCTION_UNSHIFT_NAME = \"unshift\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4OTU2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              cannot call ''{0}'' on tuple of type ''{1}'': change inherent shape\n          \n          \n            \n              cannot call ''{0}'' on tuple(s) of type ''{1}''; cannot violate inherent type", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r408589565", "createdAt": "2020-04-15T05:29:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1237,3 +1237,9 @@ error.deprecated.parameters.documentation.not.allowed=\\\n \n error.invalid.attribute.reference=\\\n   invalid attribute reference\n+\n+error.illegal.function.change.list.size=\\\n+  cannot call ''{0}'' on fixed length list(s) of type ''{1}''\n+\n+error.illegal.function.change.tuple.shape=\\\n+  cannot call ''{0}'' on tuple of type ''{1}'': change inherent shape", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTQ5Mg==", "bodyText": "What about unions of tuples?\nThis should be an error for tuple unions which will always fail too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r408599492", "createdAt": "2020-04-15T06:02:37Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1695,7 +1707,60 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n         }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.TUPLE) && hasDifferentTypeThanRest((BTupleType) varRefType) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e949bd21585a6644fa3a3c3365fb7960a54b3e9", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e949bd21585a6644fa3a3c3365fb7960a54b3e9", "committedDate": "2020-04-16T09:56:04Z", "message": "Add error for changing shape of fixed tuple unions"}, "afterCommit": {"oid": "2fe86c1ae95def6e356be4f14ba27b2d3a8301f1", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2fe86c1ae95def6e356be4f14ba27b2d3a8301f1", "committedDate": "2020-04-16T09:59:56Z", "message": "Add error for changing shape of fixed tuple unions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6be927e5442053c9b4945878bf1982ad415fb577", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6be927e5442053c9b4945878bf1982ad415fb577", "committedDate": "2020-04-16T12:12:59Z", "message": "Fix code style in TypeChecker.java"}, "afterCommit": {"oid": "86be9102cd78bca1e8bead51e0395c9b9b3239bc", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86be9102cd78bca1e8bead51e0395c9b9b3239bc", "committedDate": "2020-04-16T18:57:50Z", "message": "Fix code style in TypeChecker.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86be9102cd78bca1e8bead51e0395c9b9b3239bc", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86be9102cd78bca1e8bead51e0395c9b9b3239bc", "committedDate": "2020-04-16T18:57:50Z", "message": "Fix code style in TypeChecker.java"}, "afterCommit": {"oid": "0433251a82a49da2ebef19951554b1b0b6f536c0", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0433251a82a49da2ebef19951554b1b0b6f536c0", "committedDate": "2020-04-17T07:02:46Z", "message": "Add error for changing shape of fixed tuple unions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0433251a82a49da2ebef19951554b1b0b6f536c0", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0433251a82a49da2ebef19951554b1b0b6f536c0", "committedDate": "2020-04-17T07:02:46Z", "message": "Add error for changing shape of fixed tuple unions"}, "afterCommit": {"oid": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e95bc3fbf88647bfc777e30df44d9b8b64abca2", "committedDate": "2020-04-17T19:53:18Z", "message": "Add error for changing shape of fixed tuple unions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgzODc4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-395883878", "createdAt": "2020-04-18T05:35:28Z", "commit": {"oid": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTozNToyOFrOGHngEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTo1NTo0OFrOGHn-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0MDQwMQ==", "bodyText": "We can return here right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r410640401", "createdAt": "2020-04-18T05:35:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1710,7 +1722,80 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0ODIxMg==", "bodyText": "Shall we extract this tuple check logic to a function like isShiftOnIncompatibleTuples and handle both individual tuples and unions?\nThen we can do\nif (isShiftOnIncompatibleTuples(varRefType, invocationName)) {\n      dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n                 varRefType);\n      resultType = symTable.semanticError;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r410648212", "createdAt": "2020-04-18T05:55:33Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1710,7 +1722,80 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.TUPLE) && hasDifferentTypeThanRest((BTupleType) varRefType) &&\n+                (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n+                       varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.UNION) && (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0)) {\n+            BUnionType unionVarRef = (BUnionType) varRefType;\n+            boolean allTuplesHasFixedShape = true;\n+            for (BType member : unionVarRef.getMemberTypes()) {\n+                if (member.tag != TypeTags.TUPLE) {\n+                    break;\n+                }\n+                if (!hasDifferentTypeThanRest((BTupleType) varRefType)) {\n+                    allTuplesHasFixedShape = false;\n+                    break;\n+                }\n+            }\n+            if (allTuplesHasFixedShape) {\n+                dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n+                           varRefType);\n+                resultType = symTable.semanticError;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0ODI4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              cannot call ''{0}'' on tuple(s) of type ''{1}''; cannot violate inherent type\n          \n          \n            \n              cannot call ''{0}'' on tuple(s) of type ''{1}'': cannot violate inherent type", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r410648280", "createdAt": "2020-04-18T05:55:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1243,3 +1243,9 @@ error.deprecated.parameters.documentation.not.allowed=\\\n \n error.invalid.attribute.reference=\\\n   invalid attribute reference\n+\n+error.illegal.function.change.list.size=\\\n+  cannot call ''{0}'' on fixed length list(s) of type ''{1}''\n+\n+error.illegal.function.change.tuple.shape=\\\n+  cannot call ''{0}'' on tuple(s) of type ''{1}''; cannot violate inherent type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTgwNzcw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-396180770", "createdAt": "2020-04-20T06:50:07Z", "commit": {"oid": "c2cb9ab44b3c92610eb1049865be003fec253a28"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo1MDowN1rOGIFpcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo1MDowN1rOGIFpcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzNDMyMQ==", "bodyText": "may change the error message in the future.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r411134321", "createdAt": "2020-04-20T06:50:07Z", "author": {"login": "KRVPerera"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "diffHunk": "@@ -513,6 +513,25 @@ function testInvalidPushOnUnionOfSameBasicType() {\n     assertValueEquality(\"incompatible types: expected 'int', found 'string'\", err.detail()?.message);\n }\n \n+function testShiftOperation() {\n+    testShiftOnTupleWithoutValuesForRestParameter();\n+}\n+\n+function testShiftOnTupleWithoutValuesForRestParameter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cb9ab44b3c92610eb1049865be003fec253a28"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e9f08590b770d14cff0845da915b13867bdfa01", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e9f08590b770d14cff0845da915b13867bdfa01", "committedDate": "2020-04-20T10:11:30Z", "message": "Issue error on push/pop call on fixed-length lists\n\nPush/Pop functions do not natively support annotation or a way to\ndeclare that they will change the length of the list. This is not\nallowed in fixed-length arrays.\n\n`push` and `pop` names are hardcoded and checked against invocations on\nfixed-length arrays and tuples without rest parameters to identify the\ninvalid calls on compile time.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef87f0db2c0a80a4317017001306abb3f8c6c95e", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ef87f0db2c0a80a4317017001306abb3f8c6c95e", "committedDate": "2020-04-20T10:11:30Z", "message": "Add shift/unshift for modifier method list\n\nNow these method will give error when called on fixed-length lists\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10706424670875f22b3905952eb4bfb4dedcfd78", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10706424670875f22b3905952eb4bfb4dedcfd78", "committedDate": "2020-04-20T10:11:30Z", "message": "Revert unnecessary changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d0fd607d645e99eb1fa76411f10a5097d74a2e3", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d0fd607d645e99eb1fa76411f10a5097d74a2e3", "committedDate": "2020-04-20T10:11:30Z", "message": "Make public function signature field private\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5668263f5a4a00ccfc7338cd80d38b05c14fde62", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5668263f5a4a00ccfc7338cd80d38b05c14fde62", "committedDate": "2020-04-20T10:11:30Z", "message": "Change error \"ILLEGAL_FUNCTION_CHANGE_LIST_SIZE\"\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3da3adf88714298dba98ec4bdcdf9c66b7d9c423", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3da3adf88714298dba98ec4bdcdf9c66b7d9c423", "committedDate": "2020-04-20T10:11:30Z", "message": "Add inferred fixed-length array tests\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2989572a46d30933c85b80312519a6f40f421621", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2989572a46d30933c85b80312519a6f40f421621", "committedDate": "2020-04-20T10:11:30Z", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb08e775dc0bbd858aad23020b2f37c5a2914d3", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fb08e775dc0bbd858aad23020b2f37c5a2914d3", "committedDate": "2020-04-20T10:11:30Z", "message": "Fix code style\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6dc5e5fbc026ed11a1a970bc2bd55273833a6fb", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6dc5e5fbc026ed11a1a970bc2bd55273833a6fb", "committedDate": "2020-04-20T10:11:30Z", "message": "Update arraylib_test_negative.bal add space around\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ce1c663c09e85bf2f275f222cfc9d9251f56bc6", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ce1c663c09e85bf2f275f222cfc9d9251f56bc6", "committedDate": "2020-04-20T10:11:30Z", "message": "Update arraylib_test_negative.bal add space around |\r\n\r\n[ci skip]\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "579d3f7587232152ba237072848e21fd3a2e9caf", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/579d3f7587232152ba237072848e21fd3a2e9caf", "committedDate": "2020-04-20T10:11:31Z", "message": "Add code review suggestions\n\nReplace java stream with for loops. Rename isPureSealedType function to\nisFixedLengthList function.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04c966c4ed266a25c2da3b5fa9702ddfb2dc48ab", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04c966c4ed266a25c2da3b5fa9702ddfb2dc48ab", "committedDate": "2020-04-20T10:11:31Z", "message": "Update compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\r\n\r\nChange check for CLOSED_SEALED to (!= UNSEALED)\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1aeea819bf20e7eb208ef9f4fa92737f9a2f95b", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1aeea819bf20e7eb208ef9f4fa92737f9a2f95b", "committedDate": "2020-04-20T10:11:31Z", "message": "Add license header for arraylib_test_negative.bal\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04c40dae3e554d44ecb809363e6e46f1d2db0d85", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04c40dae3e554d44ecb809363e6e46f1d2db0d85", "committedDate": "2020-04-20T10:11:31Z", "message": "Fix test case line numbers after license header\n[ci skip]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab4ed601a92a823def5321c790e61e3a07784e93", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ab4ed601a92a823def5321c790e61e3a07784e93", "committedDate": "2020-04-20T10:11:31Z", "message": "Add compiler time checks for `shift` call on tuple\n\nCheck if the shift operation change the inherent shape of the tuple. If\nthe shape is changed it will definitely give a panic at run time. Some\nof these cases we can capture at compile time.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c64c4a0385aff8354ae5fb1e9bc3b6851bdda3cf", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c64c4a0385aff8354ae5fb1e9bc3b6851bdda3cf", "committedDate": "2020-04-20T10:11:31Z", "message": "Refactor TypeChecker modifier functions set\n\nFunction set will be changed to static and initialized in a static block\nin the TypeChecker.java\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "134e3668df4cc74a3d89a4f68b1b2cc70732e607", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/134e3668df4cc74a3d89a4f68b1b2cc70732e607", "committedDate": "2020-04-20T10:11:31Z", "message": "Remove unused error message\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e80ccc1c265e5de3a0c7c3bd8bbdfb94ac821c7", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e80ccc1c265e5de3a0c7c3bd8bbdfb94ac821c7", "committedDate": "2020-04-20T10:11:31Z", "message": "Change static constants format -> FUNCTION_NAME_*"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "620f9397e61a93cbe5727a40ea7e507e9ce54c45", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/620f9397e61a93cbe5727a40ea7e507e9ce54c45", "committedDate": "2020-04-20T10:11:31Z", "message": "Change message : illegal.function.change.tuple.shape\r\n\r\n\"cannot violate inherent type\"\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e20e73d75bd9f5b596b4c88bf0ba999d66d3060a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e20e73d75bd9f5b596b4c88bf0ba999d66d3060a", "committedDate": "2020-04-20T10:11:31Z", "message": "Add error for changing shape of fixed tuple unions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58fa0c5dc5f71d0ea7b2834ce52000faf4489f2b", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58fa0c5dc5f71d0ea7b2834ce52000faf4489f2b", "committedDate": "2020-04-20T10:11:31Z", "message": "Change error message\r\n\r\nChange cannot violate inherent type error message\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4da63e51e58ee96e914b5dc4cff0289d196f8f0f", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4da63e51e58ee96e914b5dc4cff0289d196f8f0f", "committedDate": "2020-04-20T10:11:31Z", "message": "Fix code quality\n\nAdded return statements in `checkIllegalStorageSizeChangeMethodCall`\nwhen the logic have decided that the expression has semantic errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ade9d24a2368c9d2e49c8e4ac481b428f278e70", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ade9d24a2368c9d2e49c8e4ac481b428f278e70", "committedDate": "2020-04-20T10:11:31Z", "message": "Refactor checkIllegalStorageSizeChangeMethodCall\n\nExtract a function to check 'shift' call on tuples. Some tuples has a\nfixed shape. It is illegal call shift which will change their shape."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3effed939914d320cbde65fa49bee7b554307dd1", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3effed939914d320cbde65fa49bee7b554307dd1", "committedDate": "2020-04-20T10:11:31Z", "message": "Fix test cases according to new error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da19a8303c441c14d3a3bcbfdf30a169b75ae649", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da19a8303c441c14d3a3bcbfdf30a169b75ae649", "committedDate": "2020-04-20T10:11:31Z", "message": "Fix bad logic in isShiftOnIncompatibleTuples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e11389a44fff652021235ea9f10b38c64ba5ed71", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e11389a44fff652021235ea9f10b38c64ba5ed71", "committedDate": "2020-04-20T10:11:31Z", "message": "Add test cases for `shift` call on unions of lists"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2cb9ab44b3c92610eb1049865be003fec253a28", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c2cb9ab44b3c92610eb1049865be003fec253a28", "committedDate": "2020-04-20T06:38:56Z", "message": "Add test cases for `shift` call on unions of lists"}, "afterCommit": {"oid": "e11389a44fff652021235ea9f10b38c64ba5ed71", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e11389a44fff652021235ea9f10b38c64ba5ed71", "committedDate": "2020-04-20T10:11:31Z", "message": "Add test cases for `shift` call on unions of lists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NjA4NjU4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-396608658", "createdAt": "2020-04-20T16:18:15Z", "commit": {"oid": "e11389a44fff652021235ea9f10b38c64ba5ed71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxODoxNVrOGIcpiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxODoxNVrOGIcpiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTE3OQ==", "bodyText": "When we are fixing #22771, I think we should refactor checkIllegalStorageSizeChangeMethodCall and this method a bit.\nAt L1873 if the invocationName is shift we can call something like\nprivate boolean isShiftValidOnLists(BType varRefType) {\n     int tag = varRefType.tag;\n\n     if (tag == TypeTags.ARRAY) {\n         return !isFixedLengthList(varRefType);\n     }\n\n     if (tag == TypeTags.TUPLE) {\n         return !hasDifferentTypeThanRest((BTupleType) member);\n     }\n\n     // Union type here.\n    BUnionType unionVarRef = (BUnionType) varRefType;\n    for (BType member : unionVarRef.getMemberTypes()) {\n        if (!isShiftValidOnLists(member)) {\n            return false;\n        }\n    }\n    return true;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r411511179", "createdAt": "2020-04-20T16:18:15Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1821,7 +1833,86 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        if (isShiftOnIncompatibleTuples(varRefType, invocationName)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n+                       varRefType);\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private boolean isShiftOnIncompatibleTuples(BType varRefType, String invocationName) {\n+        if ((varRefType.tag == TypeTags.TUPLE) && (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0) &&\n+                hasDifferentTypeThanRest((BTupleType) varRefType)) {\n+            return true;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.UNION) && (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0)) {\n+            BUnionType unionVarRef = (BUnionType) varRefType;\n+            boolean allMemberAreFixedShapeTuples = true;\n+            for (BType member : unionVarRef.getMemberTypes()) {\n+                if (member.tag != TypeTags.TUPLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11389a44fff652021235ea9f10b38c64ba5ed71"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTkyNjQ5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#pullrequestreview-396992649", "createdAt": "2020-04-21T05:16:18Z", "commit": {"oid": "e11389a44fff652021235ea9f10b38c64ba5ed71"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4094, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}