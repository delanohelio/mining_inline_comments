{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NjMxOTkw", "number": 21663, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1MDo0NlrODnhZGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NDoxMVrODnhemA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY4MTUyOnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1MDo0NlrOF1kc3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzowNjo1OVrOF1nfQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjA2Mg==", "bodyText": "The HTTP method should be extraced from the request. This is simply a remote function to forward a request", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21663#discussion_r391716062", "createdAt": "2020-03-12T15:50:46Z", "author": {"login": "nadundesilva"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -157,7 +214,14 @@ public type Client client object {\n     # + request - An HTTP inbound request message\n     # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n-        return self.httpClient->forward(path, request);\n+        Response|ClientError response = self.httpClient->forward(path, request);\n+        if (response is Response) {\n+            error? x = addObservabilityInformation(path, HTTP_FORWARD, response.statusCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794932f97bd9d94bec9eeb45f3aaeb7300c019c7"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2NTgyNA==", "bodyText": "Fixed with 527d355", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21663#discussion_r391765824", "createdAt": "2020-03-12T17:06:59Z", "author": {"login": "madushajg"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -157,7 +214,14 @@ public type Client client object {\n     # + request - An HTTP inbound request message\n     # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n-        return self.httpClient->forward(path, request);\n+        Response|ClientError response = self.httpClient->forward(path, request);\n+        if (response is Response) {\n+            error? x = addObservabilityInformation(path, HTTP_FORWARD, response.statusCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjA2Mg=="}, "originalCommit": {"oid": "794932f97bd9d94bec9eeb45f3aaeb7300c019c7"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY5NTYwOnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NDoxMVrOF1kmDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzowNzoxN1rOF1nf8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxODQxNA==", "bodyText": "We can add the path and method from the push promise can't we ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21663#discussion_r391718414", "createdAt": "2020-03-12T15:54:11Z", "author": {"login": "nadundesilva"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -204,7 +275,14 @@ public type Client client object {\n     # + promise - The related `PushPromise`\n     # + return - A promised HTTP `Response` message, or an error if the invocation fails\n     public remote function getPromisedResponse(PushPromise promise) returns Response|ClientError {\n-        return self.httpClient->getPromisedResponse(promise);\n+        Response|ClientError response = self.httpClient->getPromisedResponse(promise);\n+        if (response is Response) {\n+            error? x = observe:addTagToSpan(HTTP_STATUS_CODE_GROUP, getStatusCodeRange(response.statusCode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794932f97bd9d94bec9eeb45f3aaeb7300c019c7"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2NjAwMQ==", "bodyText": "Fixed with 527d355", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21663#discussion_r391766001", "createdAt": "2020-03-12T17:07:17Z", "author": {"login": "madushajg"}, "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -204,7 +275,14 @@ public type Client client object {\n     # + promise - The related `PushPromise`\n     # + return - A promised HTTP `Response` message, or an error if the invocation fails\n     public remote function getPromisedResponse(PushPromise promise) returns Response|ClientError {\n-        return self.httpClient->getPromisedResponse(promise);\n+        Response|ClientError response = self.httpClient->getPromisedResponse(promise);\n+        if (response is Response) {\n+            error? x = observe:addTagToSpan(HTTP_STATUS_CODE_GROUP, getStatusCodeRange(response.statusCode));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxODQxNA=="}, "originalCommit": {"oid": "794932f97bd9d94bec9eeb45f3aaeb7300c019c7"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 779, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}