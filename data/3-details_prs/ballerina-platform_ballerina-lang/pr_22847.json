{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NzE1NzU0", "number": 22847, "title": "Refactor JWT module internals [1.2.x]", "bodyText": "Purpose\nThis PR refactor the internal functions of JWT module. There are no any API changes.\n\nThis is a duplicate of #22823 which has sent to master branch.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-23T06:47:06Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22847", "merged": true, "mergeCommit": {"oid": "0e687d130683f9f689bb7be2fc31401759229067"}, "closed": true, "closedAt": "2020-04-24T13:20:55Z", "author": {"login": "ldclakmal"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaXH9AgH2gAyNDA3NzE1NzU0OmJjY2M5NzdkMDEwYmY1YTViNGQxMDQyMmNiMjE5N2ZhNDlmMmM3ZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaxWCeAFqTM5OTkzNjUzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bccc977d010bf5a5b4d10422cb2197fa49f2c7f6", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bccc977d010bf5a5b4d10422cb2197fa49f2c7f6", "committedDate": "2020-04-23T06:44:37Z", "message": "Refactor jwt validator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6b007dd7e3e25e7d4186583c195d2dca47dbac2", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6b007dd7e3e25e7d4186583c195d2dca47dbac2", "committedDate": "2020-04-23T06:44:57Z", "message": "Fix JWT abbreviation usages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDMzMjA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22847#pullrequestreview-399033206", "createdAt": "2020-04-23T12:07:56Z", "commit": {"oid": "b6b007dd7e3e25e7d4186583c195d2dca47dbac2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjowNzo1NlrOGKl42A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjowNzo1NlrOGKl42A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1OTcwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (jwtComponents.length() < 2 || jwtComponents.length() > 3) {\n          \n          \n            \n                if (jwtComponents.length() != 2) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22847#discussion_r413759704", "createdAt": "2020-04-23T12:07:56Z", "author": {"login": "daneshk"}, "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_validator.bal", "diffHunk": "@@ -61,76 +61,74 @@ public type InboundJwtCacheEntry record {|\n # jwt:JwtPayload|jwt:error result = jwt:validateJwt(jwt, validatorConfig);\n # ```\n #\n-# + jwtToken - JWT that needs to be validated\n+# + jwt - JWT that needs to be validated\n # + config - JWT validator config record\n # + return - JWT payload or else a `jwt:Error` if token validation fails\n-public function validateJwt(string jwtToken, JwtValidatorConfig config) returns @tainted (JwtPayload|Error) {\n-    [JwtHeader, JwtPayload] [header, payload] = check decodeJwt(jwtToken);\n-    return validateJwtRecords(jwtToken, header, payload, config) ?: payload;\n-}\n-\n-function getJwtComponents(string jwtToken) returns string[]|Error {\n-    string[] jwtComponents = stringutils:split(jwtToken, \"\\\\.\");\n-    if (jwtComponents.length() < 2 || jwtComponents.length() > 3) {\n-        return prepareError(\"Invalid JWT token.\");\n-    }\n-    return jwtComponents;\n+public function validateJwt(string jwt, JwtValidatorConfig config) returns @tainted (JwtPayload|Error) {\n+    [JwtHeader, JwtPayload] [header, payload] = check decodeJwt(jwt);\n+    return validateJwtRecords(jwt, header, payload, config) ?: payload;\n }\n \n # Decodes the given JWT string.\n # ```ballerina\n-# [jwt:JwtHeader, jwt:JwtPayload]|jwt:Error [header, payload] = jwt:decodeJwt(jwtToken);\n+# [jwt:JwtHeader, jwt:JwtPayload]|jwt:Error [header, payload] = jwt:decodeJwt(jwt);\n # ```\n #\n-# + jwtToken - JWT that needs to be decoded\n+# + jwt - JWT that needs to be decoded\n # + return - The JWT header and payload tuple or else a `jwt:Error` if token decoding fails\n-public function decodeJwt(string jwtToken) returns @tainted ([JwtHeader, JwtPayload]|Error) {\n-    string[] encodedJwtComponents = check getJwtComponents(jwtToken);\n-    [map<json>, map<json>] [headerJson, payloadJson] = check getDecodedJwtComponents(encodedJwtComponents);\n-    JwtHeader jwtHeader = parseHeader(headerJson);\n-    JwtPayload jwtPayload = check parsePayload(payloadJson);\n+public function decodeJwt(string jwt) returns @tainted ([JwtHeader, JwtPayload]|Error) {\n+    string[] encodedJwtComponents = check getJwtComponents(jwt);\n+    JwtHeader jwtHeader = check getJwtHeader(encodedJwtComponents[0]);\n+    JwtPayload jwtPayload = check getJwtPayload(encodedJwtComponents[1]);\n     return [jwtHeader, jwtPayload];\n }\n \n-function getDecodedJwtComponents(string[] encodedJwtComponents) returns @tainted ([map<json>, map<json>]|Error) {\n-    string jwtHeader;\n-    string jwtPayload;\n+function getJwtComponents(string jwt) returns string[]|Error {\n+    string[] jwtComponents = stringutils:split(jwt, \"\\\\.\");\n+    if (jwtComponents.length() < 2 || jwtComponents.length() > 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b007dd7e3e25e7d4186583c195d2dca47dbac2"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e5eaf67d6c643251341003afcec801ec53b0069", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e5eaf67d6c643251341003afcec801ec53b0069", "committedDate": "2020-04-24T03:58:04Z", "message": "Apply suggestions from code review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dae520647ebb05e14343135d9cc96190e1e6336c", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dae520647ebb05e14343135d9cc96190e1e6336c", "committedDate": "2020-04-23T14:09:40Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>"}, "afterCommit": {"oid": "0e5eaf67d6c643251341003afcec801ec53b0069", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e5eaf67d6c643251341003afcec801ec53b0069", "committedDate": "2020-04-24T03:58:04Z", "message": "Apply suggestions from code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTM2NTM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22847#pullrequestreview-399936534", "createdAt": "2020-04-24T13:17:32Z", "commit": {"oid": "0e5eaf67d6c643251341003afcec801ec53b0069"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3441, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}