{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjI2OTUw", "number": 23293, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjoyNTowMVrOD9Lhdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjozOToxMVrOD9LlhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDc4NTE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjoyNTowMVrOGWiBUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjo0MDo0N1rOGWpTtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI0OQ==", "bodyText": "Can't use a while loop?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279249", "createdAt": "2020-05-17T16:25:01Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {\n+                sizes.add(UNSEALED_ARRAY_INDICATOR);\n+            } else {\n+                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n+                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                    sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n+                } else {\n+                    // TODO : should handle the const-reference-expr\n+                }\n+            }\n+            if (indexedExpressionNode.containerExpression().kind() != SyntaxKind.INDEXED_EXPRESSION) {\n+                break;\n+            }\n+            indexedExpressionNode = (IndexedExpressionNode) indexedExpressionNode.containerExpression();\n+            dimensions++;\n+        } while (true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2NDk3Mg==", "bodyText": "I used do-while use because first iteration should be executed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426364972", "createdAt": "2020-05-18T04:34:56Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {\n+                sizes.add(UNSEALED_ARRAY_INDICATOR);\n+            } else {\n+                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n+                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                    sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n+                } else {\n+                    // TODO : should handle the const-reference-expr\n+                }\n+            }\n+            if (indexedExpressionNode.containerExpression().kind() != SyntaxKind.INDEXED_EXPRESSION) {\n+                break;\n+            }\n+            indexedExpressionNode = (IndexedExpressionNode) indexedExpressionNode.containerExpression();\n+            dimensions++;\n+        } while (true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI0OQ=="}, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5ODY0NA==", "bodyText": "But you are not terminating based on a condition in the while(). So it anyway runs the first one right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426398644", "createdAt": "2020-05-18T06:40:47Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {\n+                sizes.add(UNSEALED_ARRAY_INDICATOR);\n+            } else {\n+                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n+                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                    sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n+                } else {\n+                    // TODO : should handle the const-reference-expr\n+                }\n+            }\n+            if (indexedExpressionNode.containerExpression().kind() != SyntaxKind.INDEXED_EXPRESSION) {\n+                break;\n+            }\n+            indexedExpressionNode = (IndexedExpressionNode) indexedExpressionNode.containerExpression();\n+            dimensions++;\n+        } while (true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI0OQ=="}, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDc4NTUyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjoyNToyNlrOGWiBfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNDozNDoyMVrOGWnPxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI5Mw==", "bodyText": "indexedExpressionNode.keyExpression() is called multiple times. extract it to a variable", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279293", "createdAt": "2020-05-17T16:25:26Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2NDg3MA==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426364870", "createdAt": "2020-05-18T04:34:21Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI5Mw=="}, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDc4Njg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjoyNzozNFrOGWiCOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNDoyMDo1NFrOGWnFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTQ4Mw==", "bodyText": "else, throw an exception. Then its easy to debug, if something goes wrong.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279483", "createdAt": "2020-05-17T16:27:34Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1045,6 +1231,22 @@ private void populateFuncSignature(BLangFunction bLFunction, FunctionSignatureNo\n         }\n     }\n \n+    private BLangXMLQName createStartEndXMLTag(XMLNameNode xmlNameNode, DiagnosticPos pos) {\n+        BLangXMLQName xmlName = (BLangXMLQName) TreeBuilder.createXMLQNameNode();\n+        if (xmlNameNode.kind() == SyntaxKind.XML_QUALIFIED_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).name()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).name().toString());\n+            xmlName.prefix = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).prefix()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).prefix().toString());\n+        } else if (xmlNameNode.kind() == SyntaxKind.XML_SIMPLE_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLSimpleNameNode) xmlNameNode).name()),\n+                    ((XMLSimpleNameNode) xmlNameNode).name().text());\n+            xmlName.prefix = createIdentifier(null, \"\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTUzNg==", "bodyText": "Consider using a switch-case", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279536", "createdAt": "2020-05-17T16:27:59Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1045,6 +1231,22 @@ private void populateFuncSignature(BLangFunction bLFunction, FunctionSignatureNo\n         }\n     }\n \n+    private BLangXMLQName createStartEndXMLTag(XMLNameNode xmlNameNode, DiagnosticPos pos) {\n+        BLangXMLQName xmlName = (BLangXMLQName) TreeBuilder.createXMLQNameNode();\n+        if (xmlNameNode.kind() == SyntaxKind.XML_QUALIFIED_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).name()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).name().toString());\n+            xmlName.prefix = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).prefix()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).prefix().toString());\n+        } else if (xmlNameNode.kind() == SyntaxKind.XML_SIMPLE_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLSimpleNameNode) xmlNameNode).name()),\n+                    ((XMLSimpleNameNode) xmlNameNode).name().text());\n+            xmlName.prefix = createIdentifier(null, \"\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTQ4Mw=="}, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MjIzNg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426362236", "createdAt": "2020-05-18T04:20:54Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1045,6 +1231,22 @@ private void populateFuncSignature(BLangFunction bLFunction, FunctionSignatureNo\n         }\n     }\n \n+    private BLangXMLQName createStartEndXMLTag(XMLNameNode xmlNameNode, DiagnosticPos pos) {\n+        BLangXMLQName xmlName = (BLangXMLQName) TreeBuilder.createXMLQNameNode();\n+        if (xmlNameNode.kind() == SyntaxKind.XML_QUALIFIED_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).name()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).name().toString());\n+            xmlName.prefix = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).prefix()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).prefix().toString());\n+        } else if (xmlNameNode.kind() == SyntaxKind.XML_SIMPLE_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLSimpleNameNode) xmlNameNode).name()),\n+                    ((XMLSimpleNameNode) xmlNameNode).name().text());\n+            xmlName.prefix = createIdentifier(null, \"\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTQ4Mw=="}, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDc5MDUxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjozMjoxOVrOGWiEHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNDoyMDo0OVrOGWnFaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTk2NA==", "bodyText": "Good to break this in to two statements, for readability.\nThere are several other places as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279964", "createdAt": "2020-05-17T16:32:19Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1014,6 +1085,121 @@ public BLangNode transform(SimpleNameReferenceNode simpleNameRefNode) {\n         return createTypeNode(simpleNameRefNode.name());\n     }\n \n+    @Override\n+    public BLangNode transform(TupleTypeDescriptorNode typeDescriptorNode) {\n+        BLangTupleTypeNode tupleTypeNode = (BLangTupleTypeNode) TreeBuilder.createTupleTypeNode();\n+        if (typeDescriptorNode.restTypeDesc() != null) {\n+            tupleTypeNode.restParamType = createTypeNode(typeDescriptorNode.restTypeDesc());\n+        }\n+        for (int i = 0; i < typeDescriptorNode.memberTypeDesc().size(); i++) {\n+            if (typeDescriptorNode.memberTypeDesc().get(i).kind() == SyntaxKind.COMMA_TOKEN) {\n+                continue;\n+            }\n+            tupleTypeNode.memberTypeNodes.add(createTypeNode(typeDescriptorNode.memberTypeDesc().get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MjIxNg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426362216", "createdAt": "2020-05-18T04:20:49Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1014,6 +1085,121 @@ public BLangNode transform(SimpleNameReferenceNode simpleNameRefNode) {\n         return createTypeNode(simpleNameRefNode.name());\n     }\n \n+    @Override\n+    public BLangNode transform(TupleTypeDescriptorNode typeDescriptorNode) {\n+        BLangTupleTypeNode tupleTypeNode = (BLangTupleTypeNode) TreeBuilder.createTupleTypeNode();\n+        if (typeDescriptorNode.restTypeDesc() != null) {\n+            tupleTypeNode.restParamType = createTypeNode(typeDescriptorNode.restTypeDesc());\n+        }\n+        for (int i = 0; i < typeDescriptorNode.memberTypeDesc().size(); i++) {\n+            if (typeDescriptorNode.memberTypeDesc().get(i).kind() == SyntaxKind.COMMA_TOKEN) {\n+                continue;\n+            }\n+            tupleTypeNode.memberTypeNodes.add(createTypeNode(typeDescriptorNode.memberTypeDesc().get(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTk2NA=="}, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDc5Mjc1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjozNTowN1rOGWiFRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNDoyMDoyNFrOGWnFDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDI2MQ==", "bodyText": "Looks like this methods creates a ArrayType. 'BLangArray' is not intuitive.\nCan we simply say createBLangArrayType?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426280261", "createdAt": "2020-05-17T16:35:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MjEyNw==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426362127", "createdAt": "2020-05-18T04:20:24Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDI2MQ=="}, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDc5NTU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjozOToxMVrOGWiGsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNDoyMDoyMlrOGWnFBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDYyNw==", "bodyText": "consider extracting this to a variable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426280627", "createdAt": "2020-05-17T16:39:11Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {\n+                sizes.add(UNSEALED_ARRAY_INDICATOR);\n+            } else {\n+                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n+                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                    sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n+                } else {\n+                    // TODO : should handle the const-reference-expr\n+                }\n+            }\n+            if (indexedExpressionNode.containerExpression().kind() != SyntaxKind.INDEXED_EXPRESSION) {\n+                break;\n+            }\n+            indexedExpressionNode = (IndexedExpressionNode) indexedExpressionNode.containerExpression();\n+            dimensions++;\n+        } while (true);\n+\n+        return createArrayTypeNode(\n+                createTypeNode(indexedExpressionNode.containerExpression()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MjExNg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426362116", "createdAt": "2020-05-18T04:20:22Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {\n+                sizes.add(UNSEALED_ARRAY_INDICATOR);\n+            } else {\n+                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n+                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                    sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n+                } else {\n+                    // TODO : should handle the const-reference-expr\n+                }\n+            }\n+            if (indexedExpressionNode.containerExpression().kind() != SyntaxKind.INDEXED_EXPRESSION) {\n+                break;\n+            }\n+            indexedExpressionNode = (IndexedExpressionNode) indexedExpressionNode.containerExpression();\n+            dimensions++;\n+        } while (true);\n+\n+        return createArrayTypeNode(\n+                createTypeNode(indexedExpressionNode.containerExpression()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDYyNw=="}, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 346}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3655, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}