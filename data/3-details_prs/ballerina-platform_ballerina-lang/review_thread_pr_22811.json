{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTQxNzUz", "number": 22811, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyMjoxMFrOD0NtDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjozMzoxNFrOD0OAlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDc3MDY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyMjoxMFrOGJCyIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo0MzoxNFrOGJDrAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNTk2OQ==", "bodyText": "what about block stmt?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412135969", "createdAt": "2020-04-21T12:22:10Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -72,7 +72,7 @@\n             ParserRuleContext.WHILE_BLOCK, ParserRuleContext.CALL_STMT, ParserRuleContext.PANIC_STMT,\n             ParserRuleContext.CONTINUE_STATEMENT, ParserRuleContext.BREAK_STATEMENT, ParserRuleContext.RETURN_STMT,\n             ParserRuleContext.COMPOUND_ASSIGNMENT_STMT, ParserRuleContext.LOCAL_TYPE_DEFINITION_STMT,\n-            ParserRuleContext.EXPRESSION_STATEMENT };\n+            ParserRuleContext.EXPRESSION_STATEMENT, ParserRuleContext.LOCK_STMT };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MDUyOA==", "bodyText": "sorry I missed that", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412150528", "createdAt": "2020-04-21T12:43:14Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -72,7 +72,7 @@\n             ParserRuleContext.WHILE_BLOCK, ParserRuleContext.CALL_STMT, ParserRuleContext.PANIC_STMT,\n             ParserRuleContext.CONTINUE_STATEMENT, ParserRuleContext.BREAK_STATEMENT, ParserRuleContext.RETURN_STMT,\n             ParserRuleContext.COMPOUND_ASSIGNMENT_STMT, ParserRuleContext.LOCAL_TYPE_DEFINITION_STMT,\n-            ParserRuleContext.EXPRESSION_STATEMENT };\n+            ParserRuleContext.EXPRESSION_STATEMENT, ParserRuleContext.LOCK_STMT };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNTk2OQ=="}, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDc5MjczOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyNjo1M1rOGJC-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyNjo1M1rOGJC-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzOTI2MA==", "bodyText": "This looks like a negative test case, but in the positive tests section?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412139260", "createdAt": "2020-04-21T12:26:53Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDgwNDQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyOTozNVrOGJDF9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo0Njo0NlrOGJGn3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTA0Ng==", "bodyText": "This is a positive test case under recovery test section?\nPlease check others as well, and lets re-arrange the stuff", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412141046", "createdAt": "2020-04-21T12:29:35Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_02.bal\",\n+        \"block-stmt/block_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithFieldsOnly() {\n+        testFile(\"block-stmt/block_stmt_source_03.bal\",\n+        \"block-stmt/block_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testBlockStmtWithExtraTokens() {\n+        testFile(\"block-stmt/block_stmt_source_04.bal\",\n+        \"block-stmt/block_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithMissingEqual() {\n+        testFile(\"block-stmt/block_stmt_source_05.bal\",\n+        \"block-stmt/block_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"block-stmt/block_stmt_source_06.bal\",\n+        \"block-stmt/block_stmt_assert_06.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MzY1Nw==", "bodyText": "this tests for nested recovery, for the missing semicolons and stuff inside the object type descritor", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412153657", "createdAt": "2020-04-21T12:47:44Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_02.bal\",\n+        \"block-stmt/block_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithFieldsOnly() {\n+        testFile(\"block-stmt/block_stmt_source_03.bal\",\n+        \"block-stmt/block_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testBlockStmtWithExtraTokens() {\n+        testFile(\"block-stmt/block_stmt_source_04.bal\",\n+        \"block-stmt/block_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithMissingEqual() {\n+        testFile(\"block-stmt/block_stmt_source_05.bal\",\n+        \"block-stmt/block_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"block-stmt/block_stmt_source_06.bal\",\n+        \"block-stmt/block_stmt_assert_06.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTA0Ng=="}, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5ODg3Nw==", "bodyText": "oh ok, my bad.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412198877", "createdAt": "2020-04-21T13:46:46Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_02.bal\",\n+        \"block-stmt/block_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithFieldsOnly() {\n+        testFile(\"block-stmt/block_stmt_source_03.bal\",\n+        \"block-stmt/block_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testBlockStmtWithExtraTokens() {\n+        testFile(\"block-stmt/block_stmt_source_04.bal\",\n+        \"block-stmt/block_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithMissingEqual() {\n+        testFile(\"block-stmt/block_stmt_source_05.bal\",\n+        \"block-stmt/block_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"block-stmt/block_stmt_source_06.bal\",\n+        \"block-stmt/block_stmt_assert_06.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTA0Ng=="}, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDgwOTE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjozMDo0NFrOGJDI0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1NjoyN1rOGJEQWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTc3OQ==", "bodyText": "Any test for missing-closing parenthesis, etc?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412141779", "createdAt": "2020-04-21T12:30:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_02.bal\",\n+        \"block-stmt/block_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithFieldsOnly() {\n+        testFile(\"block-stmt/block_stmt_source_03.bal\",\n+        \"block-stmt/block_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testBlockStmtWithExtraTokens() {\n+        testFile(\"block-stmt/block_stmt_source_04.bal\",\n+        \"block-stmt/block_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithMissingEqual() {\n+        testFile(\"block-stmt/block_stmt_source_05.bal\",\n+        \"block-stmt/block_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"block-stmt/block_stmt_source_06.bal\",\n+        \"block-stmt/block_stmt_assert_06.json\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2MDA4OA==", "bodyText": "will add them :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412160088", "createdAt": "2020-04-21T12:56:27Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_02.bal\",\n+        \"block-stmt/block_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithFieldsOnly() {\n+        testFile(\"block-stmt/block_stmt_source_03.bal\",\n+        \"block-stmt/block_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testBlockStmtWithExtraTokens() {\n+        testFile(\"block-stmt/block_stmt_source_04.bal\",\n+        \"block-stmt/block_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithMissingEqual() {\n+        testFile(\"block-stmt/block_stmt_source_05.bal\",\n+        \"block-stmt/block_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"block-stmt/block_stmt_source_06.bal\",\n+        \"block-stmt/block_stmt_assert_06.json\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTc3OQ=="}, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDgyMDY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjozMzoxNFrOGJDPhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjozMzoxNFrOGJDPhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MzQ5NA==", "bodyText": "Same comments I added to the block-stmt tests, applies to here as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412143494", "createdAt": "2020-04-21T12:33:14Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class LockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+   @Test\n+    public void testComplexLockStmt() {\n+        testFile(\"lock-stmt/lock_stmt_source_01.bal\",\n+        \"lock-stmt/lock_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyLockStmt() {\n+        testFile(\"lock-stmt/lock_stmt_source_02.bal\",\n+        \"lock-stmt/lock_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testLockStmtWithFieldsOnly() {\n+        testFile(\"lock-stmt/lock_stmt_source_03.bal\",\n+        \"lock-stmt/lock_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testLockStmtWithExtraTokens() {\n+        testFile(\"lock-stmt/lock_stmt_source_04.bal\",\n+        \"lock-stmt/lock_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testLockStmtWithMissingEqual() {\n+        testFile(\"lock-stmt/lock_stmt_source_05.bal\",\n+        \"lock-stmt/lock_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"lock-stmt/lock_stmt_source_06.bal\",\n+        \"lock-stmt/lock_stmt_assert_06.json\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3891, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}