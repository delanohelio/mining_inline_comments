{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMDY4NzQ2", "number": 26992, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo0OTowMFrOE7fXUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo1Mzo0MlrOE8QF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODE1MzEyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo0OTowMFrOH3KtIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo0MTo1MFrOH4QaHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwOTEyMQ==", "bodyText": "Can't we use TYPE_ERROR_DETAIL here? This also has to be immutable, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r527609121", "createdAt": "2020-11-20T10:49:00Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -164,9 +164,10 @@\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n     public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    public static final MapType TYPE_ERROR_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY,\n-                                                                 EMPTY_MODULE);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_ERROR_DETAIL);\n+    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));\n+    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE,\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA4MTM2OQ==", "bodyText": "In here we set error values as immutable. So if we change error type as immutable we can't do below kind of casting.\ntype CustomErrorData record {\n    string message?;\n    error cause?;\n    int accountID?;\n};\ntype CustomError1 distinct error<CustomErrorData>;\ntype CustomError distinct error<CustomErrorData>;\n\ntype Error CustomError | CustomError1;\n\nclass Foo {\n    public isolated function next() returns record {| int value; |}|Error? {\n\n        CustomError e = CustomError(\"CustomError\", message = \"custom error occured\", accountID = 2);\n        return e;\n        \n    }\n}\n\npublic function main() {\n    Foo val = new;\n    object {\n        public isolated function next() returns record {|int value;|}|error?;} err = <object {\n         public isolated function next() returns record {|int value;|}|error?;}> val;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528081369", "createdAt": "2020-11-21T06:33:40Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -164,9 +164,10 @@\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n     public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    public static final MapType TYPE_ERROR_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY,\n-                                                                 EMPTY_MODULE);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_ERROR_DETAIL);\n+    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));\n+    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE,\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwOTEyMQ=="}, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA4NDQyMQ==", "bodyText": "All error values/types and their detail values/types have to be immutable. If using the immutable detail here causes something to fail, it's possible that we're creating an error with a non-immutable detail somewhere, which is wrong. Can you check why exactly it fails?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528084421", "createdAt": "2020-11-21T06:38:05Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -164,9 +164,10 @@\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n     public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    public static final MapType TYPE_ERROR_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY,\n-                                                                 EMPTY_MODULE);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_ERROR_DETAIL);\n+    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));\n+    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE,\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwOTEyMQ=="}, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MzI3Ng==", "bodyText": "When creating CustomError1 we are not set detail(CustomErrorData) as immutable. Is it effect when creating values from that type( CustomErrorData) If we set it to immutable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528183276", "createdAt": "2020-11-21T11:10:39Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -164,9 +164,10 @@\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n     public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    public static final MapType TYPE_ERROR_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY,\n-                                                                 EMPTY_MODULE);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_ERROR_DETAIL);\n+    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));\n+    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE,\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwOTEyMQ=="}, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NzIxOA==", "bodyText": "That's wrong, right? When the error value is being created, cloneReadOnly should get called for the detail, so at runtime the detail type should be a subtype of readonly?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528467218", "createdAt": "2020-11-23T04:30:32Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -164,9 +164,10 @@\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n     public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    public static final MapType TYPE_ERROR_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY,\n-                                                                 EMPTY_MODULE);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_ERROR_DETAIL);\n+    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));\n+    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE,\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwOTEyMQ=="}, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1MTEzNQ==", "bodyText": "As discussed offline, let's have the mutable detail type here for the time-being because that's how we've modeled the errors defined in the source too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528751135", "createdAt": "2020-11-23T14:41:50Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -164,9 +164,10 @@\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n     public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    public static final MapType TYPE_ERROR_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY,\n-                                                                 EMPTY_MODULE);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_ERROR_DETAIL);\n+    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));\n+    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE,\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwOTEyMQ=="}, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODE4MDQ4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/MapValueImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo1Njo1NlrOH3K9dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozNjo0NlrOH4HpAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxMzMwMw==", "bodyText": "IMO we shouldn't do this. We should create and pass the initialValues array only if the values are present.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r527613303", "createdAt": "2020-11-20T10:56:56Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/MapValueImpl.java", "diffHunk": "@@ -271,6 +271,9 @@ public V put(K key, V value) {\n \n     protected void populateInitialValues(BMapInitialValueEntry[] initialValues) {\n         for (BMapInitialValueEntry initialValue : initialValues) {\n+            if (initialValue == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA4MDk0NQ==", "bodyText": "I have made a such change because there are some  cases(reale to this) which only the detail become null. Is there any other option to handle this ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528080945", "createdAt": "2020-11-21T06:28:50Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/MapValueImpl.java", "diffHunk": "@@ -271,6 +271,9 @@ public V put(K key, V value) {\n \n     protected void populateInitialValues(BMapInitialValueEntry[] initialValues) {\n         for (BMapInitialValueEntry initialValue : initialValues) {\n+            if (initialValue == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxMzMwMw=="}, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA4MTM0OA==", "bodyText": "I think we should refactor that code to create an array of the exact length depending on how many entries there are, instead of always creating an array of length 2.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528081348", "createdAt": "2020-11-21T06:33:14Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/MapValueImpl.java", "diffHunk": "@@ -271,6 +271,9 @@ public V put(K key, V value) {\n \n     protected void populateInitialValues(BMapInitialValueEntry[] initialValues) {\n         for (BMapInitialValueEntry initialValue : initialValues) {\n+            if (initialValue == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxMzMwMw=="}, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNzQ4OA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528607488", "createdAt": "2020-11-23T10:36:46Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/MapValueImpl.java", "diffHunk": "@@ -271,6 +271,9 @@ public V put(K key, V value) {\n \n     protected void populateInitialValues(BMapInitialValueEntry[] initialValues) {\n         for (BMapInitialValueEntry initialValue : initialValues) {\n+            if (initialValue == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxMzMwMw=="}, "originalCommit": {"oid": "d042e7043f64f09138932557b2b7be435000542f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjEwNTUzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo0Njo1OVrOH4QohA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1NDowNVrOH4TwxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NDgyMA==", "bodyText": "Shall we define a private final variable for new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE) and use that in these two types?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528754820", "createdAt": "2020-11-23T14:46:59Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -164,9 +164,10 @@\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n     public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    public static final MapType TYPE_ERROR_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY,\n-                                                                 EMPTY_MODULE);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_ERROR_DETAIL);\n+    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b775c465099c335291dc77e369614394c1a875e0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNjA4NA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528806084", "createdAt": "2020-11-23T15:54:05Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -164,9 +164,10 @@\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n     public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    public static final MapType TYPE_ERROR_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY,\n-                                                                 EMPTY_MODULE);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_ERROR_DETAIL);\n+    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(\n+                                            new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NDgyMA=="}, "originalCommit": {"oid": "b775c465099c335291dc77e369614394c1a875e0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjEyMDgwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/ErrorUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo1MDoxNlrOH4Qx_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1Mzo1NlrOH4TwVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NzI0Ng==", "bodyText": "Shall we extract e.getMessage() and e.getCause() out to variables?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528757246", "createdAt": "2020-11-23T14:50:16Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/ErrorUtils.java", "diffHunk": "@@ -50,14 +51,28 @@\n      * @return ballerina error\n      */\n     public static ErrorValue createInteropError(Throwable e) {\n-        BMap<BString, Object> detailMap = new MapValueImpl<>(PredefinedTypes.TYPE_ERROR_DETAIL);\n-        if (e.getMessage() != null) {\n-            detailMap.put(ERROR_MESSAGE_FIELD, StringUtils.fromString(e.getMessage()));\n-        }\n-        if (e.getCause() != null) {\n-            detailMap.put(ERROR_CAUSE_FIELD, createError(StringUtils.fromString(e.getCause().getClass().getName()),\n-                                                         StringUtils.fromString(e.getCause().getMessage())));\n+        MappingInitialValueEntry[] initialValues;\n+        if (e.getMessage() != null && e.getCause() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b775c465099c335291dc77e369614394c1a875e0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNTk3Mw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528805973", "createdAt": "2020-11-23T15:53:56Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/ErrorUtils.java", "diffHunk": "@@ -50,14 +51,28 @@\n      * @return ballerina error\n      */\n     public static ErrorValue createInteropError(Throwable e) {\n-        BMap<BString, Object> detailMap = new MapValueImpl<>(PredefinedTypes.TYPE_ERROR_DETAIL);\n-        if (e.getMessage() != null) {\n-            detailMap.put(ERROR_MESSAGE_FIELD, StringUtils.fromString(e.getMessage()));\n-        }\n-        if (e.getCause() != null) {\n-            detailMap.put(ERROR_CAUSE_FIELD, createError(StringUtils.fromString(e.getCause().getClass().getName()),\n-                                                         StringUtils.fromString(e.getCause().getMessage())));\n+        MappingInitialValueEntry[] initialValues;\n+        if (e.getMessage() != null && e.getCause() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NzI0Ng=="}, "originalCommit": {"oid": "b775c465099c335291dc77e369614394c1a875e0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjEzNjg1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/creators/ErrorCreator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo1Mzo0MlrOH4Q8BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjo0MjoyMVrOH4WI2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1OTgxMg==", "bodyText": "Wouldn't this lead to the same issue where the entry becomes null?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528759812", "createdAt": "2020-11-23T14:53:42Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/creators/ErrorCreator.java", "diffHunk": "@@ -105,11 +101,11 @@ public static BError createError(Type type, BString message, BError cause, BMap<\n      * @return new error\n      */\n     public static BError createError(Type type, BString message, BString details) {\n-        MapValueImpl<BString, Object> detailMap =\n-                new MapValueImpl<>(setImmutableTypeAndGetEffectiveType(PredefinedTypes.TYPE_ERROR_DETAIL));\n+        MappingInitialValueEntry[] initialValues = new MappingInitialValueEntry[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b775c465099c335291dc77e369614394c1a875e0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNTc3MQ==", "bodyText": "In here for java exceptions like UnsupportedOperationException, the detail message become null.  But when considering the ballerina error values I think detail cannot become null. I kept the null check for detail value as it was in that manner previously", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528805771", "createdAt": "2020-11-23T15:53:40Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/creators/ErrorCreator.java", "diffHunk": "@@ -105,11 +101,11 @@ public static BError createError(Type type, BString message, BError cause, BMap<\n      * @return new error\n      */\n     public static BError createError(Type type, BString message, BString details) {\n-        MapValueImpl<BString, Object> detailMap =\n-                new MapValueImpl<>(setImmutableTypeAndGetEffectiveType(PredefinedTypes.TYPE_ERROR_DETAIL));\n+        MappingInitialValueEntry[] initialValues = new MappingInitialValueEntry[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1OTgxMg=="}, "originalCommit": {"oid": "b775c465099c335291dc77e369614394c1a875e0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwODc5OQ==", "bodyText": "Wouldn't the iteration fail in io.ballerina.runtime.internal.values.MapValueImpl#populateInitialValues? If details is null?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528808799", "createdAt": "2020-11-23T15:57:34Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/creators/ErrorCreator.java", "diffHunk": "@@ -105,11 +101,11 @@ public static BError createError(Type type, BString message, BError cause, BMap<\n      * @return new error\n      */\n     public static BError createError(Type type, BString message, BString details) {\n-        MapValueImpl<BString, Object> detailMap =\n-                new MapValueImpl<>(setImmutableTypeAndGetEffectiveType(PredefinedTypes.TYPE_ERROR_DETAIL));\n+        MappingInitialValueEntry[] initialValues = new MappingInitialValueEntry[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1OTgxMg=="}, "originalCommit": {"oid": "b775c465099c335291dc77e369614394c1a875e0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NTAxOA==", "bodyText": "It can happen. I have changed this in above mentioned way.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26992#discussion_r528845018", "createdAt": "2020-11-23T16:42:21Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/creators/ErrorCreator.java", "diffHunk": "@@ -105,11 +101,11 @@ public static BError createError(Type type, BString message, BError cause, BMap<\n      * @return new error\n      */\n     public static BError createError(Type type, BString message, BString details) {\n-        MapValueImpl<BString, Object> detailMap =\n-                new MapValueImpl<>(setImmutableTypeAndGetEffectiveType(PredefinedTypes.TYPE_ERROR_DETAIL));\n+        MappingInitialValueEntry[] initialValues = new MappingInitialValueEntry[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1OTgxMg=="}, "originalCommit": {"oid": "b775c465099c335291dc77e369614394c1a875e0"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3024, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}