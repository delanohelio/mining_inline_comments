{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNjExMzk1", "number": 22961, "title": "Add Union type support to new parser", "bodyText": "Purpose\nAdd Union type support to new parser with test case and recovery logic.\nFixes #22065\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-29T10:02:37Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961", "merged": true, "mergeCommit": {"oid": "1966dc566d4d55710e9c7007c28afba556643edc"}, "closed": true, "closedAt": "2020-04-30T17:45:28Z", "author": {"login": "rdulmina"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcar49pgH2gAyNDEwNjExMzk1OmYyZmM4MWVhNTFkN2MwOWRlZDMxNmI5NDNmZjcxYTJkYmY2NmQ1MDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccwxSBAFqTQwMzc0MjM4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f2fc81ea51d7c09ded316b943ff71a2dbf66d502", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2fc81ea51d7c09ded316b943ff71a2dbf66d502", "committedDate": "2020-04-24T06:56:15Z", "message": "Union type descriptor support with recovery logic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa4c1a3c46b36ab51b93ec91107eb23b20b6249e", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa4c1a3c46b36ab51b93ec91107eb23b20b6249e", "committedDate": "2020-04-24T08:16:49Z", "message": "Added test cases for the union type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cad479e97b1a6ba36d1157cd1a05a81518914a18", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cad479e97b1a6ba36d1157cd1a05a81518914a18", "committedDate": "2020-04-24T13:43:11Z", "message": "Changed next rule for VAR_DECL_STMT\n\nChanged next rule for VAR_DECL_STMT from SIMPLE_TYPE_DESCRIPTOR to TYPE_DESCRIPTOR in BallerinaParserErrorHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5047fd4a72f44ab14b55d9378d22f5a97129dd", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e5047fd4a72f44ab14b55d9378d22f5a97129dd", "committedDate": "2020-04-28T08:27:57Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into union-type\n\n# Conflicts:\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n#\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b3e91fb105c0dee56e1d31cee4f4f04910ae31", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/09b3e91fb105c0dee56e1d31cee4f4f04910ae31", "committedDate": "2020-04-28T14:40:36Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into union-type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea2f76db118922c7e01dbcd8cc98f75b8059c388", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea2f76db118922c7e01dbcd8cc98f75b8059c388", "committedDate": "2020-04-29T06:45:03Z", "message": "Added getTypeDescRHS method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d84560bdab649116310faf0053ac91289872a87", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d84560bdab649116310faf0053ac91289872a87", "committedDate": "2020-04-29T09:55:56Z", "message": "Apply a fix and new test case for FunctionDefinitionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51cbcb90358f81f2bcc256d21079b2986787a9d4", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/51cbcb90358f81f2bcc256d21079b2986787a9d4", "committedDate": "2020-04-29T09:57:42Z", "message": "Remove extra spaces."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc16760353f3bd8612cbfaf26dc2862a1ca86143", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc16760353f3bd8612cbfaf26dc2862a1ca86143", "committedDate": "2020-04-29T10:06:52Z", "message": "Added new lines to eof."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjc5NTg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961#pullrequestreview-402679587", "createdAt": "2020-04-29T13:44:06Z", "commit": {"oid": "fc16760353f3bd8612cbfaf26dc2862a1ca86143"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo0NDowNlrOGN_gEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo0Nzo0OVrOGN_qpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTA3Mw==", "bodyText": "I think we should remove from L#2851-L#2867. This should be handled inside the parseStatementStartsWithIdentifier() method. Similar cases are handled in that method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961#discussion_r417325073", "createdAt": "2020-04-29T13:44:06Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2842,6 +2856,15 @@ private STNode parseStatement(SyntaxKind tokenKind, STNode annots) {\n                     finalKeyword = STNodeFactory.createEmptyNode();\n                     return parseVariableDecl(getAnnotations(annots), finalKeyword, false);\n                 }\n+                //If the nex token is pipe token then it can be unary type or compound assignment statement.\n+                if (nextToken.kind == SyntaxKind.PIPE_TOKEN) {\n+                    STToken nextNextToken = peek(3);\n+                    // if the nextNextToken is not an equal token then it is a unary type with user defined type\n+                    if (nextNextToken.kind != SyntaxKind.EQUAL_TOKEN) {\n+                        finalKeyword = STNodeFactory.createEmptyNode();\n+                        return parseVariableDecl(getAnnotations(annots), finalKeyword, false);\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc16760353f3bd8612cbfaf26dc2862a1ca86143"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNzc4MQ==", "bodyText": "I feel ParserRuleContext.UNION_TYPE_DESCRIPTOR is not needed at all. Looks like it is not being used for any decision making within the error recovery. Only pushed and popped from the stack.\nCan we use ParserRuleContext.PIPE here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961#discussion_r417327781", "createdAt": "2020-04-29T13:47:49Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -259,7 +259,8 @@\n             { ParserRuleContext.BASIC_LITERAL, ParserRuleContext.VARIABLE_REF };\n \n     private static final ParserRuleContext[] TYPEDESC_RHS = {ParserRuleContext.NON_RECURSIVE_TYPE,\n-            ParserRuleContext.ARRAY_TYPE_DESCRIPTOR, ParserRuleContext.OPTIONAL_TYPE_DESCRIPTOR };\n+            ParserRuleContext.ARRAY_TYPE_DESCRIPTOR, ParserRuleContext.OPTIONAL_TYPE_DESCRIPTOR,\n+            ParserRuleContext.UNION_TYPE_DESCRIPTOR };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc16760353f3bd8612cbfaf26dc2862a1ca86143"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5ce6567e00e54b2e947f506d1468bacd5ac3310", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5ce6567e00e54b2e947f506d1468bacd5ac3310", "committedDate": "2020-04-30T04:13:49Z", "message": "Removed parser rule context UNION_TYPE_DESCRIPTOR.\n\nRemoved parser rule context UNION_TYPE_DESCRIPTOR. Moved union and optional type detection logic to the parseStatementStartsWithIdentifier(STNode annots) method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f23d22dbf0353b14a866b7750eed30dbbd313c00", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f23d22dbf0353b14a866b7750eed30dbbd313c00", "committedDate": "2020-04-30T04:23:54Z", "message": "Resolve conflicts and merge."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fcbbe758d6cd39e474f921cf9d4a5a54eb6163c", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fcbbe758d6cd39e474f921cf9d4a5a54eb6163c", "committedDate": "2020-04-30T07:48:25Z", "message": "Moved union and optional type detection logic to the parseStatementStartsWithIdentifier(SyntaxKind nextTokenKind, STNode annots, STNode identifier) method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c0c897e123a7ba21ce474c49571e29f20b7c983", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c0c897e123a7ba21ce474c49571e29f20b7c983", "committedDate": "2020-04-30T07:50:23Z", "message": "Undo test1.bal file change."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTU5ODE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961#pullrequestreview-403559816", "createdAt": "2020-04-30T14:12:05Z", "commit": {"oid": "7c0c897e123a7ba21ce474c49571e29f20b7c983"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoxMjowNVrOGOrLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDozM1rOGOri9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MDYzMg==", "bodyText": "Can't we use parseComplexTypeDescriptor() method?\nyou'll need to extract the content out in that method to a new method like: parseComplexTypeDescriptor(SyntaxKind kind)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961#discussion_r418040632", "createdAt": "2020-04-30T14:12:05Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5587,12 +5593,32 @@ private STNode parseStatementStartsWithIdentifier(SyntaxKind nextTokenKind, STNo\n             case SEMICOLON_TOKEN:\n                 // Here we directly start parsing as a statement that starts with an expression.\n                 return parseStamentStartWithExpr(nextTokenKind, identifier);\n+            case QUESTION_MARK_TOKEN:\n+                // if the next token is question-mark then it is an optional type descriptor with user defined type\n+                switchContext(ParserRuleContext.VAR_DECL_STMT);\n+                STNode questionMarkToken = parseQuestionMark();\n+                STNode optionalTypeDesc = STNodeFactory.createOptionalTypeDescriptorNode(identifier, questionMarkToken);\n+                //check whether if there is more type descriptor elements\n+                STNode typeDesc = parseComplexTypeDescriptor(optionalTypeDesc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0c897e123a7ba21ce474c49571e29f20b7c983"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MjE4OA==", "bodyText": "Similarly, can we call parseUnionTypeDescriptor() here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961#discussion_r418042188", "createdAt": "2020-04-30T14:14:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5587,12 +5593,32 @@ private STNode parseStatementStartsWithIdentifier(SyntaxKind nextTokenKind, STNo\n             case SEMICOLON_TOKEN:\n                 // Here we directly start parsing as a statement that starts with an expression.\n                 return parseStamentStartWithExpr(nextTokenKind, identifier);\n+            case QUESTION_MARK_TOKEN:\n+                // if the next token is question-mark then it is an optional type descriptor with user defined type\n+                switchContext(ParserRuleContext.VAR_DECL_STMT);\n+                STNode questionMarkToken = parseQuestionMark();\n+                STNode optionalTypeDesc = STNodeFactory.createOptionalTypeDescriptorNode(identifier, questionMarkToken);\n+                //check whether if there is more type descriptor elements\n+                STNode typeDesc = parseComplexTypeDescriptor(optionalTypeDesc);\n+                varName = parseVariableName();\n+                finalKeyword = STNodeFactory.createEmptyNode();\n+                return parseVarDeclRhs(annots, finalKeyword, typeDesc, varName, false);\n             default:\n                 // If its a binary operator then this can be a compound assignment statement\n                 if (isCompoundBinaryOperator(nextTokenKind)) {\n                     return parseCompoundAssignmentStmtRhs(identifier);\n                 }\n-\n+                // If its not a compound assignment statement then it can be union type desc.\n+                if (nextTokenKind == SyntaxKind.PIPE_TOKEN) {\n+                    switchContext(ParserRuleContext.VAR_DECL_STMT);\n+                    STNode pipeToken = parsePipeToken();\n+                    STNode rightTypeDesc = parseTypeDescriptor();\n+                    STNode unionTypeDesc = STNodeFactory.createUnionTypeDescriptorNode(identifier, pipeToken,\n+                            rightTypeDesc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0c897e123a7ba21ce474c49571e29f20b7c983"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MzgzOQ==", "bodyText": "These three lines seems to be repeating in three places inside this method. Better to take it out as a method and re-use it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961#discussion_r418043839", "createdAt": "2020-04-30T14:16:38Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5587,12 +5593,32 @@ private STNode parseStatementStartsWithIdentifier(SyntaxKind nextTokenKind, STNo\n             case SEMICOLON_TOKEN:\n                 // Here we directly start parsing as a statement that starts with an expression.\n                 return parseStamentStartWithExpr(nextTokenKind, identifier);\n+            case QUESTION_MARK_TOKEN:\n+                // if the next token is question-mark then it is an optional type descriptor with user defined type\n+                switchContext(ParserRuleContext.VAR_DECL_STMT);\n+                STNode questionMarkToken = parseQuestionMark();\n+                STNode optionalTypeDesc = STNodeFactory.createOptionalTypeDescriptorNode(identifier, questionMarkToken);\n+                //check whether if there is more type descriptor elements\n+                STNode typeDesc = parseComplexTypeDescriptor(optionalTypeDesc);\n+                varName = parseVariableName();\n+                finalKeyword = STNodeFactory.createEmptyNode();\n+                return parseVarDeclRhs(annots, finalKeyword, typeDesc, varName, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0c897e123a7ba21ce474c49571e29f20b7c983"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjcxMA==", "bodyText": "Shall we move this as another case in the switch-case? If the token after pipe is a = then we can fall through.\nReason is, use of  union-types is a more prominent use-case compared to compound operators. So moving this to switch case lets us exit-early.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961#discussion_r418046710", "createdAt": "2020-04-30T14:20:33Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5587,12 +5593,32 @@ private STNode parseStatementStartsWithIdentifier(SyntaxKind nextTokenKind, STNo\n             case SEMICOLON_TOKEN:\n                 // Here we directly start parsing as a statement that starts with an expression.\n                 return parseStamentStartWithExpr(nextTokenKind, identifier);\n+            case QUESTION_MARK_TOKEN:\n+                // if the next token is question-mark then it is an optional type descriptor with user defined type\n+                switchContext(ParserRuleContext.VAR_DECL_STMT);\n+                STNode questionMarkToken = parseQuestionMark();\n+                STNode optionalTypeDesc = STNodeFactory.createOptionalTypeDescriptorNode(identifier, questionMarkToken);\n+                //check whether if there is more type descriptor elements\n+                STNode typeDesc = parseComplexTypeDescriptor(optionalTypeDesc);\n+                varName = parseVariableName();\n+                finalKeyword = STNodeFactory.createEmptyNode();\n+                return parseVarDeclRhs(annots, finalKeyword, typeDesc, varName, false);\n             default:\n                 // If its a binary operator then this can be a compound assignment statement\n                 if (isCompoundBinaryOperator(nextTokenKind)) {\n                     return parseCompoundAssignmentStmtRhs(identifier);\n                 }\n-\n+                // If its not a compound assignment statement then it can be union type desc.\n+                if (nextTokenKind == SyntaxKind.PIPE_TOKEN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0c897e123a7ba21ce474c49571e29f20b7c983"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bfe30934a1a356fce3d6c9e3bc2b9aa95900fbe", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bfe30934a1a356fce3d6c9e3bc2b9aa95900fbe", "committedDate": "2020-04-30T16:04:42Z", "message": "Changed the logic of detecting optional and union type start with user defined type."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzQyMzg0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22961#pullrequestreview-403742384", "createdAt": "2020-04-30T17:45:14Z", "commit": {"oid": "2bfe30934a1a356fce3d6c9e3bc2b9aa95900fbe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3524, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}