{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MzY3MDk3", "number": 22913, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDo0OVrOD2l3Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOToxNjoyOFrOD-ISDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTcwMDc0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDo0OVrOGMak1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDo0OVrOGMak1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MTUwOQ==", "bodyText": "visitFrame should be automatically injected by asm, please try removing those.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r415671509", "createdAt": "2020-04-27T09:50:49Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -468,19 +472,33 @@ private static void generateObjectValueCreateMethod(ClassWriter cw, @Nilable Lis\n \n             int tempVarIndex = indexMap.getIndex(tempVar);\n             mv.visitVarInsn(ASTORE, tempVarIndex);\n+            BIRVariableDcl strandVar = new BIRVariableDcl(symbolTable.anyType, new Name(\"strandVar\"), VarScope.FUNCTION,\n+                    VarKind.LOCAL);\n+            int strandVarIndex = indexMap.getIndex(strandVar);\n \n+            mv.visitVarInsn(ALOAD, parentIndex);\n+            Label parentNonNullLabel = new Label();\n+            mv.visitJumpInsn(IFNONNULL, parentNonNullLabel);\n+            Label parentNullLabel = new Label();\n+            mv.visitLabel(parentNullLabel);\n             mv.visitTypeInsn(NEW, STRAND);\n             mv.visitInsn(DUP);\n             mv.visitVarInsn(ALOAD, schedulerIndex);\n             mv.visitVarInsn(ALOAD, parentIndex);\n             mv.visitVarInsn(ALOAD, propertiesIndex);\n             mv.visitMethodInsn(INVOKESPECIAL, STRAND, \"<init>\",\n                     String.format(\"(L%s;L%s;L%s;)V\", SCHEDULER, STRAND, MAP), false);\n-            BIRVariableDcl strandVar = new BIRVariableDcl(symbolTable.anyType, new Name(\"strandVar\"), VarScope.FUNCTION,\n-                    VarKind.LOCAL);\n-\n-            int strandVarIndex = indexMap.getIndex(strandVar);\n             mv.visitVarInsn(ASTORE, strandVarIndex);\n+            Label conditionLinkLabel = new Label();\n+            mv.visitLabel(conditionLinkLabel);\n+            Label endConditionLabel = new Label();\n+            mv.visitJumpInsn(GOTO, endConditionLabel);\n+            mv.visitLabel(parentNonNullLabel);\n+            mv.visitFrame(F_SAME, 0, null, 0, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "082f7863c114735fb05c9d51891979ea0484c5fa"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTg5MDUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDozNDo1MVrOGMcT4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDozNDo1MVrOGMcT4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5OTkzOA==", "bodyText": "don't think conditionLinkLabel is used, we can remove it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r415699938", "createdAt": "2020-04-27T10:34:51Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -468,19 +472,33 @@ private static void generateObjectValueCreateMethod(ClassWriter cw, @Nilable Lis\n \n             int tempVarIndex = indexMap.getIndex(tempVar);\n             mv.visitVarInsn(ASTORE, tempVarIndex);\n+            BIRVariableDcl strandVar = new BIRVariableDcl(symbolTable.anyType, new Name(\"strandVar\"), VarScope.FUNCTION,\n+                    VarKind.LOCAL);\n+            int strandVarIndex = indexMap.getIndex(strandVar);\n \n+            mv.visitVarInsn(ALOAD, parentIndex);\n+            Label parentNonNullLabel = new Label();\n+            mv.visitJumpInsn(IFNONNULL, parentNonNullLabel);\n+            Label parentNullLabel = new Label();\n+            mv.visitLabel(parentNullLabel);\n             mv.visitTypeInsn(NEW, STRAND);\n             mv.visitInsn(DUP);\n             mv.visitVarInsn(ALOAD, schedulerIndex);\n             mv.visitVarInsn(ALOAD, parentIndex);\n             mv.visitVarInsn(ALOAD, propertiesIndex);\n             mv.visitMethodInsn(INVOKESPECIAL, STRAND, \"<init>\",\n                     String.format(\"(L%s;L%s;L%s;)V\", SCHEDULER, STRAND, MAP), false);\n-            BIRVariableDcl strandVar = new BIRVariableDcl(symbolTable.anyType, new Name(\"strandVar\"), VarScope.FUNCTION,\n-                    VarKind.LOCAL);\n-\n-            int strandVarIndex = indexMap.getIndex(strandVar);\n             mv.visitVarInsn(ASTORE, strandVarIndex);\n+            Label conditionLinkLabel = new Label();\n+            mv.visitLabel(conditionLinkLabel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "082f7863c114735fb05c9d51891979ea0484c5fa"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTkxMTY1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDozOTo0MlrOGMcfxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjo1NTowMFrOGMhpWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwMjk4Mw==", "bodyText": "please remove getScheduler method, since Scheduler.getStrand() is costly (because it access a thread local) it should be called ones. assign the strand to a local var and access the scheduler form there.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r415702983", "createdAt": "2020-04-27T10:39:42Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -85,8 +87,41 @@ public static ObjectValue createObjectValue(BPackage packageId, String objectTyp\n             fields[j++] = fieldValues[i];\n             fields[j++] = true;\n         }\n-        //passing scheduler, strand and properties as null for the moment, but better to expose them via this method\n-        return valueCreator.createObjectValue(objectTypeName, null, null, null, fields);\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(), getStrand(), null, fields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "082f7863c114735fb05c9d51891979ea0484c5fa"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4NzM1Mg==", "bodyText": "I modified considering all suggestions in this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r415787352", "createdAt": "2020-04-27T12:55:00Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -85,8 +87,41 @@ public static ObjectValue createObjectValue(BPackage packageId, String objectTyp\n             fields[j++] = fieldValues[i];\n             fields[j++] = true;\n         }\n-        //passing scheduler, strand and properties as null for the moment, but better to expose them via this method\n-        return valueCreator.createObjectValue(objectTypeName, null, null, null, fields);\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(), getStrand(), null, fields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwMjk4Mw=="}, "originalCommit": {"oid": "082f7863c114735fb05c9d51891979ea0484c5fa"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTE0MzY3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozOToxMFrOGNLlCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTozNjoyNlrOGNPt_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3NDM3OQ==", "bodyText": "when can an exception occur here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r416474379", "createdAt": "2020-04-28T09:39:10Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,46 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Strand currentStrand = getStrand();\n+        // Adding boolean values for each arg\n+        for (int i = 0, j = 0; i < fieldValues.length; i++) {\n+            fields[j++] = fieldValues[i];\n+            fields[j++] = true;\n+        }\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(currentStrand), currentStrand, null, fields);\n+    }\n+\n+    public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Strand currentStrand,\n+                                                Object... fieldValues) {\n+        //This method duplicates the createObjectValue with referencing the issue in runtime API getting strand\n+        ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n+        Object[] fields = new Object[fieldValues.length * 2];\n \n         // Adding boolean values for each arg\n         for (int i = 0, j = 0; i < fieldValues.length; i++) {\n             fields[j++] = fieldValues[i];\n             fields[j++] = true;\n         }\n-        //passing scheduler, strand and properties as null for the moment, but better to expose them via this method\n-        return valueCreator.createObjectValue(objectTypeName, null, null, null, fields);\n+        //passing scheduler of current strand\n+        return valueCreator.createObjectValue(objectTypeName, currentStrand.scheduler, currentStrand,\n+                null, fields);\n+    }\n+\n+    private static Scheduler getScheduler(Strand currentStrand) {\n+        try {\n+            return currentStrand.scheduler;\n+        } catch (Exception ex) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a37d02e2498c209c716ea0d95ccaa013144ca"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxMjczNQ==", "bodyText": "Null pointer exception is thrown if the strand is null.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r416512735", "createdAt": "2020-04-28T10:42:25Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,46 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Strand currentStrand = getStrand();\n+        // Adding boolean values for each arg\n+        for (int i = 0, j = 0; i < fieldValues.length; i++) {\n+            fields[j++] = fieldValues[i];\n+            fields[j++] = true;\n+        }\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(currentStrand), currentStrand, null, fields);\n+    }\n+\n+    public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Strand currentStrand,\n+                                                Object... fieldValues) {\n+        //This method duplicates the createObjectValue with referencing the issue in runtime API getting strand\n+        ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n+        Object[] fields = new Object[fieldValues.length * 2];\n \n         // Adding boolean values for each arg\n         for (int i = 0, j = 0; i < fieldValues.length; i++) {\n             fields[j++] = fieldValues[i];\n             fields[j++] = true;\n         }\n-        //passing scheduler, strand and properties as null for the moment, but better to expose them via this method\n-        return valueCreator.createObjectValue(objectTypeName, null, null, null, fields);\n+        //passing scheduler of current strand\n+        return valueCreator.createObjectValue(objectTypeName, currentStrand.scheduler, currentStrand,\n+                null, fields);\n+    }\n+\n+    private static Scheduler getScheduler(Strand currentStrand) {\n+        try {\n+            return currentStrand.scheduler;\n+        } catch (Exception ex) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3NDM3OQ=="}, "originalCommit": {"oid": "2d5a37d02e2498c209c716ea0d95ccaa013144ca"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MjIwNw==", "bodyText": "Caching Exception or any runtime exceptions like NullPointerExcption is not a best practice. Replace it with a null check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r416542207", "createdAt": "2020-04-28T11:36:26Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,46 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Strand currentStrand = getStrand();\n+        // Adding boolean values for each arg\n+        for (int i = 0, j = 0; i < fieldValues.length; i++) {\n+            fields[j++] = fieldValues[i];\n+            fields[j++] = true;\n+        }\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(currentStrand), currentStrand, null, fields);\n+    }\n+\n+    public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Strand currentStrand,\n+                                                Object... fieldValues) {\n+        //This method duplicates the createObjectValue with referencing the issue in runtime API getting strand\n+        ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n+        Object[] fields = new Object[fieldValues.length * 2];\n \n         // Adding boolean values for each arg\n         for (int i = 0, j = 0; i < fieldValues.length; i++) {\n             fields[j++] = fieldValues[i];\n             fields[j++] = true;\n         }\n-        //passing scheduler, strand and properties as null for the moment, but better to expose them via this method\n-        return valueCreator.createObjectValue(objectTypeName, null, null, null, fields);\n+        //passing scheduler of current strand\n+        return valueCreator.createObjectValue(objectTypeName, currentStrand.scheduler, currentStrand,\n+                null, fields);\n+    }\n+\n+    private static Scheduler getScheduler(Strand currentStrand) {\n+        try {\n+            return currentStrand.scheduler;\n+        } catch (Exception ex) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3NDM3OQ=="}, "originalCommit": {"oid": "2d5a37d02e2498c209c716ea0d95ccaa013144ca"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTE0NzcxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0MDoxNVrOGNLnig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNjo1NlrOGNyxuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3NTAxOA==", "bodyText": "can we link the created issue here ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r416475018", "createdAt": "2020-04-28T09:40:15Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,46 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Strand currentStrand = getStrand();\n+        // Adding boolean values for each arg\n+        for (int i = 0, j = 0; i < fieldValues.length; i++) {\n+            fields[j++] = fieldValues[i];\n+            fields[j++] = true;\n+        }\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(currentStrand), currentStrand, null, fields);\n+    }\n+\n+    public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Strand currentStrand,\n+                                                Object... fieldValues) {\n+        //This method duplicates the createObjectValue with referencing the issue in runtime API getting strand\n+        ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n+        Object[] fields = new Object[fieldValues.length * 2];\n \n         // Adding boolean values for each arg\n         for (int i = 0, j = 0; i < fieldValues.length; i++) {\n             fields[j++] = fieldValues[i];\n             fields[j++] = true;\n         }\n-        //passing scheduler, strand and properties as null for the moment, but better to expose them via this method\n-        return valueCreator.createObjectValue(objectTypeName, null, null, null, fields);\n+        //passing scheduler of current strand\n+        return valueCreator.createObjectValue(objectTypeName, currentStrand.scheduler, currentStrand,\n+                null, fields);\n+    }\n+\n+    private static Scheduler getScheduler(Strand currentStrand) {\n+        try {\n+            return currentStrand.scheduler;\n+        } catch (Exception ex) {\n+            return null;\n+        }\n+    }\n+\n+    private static Strand getStrand() {\n+        try {\n+            return Scheduler.getStrand();\n+        } catch (Exception ex) {\n+            //ignore : isssue is opened to fix this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a37d02e2498c209c716ea0d95ccaa013144ca"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNjYwMQ==", "bodyText": "Added issue reference in the latest commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r417116601", "createdAt": "2020-04-29T07:26:56Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,46 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Strand currentStrand = getStrand();\n+        // Adding boolean values for each arg\n+        for (int i = 0, j = 0; i < fieldValues.length; i++) {\n+            fields[j++] = fieldValues[i];\n+            fields[j++] = true;\n+        }\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(currentStrand), currentStrand, null, fields);\n+    }\n+\n+    public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Strand currentStrand,\n+                                                Object... fieldValues) {\n+        //This method duplicates the createObjectValue with referencing the issue in runtime API getting strand\n+        ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n+        Object[] fields = new Object[fieldValues.length * 2];\n \n         // Adding boolean values for each arg\n         for (int i = 0, j = 0; i < fieldValues.length; i++) {\n             fields[j++] = fieldValues[i];\n             fields[j++] = true;\n         }\n-        //passing scheduler, strand and properties as null for the moment, but better to expose them via this method\n-        return valueCreator.createObjectValue(objectTypeName, null, null, null, fields);\n+        //passing scheduler of current strand\n+        return valueCreator.createObjectValue(objectTypeName, currentStrand.scheduler, currentStrand,\n+                null, fields);\n+    }\n+\n+    private static Scheduler getScheduler(Strand currentStrand) {\n+        try {\n+            return currentStrand.scheduler;\n+        } catch (Exception ex) {\n+            return null;\n+        }\n+    }\n+\n+    private static Strand getStrand() {\n+        try {\n+            return Scheduler.getStrand();\n+        } catch (Exception ex) {\n+            //ignore : isssue is opened to fix this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3NTAxOA=="}, "originalCommit": {"oid": "2d5a37d02e2498c209c716ea0d95ccaa013144ca"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTMyODQyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDoyNjoxOFrOGNNWtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDoyNjoxOFrOGNNWtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwMzQ3OQ==", "bodyText": "no need to catch Exception for this, just do a null check. Caching Exception is a last resort solution, should try to avoid it when possible.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r416503479", "createdAt": "2020-04-28T10:26:18Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,46 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Strand currentStrand = getStrand();\n+        // Adding boolean values for each arg\n+        for (int i = 0, j = 0; i < fieldValues.length; i++) {\n+            fields[j++] = fieldValues[i];\n+            fields[j++] = true;\n+        }\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(currentStrand), currentStrand, null, fields);\n+    }\n+\n+    public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Strand currentStrand,\n+                                                Object... fieldValues) {\n+        //This method duplicates the createObjectValue with referencing the issue in runtime API getting strand\n+        ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n+        Object[] fields = new Object[fieldValues.length * 2];\n \n         // Adding boolean values for each arg\n         for (int i = 0, j = 0; i < fieldValues.length; i++) {\n             fields[j++] = fieldValues[i];\n             fields[j++] = true;\n         }\n-        //passing scheduler, strand and properties as null for the moment, but better to expose them via this method\n-        return valueCreator.createObjectValue(objectTypeName, null, null, null, fields);\n+        //passing scheduler of current strand\n+        return valueCreator.createObjectValue(objectTypeName, currentStrand.scheduler, currentStrand,\n+                null, fields);\n+    }\n+\n+    private static Scheduler getScheduler(Strand currentStrand) {\n+        try {\n+            return currentStrand.scheduler;\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a37d02e2498c209c716ea0d95ccaa013144ca"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTU2OTg0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTozNDoyMlrOGNPpdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDozODoxOFrOGN5FXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MTA0Nw==", "bodyText": "Lets make this method call the other createObjectValue, that way we can remove most of the body in this method. see default parameter pattern here : https://www.baeldung.com/java-default-parameters-method-overloading", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r416541047", "createdAt": "2020-04-28T11:34:22Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,46 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Strand currentStrand = getStrand();\n+        // Adding boolean values for each arg\n+        for (int i = 0, j = 0; i < fieldValues.length; i++) {\n+            fields[j++] = fieldValues[i];\n+            fields[j++] = true;\n+        }\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(currentStrand), currentStrand, null, fields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d5a37d02e2498c209c716ea0d95ccaa013144ca"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxOTkzNA==", "bodyText": "Changed in the latest commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r417219934", "createdAt": "2020-04-29T10:38:18Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,46 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Strand currentStrand = getStrand();\n+        // Adding boolean values for each arg\n+        for (int i = 0, j = 0; i < fieldValues.length; i++) {\n+            fields[j++] = fieldValues[i];\n+            fields[j++] = true;\n+        }\n+        return valueCreator.createObjectValue(objectTypeName, getScheduler(currentStrand), currentStrand, null, fields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MTA0Nw=="}, "originalCommit": {"oid": "2d5a37d02e2498c209c716ea0d95ccaa013144ca"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTU1OTQ3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0Mzo1M1rOGN1RNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDozMDowMFrOGN40YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1NzQyOQ==", "bodyText": "let's add a deprecated annotation here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r417157429", "createdAt": "2020-04-29T08:43:53Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,45 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f571ad17dd8fac053b785ea4a16a1d8d904d6e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNTU4NA==", "bodyText": "Did it in the last commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r417215584", "createdAt": "2020-04-29T10:30:00Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -79,14 +81,45 @@\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1NzQyOQ=="}, "originalCommit": {"oid": "44f571ad17dd8fac053b785ea4a16a1d8d904d6e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDAzMzQyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/workers/wait-for-one-actions.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOToyMzo0OVrOGP4rzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOToyMzo0OVrOGP4rzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxMDU0Mw==", "bodyText": "Shall we wait for accumulator and assign to a field and assert?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r419310543", "createdAt": "2020-05-04T09:23:49Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/workers/wait-for-one-actions.bal", "diffHunk": "@@ -124,3 +124,18 @@ function add_panic(int i, int j) returns int {\n     }\n     return k;\n }\n+\n+type Student object {\n+    public string name;\n+    public function __init() {\n+        future<int> accumulator = start add(2, 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b92d828f9bbf170abe07100b405f3dd97a71403a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDAzNTM1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/worker/WaitForOneActionsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOToyNDoxNVrOGP4s4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOToyNDoxNVrOGP4s4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxMDgxNg==", "bodyText": "Shall we use a meaningful name for the testcase?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r419310816", "createdAt": "2020-05-04T09:24:15Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/worker/WaitForOneActionsTest.java", "diffHunk": "@@ -101,4 +101,9 @@ public void waitTest9() {\n         Assert.assertEquals(vals.length, 1);\n         Assert.assertEquals(vals[0], null);\n     }\n+\n+    @Test\n+    public void waitTest10() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b92d828f9bbf170abe07100b405f3dd97a71403a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDA1NjIzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowNDowMFrOGXUg6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowNDowMFrOGXUg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNjUzNg==", "bodyText": "can we remove individual null checks and move it to the if block below (at line 104)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r427106536", "createdAt": "2020-05-19T08:04:00Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -76,17 +79,51 @@\n      * @param fieldValues values to be used for fields when creating the object value instance.\n      * @return value of the object.\n      */\n+    @Deprecated\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n+        return createObjectValue(packageId, objectTypeName, getStrand(), fieldValues);\n+    }\n+\n+    private static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Strand currentStrand,\n+                                                Object... fieldValues) {\n+        //This method duplicates the createObjectValue with referencing the issue in runtime API getting strand\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Scheduler scheduler = currentStrand != null ? currentStrand.scheduler : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b651d6874ccf4c7384d1c4bfe2a7d014fd564c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDA2MDkxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowNToxN1rOGXUj1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowNToxN1rOGXUj1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNzI4NQ==", "bodyText": "Isn't it enough to check currentStrand != null why do we check currentStrand.getState() != State.RUNNABLE ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r427107285", "createdAt": "2020-05-19T08:05:17Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -76,17 +79,51 @@\n      * @param fieldValues values to be used for fields when creating the object value instance.\n      * @return value of the object.\n      */\n+    @Deprecated\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n+        return createObjectValue(packageId, objectTypeName, getStrand(), fieldValues);\n+    }\n+\n+    private static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Strand currentStrand,\n+                                                Object... fieldValues) {\n+        //This method duplicates the createObjectValue with referencing the issue in runtime API getting strand\n         ValueCreator valueCreator = ValueCreator.getValueCreator(packageId.toString());\n         Object[] fields = new Object[fieldValues.length * 2];\n+        Scheduler scheduler = currentStrand != null ? currentStrand.scheduler : null;\n+        State prevState = currentStrand != null ? currentStrand.getState() : State.RUNNABLE;\n+        boolean prevBlockedOnExtern = currentStrand != null && currentStrand.blockedOnExtern;\n+        ObjectValue returnObjectValue;\n \n         // Adding boolean values for each arg\n         for (int i = 0, j = 0; i < fieldValues.length; i++) {\n             fields[j++] = fieldValues[i];\n             fields[j++] = true;\n         }\n-        //passing scheduler, strand and properties as null for the moment, but better to expose them via this method\n-        return valueCreator.createObjectValue(objectTypeName, null, null, null, fields);\n+        try {\n+            //Check for non-blocking call\n+            if (currentStrand != null && currentStrand.getState() != State.RUNNABLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b651d6874ccf4c7384d1c4bfe2a7d014fd564c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDczOTk5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOToxNjoyOFrOGYCpOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOToxNjoyOFrOGYCpOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2MjMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                            Object... fieldValues) {\n          \n          \n            \n                                                             Object... fieldValues) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22913#discussion_r427862329", "createdAt": "2020-05-20T09:16:28Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaValues.java", "diffHunk": "@@ -76,17 +79,54 @@\n      * @param fieldValues values to be used for fields when creating the object value instance.\n      * @return value of the object.\n      */\n+    @Deprecated\n     public static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Object... fieldValues) {\n+        return createObjectValue(packageId, objectTypeName, getStrand(), fieldValues);\n+    }\n+\n+    private static ObjectValue createObjectValue(BPackage packageId, String objectTypeName, Strand currentStrand,\n+                                                Object... fieldValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "480c929543fdad5fe5ce6766944ec28c78306419"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3798, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}