{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NDQwNTAw", "number": 21839, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTozNDowNFrODoeZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyODowMlrODogdKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzY3NzEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTozNDowNFrOF3DBcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTozNDowNFrOF3DBcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2NTUyMw==", "bodyText": "Can invert this condition right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393265523", "createdAt": "2020-03-16T19:34:04Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzY4MDE2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.xml/src/main/ballerina/src/lang.xml/xml.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTozNToxMVrOF3DDcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1MTo0NVrOF3FU-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2NjAzMg==", "bodyText": "Any particular reason why these public constants are in lower case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393266032", "createdAt": "2020-03-16T19:35:11Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.xml/src/main/ballerina/src/lang.xml/xml.bal", "diffHunk": "@@ -14,8 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-const string XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n-const string XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n+# The namespace URI bound to the `xml` prefix.\n+public const string XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n+# The namespace URI bound to the `xmlns` prefix.\n+public const string XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n+\n+# The expanded name of the `xml:space` attribute.\n+public const string space = \"{http://www.w3.org/XML/1998/namespace}space\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzI5MQ==", "bodyText": "I guess these come from the spec.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393303291", "createdAt": "2020-03-16T20:51:45Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.xml/src/main/ballerina/src/lang.xml/xml.bal", "diffHunk": "@@ -14,8 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-const string XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n-const string XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n+# The namespace URI bound to the `xml` prefix.\n+public const string XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n+# The namespace URI bound to the `xmlns` prefix.\n+public const string XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n+\n+# The expanded name of the `xml:space` attribute.\n+public const string space = \"{http://www.w3.org/XML/1998/namespace}space\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2NjAzMg=="}, "originalCommit": {"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzY5MTI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTozOTowMVrOF3DKig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjowMzozOFrOF3HQaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2Nzg1MA==", "bodyText": "I'm assuming the above logic is for constants of the form \"{http://www.w3.org/XML/1998/namespace}space\"? If so, is it a possibility to have multiple braces within such a string? In that case, would the result produced by this logic still be correct?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393267850", "createdAt": "2020-03-16T19:39:01Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {\n+            BConstantSymbol constantSymbol = (BConstantSymbol) constSymbol;\n+            if (constantSymbol.literalType.tag != TypeTags.STRING) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n+                        symTable.stringType, constantSymbol.literalType);\n+                resultType = symTable.semanticError;\n+                return null;\n+            } else {\n+                String constVal = (String) constantSymbol.value.value;\n+                int s = constVal.indexOf('{');\n+                int e = constVal.lastIndexOf('}');\n+                if (e > s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzNDg4OQ==", "bodyText": "Yey, it's URI, not an HTTP URL", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393334889", "createdAt": "2020-03-16T22:03:38Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {\n+            BConstantSymbol constantSymbol = (BConstantSymbol) constSymbol;\n+            if (constantSymbol.literalType.tag != TypeTags.STRING) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n+                        symTable.stringType, constantSymbol.literalType);\n+                resultType = symTable.semanticError;\n+                return null;\n+            } else {\n+                String constVal = (String) constantSymbol.value.value;\n+                int s = constVal.indexOf('{');\n+                int e = constVal.lastIndexOf('}');\n+                if (e > s) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2Nzg1MA=="}, "originalCommit": {"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzk4NjkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToxNzo0NlrOF3GFWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToxNzo0NlrOF3GFWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNTY3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n          \n          \n            \n                                    symTable.stringType, constantSymbol.literalType);\n          \n          \n            \n                            dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES, symTable.stringType, constantSymbol.literalType);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393315672", "createdAt": "2020-03-16T21:17:46Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {\n+            BConstantSymbol constantSymbol = (BConstantSymbol) constSymbol;\n+            if (constantSymbol.literalType.tag != TypeTags.STRING) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n+                        symTable.stringType, constantSymbol.literalType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzk5NTM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyMTowMFrOF3GK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyMTowMFrOF3GK3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNzA4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n          \n          \n            \n                        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n          \n          \n            \n                        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        resultType = symTable.semanticError;\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (xmlnsSymbol == null || xmlnsSymbol.getKind() != SymbolKind.XMLNS) {\n          \n          \n            \n                        resultType = symTable.semanticError;\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    BXMLNSSymbol symbol = (BXMLNSSymbol) xmlnsSymbol;\n          \n          \n            \n                    bLangXMLQName.namespaceURI = symbol.namespaceURI;\n          \n          \n            \n                    bLangXMLQName.nsSymbol = symbol;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393317086", "createdAt": "2020-03-16T21:21:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODAxMjA5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyNzoyNVrOF3GVnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyNzoyNVrOF3GVnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxOTgzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                xmlnsSymbol = new BXMLNSSymbol(names.fromString(constVal.substring(e)), nsURI,\n          \n          \n            \n                                        constantSymbol.pkgID, constantSymbol.owner);\n          \n          \n            \n                                pkgSymbol.isUsed = true;\n          \n          \n            \n                                return xmlnsSymbol;\n          \n          \n            \n                                pkgSymbol.isUsed = true;\n          \n          \n            \n                                return new BXMLNSSymbol(names.fromString(constVal.substring(e)), nsURI,\n          \n          \n            \n                                                        constantSymbol.pkgID, constantSymbol.owner);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393319837", "createdAt": "2020-03-16T21:27:25Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {\n+            BConstantSymbol constantSymbol = (BConstantSymbol) constSymbol;\n+            if (constantSymbol.literalType.tag != TypeTags.STRING) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n+                        symTable.stringType, constantSymbol.literalType);\n+                resultType = symTable.semanticError;\n+                return null;\n+            } else {\n+                String constVal = (String) constantSymbol.value.value;\n+                int s = constVal.indexOf('{');\n+                int e = constVal.lastIndexOf('}');\n+                if (e > s) {\n+                    String nsURI = constVal.substring(s + 1, e);\n+                    xmlnsSymbol = new BXMLNSSymbol(names.fromString(constVal.substring(e)), nsURI,\n+                            constantSymbol.pkgID, constantSymbol.owner);\n+                    pkgSymbol.isUsed = true;\n+                    return xmlnsSymbol;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODAxMzg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyODowMlrOF3GWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyODowMlrOF3GWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyMDEzMw==", "bodyText": "Do we need to set resultType here? Ideally should be done where called right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393320133", "createdAt": "2020-03-16T21:28:02Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {\n+            BConstantSymbol constantSymbol = (BConstantSymbol) constSymbol;\n+            if (constantSymbol.literalType.tag != TypeTags.STRING) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n+                        symTable.stringType, constantSymbol.literalType);\n+                resultType = symTable.semanticError;\n+                return null;\n+            } else {\n+                String constVal = (String) constantSymbol.value.value;\n+                int s = constVal.indexOf('{');\n+                int e = constVal.lastIndexOf('}');\n+                if (e > s) {\n+                    String nsURI = constVal.substring(s + 1, e);\n+                    xmlnsSymbol = new BXMLNSSymbol(names.fromString(constVal.substring(e)), nsURI,\n+                            constantSymbol.pkgID, constantSymbol.owner);\n+                    pkgSymbol.isUsed = true;\n+                    return xmlnsSymbol;\n+                }\n+                dlog.error(pos, DiagnosticCode.INVALID_ATTRIBUTE_REFERENCE, prefix + \":\" + localname);\n+                resultType = symTable.semanticError;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 724, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}