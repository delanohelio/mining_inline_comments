{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjQ5NzU5", "number": 21306, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoxMDozM1rODjZ1dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoxMTowN1rODjZ2TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDUwMDM3OnYy", "diffSide": "RIGHT", "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/BallerinaEditorFactoryListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoxMDozM1rOFvMTBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTo0NzoxMVrOFxdWKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAyODg3MQ==", "bodyText": "Shall we document these methods since it a public API?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21306#discussion_r385028871", "createdAt": "2020-02-27T10:10:33Z", "author": {"login": "rasika"}, "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/BallerinaEditorFactoryListener.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.intellij.openapi.editor.event.EditorFactoryEvent;\n+import com.intellij.openapi.editor.event.EditorFactoryListener;\n+import com.intellij.openapi.fileEditor.FileDocumentManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.testFramework.LightVirtualFileBase;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.preloading.LSPUtils.registerServerDefinition;\n+\n+/**\n+ * Editor listener implementation which is used to handle ballerina source files inside non-ballerina projects.\n+ *\n+ * @since 1.1.4\n+ */\n+public class BallerinaEditorFactoryListener implements EditorFactoryListener {\n+\n+    private Project project;\n+    private boolean balSourcesFound = false;\n+\n+    public BallerinaEditorFactoryListener(Project project) {\n+        this.project = project;\n+    }\n+\n+    @Override\n+    public void editorCreated(@NotNull EditorFactoryEvent event) {\n+        Project project = event.getEditor().getProject();\n+        if (project == null) {\n+            return;\n+        }\n+        VirtualFile file = FileDocumentManager.getInstance().getFile(event.getEditor().getDocument());\n+        if (!balSourcesFound && project.equals(this.project) && isBalFile(file)) {\n+            registerServerDefinition(project);\n+            balSourcesFound = true;\n+        }\n+    }\n+\n+    public static boolean isBalFile(@Nullable VirtualFile file) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6ba480e358eebaa75f8881f228ab4a086ab238"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNTM1NA==", "bodyText": "This supposed to be a private util method and corrected accordingly. Thanks for pointing that out.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21306#discussion_r387405354", "createdAt": "2020-03-04T01:47:11Z", "author": {"login": "NipunaRanasinghe"}, "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/BallerinaEditorFactoryListener.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.intellij.openapi.editor.event.EditorFactoryEvent;\n+import com.intellij.openapi.editor.event.EditorFactoryListener;\n+import com.intellij.openapi.fileEditor.FileDocumentManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.testFramework.LightVirtualFileBase;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.preloading.LSPUtils.registerServerDefinition;\n+\n+/**\n+ * Editor listener implementation which is used to handle ballerina source files inside non-ballerina projects.\n+ *\n+ * @since 1.1.4\n+ */\n+public class BallerinaEditorFactoryListener implements EditorFactoryListener {\n+\n+    private Project project;\n+    private boolean balSourcesFound = false;\n+\n+    public BallerinaEditorFactoryListener(Project project) {\n+        this.project = project;\n+    }\n+\n+    @Override\n+    public void editorCreated(@NotNull EditorFactoryEvent event) {\n+        Project project = event.getEditor().getProject();\n+        if (project == null) {\n+            return;\n+        }\n+        VirtualFile file = FileDocumentManager.getInstance().getFile(event.getEditor().getDocument());\n+        if (!balSourcesFound && project.equals(this.project) && isBalFile(file)) {\n+            registerServerDefinition(project);\n+            balSourcesFound = true;\n+        }\n+    }\n+\n+    public static boolean isBalFile(@Nullable VirtualFile file) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAyODg3MQ=="}, "originalCommit": {"oid": "ba6ba480e358eebaa75f8881f228ab4a086ab238"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDUwMjUzOnYy", "diffSide": "RIGHT", "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoxMTowN1rOFvMURw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNDo1ODoxOFrOFw4X_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAyOTE5MQ==", "bodyText": "Is this version correct?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21306#discussion_r385029191", "createdAt": "2020-02-27T10:11:07Z", "author": {"login": "rasika"}, "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.google.common.base.Strings;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.ui.MessageType;\n+import io.ballerina.plugins.idea.extensions.BallerinaLSPExtensionManager;\n+import io.ballerina.plugins.idea.notifiers.BallerinaAutoDetectNotifier;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdk;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdkUtils;\n+import io.ballerina.plugins.idea.settings.autodetect.BallerinaAutoDetectionSettings;\n+import io.ballerina.plugins.idea.settings.langserverlogs.LangServerLogsSettings;\n+import org.jetbrains.annotations.NotNull;\n+import org.wso2.lsp4intellij.IntellijLanguageClient;\n+import org.wso2.lsp4intellij.client.languageserver.serverdefinition.ProcessBuilderServerDefinition;\n+\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.BallerinaConstants.LAUNCHER_SCRIPT_PATH;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_EXPERIMENTAL;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_DEBUG;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_TRACE;\n+\n+/**\n+ * Language server protocol related utils.\n+ *\n+ * @since 1.1.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6ba480e358eebaa75f8881f228ab4a086ab238"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5OTYxMw==", "bodyText": "Yeah this is introduced with the 1.1.4 patch release", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21306#discussion_r386799613", "createdAt": "2020-03-03T04:58:18Z", "author": {"login": "NipunaRanasinghe"}, "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.google.common.base.Strings;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.ui.MessageType;\n+import io.ballerina.plugins.idea.extensions.BallerinaLSPExtensionManager;\n+import io.ballerina.plugins.idea.notifiers.BallerinaAutoDetectNotifier;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdk;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdkUtils;\n+import io.ballerina.plugins.idea.settings.autodetect.BallerinaAutoDetectionSettings;\n+import io.ballerina.plugins.idea.settings.langserverlogs.LangServerLogsSettings;\n+import org.jetbrains.annotations.NotNull;\n+import org.wso2.lsp4intellij.IntellijLanguageClient;\n+import org.wso2.lsp4intellij.client.languageserver.serverdefinition.ProcessBuilderServerDefinition;\n+\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.BallerinaConstants.LAUNCHER_SCRIPT_PATH;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_EXPERIMENTAL;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_DEBUG;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_TRACE;\n+\n+/**\n+ * Language server protocol related utils.\n+ *\n+ * @since 1.1.4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAyOTE5MQ=="}, "originalCommit": {"oid": "ba6ba480e358eebaa75f8881f228ab4a086ab238"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1011, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}