{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTA4Njgx", "number": 26806, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNTo0NzowM1rOE2T6Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozNzoxNVrOE94x2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mzg0NzU4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/values/BArray.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNTo0NzowNFrOHvEQFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNToyOToxM1rOHvIwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTExNDc3Mg==", "bodyText": "Is this change needed? The inherent type of a value cannot change once the value is created, so IMO, we shouldn't have such a method (which allows changing the type) in the public API.\nIf your requirement is to create an immutable value, IMO it should be done by allowing the user to pass both the type and the values and internally calling the relevant constructors that accept the same;\n\nio.ballerina.runtime.values.ArrayValueImpl#ArrayValueImpl(io.ballerina.runtime.api.types.ArrayType, long, io.ballerina.runtime.values.ListInitialValueEntry[])\nio.ballerina.runtime.values.MapValueImpl#MapValueImpl(io.ballerina.runtime.api.types.Type, io.ballerina.runtime.api.values.BMapInitialValueEntry[])", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r519114772", "createdAt": "2020-11-07T05:47:04Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/values/BArray.java", "diffHunk": "@@ -208,4 +209,10 @@\n     BArray slice(long startIndex, long endIndex);\n \n     void setLength(long i);\n+\n+    /**\n+     * Check and and set the array type as readonly.\n+     * @param type original Array type\n+     */\n+    BArray checkAndSetReadonly(ArrayType type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51458cd6c18d62e03839416d8cc1c522dd3a3f85"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4ODUzMQ==", "bodyText": "With the clarification from spec issue #646 we wouldn't need this API.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r519188531", "createdAt": "2020-11-07T15:29:13Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/values/BArray.java", "diffHunk": "@@ -208,4 +209,10 @@\n     BArray slice(long startIndex, long endIndex);\n \n     void setLength(long i);\n+\n+    /**\n+     * Check and and set the array type as readonly.\n+     * @param type original Array type\n+     */\n+    BArray checkAndSetReadonly(ArrayType type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTExNDc3Mg=="}, "originalCommit": {"oid": "51458cd6c18d62e03839416d8cc1c522dd3a3f85"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQyMzIwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Filter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMDo1OVrOHwSx6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzoyMTo1OVrOHwcQeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTM4Nw==", "bodyText": "Do we have set of methods we need to support read only?. I can see array reverse also we create array value with given array type without using element type. @MaryamZi @HindujaB", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r520401387", "createdAt": "2020-11-10T09:10:59Z", "author": {"login": "warunalakshitha"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Filter.java", "diffHunk": "@@ -44,7 +44,7 @@\n                                                                       ARRAY_VERSION, \"filter\");\n \n     public static BArray filter(BArray arr, BFunctionPointer<Object, Boolean> func) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad703e099705b8560969f7f74b058649344fe25"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxNDM3Nw==", "bodyText": "The doc does not specifically say that we return a new array (unlike some other functions as filter, map etc.).\nSo I found that currently we are not allowing the usage of reverse functionality for readonly types from front-end.\nhttps://ballerina.io/swan-lake/learn/api-docs/ballerina/lang.array/functions.html#reverse", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r520414377", "createdAt": "2020-11-10T09:30:00Z", "author": {"login": "HindujaB"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Filter.java", "diffHunk": "@@ -44,7 +44,7 @@\n                                                                       ARRAY_VERSION, \"filter\");\n \n     public static BArray filter(BArray arr, BFunctionPointer<Object, Boolean> func) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTM4Nw=="}, "originalCommit": {"oid": "aad703e099705b8560969f7f74b058649344fe25"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU1NjY2NA==", "bodyText": "With reverse I think there's actually a spec deviation, we shouldn't be returning a new array. See #26843.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r520556664", "createdAt": "2020-11-10T13:21:59Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Filter.java", "diffHunk": "@@ -44,7 +44,7 @@\n                                                                       ARRAY_VERSION, \"filter\");\n \n     public static BArray filter(BArray arr, BFunctionPointer<Object, Boolean> func) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTM4Nw=="}, "originalCommit": {"oid": "aad703e099705b8560969f7f74b058649344fe25"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njg5MzMyOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTowMzowMVrOHw-U3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTowMzowMVrOHw-U3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNDg0NQ==", "bodyText": "Since we are ding the same thing in all the methods, maybe we can use a DataProvider to simplify the code", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521114845", "createdAt": "2020-11-11T05:03:01Z", "author": {"login": "riyafa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -551,4 +551,9 @@ public void testSort9() {\n     public void testSort10() {\n         BRunUtil.invoke(compileResult, \"testSort10\");\n     }\n+\n+    @Test\n+    public void testReadOnlyArrayFilter() {\n+        BRunUtil.invoke(compileResult, \"testReadOnlyArrayFilter\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njg5Njk5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTowNToxMVrOHw-W_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTowNToxMVrOHw-W_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNTM5MA==", "bodyText": "can we use test:assertEquals?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521115390", "createdAt": "2020-11-11T05:05:11Z", "author": {"login": "riyafa"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "diffHunk": "@@ -1114,6 +1114,16 @@ function testAsyncFpArgsWithArrays() returns [int, int[]] {\n     return [reduce, filter];\n }\n \n+function testReadOnlyArrayFilter() {\n+    int[] & readonly numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+    int[] evenNumbers = numbers.filter(val => val % 2 == 0);\n+    int count = 0;\n+    foreach int number in evenNumbers {\n+        assertValueEquality(count * 2, number);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njg5Nzg0OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTowNTo0MVrOHw-XhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTowNTo0MVrOHw-XhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNTUyNA==", "bodyText": "can we use test:assertTrue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521115524", "createdAt": "2020-11-11T05:05:41Z", "author": {"login": "riyafa"}, "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -298,3 +302,16 @@ function testAsyncFpArgsWithMaps() returns [int, map<int>] {\n function getRandomNumber(int i) returns int {\n     return i + 2;\n }\n+\n+function testReadOnlyMapFilter() {\n+    map<int> & readonly marks = {\n+        science: 75,\n+        maths: 45,\n+        english: 85\n+    };\n+    map<int> passed = marks.filter(val => val > 50);\n+    assert(passed.length(), 2);\n+    passed.forEach(function(int value) {\n+        assertTrue(value > 50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjkwMDI3OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTowNzowMlrOHw-Y2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTozNDoxNlrOHw-0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNTg2NQ==", "bodyText": "I think we can use function in ballerina/test package instead of defining our own functions in all places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521115865", "createdAt": "2020-11-11T05:07:02Z", "author": {"login": "riyafa"}, "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "diffHunk": "@@ -683,3 +683,37 @@ function testPutValidDataToKeylessTbl() returns boolean {\n     testPassed = testPassed && tableToList[2] == intern1;\n     return testPassed;\n }\n+\n+function testReadOnlyTableFilter() {\n+    PersonalTable & readonly personTable = table [\n+      { name: \"Harry\", age: 14 },\n+      { name: \"Hermione\", age: 28 },\n+      { name: \"Ron\", age: 11 },\n+      { name: \"Draco\", age: 23 }\n+    ];\n+    table<Person> children = personTable.filter(function (Person person) returns boolean {\n+                                                      return person.age < 18;\n+                                                  });\n+    assertEquals(children.length(), 2);\n+    children.forEach(function(Person person) {\n+        assertTrue(person.age < 18);\n+    });\n+}\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertTrue(boolean actual) {\n+    assertEquals(true, actual);\n+}\n+\n+function assertEquals(anydata expected, anydata actual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyMjk5Mw==", "bodyText": "We usually try to avoid importing non-langlib modules in language tests. Once the compiler test framework (most of the  changes done in #24557) is fully integrated, the plan is to migrate all of these lang tests to that.\nIMO, we can go ahead with this approach for the time-being.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521122993", "createdAt": "2020-11-11T05:34:16Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "diffHunk": "@@ -683,3 +683,37 @@ function testPutValidDataToKeylessTbl() returns boolean {\n     testPassed = testPassed && tableToList[2] == intern1;\n     return testPassed;\n }\n+\n+function testReadOnlyTableFilter() {\n+    PersonalTable & readonly personTable = table [\n+      { name: \"Harry\", age: 14 },\n+      { name: \"Hermione\", age: 28 },\n+      { name: \"Ron\", age: 11 },\n+      { name: \"Draco\", age: 23 }\n+    ];\n+    table<Person> children = personTable.filter(function (Person person) returns boolean {\n+                                                      return person.age < 18;\n+                                                  });\n+    assertEquals(children.length(), 2);\n+    children.forEach(function(Person person) {\n+        assertTrue(person.age < 18);\n+    });\n+}\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertTrue(boolean actual) {\n+    assertEquals(true, actual);\n+}\n+\n+function assertEquals(anydata expected, anydata actual) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNTg2NQ=="}, "originalCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Njk0MTEyOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo0OTo1NlrOHyerTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo0OTo1NlrOHyerTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY5MzQ1Mw==", "bodyText": "use Object[]", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r522693453", "createdAt": "2020-11-13T06:49:56Z", "author": {"login": "HindujaB"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -517,38 +493,23 @@ public void testSort3() {\n         }\n     }\n \n-    @Test\n-    public void testSort4() {\n-        BRunUtil.invoke(compileResult, \"testSort4\");\n-    }\n-\n-    @Test\n-    public void testSort5() {\n-        BRunUtil.invoke(compileResult, \"testSort5\");\n-    }\n-\n-    @Test\n-    public void testSort6() {\n-        BRunUtil.invoke(compileResult, \"testSort6\");\n-    }\n-\n-    @Test\n-    public void testSort7() {\n-        BRunUtil.invoke(compileResult, \"testSort7\");\n-    }\n-\n-    @Test\n-    public void testSort8() {\n-        BRunUtil.invoke(compileResult, \"testSort8\");\n-    }\n-\n-    @Test\n-    public void testSort9() {\n-        BRunUtil.invoke(compileResult, \"testSort9\");\n-    }\n-\n-    @Test\n-    public void testSort10() {\n-        BRunUtil.invoke(compileResult, \"testSort10\");\n+    @DataProvider(name = \"FunctionList\")\n+    public Object[][] testFunctions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d15ba60deec388972a954bb7d7278747ec132c"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzI3NTQxOnYy", "diffSide": "RIGHT", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Filter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMTo1N1rOH6zkGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMTo1N1rOH6zkGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDI4Mw==", "bodyText": "Can't we directly create newMapType for the map and record cases instead of introducing a separate variable for the constraint?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531424283", "createdAt": "2020-11-27T07:31:57Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Filter.java", "diffHunk": "@@ -52,17 +53,19 @@\n     public static BMap filter(BMap<?, ?> m, BFunctionPointer<Object, Boolean> func) {\n         Type mapType = m.getType();\n         Type newMapType;\n+        Type newConstraint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzI3ODE4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/Filter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMjo1NlrOH6zlpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMjo1NlrOH6zlpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDY3OA==", "bodyText": "The variable name isn't quite correct here, right? It's not the new type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531424678", "createdAt": "2020-11-27T07:32:56Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/Filter.java", "diffHunk": "@@ -51,8 +51,10 @@\n                                                                       TABLE_VERSION, \"filter\");\n \n     public static BTable filter(BTable tbl, BFunctionPointer<Object, Boolean> func) {\n-        Type newTableType = tbl.getType();\n-        BTable newTable = ValueCreator.createTableValue((TableType) newTableType);\n+        TableType newTableType = (TableType) tbl.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzI4NTg4OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozNjowOVrOH6zp_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozNjowOVrOH6zp_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNTc4OQ==", "bodyText": "Shall we also assert that the new value is not immutable? Please add for the map, table, and record tests too.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }\n          \n          \n            \n                assertFalse(evenNumbers.isReadOnly());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531425789", "createdAt": "2020-11-27T07:36:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "diffHunk": "@@ -1114,6 +1114,16 @@ function testAsyncFpArgsWithArrays() returns [int, int[]] {\n     return [reduce, filter];\n }\n \n+function testReadOnlyArrayFilter() {\n+    int[] & readonly numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+    int[] evenNumbers = numbers.filter(val => val % 2 == 0);\n+    int count = 0;\n+    foreach int number in evenNumbers {\n+        assertValueEquality(count * 2, number);\n+        count += 1;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzI4ODU4OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozNzoxNVrOH6zriQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwODowMTo1MFrOH7hLsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNjE4NQ==", "bodyText": "Shall we also assert that each person value is immutable?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531426185", "createdAt": "2020-11-27T07:37:15Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "diffHunk": "@@ -683,3 +683,37 @@ function testPutValidDataToKeylessTbl() returns boolean {\n     testPassed = testPassed && tableToList[2] == intern1;\n     return testPassed;\n }\n+\n+function testReadOnlyTableFilter() {\n+    PersonalTable & readonly personTable = table [\n+      { name: \"Harry\", age: 14 },\n+      { name: \"Hermione\", age: 28 },\n+      { name: \"Ron\", age: 11 },\n+      { name: \"Draco\", age: 23 }\n+    ];\n+    table<Person> children = personTable.filter(function (Person person) returns boolean {\n+                                                      return person.age < 18;\n+                                                  });\n+    assertEquals(children.length(), 2);\n+    children.forEach(function(Person person) {\n+        assertTrue(person.age < 18);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE3MTY5Ng==", "bodyText": "Updated in last commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r532171696", "createdAt": "2020-11-29T08:01:50Z", "author": {"login": "HindujaB"}, "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "diffHunk": "@@ -683,3 +683,37 @@ function testPutValidDataToKeylessTbl() returns boolean {\n     testPassed = testPassed && tableToList[2] == intern1;\n     return testPassed;\n }\n+\n+function testReadOnlyTableFilter() {\n+    PersonalTable & readonly personTable = table [\n+      { name: \"Harry\", age: 14 },\n+      { name: \"Hermione\", age: 28 },\n+      { name: \"Ron\", age: 11 },\n+      { name: \"Draco\", age: 23 }\n+    ];\n+    table<Person> children = personTable.filter(function (Person person) returns boolean {\n+                                                      return person.age < 18;\n+                                                  });\n+    assertEquals(children.length(), 2);\n+    children.forEach(function(Person person) {\n+        assertTrue(person.age < 18);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNjE4NQ=="}, "originalCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3106, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}