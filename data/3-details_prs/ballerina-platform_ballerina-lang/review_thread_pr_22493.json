{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NTM4MDM1", "number": 22493, "reviewThreads": {"totalCount": 96, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoxOTowN1rODwSL7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0Mzo1MlrODx-Unw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU2MjA2OnYy", "diffSide": "RIGHT", "path": "examples/url-encode-decode/url_encode_decode.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoxOTowN1rOGDMfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoxOTowN1rOGDMfow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwMzYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406003619", "createdAt": "2020-04-09T07:19:07Z", "author": {"login": "ldclakmal"}, "path": "examples/url-encode-decode/url_encode_decode.bal", "diffHunk": "@@ -0,0 +1,25 @@\n+import ballerina/encoding;\n+import ballerina/io;\n+import ballerina/lang.'string as str;\n+\n+public function main() returns error? {\n+    string encodingValue = \"abc123!?$*&()'-=@~\";\n+    // Encoding a URL into a Base64 encoded string.\n+    string urlEncodedValue = encoding:encodeBase64Url(encodingValue.toBytes());\n+    io:println(\"Base64 URL encoded value: \" + urlEncodedValue);\n+\n+    string decodingValue = \"YWJjMTIzIT8kKiYoKSctPUB-\";\n+    // Decoding a Base64 URL encoded string into a byte array.\n+    byte[] urlDecodedValue = check encoding:decodeBase64Url(decodingValue);\n+    io:println(\"Base64 URL decoded value: \" + check str:fromBytes(urlDecodedValue));\n+\n+    string encodingUriComp = \"data=value\";\n+    // Encoding a URI component into a string\n+    string encodedUriComponent = check encoding:encodeUriComponent(encodingUriComp, \"UTF-8\");\n+    io:println(\"URI encoded value: \" + encodedUriComponent);\n+\n+    string data = \"data%3Dvalue\";\n+    // Decoding an encoded URI component into a string\n+    string decodedUriComponent = check encoding:decodeUriComponent(data, \"UTF-8\");\n+    io:println(\"URI decoded value: \" + decodedUriComponent);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a0395d64a140e1d239ea3f26591cb397fd1f34"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU2Mzg3OnYy", "diffSide": "RIGHT", "path": "examples/index.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoxOTo0NVrOGDMgtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoxOTo0NVrOGDMgtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwMzg5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"name\": \"URL encode/decode operations\",\n          \n          \n            \n                            \"name\": \"URL Encode/Decode Operations\",", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406003895", "createdAt": "2020-04-09T07:19:45Z", "author": {"login": "ldclakmal"}, "path": "examples/index.json", "diffHunk": "@@ -630,6 +630,10 @@\n             {\n                 \"name\": \"Cryptographic Operations\",\n                 \"url\": \"crypto\"\n+            },\n+            {\n+                \"name\": \"URL encode/decode operations\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a0395d64a140e1d239ea3f26591cb397fd1f34"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY4NTc3OnYy", "diffSide": "RIGHT", "path": "examples/url-encode-decode/url_encode_decode.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1Nzo1MlrOGDNrxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1Nzo1MlrOGDNrxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMzEwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encoding a URL into a Base64 encoded string.\n          \n          \n            \n                // Encoding a URL into a Base64-encoded string.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406023108", "createdAt": "2020-04-09T07:57:52Z", "author": {"login": "praneesha"}, "path": "examples/url-encode-decode/url_encode_decode.bal", "diffHunk": "@@ -0,0 +1,25 @@\n+import ballerina/encoding;\n+import ballerina/io;\n+import ballerina/lang.'string as str;\n+\n+public function main() returns error? {\n+    string encodingValue = \"abc123!?$*&()'-=@~\";\n+    // Encoding a URL into a Base64 encoded string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY4NjgxOnYy", "diffSide": "RIGHT", "path": "examples/url-encode-decode/url_encode_decode.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1ODoxMVrOGDNsZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1ODoxMVrOGDNsZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMzI3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encoding a URI component into a string\n          \n          \n            \n                // Encoding a URI component into a string.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406023270", "createdAt": "2020-04-09T07:58:11Z", "author": {"login": "praneesha"}, "path": "examples/url-encode-decode/url_encode_decode.bal", "diffHunk": "@@ -0,0 +1,25 @@\n+import ballerina/encoding;\n+import ballerina/io;\n+import ballerina/lang.'string as str;\n+\n+public function main() returns error? {\n+    string encodingValue = \"abc123!?$*&()'-=@~\";\n+    // Encoding a URL into a Base64 encoded string.\n+    string urlEncodedValue = encoding:encodeBase64Url(encodingValue.toBytes());\n+    io:println(\"Base64 URL encoded value: \" + urlEncodedValue);\n+\n+    string decodingValue = \"YWJjMTIzIT8kKiYoKSctPUB-\";\n+    // Decoding a Base64 URL encoded string into a byte array.\n+    byte[] urlDecodedValue = check encoding:decodeBase64Url(decodingValue);\n+    io:println(\"Base64 URL decoded value: \" + check str:fromBytes(urlDecodedValue));\n+\n+    string encodingUriComp = \"data=value\";\n+    // Encoding a URI component into a string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY4NzQwOnYy", "diffSide": "RIGHT", "path": "examples/url-encode-decode/url_encode_decode.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1ODoyM1rOGDNswA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1ODoyM1rOGDNswA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMzM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Decoding an encoded URI component into a string\n          \n          \n            \n                // Decoding an encoded URI component into a string.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406023360", "createdAt": "2020-04-09T07:58:23Z", "author": {"login": "praneesha"}, "path": "examples/url-encode-decode/url_encode_decode.bal", "diffHunk": "@@ -0,0 +1,25 @@\n+import ballerina/encoding;\n+import ballerina/io;\n+import ballerina/lang.'string as str;\n+\n+public function main() returns error? {\n+    string encodingValue = \"abc123!?$*&()'-=@~\";\n+    // Encoding a URL into a Base64 encoded string.\n+    string urlEncodedValue = encoding:encodeBase64Url(encodingValue.toBytes());\n+    io:println(\"Base64 URL encoded value: \" + urlEncodedValue);\n+\n+    string decodingValue = \"YWJjMTIzIT8kKiYoKSctPUB-\";\n+    // Decoding a Base64 URL encoded string into a byte array.\n+    byte[] urlDecodedValue = check encoding:decodeBase64Url(decodingValue);\n+    io:println(\"Base64 URL decoded value: \" + check str:fromBytes(urlDecodedValue));\n+\n+    string encodingUriComp = \"data=value\";\n+    // Encoding a URI component into a string\n+    string encodedUriComponent = check encoding:encodeUriComponent(encodingUriComp, \"UTF-8\");\n+    io:println(\"URI encoded value: \" + encodedUriComponent);\n+\n+    string data = \"data%3Dvalue\";\n+    // Decoding an encoded URI component into a string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5MTYxOnYy", "diffSide": "RIGHT", "path": "stdlib/encoding/src/main/ballerina/src/encoding/encoding.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1OTozM1rOGDNvWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1OTozM1rOGDNvWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDAyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decoded output or an `Error` if input is not a valid Base64 URL encoded value\n          \n          \n            \n            # + return - Decoded output or else an `Error` if the input is not a valid Base64 URL encoded value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406024026", "createdAt": "2020-04-09T07:59:33Z", "author": {"login": "praneesha"}, "path": "stdlib/encoding/src/main/ballerina/src/encoding/encoding.bal", "diffHunk": "@@ -30,9 +34,12 @@ function externEncodeBase64Url(byte[] input) returns handle = @java:Method {\n } external;\n \n # Decodes the Base64 URL encoded `string` into a byte array.\n+# ```ballerina\n+#  byte[]|encoding:Error urlDecodedValue = encoding:decodeBase64Url(\"SGVsbMO2IFfDtnJsZEBCYWxsZXJpbmE\");\n+# ```\n #\n # + input - Value to be decoded\n-# + return - Decoded output or `Error` if input is not a valid Base64 URL encoded value\n+# + return - Decoded output or an `Error` if input is not a valid Base64 URL encoded value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5MzUyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMDowNVrOGDNwfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMDowNVrOGDNwfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDMxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The module provides functions to set and get an entity body from different kinds of message types, such as XML, text, JSON, byte[], and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc. \n          \n          \n            \n            The module provides functions to set and get an entity body from different kinds of message types such as XML, text, JSON, byte[], and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406024318", "createdAt": "2020-04-09T08:00:05Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "diffHunk": "@@ -1,114 +1,10 @@\n-## Module Overview\n-\n This module provides functions to encapsulate multiple body parts, such as attachments in a single message. The\n  communication of such messages follow the MIME (Multipurpose Internet Mail Extensions) specification as specified in\n   the [RFC 2045 standard](https://www.ietf.org/rfc/rfc2045.txt).\n \n > Entity refers to the header fields and the content of a message, or a part of the body in a multipart entity. \n \n ### Modify and retrieve the data in an entity\n-The module provides functions to set and get an entity body from different kinds of message types, such as XML, text, JSON, blob, and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc. \n-## Samples\n-### Handle multipart request\n-The sample service given below handles a multipart request. It extracts the body content from each part, converts it to a `string`, and sends a response.\n-\n-``` ballerina\n-import ballerina/http;\n-import ballerina/log;\n-import ballerina/mime;\n-\n-@http:ServiceConfig {\n-    basePath: \"/test\"\n-}\n-service test on new http:Listener(9090) {\n-\n-    @http:ResourceConfig {\n-        methods: [\"POST\"],\n-        path: \"/multipleparts\"\n-    }\n-    // The resource that handles multipart requests.\n-    resource function multipartResource(http:Caller caller, http:Request request) {\n-        http:Response response = new;\n-\n-        // Get the body parts from the request.\n-        var bodyParts = request.getBodyParts();\n-        if (bodyParts is mime:Entity[]) {\n-            string content = \"\";\n-            // Iterate through each body part and handle the content.\n-            foreach var part in bodyParts {\n-                content = content + \" -- \" + handleContent(part);\n-            }\n-            response.setPayload(<@untainted> content);\n-        } else {\n-            // If there is an error while getting the body parts, set the \n-            // response code as 500 and set the error message as the \n-            // response message.\n-            response.statusCode = 500;\n-            response.setPayload(<@untainted> bodyParts.reason());\n-        }\n-\n-        var result = caller->respond(response);\n-        if (result is error) {\n-            log:printError(\"Error in responding\", err = result);\n-        }\n-    }\n-}\n-\n-// The function that handles the content based on the body part type.\n-function handleContent(mime:Entity bodyPart) returns @tainted string {\n-    var mediaType = mime:getMediaType(bodyPart.getContentType());\n-    if (mediaType is mime:MediaType) {\n-        // Get the base type of the specific body part.\n-        string baseType = mediaType.getBaseType();\n-        // If the base type is \u2018application/xml\u2019 or \u2018text/xml\u2019, get the XML \n-        // content from body part.\n-        if (mime:APPLICATION_XML == baseType || mime:TEXT_XML == baseType) {\n-            var payload = bodyPart.getXml();\n-            if (payload is xml) {\n-                return payload.getTextValue();\n-            } else {\n-                return \"Error in parsing xml payload\";\n-            }\n-        } else if (mime:APPLICATION_JSON == baseType) {\n-            // If the base type is \u2018application/json\u2019, get the JSON content \n-            // from body part.\n-            var payload = bodyPart.getJson();\n-            if (payload is json) {\n-                return payload.toJsonString();\n-            } else {\n-                return \"Error in parsing json payload\";\n-            }\n-        }\n-    } else {\n-        return mediaType.reason();\n-    }\n-    return \"\";\n-}\n-```\n-\n-The sample request that is sent to the above service is shown below.\n-\n-```\n-curl -v -F \"request={\\\"param1\\\": \\\"value1\\\"};type=application/json\" -F \"language=ballerina;type=text/plain\" -F \"upload=@/home/path-to-file/encode.txt;type=application/octet-stream\"  http://localhost:9090/test/multipleparts -H \"Expect:\"\n-```\n-### Create a multipart request\n-Following code snippet creates a multipart request. It includes two body parts with `application/json` and `application/xml` content type.\n-\n-``` ballerina\n-// Create a JSON body part.\n-mime:Entity bodyPart1 = new;\n-// Set the JSON content.\n-bodyPart1.setJson({\"bodyPart\": \"jsonPart\"});\n-\n-// Create another body part using an XML file.\n-mime:Entity bodyPart2 = new;\n-bodyPart2.setFileAsEntityBody(\"ballerina/mime/file.xml\", contentType = mime:APPLICATION_XML);\n-\n-//Create an array to hold all the body parts.\n-mime:Entity[] bodyParts = [bodyPart1, bodyPart2];\n+The module provides functions to set and get an entity body from different kinds of message types, such as XML, text, JSON, byte[], and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5NTU0OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMDo0MFrOGDNxzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMDo0MFrOGDNxzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDY1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations in http requests with multiparts see [Request with multiparts BBE](https://ballerina.io/v1-2/learn/by-example/request-with-multiparts.html) and for handling responses with multiparts see [Response with multiparts BBE](https://ballerina.io/v1-2/learn/by-example/response-with-multiparts.html).\n          \n          \n            \n            For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations in HTTP requests with multiparts, see [Request with multiparts BBE](https://ballerina.io/v1-2/learn/by-example/request-with-multiparts.html) and for handling responses with multiparts, see [Response with multiparts BBE](https://ballerina.io/v1-2/learn/by-example/response-with-multiparts.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406024652", "createdAt": "2020-04-09T08:00:40Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "diffHunk": "@@ -1,114 +1,10 @@\n-## Module Overview\n-\n This module provides functions to encapsulate multiple body parts, such as attachments in a single message. The\n  communication of such messages follow the MIME (Multipurpose Internet Mail Extensions) specification as specified in\n   the [RFC 2045 standard](https://www.ietf.org/rfc/rfc2045.txt).\n \n > Entity refers to the header fields and the content of a message, or a part of the body in a multipart entity. \n \n ### Modify and retrieve the data in an entity\n-The module provides functions to set and get an entity body from different kinds of message types, such as XML, text, JSON, blob, and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc. \n-## Samples\n-### Handle multipart request\n-The sample service given below handles a multipart request. It extracts the body content from each part, converts it to a `string`, and sends a response.\n-\n-``` ballerina\n-import ballerina/http;\n-import ballerina/log;\n-import ballerina/mime;\n-\n-@http:ServiceConfig {\n-    basePath: \"/test\"\n-}\n-service test on new http:Listener(9090) {\n-\n-    @http:ResourceConfig {\n-        methods: [\"POST\"],\n-        path: \"/multipleparts\"\n-    }\n-    // The resource that handles multipart requests.\n-    resource function multipartResource(http:Caller caller, http:Request request) {\n-        http:Response response = new;\n-\n-        // Get the body parts from the request.\n-        var bodyParts = request.getBodyParts();\n-        if (bodyParts is mime:Entity[]) {\n-            string content = \"\";\n-            // Iterate through each body part and handle the content.\n-            foreach var part in bodyParts {\n-                content = content + \" -- \" + handleContent(part);\n-            }\n-            response.setPayload(<@untainted> content);\n-        } else {\n-            // If there is an error while getting the body parts, set the \n-            // response code as 500 and set the error message as the \n-            // response message.\n-            response.statusCode = 500;\n-            response.setPayload(<@untainted> bodyParts.reason());\n-        }\n-\n-        var result = caller->respond(response);\n-        if (result is error) {\n-            log:printError(\"Error in responding\", err = result);\n-        }\n-    }\n-}\n-\n-// The function that handles the content based on the body part type.\n-function handleContent(mime:Entity bodyPart) returns @tainted string {\n-    var mediaType = mime:getMediaType(bodyPart.getContentType());\n-    if (mediaType is mime:MediaType) {\n-        // Get the base type of the specific body part.\n-        string baseType = mediaType.getBaseType();\n-        // If the base type is \u2018application/xml\u2019 or \u2018text/xml\u2019, get the XML \n-        // content from body part.\n-        if (mime:APPLICATION_XML == baseType || mime:TEXT_XML == baseType) {\n-            var payload = bodyPart.getXml();\n-            if (payload is xml) {\n-                return payload.getTextValue();\n-            } else {\n-                return \"Error in parsing xml payload\";\n-            }\n-        } else if (mime:APPLICATION_JSON == baseType) {\n-            // If the base type is \u2018application/json\u2019, get the JSON content \n-            // from body part.\n-            var payload = bodyPart.getJson();\n-            if (payload is json) {\n-                return payload.toJsonString();\n-            } else {\n-                return \"Error in parsing json payload\";\n-            }\n-        }\n-    } else {\n-        return mediaType.reason();\n-    }\n-    return \"\";\n-}\n-```\n-\n-The sample request that is sent to the above service is shown below.\n-\n-```\n-curl -v -F \"request={\\\"param1\\\": \\\"value1\\\"};type=application/json\" -F \"language=ballerina;type=text/plain\" -F \"upload=@/home/path-to-file/encode.txt;type=application/octet-stream\"  http://localhost:9090/test/multipleparts -H \"Expect:\"\n-```\n-### Create a multipart request\n-Following code snippet creates a multipart request. It includes two body parts with `application/json` and `application/xml` content type.\n-\n-``` ballerina\n-// Create a JSON body part.\n-mime:Entity bodyPart1 = new;\n-// Set the JSON content.\n-bodyPart1.setJson({\"bodyPart\": \"jsonPart\"});\n-\n-// Create another body part using an XML file.\n-mime:Entity bodyPart2 = new;\n-bodyPart2.setFileAsEntityBody(\"ballerina/mime/file.xml\", contentType = mime:APPLICATION_XML);\n-\n-//Create an array to hold all the body parts.\n-mime:Entity[] bodyParts = [bodyPart1, bodyPart2];\n+The module provides functions to set and get an entity body from different kinds of message types, such as XML, text, JSON, byte[], and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc. \n \n-// Set the body parts to the outbound response.\n-http:Request outRequest = new;\n-// Set the content type as \u2018multipart/mixed\u2019 and set the body parts.\n-outRequest.setBodyParts(bodyParts, contentType = mime:MULTIPART_MIXED);\n-```\n+For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations in http requests with multiparts see [Request with multiparts BBE](https://ballerina.io/v1-2/learn/by-example/request-with-multiparts.html) and for handling responses with multiparts see [Response with multiparts BBE](https://ballerina.io/v1-2/learn/by-example/response-with-multiparts.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5NTk4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMDo0OVrOGDNyGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMDo0OVrOGDNyGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `application/octet-stream` media type.\n          \n          \n            \n            # Represents the `application/octet-stream` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406024728", "createdAt": "2020-04-09T08:00:49Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5NjM4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMDo1NlrOGDNyVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMDo1NlrOGDNyVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDc5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `application/json` media type.\n          \n          \n            \n            # Represents the `application/json` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406024791", "createdAt": "2020-04-09T08:00:56Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5Njc0OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTowMlrOGDNyjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTowMlrOGDNyjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDg0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `application/xml` media type.\n          \n          \n            \n            # Represents the `application/xml` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406024847", "createdAt": "2020-04-09T08:01:02Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5NzAyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTowOVrOGDNyvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTowOVrOGDNyvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDg5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `application/svg+xml` media type.\n          \n          \n            \n            # Represents the `application/svg+xml` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406024892", "createdAt": "2020-04-09T08:01:09Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5NzMyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMToxNVrOGDNy8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMToxNVrOGDNy8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDk0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `application/xhtml+xml` media type.\n          \n          \n            \n            # Represents the `application/xhtml+xml` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406024946", "createdAt": "2020-04-09T08:01:15Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5NzY4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMToyMVrOGDNzKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMToyMVrOGDNzKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTAwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `application/soap+xml` media type.\n          \n          \n            \n            # Represents the `application/soap+xml` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025002", "createdAt": "2020-04-09T08:01:21Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5ODAxOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMToyOVrOGDNzZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMToyOVrOGDNzZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTA2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `application/x-www-form-urlencoded` media type.\n          \n          \n            \n            # Represents the `application/x-www-form-urlencoded` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025061", "createdAt": "2020-04-09T08:01:29Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5ODM3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTozNlrOGDNznA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTozNlrOGDNznA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTExNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `application/pdf` media type.\n          \n          \n            \n            # Represents the `application/pdf` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025116", "createdAt": "2020-04-09T08:01:36Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5ODk2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTo0OFrOGDN0Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTo0OFrOGDN0Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTIyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `image/jpeg` media type.\n          \n          \n            \n            # Represents the `image/jpeg` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025222", "createdAt": "2020-04-09T08:01:48Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5OTE2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTo1MVrOGDN0Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTo1MVrOGDN0Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTI1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `image/gif` media type.\n          \n          \n            \n            # Represents the `image/gif` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025250", "createdAt": "2020-04-09T08:01:51Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTY5OTUyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTo1N1rOGDN0Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMTo1N1rOGDN0Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTMwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `image/png` media type.\n          \n          \n            \n            # Represents the `image/png` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025307", "createdAt": "2020-04-09T08:01:57Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.\n public const string IMAGE_GIF = \"image/gif\";\n \n-# Represent `image/png` media type.\n+# Represents `image/png` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwMDExOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjowNVrOGDN0uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjowNVrOGDN0uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `multipart/form-data` media type.\n          \n          \n            \n            # Represents the `multipart/form-data` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025403", "createdAt": "2020-04-09T08:02:05Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.\n public const string IMAGE_GIF = \"image/gif\";\n \n-# Represent `image/png` media type.\n+# Represents `image/png` media type.\n public const string IMAGE_PNG = \"image/png\";\n \n-# Represent `multipart/form-data` media type.\n+# Represents `multipart/form-data` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwMDUxOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjoxMVrOGDN08A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjoxMVrOGDN08A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTQ1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `multipart/mixed` media type.\n          \n          \n            \n            # Represents the `multipart/mixed` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025456", "createdAt": "2020-04-09T08:02:11Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.\n public const string IMAGE_GIF = \"image/gif\";\n \n-# Represent `image/png` media type.\n+# Represents `image/png` media type.\n public const string IMAGE_PNG = \"image/png\";\n \n-# Represent `multipart/form-data` media type.\n+# Represents `multipart/form-data` media type.\n public const string MULTIPART_FORM_DATA = \"multipart/form-data\";\n \n-# Represent `multipart/mixed` media type.\n+# Represents `multipart/mixed` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwMDc5OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjoxOFrOGDN1IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjoxOFrOGDN1IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTUwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `multipart/alternative` media type.\n          \n          \n            \n            # Represents the `multipart/alternative` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025505", "createdAt": "2020-04-09T08:02:18Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.\n public const string IMAGE_GIF = \"image/gif\";\n \n-# Represent `image/png` media type.\n+# Represents `image/png` media type.\n public const string IMAGE_PNG = \"image/png\";\n \n-# Represent `multipart/form-data` media type.\n+# Represents `multipart/form-data` media type.\n public const string MULTIPART_FORM_DATA = \"multipart/form-data\";\n \n-# Represent `multipart/mixed` media type.\n+# Represents `multipart/mixed` media type.\n public const string MULTIPART_MIXED = \"multipart/mixed\";\n \n-# Represent `multipart/alternative` media type.\n+# Represents `multipart/alternative` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwMTE4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjoyNFrOGDN1Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjoyNFrOGDN1Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTU2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `multipart/related` media type.\n          \n          \n            \n            # Represents the `multipart/related` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025562", "createdAt": "2020-04-09T08:02:24Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.\n public const string IMAGE_GIF = \"image/gif\";\n \n-# Represent `image/png` media type.\n+# Represents `image/png` media type.\n public const string IMAGE_PNG = \"image/png\";\n \n-# Represent `multipart/form-data` media type.\n+# Represents `multipart/form-data` media type.\n public const string MULTIPART_FORM_DATA = \"multipart/form-data\";\n \n-# Represent `multipart/mixed` media type.\n+# Represents `multipart/mixed` media type.\n public const string MULTIPART_MIXED = \"multipart/mixed\";\n \n-# Represent `multipart/alternative` media type.\n+# Represents `multipart/alternative` media type.\n public const string MULTIPART_ALTERNATIVE = \"multipart/alternative\";\n \n-# Represent `multipart/related` media type.\n+# Represents `multipart/related` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwMTYzOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjozMVrOGDN1oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjozMVrOGDN1oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTYzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `multipart/parallel` media type.\n          \n          \n            \n            # Represents the `multipart/parallel` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025633", "createdAt": "2020-04-09T08:02:31Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.\n public const string IMAGE_GIF = \"image/gif\";\n \n-# Represent `image/png` media type.\n+# Represents `image/png` media type.\n public const string IMAGE_PNG = \"image/png\";\n \n-# Represent `multipart/form-data` media type.\n+# Represents `multipart/form-data` media type.\n public const string MULTIPART_FORM_DATA = \"multipart/form-data\";\n \n-# Represent `multipart/mixed` media type.\n+# Represents `multipart/mixed` media type.\n public const string MULTIPART_MIXED = \"multipart/mixed\";\n \n-# Represent `multipart/alternative` media type.\n+# Represents `multipart/alternative` media type.\n public const string MULTIPART_ALTERNATIVE = \"multipart/alternative\";\n \n-# Represent `multipart/related` media type.\n+# Represents `multipart/related` media type.\n public const string MULTIPART_RELATED = \"multipart/related\";\n \n-# Represent `multipart/parallel` media type.\n+# Represents `multipart/parallel` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwMTk4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjozOFrOGDN11Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjozOFrOGDN11Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTY4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `text/plain` media type.\n          \n          \n            \n            # Represents the `text/plain` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025685", "createdAt": "2020-04-09T08:02:38Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.\n public const string IMAGE_GIF = \"image/gif\";\n \n-# Represent `image/png` media type.\n+# Represents `image/png` media type.\n public const string IMAGE_PNG = \"image/png\";\n \n-# Represent `multipart/form-data` media type.\n+# Represents `multipart/form-data` media type.\n public const string MULTIPART_FORM_DATA = \"multipart/form-data\";\n \n-# Represent `multipart/mixed` media type.\n+# Represents `multipart/mixed` media type.\n public const string MULTIPART_MIXED = \"multipart/mixed\";\n \n-# Represent `multipart/alternative` media type.\n+# Represents `multipart/alternative` media type.\n public const string MULTIPART_ALTERNATIVE = \"multipart/alternative\";\n \n-# Represent `multipart/related` media type.\n+# Represents `multipart/related` media type.\n public const string MULTIPART_RELATED = \"multipart/related\";\n \n-# Represent `multipart/parallel` media type.\n+# Represents `multipart/parallel` media type.\n public const string MULTIPART_PARALLEL = \"multipart/parallel\";\n \n-# Represent `text/plain` media type.\n+# Represents `text/plain` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwMjQ1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjo0NVrOGDN2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjo0NVrOGDN2Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTc1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `text/html` media type.\n          \n          \n            \n            # Represents the `text/html` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025750", "createdAt": "2020-04-09T08:02:45Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.\n public const string IMAGE_GIF = \"image/gif\";\n \n-# Represent `image/png` media type.\n+# Represents `image/png` media type.\n public const string IMAGE_PNG = \"image/png\";\n \n-# Represent `multipart/form-data` media type.\n+# Represents `multipart/form-data` media type.\n public const string MULTIPART_FORM_DATA = \"multipart/form-data\";\n \n-# Represent `multipart/mixed` media type.\n+# Represents `multipart/mixed` media type.\n public const string MULTIPART_MIXED = \"multipart/mixed\";\n \n-# Represent `multipart/alternative` media type.\n+# Represents `multipart/alternative` media type.\n public const string MULTIPART_ALTERNATIVE = \"multipart/alternative\";\n \n-# Represent `multipart/related` media type.\n+# Represents `multipart/related` media type.\n public const string MULTIPART_RELATED = \"multipart/related\";\n \n-# Represent `multipart/parallel` media type.\n+# Represents `multipart/parallel` media type.\n public const string MULTIPART_PARALLEL = \"multipart/parallel\";\n \n-# Represent `text/plain` media type.\n+# Represents `text/plain` media type.\n public const string TEXT_PLAIN = \"text/plain\";\n \n-# Represent `text/html` media type.\n+# Represents `text/html` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwMjg5OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjo1MlrOGDN2Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMjo1MlrOGDN2Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTgxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `text/xml` media type.\n          \n          \n            \n            # Represents the `text/xml` media type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025818", "createdAt": "2020-04-09T08:02:52Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/media-types.bal", "diffHunk": "@@ -14,59 +14,59 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represent `application/octet-stream` media type.\n+# Represents `application/octet-stream` media type.\n public const string APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n \n-# Represent `application/json` media type.\n+# Represents `application/json` media type.\n public const string APPLICATION_JSON = \"application/json\";\n \n-# Represent `application/xml` media type.\n+# Represents `application/xml` media type.\n public const string APPLICATION_XML = \"application/xml\";\n \n-# Represent `application/svg+xml` media type.\n+# Represents `application/svg+xml` media type.\n public const string APPLICATION_SVG_XML = \"application/svg+xml\";\n \n-# Represent `application/xhtml+xml` media type.\n+# Represents `application/xhtml+xml` media type.\n public const string APPLICATION_XHTML_XML = \"application/xhtml+xml\";\n \n-# Represent `application/soap+xml` media type.\n+# Represents `application/soap+xml` media type.\n public const string APPLICATION_SOAP_XML = \"application/soap+xml\";\n \n-# Represent `application/x-www-form-urlencoded` media type.\n+# Represents `application/x-www-form-urlencoded` media type.\n public const string APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n \n-# Represent `application/pdf` media type.\n+# Represents `application/pdf` media type.\n public const string APPLICATION_PDF = \"application/pdf\";\n \n-# Represent `image/jpeg` media type.\n+# Represents `image/jpeg` media type.\n public const string IMAGE_JPEG = \"image/jpeg\";\n \n-# Represent `image/gif` media type.\n+# Represents `image/gif` media type.\n public const string IMAGE_GIF = \"image/gif\";\n \n-# Represent `image/png` media type.\n+# Represents `image/png` media type.\n public const string IMAGE_PNG = \"image/png\";\n \n-# Represent `multipart/form-data` media type.\n+# Represents `multipart/form-data` media type.\n public const string MULTIPART_FORM_DATA = \"multipart/form-data\";\n \n-# Represent `multipart/mixed` media type.\n+# Represents `multipart/mixed` media type.\n public const string MULTIPART_MIXED = \"multipart/mixed\";\n \n-# Represent `multipart/alternative` media type.\n+# Represents `multipart/alternative` media type.\n public const string MULTIPART_ALTERNATIVE = \"multipart/alternative\";\n \n-# Represent `multipart/related` media type.\n+# Represents `multipart/related` media type.\n public const string MULTIPART_RELATED = \"multipart/related\";\n \n-# Represent `multipart/parallel` media type.\n+# Represents `multipart/parallel` media type.\n public const string MULTIPART_PARALLEL = \"multipart/parallel\";\n \n-# Represent `text/plain` media type.\n+# Represents `text/plain` media type.\n public const string TEXT_PLAIN = \"text/plain\";\n \n-# Represent `text/html` media type.\n+# Represents `text/html` media type.\n public const string TEXT_HTML = \"text/html\";\n \n-# Represent `text/xml` media type.\n+# Represents `text/xml` media type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwMzkwOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMzowOFrOGDN27g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMzowOFrOGDN27g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Identifies set header errors.\n          \n          \n            \n            # Identifies the set header errors.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406025966", "createdAt": "2020-04-09T08:03:08Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "diffHunk": "@@ -43,7 +43,7 @@ public const GENERIC_MIME_ERROR = \"{ballerina/mime}GenericMimeError\";\n # Represents a `GenericMimeError` with a detailed message.\n public type GenericMimeError error<GENERIC_MIME_ERROR, Detail>;\n \n-# Identifies set header failures.\n+# Identifies set header errors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwNDU2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMzoxOVrOGDN3Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMzoxOVrOGDN3Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNjA2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Identifies errors occured due to payloads with no content.\n          \n          \n            \n            # Identifies the errors occurred due to payloads with no content.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406026063", "createdAt": "2020-04-09T08:03:19Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "diffHunk": "@@ -80,7 +80,7 @@ public const IDLE_TIMEOUT_TRIGGERED = \"{ballerina/mime}IdleTimeoutTriggeredError\n # Represents a `IdleTimeoutTriggeredError` with a detailed message.\n public type IdleTimeoutTriggeredError error<IDLE_TIMEOUT_TRIGGERED, Detail>;\n \n-// Identifies no content errors in payload.\n+# Identifies errors occured due to payloads with no content.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwNTM1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMzozM1rOGDN30w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMzozM1rOGDN30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNjE5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + disposition - Indicates how the body part should be presented (`inline`, `attachment` or as `form-data`)\n          \n          \n            \n            # + disposition - Indicates how the body part should be presented (`inline`, `attachment`, or as `form-data`)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406026195", "createdAt": "2020-04-09T08:03:33Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -53,17 +53,19 @@ public const string CONTENT_DISPOSITION = \"content-disposition\";\n #\n # + fileName - Default filename for storing the bodypart, if the receiving agent wishes to store it in an external\n #              file\n-# + disposition - Indicates how the body part should be presented (inline, attachment or as form-data)\n+# + disposition - Indicates how the body part should be presented (`inline`, `attachment` or as `form-data`)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTcwNjIxOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMzo0NFrOGDN4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMzo0NFrOGDN4SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNjMxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + parameters - A set of parameters, specified in `attribute=value` notation\n          \n          \n            \n            # + parameters - A set of parameters specified in the `attribute=value` notation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r406026313", "createdAt": "2020-04-09T08:03:44Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -53,17 +53,19 @@ public const string CONTENT_DISPOSITION = \"content-disposition\";\n #\n # + fileName - Default filename for storing the bodypart, if the receiving agent wishes to store it in an external\n #              file\n-# + disposition - Indicates how the body part should be presented (inline, attachment or as form-data)\n+# + disposition - Indicates how the body part should be presented (`inline`, `attachment` or as `form-data`)\n # + name - Represents the field name in case of `multipart/form-data`\n-# + parameters - A set of parameters, specified in attribute=value notation\n+# + parameters - A set of parameters, specified in `attribute=value` notation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a61044a9bdca3cf765f85f075e625a33ca32595c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1NDgyOnYy", "diffSide": "RIGHT", "path": "stdlib/encoding/src/main/ballerina/src/encoding/encoding.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1Mjo1MlrOGEL9Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1Mjo1MlrOGEL9Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzM5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decoded output or else an `Error` if the input is not a valid Base64 URL encoded value\n          \n          \n            \n            # + return - Decoded output or else a `mime:Error` if the input is not a valid Base64 URL encoded value\n          \n      \n    \n    \n  \n\nNeed to specify the error type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043394", "createdAt": "2020-04-11T09:52:52Z", "author": {"login": "praneesha"}, "path": "stdlib/encoding/src/main/ballerina/src/encoding/encoding.bal", "diffHunk": "@@ -30,9 +34,12 @@ function externEncodeBase64Url(byte[] input) returns handle = @java:Method {\n } external;\n \n # Decodes the Base64 URL encoded `string` into a byte array.\n+# ```ballerina\n+# byte[]|encoding:Error urlDecodedValue = encoding:decodeBase64Url(\"SGVsbMO2IFfDtnJsZEBCYWxsZXJpbmE\");\n+# ```\n #\n # + input - Value to be decoded\n-# + return - Decoded output or `Error` if input is not a valid Base64 URL encoded value\n+# + return - Decoded output or else an `Error` if the input is not a valid Base64 URL encoded value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1NjA0OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NDowMlrOGEL90A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NDowMlrOGEL90A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzUzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides functions to encapsulate multiple body parts, such as attachments in a single message. The\n          \n          \n            \n            This module provides functions to encapsulate multiple body parts such as attachments in a single message. The", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043536", "createdAt": "2020-04-11T09:54:02Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "diffHunk": "@@ -1,114 +1,10 @@\n-## Module Overview\n-\n This module provides functions to encapsulate multiple body parts, such as attachments in a single message. The", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1NjQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NDozNFrOGEL-Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NDozNFrOGEL-Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzU5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The module provides functions to set and get an entity body from different kinds of message types, such as XML, text, JSON, byte[], and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc. \n          \n          \n            \n            This module provides functions to set and get an entity body from different kinds of message types such as XML, text, JSON, byte[], and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043591", "createdAt": "2020-04-11T09:54:34Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "diffHunk": "@@ -1,114 +1,10 @@\n-## Module Overview\n-\n This module provides functions to encapsulate multiple body parts, such as attachments in a single message. The\n  communication of such messages follow the MIME (Multipurpose Internet Mail Extensions) specification as specified in\n   the [RFC 2045 standard](https://www.ietf.org/rfc/rfc2045.txt).\n \n > Entity refers to the header fields and the content of a message, or a part of the body in a multipart entity. \n \n ### Modify and retrieve the data in an entity\n-The module provides functions to set and get an entity body from different kinds of message types, such as XML, text, JSON, blob, and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc. \n-## Samples\n-### Handle multipart request\n-The sample service given below handles a multipart request. It extracts the body content from each part, converts it to a `string`, and sends a response.\n-\n-``` ballerina\n-import ballerina/http;\n-import ballerina/log;\n-import ballerina/mime;\n-\n-@http:ServiceConfig {\n-    basePath: \"/test\"\n-}\n-service test on new http:Listener(9090) {\n-\n-    @http:ResourceConfig {\n-        methods: [\"POST\"],\n-        path: \"/multipleparts\"\n-    }\n-    // The resource that handles multipart requests.\n-    resource function multipartResource(http:Caller caller, http:Request request) {\n-        http:Response response = new;\n-\n-        // Get the body parts from the request.\n-        var bodyParts = request.getBodyParts();\n-        if (bodyParts is mime:Entity[]) {\n-            string content = \"\";\n-            // Iterate through each body part and handle the content.\n-            foreach var part in bodyParts {\n-                content = content + \" -- \" + handleContent(part);\n-            }\n-            response.setPayload(<@untainted> content);\n-        } else {\n-            // If there is an error while getting the body parts, set the \n-            // response code as 500 and set the error message as the \n-            // response message.\n-            response.statusCode = 500;\n-            response.setPayload(<@untainted> bodyParts.reason());\n-        }\n-\n-        var result = caller->respond(response);\n-        if (result is error) {\n-            log:printError(\"Error in responding\", err = result);\n-        }\n-    }\n-}\n-\n-// The function that handles the content based on the body part type.\n-function handleContent(mime:Entity bodyPart) returns @tainted string {\n-    var mediaType = mime:getMediaType(bodyPart.getContentType());\n-    if (mediaType is mime:MediaType) {\n-        // Get the base type of the specific body part.\n-        string baseType = mediaType.getBaseType();\n-        // If the base type is \u2018application/xml\u2019 or \u2018text/xml\u2019, get the XML \n-        // content from body part.\n-        if (mime:APPLICATION_XML == baseType || mime:TEXT_XML == baseType) {\n-            var payload = bodyPart.getXml();\n-            if (payload is xml) {\n-                return payload.getTextValue();\n-            } else {\n-                return \"Error in parsing xml payload\";\n-            }\n-        } else if (mime:APPLICATION_JSON == baseType) {\n-            // If the base type is \u2018application/json\u2019, get the JSON content \n-            // from body part.\n-            var payload = bodyPart.getJson();\n-            if (payload is json) {\n-                return payload.toJsonString();\n-            } else {\n-                return \"Error in parsing json payload\";\n-            }\n-        }\n-    } else {\n-        return mediaType.reason();\n-    }\n-    return \"\";\n-}\n-```\n-\n-The sample request that is sent to the above service is shown below.\n-\n-```\n-curl -v -F \"request={\\\"param1\\\": \\\"value1\\\"};type=application/json\" -F \"language=ballerina;type=text/plain\" -F \"upload=@/home/path-to-file/encode.txt;type=application/octet-stream\"  http://localhost:9090/test/multipleparts -H \"Expect:\"\n-```\n-### Create a multipart request\n-Following code snippet creates a multipart request. It includes two body parts with `application/json` and `application/xml` content type.\n-\n-``` ballerina\n-// Create a JSON body part.\n-mime:Entity bodyPart1 = new;\n-// Set the JSON content.\n-bodyPart1.setJson({\"bodyPart\": \"jsonPart\"});\n-\n-// Create another body part using an XML file.\n-mime:Entity bodyPart2 = new;\n-bodyPart2.setFileAsEntityBody(\"ballerina/mime/file.xml\", contentType = mime:APPLICATION_XML);\n-\n-//Create an array to hold all the body parts.\n-mime:Entity[] bodyParts = [bodyPart1, bodyPart2];\n+The module provides functions to set and get an entity body from different kinds of message types, such as XML, text, JSON, byte[], and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1Njk0OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NTowN1rOGEL-Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NTowN1rOGEL-Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Holds the details of entity header and body related errors.\n          \n          \n            \n            # Holds the details of the entity header and body-related errors.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043647", "createdAt": "2020-04-11T09:55:07Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "diffHunk": "@@ -16,8 +16,8 @@\n \n # Holds the details of entity header and body related errors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1NzA4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NToyNlrOGEL-VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NToyNlrOGEL-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzY2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents a `IdleTimeoutTriggeredError` with a detailed message.\n          \n          \n            \n            # Represents an `IdleTimeoutTriggeredError` with a detailed message.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043669", "createdAt": "2020-04-11T09:55:26Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "diffHunk": "@@ -80,7 +80,7 @@ public const IDLE_TIMEOUT_TRIGGERED = \"{ballerina/mime}IdleTimeoutTriggeredError\n # Represents a `IdleTimeoutTriggeredError` with a detailed message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1NzI3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NTo0MVrOGEL-bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NTo0MVrOGEL-bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzY5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `EncodeError` with the given details set to message\n          \n          \n            \n            # + return - An `EncodeError` with the given details set to the message", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043693", "createdAt": "2020-04-11T09:55:41Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "diffHunk": "@@ -92,14 +92,14 @@ public type Error ParserError|EncodeError|DecodeError|GenericMimeError|SetHeader\n                 |NoContentError;\n \n # Constructs an `EncodeError` with the given details.\n-# + detail - error details\n+# + detail - Error details\n # + return - `EncodeError` with the given details set to message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1NzQ3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NjowMlrOGEL-jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NjowMlrOGEL-jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `DecodeError` with the given details set to message\n          \n          \n            \n            # + return - `DecodeError` with the given details set to the message", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043724", "createdAt": "2020-04-11T09:56:02Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/mime_errors.bal", "diffHunk": "@@ -92,14 +92,14 @@ public type Error ParserError|EncodeError|DecodeError|GenericMimeError|SetHeader\n                 |NoContentError;\n \n # Constructs an `EncodeError` with the given details.\n-# + detail - error details\n+# + detail - Error details\n # + return - `EncodeError` with the given details set to message\n public function prepareEncodingErrorWithDetail(string detail) returns EncodeError {\n     return error(ENCODE_ERROR, message = detail);\n }\n \n # Constructs a `DecodeError` with the given details.\n-# + detail - error details\n+# + detail - Error details\n # + return - `DecodeError` with the given details set to message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1NzY2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NjoyM1rOGEL-pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NjoyM1rOGEL-pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Mzc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + fileName - Default filename for storing the bodypart, if the receiving agent wishes to store it in an external\n          \n          \n            \n            # + fileName - Default filename for storing the body part if the receiving agent wishes to store it in an external", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043751", "createdAt": "2020-04-11T09:56:23Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -53,18 +53,22 @@ public const string CONTENT_DISPOSITION = \"content-disposition\";\n #\n # + fileName - Default filename for storing the bodypart, if the receiving agent wishes to store it in an external", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1ODA2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NzowMlrOGEL-1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NzowMlrOGEL-1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Mzc5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + subType - A specific format of the primary type data\n          \n          \n            \n            # + subType - A specific format of the primary-type data", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043799", "createdAt": "2020-04-11T09:57:02Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -79,25 +83,31 @@ function convertContentDispositionToString(ContentDisposition contentDisposition\n #\n # + primaryType - Declares the general type of data\n # + subType - A specific format of the primary type data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1ODEyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NzowOVrOGEL-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NzowOVrOGEL-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzgwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + parameters - A set of parameters, specified in an `attribute=value` notation\n          \n          \n            \n            # + parameters - A set of parameters specified in an `attribute=value` notation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043806", "createdAt": "2020-04-11T09:57:09Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -79,25 +83,31 @@ function convertContentDispositionToString(ContentDisposition contentDisposition\n #\n # + primaryType - Declares the general type of data\n # + subType - A specific format of the primary type data\n-# + suffix - Identify the semantics of a specific media type\n-# + parameters - A set of parameters, specified in an attribute=value notation\n+# + suffix - Identifies the semantics of a specific media type\n+# + parameters - A set of parameters, specified in an `attribute=value` notation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1ODIzOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NzoyMFrOGEL-7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NzoyMFrOGEL-7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzgyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Gets \u201cprimaryType/subtype+suffix\u201d combination in `string` format.\n          \n          \n            \n            # Gets the \u201cprimaryType/subtype+suffix\u201d combination in a `string` format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043820", "createdAt": "2020-04-11T09:57:20Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -79,25 +83,31 @@ function convertContentDispositionToString(ContentDisposition contentDisposition\n #\n # + primaryType - Declares the general type of data\n # + subType - A specific format of the primary type data\n-# + suffix - Identify the semantics of a specific media type\n-# + parameters - A set of parameters, specified in an attribute=value notation\n+# + suffix - Identifies the semantics of a specific media type\n+# + parameters - A set of parameters, specified in an `attribute=value` notation\n public type MediaType object {\n \n     public string primaryType = \"\";\n     public string subType = \"\";\n     public string suffix = \"\";\n     public map<string> parameters = {};\n \n-    # Gets \u201cprimaryType/subtype+suffix\u201d combination in string format.\n-    #\n-    # + return - Base type as a string from MediaType struct\n+# Gets \u201cprimaryType/subtype+suffix\u201d combination in `string` format.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1ODM2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NzozMFrOGEL--g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1NzozMFrOGEL--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzgzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Base type as a `string` from MediaType struct\n          \n          \n            \n            # + return - Base type as a `string` from the `MediaType` struct", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043834", "createdAt": "2020-04-11T09:57:30Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -79,25 +83,31 @@ function convertContentDispositionToString(ContentDisposition contentDisposition\n #\n # + primaryType - Declares the general type of data\n # + subType - A specific format of the primary type data\n-# + suffix - Identify the semantics of a specific media type\n-# + parameters - A set of parameters, specified in an attribute=value notation\n+# + suffix - Identifies the semantics of a specific media type\n+# + parameters - A set of parameters, specified in an `attribute=value` notation\n public type MediaType object {\n \n     public string primaryType = \"\";\n     public string subType = \"\";\n     public string suffix = \"\";\n     public map<string> parameters = {};\n \n-    # Gets \u201cprimaryType/subtype+suffix\u201d combination in string format.\n-    #\n-    # + return - Base type as a string from MediaType struct\n+# Gets \u201cprimaryType/subtype+suffix\u201d combination in `string` format.\n+# ```ballerina\n+# string baseType = mediaType.getBaseType();\n+# ```\n+#\n+# + return - Base type as a `string` from MediaType struct", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1ODUzOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1Nzo0MVrOGEL_DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1Nzo0MVrOGEL_DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Mzg1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Converts the media type to a `string`, suitable to be used as the value of a corresponding HTTP header.\n          \n          \n            \n            # Converts the media type to a `string`, which is suitable to be used as the value of a corresponding HTTP header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043853", "createdAt": "2020-04-11T09:57:41Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -79,25 +83,31 @@ function convertContentDispositionToString(ContentDisposition contentDisposition\n #\n # + primaryType - Declares the general type of data\n # + subType - A specific format of the primary type data\n-# + suffix - Identify the semantics of a specific media type\n-# + parameters - A set of parameters, specified in an attribute=value notation\n+# + suffix - Identifies the semantics of a specific media type\n+# + parameters - A set of parameters, specified in an `attribute=value` notation\n public type MediaType object {\n \n     public string primaryType = \"\";\n     public string subType = \"\";\n     public string suffix = \"\";\n     public map<string> parameters = {};\n \n-    # Gets \u201cprimaryType/subtype+suffix\u201d combination in string format.\n-    #\n-    # + return - Base type as a string from MediaType struct\n+# Gets \u201cprimaryType/subtype+suffix\u201d combination in `string` format.\n+# ```ballerina\n+# string baseType = mediaType.getBaseType();\n+# ```\n+#\n+# + return - Base type as a `string` from MediaType struct\n     public function getBaseType() returns string {\n         return self.primaryType + \"/\" + self.subType;\n     }\n \n-    # Converts the media type to a string, suitable to be used as the value of a corresponding HTTP header.\n-    #\n-    # + return - Content type with parameters as a string\n+# Converts the media type to a `string`, suitable to be used as the value of a corresponding HTTP header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1ODk5OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1ODowM1rOGEL_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1ODowM1rOGEL_QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzkwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + mediaType - Content type that needs to be set to the entity\n          \n          \n            \n            # + mediaType - Content type, which needs to be set to the entity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043905", "createdAt": "2020-04-11T09:58:03Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -135,18 +145,24 @@ public type Entity object {\n     private int cLength = 0;\n     private ContentDisposition? cDisposition = ();\n \n-    # Sets the content-type to entity.\n-    #\n-    # + mediaType - Content type that needs to be set to the entity\n-    # + return - Nil if successful, error in case of invalid media-type\n+# Sets the content-type to the entity.\n+# ```ballerina\n+# mime:InvalidContentTypeError? contentType = mimeEntity.setContentType(\"application/json\");\n+# ```\n+#\n+# + mediaType - Content type that needs to be set to the entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1OTExOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1ODoxN1rOGEL_Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1ODoxN1rOGEL_Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzkyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Nil if successful or else an `mime:InvalidContentTypeError` in case of invalid media-type\n          \n          \n            \n            # + return - Nil if successful or else an `mime:InvalidContentTypeError` in case of invalid media-type\n          \n      \n    \n    \n  \n\nNil should be replaced with ().", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043922", "createdAt": "2020-04-11T09:58:17Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -135,18 +145,24 @@ public type Entity object {\n     private int cLength = 0;\n     private ContentDisposition? cDisposition = ();\n \n-    # Sets the content-type to entity.\n-    #\n-    # + mediaType - Content type that needs to be set to the entity\n-    # + return - Nil if successful, error in case of invalid media-type\n+# Sets the content-type to the entity.\n+# ```ballerina\n+# mime:InvalidContentTypeError? contentType = mimeEntity.setContentType(\"application/json\");\n+# ```\n+#\n+# + mediaType - Content type that needs to be set to the entity\n+# + return - Nil if successful or else an `mime:InvalidContentTypeError` in case of invalid media-type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1OTI3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1ODozM1rOGEL_aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1ODozM1rOGEL_aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Mzk0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + contentId - Content ID that needs to be set to the entity\n          \n          \n            \n            # + contentId - Content ID, which needs to be set to the entity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043945", "createdAt": "2020-04-11T09:58:33Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -155,17 +171,23 @@ public type Entity object {\n         return contentTypeHeaderValue;\n     }\n \n-    # Sets the content ID of the entity.\n-    #\n-    # + contentId - Content ID that needs to be set to entity\n+# Sets the content ID of the entity.\n+# ```ballerina\n+# mimeEntity.setContentId(\"test-id\");\n+# ```\n+#\n+# + contentId - Content ID that needs to be set to the entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1OTUzOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1ODo0NlrOGEL_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1ODo0NlrOGEL_iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Mzk3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + contentLength - Content length that needs to be set to the entity\n          \n          \n            \n            # + contentLength - Content length, which needs to be set to the entity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407043979", "createdAt": "2020-04-11T09:58:46Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -174,18 +196,24 @@ public type Entity object {\n         return contentId;\n     }\n \n-    # Sets the content length of the entity.\n-    #\n-    # + contentLength - Content length that needs to be set to entity\n+# Sets the content length of the entity.\n+# ```ballerina\n+# mimeEntity.setContentLength(45555);\n+# ```\n+#\n+# + contentLength - Content length that needs to be set to the entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MDAxOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1OToxMVrOGEL_ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzozMjoxNVrOGENPfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Content length as an `int` or else an error in case of a failure\n          \n          \n            \n            # + return - Content length as an `int` or else a `mime:Error` in case of a failure\n          \n      \n    \n    \n  \n\nNeed to specify the error type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044035", "createdAt": "2020-04-11T09:59:11Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -174,18 +196,24 @@ public type Entity object {\n         return contentId;\n     }\n \n-    # Sets the content length of the entity.\n-    #\n-    # + contentLength - Content length that needs to be set to entity\n+# Sets the content length of the entity.\n+# ```ballerina\n+# mimeEntity.setContentLength(45555);\n+# ```\n+#\n+# + contentLength - Content length that needs to be set to the entity\n     public function setContentLength(@untainted int contentLength) {\n         self.cLength = contentLength;\n         var contentLengthStr = contentLength.toString();\n         self.setHeader(CONTENT_LENGTH, contentLengthStr);\n     }\n \n-    # Gets the content length of entity.\n-    #\n-    # + return - Content length as an `int`\n+# Gets the content length of the entity.\n+# ```ballerina\n+# int|error contentLength = mimeEntity.getContentLength();\n+# ```\n+#\n+# + return - Content length as an `int` or else an error in case of a failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NDQ0Nw==", "bodyText": "From this, a generic error is returned. Not specific to any mime error types.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407064447", "createdAt": "2020-04-11T13:32:15Z", "author": {"login": "Bhashinee"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -174,18 +196,24 @@ public type Entity object {\n         return contentId;\n     }\n \n-    # Sets the content length of the entity.\n-    #\n-    # + contentLength - Content length that needs to be set to entity\n+# Sets the content length of the entity.\n+# ```ballerina\n+# mimeEntity.setContentLength(45555);\n+# ```\n+#\n+# + contentLength - Content length that needs to be set to the entity\n     public function setContentLength(@untainted int contentLength) {\n         self.cLength = contentLength;\n         var contentLengthStr = contentLength.toString();\n         self.setHeader(CONTENT_LENGTH, contentLengthStr);\n     }\n \n-    # Gets the content length of entity.\n-    #\n-    # + return - Content length as an `int`\n+# Gets the content length of the entity.\n+# ```ballerina\n+# int|error contentLength = mimeEntity.getContentLength();\n+# ```\n+#\n+# + return - Content length as an `int` or else an error in case of a failure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDAzNQ=="}, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MDA2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1OToyMlrOGEL_yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1OToyMlrOGEL_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDA0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + contentDisposition - Content disposition that needs to be set to the entity\n          \n          \n            \n            # + contentDisposition - Content disposition, which needs to be set to the entity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044041", "createdAt": "2020-04-11T09:59:22Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -198,15 +226,18 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the content disposition of the entity.\n-    #\n-    # + contentDisposition - Content disposition that needs to be set to entity\n+# Sets the content disposition of the entity.\n+# ```ballerina\n+# mimeEntity.setContentDisposition(contentDisposition);\n+# ```\n+#\n+# + contentDisposition - Content disposition that needs to be set to the entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MDYwOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMDowMFrOGEMACA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMDowMFrOGEMACA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDEwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n          \n          \n            \n            # with the default content-type, which is `application/octet-stream`. This default value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044104", "createdAt": "2020-04-11T10:00:00Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MDk2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMDoyNVrOGEMANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMDoyNVrOGEMANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDE0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                 `application/octet-stream` is used as the default value\n          \n          \n            \n            #                 The default value is `application/octet-stream`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044148", "createdAt": "2020-04-11T10:00:25Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MTQ1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMToxMlrOGEMAcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMToxMlrOGEMAcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDIwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # with the default content-type `application/json`. The default value `application/json` can be overridden\n          \n          \n            \n            # with the default content-type, which is `application/json`. This default value can be overridden", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044208", "createdAt": "2020-04-11T10:01:12Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MTUzOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMToyNFrOGEMAeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMToyNFrOGEMAeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDIxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + jsonContent - JSON content that needs to be set to the entity\n          \n          \n            \n            # + jsonContent - JSON content, which needs to be set to the entity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044218", "createdAt": "2020-04-11T10:01:24Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MTYyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMTozOFrOGEMAig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMTozOFrOGEMAig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDIzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n          \n          \n            \n            # + contentType - Content type to be used with the payload. This is an optional parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044234", "createdAt": "2020-04-11T10:01:38Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MTk4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMTo1MFrOGEMAsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMTo1MFrOGEMAsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDI3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                 is used as the default value\n          \n          \n            \n            #                The default value is `application/json`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044274", "createdAt": "2020-04-11T10:01:50Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MjA3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMTo1OFrOGEMAuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMTo1OFrOGEMAuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDI4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Extracts JSON body from the entity.\n          \n          \n            \n                # Extracts the JSON body from the entity.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044283", "createdAt": "2020-04-11T10:01:58Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MjQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMjozOVrOGEMA5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMjozOVrOGEMA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDMyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n          \n          \n            \n            # with the default content-type, which is `application/xml`. This default value can be overridden", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044327", "createdAt": "2020-04-11T10:02:39Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MjY5OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMjo1MFrOGEMBAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMjo1MFrOGEMBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDM1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + xmlContent - XML content that needs to be set to the entity\n          \n          \n            \n            # + xmlContent - XML content, which needs to be set to the entity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044353", "createdAt": "2020-04-11T10:02:50Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden\n+# by passing the content-type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setXml(xml `<hello> world </hello>`);\n+# ```\n+#\n+# + xmlContent - XML content that needs to be set to the entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2Mjc3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMzowMVrOGEMBCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMzowMVrOGEMBCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDM2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n          \n          \n            \n            # + contentType - Content type to be used with the payload. This is an optional parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044361", "createdAt": "2020-04-11T10:03:01Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden\n+# by passing the content-type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setXml(xml `<hello> world </hello>`);\n+# ```\n+#\n+# + xmlContent - XML content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2Mjg1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMzoxNVrOGEMBFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMzoxNVrOGEMBFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDM3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                 is used as the default value\n          \n          \n            \n            #               The default value is `application/xml`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044373", "createdAt": "2020-04-11T10:03:15Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden\n+# by passing the content-type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setXml(xml `<hello> world </hello>`);\n+# ```\n+#\n+# + xmlContent - XML content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n+#                 is used as the default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2Mjk1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMzoyMlrOGEMBIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMzoyMlrOGEMBIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDM4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Extracts `xml` body from the entity.\n          \n          \n            \n                # Extracts the `xml` body from the entity.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407044386", "createdAt": "2020-04-11T10:03:22Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden\n+# by passing the content-type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setXml(xml `<hello> world </hello>`);\n+# ```\n+#\n+# + xmlContent - XML content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n+#                 is used as the default value\n     public function setXml(@untainted xml xmlContent, @untainted public string contentType = \"application/xml\") {\n         return externSetXml(self, xmlContent, java:fromString(contentType));\n     }\n \n-    # Extracts `xml` body from the entity. If the entity body is not an XML, an error is returned.\n+    # Extracts `xml` body from the entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5OTE0OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo0OTo1MFrOGEMSUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo0OTo1MFrOGEMSUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODc4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # with the default content-type `text/plain`. The default value `text/plain` can be overridden\n          \n          \n            \n            # with the default content-type, which is `text/plain`. This default value can be overridden", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407048787", "createdAt": "2020-04-11T10:49:50Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden\n+# by passing the content-type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setXml(xml `<hello> world </hello>`);\n+# ```\n+#\n+# + xmlContent - XML content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n+#                 is used as the default value\n     public function setXml(@untainted xml xmlContent, @untainted public string contentType = \"application/xml\") {\n         return externSetXml(self, xmlContent, java:fromString(contentType));\n     }\n \n-    # Extracts `xml` body from the entity. If the entity body is not an XML, an error is returned.\n+    # Extracts `xml` body from the entity.\n     #\n-    # + return - `xml` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `xml` data extracted from the entity body or else an `mime:ParserError` if the entity body is not an XML\n     public function getXml() returns @tainted xml|ParserError {\n         return externGetXml(self);\n     }\n \n-    # Sets the entity body with the given text content. This method overrides any existing content-type headers\n-    # with the default content-type `text/plain`. The default value `text/plain` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + textContent - Text content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `text/plain`\n-    #                 is used as the default value.\n+# Sets the entity body with the given text content. This method overrides any existing content-type headers\n+# with the default content-type `text/plain`. The default value `text/plain` can be overridden", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5OTIyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDowM1rOGEMSXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDowM1rOGEMSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODc5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + textContent - Text content that needs to be set to the entity\n          \n          \n            \n            # + textContent - Text content, which needs to be set to the entity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407048799", "createdAt": "2020-04-11T10:50:03Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden\n+# by passing the content-type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setXml(xml `<hello> world </hello>`);\n+# ```\n+#\n+# + xmlContent - XML content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n+#                 is used as the default value\n     public function setXml(@untainted xml xmlContent, @untainted public string contentType = \"application/xml\") {\n         return externSetXml(self, xmlContent, java:fromString(contentType));\n     }\n \n-    # Extracts `xml` body from the entity. If the entity body is not an XML, an error is returned.\n+    # Extracts `xml` body from the entity.\n     #\n-    # + return - `xml` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `xml` data extracted from the entity body or else an `mime:ParserError` if the entity body is not an XML\n     public function getXml() returns @tainted xml|ParserError {\n         return externGetXml(self);\n     }\n \n-    # Sets the entity body with the given text content. This method overrides any existing content-type headers\n-    # with the default content-type `text/plain`. The default value `text/plain` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + textContent - Text content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `text/plain`\n-    #                 is used as the default value.\n+# Sets the entity body with the given text content. This method overrides any existing content-type headers\n+# with the default content-type `text/plain`. The default value `text/plain` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setText(\"Hello World\");\n+# ```\n+#\n+# + textContent - Text content that needs to be set to the entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 303}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5OTM4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDoxNVrOGEMScw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDoxNVrOGEMScw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODgxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + contentType - Content type to be used with the payload. This is an optional parameter. `text/plain`\n          \n          \n            \n            # + contentType - Content type to be used with the payload. This is an optional parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407048819", "createdAt": "2020-04-11T10:50:15Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden\n+# by passing the content-type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setXml(xml `<hello> world </hello>`);\n+# ```\n+#\n+# + xmlContent - XML content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n+#                 is used as the default value\n     public function setXml(@untainted xml xmlContent, @untainted public string contentType = \"application/xml\") {\n         return externSetXml(self, xmlContent, java:fromString(contentType));\n     }\n \n-    # Extracts `xml` body from the entity. If the entity body is not an XML, an error is returned.\n+    # Extracts `xml` body from the entity.\n     #\n-    # + return - `xml` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `xml` data extracted from the entity body or else an `mime:ParserError` if the entity body is not an XML\n     public function getXml() returns @tainted xml|ParserError {\n         return externGetXml(self);\n     }\n \n-    # Sets the entity body with the given text content. This method overrides any existing content-type headers\n-    # with the default content-type `text/plain`. The default value `text/plain` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + textContent - Text content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `text/plain`\n-    #                 is used as the default value.\n+# Sets the entity body with the given text content. This method overrides any existing content-type headers\n+# with the default content-type `text/plain`. The default value `text/plain` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setText(\"Hello World\");\n+# ```\n+#\n+# + textContent - Text content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `text/plain`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5OTUwOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDoyN1rOGEMShA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDoyN1rOGEMShA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODgzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                 is used as the default value\n          \n          \n            \n            #                The default value is `text/plain`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407048836", "createdAt": "2020-04-11T10:50:27Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden\n+# by passing the content-type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setXml(xml `<hello> world </hello>`);\n+# ```\n+#\n+# + xmlContent - XML content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n+#                 is used as the default value\n     public function setXml(@untainted xml xmlContent, @untainted public string contentType = \"application/xml\") {\n         return externSetXml(self, xmlContent, java:fromString(contentType));\n     }\n \n-    # Extracts `xml` body from the entity. If the entity body is not an XML, an error is returned.\n+    # Extracts `xml` body from the entity.\n     #\n-    # + return - `xml` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `xml` data extracted from the entity body or else an `mime:ParserError` if the entity body is not an XML\n     public function getXml() returns @tainted xml|ParserError {\n         return externGetXml(self);\n     }\n \n-    # Sets the entity body with the given text content. This method overrides any existing content-type headers\n-    # with the default content-type `text/plain`. The default value `text/plain` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + textContent - Text content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `text/plain`\n-    #                 is used as the default value.\n+# Sets the entity body with the given text content. This method overrides any existing content-type headers\n+# with the default content-type `text/plain`. The default value `text/plain` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setText(\"Hello World\");\n+# ```\n+#\n+# + textContent - Text content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `text/plain`\n+#                 is used as the default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5OTcxOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDo0OFrOGEMSng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDo0OFrOGEMSng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Extracts text body from the entity. If the entity body is not text compatible an error is returned.\n          \n          \n            \n                # Extracts the text body from the entity. If the entity body is not text compatible, an error is returned.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407048862", "createdAt": "2020-04-11T10:50:48Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -237,70 +271,81 @@ public type Entity object {\n         }\n     }\n \n-    # Sets the entity body with a given file. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n-    # can be overridden by passing the content type as an optional parameter.\n-    #\n-    # + filePath - Represents the path to the file\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+# Sets the entity body with a given file. This method overrides any existing `content-type` headers\n+# with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n+# can be overridden by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setFileAsEntityBody(\"<file path>\");\n+# ```\n+#\n+# + filePath - Path of the file\n+# + contentType - Content type to be used with the payload. This is an optional parameter.\n+#                 `application/octet-stream` is used as the default value\n     public function setFileAsEntityBody(@untainted string filePath, public string contentType = \"application/octet-stream\") {\n         io:ReadableByteChannel byteChannel = checkpanic io:openReadableFile(filePath);\n         self.setByteChannel(byteChannel, contentType = contentType);\n     }\n \n-    # Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n-    # with the default content-type `application/json`. The default value `application/json` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + jsonContent - JSON content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n-    #                 is used as the default value.\n+# Sets the entity body with the given `json` content. This method overrides any existing `content-type` headers\n+# with the default content-type `application/json`. The default value `application/json` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setJson({ \"Hello\": \"World\" });\n+# ```\n+#\n+# + jsonContent - JSON content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/json`\n+#                 is used as the default value\n     public function setJson(@untainted json jsonContent, @untainted public string contentType = \"application/json\") {\n         return externSetJson(self, jsonContent, java:fromString(contentType));\n     }\n \n-    # Extracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n+    # Extracts JSON body from the entity.\n     #\n-    # + return - `json` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `json` data extracted from the entity body or else an `mime:ParserError` if the entity body is not a JSON\n     public function getJson() returns @tainted json|ParserError {\n         return externGetJson(self);\n     }\n \n-    # Sets the entity body with the given XML content. This method overrides any existing content-type headers\n-    # with the default content-type `application/xml`. The default value `application/xml` can be overridden\n-    # by passing the content-type as an optional parameter.\n-    #\n-    # + xmlContent - XML content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n-    #                 is used as the default value.\n+# Sets the entity body with the given XML content. This method overrides any existing content-type headers\n+# with the default content-type `application/xml`. The default value `application/xml` can be overridden\n+# by passing the content-type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setXml(xml `<hello> world </hello>`);\n+# ```\n+#\n+# + xmlContent - XML content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `application/xml`\n+#                 is used as the default value\n     public function setXml(@untainted xml xmlContent, @untainted public string contentType = \"application/xml\") {\n         return externSetXml(self, xmlContent, java:fromString(contentType));\n     }\n \n-    # Extracts `xml` body from the entity. If the entity body is not an XML, an error is returned.\n+    # Extracts `xml` body from the entity.\n     #\n-    # + return - `xml` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `xml` data extracted from the entity body or else an `mime:ParserError` if the entity body is not an XML\n     public function getXml() returns @tainted xml|ParserError {\n         return externGetXml(self);\n     }\n \n-    # Sets the entity body with the given text content. This method overrides any existing content-type headers\n-    # with the default content-type `text/plain`. The default value `text/plain` can be overridden\n-    # by passing the content type as an optional parameter.\n-    #\n-    # + textContent - Text content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter. `text/plain`\n-    #                 is used as the default value.\n+# Sets the entity body with the given text content. This method overrides any existing content-type headers\n+# with the default content-type `text/plain`. The default value `text/plain` can be overridden\n+# by passing the content type as an optional parameter.\n+# ```ballerina\n+# mimeEntity.setText(\"Hello World\");\n+# ```\n+#\n+# + textContent - Text content that needs to be set to the entity\n+# + contentType - Content type to be used with the payload. This is an optional parameter. `text/plain`\n+#                 is used as the default value\n     public function setText(@untainted string textContent, @untainted public string contentType = \"text/plain\") {\n         return externSetText(self, java:fromString(textContent), java:fromString(contentType));\n     }\n \n     # Extracts text body from the entity. If the entity body is not text compatible an error is returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 310}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMDAzOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MToyMlrOGEMSyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MToyMlrOGEMSyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODkwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n          \n          \n            \n                # with the default content-type, which is `application/octet-stream`. This default value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407048906", "createdAt": "2020-04-11T10:51:22Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -314,19 +359,19 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 319}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMDE5OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MTozOFrOGEMS3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MTozOFrOGEMS3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODkyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + contentType - Content type to be used with the payload. This is an optional parameter\n          \n          \n            \n                # + contentType - Content type to be used with the payload. This is an optional parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407048926", "createdAt": "2020-04-11T10:51:38Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -314,19 +359,19 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content type as an optional parameter.\n     #\n-    # + blobContent - byte[] content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+    # + blobContent - byte[] content that needs to be set to the entity\n+    # + contentType - Content type to be used with the payload. This is an optional parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMDgwOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MTo0OVrOGEMTHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MTo0OVrOGEMTHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODk5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                 `application/octet-stream` is used as the default value\n          \n          \n            \n                #                 The default value is `application/octet-stream`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407048991", "createdAt": "2020-04-11T10:51:49Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -314,19 +359,19 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content type as an optional parameter.\n     #\n-    # + blobContent - byte[] content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+    # + blobContent - byte[] content that needs to be set to the entity\n+    # + contentType - Content type to be used with the payload. This is an optional parameter\n+    #                 `application/octet-stream` is used as the default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMTMxOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MjowNVrOGEMTWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MjowNVrOGEMTWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTA0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets the entity body as a `byte[]` from a given entity. If the entity size is considerably large consider\n          \n          \n            \n                # Gets the entity body as a `byte[]` from a given entity. If the entity size is considerably large, consider", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049048", "createdAt": "2020-04-11T10:52:05Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -314,19 +359,19 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content type as an optional parameter.\n     #\n-    # + blobContent - byte[] content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+    # + blobContent - byte[] content that needs to be set to the entity\n+    # + contentType - Content type to be used with the payload. This is an optional parameter\n+    #                 `application/octet-stream` is used as the default value\n     public function setByteArray(@untainted byte[] blobContent, @untainted public string contentType =\n                                                                 \"application/octet-stream\") {\n         return externSetByteArray(self, blobContent, java:fromString(contentType));\n     }\n \n-    # Given an entity, gets the entity body as a `byte[]`. If the entity size is considerably large consider\n+    # Gets the entity body as a `byte[]` from a given entity. If the entity size is considerably large consider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMTM4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MjoxNVrOGEMTYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MjoxNVrOGEMTYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTA1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # using getByteChannel() method instead.\n          \n          \n            \n                # using the `getByteChannel()` method instead.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049059", "createdAt": "2020-04-11T10:52:15Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -314,19 +359,19 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content type as an optional parameter.\n     #\n-    # + blobContent - byte[] content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+    # + blobContent - byte[] content that needs to be set to the entity\n+    # + contentType - Content type to be used with the payload. This is an optional parameter\n+    #                 `application/octet-stream` is used as the default value\n     public function setByteArray(@untainted byte[] blobContent, @untainted public string contentType =\n                                                                 \"application/octet-stream\") {\n         return externSetByteArray(self, blobContent, java:fromString(contentType));\n     }\n \n-    # Given an entity, gets the entity body as a `byte[]`. If the entity size is considerably large consider\n+    # Gets the entity body as a `byte[]` from a given entity. If the entity size is considerably large consider\n     # using getByteChannel() method instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 335}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMTQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MjoyN1rOGEMTbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MjoyN1rOGEMTbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `byte[]` data extracted from the the entity body or else an `mime:ParserError` in case of\n          \n          \n            \n                # + return - `byte[]` data extracted from the the entity body or else a `mime:ParserError` in case of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049068", "createdAt": "2020-04-11T10:52:27Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -314,19 +359,19 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content type as an optional parameter.\n     #\n-    # + blobContent - byte[] content that needs to be set to entity\n-    # + contentType - Content type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+    # + blobContent - byte[] content that needs to be set to the entity\n+    # + contentType - Content type to be used with the payload. This is an optional parameter\n+    #                 `application/octet-stream` is used as the default value\n     public function setByteArray(@untainted byte[] blobContent, @untainted public string contentType =\n                                                                 \"application/octet-stream\") {\n         return externSetByteArray(self, blobContent, java:fromString(contentType));\n     }\n \n-    # Given an entity, gets the entity body as a `byte[]`. If the entity size is considerably large consider\n+    # Gets the entity body as a `byte[]` from a given entity. If the entity size is considerably large consider\n     # using getByteChannel() method instead.\n     #\n-    # + return - `byte[]` data extracted from the the entity body. An `ParserError` record is returned in case of\n-    #            errors.\n+    # + return - `byte[]` data extracted from the the entity body or else an `mime:ParserError` in case of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMTg0OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1Mjo0OFrOGEMTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1Mjo0OFrOGEMTow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTEyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n          \n          \n            \n                # with the default content-type, which is `application/octet-stream`. This default value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049123", "createdAt": "2020-04-11T10:52:48Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -335,30 +380,30 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 345}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMjQyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MzowMFrOGEMT4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MzowMFrOGEMT4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + byteChannel - Byte channel that needs to be set to the entity\n          \n          \n            \n                # + byteChannel - Byte channel, which needs to be set to the entity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049186", "createdAt": "2020-04-11T10:53:00Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -335,30 +380,30 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content-type as an optional parameter.\n     #\n-    # + byteChannel - Byte channel that needs to be set to entity\n+    # + byteChannel - Byte channel that needs to be set to the entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 349}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMjcyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MzoyM1rOGEMUBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MzoyM1rOGEMUBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTIyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                 `application/octet-stream` is used as the default value\n          \n          \n            \n                #                 The `application/octet-stream` is the default value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049220", "createdAt": "2020-04-11T10:53:23Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -335,30 +380,30 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content-type as an optional parameter.\n     #\n-    # + byteChannel - Byte channel that needs to be set to entity\n+    # + byteChannel - Byte channel that needs to be set to the entity\n     # + contentType - Content-type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+    #                 `application/octet-stream` is used as the default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 352}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMzIyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1Mzo0NlrOGEMUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1Mzo0NlrOGEMUNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `io:ReadableByteChannel`. An `mime:ParserError` record will be returned in case of errors\n          \n          \n            \n                # + return - An `io:ReadableByteChannel` or else a `mime:ParserError` record will be returned in case of errors", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049271", "createdAt": "2020-04-11T10:53:46Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -335,30 +380,30 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content-type as an optional parameter.\n     #\n-    # + byteChannel - Byte channel that needs to be set to entity\n+    # + byteChannel - Byte channel that needs to be set to the entity\n     # + contentType - Content-type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+    #                 `application/octet-stream` is used as the default value\n     public function setByteChannel(io:ReadableByteChannel byteChannel, @untainted public string contentType =\n                                                                                     \"application/octet-stream\") {\n         return externSetByteChannel(self, byteChannel, java:fromString(contentType));\n     }\n \n-    # Given an entity, gets the entity body as a byte channel.\n+    # Gets the entity body as a byte channel from a given entity.\n     #\n-    # + return - An `io:ReadableByteChannel`. An `ParserError` record will be returned in case of errors\n+    # + return - An `io:ReadableByteChannel`. An `mime:ParserError` record will be returned in case of errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 362}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwMzU1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NDowMVrOGEMUXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NDowMVrOGEMUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An array of body parts(`Entity[]`) extracted from the entity body or else an `mime:ParserError` if the\n          \n          \n            \n                # + return - An array of body parts(`Entity[]`) extracted from the entity body or else a `mime:ParserError` if the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049310", "createdAt": "2020-04-11T10:54:01Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -335,30 +380,30 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content-type as an optional parameter.\n     #\n-    # + byteChannel - Byte channel that needs to be set to entity\n+    # + byteChannel - Byte channel that needs to be set to the entity\n     # + contentType - Content-type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+    #                 `application/octet-stream` is used as the default value\n     public function setByteChannel(io:ReadableByteChannel byteChannel, @untainted public string contentType =\n                                                                                     \"application/octet-stream\") {\n         return externSetByteChannel(self, byteChannel, java:fromString(contentType));\n     }\n \n-    # Given an entity, gets the entity body as a byte channel.\n+    # Gets the entity body as a byte channel from a given entity.\n     #\n-    # + return - An `io:ReadableByteChannel`. An `ParserError` record will be returned in case of errors\n+    # + return - An `io:ReadableByteChannel`. An `mime:ParserError` record will be returned in case of errors\n     public function getByteChannel() returns @tainted io:ReadableByteChannel|ParserError {\n         return externGetByteChannel(self);\n     }\n \n-    # Given an entity, gets its body parts. If the entity body is not a set of body parts an error will be returned.\n+    # Gets the body parts from a given entity.\n     #\n-    # + return - An array of body parts(`Entity[]`) extracted from the entity body. An `ParserError` record will be\n-    #            returned in case of errors.\n+    # + return - An array of body parts(`Entity[]`) extracted from the entity body or else an `mime:ParserError` if the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 372}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwNDAyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NDoxNVrOGEMUkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NDoxNVrOGEMUkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTM2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            entity body is not a set of body parts\n          \n          \n            \n                #            entity body is not a set of the body parts", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049361", "createdAt": "2020-04-11T10:54:15Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -335,30 +380,30 @@ public type Entity object {\n     # with the default content-type `application/octet-stream`. The default value `application/octet-stream`\n     # can be overridden by passing the content-type as an optional parameter.\n     #\n-    # + byteChannel - Byte channel that needs to be set to entity\n+    # + byteChannel - Byte channel that needs to be set to the entity\n     # + contentType - Content-type to be used with the payload. This is an optional parameter.\n-    #                 `application/octet-stream` is used as the default value.\n+    #                 `application/octet-stream` is used as the default value\n     public function setByteChannel(io:ReadableByteChannel byteChannel, @untainted public string contentType =\n                                                                                     \"application/octet-stream\") {\n         return externSetByteChannel(self, byteChannel, java:fromString(contentType));\n     }\n \n-    # Given an entity, gets the entity body as a byte channel.\n+    # Gets the entity body as a byte channel from a given entity.\n     #\n-    # + return - An `io:ReadableByteChannel`. An `ParserError` record will be returned in case of errors\n+    # + return - An `io:ReadableByteChannel`. An `mime:ParserError` record will be returned in case of errors\n     public function getByteChannel() returns @tainted io:ReadableByteChannel|ParserError {\n         return externGetByteChannel(self);\n     }\n \n-    # Given an entity, gets its body parts. If the entity body is not a set of body parts an error will be returned.\n+    # Gets the body parts from a given entity.\n     #\n-    # + return - An array of body parts(`Entity[]`) extracted from the entity body. An `ParserError` record will be\n-    #            returned in case of errors.\n+    # + return - An array of body parts(`Entity[]`) extracted from the entity body or else an `mime:ParserError` if the\n+    #            entity body is not a set of body parts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 373}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwNDI3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NDo0N1rOGEMUtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NDo0N1rOGEMUtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # with the default content-type `multipart/form-data`. The default value `multipart/form-data` can be overridden\n          \n          \n            \n                # with the default `multipart/form-data` content-type. The default `multipart/form-data` value can be overridden", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049397", "createdAt": "2020-04-11T10:54:47Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -369,34 +414,36 @@ public type Entity object {\n     # with the default content-type `multipart/form-data`. The default value `multipart/form-data` can be overridden", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 384}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwNDQ1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NTowMlrOGEMUyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NTowMlrOGEMUyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTQxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + bodyParts - Body parts that needs to be set to the entity\n          \n          \n            \n                # + bodyParts - Body parts, which needs to be set to the entity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049416", "createdAt": "2020-04-11T10:55:02Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -369,34 +414,36 @@ public type Entity object {\n     # with the default content-type `multipart/form-data`. The default value `multipart/form-data` can be overridden\n     # by passing the content type as an optional parameter.\n     #\n-    # + bodyParts - Represents the body parts that needs to be set to the entity\n+    # + bodyParts - Body parts that needs to be set to the entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 388}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwNDYzOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NToyN1rOGEMU3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NToyN1rOGEMU3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTQzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                 `multipart/form-data` is used as the default value\n          \n          \n            \n                #                The default value is `multipart/form-data`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049437", "createdAt": "2020-04-11T10:55:27Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -369,34 +414,36 @@ public type Entity object {\n     # with the default content-type `multipart/form-data`. The default value `multipart/form-data` can be overridden\n     # by passing the content type as an optional parameter.\n     #\n-    # + bodyParts - Represents the body parts that needs to be set to the entity\n+    # + bodyParts - Body parts that needs to be set to the entity\n     # + contentType - Content-type to be used with the payload. This is an optional parameter.\n-    #                 `multipart/form-data` is used as the default value.\n+    #                 `multipart/form-data` is used as the default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 391}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwNTIyOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NjozMlrOGEMVKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1NjozMlrOGEMVKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTUxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Gets all header names.\n          \n          \n            \n            # Gets all the header names.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049515", "createdAt": "2020-04-11T10:56:32Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -409,11 +456,13 @@ public type Entity object {\n         return headers;\n     }\n \n-    # Gets all header names.\n-    #\n-    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`,\n-    #              the body of the `Entity` must be accessed initially.\n-    # + return - All header names as a `string[]`\n+# Gets all header names.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 444}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwNzQwOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1OToxOVrOGEMWLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1OToxOVrOGEMWLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - If the given input is of type string, an encoded `string` is returned.\n          \n          \n            \n            # + return - An encoded `string` if the given input is of type string, an encoded `byte[]`if the given input is of type byte[], an encoded `io:ReadableByteChannel` if the given input is of type `io:ReadableByteChannel`, or else a `mime:EncodeError` record in case of errors.\n          \n      \n    \n    \n  \n\nPlease apply the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049772", "createdAt": "2020-04-11T10:59:19Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -590,7 +643,7 @@ function externHasHeader(Entity entity, handle headerName, HeaderPosition positi\n # + return - If the given input is of type string, an encoded `string` is returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 529}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwODM3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMDozMFrOGEMWng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMDozMFrOGEMWng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTg4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            In case of errors, an `mime:DecodeError` record is returned.\n          \n          \n            \n            #            In case of errors, an `mime:DecodeError` record is returned.\n          \n      \n    \n    \n  \n\nA decoded string if the given input is of type string, a decoded byte[]if the given input is of type byte[], a decoded io:ReadableByteChannel if the given input is of type io:ReadableByteChannel, or else a mime:DecodeError record in case of errors.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049886", "createdAt": "2020-04-11T11:00:30Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -610,7 +663,7 @@ function externBase64Encode((string|byte[]|io:ReadableByteChannel) contentToBeEn\n # + return - If the given input is of type string, a decoded `string` is returned.\n #            If the given input is of type byte[], a decoded `byte[]` is returned.\n #            If the given input is of type io:ReadableByteChannel, a decoded `io:ReadableByteChannel` is returned.\n-#            In case of errors, an `DecodeError` record is returned.\n+#            In case of errors, an `mime:DecodeError` record is returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 542}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwODQ1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMDo0MlrOGEMWqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMDo0MlrOGEMWqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTg5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # **Deprecated API**. Encodes a given byte[] with Base64 encoding scheme.\n          \n          \n            \n            # **Deprecated API**. Encodes a given byte[] using the Base64 encoding scheme.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049897", "createdAt": "2020-04-11T11:00:42Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -626,7 +679,7 @@ function externBase64Decode((string|byte[]|io:ReadableByteChannel) contentToBeDe\n # **Deprecated API**. Encodes a given byte[] with Base64 encoding scheme.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 547}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwODgxOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMTowM1rOGEMW0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMTowM1rOGEMW0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTkzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + valueToBeEncoded - Content that needs to be encoded\n          \n          \n            \n            # + valueToBeEncoded - Content, which needs to be encoded", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049937", "createdAt": "2020-04-11T11:01:03Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -626,7 +679,7 @@ function externBase64Decode((string|byte[]|io:ReadableByteChannel) contentToBeDe\n # **Deprecated API**. Encodes a given byte[] with Base64 encoding scheme.\n #\n # + valueToBeEncoded - Content that needs to be encoded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 549}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwOTA3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMTozMlrOGEMW8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMTozMlrOGEMW8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTk3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An encoded byte[]. In case of errors, an `mime:EncodeError` record is returned\n          \n          \n            \n            # + return - An encoded byte[] or else a `mime:EncodeError` record in case of errors", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049971", "createdAt": "2020-04-11T11:01:32Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -626,7 +679,7 @@ function externBase64Decode((string|byte[]|io:ReadableByteChannel) contentToBeDe\n # **Deprecated API**. Encodes a given byte[] with Base64 encoding scheme.\n #\n # + valueToBeEncoded - Content that needs to be encoded\n-# + return - An encoded byte[]. In case of errors, an `EncodeError` record is returned\n+# + return - An encoded byte[]. In case of errors, an `mime:EncodeError` record is returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 551}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwOTMwOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMTo0OFrOGEMXDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMTo0OFrOGEMXDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTk5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # **Deprecated API**. Decodes a given byte[] with Base64 encoding scheme.\n          \n          \n            \n            # **Deprecated API**. Decodes a given byte[] using the Base64 encoding scheme.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407049996", "createdAt": "2020-04-11T11:01:48Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -639,7 +692,7 @@ public function base64EncodeBlob(byte[] valueToBeEncoded) returns byte[]|EncodeE\n # **Deprecated API**. Decodes a given byte[] with Base64 encoding scheme.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 556}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwOTQ4OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMjowMVrOGEMXJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMjowMVrOGEMXJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MDAyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + valueToBeDecoded - Content that needs to be decoded\n          \n          \n            \n            # + valueToBeDecoded - Content, which needs to be decoded", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407050020", "createdAt": "2020-04-11T11:02:01Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -639,7 +692,7 @@ public function base64EncodeBlob(byte[] valueToBeEncoded) returns byte[]|EncodeE\n # **Deprecated API**. Decodes a given byte[] with Base64 encoding scheme.\n #\n # + valueToBeDecoded - Content that needs to be decoded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 558}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQwOTY2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMjoyM1rOGEMXPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMjoyM1rOGEMXPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MDA0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A decoded `byte[]`. In case of errors, an `mime:DecodeError` record is returned\n          \n          \n            \n            # + return - A decoded `byte[]`or else a `mime:DecodeError` record in case of errors", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407050044", "createdAt": "2020-04-11T11:02:23Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -639,7 +692,7 @@ public function base64EncodeBlob(byte[] valueToBeEncoded) returns byte[]|EncodeE\n # **Deprecated API**. Decodes a given byte[] with Base64 encoding scheme.\n #\n # + valueToBeDecoded - Content that needs to be decoded\n-# + return - A decoded `byte[]`. In case of errors, an `DecodeError` record is returned\n+# + return - A decoded `byte[]`. In case of errors, an `mime:DecodeError` record is returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 560}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQxMDI0OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMzoxNVrOGEMXhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMzoxNVrOGEMXhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MDExNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Given the Content-Type in string, gets the MediaType object populated with it.\n          \n          \n            \n            # Gets the `MediaType` object populated with it when the `Content-Type` is in string.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407050117", "createdAt": "2020-04-11T11:03:15Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -660,7 +713,7 @@ function getEncoding(MediaType contentType) returns (string?) {\n # Given the Content-Type in string, gets the MediaType object populated with it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 565}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQxMDU1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMzoyOVrOGEMXqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTowMzoyOVrOGEMXqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MDE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `MediaType` object or else an `mime:InvalidContentTypeError` in case of invalid content-type\n          \n          \n            \n            # + return - `MediaType` object or else a `mime:InvalidContentTypeError` in case of an invalid content-type", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r407050155", "createdAt": "2020-04-11T11:03:29Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -660,7 +713,7 @@ function getEncoding(MediaType contentType) returns (string?) {\n # Given the Content-Type in string, gets the MediaType object populated with it.\n #\n # + contentType - Content-Type in string\n-# + return - `MediaType` object or an error in case of invalid content-type\n+# + return - `MediaType` object or else an `mime:InvalidContentTypeError` in case of invalid content-type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187c778b331e57886854dde8ab907c2155366ff4"}, "originalPosition": 569}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI3NDY0OnYy", "diffSide": "RIGHT", "path": "stdlib/encoding/src/main/ballerina/src/encoding/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0Mjo1MlrOGFvvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0Mjo1MlrOGFvvWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3ODIzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides the necessary utilities that are required to encode and decode content using different URL encoding mechanisms and algorithms.\n          \n          \n            \n            This module provides the necessary utilities, which are required to encode and decode content using different URL encoding mechanisms and algorithms.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r408678235", "createdAt": "2020-04-15T08:42:52Z", "author": {"login": "praneesha"}, "path": "stdlib/encoding/src/main/ballerina/src/encoding/Module.md", "diffHunk": "@@ -1,66 +1,4 @@\n-## Module overview\n+This module provides the necessary utilities that are required to encode and decode content using different URL encoding mechanisms and algorithms.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "742ec2d321864c4863d746efe8f9cf32c4452c4f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI3Nzg3OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0MzozNVrOGFvxNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0MzozNVrOGFvxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3ODcxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides functions to encapsulate multiple body parts such as attachments in a single message. The\n          \n          \n            \n            This module provides functions to encapsulate multiple body parts such as attachments into a single message. The", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r408678710", "createdAt": "2020-04-15T08:43:35Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "diffHunk": "@@ -1,114 +1,10 @@\n-## Module Overview\n-\n-This module provides functions to encapsulate multiple body parts, such as attachments in a single message. The\n+This module provides functions to encapsulate multiple body parts such as attachments in a single message. The", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "742ec2d321864c4863d746efe8f9cf32c4452c4f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI3OTAzOnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0Mzo1MlrOGFvx3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0Mzo1MlrOGFvx3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3ODg3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            > Entity refers to the header fields and the content of a message, or a part of the body in a multipart entity. \n          \n          \n            \n            > Entity refers to the header fields and the content of a message or a part of the body in a multipart entity.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22493#discussion_r408678879", "createdAt": "2020-04-15T08:43:52Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/Module.md", "diffHunk": "@@ -1,114 +1,10 @@\n-## Module Overview\n-\n-This module provides functions to encapsulate multiple body parts, such as attachments in a single message. The\n+This module provides functions to encapsulate multiple body parts such as attachments in a single message. The\n  communication of such messages follow the MIME (Multipurpose Internet Mail Extensions) specification as specified in\n   the [RFC 2045 standard](https://www.ietf.org/rfc/rfc2045.txt).\n \n > Entity refers to the header fields and the content of a message, or a part of the body in a multipart entity. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "742ec2d321864c4863d746efe8f9cf32c4452c4f"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3937, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}