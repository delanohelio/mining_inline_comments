{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NDg5Njk2", "number": 22427, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo1ODoyN1rODt5qwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDo1MlrODuGNTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDU3MzQ1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo1ODoyN1rOF_l9_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMToyNVrOF_o95w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNjY4NA==", "bodyText": "Add a new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402226684", "createdAt": "2020-04-02T10:58:27Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3486,4 +3495,62 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n-}\n+\n+    /**\n+     * Parse Continue statement.\n+     * <code>continue-stmt := continue ; </code>\n+     *\n+     * @return Continue statement\n+     */\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatement(continueKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.\n+     *\n+     * @return Continue-keyword node\n+     */\n+    private STNode parseContinueKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse Break statement.\n+     * <code>break-stmt := break ; </code>\n+     *\n+     * @return Break statement\n+     */\n+    private STNode parseBreakStatement() {\n+        startContext(ParserRuleContext.BREAK_STATEMENT);\n+        STNode breakKeyword = parseBreakKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createBreakStatement(breakKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.\n+     *\n+     * @return Continue-keyword node\n+     */\n+    private STNode parseBreakKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.BREAK_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.BREAK_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTgxNQ==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402275815", "createdAt": "2020-04-02T12:31:25Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3486,4 +3495,62 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n-}\n+\n+    /**\n+     * Parse Continue statement.\n+     * <code>continue-stmt := continue ; </code>\n+     *\n+     * @return Continue statement\n+     */\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatement(continueKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.\n+     *\n+     * @return Continue-keyword node\n+     */\n+    private STNode parseContinueKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse Break statement.\n+     * <code>break-stmt := break ; </code>\n+     *\n+     * @return Break statement\n+     */\n+    private STNode parseBreakStatement() {\n+        startContext(ParserRuleContext.BREAK_STATEMENT);\n+        STNode breakKeyword = parseBreakKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createBreakStatement(breakKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.\n+     *\n+     * @return Continue-keyword node\n+     */\n+    private STNode parseBreakKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.BREAK_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.BREAK_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNjY4NA=="}, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDU3NzYxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STBreakStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo1OTozOVrOF_mAhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMTozNFrOF_o-TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzMzNQ==", "bodyText": "Not properly formatted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402227335", "createdAt": "2020-04-02T10:59:39Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STBreakStatement.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.BreakStatement;\n+\n+public class STBreakStatement extends STStatement{\n+    public final STNode breakKeyword;\n+    public final STNode semicolonToken;\n+\n+\n+    STBreakStatement(STNode breakKeyword,\n+                        STNode semicolonToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTkxNw==", "bodyText": "corrected", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402275917", "createdAt": "2020-04-02T12:31:34Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STBreakStatement.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.BreakStatement;\n+\n+public class STBreakStatement extends STStatement{\n+    public final STNode breakKeyword;\n+    public final STNode semicolonToken;\n+\n+\n+    STBreakStatement(STNode breakKeyword,\n+                        STNode semicolonToken) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzMzNQ=="}, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDU3ODM5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STBreakStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo1OTo1MVrOF_mBAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMTo0MFrOF_o-hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzQ1OQ==", "bodyText": "extra newline.\nPlease fix in other files as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402227459", "createdAt": "2020-04-02T10:59:51Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STBreakStatement.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.BreakStatement;\n+\n+public class STBreakStatement extends STStatement{\n+    public final STNode breakKeyword;\n+    public final STNode semicolonToken;\n+\n+\n+    STBreakStatement(STNode breakKeyword,\n+                        STNode semicolonToken) {\n+        super(SyntaxKind.BREAK_STATEMENT);\n+        this.breakKeyword = breakKeyword;\n+        this.semicolonToken = semicolonToken;\n+\n+\n+        this.bucketCount = 2;\n+        this.childBuckets = new STNode[this.bucketCount];\n+        this.addChildNode(breakKeyword, 0);\n+        this.addChildNode(semicolonToken, 1);\n+\n+    }\n+\n+    @Override\n+    public Node createFacade(int position, NonTerminalNode parent) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTk3NA==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402275974", "createdAt": "2020-04-02T12:31:40Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STBreakStatement.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.BreakStatement;\n+\n+public class STBreakStatement extends STStatement{\n+    public final STNode breakKeyword;\n+    public final STNode semicolonToken;\n+\n+\n+    STBreakStatement(STNode breakKeyword,\n+                        STNode semicolonToken) {\n+        super(SyntaxKind.BREAK_STATEMENT);\n+        this.breakKeyword = breakKeyword;\n+        this.semicolonToken = semicolonToken;\n+\n+\n+        this.bucketCount = 2;\n+        this.childBuckets = new STNode[this.bucketCount];\n+        this.addChildNode(breakKeyword, 0);\n+        this.addChildNode(semicolonToken, 1);\n+\n+    }\n+\n+    @Override\n+    public Node createFacade(int position, NonTerminalNode parent) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzQ1OQ=="}, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDU4MTc1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTowMDo1MFrOF_mDAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMTo0NVrOF_o-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzk2OA==", "bodyText": "add a newline at EOF", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402227968", "createdAt": "2020-04-02T11:00:50Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java", "diffHunk": "@@ -335,5 +346,7 @@ public static STNode createVersionPart(STNode leadingDot, STNode versionNumber)\n \n     public static STNode createImportPrefix(STNode asKeyword, STNode prefix) {\n         return new STImportPrefix(asKeyword, prefix);\n+\n     }\n-}\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjAxMA==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402276010", "createdAt": "2020-04-02T12:31:45Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java", "diffHunk": "@@ -335,5 +346,7 @@ public static STNode createVersionPart(STNode leadingDot, STNode versionNumber)\n \n     public static STNode createImportPrefix(STNode asKeyword, STNode prefix) {\n         return new STImportPrefix(asKeyword, prefix);\n+\n     }\n-}\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzk2OA=="}, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDU4NTExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTowMTo1NVrOF_mFHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMTo1MlrOF_o-3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODUxMA==", "bodyText": "seems this is not in the correct order. Also next number should be 211", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402228510", "createdAt": "2020-04-02T11:01:55Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "diffHunk": "@@ -50,8 +50,11 @@\n     WHILE_KEYWORD(207, \"while\"),\n     CHECK_KEYWORD(208, \"check\"),\n     CHECKPANIC_KEYWORD(209, \"checkpanic\"),\n+    CONTINUE_KEYWORD(212,\"continue\"),\n+    BREAK_KEYWORD(213,\"break\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDMxMw==", "bodyText": "I'll fix that", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402234313", "createdAt": "2020-04-02T11:13:42Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "diffHunk": "@@ -50,8 +50,11 @@\n     WHILE_KEYWORD(207, \"while\"),\n     CHECK_KEYWORD(208, \"check\"),\n     CHECKPANIC_KEYWORD(209, \"checkpanic\"),\n+    CONTINUE_KEYWORD(212,\"continue\"),\n+    BREAK_KEYWORD(213,\"break\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODUxMA=="}, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjA2MQ==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402276061", "createdAt": "2020-04-02T12:31:52Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "diffHunk": "@@ -50,8 +50,11 @@\n     WHILE_KEYWORD(207, \"while\"),\n     CHECK_KEYWORD(208, \"check\"),\n     CHECKPANIC_KEYWORD(209, \"checkpanic\"),\n+    CONTINUE_KEYWORD(212,\"continue\"),\n+    BREAK_KEYWORD(213,\"break\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODUxMA=="}, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDU4NTkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTowMjoxM1rOF_mFqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTozNDo0NFrOF_nEuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODY1MA==", "bodyText": "next number should be 1208", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402228650", "createdAt": "2020-04-02T11:02:13Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "diffHunk": "@@ -110,6 +113,10 @@\n     WHILE_STATEMENT(1205),\n     CALL_STATEMENT(1206),\n     PANIC_STATEMENT(1207),\n+    CONTINUE_STATEMENT(1209),\n+    BREAK_STATEMENT(1210),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDE0Ng==", "bodyText": "return statement has used 1208 supun should I use it anyway?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402234146", "createdAt": "2020-04-02T11:13:24Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "diffHunk": "@@ -110,6 +113,10 @@\n     WHILE_STATEMENT(1205),\n     CALL_STATEMENT(1206),\n     PANIC_STATEMENT(1207),\n+    CONTINUE_STATEMENT(1209),\n+    BREAK_STATEMENT(1210),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODY1MA=="}, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NDc5Mg==", "bodyText": "Use the next immediate available number.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402244792", "createdAt": "2020-04-02T11:34:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "diffHunk": "@@ -110,6 +113,10 @@\n     WHILE_STATEMENT(1205),\n     CALL_STATEMENT(1206),\n     PANIC_STATEMENT(1207),\n+    CONTINUE_STATEMENT(1209),\n+    BREAK_STATEMENT(1210),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODY1MA=="}, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDU5OTU0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTowNjozM1rOF_mOLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMjowMlrOF_o_Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMDgyOQ==", "bodyText": "Use 'sentence-case' for comments", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402230829", "createdAt": "2020-04-02T11:06:33Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3486,4 +3495,62 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n-}\n+\n+    /**\n+     * Parse Continue statement.\n+     * <code>continue-stmt := continue ; </code>\n+     *\n+     * @return Continue statement\n+     */\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatement(continueKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjE1MA==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402276150", "createdAt": "2020-04-02T12:32:02Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3486,4 +3495,62 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n-}\n+\n+    /**\n+     * Parse Continue statement.\n+     * <code>continue-stmt := continue ; </code>\n+     *\n+     * @return Continue statement\n+     */\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatement(continueKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMDgyOQ=="}, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDYwMDgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTowNjo1NVrOF_mPBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTowNjo1NVrOF_mPBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMTA0NA==", "bodyText": "Incorrect doc comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402231044", "createdAt": "2020-04-02T11:06:55Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3486,4 +3495,62 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n-}\n+\n+    /**\n+     * Parse Continue statement.\n+     * <code>continue-stmt := continue ; </code>\n+     *\n+     * @return Continue statement\n+     */\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatement(continueKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.\n+     *\n+     * @return Continue-keyword node\n+     */\n+    private STNode parseContinueKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse Break statement.\n+     * <code>break-stmt := break ; </code>\n+     *\n+     * @return Break statement\n+     */\n+    private STNode parseBreakStatement() {\n+        startContext(ParserRuleContext.BREAK_STATEMENT);\n+        STNode breakKeyword = parseBreakKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createBreakStatement(breakKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDcwNzI4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/BreakStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo0MDo1MlrOF_nQUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo0MDo1MlrOF_nQUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0Nzc2MQ==", "bodyText": "Shouldn't this be createToken(1);?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402247761", "createdAt": "2020-04-02T11:40:52Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/BreakStatement.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class BreakStatement extends Statement{\n+    private Token breakToken;\n+    private Token semicolonToken;\n+\n+    public BreakStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Token breakToken() {\n+        if (breakToken != null) {\n+            return breakToken;\n+        }\n+\n+        breakToken = createToken(0);\n+        return breakToken;\n+    }\n+\n+    public Token semicolonToken() {\n+        if (semicolonToken != null) {\n+            return semicolonToken;\n+        }\n+\n+        semicolonToken = createToken(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDcwNzU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ContinueStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo0MTowMFrOF_nQfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo0MTowMFrOF_nQfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NzgwNQ==", "bodyText": "Shouldn't this be createToken(1);?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402247805", "createdAt": "2020-04-02T11:41:00Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ContinueStatement.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class ContinueStatement extends Statement{\n+    private Token continueToken;\n+    private Token semicolonToken;\n+\n+    public ContinueStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Token continueToken() {\n+        if (continueToken != null) {\n+            return continueToken;\n+        }\n+\n+        continueToken = createToken(0);\n+        return continueToken;\n+    }\n+\n+    public Token semicolonToken() {\n+        if (semicolonToken != null) {\n+            return semicolonToken;\n+        }\n+\n+        semicolonToken = createToken(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjYyNzAwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/statements/break-stmt/break_stmt_assert_1.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDozNlrOF_6I6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDozNlrOF_6I6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzE2Mw==", "bodyText": "Can you dd a new line here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402557163", "createdAt": "2020-04-02T19:24:36Z", "author": {"login": "sameerajayasoma"}, "path": "compiler/ballerina-parser/src/test/resources/statements/break-stmt/break_stmt_assert_1.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+  \"kind\": \"BREAK_STATEMENT\",\n+  \"children\": [\n+    {\n+      \"kind\": \"BREAK_KEYWORD\"\n+    },\n+    {\n+      \"kind\": \"SEMICOLON_TOKEN\"\n+    }\n+  ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0eb06c5ed4907d9103026851f32d5aef912dde4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjYyNzMwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/statements/break-stmt/break_stmt_assert_2.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDo0MlrOF_6JIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDo0MlrOF_6JIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzIxNw==", "bodyText": "Can you dd a new line here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402557217", "createdAt": "2020-04-02T19:24:42Z", "author": {"login": "sameerajayasoma"}, "path": "compiler/ballerina-parser/src/test/resources/statements/break-stmt/break_stmt_assert_2.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"kind\": \"BREAK_STATEMENT\",\n+  \"children\": [\n+    {\n+      \"kind\": \"BREAK_KEYWORD\"\n+    },\n+    {\n+      \"kind\": \"SEMICOLON_TOKEN\",\n+      \"isMissing\": true\n+    }\n+  ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0eb06c5ed4907d9103026851f32d5aef912dde4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjYyNzU3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/statements/continue-stmt/continue_stmt_assert_1.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDo0N1rOF_6JTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDo0N1rOF_6JTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzI2MQ==", "bodyText": "Can you dd a new line here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402557261", "createdAt": "2020-04-02T19:24:47Z", "author": {"login": "sameerajayasoma"}, "path": "compiler/ballerina-parser/src/test/resources/statements/continue-stmt/continue_stmt_assert_1.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+  \"kind\": \"CONTINUE_STATEMENT\",\n+  \"children\": [\n+    {\n+      \"kind\": \"CONTINUE_KEYWORD\"\n+    },\n+    {\n+      \"kind\": \"SEMICOLON_TOKEN\"\n+    }\n+  ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0eb06c5ed4907d9103026851f32d5aef912dde4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjYyNzk2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/statements/continue-stmt/continue_stmt_assert_2.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDo1MlrOF_6Jgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTo0MDoxMVrOF_6ptw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzMxNQ==", "bodyText": "Can you dd a new line here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402557315", "createdAt": "2020-04-02T19:24:52Z", "author": {"login": "sameerajayasoma"}, "path": "compiler/ballerina-parser/src/test/resources/statements/continue-stmt/continue_stmt_assert_2.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"kind\": \"CONTINUE_STATEMENT\",\n+  \"children\": [\n+    {\n+      \"kind\": \"CONTINUE_KEYWORD\"\n+    },\n+    {\n+      \"kind\": \"SEMICOLON_TOKEN\",\n+      \"isMissing\": true\n+    }\n+  ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0eb06c5ed4907d9103026851f32d5aef912dde4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2NTU1OQ==", "bodyText": "Done @sameerajayasoma", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402565559", "createdAt": "2020-04-02T19:40:11Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/resources/statements/continue-stmt/continue_stmt_assert_2.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"kind\": \"CONTINUE_STATEMENT\",\n+  \"children\": [\n+    {\n+      \"kind\": \"CONTINUE_KEYWORD\"\n+    },\n+    {\n+      \"kind\": \"SEMICOLON_TOKEN\",\n+      \"isMissing\": true\n+    }\n+  ]\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzMxNQ=="}, "originalCommit": {"oid": "d0eb06c5ed4907d9103026851f32d5aef912dde4"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4514, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}