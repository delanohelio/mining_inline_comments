{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTQ0NDE3", "number": 22708, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo0MToyOFrODyyGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTo0NToxOVrOD35cQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTc2MzE3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo0MToyOFrOGHBtQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1MjozMVrOGHDpfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMTE4NA==", "bodyText": "Licence header should be 2020", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r410021184", "createdAt": "2020-04-17T06:41:28Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab1b4665e644f2e1627943bed8776cd4f970bb8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNzY0MA==", "bodyText": "Changed it in commit 52879ba", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r410027640", "createdAt": "2020-04-17T06:57:58Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMTE4NA=="}, "originalCommit": {"oid": "4ab1b4665e644f2e1627943bed8776cd4f970bb8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1MTE1OA==", "bodyText": "We change license header only in new files? why is this requested here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r410051158", "createdAt": "2020-04-17T07:48:48Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMTE4NA=="}, "originalCommit": {"oid": "4ab1b4665e644f2e1627943bed8776cd4f970bb8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1Mjk4OQ==", "bodyText": "I initially thought this was new file and just realize this is a just formatting. Yes correct. 2019 should be ok. Sorry for that. :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r410052989", "createdAt": "2020-04-17T07:52:31Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMTE4NA=="}, "originalCommit": {"oid": "4ab1b4665e644f2e1627943bed8776cd4f970bb8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTkzODEwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0NDo0MVrOGHDafA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0NDo0MVrOGHDafA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTE0OA==", "bodyText": "We change year only in newly created files, not in old files.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r410049148", "createdAt": "2020-04-17T07:44:41Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52879ba833b656e946a3650bcd6a2ef5b9d0683e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzM4MTkxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTowNToyOFrOGHRxQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTowNToyOFrOGHRxQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4NDM1Mg==", "bodyText": "Shall we remove this formatting as it is not necessary?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r410284352", "createdAt": "2020-04-17T15:05:28Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c93df82f4a65e741f1ef0aa41bf2d59c11312c1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDAzNDAwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo0ODozMlrOGIFmdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoxNTozN1rOGIGcng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMzU1OA==", "bodyText": "Formatting issue here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r411133558", "createdAt": "2020-04-20T06:48:32Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-test.bal", "diffHunk": "@@ -201,3 +201,15 @@ function assertArrayLengthPanic(int expected, any[] arr, string message = \"Array\n         panic error(message + \" Expected : \" + expected.toString() + \" Actual : \" + actual.toString());\n     }\n }\n+\n+function testMultidimensionalArrayString() returns string {\n+    int[][2] arr = [];\n+    typedesc<any> t = typeof arr;\n+    return t.toString();\n+}\n+\n+function testArrayMapString() returns string {\n+        map<Foo>[2][] arr = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c93df82f4a65e741f1ef0aa41bf2d59c11312c1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0NzQyMg==", "bodyText": "Is it related to the variable naming?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r411147422", "createdAt": "2020-04-20T07:15:37Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-test.bal", "diffHunk": "@@ -201,3 +201,15 @@ function assertArrayLengthPanic(int expected, any[] arr, string message = \"Array\n         panic error(message + \" Expected : \" + expected.toString() + \" Actual : \" + actual.toString());\n     }\n }\n+\n+function testMultidimensionalArrayString() returns string {\n+    int[][2] arr = [];\n+    typedesc<any> t = typeof arr;\n+    return t.toString();\n+}\n+\n+function testArrayMapString() returns string {\n+        map<Foo>[2][] arr = [];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMzU1OA=="}, "originalCommit": {"oid": "8c93df82f4a65e741f1ef0aa41bf2d59c11312c1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDU4NDU3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTowMDowMVrOGMQyDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTo0MToyN1rOGMRoYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxMTA1NA==", "bodyText": "This cast can be moved to a variable as there are three casts happening for the same.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r415511054", "createdAt": "2020-04-27T05:00:01Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,32 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getTypeName());\n+        sb.append(getSizeString());\n+        BType element = elementType;\n+        while (element instanceof BArrayType) {\n+            sb.append(((BArrayType) element).getSizeString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122d8385f4b861558e324f45e5334784ff3c29c8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyNDk2MA==", "bodyText": "Yes. changed into a variable in a9602ad", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r415524960", "createdAt": "2020-04-27T05:41:27Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,32 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getTypeName());\n+        sb.append(getSizeString());\n+        BType element = elementType;\n+        while (element instanceof BArrayType) {\n+            sb.append(((BArrayType) element).getSizeString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxMTA1NA=="}, "originalCommit": {"oid": "122d8385f4b861558e324f45e5334784ff3c29c8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDY0ODA5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNDozMlrOGMRSLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjowOTo1OVrOGMSTWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTI3OA==", "bodyText": "I don't think we need this line, since already checked in the while.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r415519278", "createdAt": "2020-04-27T05:24:32Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,32 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getTypeName());\n+        sb.append(getSizeString());\n+        BType element = elementType;\n+        while (element instanceof BArrayType) {\n+            sb.append(((BArrayType) element).getSizeString());\n+            if (!(((BArrayType) element).elementType instanceof BArrayType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122d8385f4b861558e324f45e5334784ff3c29c8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyMTk5Mw==", "bodyText": "No. we are here checking the element type of the element which is previously checked in while. Those are different checks.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r415521993", "createdAt": "2020-04-27T05:32:41Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,32 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getTypeName());\n+        sb.append(getSizeString());\n+        BType element = elementType;\n+        while (element instanceof BArrayType) {\n+            sb.append(((BArrayType) element).getSizeString());\n+            if (!(((BArrayType) element).elementType instanceof BArrayType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTI3OA=="}, "originalCommit": {"oid": "122d8385f4b861558e324f45e5334784ff3c29c8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyODY4Mw==", "bodyText": "it will be checked in the beginning of the next loop, won't it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r415528683", "createdAt": "2020-04-27T05:51:43Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,32 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getTypeName());\n+        sb.append(getSizeString());\n+        BType element = elementType;\n+        while (element instanceof BArrayType) {\n+            sb.append(((BArrayType) element).getSizeString());\n+            if (!(((BArrayType) element).elementType instanceof BArrayType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTI3OA=="}, "originalCommit": {"oid": "122d8385f4b861558e324f45e5334784ff3c29c8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzNTk2Mw==", "bodyText": "Yes. Removed them in this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r415535963", "createdAt": "2020-04-27T06:09:59Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,32 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getTypeName());\n+        sb.append(getSizeString());\n+        BType element = elementType;\n+        while (element instanceof BArrayType) {\n+            sb.append(((BArrayType) element).getSizeString());\n+            if (!(((BArrayType) element).elementType instanceof BArrayType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTI3OA=="}, "originalCommit": {"oid": "122d8385f4b861558e324f45e5334784ff3c29c8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTE2NzM2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0NTowOVrOGNLzpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDoxNzoxMlrOGNNBpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3ODExOA==", "bodyText": "why is this check moved outside of while loop's condition?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r416478118", "createdAt": "2020-04-28T09:45:09Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,23 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        BType element = elementType;\n+        sb.append(getSizeString());\n+        while (true) {\n+            if (!(element instanceof BArrayType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b18a564e5435e50421d62e4b33f0d8761a8436"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5MTUyNQ==", "bodyText": "Both methods works fine. But I used this as I thought this code is more clear to look at.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r416491525", "createdAt": "2020-04-28T10:06:31Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,23 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        BType element = elementType;\n+        sb.append(getSizeString());\n+        while (true) {\n+            if (!(element instanceof BArrayType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3ODExOA=="}, "originalCommit": {"oid": "07b18a564e5435e50421d62e4b33f0d8761a8436"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5NDUwNA==", "bodyText": "while (true) {\n    if (!(element instanceof BArrayType)) {\n        break;\n     }\n    ...\n}\nvs\nwhile (element instanceof BArrayType) {\n    ...\n}\nI think the second one is much clearer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r416494504", "createdAt": "2020-04-28T10:11:23Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,23 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        BType element = elementType;\n+        sb.append(getSizeString());\n+        while (true) {\n+            if (!(element instanceof BArrayType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3ODExOA=="}, "originalCommit": {"oid": "07b18a564e5435e50421d62e4b33f0d8761a8436"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5ODA4NA==", "bodyText": "changed it in latest commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r416498084", "createdAt": "2020-04-28T10:17:12Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,23 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        BType element = elementType;\n+        sb.append(getSizeString());\n+        while (true) {\n+            if (!(element instanceof BArrayType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3ODExOA=="}, "originalCommit": {"oid": "07b18a564e5435e50421d62e4b33f0d8761a8436"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTE3NzU5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0Nzo0MVrOGNL51w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo1MToyNVrOGNMCyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3OTcwMw==", "bodyText": "insert is less efficient than append, can we move this above sb.append(getSizeString()); and use append ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r416479703", "createdAt": "2020-04-28T09:47:41Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,23 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        BType element = elementType;\n+        sb.append(getSizeString());\n+        while (true) {\n+            if (!(element instanceof BArrayType)) {\n+                break;\n+            }\n+            BArrayType arrayElement = (BArrayType) element;\n+            sb.append(arrayElement.getSizeString());\n+            element = arrayElement.elementType;\n+        }\n+        sb.insert(0, element.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b18a564e5435e50421d62e4b33f0d8761a8436"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MTk5Mw==", "bodyText": "No. The element getting changed in the loop. So, it must be added at last.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r416481993", "createdAt": "2020-04-28T09:51:25Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,23 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        BType element = elementType;\n+        sb.append(getSizeString());\n+        while (true) {\n+            if (!(element instanceof BArrayType)) {\n+                break;\n+            }\n+            BArrayType arrayElement = (BArrayType) element;\n+            sb.append(arrayElement.getSizeString());\n+            element = arrayElement.elementType;\n+        }\n+        sb.insert(0, element.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3OTcwMw=="}, "originalCommit": {"oid": "07b18a564e5435e50421d62e4b33f0d8761a8436"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUyNTUxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozNDoyMVrOGN08AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozNDoyMVrOGN08AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MjAwMA==", "bodyText": "can we please change this to match the style of the repo, using tag to check the sub class type.\nbType.tag == TypeTags.ARRAY", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r417152000", "createdAt": "2020-04-29T08:34:21Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BArrayType.java", "diffHunk": "@@ -128,8 +128,20 @@ public boolean equals(Object obj) {\n \n     @Override\n     public String toString() {\n-        StringBuilder sb = new StringBuilder(elementType.toString());\n-        return size != -1 ? sb.append(\"[\").append(size).append(\"]\").toString() : sb.append(\"[]\").toString();\n+        StringBuilder sb = new StringBuilder();\n+        BType element = elementType;\n+        sb.append(getSizeString());\n+        while (element instanceof BArrayType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d937100ddcb7e5a1d8bb26f6fba57e7ff64a9571"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUzNjU4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozNzoyNVrOGN1C3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozNzoyNVrOGN1C3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1Mzc1OA==", "bodyText": "can we please add and example with complex type\neg:\n(int|boolean[6][4])[2][3]", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r417153758", "createdAt": "2020-04-29T08:37:25Z", "author": {"login": "manuranga"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-test.bal", "diffHunk": "@@ -201,3 +201,34 @@ function assertArrayLengthPanic(int expected, any[] arr, string message = \"Array\n         panic error(message + \" Expected : \" + expected.toString() + \" Actual : \" + actual.toString());\n     }\n }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d937100ddcb7e5a1d8bb26f6fba57e7ff64a9571"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTM5MzkyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BUnionType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTo0NToxOVrOGOaa_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTo0NToxOVrOGOaa_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2NjE0MA==", "bodyText": "This was correct the way it was, typedesc map<int|string>\nnew format is redundant typedesc map<(int|string)>.\nOnly advance case like (int|boolean[6][4])[2][3] needs brackets", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22708#discussion_r417766140", "createdAt": "2020-04-30T05:45:19Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BUnionType.java", "diffHunk": "@@ -120,7 +120,7 @@ public String toString() {\n                     sb.append(PIPE);\n                 }\n             }\n-            cachedToString = sb.toString();\n+            cachedToString = sb.append(\")\").toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d36132fbe4080bd76afdef3bba901ea3a9078b5"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3871, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}