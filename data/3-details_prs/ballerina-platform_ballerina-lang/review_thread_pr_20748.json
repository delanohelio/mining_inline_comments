{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MzU0MDE2", "number": 20748, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxNDo0OFrODcLLLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTo0MDoyNFrODcLl4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY5ODA1OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/SnippetBlock.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxNDo0OFrOFkFTXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxNDo0OFrOFkFTXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3OTkzNQ==", "bodyText": "Let's add a java doc here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20748#discussion_r373379935", "createdAt": "2020-01-31T09:14:48Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/SnippetBlock.java", "diffHunk": "@@ -126,6 +126,10 @@ public String getLabel() {\n         return label;\n     }\n \n+    public SnippetType getSnippetType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c7efd2847ac17dc1822d3dcbf2702ea3b76ef2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODc2NjQyOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/util/sorters/VariableDefContextItemSorter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTo0MDoyNFrOFkF9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTo0MDoyNFrOFkF9fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MDcxOQ==", "bodyText": "Please revisit returning an empty list here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20748#discussion_r373390719", "createdAt": "2020-01-31T09:40:24Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/util/sorters/VariableDefContextItemSorter.java", "diffHunk": "@@ -17,63 +17,31 @@\n */\n package org.ballerinalang.langserver.completions.util.sorters;\n \n-import org.antlr.v4.runtime.CommonToken;\n-import org.antlr.v4.runtime.Token;\n import org.ballerinalang.langserver.commons.LSContext;\n-import org.ballerinalang.langserver.completions.util.ItemResolverConstants;\n-import org.ballerinalang.langserver.sourceprune.SourcePruneKeys;\n+import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n import org.eclipse.lsp4j.CompletionItem;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n-import java.util.stream.Collectors;\n+\n+import javax.annotation.Nonnull;\n \n /**\n  * Item Sorter for the Variable Definition context.\n  */\n public class VariableDefContextItemSorter extends CompletionItemSorter {\n     /**\n-     * Sort Completion Items based on a particular criteria.\n-     *\n-     * @param ctx             Completion context\n-     * @param completionItems List of initial completion items\n+     * {@inheritDoc}\n      */\n     @Override\n-    public void sortItems(LSContext ctx, List<CompletionItem> completionItems) {\n-        this.setPriorities(completionItems);\n-        String variableType = this.getVariableType(ctx);\n-        // TODO: Revamp with the latest token analyzing\n-        List<String> poppedTokens = ctx.get(SourcePruneKeys.LHS_TOKENS_KEY).stream()\n-                .filter(commonToken -> commonToken.getChannel() == Token.DEFAULT_CHANNEL)\n-                .map(CommonToken::getText)\n-                .collect(Collectors.toList());\n-\n-        if (poppedTokens.contains(\"=\")) {\n-            completionItems.forEach(completionItem -> {\n-                if (completionItem.getDetail().equals(ItemResolverConstants.FUNCTION_TYPE)) {\n-                    String label = completionItem.getLabel();\n-                    String functionReturnType = label.substring(label.lastIndexOf(\"(\") + 1, label.lastIndexOf(\")\"));\n-\n-                    if (variableType.equals(functionReturnType)) {\n-                        this.increasePriority(completionItem);\n-                    }\n-                }\n-            });\n-        }\n-    }\n-    \n-    private void increasePriority(CompletionItem completionItem) {\n-        int sortText = Integer.parseInt(completionItem.getSortText());\n-        completionItem.setSortText(Integer.toString(sortText - 1));\n+    public List<CompletionItem> sortItems(LSContext ctx, List<LSCompletionItem> completionItems) {\n+        return new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c7efd2847ac17dc1822d3dcbf2702ea3b76ef2"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 570, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}