{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjEyNjg2", "number": 21024, "title": "Improve the grpc command to only create essentials in client and service modes", "bodyText": "Purpose\nFixes #20960\nApproach\n\nOnly create messages, enums, and descriptors when the user configures mode as --mode service.\nIn the client mode or in stub mode, ti will generate the *.pb.bal file which contains the entire stub definition.\n\nSamples\nBi-direction stream sample\nThe service generation will be as follows.\nCommand\n$ ballerina grpc --input grpc_bidirectional_streaming.proto --mode service --output .\nGenerated file\nimport ballerina/grpc;\n\nlistener grpc:Listener ep = new (9090);\n\n@grpc:ServiceConfig { \n    name: \"chat\",\n    clientStreaming: true,\n    serverStreaming: true\n}\nservice Chat on ep {\n\n    resource function onOpen(grpc:Caller caller) {\n        // Implementation goes here.\n    }\n\n    resource function onMessage(grpc:Caller caller, ChatMessage value) {\n        // Implementation goes here.\n    }\n\n    resource function onError(grpc:Caller caller, error err) {\n        // Implementation goes here.\n    }\n\n    resource function onComplete(grpc:Caller caller) {\n            // Implementation goes here.\n            // You should return a string\n    }\n\n}\n\npublic type ChatMessage record {|\n    string name = \"\";\n    string message = \"\";\n    \n|};\n\n\nconst string ROOT_DESCRIPTOR = \"0A22677270635F6269646972656374696F6E616C5F73747265616D696E672E70726F746F1A1E676F6F676C652F70726F746F6275662F77726170706572732E70726F746F223B0A0B436861744D65737361676512120A046E616D6518012001280952046E616D6512180A076D65737361676518022001280952076D657373616765323E0A044368617412360A0463686174120C2E436861744D6573736167651A1C2E676F6F676C652E70726F746F6275662E537472696E6756616C756528013001620670726F746F33\";\nfunction getDescriptorMap() returns map<string> {\n    return {\n        \"grpc_bidirectional_streaming.proto\":\"0A22677270635F6269646972656374696F6E616C5F73747265616D696E672E70726F746F1A1E676F6F676C652F70726F746F6275662F77726170706572732E70726F746F223B0A0B436861744D65737361676512120A046E616D6518012001280952046E616D6512180A076D65737361676518022001280952076D657373616765323E0A044368617412360A0463686174120C2E436861744D6573736167651A1C2E676F6F676C652E70726F746F6275662E537472696E6756616C756528013001620670726F746F33\",\n        \"google/protobuf/wrappers.proto\":\"0A1E676F6F676C652F70726F746F6275662F77726170706572732E70726F746F120F676F6F676C652E70726F746F62756622230A0B446F75626C6556616C756512140A0576616C7565180120012801520576616C756522220A0A466C6F617456616C756512140A0576616C7565180120012802520576616C756522220A0A496E74363456616C756512140A0576616C7565180120012803520576616C756522230A0B55496E74363456616C756512140A0576616C7565180120012804520576616C756522220A0A496E74333256616C756512140A0576616C7565180120012805520576616C756522230A0B55496E74333256616C756512140A0576616C756518012001280D520576616C756522210A09426F6F6C56616C756512140A0576616C7565180120012808520576616C756522230A0B537472696E6756616C756512140A0576616C7565180120012809520576616C756522220A0A427974657356616C756512140A0576616C756518012001280C520576616C756542570A13636F6D2E676F6F676C652E70726F746F627566420D577261707065727350726F746F50015A057479706573F80101A20203475042AA021E476F6F676C652E50726F746F6275662E57656C6C4B6E6F776E5479706573620670726F746F33\"\n        \n    };\n}\n\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-02-12T09:59:34Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024", "merged": true, "mergeCommit": {"oid": "603dc629256e74a3b73bcc77b1d2661c94af0462"}, "closed": true, "closedAt": "2020-02-25T02:52:52Z", "author": {"login": "BuddhiWathsala"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDlJMVgFqTM1NzM5NjM3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHhoQBgH2gAyMzc0MjEyNjg2OjVkNjc3NTliZDQ3N2E4NTFkNWFhMzFmZDJmNmU2NDc4YzI0Yjk2OGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Mzk2Mzc3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#pullrequestreview-357396377", "createdAt": "2020-02-12T11:59:38Z", "commit": {"oid": "841c474d2d9cf8a72a838465cd02a2005fd23730"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1OTozOFrOFor-Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1OTo1OFrOFor-1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzc5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean messageExists(String messageName) {\n          \n          \n            \n                public boolean isMessageExist(String messageName) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378207798", "createdAt": "2020-02-12T11:59:38Z", "author": {"login": "chamil321"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.net.grpc.builder.components;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * Holds the abstract features of the stubs which are common to service and client stubs.\n+ */\n+public abstract class AbstractStub {\n+    private List<Message> messageList = new ArrayList<>();\n+    private List<EnumMessage> enumList = new ArrayList<>();\n+    private String rootDescriptor;\n+    private Set<Descriptor> descriptors = new TreeSet<>((descriptor1, descriptor2) -> {\n+        if (descriptor1.getKey().equalsIgnoreCase(descriptor2.getKey())) {\n+            return 0;\n+        }\n+        return 1;\n+    });\n+    public void addMessage(Message message) {\n+        messageList.add(message);\n+    }\n+\n+    public boolean messageExists(String messageName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841c474d2d9cf8a72a838465cd02a2005fd23730"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzk1OA==", "bodyText": "Shall we leave a new line here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378207958", "createdAt": "2020-02-12T11:59:58Z", "author": {"login": "chamil321"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.net.grpc.builder.components;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * Holds the abstract features of the stubs which are common to service and client stubs.\n+ */\n+public abstract class AbstractStub {\n+    private List<Message> messageList = new ArrayList<>();\n+    private List<EnumMessage> enumList = new ArrayList<>();\n+    private String rootDescriptor;\n+    private Set<Descriptor> descriptors = new TreeSet<>((descriptor1, descriptor2) -> {\n+        if (descriptor1.getKey().equalsIgnoreCase(descriptor2.getKey())) {\n+            return 0;\n+        }\n+        return 1;\n+    });\n+    public void addMessage(Message message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841c474d2d9cf8a72a838465cd02a2005fd23730"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzk2MTIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#pullrequestreview-360796121", "createdAt": "2020-02-19T01:54:21Z", "commit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMTo1NDoyMVrOFrYsPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMTo1NDoyMVrOFrYsPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzNzYyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {{#enumList}}{{> enum}}{{/enumList}}{{#if rootDescriptor}}const string ROOT_DESCRIPTOR = \"{{rootDescriptor}}\";\n          \n          \n            \n            {{#enumList}}{{> enum}}{{/enumList}}{{#if rootDescriptor}}\n          \n          \n            \n            const string ROOT_DESCRIPTOR = \"{{rootDescriptor}}\";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381037628", "createdAt": "2020-02-19T01:54:21Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/resources/templates/skeleton/service_sample.mustache", "diffHunk": "@@ -38,3 +38,12 @@ service {{serviceName}} on ep {\n         // You should return a {{outputType}}\n     }{{/unaryFunctions}}\n }\n+\n+{{#each messageList}}{{> message}}{{/each}}\n+{{#enumList}}{{> enum}}{{/enumList}}{{#if rootDescriptor}}const string ROOT_DESCRIPTOR = \"{{rootDescriptor}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzk4Mzg4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#pullrequestreview-360798388", "createdAt": "2020-02-19T02:02:01Z", "commit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjowMjowMVrOFrYzyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjowMjowMVrOFrYzyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzOTU2Mw==", "bodyText": "Shall we compile the generated file and check whether there is any compilation error. and check whether message types and descriptor also there.\nCompileResult compileResult = BCompileUtil.compile(sampleServiceFile.toString());\nassertEquals(compileResult.getDiagnostics().length, 0);\nassertEquals(((BLangPackage) compileResult.getAST()).constants.size(), 1,\n                \"Expected constants not found in compile results.\");\nassertEquals(((BLangPackage) compileResult.getAST()).globalVars.size(), 1,\n                \"Expected global variables not found in compile results.\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381039563", "createdAt": "2020-02-19T02:02:01Z", "author": {"login": "daneshk"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/tool/StubGeneratorTestCase.java", "diffHunk": "@@ -333,6 +334,27 @@ public void testOneofFieldRecordGeneration() throws IllegalAccessException, Clas\n                 \"Expected imports not found in compile results.\");\n     }\n \n+    @Test(description = \"Test case checks creation of only the service file, in the service mode, with single service\")\n+    public void testServiceFileGenWithoutStub() throws IllegalAccessException, ClassNotFoundException,\n+            InstantiationException {\n+        Class<?> grpcCmd = Class.forName(\"org.ballerinalang.protobuf.cmd.GrpcCmd\");\n+        GrpcCmd grpcCommand = (GrpcCmd) grpcCmd.newInstance();\n+        Path tempDirPath = outputDirPath.resolve(\"service\");\n+        Path protoPath = Paths.get(\"helloWorld.proto\");\n+        Path protoRoot = resourceDir.resolve(protoPath);\n+        grpcCommand.setBalOutPath(tempDirPath.toAbsolutePath().toString());\n+        grpcCommand.setProtoPath(protoRoot.toAbsolutePath().toString());\n+        grpcCommand.setMode(\"service\");\n+        grpcCommand.execute();\n+        Path sampleServiceFile = Paths.get(TMP_DIRECTORY_PATH, \"grpc\", \"service\", \"helloWorld_sample_service.bal\");\n+\n+        // This file should not be created when --mode service enabled with one service\n+        Path sampleStubFile = Paths.get(TMP_DIRECTORY_PATH, \"grpc\", \"service\", \"helloWorld_pb.bal\");\n+\n+        assertTrue(Files.exists(sampleServiceFile));\n+        assertFalse(Files.exists(sampleStubFile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwODA1MzY1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#pullrequestreview-360805365", "createdAt": "2020-02-19T02:26:09Z", "commit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjoyNjoxMFrOFrZK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjoyNjoxMFrOFrZK8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTQ4OQ==", "bodyText": "Shall we create a new service stub template file with the only message types and descriptors?\nand generate that stub file when it is service mode. Because we don't need stub functions in service mode.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381045489", "createdAt": "2020-02-19T02:26:10Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/BallerinaFileBuilder.java", "diffHunk": "@@ -174,32 +198,43 @@ private void computeSourceContent(byte[] descriptor, String mode) throws CodeBui\n                 }\n                 serviceStubBuilder.setType(ServiceStub.StubType.NONBLOCKING);\n                 stubFileObject.addServiceStub(serviceStubBuilder.build());\n-                if (GRPC_CLIENT.equals(mode)) {\n-                    String clientFilePath = generateOutputFile(this.balOutPath, serviceDescriptor.getName() +\n-                            SAMPLE_FILE_PREFIX);\n-                    writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains), DEFAULT_SAMPLE_DIR,\n-                            SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n-                }\n+\n                 if (GRPC_SERVICE.equals(mode)) {\n+                    serviceFile = sampleServiceBuilder.build();\n+                    if (!needStubFile) {\n+                        serviceFile.setMessageList(messageList);\n+                        serviceFile.setEnumList(enumList);\n+                        serviceFile.setDescriptors(descriptors);\n+                        if (!stubRootDescriptor.isEmpty()) {\n+                            serviceFile.setRootDescriptor(stubRootDescriptor);\n+                        }\n+                    }\n                     String servicePath = generateOutputFile(this.balOutPath, serviceDescriptor.getName() +\n                             SAMPLE_SERVICE_FILE_PREFIX);\n-                    writeOutputFile(sampleServiceBuilder.build(), DEFAULT_SAMPLE_DIR, SAMPLE_SERVICE_TEMPLATE_NAME,\n+                    writeOutputFile(serviceFile, DEFAULT_SAMPLE_DIR, SAMPLE_SERVICE_TEMPLATE_NAME,\n                             servicePath);\n+                } else if (GRPC_CLIENT.equals(mode)) {\n+                    String clientFilePath = generateOutputFile(\n+                            this.balOutPath,\n+                            serviceDescriptor.getName() + SAMPLE_FILE_PREFIX\n+                    );\n+                    writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains),\n+                            DEFAULT_SAMPLE_DIR,\n+                            SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n+\n                 }\n             }\n-            // read message types.\n-            for (DescriptorProtos.DescriptorProto descriptorProto : messageTypeList) {\n-                Message message = Message.newBuilder(descriptorProto).build();\n-                stubFileObject.addMessage(message);\n-            }\n-            // read enum types.\n-            for (DescriptorProtos.EnumDescriptorProto descriptorProto : enumDescriptorProtos) {\n-                EnumMessage enumMessage = EnumMessage.newBuilder(descriptorProto).build();\n-                stubFileObject.addEnumMessage(enumMessage);\n-            }\n \n-            String stubFilePath = generateOutputFile(this.balOutPath, filename + STUB_FILE_PREFIX);\n-            writeOutputFile(stubFileObject, DEFAULT_SKELETON_DIR, SKELETON_TEMPLATE_NAME, stubFilePath);\n+            if (!GRPC_SERVICE.equals(mode) || needStubFile) {\n+                stubFileObject.setMessageList(messageList);\n+                stubFileObject.setEnumList(enumList);\n+                stubFileObject.setDescriptors(descriptors);\n+                if (!stubRootDescriptor.isEmpty()) {\n+                    stubFileObject.setRootDescriptor(stubRootDescriptor);\n+                }\n+                String stubFilePath = generateOutputFile(this.balOutPath, filename + STUB_FILE_PREFIX);\n+                writeOutputFile(stubFileObject, DEFAULT_SKELETON_DIR, SKELETON_TEMPLATE_NAME, stubFilePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb2b30005242ae9a98901fa04bafc64bfb377d1"}, "originalPosition": 167}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwOTUwNzA3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#pullrequestreview-360950707", "createdAt": "2020-02-19T09:22:35Z", "commit": {"oid": "355d18b3dc626ede2ae344231ac9889faab792f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e1a98ab0b3366e47a7703c2e35cd3289d1aadaf", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e1a98ab0b3366e47a7703c2e35cd3289d1aadaf", "committedDate": "2020-02-24T18:14:22Z", "message": "Improve the grpc command to only create essentials client and service modes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f958c4171b8d970cccba7a54a6777c0fea95b73", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f958c4171b8d970cccba7a54a6777c0fea95b73", "committedDate": "2020-02-24T18:14:22Z", "message": "Rename messageExists and refactor the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ac891ca32120f5400e74cf79a867804038b2e08", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ac891ca32120f5400e74cf79a867804038b2e08", "committedDate": "2020-02-24T18:14:23Z", "message": "Create pb file when there are more than one service in proto file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1488ec91c59246804ea06ff34c3e12c0a15b7fa", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e1488ec91c59246804ea06ff34c3e12c0a15b7fa", "committedDate": "2020-02-24T18:14:23Z", "message": "add test to check only the service creation without stub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea08735f88651ff0146d3400a43b331810098356", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea08735f88651ff0146d3400a43b331810098356", "committedDate": "2020-02-24T18:14:23Z", "message": "create allocated stub file only for service generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f04f54d9c3988b26ddb90dc2232ebadebc63c60", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f04f54d9c3988b26ddb90dc2232ebadebc63c60", "committedDate": "2020-02-24T18:14:23Z", "message": "add compilation step to the testServiceFileGenWithoutStub testcase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d67759bd477a851d5aa31fd2f6e6478c24b968f", "author": {"user": {"login": "BuddhiWathsala", "name": "Buddhi Kothalawala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d67759bd477a851d5aa31fd2f6e6478c24b968f", "committedDate": "2020-02-24T18:14:23Z", "message": "make test compile only"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4272, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}