{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5Nzk3ODk0", "number": 22495, "reviewThreads": {"totalCount": 63, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NToxMFrODv16ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDozMDo1MVrODwWU-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkzMDU5OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NToxMFrOGCf-LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NToxMFrOGCf-LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NDE1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The Ballerina `Cache` object which is used forall the cache-related operations. It is not recommended to insert `()`\n          \n          \n            \n            # The Ballerina `Cache` object which is used for all the cache-related operations. It is not recommended to insert `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405274157", "createdAt": "2020-04-08T05:55:10Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -57,8 +57,8 @@ service cleanupService = service {\n     }\n };\n \n-# Represents the Ballerina `Cache` object and cache-related operations. It is not recommended to insert `()` as the\n-# value of the cache since it doesn't make any sense to cache a nil.\n+# The Ballerina `Cache` object which is used forall the cache-related operations. It is not recommended to insert `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fa271f591a6d95ee638fc32924d3f56d5f010b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk0MjM0OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache_errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1OTozNlrOGCgE0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1OTozNlrOGCgE0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NTg1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Log and prepare the `error` as an `cache:Error` after printing a log.\n          \n          \n            \n            # Prepare the `error` as an `cache:Error` after printing an error log.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405275858", "createdAt": "2020-04-08T05:59:36Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache_errors.bal", "diffHunk": "@@ -25,14 +25,14 @@ public type Detail record {\n     error cause?;\n };\n \n-# Represents the reason for the Cache error.\n+# Represents the reason for the `cache:Error`.\n public const CACHE_ERROR = \"{ballerina/cache}Error\";\n \n-# Represents the Cache error type with details. This will be returned if an error occurred while doing the cache\n+# Represents the Cache error type with details. This will be returned if an error occurred while doing any of the cache\n # operations.\n public type Error error<CACHE_ERROR, Detail>;\n \n-# Log and prepare the `error` as an `Error`.\n+# Log and prepare the `error` as an `cache:Error` after printing a log.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fa271f591a6d95ee638fc32924d3f56d5f010b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk0Nzc1OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowMToyN1rOGCgH0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowMToyN1rOGCgH0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NjYyNQ==", "bodyText": "Please update other places as well.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used for govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405276625", "createdAt": "2020-04-08T06:01:27Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used for govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fa271f591a6d95ee638fc32924d3f56d5f010b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk1ODkxOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowNToyMVrOGCgN3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowNToyMVrOGCgN3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3ODE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Keeps the and the neighbouring nodes of the linked list.\n          \n          \n            \n            # Represents a structure to keep data and references to the adjacent nodes of the linked list.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405278175", "createdAt": "2020-04-08T06:05:21Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -16,17 +16,30 @@\n \n // This is a linked list data structure implementation, which is used for the eviction algorithm of the cache.\n \n+# Keeps the and the neighbouring nodes of the linked list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fa271f591a6d95ee638fc32924d3f56d5f010b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTEwNzE3OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzowMzo1MlrOGChnPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzowMzo1MlrOGChnPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwMTA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. When using the `put` API, if the cache size has reached its capacity, the number of entries get removed based on the\n          \n          \n            \n            'eviction policy' and the 'eviction factor'.\n          \n          \n            \n            2. When using the `put` API, if the cache size has reached its capacity, the number of entries get removed based on the 'eviction policy' and the 'eviction factor'.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405301054", "createdAt": "2020-04-08T07:03:52Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -51,13 +55,14 @@ public type CacheConfig record {|\n \n There are 2 mandatory scenarios and 1 optional scenario, in which a cache entry gets removed from the cache and maintains the freshness of the cache entries. The 2 independent factors (i.e., eviction policy and freshness time of the cache entry) governs the 3 scenarios.\n \n-1. When using the `get` API, if the return cache entry has expired, it gets removed.\n-2. When using the `put` API, if the cache size has reached its capacity, the number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+1. When using the `get` API, if the returning cache entry has expired, it gets removed.\n+2. When using the `put` API, if the cache size has reached its capacity, the number of entries get removed based on the\n+'eviction policy' and the 'eviction factor'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIyOTM3OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0MjowMVrOGCiy_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0MjowMVrOGCiy_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMDQ0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides APIs for handle caching in Ballerina. It consists of a default implementation based on map data structure. It also provides a default cache eviction policy object which is based on the LRU eviction algorithm.\n          \n          \n            \n            This module provides APIs for handle caching in Ballerina. It consists of a default implementation based on the map data structure. It also provides a default cache eviction policy object, which is based on the LRU eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405320444", "createdAt": "2020-04-08T07:42:01Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,6 +1,8 @@\n ## Module Overview\n \n-The `AbstractCache` object has the common APIs as follows. Also, there can be \"custom implementations\" with a different data storage like file, database, etc. with structural equivalency to the abstract object.\n+This module provides APIs for handle caching in Ballerina. It consists of a default implementation based on map data structure. It also provides a default cache eviction policy object which is based on the LRU eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIzMTg1OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Mjo0NlrOGCi0dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Mjo0NlrOGCi0dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMDgyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `cache:AbstractCache` object has the common APIs for the caching functionalities. \"Custom implementations\" of the cache can be done with different data storage like file, database, etc. with the structural equivalency to the `cache:AbstractCacheObject` object.\n          \n          \n            \n            The `cache:AbstractCache` object has the common APIs for the caching functionalities. Custom implementations of the cache can be done with different data storages like file, database, etc. with the structural equivalency to the `cache:AbstractCacheObject` object.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405320822", "createdAt": "2020-04-08T07:42:46Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,6 +1,8 @@\n ## Module Overview\n \n-The `AbstractCache` object has the common APIs as follows. Also, there can be \"custom implementations\" with a different data storage like file, database, etc. with structural equivalency to the abstract object.\n+This module provides APIs for handle caching in Ballerina. It consists of a default implementation based on map data structure. It also provides a default cache eviction policy object which is based on the LRU eviction algorithm.\n+\n+The `cache:AbstractCache` object has the common APIs for the caching functionalities. \"Custom implementations\" of the cache can be done with different data storage like file, database, etc. with the structural equivalency to the `cache:AbstractCacheObject` object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIzMjc2OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0MzowMlrOGCi1Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0MzowMlrOGCi1Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMDk2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `cache:AbstractEvictionPolicy` object has the common APIs for the cache eviction functionalities. \"Custom implementations\" of the eviction policy can be done by maintaining the `cache:LinkedList` data structure according to the eviction algorithm.\n          \n          \n            \n            The `cache:AbstractEvictionPolicy` object has the common APIs for the cache eviction functionalities. Custom implementations of the eviction policy can be done by maintaining the `cache:LinkedList` data structure according to the eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405320963", "createdAt": "2020-04-08T07:43:02Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -15,7 +17,7 @@ public type AbstractCache abstract object {\n };\n ```\n \n-The `AbstractEvictionPolicy` object has the common APIs as follows. Also, there can be \"custom implementations\" with different eviction algorithms with structural equivalency to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n+The `cache:AbstractEvictionPolicy` object has the common APIs for the cache eviction functionalities. \"Custom implementations\" of the eviction policy can be done by maintaining the `cache:LinkedList` data structure according to the eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIzNjE2OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Mzo1NFrOGCi3Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Mzo1NFrOGCi3Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMTQ3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Ballerina Cache module provides the `cache:Cache` object, which is a `map` data structure based implementation of the `cache:AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the `cache:LruEvictionPolicy` object, which is based on the LRU eviction algorithm.\n          \n          \n            \n            The Ballerina Cache module provides the `cache:Cache` object, which is a `map` data structure based implementation of the `cache:AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make sense to cache a nil. Also, it provides the `cache:LruEvictionPolicy` object, which is based on the LRU eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405321475", "createdAt": "2020-04-08T07:43:54Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -28,16 +30,18 @@ public type AbstractEvictionPolicy abstract object {\n };\n ```\n \n-The Ballerina Cache module provides a `Cache` object, which is a map data structure based implementation of the `AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the `LruEvictionPolicy` object, which is based on the LRU eviction algorithm.\n+The Ballerina Cache module provides the `cache:Cache` object, which is a `map` data structure based implementation of the `cache:AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the `cache:LruEvictionPolicy` object, which is based on the LRU eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIzNzQ2OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NDoxNFrOGCi30Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NDoxNFrOGCi30Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMTY4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While initializing the `cache:Cache`, the developer has to pass the following parameters as the cache configurations.\n          \n          \n            \n            While initializing the `cache:Cache`, you need to pass the following parameters as the cache configurations.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405321681", "createdAt": "2020-04-08T07:44:14Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -28,16 +30,18 @@ public type AbstractEvictionPolicy abstract object {\n };\n ```\n \n-The Ballerina Cache module provides a `Cache` object, which is a map data structure based implementation of the `AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the `LruEvictionPolicy` object, which is based on the LRU eviction algorithm.\n+The Ballerina Cache module provides the `cache:Cache` object, which is a `map` data structure based implementation of the `cache:AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the `cache:LruEvictionPolicy` object, which is based on the LRU eviction algorithm.\n \n-While initializing the `Cache`, the developer has to pass the following parameters as the cache configurations.\n-- `capacity` - Max number of entries allowed for the cache\n-- `evictionPolicy` - The policy, which defines the cache eviction algorithm\n-- `evictionFactor` - The factor of which the entries will be evicted once the cache is full\n-- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property when inserting an entry to the cache. '-1' means, the entries are valid forever.\n-- `cleanupIntervalInSeconds` - The interval time of the timer task, which cleans the cache entries. This is an optional parameter.\n+While initializing the `cache:Cache`, the developer has to pass the following parameters as the cache configurations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIzOTM1OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NDo0MFrOGCi43Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NDo0MFrOGCi43Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMTk0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries.\n          \n          \n            \n            - `cleanupIntervalInSeconds` - The interval time of the timer task, which cleans the cache entries", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405321949", "createdAt": "2020-04-08T07:44:40Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -28,16 +30,18 @@ public type AbstractEvictionPolicy abstract object {\n };\n ```\n \n-The Ballerina Cache module provides a `Cache` object, which is a map data structure based implementation of the `AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the `LruEvictionPolicy` object, which is based on the LRU eviction algorithm.\n+The Ballerina Cache module provides the `cache:Cache` object, which is a `map` data structure based implementation of the `cache:AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the `cache:LruEvictionPolicy` object, which is based on the LRU eviction algorithm.\n \n-While initializing the `Cache`, the developer has to pass the following parameters as the cache configurations.\n-- `capacity` - Max number of entries allowed for the cache\n-- `evictionPolicy` - The policy, which defines the cache eviction algorithm\n-- `evictionFactor` - The factor of which the entries will be evicted once the cache is full\n-- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property when inserting an entry to the cache. '-1' means, the entries are valid forever.\n-- `cleanupIntervalInSeconds` - The interval time of the timer task, which cleans the cache entries. This is an optional parameter.\n+While initializing the `cache:Cache`, the developer has to pass the following parameters as the cache configurations.\n+- `capacity` - Maximum number of entries allowed for the cache\n+- `evictionPolicy` - The policy to define the cache eviction algorithm\n+- `evictionFactor` - The factor by which the entries will be evicted once the cache is full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the\n+`maxAgeInSeconds` property when inserting an entry to the cache. '-1' means the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIzOTkwOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NDo1MVrOGCi5QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NDo1MVrOGCi5QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMjA0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For a better user experience, the above mentioned configuration is initialized with default values as follows:\n          \n          \n            \n            For a better user experience, the above-mentioned configuration is initialized with the below default values:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405322049", "createdAt": "2020-04-08T07:44:51Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -28,16 +30,18 @@ public type AbstractEvictionPolicy abstract object {\n };\n ```\n \n-The Ballerina Cache module provides a `Cache` object, which is a map data structure based implementation of the `AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the `LruEvictionPolicy` object, which is based on the LRU eviction algorithm.\n+The Ballerina Cache module provides the `cache:Cache` object, which is a `map` data structure based implementation of the `cache:AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the `cache:LruEvictionPolicy` object, which is based on the LRU eviction algorithm.\n \n-While initializing the `Cache`, the developer has to pass the following parameters as the cache configurations.\n-- `capacity` - Max number of entries allowed for the cache\n-- `evictionPolicy` - The policy, which defines the cache eviction algorithm\n-- `evictionFactor` - The factor of which the entries will be evicted once the cache is full\n-- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property when inserting an entry to the cache. '-1' means, the entries are valid forever.\n-- `cleanupIntervalInSeconds` - The interval time of the timer task, which cleans the cache entries. This is an optional parameter.\n+While initializing the `cache:Cache`, the developer has to pass the following parameters as the cache configurations.\n+- `capacity` - Maximum number of entries allowed for the cache\n+- `evictionPolicy` - The policy to define the cache eviction algorithm\n+- `evictionFactor` - The factor by which the entries will be evicted once the cache is full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the\n+`maxAgeInSeconds` property when inserting an entry to the cache. '-1' means the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries.\n+This is an optional parameter.\n \n-For a better user experience, the above config is initialized with default values as follows:\n+For a better user experience, the above mentioned configuration is initialized with default values as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI0MjAwOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NToyNVrOGCi6fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NToyNVrOGCi6fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMjM2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are 2 mandatory scenarios and 1 optional scenario, in which a cache entry gets removed from the cache and maintains the freshness of the cache entries. The 2 independent factors (i.e., eviction policy and freshness time of the cache entry) governs the 3 scenarios.\n          \n          \n            \n            There are 2 mandatory scenarios and 1 optional scenario in which a cache entry gets removed from the cache and maintains the freshness of the cache entries. The 2 independent factors (i.e., eviction policy and freshness time of the cache entry) governs the 3 scenarios.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405322366", "createdAt": "2020-04-08T07:45:25Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -51,13 +55,14 @@ public type CacheConfig record {|\n \n There are 2 mandatory scenarios and 1 optional scenario, in which a cache entry gets removed from the cache and maintains the freshness of the cache entries. The 2 independent factors (i.e., eviction policy and freshness time of the cache entry) governs the 3 scenarios.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI0NTgxOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NjozMVrOGCi83A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NjozMVrOGCi83A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMjk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A linked list is used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list will be updated. Therefore, when an eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n          \n          \n            \n            A linked list is used for the eviction of the cache. According to the user-configured eviction policy, when inserting / updating / retrieving cache entries, the linked list will be updated. Therefore, when an eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405322972", "createdAt": "2020-04-08T07:46:31Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -77,22 +82,22 @@ type CacheEntry record {|\n |};\n ```\n \n-The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n+A linked list is used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list will be updated. Therefore, when an eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI0NzI4OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Njo1MlrOGCi9rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Njo1MlrOGCi9rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMzE4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When an eviction happens, nodes from the tail will be deleted without iterating the map.\n          \n          \n            \n            **Example:** If the eviction policy is LRU, the MRU item will always be the head of the linked list. When an eviction happens, nodes from the tail will be deleted without iterating the map.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405323183", "createdAt": "2020-04-08T07:46:52Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -77,22 +82,22 @@ type CacheEntry record {|\n |};\n ```\n \n-The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n+A linked list is used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list will be updated. Therefore, when an eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n \n-**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When an eviction happens, nodes from the tail will be deleted without iterating the map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI0ODIwOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NzoxMVrOGCi-Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NzoxMVrOGCi-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMzMzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Furthermore, the developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.\n          \n          \n            \n            Furthermore, you can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405323330", "createdAt": "2020-04-08T07:47:11Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -77,22 +82,22 @@ type CacheEntry record {|\n |};\n ```\n \n-The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n+A linked list is used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list will be updated. Therefore, when an eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n \n-**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When an eviction happens, nodes from the tail will be deleted without iterating the map.\n \n-Further, developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.\n+Furthermore, the developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI1MDE1OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Nzo0MVrOGCi_eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Nzo0MVrOGCi_eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMzY0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following is a sample with a cache with a capacity of 1000 entries, an eviction factor of 0.2, the default freshness time as 1 hour per an entry, and clean up timer configured with aa interval of 5 seconds.\n          \n          \n            \n            The following is a sample with a cache with a capacity of 1000 entries, an eviction factor of 0.2, the default freshness time as 1 hour per an entry, and clean up timer configured with an interval of 5 seconds.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405323642", "createdAt": "2020-04-08T07:47:41Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -77,22 +82,22 @@ type CacheEntry record {|\n |};\n ```\n \n-The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n+A linked list is used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list will be updated. Therefore, when an eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n \n-**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When an eviction happens, nodes from the tail will be deleted without iterating the map.\n \n-Further, developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.\n+Furthermore, the developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.\n \n ### Samples\n \n #### Cache Initialization\n \n-The following is a basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor as 0.25:\n+The following is a sample cache with a capacity of 100 entries, which uses LRU as the eviction policy and an eviction factor as 0.25, which are the default values:\n ```ballerina\n cache:Cache cache = new;\n ```\n \n-The following is a basic sample with a cache capacity of 1000, the eviction factor as 0.2, cache entry default freshness time as 1 hour, and clean up timer configured with a 5 seconds interval:\n+The following is a sample with a cache with a capacity of 1000 entries, an eviction factor of 0.2, the default freshness time as 1 hour per an entry, and clean up timer configured with aa interval of 5 seconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI1MTMwOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Nzo1N1rOGCjAJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Nzo1N1rOGCjAJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMzgxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The `cache:AbstractCache` object is used for custom implementations of ballerina cache.\n          \n          \n            \n            # The `cache:AbstractCache` object is used for custom implementations of the Ballerina cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405323815", "createdAt": "2020-04-08T07:47:57Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -14,52 +14,54 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# The `cache:AbstractCache` object is used for custom implementations of ballerina cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2MDkyOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MDozMFrOGCjF8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MDozMFrOGCjF8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTI5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n          \n          \n            \n            # The `cache:AbstractEvictionPolicy` Ballerina  object is used for custom implementations of the eviction policy for a", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405325297", "createdAt": "2020-04-08T07:50:30Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2MTY1OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MDo0M1rOGCjGaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MDo0M1rOGCjGaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTQxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405325417", "createdAt": "2020-04-08T07:50:43Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2MjA3OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MDo1MFrOGCjGqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MDo1MFrOGCjGqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTQ4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is retrieved\n          \n          \n            \n                # + node - Node of the linked list, which is retrieved", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405325481", "createdAt": "2020-04-08T07:50:50Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2MjU1OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MDo1OFrOGCjHCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MDo1OFrOGCjHCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTU3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405325577", "createdAt": "2020-04-08T07:50:58Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2MzA5OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTowNlrOGCjHYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTowNlrOGCjHYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTY2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is added newly\n          \n          \n            \n                # + node - Node of the linked list, which is added newly", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405325667", "createdAt": "2020-04-08T07:51:06Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2MzUwOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MToxNVrOGCjHpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MToxNVrOGCjHpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTczNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405325735", "createdAt": "2020-04-08T07:51:15Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node);\n \n-    # Update the linked list based on the remove operation.\n+    # Updates the linked list based on the remove operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2MzgyOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MToyMlrOGCjH2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MToyMlrOGCjH2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTc4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is deleted\n          \n          \n            \n                # + node - Node of the linked list, which is deleted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405325786", "createdAt": "2020-04-08T07:51:22Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node);\n \n-    # Update the linked list based on the remove operation.\n+    # Updates the linked list based on the remove operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2NDEyOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTozMFrOGCjIDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTozMFrOGCjIDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405325838", "createdAt": "2020-04-08T07:51:30Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node);\n \n-    # Update the linked list based on the remove operation.\n+    # Updates the linked list based on the remove operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node);\n \n-    # Update the linked list based on the replace operation.\n+    # Updates the linked list based on the replace operation.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2NDQzOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTozN1rOGCjIUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTozN1rOGCjIUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTkwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + newNode - Node of the linked list which will be replacing the `oldNode`\n          \n          \n            \n                # + newNode - Node of the linked list, which will be replacing the `oldNode`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405325904", "createdAt": "2020-04-08T07:51:37Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node);\n \n-    # Update the linked list based on the remove operation.\n+    # Updates the linked list based on the remove operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node);\n \n-    # Update the linked list based on the replace operation.\n+    # Updates the linked list based on the replace operation.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2NTE3OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTo0OFrOGCjIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTo0OFrOGCjIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNjAyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + oldNode - Node of the linked list which will be replaced by the `newNode`\n          \n          \n            \n                # + oldNode - Node of the linked list, which will be replaced by the `newNode`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405326022", "createdAt": "2020-04-08T07:51:48Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node);\n \n-    # Update the linked list based on the remove operation.\n+    # Updates the linked list based on the remove operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node);\n \n-    # Update the linked list based on the replace operation.\n+    # Updates the linked list based on the replace operation.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`\n+    # + oldNode - Node of the linked list which will be replaced by the `newNode`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2NjA1OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTo1OFrOGCjJRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MTo1OFrOGCjJRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNjE1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405326150", "createdAt": "2020-04-08T07:51:58Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node);\n \n-    # Update the linked list based on the remove operation.\n+    # Updates the linked list based on the remove operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node);\n \n-    # Update the linked list based on the replace operation.\n+    # Updates the linked list based on the replace operation.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`\n+    # + oldNode - Node of the linked list which will be replaced by the `newNode`\n     public function replace(LinkedList list, Node newNode, Node oldNode);\n \n-    # Update the linked list based on the clear operation.\n+    # Updates the linked list based on the clear operation.\n     #\n-    # + list - Linked list data structure\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2NjM4OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MjowNlrOGCjJgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MjowNlrOGCjJgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNjIxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405326211", "createdAt": "2020-04-08T07:52:06Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node);\n \n-    # Update the linked list based on the remove operation.\n+    # Updates the linked list based on the remove operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node);\n \n-    # Update the linked list based on the replace operation.\n+    # Updates the linked list based on the replace operation.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`\n+    # + oldNode - Node of the linked list which will be replaced by the `newNode`\n     public function replace(LinkedList list, Node newNode, Node oldNode);\n \n-    # Update the linked list based on the clear operation.\n+    # Updates the linked list based on the clear operation.\n     #\n-    # + list - Linked list data structure\n+    # + list - Linked list data structure which is used to govern the eviction policy\n     public function clear(LinkedList list);\n \n-    # Update the linked list based on the evict operation.\n+    # Updates the linked list based on the evict operation.\n     #\n-    # + list - Linked list data structure\n-    # + return - The Node, which should evict from the linked list or `()` if nothing to be evicted\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI2NjkwOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MjoxNlrOGCjJ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MjoxNlrOGCjJ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNjI5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The Node which is evicted from the linked list or `()` if nothing to be evicted\n          \n          \n            \n                # + return - The Node, which is evicted from the linked list or `()` if nothing to be evicted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405326297", "createdAt": "2020-04-08T07:52:16Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -14,45 +14,44 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n-# based on a linked list data structure.\n-# Any custom cache implementation should be object-wise similar.\n+# The Ballerina `cache:AbstractEvictionPolicy` object is used for custom implementations of eviction policy for a\n+# Ballerina cache object. Any custom eviction policy implementation should be object-wise similar.\n public type AbstractEvictionPolicy abstract object {\n \n-    # Update the linked list based on the get operation.\n+    # Updates the linked list based on the get operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node);\n \n-    # Update the linked list based on the put operation.\n+    # Updates the linked list based on the put operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node);\n \n-    # Update the linked list based on the remove operation.\n+    # Updates the linked list based on the remove operation.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node);\n \n-    # Update the linked list based on the replace operation.\n+    # Updates the linked list based on the replace operation.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`\n+    # + oldNode - Node of the linked list which will be replaced by the `newNode`\n     public function replace(LinkedList list, Node newNode, Node oldNode);\n \n-    # Update the linked list based on the clear operation.\n+    # Updates the linked list based on the clear operation.\n     #\n-    # + list - Linked list data structure\n+    # + list - Linked list data structure which is used to govern the eviction policy\n     public function clear(LinkedList list);\n \n-    # Update the linked list based on the evict operation.\n+    # Updates the linked list based on the evict operation.\n     #\n-    # + list - Linked list data structure\n-    # + return - The Node, which should evict from the linked list or `()` if nothing to be evicted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + return - The Node which is evicted from the linked list or `()` if nothing to be evicted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3MDIyOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MzowNVrOGCjLxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MzowNVrOGCjLxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNjc4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + evictionPolicy - The policy which defines the cache eviction algorithm\n          \n          \n            \n            # + evictionPolicy - The policy, which defines the cache eviction algorithm", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405326788", "createdAt": "2020-04-08T07:53:05Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -17,15 +17,15 @@\n import ballerina/task;\n import ballerina/time;\n \n-# Represents cache configuration.\n+# Represents configurations for the `cache:Cache` object.\n #\n-# + capacity - Maximum number of entries allowed\n+# + capacity - Maximum number of entries allowed in the cache\n # + evictionPolicy - The policy which defines the cache eviction algorithm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3MTE5OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MzoxOVrOGCjMWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MzoxOVrOGCjMWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNjkzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + evictionFactor - The factor which by which the entries will be evicted once the cache is full\n          \n          \n            \n            # + evictionFactor - The factor by which the entries will be evicted once the cache is full", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405326939", "createdAt": "2020-04-08T07:53:19Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -17,15 +17,15 @@\n import ballerina/task;\n import ballerina/time;\n \n-# Represents cache configuration.\n+# Represents configurations for the `cache:Cache` object.\n #\n-# + capacity - Maximum number of entries allowed\n+# + capacity - Maximum number of entries allowed in the cache\n # + evictionPolicy - The policy which defines the cache eviction algorithm\n-# + evictionFactor - The factor which the entries will be evicted once the cache full\n+# + evictionFactor - The factor which by which the entries will be evicted once the cache is full", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3MTYyOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MzoyOFrOGCjMpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1MzoyOFrOGCjMpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cleanupIntervalInSeconds - Interval of the timer task which will clean up the cache\n          \n          \n            \n            # + cleanupIntervalInSeconds - Interval of the timer task, which will clean up the cache", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405327013", "createdAt": "2020-04-08T07:53:28Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -17,15 +17,15 @@\n import ballerina/task;\n import ballerina/time;\n \n-# Represents cache configuration.\n+# Represents configurations for the `cache:Cache` object.\n #\n-# + capacity - Maximum number of entries allowed\n+# + capacity - Maximum number of entries allowed in the cache\n # + evictionPolicy - The policy which defines the cache eviction algorithm\n-# + evictionFactor - The factor which the entries will be evicted once the cache full\n+# + evictionFactor - The factor which by which the entries will be evicted once the cache is full\n # + defaultMaxAgeInSeconds - The default value in seconds which all the cache entries are valid.\n #                            '-1' means, the entries are valid forever. This will be overwritten by the the\n #                            `maxAgeInSeconds` property set when inserting item to the cache\n-# + cleanupIntervalInSeconds - Interval of the timer task which clean up the cache\n+# + cleanupIntervalInSeconds - Interval of the timer task which will clean up the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3MjczOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Mzo0NFrOGCjNUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Mzo0NFrOGCjNUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzE4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The Ballerina `Cache` object which is used for all the cache-related operations. It is not recommended to insert `()`\n          \n          \n            \n            # The Cache` Ballerina ` object, which is used for all the cache-related operations. It is not recommended to insert `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405327184", "createdAt": "2020-04-08T07:53:44Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -57,8 +57,8 @@ service cleanupService = service {\n     }\n };\n \n-# Represents the Ballerina `Cache` object and cache-related operations. It is not recommended to insert `()` as the\n-# value of the cache since it doesn't make any sense to cache a nil.\n+# The Ballerina `Cache` object which is used for all the cache-related operations. It is not recommended to insert `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3NDMyOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NDowOVrOGCjORQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NDowOVrOGCjORQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzQyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # provided key, the old value wil be replaced by the newly provided value.\n          \n          \n            \n                # provided key, the old value wil be replaced by the newly-provided value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405327429", "createdAt": "2020-04-08T07:54:09Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -116,12 +116,13 @@ public type Cache object {\n         }\n     }\n \n-    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n-    # old value is replaced by value.\n+    # Adds the given key value pair to the cache. If the cache previously contained a value associated with the\n+    # provided key, the old value wil be replaced by the newly provided value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3NTMxOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NDoyNFrOGCjO8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NDoyNFrOGCjO8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzYwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + maxAgeInSeconds - The time in seconds for which the cache entry is valid. If the values is '-1' the entry is\n          \n          \n            \n                # + maxAgeInSeconds - The time in seconds for which the cache entry is valid. If the value is '-1', the entry is", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405327600", "createdAt": "2020-04-08T07:54:24Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -116,12 +116,13 @@ public type Cache object {\n         }\n     }\n \n-    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n-    # old value is replaced by value.\n+    # Adds the given key value pair to the cache. If the cache previously contained a value associated with the\n+    # provided key, the old value wil be replaced by the newly provided value.\n     #\n-    # + key - Key of the cached value\n+    # + key - Key of the value to be cached\n     # + value - Value to be cached. Value should not be `()`\n-    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n+    # + maxAgeInSeconds - The time in seconds for which the cache entry is valid. If the values is '-1' the entry is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3NjA0OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NDozNVrOGCjPXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NDozNVrOGCjPXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + key - Key of the cached value which should be retrieved\n          \n          \n            \n                # + key - Key of the cached value, which should be retrieved", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405327708", "createdAt": "2020-04-08T07:54:35Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -161,11 +162,11 @@ public type Cache object {\n         }\n     }\n \n-    # Return the cached value associated with the given key.\n+    # Returns the cached value associated with the provided key.\n     #\n-    # + key - Key which is used to retrieve the cached value\n-    # + return - The cached value associated with the given key or\n-    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    # + key - Key of the cached value which should be retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3NzA0OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NDo0OFrOGCjP9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NDo0OFrOGCjP9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzg2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The cached value associated with the provided key. or an `Error`, if the provided cache key is not\n          \n          \n            \n                # + return - The cached value associated with the provided key or an `Error` if the provided cache key is not", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405327862", "createdAt": "2020-04-08T07:54:48Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -161,11 +162,11 @@ public type Cache object {\n         }\n     }\n \n-    # Return the cached value associated with the given key.\n+    # Returns the cached value associated with the provided key.\n     #\n-    # + key - Key which is used to retrieve the cached value\n-    # + return - The cached value associated with the given key or\n-    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    # + key - Key of the cached value which should be retrieved\n+    # + return - The cached value associated with the provided key. or an `Error`, if the provided cache key is not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3Nzc1OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NTowMVrOGCjQZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NTowMVrOGCjQZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            exisiting in the cache or any error occurred while retrieving from value from the cache.\n          \n          \n            \n                #            exisiting in the cache or any error occurred while retrieving the value from the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405327972", "createdAt": "2020-04-08T07:55:01Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -161,11 +162,11 @@ public type Cache object {\n         }\n     }\n \n-    # Return the cached value associated with the given key.\n+    # Returns the cached value associated with the provided key.\n     #\n-    # + key - Key which is used to retrieve the cached value\n-    # + return - The cached value associated with the given key or\n-    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    # + key - Key of the cached value which should be retrieved\n+    # + return - The cached value associated with the provided key. or an `Error`, if the provided cache key is not\n+    #            exisiting in the cache or any error occurred while retrieving from value from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI3ODQzOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NToxMFrOGCjQxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NToxMFrOGCjQxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyODA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + key - Key of the cache value which needs to be discarded from the cache\n          \n          \n            \n                # + key - Key of the cache value, which needs to be discarded from the cache", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405328068", "createdAt": "2020-04-08T07:55:10Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -188,11 +189,11 @@ public type Cache object {\n         }\n     }\n \n-    # Discard a cached value from the cache.\n+    # Discards a cached value from the cache.\n     #\n-    # + key - Key of the cache entry which needs to be discarded\n-    # + return - `()` if successfully discarded or\n-    # `Error` if the provided cache key is not or if any error occurred while discarding from the cache.\n+    # + key - Key of the cache value which needs to be discarded from the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4MTkyOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache_errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NjoxMVrOGCjS8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NjoxMVrOGCjS8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyODYyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Prepare the `error` as an `cache:Error` after printing an error log.\n          \n          \n            \n            # Prepare the `error` as a `cache:Error` after printing an error log.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405328624", "createdAt": "2020-04-08T07:56:11Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache_errors.bal", "diffHunk": "@@ -25,14 +25,14 @@ public type Detail record {\n     error cause?;\n };\n \n-# Represents the reason for the Cache error.\n+# Represents the reason for the `cache:Error`.\n public const CACHE_ERROR = \"{ballerina/cache}Error\";\n \n-# Represents the Cache error type with details. This will be returned if an error occurred while doing the cache\n+# Represents the Cache error type with details. This will be returned if an error occurred while doing any of the cache\n # operations.\n public type Error error<CACHE_ERROR, Detail>;\n \n-# Log and prepare the `error` as an `Error`.\n+# Prepare the `error` as an `cache:Error` after printing an error log.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4MjQyOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache_errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NjoxOFrOGCjTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NjoxOFrOGCjTNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyODY5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Prepare the `error` as an `cache:Error` after printing a debug log.\n          \n          \n            \n            # Prepare the `error` as a `cache:Error` after printing a debug log.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405328695", "createdAt": "2020-04-08T07:56:18Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache_errors.bal", "diffHunk": "@@ -48,7 +48,7 @@ function prepareError(string message, error? err = ()) returns Error {\n     return cacheError;\n }\n \n-# Prepare the `error` as an `Error`.\n+# Prepare the `error` as an `cache:Error` after printing a debug log.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4MzU4OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NjozOVrOGCjT9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NjozOVrOGCjT9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyODg4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents a linked list which is used to govern the cache eviction policy.\n          \n          \n            \n            # Represents a linked list, which is used to govern the cache eviction policy.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405328884", "createdAt": "2020-04-08T07:56:39Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -16,17 +16,30 @@\n \n // This is a linked list data structure implementation, which is used for the eviction algorithm of the cache.\n \n+# Represents a structure to keep data and references to the adjacent nodes of the linked list.\n+#\n+# + value - Value to be stored in the linked list node\n+# + prev - Previous node of the linked list\n+# + next - Next node of the linked list\n public type Node record {|\n     any value;\n     Node? prev = ();\n     Node? next = ();\n |};\n \n+# Represents a linked list which is used to govern the cache eviction policy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4NDQzOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Njo1MVrOGCjUZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Njo1MVrOGCjUZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyODk5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + node - The node which should be added to the provided linked list\n          \n          \n            \n            # + node - The node, which should be added to the provided linked list", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405328998", "createdAt": "2020-04-08T07:56:51Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -16,17 +16,30 @@\n \n // This is a linked list data structure implementation, which is used for the eviction algorithm of the cache.\n \n+# Represents a structure to keep data and references to the adjacent nodes of the linked list.\n+#\n+# + value - Value to be stored in the linked list node\n+# + prev - Previous node of the linked list\n+# + next - Next node of the linked list\n public type Node record {|\n     any value;\n     Node? prev = ();\n     Node? next = ();\n |};\n \n+# Represents a linked list which is used to govern the cache eviction policy.\n+#\n+# + head - The first node of the linked list\n+# + tail - The last node of the linked list\n public type LinkedList record {\n     Node? head;\n     Node? tail;\n };\n \n+# Adds a node to the end of the provided linked list.\n+#\n+# + list - Linked list to which the provided node should be added\n+# + node - The node which should be added to the provided linked list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4NTA3OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NzowMlrOGCjUzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NzowMlrOGCjUzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyOTEwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + node - The node which should be added to the provided linked list\n          \n          \n            \n            # + node - The node, which should be added to the provided linked list", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405329100", "createdAt": "2020-04-08T07:57:02Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -40,6 +53,10 @@ public function addLast(LinkedList list, Node node) {\n     list.tail = node;\n }\n \n+# Adds a node to the start of the provided linked list.\n+#\n+# + list - Linked list to which the provided node should be added\n+# + node - The node which should be added to the provided linked list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4NTYzOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NzoxMlrOGCjVJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1NzoxMlrOGCjVJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyOTE5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + node - The node which should be removed from the provided linked list\n          \n          \n            \n            # + node - The node, which should be removed from the provided linked list", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405329191", "createdAt": "2020-04-08T07:57:12Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -53,6 +70,10 @@ public function addFirst(LinkedList list, Node node) {\n     list.head = node;\n }\n \n+# Removes a node from the provided linked list.\n+#\n+# + list - Linked list from which the provided node should be removed\n+# + node - The node which should be removed from the provided linked list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4NzI3OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Nzo0MVrOGCjWQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Nzo0MVrOGCjWQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyOTQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405329474", "createdAt": "2020-04-08T07:57:41Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4NzgwOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Nzo0N1rOGCjWkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Nzo0N1rOGCjWkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyOTU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is retrieved\n          \n          \n            \n                # + node - Node of the linked list, which is retrieved", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405329554", "createdAt": "2020-04-08T07:57:47Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4ODQ2OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Nzo1NlrOGCjW8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1Nzo1NlrOGCjW8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyOTY1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405329651", "createdAt": "2020-04-08T07:57:56Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4OTAzOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODowNFrOGCjXTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODowNFrOGCjXTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyOTc0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is added newly\n          \n          \n            \n                # + node - Node of the linked list, which is added newly", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405329743", "createdAt": "2020-04-08T07:58:04Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4OTUxOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODoxNFrOGCjXrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODoxNFrOGCjXrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyOTgzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405329836", "createdAt": "2020-04-08T07:58:14Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node) {\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the remove operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the remove operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI4OTk4OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODoyMlrOGCjX9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODoyMlrOGCjX9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyOTkwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is deleted\n          \n          \n            \n                # + node - Node of the linked list, which is deleted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405329908", "createdAt": "2020-04-08T07:58:22Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node) {\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the remove operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the remove operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI5MDY0OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODozMVrOGCjYXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODozMVrOGCjYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzMDAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405330012", "createdAt": "2020-04-08T07:58:31Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node) {\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the remove operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the remove operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node) {\n         remove(list, node);\n     }\n \n-    # Update the linked list based on the replace operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the replace operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI5MTIwOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODozOFrOGCjYsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODozOFrOGCjYsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzMDA5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + newNode - Node of the linked list which will be replacing the `oldNode`\n          \n          \n            \n                # + newNode - Node of the linked list, which will be replacing the `oldNode`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405330098", "createdAt": "2020-04-08T07:58:38Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node) {\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the remove operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the remove operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node) {\n         remove(list, node);\n     }\n \n-    # Update the linked list based on the replace operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the replace operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI5MTUxOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODo0NFrOGCjY5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODo0NFrOGCjY5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzMDE0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + oldNode - Node of the linked list which will be replaced by the `newNode`\n          \n          \n            \n                # + oldNode - Node of the linked list, which will be replaced by the `newNode`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405330148", "createdAt": "2020-04-08T07:58:44Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node) {\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the remove operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the remove operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node) {\n         remove(list, node);\n     }\n \n-    # Update the linked list based on the replace operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the replace operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`\n+    # + oldNode - Node of the linked list which will be replaced by the `newNode`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI5MjE4OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODo1NFrOGCjZWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1ODo1NFrOGCjZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzMDI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405330267", "createdAt": "2020-04-08T07:58:54Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node) {\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the remove operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the remove operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node) {\n         remove(list, node);\n     }\n \n-    # Update the linked list based on the replace operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the replace operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`\n+    # + oldNode - Node of the linked list which will be replaced by the `newNode`\n     public function replace(LinkedList list, Node newNode, Node oldNode) {\n         remove(list, oldNode);\n         addFirst(list, newNode);\n     }\n \n-    # Update the linked list based on the clear operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the clear operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI5MzA0OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1OTowNVrOGCjZ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1OTowNVrOGCjZ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzMDM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + list - Linked list data structure which is used to govern the eviction policy\n          \n          \n            \n                # + list - Linked list data structure, which is used to govern the eviction policy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405330388", "createdAt": "2020-04-08T07:59:05Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node) {\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the remove operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the remove operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node) {\n         remove(list, node);\n     }\n \n-    # Update the linked list based on the replace operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the replace operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`\n+    # + oldNode - Node of the linked list which will be replaced by the `newNode`\n     public function replace(LinkedList list, Node newNode, Node oldNode) {\n         remove(list, oldNode);\n         addFirst(list, newNode);\n     }\n \n-    # Update the linked list based on the clear operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the clear operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n+    # + list - Linked list data structure which is used to govern the eviction policy\n     public function clear(LinkedList list) {\n         clear(list);\n     }\n \n-    # Update the linked list based on the evict operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the evict operation.\n     #\n-    # + list - Linked list data structure\n-    # + return - The Node, which should evict from the linked list or `()` if nothing to be evicted\n+    # + list - Linked list data structure which is used to govern the eviction policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTI5MzUwOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1OToxM1rOGCjaIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo1OToxM1rOGCjaIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzMDQ2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The Node which is evicted from the linked list or `()` if nothing to be evicted\n          \n          \n            \n                # + return - The Node, which is evicted from the linked list or `()` if nothing to be evicted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405330467", "createdAt": "2020-04-08T07:59:13Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -14,58 +14,58 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations\n-# based on a linked list data structure.\n+# The `cache:LruEvictionPolicy` object consists of the LRU eviction algorithm related operations based on a linked\n+# list data structure.\n public type LruEvictionPolicy object {\n \n     *AbstractEvictionPolicy;\n \n-    # Update the linked list based on the get operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the get operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is retrieved\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is retrieved\n     public function get(LinkedList list, Node node) {\n         remove(list, node);\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the put operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the put operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is added newly\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is added newly\n     public function put(LinkedList list, Node node) {\n         addFirst(list, node);\n     }\n \n-    # Update the linked list based on the remove operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the remove operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + node - Node of the linked list, which is deleted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + node - Node of the linked list which is deleted\n     public function remove(LinkedList list, Node node) {\n         remove(list, node);\n     }\n \n-    # Update the linked list based on the replace operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the replace operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n-    # + newNode - Node of the linked list, which is used for replacing\n-    # + oldNode - Node of the linked list, which will be replaced\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + newNode - Node of the linked list which will be replacing the `oldNode`\n+    # + oldNode - Node of the linked list which will be replaced by the `newNode`\n     public function replace(LinkedList list, Node newNode, Node oldNode) {\n         remove(list, oldNode);\n         addFirst(list, newNode);\n     }\n \n-    # Update the linked list based on the clear operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the clear operation related to the LRU eviction algorithm.\n     #\n-    # + list - Linked list data structure\n+    # + list - Linked list data structure which is used to govern the eviction policy\n     public function clear(LinkedList list) {\n         clear(list);\n     }\n \n-    # Update the linked list based on the evict operation related to the LRU eviction algorithm.\n+    # Updates the linked list based on the evict operation.\n     #\n-    # + list - Linked list data structure\n-    # + return - The Node, which should evict from the linked list or `()` if nothing to be evicted\n+    # + list - Linked list data structure which is used to govern the eviction policy\n+    # + return - The Node which is evicted from the linked list or `()` if nothing to be evicted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTMyMTY4OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODowNjo1NlrOGCjrZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTowOTo0N1rOGDQPIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzNDg4Nw==", "bodyText": "Can we remove this topic?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405334887", "createdAt": "2020-04-08T08:06:56Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,6 +1,8 @@\n ## Module Overview", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3ODIxMw==", "bodyText": "@kalaiyarasiganeshalingam Have we decided to remove that?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405378213", "createdAt": "2020-04-08T09:15:29Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,6 +1,8 @@\n ## Module Overview", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzNDg4Nw=="}, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4NzM3MA==", "bodyText": "yes @ldclakmal we decided to remove it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405487370", "createdAt": "2020-04-08T12:31:16Z", "author": {"login": "daneshk"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,6 +1,8 @@\n ## Module Overview", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzNDg4Nw=="}, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4ODg5Mg==", "bodyText": "Okay. I missed that point. Thanks.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405488892", "createdAt": "2020-04-08T12:34:03Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,6 +1,8 @@\n ## Module Overview", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzNDg4Nw=="}, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2NDkzMA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r406064930", "createdAt": "2020-04-09T09:09:47Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,6 +1,8 @@\n ## Module Overview", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzNDg4Nw=="}, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjM1MjgzOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1MTo0M1rOGCtu_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOToxMjozNFrOGDQU1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5OTY0NA==", "bodyText": "We can remove the sample and add the BBE link instead of this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r405499644", "createdAt": "2020-04-08T12:51:43Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -77,22 +82,22 @@ type CacheEntry record {|\n |};\n ```\n \n-The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n+A linked list is used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list will be updated. Therefore, when an eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n \n-**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When an eviction happens, nodes from the tail will be deleted without iterating the map.\n \n-Further, developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.\n+Furthermore, the developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.\n \n ### Samples", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2NjM5MQ==", "bodyText": "Sure.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r406066391", "createdAt": "2020-04-09T09:12:34Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -77,22 +82,22 @@ type CacheEntry record {|\n |};\n ```\n \n-The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n+A linked list is used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list will be updated. Therefore, when an eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.\n \n-**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When an eviction happens, nodes from the tail will be deleted without iterating the map.\n \n-Further, developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.\n+Furthermore, the developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.\n \n ### Samples", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5OTY0NA=="}, "originalCommit": {"oid": "271cecce4ec979d79dbe64f63496f13a1ad81990"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDIyNTExOnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoyNjozMVrOGDS5vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoyNjozMVrOGDS5vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwODYwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            error ccurred while discarding from the cache\n          \n          \n            \n                #            error occurred while discarding from the cache", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r406108605", "createdAt": "2020-04-09T10:26:31Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -14,52 +14,54 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# The `cache:AbstractCache` object is used for custom implementations of the Ballerina cache.\n # Any custom cache implementation should be object-wise similar.\n public type AbstractCache abstract object {\n \n-    # Add the given key value pair to the cache. If the cache previously contained a value associated with the key, the\n+    # Adds the given key value pair to the cache. If the cache previously contained a value associated with the key, the\n     # old value is replaced by the new value.\n     #\n-    # + key - Key of the cached value\n+    # + key - Key of the value to be cached\n     # + value - Value to be cached\n-    # + maxAgeInSeconds - The time in seconds during which the cache entry is valid. '-1' means, the entry is valid forever.\n-    # + return - `()` if successfully added to the cache or\n-    # `Error` if any error occurred while inserting the entry to the cache.\n+    # + maxAgeInSeconds - The time in seconds during which the cache entry is valid. '-1' means, the entry is valid\n+    #                     forever\n+    # + return - `()` if successfully added to the cache or `Error` if any error occurred while inserting the entry\n+    #            to the cache\n     public function put(string key, any value, int maxAgeInSeconds = -1) returns Error?;\n \n-    # Return the cached value associated with the given key.\n+    # Returns the cached value associated with the provided key.\n     #\n-    # + key - Key, which is used to retrieve the cached value\n-    # + return - The cached value associated with the given key,\n-    # `Error` if the provided cache key is not available, or if any error occurred while retrieving from the cache.\n+    # + key - The key used to retrieve the cached value\n+    # + return - The cached value associated with the given key or an `Error` if the provided cache key is not\n+    #            available or if any error occurred while retrieving from the cache\n     public function get(string key) returns any|Error;\n \n-    # Discard a cached value from the cache.\n+    # Discards a cached value from the cache.\n     #\n-    # + key - Key of the cache entry, which needs to be discarded\n-    # + return - `()` if successfully discarded,\n-    # `Error` if the provided cache key is not available, or if any error occurred while discarding from the cache.\n+    # + key - Key of the cache entry which needs to be discarded\n+    # + return - `()` if successfully discarded or an `Error` if the provided cache key is not available or if any\n+    #            error ccurred while discarding from the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c99647a84cce79d5361c30d902484bbccfae61c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDI0MDU2OnYy", "diffSide": "RIGHT", "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDozMDo1MVrOGDTC5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDozMDo1MVrOGDTC5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExMDk0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The Cache` Ballerina ` object, which is used for all the cache-related operations. It is not recommended to insert `()`\n          \n          \n            \n            # The `cache:Cache` object, which is used for all the cache-related operations. It is not recommended to insert `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22495#discussion_r406110949", "createdAt": "2020-04-09T10:30:51Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -57,8 +57,8 @@ service cleanupService = service {\n     }\n };\n \n-# Represents the Ballerina `Cache` object and cache-related operations. It is not recommended to insert `()` as the\n-# value of the cache since it doesn't make any sense to cache a nil.\n+# The Cache` Ballerina ` object, which is used for all the cache-related operations. It is not recommended to insert `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c99647a84cce79d5361c30d902484bbccfae61c"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3955, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}