{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MzYwNDk5", "number": 26374, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoxNzoyNVrOEuQq0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoyNToxN1rOEuQ1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTQzMDU4OnYy", "diffSide": "LEFT", "path": "misc/formatter/modules/formatter-core/src/test/resources/declarations/class-definition/assert/class_definition_declaration_17.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoxNzoyNVrOHijFxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoxNzoyNVrOHijFxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4ODU0OA==", "bodyText": "Should we preserve the newlines added by the user?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26374#discussion_r505988548", "createdAt": "2020-10-16T02:17:25Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/resources/declarations/class-definition/assert/class_definition_declaration_17.bal", "diffHunk": "@@ -1,14 +1,9 @@\n class Foo {\n     public function init() {\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f7ffcef3cf7db3c2823f282a66adef1d769009"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTQ1NjA2OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/resources/expressions/query/assert/query_expression_4.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoyNTowMFrOHijXHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoyNTowMFrOHijXHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5Mjk4OA==", "bodyText": "Would it be better to aligned with the table keyword?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26374#discussion_r505992988", "createdAt": "2020-10-16T02:25:00Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/resources/expressions/query/assert/query_expression_4.bal", "diffHunk": "@@ -1,56 +1,35 @@\n-import ballerina/io;\n-\n-type Student record {\n-    readonly id;\n-    string firstName;\n-    string lastName;\n-    int intakeYear;\n-    float gpa;\n-};\n-\n-type Report record {\n-    readonly id;\n-    string name;\n-    string degree;\n-    int graduationYear;\n-};\n-\n-// This is a `table` type with `Report` members uniquely identified by their `id` field.\n-type ReportTable table<Report> key(id);\n-\n public function main() {\n-    Student s1 = { id: 1, firstName: \"Michelle\", lastName: \"Sadler\",\n-                   intakeYear: 1990, gpa: 3.5 };\n-    Student s2 = { id: 2, firstName: \"Ranjan\", lastName: \"Fonseka\",\n-                   intakeYear: 2001, gpa: 1.9 };\n-    Student s3 = { id: 3, firstName: \"Martin\", lastName: \"Guthrie\",\n-                   intakeYear: 2002, gpa: 3.7 };\n-    Student s4 = { id: 4, firstName: \"George\", lastName: \"Fernando\",\n-                   intakeYear: 2005, gpa: 4.0 };\n+    Student s1 = {\n+        id: 1,\n+        firstName: \"Michelle\",\n+        lastName: \"Sadler\",\n+        intakeYear: 1990,\n+        gpa: 3.5\n+    };\n \n     Student[] studentList = [s1, s2, s3, s4];\n \n     // The `query expression` starts with `table`.\n     // The key specifier `key(id)` specifies the key sequence of the constructed `table`.\n     // The result of the `query expression` is a `table`.\n     ReportTable|error reportTable = table key(id) from var student in studentList\n-        // The `where` clause provides a way to perform conditional execution and works similarly to an `if` condition.\n-        // It can refer to variables bound by the from clause.\n-        // When the `where` condition evaluates to false, the current iteration is skipped.\n-        where student.gpa >= 2.0\n-        // The `let` clause binds the variables.\n-        let string degreeName = \"Bachelor of Medicine\",\n-        int graduationYear = calGraduationYear(student.intakeYear)\n-        // The `limit` clause limits the number of output items.\n-        limit 2\n-        // The `select` clause is evaluated for each iteration.\n-        // During the construction of a `table`, each emitted value from the `select` clause is added as a new member.\n-        select {\n-            id: student.id,\n-            name: student.firstName + \" \" + student.lastName,\n-            degree: degreeName,\n-            graduationYear: graduationYear\n-        };\n+                                                  // The `where` clause provides a way to perform conditional execution and works similarly to an `if` condition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f7ffcef3cf7db3c2823f282a66adef1d769009"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTQ1NzE5OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/resources/expressions/query/assert/query_expression_4.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoyNToxN1rOHijXyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoyNToxN1rOHijXyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5MzE2MA==", "bodyText": "Same as above", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26374#discussion_r505993160", "createdAt": "2020-10-16T02:25:17Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/resources/expressions/query/assert/query_expression_4.bal", "diffHunk": "@@ -59,19 +38,21 @@ public function main() {\n     // Defines an `error` to handle a key conflict.\n     error onConflictError = error(\"Key Conflict\", message = \"cannot insert report\");\n \n-    ReportTable|error result = table key(id) from var student in duplicateStdList\n-        select {\n-            id: student.id,\n-            name: student.firstName + \" \" + student.lastName,\n-            degree: \"Bachelor of Medicine\",\n-            graduationYear: calGraduationYear(student.intakeYear)\n-        }\n-        // The `on conflict` clause gets executed when `select` emits a row\n-        // that has the same key as a row that it emitted earlier.\n-        // It gives an `onConflictError` error if there is a key conflict.\n-        on conflict onConflictError;\n-\n-    io:println(result);\n+    stream<Report> reportStream = stream from var student in duplicateStdList\n+                                         select {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f7ffcef3cf7db3c2823f282a66adef1d769009"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4749, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}