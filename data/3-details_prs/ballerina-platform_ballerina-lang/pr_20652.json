{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDAyNjUz", "number": 20652, "title": "Add default serialisers and deserialisers to Kafka module", "bodyText": "Purpose\n\nAdding Kafka's default serialisers and deserialisers to Kafka module. Currently Ballerina Kafka module only supports byte_array_serialiser and it is not exposed to user anyways.\n\nWith these changes, four new Serialisers and four new deserialisers are introduced.\nIntroduced serialisers and deserialisers are:\n\n\nByte Array\nString\nInt\nFloat\n\n\nThese new Serialiser / Deserialisers can be used through a new configuration added to the kafka:ProducerConfig and kafka:ConsumerConfig records.\nNewly added fields are:\nkafka:ProducerConfig:\n\n\nkeySerializer\nvalueSerializer\n\n\nkafka:ConsumerConfig:\n\n\nkeyDeserializer\nvalueDeserializer\n\n\nUsers can now use any of the following values for the keySerializer or valueSerializer fields:\n\n\nkafka:SER_BYTE_ARRAY\nkafka:SER_STRING\nkafka:SER_INT\nkafka:SER_FLOAT\n\n\nThese values are defined as a new type: kafka:SerializerType.\nSimilarly, users can use any of the following values for the keyDeserializer and valuesDeserializer fields:\n\n\nkafka:DES_BYTE_ARRAY\nkafka:DES_STRING\nkafka:DES_INT\nkafka:DES_FLOAT\n\n\nThese values are defined as a new type: kafka:DeserializerType.\nA new type is also defined as kafka:Data which is a union, defined as byte[]|int|float|string. Hence Kafka producer->send() function now accepts kafka:Data as the type of value and key fields. (key is nillable). This won't break any previous code.\nBreaking change\nAlso kafka:ConsumerRecord is now changed to have kafka:Data as the type of the following fields:\n\n\nkey\nvalue\n\n\nThis will break any existing code since previously both these fields were byte[].\nPrevious code:\nkafka:ConsumerRecord[] records = consumer->poll(1000);\nforeach var kafkaRecord in records {\n    byte[] value = kafkaRecord.value;\n    // Process data\n}\nNew Code:\nkafka:ConsumerRecord[] records = consumer->poll(1000);\nforeach var kafkaRecord in records {\n    kafka:Data value = kafkaRecord.value;\n    // You can use \"var value = kafkaRecord.value\" instead too.\n    if (value is byte[]) {\n        // Process data\n    }\n}\nFixes #19899\nFixes #20678\nThis might cause a bug when using string as the data type, due to a bug in jBallerina. Issue is tracked with #20644\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-01-17T07:16:52Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652", "merged": true, "mergeCommit": {"oid": "9dc3c8f4d1b01e2027d2e3ebaca1be4f48d83e7f"}, "closed": true, "closedAt": "2020-01-21T09:44:42Z", "author": {"login": "ThisaruGuruge"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbq0iZdgH2gAyMzY0MDAyNjUzOmRmNGY5ZjdmMzkxZGY2ZjliZmRkYWQ0MzRiYjJjN2YwY2EzZTBlYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8d5nlAFqTM0NTc0MTI0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "df4f9f7f391df6f9bfddad434bb2c7f0ca3e0ea6", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df4f9f7f391df6f9bfddad434bb2c7f0ca3e0ea6", "committedDate": "2019-11-27T13:52:23Z", "message": "Remove unnecessary renaming object module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b4f652864a2bea3f267a296d35456444e05fb61", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b4f652864a2bea3f267a296d35456444e05fb61", "committedDate": "2019-11-27T15:57:24Z", "message": "Add default kafka SerDes types to config parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd77eb9939c99fa00686b66b04e3cb883a98c8d4", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd77eb9939c99fa00686b66b04e3cb883a98c8d4", "committedDate": "2019-11-27T16:22:46Z", "message": "Generalize Kafka Consumers and Producers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f92c61f019bfb7220edb637ae3af1ff187d0d999", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f92c61f019bfb7220edb637ae3af1ff187d0d999", "committedDate": "2019-11-27T16:24:40Z", "message": "Make SerDes types specific"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1563c385ca8435bbdfeca2be299025fd181bc2c6", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1563c385ca8435bbdfeca2be299025fd181bc2c6", "committedDate": "2019-12-11T19:53:14Z", "message": "Add default Serialization to producer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "043a486270e845f82c0ffd43cb3c27f994ed7a75", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/043a486270e845f82c0ffd43cb3c27f994ed7a75", "committedDate": "2020-01-16T07:13:37Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-default-serializers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f34c7974df56ab7289a5adf2bc675130e5118b5", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f34c7974df56ab7289a5adf2bc675130e5118b5", "committedDate": "2020-01-16T11:05:14Z", "message": "Implement default SerDes types for consumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af6c722b097ac850ea30b490df2e5d7183101012", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af6c722b097ac850ea30b490df2e5d7183101012", "committedDate": "2020-01-16T15:17:54Z", "message": "Validate3 consumer data types and add a test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a180de69e612609a6a85797a1b04a2946c8de7ee", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a180de69e612609a6a85797a1b04a2946c8de7ee", "committedDate": "2020-01-17T07:23:51Z", "message": "Change data type from KafkaData to Data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTIxNjU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#pullrequestreview-344521654", "createdAt": "2020-01-17T11:33:30Z", "commit": {"oid": "a180de69e612609a6a85797a1b04a2946c8de7ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTozMzozMFrOFe2bMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTozMzozMFrOFe2bMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MzI5OQ==", "bodyText": "Since we are setting this value in the constructor, Do we need to initialize this with an empty string?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r367893299", "createdAt": "2020-01-17T11:33:30Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -115,27 +119,46 @@ public type ConsumerConfig record {|\n # + timestamp - Timestamp of the record, in milliseconds since epoch.\n # + topic - Topic to which the record belongs to.\n public type ConsumerRecord record {|\n-    byte[] key;\n-    byte[] value;\n+    Data key;\n+    Data value;\n     int offset;\n     int partition;\n     int timestamp;\n     string topic;\n |};\n \n+# In-built Kafka byte array deserializer.\n+public const DES_BYTE_ARRAY = \"BYTE_ARRAY\";\n+\n+# In-built Kafka string deserializer.\n+public const DES_STRING = \"STRING\";\n+\n+# In-built Kafka int deserializer.\n+public const DES_INT = \"INT\";\n+\n+# In-built Kafka float deserializer.\n+public const DES_FLOAT = \"FLOAT\";\n+\n+# Kafka in-built deserializer type.\n+public type DeserializerType DES_BYTE_ARRAY|DES_STRING|DES_INT|DES_FLOAT;\n+\n # Represent a Kafka consumer endpoint.\n #\n # + consumerConfig - Used to store configurations related to a Kafka connection.\n public type Consumer client object {\n-    *lang:Listener;\n+    *'object:Listener;\n \n     public ConsumerConfig? consumerConfig = ();\n+    private string keyDeserializer = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a180de69e612609a6a85797a1b04a2946c8de7ee"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e5bb3c6cb96ccee63069eaee33d383a751dd5f", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87e5bb3c6cb96ccee63069eaee33d383a751dd5f", "committedDate": "2020-01-18T14:11:49Z", "message": "Remove unnecessary variable initialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b79eb30024bc11d187d92ef2cc1a7e26dbd65c82", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b79eb30024bc11d187d92ef2cc1a7e26dbd65c82", "committedDate": "2020-01-19T04:20:33Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-default-serializers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTMzOTk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#pullrequestreview-345133995", "createdAt": "2020-01-20T08:15:04Z", "commit": {"oid": "b79eb30024bc11d187d92ef2cc1a7e26dbd65c82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODoxNTowNFrOFfWILQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODoxNTowNFrOFfWILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMjcxNw==", "bodyText": "Shall we move these sub logic to a sub function?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368412717", "createdAt": "2020-01-20T08:15:04Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,11 +199,176 @@ public type Producer client object {\n     # + partition - Partition to which the record should be sent.\n     # + timestamp - Timestamp of the record, in milliseconds since epoch.\n     # + return - Returns `kafka:ProducerError` if send action fails to send data, nil otherwise.\n-    public remote function send(byte[] value, string topic, public byte[]? key = (), public int? partition = (),\n+    public remote function send(Data value, string topic, public Data? key = (), public int? partition = (),\n                                 public int? timestamp = ()) returns ProducerError? {\n-        return producerSend(self, value, java:fromString(topic), key, partition, timestamp);\n-    }\n \n+        handle topicHandle = java:fromString(topic);\n+\n+        // Handle string values\n+        if (self.valueSerializer == SER_STRING) {\n+            if (value is string) {\n+                handle valueHandle = java:fromString(value);\n+\n+                if (key is ()) {\n+                    return producerSendString(self, valueHandle, topicHandle, partition, timestamp);\n+                }\n+\n+                if (self.keySerializer == SER_STRING) {\n+                    if (key is string) {\n+                        handle keyHandle = java:fromString(key);\n+                        return producerSendStringString(self, valueHandle, topicHandle, keyHandle, partition,\n+                                                        timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"string\");\n+                }\n+\n+                if (self.keySerializer == SER_INT) {\n+                    if (key is int) {\n+                        return producerSendStringInt(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"int\");\n+                }\n+\n+                if (self.keySerializer == SER_FLOAT) {\n+                    if (key is float) {\n+                        return producerSendStringFloat(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"float\");\n+                }\n+\n+                if (self.keySerializer == SER_BYTE_ARRAY) {\n+                    if (key is byte[]) {\n+                        return producerSendStringByteArray(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"byte[]\");\n+                }\n+            }\n+\n+            panic getValueTypeMismatchError(\"string\");\n+        }\n+\n+        // Handle int values\n+        if (self.valueSerializer == SER_INT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79eb30024bc11d187d92ef2cc1a7e26dbd65c82"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fffb62e925ad1412f8692f9000ad53bd5ddaf3a7", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fffb62e925ad1412f8692f9000ad53bd5ddaf3a7", "committedDate": "2020-01-20T09:38:46Z", "message": "bump kafka module version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efab17d53ca8a396dfc0c241571f7f9622932564", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/efab17d53ca8a396dfc0c241571f7f9622932564", "committedDate": "2020-01-20T09:39:50Z", "message": "Move different send scenarios to separate functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b09cfa43cfa663a956864765daca5055060b58f5", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b09cfa43cfa663a956864765daca5055060b58f5", "committedDate": "2020-01-20T10:02:23Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-default-serializers\n\n\u0001 Conflicts:\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Assign.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Close.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Commit.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/CommitOffset.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetAssignment.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetAvailableTopics.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetBeginningOffsets.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetCommittedOffset.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetEndOffsets.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetPausedPartitions.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetPositionOffset.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetSubscription.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetTopicPartitions.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Pause.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Resume.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Seek.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/SeekToBeginning.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/SeekToEnd.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Subscribe.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/SubscribeToPattern.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/SubscribeWithPartitionRebalance.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Unsubscribe.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/Close.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/CommitConsumer.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/CommitConsumerOffsets.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/FlushRecords.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/GetTopicPartitions.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/Send.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaUtils.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50a2e10ed3d650320ff3ccfa81a69f6064982f37", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50a2e10ed3d650320ff3ccfa81a69f6064982f37", "committedDate": "2020-01-20T12:17:29Z", "message": "Fix code style issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "134f03a86ec563cb299bad228eee9aa2b300e887", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/134f03a86ec563cb299bad228eee9aa2b300e887", "committedDate": "2020-01-20T12:34:45Z", "message": "Fix non-blocking calls not returning errors issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f71c4baa0b0e5750444e4bacab5d23feb86cd8e", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f71c4baa0b0e5750444e4bacab5d23feb86cd8e", "committedDate": "2020-01-20T12:55:15Z", "message": "Migrate SubscribeWithPartitionRebalance function to inter-op"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca87e5861403af5fca6f20c65888deecb4ef246f", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca87e5861403af5fca6f20c65888deecb4ef246f", "committedDate": "2020-01-20T13:42:37Z", "message": "Fix style issues in Kafka module code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NjM3ODgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#pullrequestreview-345637883", "createdAt": "2020-01-21T05:12:44Z", "commit": {"oid": "ca87e5861403af5fca6f20c65888deecb4ef246f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNToxMjo0NFrOFfuofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNToxMjo0NFrOFfuofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNDIwNQ==", "bodyText": "Shall we change indentations as previous?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368814205", "createdAt": "2020-01-21T05:12:44Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,13 +199,174 @@ public type Producer client object {\n     # + partition - Partition to which the record should be sent.\n     # + timestamp - Timestamp of the record, in milliseconds since epoch.\n     # + return - Returns `kafka:ProducerError` if send action fails to send data, nil otherwise.\n-    public remote function send(byte[] value, string topic, public byte[]? key = (), public int? partition = (),\n-                                public int? timestamp = ()) returns ProducerError? {\n-        return producerSend(self, value, java:fromString(topic), key, partition, timestamp);\n+    public remote function send(Data value, string topic, public Data? key = (), public int? partition = (),\n+                                                            public int? timestamp = ()) returns ProducerError? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca87e5861403af5fca6f20c65888deecb4ef246f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzQxMjQ2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#pullrequestreview-345741246", "createdAt": "2020-01-21T09:40:34Z", "commit": {"oid": "ca87e5861403af5fca6f20c65888deecb4ef246f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4319, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}