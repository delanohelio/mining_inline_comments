{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzA2MzUw", "number": 21511, "title": "add string:equalsIgnoreCaseAscii langlib method", "bodyText": "Purpose\n\n$title\n\nFixes #21238\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-06T08:59:39Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511", "merged": true, "mergeCommit": {"oid": "a228543d9c328a8e254fcb747e48308479de10b8"}, "closed": true, "closedAt": "2020-03-11T10:04:53Z", "author": {"login": "dulvinw"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK_i-ogFqTM3MDI5NjM2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMjF_wABqjMxMTc4MjExMDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjk2MzY4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#pullrequestreview-370296368", "createdAt": "2020-03-06T12:47:33Z", "commit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjo0NzozM1rOFy3kNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjo0NzozM1rOFy3kNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MzUxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int i=0; i<str1.length(); i++) {\n          \n          \n            \n                    for (int i = 0; i <str1.length(); i++) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r388883511", "createdAt": "2020-03-06T12:47:33Z", "author": {"login": "anupama-pathirage"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTUyNTI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#pullrequestreview-370952528", "createdAt": "2020-03-09T07:17:24Z", "commit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxNzoyNFrOFzcwoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToyMzoyNFrOF0B3uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5Mjg5Ng==", "bodyText": "How about just\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String charAtIfromOne = Character.toString(str1.charAt(i));\n          \n          \n            \n                        String charFromOne = Character.toString(str1.charAt(i));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389492896", "createdAt": "2020-03-09T07:17:24Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDAwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String charAtIfromTwo = Character.toString(str2.charAt(i));\n          \n          \n            \n                        String charFromTwo = Character.toString(str2.charAt(i));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389494002", "createdAt": "2020-03-09T07:21:15Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDkyMQ==", "bodyText": "Can't we do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CharBuffer r = decoder.decode(ByteBuffer.wrap(byteArray));\n          \n          \n            \n                        r.toString();\n          \n          \n            \n                        decoder.decode(ByteBuffer.wrap(byteArray)).toString();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389494921", "createdAt": "2020-03-09T07:24:25Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));\n+            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n+                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+                    return false;\n+                }\n+            }\n+            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String  str) {\n+        byte byteArray[] = str.getBytes();\n+        try {\n+            CharBuffer r = decoder.decode(ByteBuffer.wrap(byteArray));\n+            r.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NTE0Ng==", "bodyText": "Can't we move these to Ballerina instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389495146", "createdAt": "2020-03-09T07:25:12Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibStringTest.java", "diffHunk": "@@ -246,6 +246,23 @@ public void testSubstring(String str, int start, int end, String result) {\n                             \"{ballerina/lang.string}StringOperationError {message:\\\"\" + result + \"\\\"}\");\n     }\n \n+    @Test(dataProvider = \"testEqualsIgnoreCaseDataProvider\")\n+    public void testEqualsIgnoreCaseAscii(String str1, String str2, boolean result) {\n+        BValue[] args = {new BString(str1), new BString(str2), new BBoolean(result)};\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testEqualsIgnoreCaseAscii\", args);\n+    }\n+\n+    @DataProvider(name = \"testEqualsIgnoreCaseDataProvider\")\n+    public Object[][] testEqualsIgnoreCaseDataProvider() {\n+        return new Object[][] {\n+                {\"aBCdeFg\", \"aBCdeFg\", true},\n+                {\"aBCdeFg\", \"abcdefg\", true},\n+                {\"aBCdeFg\", \"abcdefh\", false},\n+                {\"Du\u0dbd\u0dcaVi\u0db1\u0dca\", \"du\u0dbd\u0dcavi\u0db1\u0dca\", true},\n+                {\"Du\u0db1\u0dcaVi\u0dbd\u0dca\", \"du\u0dbd\u0dcavi\u0db1\u0dca\", false}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTQ3NA==", "bodyText": "We reach this point even for !(isPureAscii(charAtIfromOne) && !(isPureAscii(charAtIfromTwo)) right? We shouldn't be doing equalsIgnoreCase in that case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390099474", "createdAt": "2020-03-10T05:17:47Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));\n+            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n+                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+                    return false;\n+                }\n+            }\n+            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMDkyMw==", "bodyText": "Can't we simplify this logic by handling the flow in the following order?\n\nif both are pure ASCII, return equalsIgnoreCase\nelse return equals", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390100923", "createdAt": "2020-03-10T05:23:24Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));\n+            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n+                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+                    return false;\n+                }\n+            }\n+            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTQ3NA=="}, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30bac3b83bceb24b085bde2cc69da20795f63213", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30bac3b83bceb24b085bde2cc69da20795f63213", "committedDate": "2020-03-10T06:29:27Z", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}, "afterCommit": {"oid": "f08da0e4f590e73ae7e53e24a7f14e527423d745", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f08da0e4f590e73ae7e53e24a7f14e527423d745", "committedDate": "2020-03-10T06:44:42Z", "message": "Add Review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzUwMjIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#pullrequestreview-371750221", "createdAt": "2020-03-10T08:23:25Z", "commit": {"oid": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyMzoyNlrOF0FBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyODowN1rOF0FJhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MjQ3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                            return charFromOne.equalsIgnoreCase(charFromTwo);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390152471", "createdAt": "2020-03-10T08:23:26Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDU2MA==", "bodyText": "As discussed offline, shall we change these checks to something like\n            boolean charFromOnePureAscii = isPureAscii(charFromOne);\n            boolean charFromTwoPureAscii = isPureAscii(charFromTwo);\n\n            if (charFromOnePureAscii && charFromTwoPureAscii) {\n                return charFromOne.equalsIgnoreCase(charFromTwo);\n            } else if (!charFromOnePureAscii && !charFromTwoPureAscii) {\n                return charFromOne.equals(charFromTwo);\n            }\n            return false;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390154560", "createdAt": "2020-03-10T08:27:57Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MjQ3MQ=="}, "originalCommit": {"oid": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDYyOQ==", "bodyText": "Suggested change", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390154629", "createdAt": "2020-03-10T08:28:07Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String  str) {\n+        byte byteArray[] = str.getBytes();\n+        try {\n+            decoder.decode(ByteBuffer.wrap(byteArray)).toString();\n+        } catch (CharacterCodingException e) {\n+            return false;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzkyMDc5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#pullrequestreview-371792079", "createdAt": "2020-03-10T09:29:55Z", "commit": {"oid": "29cfb0a46acff98a739e83af82ce3427d366ff68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODY2OTQ5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#pullrequestreview-371866949", "createdAt": "2020-03-10T11:21:24Z", "commit": {"oid": "29cfb0a46acff98a739e83af82ce3427d366ff68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyMToyNFrOF0KxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyMToyNFrOF0KxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0NjcwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean isPureAscii(String  str) {\n          \n          \n            \n                private static boolean isPureAscii(String str) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390246708", "createdAt": "2020-03-10T11:21:24Z", "author": {"login": "dulajdilshan"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String  str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29cfb0a46acff98a739e83af82ce3427d366ff68"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjIwMTk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#pullrequestreview-372220199", "createdAt": "2020-03-10T18:34:34Z", "commit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODozNDozNFrOF0b8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODozNDozNFrOF0b8Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyODAyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Compare two given strings ignoring the case. In the comparison, any non ascii character\n          \n          \n            \n            # Compare two given strings ignoring the case. In the comparison, any non ASCII character", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390528023", "createdAt": "2020-03-10T18:34:34Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.string/src/main/ballerina/src/lang.string/string.bal", "diffHunk": "@@ -154,3 +154,11 @@ public function toCodePointInts(string str) returns int[] = external;\n # + return - a string with a character for each code point in `codePoints`; or an error\n # if any member of `codePoints` is not a valid code point\n public function fromCodePointInts(int[] codePoints) returns string|error = external;\n+\n+# Compare two given strings ignoring the case. In the comparison, any non ascii character", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjM2Mjkw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#pullrequestreview-372236290", "createdAt": "2020-03-10T18:56:49Z", "commit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1Njo1MFrOF0cwyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1Njo1MFrOF0cwyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTUxMg==", "bodyText": "Do we need to make it this complicated? Isn't checking whether the char value is <127 enough?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390541512", "createdAt": "2020-03-10T18:56:50Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b037585169278288a98825030dadc7726e1ac070", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b037585169278288a98825030dadc7726e1ac070", "committedDate": "2020-03-11T05:25:41Z", "message": "Add methods to langlib string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2573e23eb53d60bb7fe0c92df1c46b6f99869075", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2573e23eb53d60bb7fe0c92df1c46b6f99869075", "committedDate": "2020-03-11T05:25:41Z", "message": "Add implementations for ballerina externs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7e7c20db86761e9c758b2a8c7730401e4e89fa8", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7e7c20db86761e9c758b2a8c7730401e4e89fa8", "committedDate": "2020-03-11T05:25:42Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90cb4eb0c9215684849d1b634ba71d872fa11d91", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90cb4eb0c9215684849d1b634ba71d872fa11d91", "committedDate": "2020-03-11T05:25:42Z", "message": "Add Testcases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c683cc3c5e969fb2a998d119d0dcf1395571e63", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c683cc3c5e969fb2a998d119d0dcf1395571e63", "committedDate": "2020-03-11T05:25:42Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc3a4b280f9ca2c926889db0d8601f7e9eeac3ef", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc3a4b280f9ca2c926889db0d8601f7e9eeac3ef", "committedDate": "2020-03-11T05:25:42Z", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe98d4feea9e250392df29a2b4b1d84e710d80ac", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe98d4feea9e250392df29a2b4b1d84e710d80ac", "committedDate": "2020-03-11T05:25:42Z", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Anupama Pathirage <anupama@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93160f7008ed2e32fcf5541183f52f7341333d78", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93160f7008ed2e32fcf5541183f52f7341333d78", "committedDate": "2020-03-11T05:25:42Z", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f6f38d3a6ca202daf68a5174ae72d06aa9792d2", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f6f38d3a6ca202daf68a5174ae72d06aa9792d2", "committedDate": "2020-03-11T05:25:42Z", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07212ccac1c7ab1b23cb7b3cc2c29c8c6c6e2166", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07212ccac1c7ab1b23cb7b3cc2c29c8c6c6e2166", "committedDate": "2020-03-11T05:25:42Z", "message": "Add Review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9d2e800bf9c786a49e0537955f9c23bc2a8b009", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9d2e800bf9c786a49e0537955f9c23bc2a8b009", "committedDate": "2020-03-11T05:25:42Z", "message": "Checkstyle Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c8353f366255cdd518e58604ea9bfd984f88137", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c8353f366255cdd518e58604ea9bfd984f88137", "committedDate": "2020-03-11T05:25:42Z", "message": "Move testcases to ballerina side"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5cecefee5c87070839ff6651abcb48cd8e638de", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5cecefee5c87070839ff6651abcb48cd8e638de", "committedDate": "2020-03-11T05:25:42Z", "message": "Change description of equalsIgnoreCaseAscii extern method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/06505e131c22e31710c57531f141a89a7bbf4553", "committedDate": "2020-03-10T11:45:14Z", "message": "Update langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java\n\nCo-Authored-By: Dulaj Dilshan <balasuriyadulaj@gmail.com>"}, "afterCommit": {"oid": "d5cecefee5c87070839ff6651abcb48cd8e638de", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5cecefee5c87070839ff6651abcb48cd8e638de", "committedDate": "2020-03-11T05:25:42Z", "message": "Change description of equalsIgnoreCaseAscii extern method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fa944042f50c3bf39418be9c4c014e9129e89fe", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fa944042f50c3bf39418be9c4c014e9129e89fe", "committedDate": "2020-03-11T08:46:08Z", "message": "Fix language server tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26fd136c4851e8acbc8b975fefcf5f2270473a46", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26fd136c4851e8acbc8b975fefcf5f2270473a46", "committedDate": "2020-03-11T06:02:36Z", "message": "Fix language server tests"}, "afterCommit": {"oid": "9fa944042f50c3bf39418be9c4c014e9129e89fe", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fa944042f50c3bf39418be9c4c014e9129e89fe", "committedDate": "2020-03-11T08:46:08Z", "message": "Fix language server tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3995, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}