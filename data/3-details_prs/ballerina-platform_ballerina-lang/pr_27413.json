{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MDUyMDQ2", "number": 27413, "title": "Code action fixes", "bodyText": "Purpose\n\nDescribe the problems, issues, or needs driving this feature/fix and include links to related issues.\n\nFixes #27283\nFixes #27286\nFixes #27442\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-12-09T09:51:30Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413", "merged": true, "mergeCommit": {"oid": "593466dd262a3c18ff4e8a52e4d7401ca96aef5a"}, "closed": true, "closedAt": "2020-12-11T10:15:07Z", "author": {"login": "rasika"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkNFEugH2gAyNTM1MDUyMDQ2OmM3MDZkZTE2Y2JiNzJjNzFiOWI2N2NmNTc0NWFlMTVjYTcwNzQ2ZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlEl3ogFqTU0OTg5OTg3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c706de16cbb72c71b9b67cf5745ae15ca70746ea", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c706de16cbb72c71b9b67cf5745ae15ca70746ea", "committedDate": "2020-12-08T16:52:49Z", "message": "Move code-actions into sub-packages\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4d967c45c62a3ccddb00a78aaeb46921f22a3fc", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4d967c45c62a3ccddb00a78aaeb46921f22a3fc", "committedDate": "2020-12-08T16:52:52Z", "message": "Move ImportModel inner class into separate class\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5daa6141d087d5e206bd5ebdeb7307a1b8b7fc48", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5daa6141d087d5e206bd5ebdeb7307a1b8b7fc48", "committedDate": "2020-12-08T16:55:28Z", "message": "Rename PositionDetailsImpl into CodeActionPositionDetails\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2fdf8b11b6335748c18368b85aaeb979799a312", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2fdf8b11b6335748c18368b85aaeb979799a312", "committedDate": "2020-12-09T08:09:36Z", "message": "Fix styling issues in code-action labels\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db8702863110dd817b889c41932431758df90a2", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0db8702863110dd817b889c41932431758df90a2", "committedDate": "2020-12-09T08:42:00Z", "message": "Mark filepath as non-null\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3113c508a32448c8263b3d0faf4f1901a6ddb2e", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3113c508a32448c8263b3d0faf4f1901a6ddb2e", "committedDate": "2020-12-09T08:47:02Z", "message": "Create add-check and type-guard code-actions\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89736eb4e63f02f238ede6c81217e08477182d24", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89736eb4e63f02f238ede6c81217e08477182d24", "committedDate": "2020-12-09T08:47:54Z", "message": "Create change-param-type code-action\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d4517d5f53471f871c1d7783707c36b45e0266", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59d4517d5f53471f871c1d7783707c36b45e0266", "committedDate": "2020-12-09T08:54:29Z", "message": "Fix code-actions imports issue\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb02455b7454eb6b6cdd714954dd5a99db66e895", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb02455b7454eb6b6cdd714954dd5a99db66e895", "committedDate": "2020-12-09T08:55:46Z", "message": "Add code-action node types local_var, module_var and assignment\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea0fea45897fff926d6576ac978ac98034004aeb", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea0fea45897fff926d6576ac978ac98034004aeb", "committedDate": "2020-12-09T08:59:28Z", "message": "Fix module level var-declarations are not getting captured\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7650d9b6049e3dbc482e10f54ead45c5151a6dd3", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7650d9b6049e3dbc482e10f54ead45c5151a6dd3", "committedDate": "2020-12-09T09:00:10Z", "message": "Add type-cast code-action support for module vars\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a142ab36eb2b575e50afa572e9aa895e6b9edefb", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a142ab36eb2b575e50afa572e9aa895e6b9edefb", "committedDate": "2020-12-09T09:02:15Z", "message": "Remove redundant lower-case of diagnostic messages\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daa6246a67dd6152377e0887ee0ab0d183fab5be", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/daa6246a67dd6152377e0887ee0ab0d183fab5be", "committedDate": "2020-12-09T09:04:02Z", "message": "Fix code-actions\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d3f64bf8c4f0d30fe842c1c8baaeba2231cc186", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d3f64bf8c4f0d30fe842c1c8baaeba2231cc186", "committedDate": "2020-12-09T09:41:04Z", "message": "Fix code-action tests\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f3956c22e331993144e6e007538fb293717fca1", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f3956c22e331993144e6e007538fb293717fca1", "committedDate": "2020-12-09T11:10:41Z", "message": "Add type-cast code-action support for assignments\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a04dcf5aa45944c6ec3193958b47d5ffc36dc148", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a04dcf5aa45944c6ec3193958b47d5ffc36dc148", "committedDate": "2020-12-10T03:10:08Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into code-action-fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4920f8523f116dbd73da988f58cf4aab94386db", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4920f8523f116dbd73da988f58cf4aab94386db", "committedDate": "2020-12-10T10:03:32Z", "message": "Temporary disable create function code-action\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "901f3c98de5632854e63e427946a273344bc4bb1", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/901f3c98de5632854e63e427946a273344bc4bb1", "committedDate": "2020-12-10T17:55:40Z", "message": "Improve code-actions api\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6185a05297c423b1f1fc80a1c45dd3ed29ff78e", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6185a05297c423b1f1fc80a1c45dd3ed29ff78e", "committedDate": "2020-12-10T16:54:29Z", "message": "Improve code-actions api\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}, "afterCommit": {"oid": "901f3c98de5632854e63e427946a273344bc4bb1", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/901f3c98de5632854e63e427946a273344bc4bb1", "committedDate": "2020-12-10T17:55:40Z", "message": "Improve code-actions api\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3de61604163d05b8d002343ca15569d1eec289f", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3de61604163d05b8d002343ca15569d1eec289f", "committedDate": "2020-12-11T02:42:12Z", "message": "Fix top-level node not detection issue\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ac0b93c0373a25d4df03639a00b65d7d93cba50", "committedDate": "2020-12-11T07:00:59Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into code-action-fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODk5ODcw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#pullrequestreview-549899870", "createdAt": "2020-12-11T08:43:45Z", "commit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODo0Mzo0NVrOIDup3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToyNTozNFrOIDwMsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4MTAyMQ==", "bodyText": "will it be possible to use the optional for alias?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540781021", "createdAt": "2020-12-11T08:43:45Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionModuleId.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.syntax.tree.ImportDeclarationNode;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a module information in ballerina.\n+ * <p>\n+ * Allows convenient transformation of ImportDeclarationNode node model representation for org-name, module-name,\n+ * version and alias.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CodeActionModuleId implements ModuleID {\n+    private static final String ORG_SEPARATOR = \"/\";\n+    private final String orgName;\n+    private final String moduleName;\n+    private final String version;\n+    private final String alias;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwMDI1NA==", "bodyText": "What would be the consequence if we try to depend on the node kind instance of code action node kind?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540800254", "createdAt": "2020-12-11T09:16:12Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -77,87 +87,47 @@ private CodeActionUtil() {\n     /**\n      * Get the top level node type at the cursor line.\n      *\n-     * @param context {@link LSContext}\n+     * @param node node\n      * @return {@link String}   Top level node type\n      */\n-    public static Optional<Pair<CodeActionNodeType, NonTerminalNode>> codeActionNodeType(CodeActionContext context) {\n-        Position position = context.cursorPosition();\n-        Optional<SyntaxTree> syntaxTree = context.workspace().syntaxTree(context.filePath());\n-\n-        if (syntaxTree.isEmpty()) {\n-            return Optional.empty();\n+    public static CodeActionNodeType codeActionNodeType(Node node) {\n+        if (node == null) {\n+            return CodeActionNodeType.NONE;\n         }\n-\n-        ModulePartNode modulePartNode = syntaxTree.get().rootNode();\n-        int cursorPosOffset = syntaxTree.get().textDocument().textPositionFrom(LinePosition.from(position.getLine(),\n-                position.getCharacter()));\n-\n-        List<NonTerminalNode> members = modulePartNode.members().stream().collect(Collectors.toList());\n-        modulePartNode.imports().forEach(members::add);\n-        for (NonTerminalNode member : members) {\n-            boolean isWithinStartSegment = isWithinStartCodeSegment(member, cursorPosOffset);\n-            boolean isWithinBody = isWithinBody(member, cursorPosOffset);\n-            if (!isWithinStartSegment && !isWithinBody) {\n-                continue;\n-            }\n-\n-            if (member.kind() == SyntaxKind.SERVICE_DECLARATION) {\n-                if (isWithinStartSegment) {\n-                    // Cursor on the service\n-                    return Optional.of(new ImmutablePair<>(CodeActionNodeType.SERVICE, member));\n+        switch (node.kind()) {\n+            case SERVICE_DECLARATION:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwMTQwNg==", "bodyText": "Shall we add a doc comment here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540801406", "createdAt": "2020-12-11T09:17:46Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -459,7 +327,127 @@ public static PositionDetails findCursorDetails(Range range, SyntaxTree syntaxTr\n             matchedSymbol = null;\n         }\n         matchedExprTypeSymbol = semanticModel.type(relPath, largestExpressionNode(cursorNode, range).lineRange());\n-        return PositionDetailsImpl.from(matchedNode, matchedSymbol, matchedExprTypeSymbol.orElse(null));\n+        return CodeActionPositionDetails.from(matchedNode, matchedSymbol, matchedExprTypeSymbol.orElse(null));\n+    }\n+\n+    public static List<TextEdit> getTypeGuardCodeActionEdits(String varName, Range range, UnionTypeSymbol unionType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwNDkwMA==", "bodyText": "can convert to if ladder", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540804900", "createdAt": "2020-12-11T09:23:10Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -469,17 +457,236 @@ public static PositionDetails findCursorDetails(Range range, SyntaxTree syntaxTr\n      * @param range {@link Range}\n      * @return largest possible node\n      */\n-    private static NonTerminalNode largestExpressionNode(NonTerminalNode node, Range range) {\n-        Predicate<NonTerminalNode> isWithinScope =\n+    public static Node largestExpressionNode(Node node, Range range) {\n+        Predicate<Node> isWithinScope =\n                 tNode -> tNode != null && !(tNode instanceof ExpressionStatementNode) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().startLine()), range) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().endLine()), range);\n         while (isWithinScope.test(node.parent())) {\n             node = node.parent();\n         }\n+        if (node.kind() == SyntaxKind.ASSIGNMENT_STATEMENT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 478}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwNjMyMw==", "bodyText": "Following checks are bit hard to understand. Shall we try to simplify this? There are common conditions with the same return, we can merge them as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540806323", "createdAt": "2020-12-11T09:25:34Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -469,17 +457,236 @@ public static PositionDetails findCursorDetails(Range range, SyntaxTree syntaxTr\n      * @param range {@link Range}\n      * @return largest possible node\n      */\n-    private static NonTerminalNode largestExpressionNode(NonTerminalNode node, Range range) {\n-        Predicate<NonTerminalNode> isWithinScope =\n+    public static Node largestExpressionNode(Node node, Range range) {\n+        Predicate<Node> isWithinScope =\n                 tNode -> tNode != null && !(tNode instanceof ExpressionStatementNode) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().startLine()), range) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().endLine()), range);\n         while (isWithinScope.test(node.parent())) {\n             node = node.parent();\n         }\n+        if (node.kind() == SyntaxKind.ASSIGNMENT_STATEMENT) {\n+            return ((AssignmentStatementNode) node).expression();\n+        } else if (node.kind() == SyntaxKind.MODULE_VAR_DECL) {\n+            return ((ModuleVariableDeclarationNode) node).typedBindingPattern().typeDescriptor();\n+        } else if (node.kind() == SyntaxKind.LOCAL_VAR_DECL) {\n+            return ((VariableDeclarationNode) node).typedBindingPattern().typeDescriptor();\n+        }\n         return node;\n     }\n \n+    /**\n+     * Get the top level node type at the cursor line.\n+     *\n+     * @param position   {@link Position}\n+     * @param syntaxTree {@link SyntaxTree}\n+     * @return {@link String}   Top level node\n+     */\n+    public static Optional<Node> getTopLevelNode(Position position, SyntaxTree syntaxTree) {\n+        NonTerminalNode member = CommonUtil.findNode(new Range(position, position), syntaxTree);\n+        LinePosition cursorPosition = LinePosition.from(position.getLine(), position.getCharacter());\n+        int cursorPosOffset = syntaxTree.textDocument().textPositionFrom(cursorPosition);\n+        while (member != null) {\n+            boolean isWithinStartSegment = isWithinStartCodeSegment(member, cursorPosOffset);\n+            boolean isWithinBody = isWithinBody(member, cursorPosOffset);\n+            if (!isWithinStartSegment && !isWithinBody) {\n+                member = member.parent();\n+                continue;\n+            }\n+\n+            if (member.kind() == SyntaxKind.SERVICE_DECLARATION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 507}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4781, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}