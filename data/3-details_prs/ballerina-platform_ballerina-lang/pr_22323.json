{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODgxOTcw", "number": 22323, "title": "Add support for xml constraint type", "bodyText": "Purpose\nThis PR adds support for xml constraint type.\nThis PR also fixes few issues with XML types and enables disabled tests.\nFixes #22069\nFixes #22130\nFixes #22276\nSamples\npublic function main() {\n    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n    'xml:Element refer = elementSequence[0];\n    \n    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n    xml<'xml:Comment> commentSequence = comment;\n    \n    'xml:Element elem1 = xml `<hello>xml element 1</hello>`;\n    'xml:Element elem2 = xml `<hello>xml element 2</hello>`;\n    xml<'xml:Element> elementSequence = elem1 + elem2;\n\n   'xml:Element elem1 = xml `<hello>xml element 1</hello>`;\n    'xml:Element elem2 = xml `<hello>xml element 2</hello>`;\n    xml<'xml:Element> elementSequence = <xml<'xml:Element>> 'xml:concat(elem1, elem2);\n\n}\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-30T20:26:05Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323", "merged": true, "mergeCommit": {"oid": "e31ee77b4516ac7a0a448cba7cdf0c98b1f7857b"}, "closed": true, "closedAt": "2020-04-06T09:40:47Z", "author": {"login": "irshadnilam"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTAmdVgFqTM4NDYwMzgwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcU5hmBgH2gAyMzk1ODgxOTcwOjk3YTIwNWU0YjZlZTZjNjdlYTYwYzFkZjVjZjVhNTVhNWE5NDZiNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjAzODA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-384603809", "createdAt": "2020-03-31T10:32:39Z", "commit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozMjozOVrOF-Payg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozMjozOVrOF-Payg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwODY1MA==", "bodyText": "Doesn't the chained constraints (like in the above case) apply for subtypes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400808650", "createdAt": "2020-03-31T10:32:39Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -584,7 +586,20 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n                 if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n-                return TypeTags.isXMLTypeTag(sourceType.getTag());\n+                if (sourceType.getTag() == TypeTags.XML_TAG) {\n+                    BXMLType target = ((BXMLType) targetType);\n+                    BType targetConstraint = target.constraint;\n+                    // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n+                    while (target.constraint.getTag() == TypeTags.XML_TAG) {\n+                        target = (BXMLType) target.constraint;\n+                        targetConstraint = target.constraint;\n+                    }\n+                    return checkIsType(((BXMLType) sourceType).constraint, targetConstraint,\n+                            unresolvedTypes);\n+                } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+                    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjM2NzU5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-384636759", "createdAt": "2020-03-31T11:22:58Z", "commit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyMjo1OFrOF-RC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyMjo1OFrOF-RC_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNTMyNw==", "bodyText": "What's the use of this instanceof check? The xml type is not a mapping type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400835327", "createdAt": "2020-03-31T11:22:58Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BMapType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjM4MzM2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-384638336", "createdAt": "2020-03-31T11:25:26Z", "commit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyNToyNlrOF-RICg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyNToyNlrOF-RICg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNjYxOA==", "bodyText": "Is it guaranteed that the types used as constraints have only 1 copy of that type?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400836618", "createdAt": "2020-03-31T11:25:26Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BMapType)) {\n+            return false;\n+        }\n+\n+        BXMLType other = (BXMLType) obj;\n+        if (constraint == other.constraint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjQ4NDA4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-384648408", "createdAt": "2020-03-31T11:41:08Z", "commit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoxMjoxMVrOF-SsEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1Njo1NVrOF-UcOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ==", "bodyText": "What about if the constraint type happens to be a finite type, which contains a set of XML values?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400862225", "createdAt": "2020-03-31T12:12:11Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1000,6 +1001,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ==", "bodyText": "Why is the XML type special cased? Also, shall we add these second conditions as nested if conditions? i.e., check if it's an ADD op once", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400878441", "createdAt": "2020-03-31T12:37:40Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2366,8 +2372,22 @@ public void visit(BLangBinaryExpr binaryExpr) {\n         // Set error type as the actual type.\n         BType actualType = symTable.semanticError;\n \n-        // Look up operator symbol if both rhs and lhs types are error types\n-        if (lhsType != symTable.semanticError && rhsType != symTable.semanticError) {\n+        // Do not lookup operator symbol for xml sequence additions\n+        if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (lhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(rhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) lhsType).constraint, rhsType),\n+                    false,\n+                    null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (rhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(lhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) rhsType).constraint, lhsType),\n+                    false, null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MzE3NA==", "bodyText": "Since this method is called only after verifying that the source and target tags are XML, can't we change the method signature to accept XML types? This would get rid of redundant type tag checks such as this one", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400883174", "createdAt": "2020-03-31T12:45:24Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -644,6 +655,25 @@ private boolean isErrorTypeAssignable(BErrorType source, BErrorType target, Set<\n                 isAssignable(source.detailType, target.detailType, unresolvedTypes);\n     }\n \n+    //TODO: recheck this.\n+    private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<TypePair> unresolvedTypes) {\n+        int sourceTag = sourceType.tag;\n+        int targetTag = targetType.tag;\n+\n+        if (targetTag == TypeTags.XML) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzIyMg==", "bodyText": "Do we need this new list? Can simply use 2 nested loops to achieve this right? The basic idea would be to use\ndefineBinaryOperator(OperatorKind.ADD, subType, subType, subType);\nfor when i == j and use\ndefineBinaryOperator(OperatorKind.ADD, subType, otherType, xmlType);\ndefineBinaryOperator(OperatorKind.ADD, otherType, subType, xmlType);\nwhen i != j", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400887222", "createdAt": "2020-03-31T12:51:31Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -517,6 +519,35 @@ public void defineOperators() {\n \n     }\n \n+    private void defineXmlArithmaticOperations() {\n+        defineBinaryOperator(OperatorKind.ADD, xmlType, xmlType, xmlType);\n+        List<BType> xmlSubTypes = Arrays.asList(xmlElementType, xmlCommentType, xmlPIType, xmlTextType);\n+        for (int i = 0; i < xmlSubTypes.size(); i++) {\n+            BType subType = xmlSubTypes.get(i);\n+            defineBinaryOperator(OperatorKind.ADD, subType, subType, subType);\n+\n+            List<BType> others = new ArrayList<>(xmlSubTypes);\n+            others.remove(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzYxMA==", "bodyText": "What's the purpose of the default constraint?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400887610", "createdAt": "2020-03-31T12:52:05Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5MDkzNg==", "bodyText": "Are there more basic test cases? My concern here is whether a complex condition can be used to isolate a malfunctioning operator. But if there are basic ones (e.g., x1 == x2), then this is fine.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400890936", "createdAt": "2020-03-31T12:56:55Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/binaryoperations/equal_and_not_equal_operation.bal", "diffHunk": "@@ -970,18 +970,18 @@ public function testXmlWithNamespacesNegative() returns boolean {\n     return x1 == x2 || !(x1 != x2) || x2 == x3 && !(x2 != x3);\n }\n \n-//public function testXmlSequenceAndXmlItemEqualityPositive() returns boolean {\n-//    xml x1 = xml `<name>Book One</name>`;\n-//    xml x2 = x1.select(\"name\");\n-//    return x1 == x2 && !(x1 != x2) && x2 == x1 && !(x2 != x1);\n-//}\n-\n-//public function testXmlSequenceAndXmlItemEqualityNegative() returns boolean {\n-//    xml x1 = xml `<name>Book One</name>`;\n-//    xml x2 = xml `<name>Book Two</name>`;\n-//    xml x3 = x2.select(\"name\");\n-//    return x1 == x3 || !(x1 != x3) || x3 == x1 || !(x3 != x1);\n-//}\n+public function testXmlSequenceAndXmlItemEqualityPositive() returns boolean {\n+    xml x1 = xml `<name>Book One</name>`;\n+    xml x2 = x1.get(0);\n+    return x1 == x2 && !(x1 != x2) && x2 == x1 && !(x2 != x1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Mzk5MTE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-385399119", "createdAt": "2020-04-01T09:09:56Z", "commit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTowOTo1NlrOF-3kEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTowOTo1NlrOF-3kEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NjM4NA==", "bodyText": "Shall we rename this to something like checkIsLikeNonElementSingleton", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401466384", "createdAt": "2020-04-01T09:09:56Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1188,7 +1203,12 @@ private static boolean checkIsLikeOnValue(Object sourceValue, BType sourceType,\n             case TypeTags.XML_PI_TAG:\n             case TypeTags.XML_TEXT_TAG:\n                 if (sourceType.getTag() == TypeTags.XML_TAG) {\n-                    return matchXMLType((XMLValue) sourceValue, targetType);\n+                    return matchXMLTypeNonSequence((XMLValue) sourceValue, targetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDAwNDUw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-385400450", "createdAt": "2020-04-01T09:11:44Z", "commit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxMTo0NFrOF-3oMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxMTo0NFrOF-3oMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzQ0MQ==", "bodyText": "Shall we rename this to something like checkIsLikeXMLSequenceType", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401467441", "createdAt": "2020-04-01T09:11:44Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1188,7 +1203,12 @@ private static boolean checkIsLikeOnValue(Object sourceValue, BType sourceType,\n             case TypeTags.XML_PI_TAG:\n             case TypeTags.XML_TEXT_TAG:\n                 if (sourceType.getTag() == TypeTags.XML_TAG) {\n-                    return matchXMLType((XMLValue) sourceValue, targetType);\n+                    return matchXMLTypeNonSequence((XMLValue) sourceValue, targetType);\n+                }\n+                return false;\n+            case TypeTags.XML_TAG:\n+                if (sourceType.getTag() == TypeTags.XML_TAG) {\n+                    return matchXMLTypeSequence((XMLValue) sourceValue, targetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDA0NTM2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-385404536", "createdAt": "2020-04-01T09:17:11Z", "commit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxNzoxMlrOF-31Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxNzoxMlrOF-31Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MDczNA==", "bodyText": "Type equals methods are usually performance-critical in Ballerina due to runtime typechecks.\nShall we inline the object reference test (obj == this) and instanceof test (and remove super call)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401470734", "createdAt": "2020-04-01T09:17:12Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BXMLType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTE5OTU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386119957", "createdAt": "2020-04-02T05:40:51Z", "commit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0MDo1MVrOF_b-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0MDo1MVrOF_b-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MzAyNg==", "bodyText": "Fix comment to xml", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402063026", "createdAt": "2020-04-02T05:40:51Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -1142,6 +1145,25 @@ private static void loadMapType(MethodVisitor mv, BMapType bType) {\n         mv.visitMethodInsn(INVOKESPECIAL, MAP_TYPE, \"<init>\", String.format(\"(L%s;)V\", BTYPE), false);\n     }\n \n+    /**\n+     * Generate code to load an instance of the given xml sequence type\n+     * to the top of the stack.\n+     *\n+     * @param mv    method visitor\n+     * @param bType xml type to load\n+     */\n+    private static void loadXmlType(MethodVisitor mv, BXMLType bType) {\n+        // Create an new map type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTIyODY3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386122867", "createdAt": "2020-04-02T05:49:59Z", "commit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0OTo1OVrOF_cIzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0OTo1OVrOF_cIzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTYxNQ==", "bodyText": "Shall we remove this and return the result then and there.\nDifficult to differentiate constrainedType and constraintType.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402065615", "createdAt": "2020-04-02T05:49:59Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTIzMjgy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386123282", "createdAt": "2020-04-02T05:51:25Z", "commit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo1MToyNlrOF_cKQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo1MToyNlrOF_cKQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTk4NQ==", "bodyText": "This could go on a single line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402065985", "createdAt": "2020-04-02T05:51:26Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,\n+                        symTable.xmlType, constraintType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTIzMzI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386123326", "createdAt": "2020-04-02T05:51:34Z", "commit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo1MTozNVrOF_cKag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo1MTozNVrOF_cKag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NjAyNg==", "bodyText": "This could go on a single line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402066026", "createdAt": "2020-04-02T05:51:35Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,\n+                        symTable.xmlType, constraintType);\n+            }\n+            constrainedType = new BXMLType(TypeTags.XML, constraintType, false, null);\n+        } else {\n+            checkUnionTypeForXMLSubTypes((BUnionType) constraintType, pos);\n+            constrainedType = new BXMLType(TypeTags.XML, constraintType, false, null);\n+        }\n+        return constrainedType;\n+    }\n+\n+    private void checkUnionTypeForXMLSubTypes(BUnionType constraintUnionType, DiagnosticPos pos) {\n+        for (BType memberType : constraintUnionType.getMemberTypes()) {\n+            if (memberType.tag == TypeTags.UNION) {\n+                checkUnionTypeForXMLSubTypes((BUnionType) memberType, pos);\n+            }\n+            if (!TypeTags.isXMLTypeTag(memberType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTM1NDc1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386135475", "createdAt": "2020-04-02T06:24:32Z", "commit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyNDozMlrOF_c14g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyNDozMlrOF_c14g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzE1NA==", "bodyText": "First arg is alway XML tag, we don't need this, shall we remove it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402077154", "createdAt": "2020-04-02T06:24:32Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;\n+\n     public BXMLType(int tag, BTypeSymbol tsymbol) {\n         super(tag, tsymbol);\n+        this.defaultConstraint = true;\n+    }\n+\n+    public BXMLType(int tag, BType constraint, boolean defaultConstraint, BTypeSymbol tsymbol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTkxODU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386191854", "createdAt": "2020-04-02T08:04:06Z", "commit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODowNDowNlrOF_fv2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODowNDowNlrOF_fv2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNDc2Mw==", "bodyText": "I think we should move the XML logic to checkIsRecursiveType now and handle this similar to other constrained types.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402124763", "createdAt": "2020-04-02T08:04:06Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -578,7 +580,20 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n                 if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n-                return TypeTags.isXMLTypeTag(sourceType.getTag());\n+                BXMLType target = ((BXMLType) targetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2Mzk3ODU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386397854", "createdAt": "2020-04-02T12:57:06Z", "commit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo1NzowNlrOF_p6nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo1NzowNlrOF_p6nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MTM1Ng==", "bodyText": "Merge conflict?\nL491  is the same", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402291356", "createdAt": "2020-04-02T12:57:06Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -480,22 +480,33 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n             return true;\n         }\n \n-        if (TypeTags.isXMLTypeTag(sourceTag) && targetTag == TypeTags.XML) {\n+        if (TypeTags.isXMLTypeTag(sourceTag) && TypeTags.isXMLTypeTag(targetTag)) {\n+            return isXMLTypeAssignable(source, target, unresolvedTypes);\n+        }\n+\n+        if (sourceTag == TypeTags.CHAR_STRING && targetTag == TypeTags.STRING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDAxMzE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386401319", "createdAt": "2020-04-02T13:01:27Z", "commit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowMToyN1rOF_qFag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowMToyN1rOF_qFag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NDEyMg==", "bodyText": "Shall we rename to defineXmlStringConcatanationOperations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402294122", "createdAt": "2020-04-02T13:01:27Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -348,15 +351,13 @@ private void defineType(BType type, BTypeSymbol tSymbol) {\n     public void defineOperators() {\n         // Binary arithmetic operators\n         defineIntegerArithmeticOperations();\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, xmlType, xmlType);\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, stringType, xmlType);\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, charStringType, xmlType);\n+\n+        // XML arithmetic operators\n+        defineXmlArithmaticOperations();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDAzMDY1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386403065", "createdAt": "2020-04-02T13:03:35Z", "commit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowMzozNVrOF_qKqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowMzozNVrOF_qKqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NTQ2NQ==", "bodyText": "Extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402295465", "createdAt": "2020-04-02T13:03:35Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibXMLTest.java", "diffHunk": "@@ -43,16 +44,19 @@\n  */\n public class LangLibXMLTest {\n \n-    private CompileResult compileResult, negativeResult;\n+    private CompileResult compileResult, negativeResult, constrainedTest, constraintNegative;\n \n     @BeforeClass\n     public void setup() {\n         compileResult = BCompileUtil.compile(\"test-src/xmllib_test.bal\");\n+        constrainedTest = BCompileUtil.compile(\"test-src/xmllib_constrained_test.bal\");\n         negativeResult = BCompileUtil.compile(\"test-src/xmllib_test_negative.bal\");\n+        constraintNegative = BCompileUtil.compile(\"test-src/xmllib_constrained_negative_test.bal\");\n     }\n \n     @Test(dataProvider = \"XMLDataProvider\")\n     public void testLength(BValue val, long expectedLength) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDc4NTcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386478573", "createdAt": "2020-04-02T14:24:43Z", "commit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyNDo0M1rOF_tvtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyNDo0M1rOF_tvtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NDEwMw==", "bodyText": "Shall we add few negative test cases for invalid assignment to an array of xml subtype and invalid assignment to map of xml subtype tests?\nxml[] ar = [xml <elem></elem>];\nar.push(xml <!-- cmnt -->);\nar.push(xml <?Hello DATA ?>);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402354103", "createdAt": "2020-04-02T14:24:43Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_negative_test.bal", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'xml;\n+\n+public function invalidSubtype() {\n+    'xml:Comment c1 = xml `<hello>xml content</hello>`;\n+    'xml:ProcessingInstruction p1 = xml `<hello>another xml content</hello>`;\n+}\n+\n+public function invalidConstraint() {\n+    xml<'xml:Comment> c1 = xml `<hello>xml content</hello>`;\n+    xml<'xml:ProcessingInstruction> p1 = xml `<hello>another xml content</hello>`;\n+\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    'xml:Comment refer = elementSequence[0];\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> commentSequence = comment;\n+}\n+\n+public function xmlConstraintMultipleElement() {\n+    'xml:Element elem1 = xml `<hello>xml element 1</hello>`;\n+    'xml:Element elem2 = xml `<hello>xml element 2</hello>`;\n+    xml<'xml:Comment> elementSequence = elem1 + elem2;\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> seq = elem1 + comment;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTkwMTI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386590125", "createdAt": "2020-04-02T16:22:46Z", "commit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyMjo0NlrOF_zLLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyMjo0NlrOF_zLLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzA1Mw==", "bodyText": "Consider this:\npublic function main() {\n    'xml:Element elem1 = xml `<hello>xml content</hello>`;\n    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n    'xml:Element refer = elementSequence[0];\n    'xml:Element two = elementSequence[1]; // returns empty xml sequence. https://ballerina.io/ballerina-spec/spec.html#section_6.15\n    io:println(two);\n    anydata k = two;\n    io:println(k is 'xml:Element);\n    io:println(k is xml);\n}\nI think we made a mistake type checking xml member access expressions. In the line with a comment, out of range member acess returns empty xml value (different from list). So the lhs type should be xml or 'xml` (to allow empty sequence).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402443053", "createdAt": "2020-04-02T16:22:46Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_test.bal", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'xml;\n+\n+public function basicXMLConstrainedType() {\n+    'xml:Element elem1 = xml `<hello>xml content</hello>`;\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    'xml:Element refer = elementSequence[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjAwNzQ0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-386600744", "createdAt": "2020-04-02T16:35:47Z", "commit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjozNTo0OFrOF_zspw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjozNTo0OFrOF_zspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MTYyMw==", "bodyText": "We need to remove this right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402451623", "createdAt": "2020-04-02T16:35:48Z", "author": {"login": "rdhananjaya"}, "path": "composer/package-lock.json", "diffHunk": "@@ -18354,7 +18354,7 @@\n     },\n     \"minimist\": {\n       \"version\": \"1.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",\n+      \"resolved\": \"http://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Njk5NDE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-387699417", "createdAt": "2020-04-04T13:28:36Z", "commit": {"oid": "0b036cb03428ab61f65d08de5a05e36e0f40458b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMzoyODozNlrOGAx3cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMzoyODozNlrOGAx3cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3MDE5Mg==", "bodyText": "newline", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r403470192", "createdAt": "2020-04-04T13:28:36Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_negative_test.bal", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'xml;\n+\n+public function invalidSubtype() {\n+    'xml:Comment c1 = xml `<hello>xml content</hello>`;\n+    'xml:ProcessingInstruction p1 = xml `<hello>another xml content</hello>`;\n+}\n+\n+public function invalidConstraint() {\n+    xml<'xml:Comment> c1 = xml `<hello>xml content</hello>`;\n+    xml<'xml:ProcessingInstruction> p1 = xml `<hello>another xml content</hello>`;\n+\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    'xml:Comment refer = elementSequence[0];\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> commentSequence = comment;\n+}\n+\n+public function xmlConstraintMultipleElement() {\n+    'xml:Element elem1 = xml `<hello>xml element 1</hello>`;\n+    'xml:Element elem2 = xml `<hello>xml element 2</hello>`;\n+    xml<'xml:Comment> elementSequence = elem1 + elem2;\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> seq = elem1 + comment;\n+}\n+\n+public function xmlSubtypeArrayNegative() {\n+    'xml:Element[] ar = [xml `<!-- cmnt -->`];\n+    ar.push(xml `<?Hello DATA ?>`);\n+    ar.push(xml `abc`);\n+\n+    xml<'xml:Comment> commentSequence = xml `<!-- cmnt -->`;\n+    ar.push(commentSequence);\n+\n+    xml<'xml:Comment>[] arrayOfCommentSeq = [xml `<hello>xml element 1</hello>`];\n+\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    arrayOfCommentSeq.push(elementSequence);\n+}\n+\n+public function xmlSubtypeMapNegative() {\n+    map<'xml:Element> eMap = {\n+       \"elementA\" : xml `<!-- cmnt -->`\n+    };\n+    'xml:Element CommentA = xml `<!-- cmnt -->`;\n+    xml<'xml:Comment> CommentSeq = xml `<!-- cmntseq -->`;\n+    eMap[\"CommentA\"] = CommentA;\n+    eMap[\"seq\"] = CommentSeq;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b036cb03428ab61f65d08de5a05e36e0f40458b"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Njk5NDQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#pullrequestreview-387699441", "createdAt": "2020-04-04T13:28:56Z", "commit": {"oid": "0b036cb03428ab61f65d08de5a05e36e0f40458b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6d2ea82cddab45eab1ebcf78c44053bb37edd77", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6d2ea82cddab45eab1ebcf78c44053bb37edd77", "committedDate": "2020-04-06T07:25:50Z", "message": "Add constraint type support for xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d9d7ce854bcd0fd67a38a31ecf1c402adcc2ae7", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d9d7ce854bcd0fd67a38a31ecf1c402adcc2ae7", "committedDate": "2020-04-06T07:25:51Z", "message": "Enable disabled xml tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc445d5d8e4f1ec4abb62c13106268b82ca423b6", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc445d5d8e4f1ec4abb62c13106268b82ca423b6", "committedDate": "2020-04-06T07:25:51Z", "message": "Add support to declare named subtype with xml literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d480021e89e89f9f355b3aca5776c0b94ed04428", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d480021e89e89f9f355b3aca5776c0b94ed04428", "committedDate": "2020-04-06T07:25:51Z", "message": "Add xml constraint support for runtime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "185c039b9f4f2e75f227f175a8fb9bda2b818901", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/185c039b9f4f2e75f227f175a8fb9bda2b818901", "committedDate": "2020-04-06T07:25:51Z", "message": "Add unit tests for xml constraint type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455a4558b039e9a63c39d63d232658000bf20190", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/455a4558b039e9a63c39d63d232658000bf20190", "committedDate": "2020-04-06T07:25:51Z", "message": "Change runtime tests xml-error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64cbf0c3c6b03ed58bd2f570a83193c53621fa24", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64cbf0c3c6b03ed58bd2f570a83193c53621fa24", "committedDate": "2020-04-06T07:25:51Z", "message": "Refactor xml constrain type implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b04d61e7e50fd78ef1d11b4ac603a103a5976e", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/84b04d61e7e50fd78ef1d11b4ac603a103a5976e", "committedDate": "2020-04-06T07:25:51Z", "message": "Add more xml constraint tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df589363110638061ce888ceacaaff17d37b7f60", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df589363110638061ce888ceacaaff17d37b7f60", "committedDate": "2020-04-06T07:25:51Z", "message": "Fix few xml typechecking issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97a205e4b6ee6c67ea60c1df5cf5a55a5a946b70", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97a205e4b6ee6c67ea60c1df5cf5a55a5a946b70", "committedDate": "2020-04-06T07:25:51Z", "message": "Disable failing codeaction test temporarily"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4104, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}