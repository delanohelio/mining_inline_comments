{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MzMyNzU4", "number": 20717, "title": "Fix spec deviation of listener syntax ", "bodyText": "Purpose\nAllow declaring listeners without type-descriptor\nFixes #18200\nApproach\nWhen declaring a listener, the user no longer has to explicitly mention\nthe listener type. The type will be inferred from right-hand side expression as the\nsame way var is handled\nlistener myListener = new http:Listener(8080)\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-01-23T12:17:09Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717", "merged": true, "mergeCommit": {"oid": "16d73f3493927f6ce51e491ba97566b71493817d"}, "closed": true, "closedAt": "2020-02-07T13:58:50Z", "author": {"login": "KRVPerera"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9NzAJgBqjI5NzQ2MDk2NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcB8Mr5AFqTM1NTAzOTA4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a1a401567f11e53732afe20e1d172997ace108b", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a1a401567f11e53732afe20e1d172997ace108b", "committedDate": "2020-01-23T17:24:54Z", "message": "Revert wrong test case change\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/573458cb08a0561870566ce8dfbe37c319bbc0bf", "committedDate": "2020-01-23T17:28:14Z", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODk4NDIw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-347898420", "createdAt": "2020-01-24T11:35:39Z", "commit": {"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNTozOVrOFhbHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNTozOVrOFhbHSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTU2Mw==", "bodyText": "Add a new line at the end.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r370591563", "createdAt": "2020-01-24T11:35:39Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;\n+\n+listener lstnr = new http:MockListener(8080);\n+public listener lstnr2 = new http:MockListener(8081);\n+listener http:Listener lstnr3 = new http:MockListener(8082);\n+\n+private listener lstnr4 = new http:Listerner(8083);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODk5MDAy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-347899002", "createdAt": "2020-01-24T11:36:57Z", "commit": {"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNjo1N1rOFhbJFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNjo1N1rOFhbJFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MjAyMg==", "bodyText": "Since this is a negative test case, add -negative part to the file name.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r370592022", "createdAt": "2020-01-24T11:36:57Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,10 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type.bal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODQ1MzE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-349845316", "createdAt": "2020-01-29T03:37:49Z", "commit": {"oid": "86eb37577e7d774e2705526024320e64951a051e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzozNzo1MFrOFi7wYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzozNzo1MFrOFi7wYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDk0NA==", "bodyText": "Having private modifier results a syntax error. Because of that, the actual semantic error is hidden. Please update the test case.\nAlso include test cases like,\nlistener x = new T ();  // Here T is not defined.\nlistener y = new P(); // Here is P is defined, but not a subtype of listener interface.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372174944", "createdAt": "2020-01-29T03:37:50Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type-negative.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;\n+\n+listener lstnr = new http:MockListener(8080);\n+public listener lstnr2 = new http:MockListener(8081);\n+listener http:Listener lstnr3 = new http:MockListener(8082);\n+\n+private listener lstnr4 = new http:Listerner(8083)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86eb37577e7d774e2705526024320e64951a051e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODQ1NTgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-349845583", "createdAt": "2020-01-29T03:39:18Z", "commit": {"oid": "86eb37577e7d774e2705526024320e64951a051e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDUxNDk4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-350051498", "createdAt": "2020-01-29T11:56:17Z", "commit": {"oid": "86eb37577e7d774e2705526024320e64951a051e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTo1NjoxN1rOFjF3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTo1NjoxN1rOFjF3Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MDUxMA==", "bodyText": "Add the license header", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372340510", "createdAt": "2020-01-29T11:56:17Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type-negative.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86eb37577e7d774e2705526024320e64951a051e"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86eb37577e7d774e2705526024320e64951a051e", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86eb37577e7d774e2705526024320e64951a051e", "committedDate": "2020-01-24T16:59:09Z", "message": "Add more tests for listener syntax\n\nChanged a current test case to check the behaviour of listener to\ncreate listerners using newly supported syntax rules. Also renamed\nnegative test case .bal file appending negative to its file name\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "5d56d5cf1a7021c4c2c929c31f893a73f26d9048", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d56d5cf1a7021c4c2c929c31f893a73f26d9048", "committedDate": "2020-01-30T02:40:18Z", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e98f894f4d5e4a2d98b7b22b75ba13459247010", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e98f894f4d5e4a2d98b7b22b75ba13459247010", "committedDate": "2020-01-30T08:28:28Z", "message": "Improve arrays:slice method to use `system.arraycopy`"}, "afterCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531", "committedDate": "2020-01-30T08:29:27Z", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjcwNzM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-350670735", "createdAt": "2020-01-30T09:11:56Z", "commit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToxMTo1NlrOFjj0wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToxODo0NVrOFjkBGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTQyNA==", "bodyText": "We can replace this with\n            var.isDeclaredWithVar = !isTypeNameProvided;\nright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372831424", "createdAt": "2020-01-30T09:11:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1977,6 +1978,9 @@ void addGlobalVariable(DiagnosticPos pos, Set<Whitespace> ws, String identifier,\n         }\n         if (isListenerVar) {\n             var.flagSet.add(Flag.LISTENER);\n+            if (!isTypeNameProvided) {\n+                var.isDeclaredWithVar = true;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTg5OA==", "bodyText": "Why is this commented out?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372831898", "createdAt": "2020-01-30T09:13:02Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-invalid-type-negative.bal", "diffHunk": "@@ -0,0 +1,3 @@\n+type Person object {};\n+listener x = 5;\n+//listener y = new Person();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNDU4NA==", "bodyText": "Shall we also add a balo test for when the listener type is defined in a separate module?\ne.g.,\nlistener l = new abc:Listener();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372834584", "createdAt": "2020-01-30T09:18:45Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTest.java", "diffHunk": "@@ -45,7 +45,7 @@ public void testBasicStructAsObject() {\n         final BValue[] result = BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");\n         Assert.assertEquals(result.length, 1, \"expected one return type\");\n         Assert.assertNotNull(result[0]);\n-        Assert.assertEquals(result[0].stringValue(), \"1_1\");\n+        Assert.assertEquals(result[0].stringValue(), \"2_3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d256225e26d5aa11c965b5fcf453150f379e8bb4", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d256225e26d5aa11c965b5fcf453150f379e8bb4", "committedDate": "2020-02-03T11:50:13Z", "message": "Check listener declaration to be a valid listener"}, "afterCommit": {"oid": "a4ecdb7ff2d03440c55493b5ae728b1343bb3d90", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4ecdb7ff2d03440c55493b5ae728b1343bb3d90", "committedDate": "2020-02-03T11:52:31Z", "message": "Fix basic data recongnition as listeners\n\nBecause we try to handle listerners without type as the same way we\ndefine var, if we assign an int to a listener code crashes at desuger\nstage trying to access object information from basic variables and\ntrying attach functions related listeners. This is now captured as a\nsemantic check.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzc4ODkz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-352378893", "createdAt": "2020-02-03T16:17:51Z", "commit": {"oid": "a4ecdb7ff2d03440c55493b5ae728b1343bb3d90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjoxNzo1MVrOFk3MRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjoxNzo1MVrOFk3MRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NzMxNw==", "bodyText": "Remove the extra line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r374197317", "createdAt": "2020-02-03T16:17:51Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,33 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithInvalidType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-invalid-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'int'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithObjectType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-object-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'Person'\", 18, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'ballerina/http:MockListener', found \" +\n+                \"'int'\", 22, 9);\n+        BAssertUtil.validateError(result, 1, \"incompatible types: expected 'int', found \" +\n+                \"'ballerina/http:MockListener'\", 23, 9);\n+\n+    }\n }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4ecdb7ff2d03440c55493b5ae728b1343bb3d90"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4098694cfa950901f3b8a7e7c142965c25ead7e0", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4098694cfa950901f3b8a7e7c142965c25ead7e0", "committedDate": "2020-02-03T16:42:14Z", "message": "Remove extra line in InvalidSyntaxParserTest.java"}, "afterCommit": {"oid": "3bfe3d32f49c62c75c36560004952ce49ca47158", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bfe3d32f49c62c75c36560004952ce49ca47158", "committedDate": "2020-02-03T16:43:17Z", "message": "Fix basic data recongnition as listeners\n\nBecause we try to handle listerners without type as the same way we\ndefine var, if we assign an int to a listener code crashes at desuger\nstage trying to access object information from basic variables and\ntrying attach functions related listeners. This is now captured as a\nsemantic check.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDUzMzM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-353453335", "createdAt": "2020-02-05T03:56:02Z", "commit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1NjowMlrOFlrHqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1NjowMlrOFlrHqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODEwNw==", "bodyText": "Does this compile? Missing a }?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375048107", "createdAt": "2020-02-05T03:56:02Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-type-reuse-negative.bal", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+import ballerina/http;\n+\n+listener x = new http:MockListener(8080);\n+var z = 5;\n+\n+public function test() {\n+    x = 5;\n+    z = new http:MockListener(8080);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDUzNDY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-353453466", "createdAt": "2020-02-05T03:56:36Z", "commit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1NjozNlrOFlrIHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDowNTo1MVrOFlrOtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODIyMg==", "bodyText": "The return ()s are not needed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375048222", "createdAt": "2020-02-05T03:56:36Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_listener/src/ext/listener.bal", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'object;\n+\n+int startCount = 0;\n+int attachCount = 0;\n+\n+public function getStartAndAttachCount() returns string {\n+    return attachCount.toString() + \"_\" + startCount.toString();\n+}\n+\n+public type ABCD object {\n+\n+    *'object:Listener;\n+\n+    public function __init() {\n+    }\n+\n+    public function __start() returns error? {\n+        startCount += 1;\n+    }\n+\n+    public function __gracefulStop() returns error? {\n+        return ();\n+    }\n+\n+    public function __immediateStop() returns error? {\n+        return ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODI5MQ==", "bodyText": "We can remove this too, since we're not doing anything in the init method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375048291", "createdAt": "2020-02-05T03:56:58Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_listener/src/ext/listener.bal", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'object;\n+\n+int startCount = 0;\n+int attachCount = 0;\n+\n+public function getStartAndAttachCount() returns string {\n+    return attachCount.toString() + \"_\" + startCount.toString();\n+}\n+\n+public type ABCD object {\n+\n+    *'object:Listener;\n+\n+    public function __init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODU5MA==", "bodyText": "Can't we move the assertion logic to Ballerina?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375048590", "createdAt": "2020-02-05T03:58:33Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.balo.listener;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.balo.BaloCreator;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases for access listener from another project.\n+ */\n+public class ListenerBaloTestExtPackage {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        BaloCreator.createAndSetupBalo(\"test-src/balo/test_projects/test_listener\", \"listenerProject\", \"ext\");\n+        compileResult = BCompileUtil.compile(\"test-src/balo/test_balo/listener/external_packaged_listener_access.bal\");\n+    }\n+\n+    @Test(description = \"Test access listener in different package\")\n+    public void testObjectAsListernerDefinedInDifferentPackage() {\n+        final BValue[] result = BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0OTgyNA==", "bodyText": "Shouldn't the error be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n          \n          \n            \n                    BAssertUtil.validateError(result, 0, \"incompatible types: expected 'lang.object:Listener', found 'other'\", 17, 14);\n          \n      \n    \n    \n  \n\ninstead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375049824", "createdAt": "2020-02-05T04:05:20Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,32 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0OTkwOA==", "bodyText": "Can't we move all of these negative cases to a single bal file instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375049908", "createdAt": "2020-02-05T04:05:51Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,32 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithInvalidType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-invalid-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'int'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithObjectType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-object-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'Person'\", 18, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'ballerina/http:MockListener', found \" +\n+                \"'int'\", 22, 9);\n+        BAssertUtil.validateError(result, 1, \"incompatible types: expected 'int', found \" +\n+                \"'ballerina/http:MockListener'\", 23, 9);\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ae07eba4be67d4e0640a2e5a5847534ae093e53", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ae07eba4be67d4e0640a2e5a5847534ae093e53", "committedDate": "2020-02-05T05:00:37Z", "message": "Refactor added test cases for listener syntax\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "3ad5b31ee6daa6b0f9b595a14aaf2224f1709168", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ad5b31ee6daa6b0f9b595a14aaf2224f1709168", "committedDate": "2020-02-05T05:02:26Z", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b39e95d31b1c223a88534b70cc83902ac6fa002e", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b39e95d31b1c223a88534b70cc83902ac6fa002e", "committedDate": "2020-02-05T06:25:01Z", "message": "Refactor error messages for listener syntax"}, "afterCommit": {"oid": "81f1d0ff4bf8808824586850ca1a234af76ecb58", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81f1d0ff4bf8808824586850ca1a234af76ecb58", "committedDate": "2020-02-05T06:49:02Z", "message": "Refactor unit test cases and error messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81f1d0ff4bf8808824586850ca1a234af76ecb58", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81f1d0ff4bf8808824586850ca1a234af76ecb58", "committedDate": "2020-02-05T06:49:02Z", "message": "Refactor unit test cases and error messages"}, "afterCommit": {"oid": "46430acd41da5cdaa07dc3179ed770d8de7895c0", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46430acd41da5cdaa07dc3179ed770d8de7895c0", "committedDate": "2020-02-05T09:21:34Z", "message": "Refactor unit test cases and error messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f3d309cf53344183f12fe6efb3291fcd935a8bd", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f3d309cf53344183f12fe6efb3291fcd935a8bd", "committedDate": "2020-02-05T09:40:13Z", "message": "Resolve BallerinaParser.java conflicts"}, "afterCommit": {"oid": "c747f85503c4d52cae15d589036f7473e579217f", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c747f85503c4d52cae15d589036f7473e579217f", "committedDate": "2020-02-05T15:45:28Z", "message": "Resolve BallerinaParser.java conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6551b902ea33e53d0dc523e88bb6ee888a4890a2", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6551b902ea33e53d0dc523e88bb6ee888a4890a2", "committedDate": "2020-02-05T15:50:45Z", "message": "Resolve BallerinaParser.java conflicts"}, "afterCommit": {"oid": "9660a207b6602abc94405c47c91910c94c984080", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9660a207b6602abc94405c47c91910c94c984080", "committedDate": "2020-02-05T15:51:14Z", "message": "Resolve BallerinaParser.java conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5abcb523ec707d5e192741e56f919442da436451", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5abcb523ec707d5e192741e56f919442da436451", "committedDate": "2020-02-05T16:10:14Z", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9660a207b6602abc94405c47c91910c94c984080", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9660a207b6602abc94405c47c91910c94c984080", "committedDate": "2020-02-05T15:51:14Z", "message": "Resolve BallerinaParser.java conflicts"}, "afterCommit": {"oid": "5abcb523ec707d5e192741e56f919442da436451", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5abcb523ec707d5e192741e56f919442da436451", "committedDate": "2020-02-05T16:10:14Z", "message": "Fix spec deviation of listener syntax\n\nWhen declaring a listener, user no longer have to explocitly mention\nthe listener type. Type will be inferred from rhs expression as the\nsame way `var` is handled\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccedbeebd2e6cd74ce6253b02660efb58eea3d83", "committedDate": "2020-02-05T17:12:20Z", "message": "Resolve Parser conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzExOTg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-354311985", "createdAt": "2020-02-06T09:40:48Z", "commit": {"oid": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0MDo0OVrOFmUs5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0MzoyN1rOFmUx7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyOTM4MQ==", "bodyText": "How about\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testObjectAsListernerDefinedInDifferentPackage() {\n          \n          \n            \n                public void testListenerObjectDefinedInDifferentPackage() {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375729381", "createdAt": "2020-02-06T09:40:49Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.balo.listener;\n+\n+import org.ballerinalang.test.balo.BaloCreator;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases for access listener from another project.\n+ */\n+public class ListenerBaloTestExtPackage {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        BaloCreator.createAndSetupBalo(\"test-src/balo/test_projects/test_listener\", \"listenerProject\", \"ext\");\n+        compileResult = BCompileUtil.compile(\"test-src/balo/test_balo/listener/external_packaged_listener_access.bal\");\n+    }\n+\n+    @Test(description = \"Test access listener in different package\")\n+    public void testObjectAsListernerDefinedInDifferentPackage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMDY2OA==", "bodyText": "We usually use - in module names and _ in bal file names.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375730668", "createdAt": "2020-02-06T09:43:27Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,19 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16d73f3493927f6ce51e491ba97566b71493817d", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16d73f3493927f6ce51e491ba97566b71493817d", "committedDate": "2020-02-06T12:02:58Z", "message": "Rename ballerina file name and a unit test name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDM5MDg4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#pullrequestreview-355039088", "createdAt": "2020-02-07T09:48:10Z", "commit": {"oid": "16d73f3493927f6ce51e491ba97566b71493817d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4369, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}