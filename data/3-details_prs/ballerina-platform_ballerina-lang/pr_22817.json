{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2Njc5Njkw", "number": 22817, "title": "Populate dependencies based on 'scope' parameter", "bodyText": "Purpose\n\nPack platform libraries to the balo based on the 'scope' field value.\n\nFixes #19271\nApproach\n\nCurrently dependency jars for a Ballerina module (defined via platform.libraries in the toml) are getting packed with the balo. Hence, introduced a \"scope\" field for platform.libraries and based on the scope, dependency jars are packed.\n\nRemarks\n\nRelated Issue : wso2/ballerina-integrator#443, https://github.com/ballerina-platform/module-ballerina-socket/issues/3\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-21T13:36:36Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817", "merged": true, "mergeCommit": {"oid": "bb262dabbc67fbce4f634c1dc842c795ad596f30"}, "closed": true, "closedAt": "2020-05-15T11:54:58Z", "author": {"login": "suganyasuven"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZxCougH2gAyNDA2Njc5NjkwOmJkMTYxZDFhMzg3YjhhNTFhOWZhY2JkMmVmMTVlMDEwZmYyNDBkZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchgv10AFqTQxMjU4MDM4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd161d1a387b8a51a9facbd2ef15e010ff240dfd", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd161d1a387b8a51a9facbd2ef15e010ff240dfd", "committedDate": "2020-04-21T10:22:25Z", "message": "Populate platform libs based on 'scope' parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caf089561ee7ec77251107885e9f91614af8031f", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/caf089561ee7ec77251107885e9f91614af8031f", "committedDate": "2020-04-21T13:32:08Z", "message": "Add dependency scope test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTAwNDY4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-397500468", "createdAt": "2020-04-21T17:03:31Z", "commit": {"oid": "caf089561ee7ec77251107885e9f91614af8031f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowMzozMVrOGJOySg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowMzozMVrOGJOySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzMjYxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == libraries) {\n          \n          \n            \n                    if (libraries == null) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r412332618", "createdAt": "2020-04-21T17:03:31Z", "author": {"login": "praveennadarajah"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyNativeLibTask.java", "diffHunk": "@@ -120,6 +122,26 @@ private void copyImportedJarsForModules(BuildContext buildContext, List<BLangPac\n         }\n     }\n \n+    private void copyPlatformLibsForModules(PackageID packageID, ExecutableJar executableJar, Path project) {\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+        if (null == libraries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf089561ee7ec77251107885e9f91614af8031f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTAyMTA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-397502109", "createdAt": "2020-04-21T17:05:36Z", "commit": {"oid": "caf089561ee7ec77251107885e9f91614af8031f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowNTozNlrOGJO3og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowNTozNlrOGJO3og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzMzk4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (null != libFilePath) {\n          \n          \n            \n                        if (libFilePath != null) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r412333986", "createdAt": "2020-04-21T17:05:36Z", "author": {"login": "praveennadarajah"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyNativeLibTask.java", "diffHunk": "@@ -120,6 +122,26 @@ private void copyImportedJarsForModules(BuildContext buildContext, List<BLangPac\n         }\n     }\n \n+    private void copyPlatformLibsForModules(PackageID packageID, ExecutableJar executableJar, Path project) {\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+        if (null == libraries) {\n+            return;\n+        }\n+        List<Library> libs = libraries.stream().filter(lib -> lib.getModules() == null ||\n+                Arrays.asList(lib.getModules()).contains(packageID.name.value)).collect(Collectors.toList());\n+        for (Library lib : libs) {\n+            String libFilePath = lib.getPath();\n+            if (null != libFilePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf089561ee7ec77251107885e9f91614af8031f"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTA3MzU5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-397507359", "createdAt": "2020-04-21T17:12:05Z", "commit": {"oid": "caf089561ee7ec77251107885e9f91614af8031f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzoxMjowNVrOGJPKGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzoxMjowNVrOGJPKGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzODcxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Assert.fail(\"error loading resources\");\n          \n          \n            \n                        Assert.fail(\"Error loading resources\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r412338714", "createdAt": "2020-04-21T17:12:05Z", "author": {"login": "praveennadarajah"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/DependencyScopeTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import picocli.CommandLine;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_PKG_BINARY_EXT;\n+\n+/**\n+ * Dependency scope tests.\n+ *\n+ * @since 1.2.x\n+ */\n+public class DependencyScopeTest extends CommandTest {\n+\n+    private Path testResources;\n+    private URI testResourcesURI;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        super.setup();\n+        try {\n+            this.testResources = super.tmpDir.resolve(\"scope-test-resources\");\n+            testResourcesURI = getClass().getClassLoader().getResource(\"test-resources\").toURI();\n+            Path storedJarDependencyProject = Paths.get(testResourcesURI).resolve(\"stored-jar-dependency-project\");\n+            Files.walkFileTree(storedJarDependencyProject, new BuildCommandTest.Copy(storedJarDependencyProject,\n+                    this.testResources));\n+        } catch (URISyntaxException e) {\n+            Assert.fail(\"error loading resources\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf089561ee7ec77251107885e9f91614af8031f"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTQzODE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-397543817", "createdAt": "2020-04-21T17:57:45Z", "commit": {"oid": "caf089561ee7ec77251107885e9f91614af8031f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1Nzo0NVrOGJRKnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1Nzo0NVrOGJRKnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MTYxMg==", "bodyText": "No need to iterate all the zip entries and find whether a particular entry is there or not. The time complexity and performance hit would be high by doing this way. Instead, you can directly check a particular entry's presence in the following way.\nreturn new ZipFile(file).getEntry(jarEntry) != null;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r412371612", "createdAt": "2020-04-21T17:57:45Z", "author": {"login": "praveennadarajah"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/DependencyScopeTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import picocli.CommandLine;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_PKG_BINARY_EXT;\n+\n+/**\n+ * Dependency scope tests.\n+ *\n+ * @since 1.2.x\n+ */\n+public class DependencyScopeTest extends CommandTest {\n+\n+    private Path testResources;\n+    private URI testResourcesURI;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        super.setup();\n+        try {\n+            this.testResources = super.tmpDir.resolve(\"scope-test-resources\");\n+            testResourcesURI = getClass().getClassLoader().getResource(\"test-resources\").toURI();\n+            Path storedJarDependencyProject = Paths.get(testResourcesURI).resolve(\"stored-jar-dependency-project\");\n+            Files.walkFileTree(storedJarDependencyProject, new BuildCommandTest.Copy(storedJarDependencyProject,\n+                    this.testResources));\n+        } catch (URISyntaxException e) {\n+            Assert.fail(\"error loading resources\");\n+        }\n+    }\n+\n+    @Test(description = \"Test if platform libs are packed with the balo based on the scope.\")\n+    public void testBuildCommandWithStoredJarDependency() throws IOException {\n+        String baloFileName = \"mymodule-\" + ProgramFileConstants.IMPLEMENTATION_VERSION + \"-java8-0.1.0\"\n+                + BLANG_COMPILED_PKG_BINARY_EXT;\n+        Path balo = this.testResources.resolve(ProjectDirConstants.TARGET_DIR_NAME).\n+                resolve(ProjectDirConstants.TARGET_BALO_DIRECTORY);\n+        File baloFile = new File(balo.toString() + File.separator + baloFileName);\n+        File baloZipFile = new File(balo.toString() + File.separator +\n+                baloFileName.concat(\".zip\"));\n+        Path scopeToml = Paths.get(testResourcesURI).resolve(\"scope-toml\");\n+        String storedJarPath = \"platform-libs/storedJar.jar\";\n+\n+        // Build the project\n+        String[] compileArgs = {\"--all\", \"--skip-tests\"};\n+        BuildCommand buildCommand = new BuildCommand(this.testResources, printStream, printStream,\n+                false, true);\n+        new CommandLine(buildCommand).parse(compileArgs);\n+        // default scope\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));\n+\n+        // package scope\n+        copy(scopeToml.resolve(\"case1\").resolve(ProjectDirConstants.MANIFEST_FILE_NAME),\n+                this.testResources.resolve(ProjectDirConstants.MANIFEST_FILE_NAME));\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));\n+\n+        // package scope\n+        copy(scopeToml.resolve(\"case2\").resolve(ProjectDirConstants.MANIFEST_FILE_NAME),\n+                this.testResources.resolve(ProjectDirConstants.MANIFEST_FILE_NAME));\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertFalse(isJarExists(baloZipFile, storedJarPath));\n+\n+        // compile scope\n+        copy(scopeToml.resolve(\"case3\").resolve(ProjectDirConstants.MANIFEST_FILE_NAME),\n+                this.testResources.resolve(ProjectDirConstants.MANIFEST_FILE_NAME));\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertFalse(isJarExists(baloZipFile, storedJarPath));\n+    }\n+\n+    private boolean renameFile(File oldName, File newName) {\n+        return oldName.renameTo(newName);\n+    }\n+\n+    private boolean isJarExists (File file, String jarEntry) throws IOException {\n+        try (ZipFile zipFile = new ZipFile(file)) {\n+            Enumeration<? extends ZipEntry> entries = zipFile.entries();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf089561ee7ec77251107885e9f91614af8031f"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzU0MTE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-398754116", "createdAt": "2020-04-23T04:40:31Z", "commit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0MDozMVrOGKWQIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0MDozMVrOGKWQIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwMzUyMQ==", "bodyText": "When checking the Ballerina.toml file, it looks like \"case3\" should be the \"test\" scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r413503521", "createdAt": "2020-04-23T04:40:31Z", "author": {"login": "IrushiL"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/DependencyScopeTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import picocli.CommandLine;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.zip.ZipFile;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_PKG_BINARY_EXT;\n+\n+/**\n+ * Dependency scope tests.\n+ *\n+ * @since 1.2.x\n+ */\n+public class DependencyScopeTest extends CommandTest {\n+\n+    private Path testResources;\n+    private URI testResourcesURI;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        super.setup();\n+        try {\n+            this.testResources = super.tmpDir.resolve(\"scope-test-resources\");\n+            testResourcesURI = getClass().getClassLoader().getResource(\"test-resources\").toURI();\n+            Path storedJarDependencyProject = Paths.get(testResourcesURI).resolve(\"stored-jar-dependency-project\");\n+            Files.walkFileTree(storedJarDependencyProject, new BuildCommandTest.Copy(storedJarDependencyProject,\n+                    this.testResources));\n+        } catch (URISyntaxException e) {\n+            Assert.fail(\"error loading resources\");\n+        }\n+    }\n+\n+    @Test(description = \"Test if platform libs are packed with the balo based on the scope.\")\n+    public void testBuildCommandWithStoredJarDependency() throws IOException {\n+        String baloFileName = \"mymodule-\" + ProgramFileConstants.IMPLEMENTATION_VERSION + \"-java8-0.1.0\"\n+                + BLANG_COMPILED_PKG_BINARY_EXT;\n+        Path balo = this.testResources.resolve(ProjectDirConstants.TARGET_DIR_NAME).\n+                resolve(ProjectDirConstants.TARGET_BALO_DIRECTORY);\n+        File baloFile = new File(balo.toString() + File.separator + baloFileName);\n+        File baloZipFile = new File(balo.toString() + File.separator +\n+                baloFileName.concat(\".zip\"));\n+        Path scopeToml = Paths.get(testResourcesURI).resolve(\"scope-toml\");\n+        String storedJarPath = \"platform-libs/storedJar.jar\";\n+\n+        // Build the project\n+        String[] compileArgs = {\"--all\", \"--skip-tests\"};\n+        BuildCommand buildCommand = new BuildCommand(this.testResources, printStream, printStream,\n+                false, true);\n+        new CommandLine(buildCommand).parse(compileArgs);\n+        // default scope\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));\n+\n+        // package scope\n+        copy(scopeToml.resolve(\"case1\").resolve(ProjectDirConstants.MANIFEST_FILE_NAME),\n+                this.testResources.resolve(ProjectDirConstants.MANIFEST_FILE_NAME));\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));\n+\n+        // package scope\n+        copy(scopeToml.resolve(\"case2\").resolve(ProjectDirConstants.MANIFEST_FILE_NAME),\n+                this.testResources.resolve(ProjectDirConstants.MANIFEST_FILE_NAME));\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertFalse(isJarExists(baloZipFile, storedJarPath));\n+\n+        // compile scope", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzU0MjI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-398754226", "createdAt": "2020-04-23T04:40:53Z", "commit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0MDo1NFrOGKWQhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0MDo1NFrOGKWQhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwMzYyMQ==", "bodyText": "When checking the Ballerina.toml file, it looks like \"case2\" should be the \"compile\" scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r413503621", "createdAt": "2020-04-23T04:40:54Z", "author": {"login": "IrushiL"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/DependencyScopeTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import picocli.CommandLine;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.zip.ZipFile;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_PKG_BINARY_EXT;\n+\n+/**\n+ * Dependency scope tests.\n+ *\n+ * @since 1.2.x\n+ */\n+public class DependencyScopeTest extends CommandTest {\n+\n+    private Path testResources;\n+    private URI testResourcesURI;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        super.setup();\n+        try {\n+            this.testResources = super.tmpDir.resolve(\"scope-test-resources\");\n+            testResourcesURI = getClass().getClassLoader().getResource(\"test-resources\").toURI();\n+            Path storedJarDependencyProject = Paths.get(testResourcesURI).resolve(\"stored-jar-dependency-project\");\n+            Files.walkFileTree(storedJarDependencyProject, new BuildCommandTest.Copy(storedJarDependencyProject,\n+                    this.testResources));\n+        } catch (URISyntaxException e) {\n+            Assert.fail(\"error loading resources\");\n+        }\n+    }\n+\n+    @Test(description = \"Test if platform libs are packed with the balo based on the scope.\")\n+    public void testBuildCommandWithStoredJarDependency() throws IOException {\n+        String baloFileName = \"mymodule-\" + ProgramFileConstants.IMPLEMENTATION_VERSION + \"-java8-0.1.0\"\n+                + BLANG_COMPILED_PKG_BINARY_EXT;\n+        Path balo = this.testResources.resolve(ProjectDirConstants.TARGET_DIR_NAME).\n+                resolve(ProjectDirConstants.TARGET_BALO_DIRECTORY);\n+        File baloFile = new File(balo.toString() + File.separator + baloFileName);\n+        File baloZipFile = new File(balo.toString() + File.separator +\n+                baloFileName.concat(\".zip\"));\n+        Path scopeToml = Paths.get(testResourcesURI).resolve(\"scope-toml\");\n+        String storedJarPath = \"platform-libs/storedJar.jar\";\n+\n+        // Build the project\n+        String[] compileArgs = {\"--all\", \"--skip-tests\"};\n+        BuildCommand buildCommand = new BuildCommand(this.testResources, printStream, printStream,\n+                false, true);\n+        new CommandLine(buildCommand).parse(compileArgs);\n+        // default scope\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));\n+\n+        // package scope\n+        copy(scopeToml.resolve(\"case1\").resolve(ProjectDirConstants.MANIFEST_FILE_NAME),\n+                this.testResources.resolve(ProjectDirConstants.MANIFEST_FILE_NAME));\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));\n+\n+        // package scope", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzU1MjI0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-398755224", "createdAt": "2020-04-23T04:44:26Z", "commit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0NDoyNlrOGKWU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0NDoyNlrOGKWU6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDc0Nw==", "bodyText": "This code segment seems to be repeating for all 3 scopes. Is it possible to separate it out and avoid the code duplication?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r413504747", "createdAt": "2020-04-23T04:44:26Z", "author": {"login": "IrushiL"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/DependencyScopeTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import picocli.CommandLine;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.zip.ZipFile;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_PKG_BINARY_EXT;\n+\n+/**\n+ * Dependency scope tests.\n+ *\n+ * @since 1.2.x\n+ */\n+public class DependencyScopeTest extends CommandTest {\n+\n+    private Path testResources;\n+    private URI testResourcesURI;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        super.setup();\n+        try {\n+            this.testResources = super.tmpDir.resolve(\"scope-test-resources\");\n+            testResourcesURI = getClass().getClassLoader().getResource(\"test-resources\").toURI();\n+            Path storedJarDependencyProject = Paths.get(testResourcesURI).resolve(\"stored-jar-dependency-project\");\n+            Files.walkFileTree(storedJarDependencyProject, new BuildCommandTest.Copy(storedJarDependencyProject,\n+                    this.testResources));\n+        } catch (URISyntaxException e) {\n+            Assert.fail(\"error loading resources\");\n+        }\n+    }\n+\n+    @Test(description = \"Test if platform libs are packed with the balo based on the scope.\")\n+    public void testBuildCommandWithStoredJarDependency() throws IOException {\n+        String baloFileName = \"mymodule-\" + ProgramFileConstants.IMPLEMENTATION_VERSION + \"-java8-0.1.0\"\n+                + BLANG_COMPILED_PKG_BINARY_EXT;\n+        Path balo = this.testResources.resolve(ProjectDirConstants.TARGET_DIR_NAME).\n+                resolve(ProjectDirConstants.TARGET_BALO_DIRECTORY);\n+        File baloFile = new File(balo.toString() + File.separator + baloFileName);\n+        File baloZipFile = new File(balo.toString() + File.separator +\n+                baloFileName.concat(\".zip\"));\n+        Path scopeToml = Paths.get(testResourcesURI).resolve(\"scope-toml\");\n+        String storedJarPath = \"platform-libs/storedJar.jar\";\n+\n+        // Build the project\n+        String[] compileArgs = {\"--all\", \"--skip-tests\"};\n+        BuildCommand buildCommand = new BuildCommand(this.testResources, printStream, printStream,\n+                false, true);\n+        new CommandLine(buildCommand).parse(compileArgs);\n+        // default scope\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));\n+\n+        // package scope\n+        copy(scopeToml.resolve(\"case1\").resolve(ProjectDirConstants.MANIFEST_FILE_NAME),\n+                this.testResources.resolve(ProjectDirConstants.MANIFEST_FILE_NAME));\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzU2Njc3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-398756677", "createdAt": "2020-04-23T04:49:25Z", "commit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0OToyNlrOGKWbBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0OToyNlrOGKWbBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNjMwOA==", "bodyText": "This method does not seem to be used, but the scope should be set somewhere as far as I understand. Am I missing something here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r413506308", "createdAt": "2020-04-23T04:49:26Z", "author": {"login": "IrushiL"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/toml/model/Library.java", "diffHunk": "@@ -68,4 +69,12 @@ public String getArtifactId() {\n     public void setArtifactId(String artifactId) {\n         this.artifactId = artifactId;\n     }\n+\n+    public String getScope() {\n+        return scope;\n+    }\n+\n+    public void setScope(String scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzU2ODY0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-398756864", "createdAt": "2020-04-23T04:50:04Z", "commit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo1MDowNFrOGKWbyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo1MDowNFrOGKWbyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNjUwNA==", "bodyText": "Can we make this a private field?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r413506504", "createdAt": "2020-04-23T04:50:04Z", "author": {"login": "IrushiL"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/toml/model/Library.java", "diffHunk": "@@ -28,6 +28,7 @@\n     public String path;\n     public String groupId;\n     public String[] modules;\n+    public String scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzYwODg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-398760889", "createdAt": "2020-04-23T05:03:02Z", "commit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTowMzowM1rOGKWsWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTowNDoyNFrOGKWuCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMDc0Nw==", "bodyText": "Shall we replace with for loop without using java streams.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r413510747", "createdAt": "2020-04-23T05:03:03Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/writer/BaloFileWriter.java", "diffHunk": "@@ -298,15 +295,15 @@ private void addModuleDoc(Path root, Path moduleSourceDir) throws IOException {\n         }\n     }\n \n-    private void addPlatformLibs(Path root, Path projectDirectory, String moduleName,\n-                                 HashSet<Path> moduleDependencyList) throws IOException {\n+    private void addPlatformLibs(Path root, Path projectDirectory, String moduleName) throws IOException {\n         //If platform libs are defined add them to balo\n         if (null != manifest.getPlatform().libraries) {\n             Path platformLibsDir = root.resolve(ProjectDirConstants.BALO_PLATFORM_LIB_DIR_NAME);\n             Files.createDirectory(platformLibsDir);\n \n             List<Path> libs = manifest.getPlatform().libraries.stream()\n-                    .filter(lib -> lib.getModules() == null || Arrays.asList(lib.getModules()).contains(moduleName))\n+                    .filter(lib -> (lib.getModules() == null || Arrays.asList(lib.getModules()).contains(moduleName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMTE3OA==", "bodyText": "May be we can have three test cases for each scope which will be more clear", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r413511178", "createdAt": "2020-04-23T05:04:24Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/DependencyScopeTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import picocli.CommandLine;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.zip.ZipFile;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_PKG_BINARY_EXT;\n+\n+/**\n+ * Dependency scope tests.\n+ *\n+ * @since 1.2.x\n+ */\n+public class DependencyScopeTest extends CommandTest {\n+\n+    private Path testResources;\n+    private URI testResourcesURI;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        super.setup();\n+        try {\n+            this.testResources = super.tmpDir.resolve(\"scope-test-resources\");\n+            testResourcesURI = getClass().getClassLoader().getResource(\"test-resources\").toURI();\n+            Path storedJarDependencyProject = Paths.get(testResourcesURI).resolve(\"stored-jar-dependency-project\");\n+            Files.walkFileTree(storedJarDependencyProject, new BuildCommandTest.Copy(storedJarDependencyProject,\n+                    this.testResources));\n+        } catch (URISyntaxException e) {\n+            Assert.fail(\"error loading resources\");\n+        }\n+    }\n+\n+    @Test(description = \"Test if platform libs are packed with the balo based on the scope.\")\n+    public void testBuildCommandWithStoredJarDependency() throws IOException {\n+        String baloFileName = \"mymodule-\" + ProgramFileConstants.IMPLEMENTATION_VERSION + \"-java8-0.1.0\"\n+                + BLANG_COMPILED_PKG_BINARY_EXT;\n+        Path balo = this.testResources.resolve(ProjectDirConstants.TARGET_DIR_NAME).\n+                resolve(ProjectDirConstants.TARGET_BALO_DIRECTORY);\n+        File baloFile = new File(balo.toString() + File.separator + baloFileName);\n+        File baloZipFile = new File(balo.toString() + File.separator +\n+                baloFileName.concat(\".zip\"));\n+        Path scopeToml = Paths.get(testResourcesURI).resolve(\"scope-toml\");\n+        String storedJarPath = \"platform-libs/storedJar.jar\";\n+\n+        // Build the project\n+        String[] compileArgs = {\"--all\", \"--skip-tests\"};\n+        BuildCommand buildCommand = new BuildCommand(this.testResources, printStream, printStream,\n+                false, true);\n+        new CommandLine(buildCommand).parse(compileArgs);\n+        // default scope\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));\n+\n+        // package scope\n+        copy(scopeToml.resolve(\"case1\").resolve(ProjectDirConstants.MANIFEST_FILE_NAME),\n+                this.testResources.resolve(ProjectDirConstants.MANIFEST_FILE_NAME));\n+        buildCommand.execute();\n+        Assert.assertTrue(Files.exists(balo), \"Check if balo directory exists\");\n+\n+        // Check whether dependency jars getting packed to balo\n+        Assert.assertTrue(renameFile(baloFile, baloZipFile));\n+        Assert.assertTrue(isJarExists(baloZipFile, storedJarPath));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDc0Nw=="}, "originalCommit": {"oid": "04fdfa54a580ec8fa1603dc67157d4d5db347f17"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91a52bf95ea27721b95676514d744c689adb751a", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/91a52bf95ea27721b95676514d744c689adb751a", "committedDate": "2020-04-23T14:43:18Z", "message": "Fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjUyNDUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-399652453", "createdAt": "2020-04-24T05:38:01Z", "commit": {"oid": "91a52bf95ea27721b95676514d744c689adb751a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTozODowMVrOGLHSHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTozODowMVrOGLHSHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNjg0Nw==", "bodyText": "Should be 1.3.0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r414306847", "createdAt": "2020-04-24T05:38:01Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/DependencyScopeTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.programfile.ProgramFileConstants;\n+import picocli.CommandLine;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.zip.ZipFile;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.BLANG_COMPILED_PKG_BINARY_EXT;\n+\n+/**\n+ * Dependency scope tests.\n+ *\n+ * @since 1.2.x", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a52bf95ea27721b95676514d744c689adb751a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjY0Nzk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-400664799", "createdAt": "2020-04-27T06:43:28Z", "commit": {"oid": "107acdc5da7b4522518b9047495c7d9b8fdf4a4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "960fdb726065d563156f14b75bc88c785aeda0f4", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/960fdb726065d563156f14b75bc88c785aeda0f4", "committedDate": "2020-04-28T06:45:26Z", "message": "Add integration tests for scoping jar dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34de50ca0b01c20a82943c64356cf8426fa9b447", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34de50ca0b01c20a82943c64356cf8426fa9b447", "committedDate": "2020-05-04T11:33:28Z", "message": "Validate platform libs of the balo when copying native libs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28c4b18b7449278bf69349dc29f9a8744ce4e47b", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28c4b18b7449278bf69349dc29f9a8744ce4e47b", "committedDate": "2020-05-04T11:51:32Z", "message": "Add test to validate platform libs of the balo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MzIwNTE1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-406320515", "createdAt": "2020-05-06T05:58:51Z", "commit": {"oid": "28c4b18b7449278bf69349dc29f9a8744ce4e47b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTo1ODo1MVrOGRE-pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTo1ODo1MVrOGRE-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2MDU0OQ==", "bodyText": "If I import 2 modules (mod1, mod2) and mod1 has compiler dependency and same compiler dependency add as default in mod2. So that dependency will be packed in mod2 balo and at runtime everything will work fine. But still warning message will be shown during compilation as per below logic. Shall we fix that case as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r420560549", "createdAt": "2020-05-06T05:58:51Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyNativeLibTask.java", "diffHunk": "@@ -239,6 +243,42 @@ private void copyLibsFromBalo(Path baloFilePath, Set<Path> moduleDependencySet)\n         }\n     }\n \n+    private void copyAndValidateBaloDependencies(BuildContext buildContext, Path importDependencyPath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c4b18b7449278bf69349dc29f9a8744ce4e47b"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MzIyMzQw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-406322340", "createdAt": "2020-05-06T06:04:14Z", "commit": {"oid": "28c4b18b7449278bf69349dc29f9a8744ce4e47b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjowNDoxNVrOGRFFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjowNDoxNVrOGRFFOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2MjIzNQ==", "bodyText": "This logic has performance impact due to loop inside loop. Can we collect all compiler libs of balos in a hash set( key can be orgname+ packageid+ artfactID+ filename) and default libs two another set. Then we can compare those two hashsets two check first one is subset of default(packing) libs.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r420562235", "createdAt": "2020-05-06T06:04:15Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyNativeLibTask.java", "diffHunk": "@@ -239,6 +243,42 @@ private void copyLibsFromBalo(Path baloFilePath, Set<Path> moduleDependencySet)\n         }\n     }\n \n+    private void copyAndValidateBaloDependencies(BuildContext buildContext, Path importDependencyPath,\n+                                                 PackageID packageID, Path project, Set<Path> moduleDependencySet) {\n+        Manifest manifestFromBalo = RepoUtils.getManifestFromBalo(importDependencyPath);\n+        List<Library> baloDependencies = manifestFromBalo.getPlatform().libraries;\n+\n+        if (baloDependencies == null) {\n+            return;\n+        }\n+\n+        // If platform libs are defined, copy them to target\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+        for (Library baloTomlLib : baloDependencies) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c4b18b7449278bf69349dc29f9a8744ce4e47b"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2836a1d26a03c03d55a16819a0341eab974ec7e0", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2836a1d26a03c03d55a16819a0341eab974ec7e0", "committedDate": "2020-05-09T16:40:45Z", "message": "Add suggested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5811f951addb179058dd90eed9e59bfb7b1f18d", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5811f951addb179058dd90eed9e59bfb7b1f18d", "committedDate": "2020-05-09T16:51:38Z", "message": "Merge branch 'master' into scoping-jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94d7345bb9412f0269e9f2ee238c428caf51eeaf", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94d7345bb9412f0269e9f2ee238c428caf51eeaf", "committedDate": "2020-05-11T07:32:10Z", "message": "Update with the latest changes in the scope spec"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDcyNTMy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-412472532", "createdAt": "2020-05-15T09:03:51Z", "commit": {"oid": "94d7345bb9412f0269e9f2ee238c428caf51eeaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTowMzo1MVrOGV8lsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwOTowMzo1MVrOGV8lsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2NTk3MA==", "bodyText": "can we check !platformLibs.contains(baloTomlLib) and then log warning. so we can get rid of 276 to 280 lines", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#discussion_r425665970", "createdAt": "2020-05-15T09:03:51Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyNativeLibTask.java", "diffHunk": "@@ -239,6 +244,46 @@ private void copyLibsFromBalo(Path baloFilePath, Set<Path> moduleDependencySet)\n         }\n     }\n \n+    private void copyAndValidateBaloDependencies(BuildContext buildContext, Path importDependencyPath,\n+                                                 PackageID packageID, Path project, Set<Path> moduleDependencySet) {\n+        Manifest manifestFromBalo = RepoUtils.getManifestFromBalo(importDependencyPath);\n+        List<Library> baloDependencies = manifestFromBalo.getPlatform().libraries;\n+        List<Library> libraries = manifest.getPlatform().libraries;\n+        HashSet<Path> baloCompileScopeDependencies = new HashSet<>();\n+        HashSet<Path> platformLibs = new HashSet<>();\n+\n+        if (baloDependencies == null) {\n+            return;\n+        }\n+\n+        for (Library baloTomlLib : baloDependencies) {\n+            if (baloTomlLib.getScope() != null && baloTomlLib.getScope().equalsIgnoreCase(\"provided\")) {\n+                baloCompileScopeDependencies.add(Paths.get(baloTomlLib.getPath()).getFileName());\n+            }\n+        }\n+\n+        if (libraries != null) {\n+            for (Library library : libraries) {\n+                if (Arrays.asList(library.getModules()).contains(packageID.orgName.value + \"/\" +\n+                        packageID.name.value)) {\n+                    Path libFilePath = Paths.get(library.getPath());\n+                    platformLibs.add(libFilePath.getFileName());\n+                    moduleDependencySet.add(project.resolve(libFilePath));\n+                }\n+            }\n+        }\n+\n+        if (platformLibs.containsAll(baloCompileScopeDependencies)) {\n+            return;\n+        }\n+\n+        baloCompileScopeDependencies.removeAll(platformLibs);\n+        for (Path baloTomlLib : baloCompileScopeDependencies) {\n+            buildContext.out().println(\"warning: \" + packageID + \" is missing a native library dependency - \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d7345bb9412f0269e9f2ee238c428caf51eeaf"}, "originalPosition": 148}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efa477ef659ac4dcb8ecf20bb54f856ab32f5d78", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/efa477ef659ac4dcb8ecf20bb54f856ab32f5d78", "committedDate": "2020-05-15T09:58:47Z", "message": "Apply suggested change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNTgwMzgx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22817#pullrequestreview-412580381", "createdAt": "2020-05-15T11:54:48Z", "commit": {"oid": "efa477ef659ac4dcb8ecf20bb54f856ab32f5d78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3613, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}