{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNDkyMTU2", "number": 27343, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMzoyOFrOFA9krA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjozOTo0NFrOFI2xaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUzMTMyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMzoyOFrOH_gcew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNDowNDozN1rOIEfjjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzkxNQ==", "bodyText": "Don't think we need a method here. If we want a method it is good if we can make line 850 to a method call to make things consistent.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r536353915", "createdAt": "2020-12-04T20:13:28Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -864,6 +867,7 @@ public void visit(BLangMatchStatement matchStatement) {\n                     containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n         }\n         this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n+        resetLastPatternInClause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe2d7661750b4d03a576e96f13e940fc7790964"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyNTk0MQ==", "bodyText": "IMO, it's OK to have a method, but yeah I agree that we should then change other usage too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r539225941", "createdAt": "2020-12-09T11:25:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -864,6 +867,7 @@ public void visit(BLangMatchStatement matchStatement) {\n                     containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n         }\n         this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n+        resetLastPatternInClause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzkxNQ=="}, "originalCommit": {"oid": "dfe2d7661750b4d03a576e96f13e940fc7790964"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4MjIyMQ==", "bodyText": "This is no longer used.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r541582221", "createdAt": "2020-12-12T14:04:37Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -864,6 +867,7 @@ public void visit(BLangMatchStatement matchStatement) {\n                     containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n         }\n         this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n+        resetLastPatternInClause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MzkxNQ=="}, "originalCommit": {"oid": "dfe2d7661750b4d03a576e96f13e940fc7790964"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTU1MzcxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMToyMToyN1rOICPmTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNDowNDozMFrOIEfjcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMzYyOQ==", "bodyText": "Where do we get \"s3\" and \"s4\" from? Do these tests run?\nI seem to be getting a compilation error for constPattern14 - this function must return a result - which again is not correct because the function does return for all scenarios within the match statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r539223629", "createdAt": "2020-12-09T11:21:27Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern.bal", "diffHunk": "@@ -425,6 +425,38 @@ public function testConstPattern13() {\n     }\n }\n \n+function constPattern14(any a, any b) returns string {\n+    match a {\n+        \"foo\" => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+function testConstPattern14() {\n+    assertEquals(\"s2\", constPattern14(\"foo\", 2));\n+    assertEquals(\"s1\", constPattern14(\"foo\", \"bar\"));\n+    assertEquals(\"s4\", constPattern14(1, 2));\n+    assertEquals(\"s3\", constPattern14(1, \"bar\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe2d7661750b4d03a576e96f13e940fc7790964"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4MjE5NQ==", "bodyText": "Fixed. I tested this with PR #27292. Therefore those changes were moved here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r541582195", "createdAt": "2020-12-12T14:04:30Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern.bal", "diffHunk": "@@ -425,6 +425,38 @@ public function testConstPattern13() {\n     }\n }\n \n+function constPattern14(any a, any b) returns string {\n+    match a {\n+        \"foo\" => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+function testConstPattern14() {\n+    assertEquals(\"s2\", constPattern14(\"foo\", 2));\n+    assertEquals(\"s1\", constPattern14(\"foo\", \"bar\"));\n+    assertEquals(\"s4\", constPattern14(1, 2));\n+    assertEquals(\"s3\", constPattern14(1, \"bar\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyMzYyOQ=="}, "originalCommit": {"oid": "dfe2d7661750b4d03a576e96f13e940fc7790964"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTU4ODI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMToyOTo0M1rOICP6gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNDowNDo0NVrOIEfjsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyODgwMQ==", "bodyText": "Shouldn't we reset this.hasLastPatternInClause here to what was there before visiting the match clauses?\nThe following doesn't fail with this change.\nfunction func(any a, any b) returns string {\n    match a {\n        _ => {\n            match b {\n                \"bar\" => {\n                    return \"s1\";\n                }\n                _ => {\n                    return \"s2\";\n                }\n            }\n        }\n        \"foo\" => { // should get an error\n            \n        }\n    }\n    return \"\";\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r539228801", "createdAt": "2020-12-09T11:29:43Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -864,6 +867,7 @@ public void visit(BLangMatchStatement matchStatement) {\n                     containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n         }\n         this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n+        resetLastPatternInClause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe2d7661750b4d03a576e96f13e940fc7790964"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4MjI1Ng==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r541582256", "createdAt": "2020-12-12T14:04:45Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -864,6 +867,7 @@ public void visit(BLangMatchStatement matchStatement) {\n                     containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n         }\n         this.statementReturns = allClausesReturns && containsLastPatternInStatement;\n+        resetLastPatternInClause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIyODgwMQ=="}, "originalCommit": {"oid": "dfe2d7661750b4d03a576e96f13e940fc7790964"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTYxMzU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzozMDo0NlrOIE-bDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNToxOToxM1rOIJMjXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4Nzk1MA==", "bodyText": "Please see #27292 (comment).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r542087950", "createdAt": "2020-12-14T03:30:46Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -862,6 +860,7 @@ public void visit(BLangMatchClause matchClause) {\n         matchClause.declaredVars.putAll(matchClause.matchPatterns.get(0).declaredVars);\n \n         analyzeNode(matchClause.blockStmt, env);\n+        this.matchClauseReturns = this.statementReturns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b7e37944c91e10b5467b0a0ea107c407bc6f31"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxMzc1Nw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546513757", "createdAt": "2020-12-21T05:19:13Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -862,6 +860,7 @@ public void visit(BLangMatchClause matchClause) {\n         matchClause.declaredVars.putAll(matchClause.matchPatterns.get(0).declaredVars);\n \n         analyzeNode(matchClause.blockStmt, env);\n+        this.matchClauseReturns = this.statementReturns;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4Nzk1MA=="}, "originalCommit": {"oid": "a7b7e37944c91e10b5467b0a0ea107c407bc6f31"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTgxODAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangMatchStatement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNTowNTowN1rOIJMXRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToxOTozOFrOIJRdDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxMDY2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean hasLasPattern;\n          \n          \n            \n                public boolean hasLastPattern;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546510662", "createdAt": "2020-12-21T05:05:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangMatchStatement.java", "diffHunk": "@@ -37,6 +37,7 @@\n     public BLangExpression expr; // TODO : replace with new node `action|expression`\n     public List<BLangMatchClause> matchClauses = new ArrayList<>();\n     public BLangOnFailClause onFailClause;\n+    public boolean hasLasPattern;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e6d7169c4ab16a8121dd17f536ca896570798d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NDA2Mg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546594062", "createdAt": "2020-12-21T09:19:38Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangMatchStatement.java", "diffHunk": "@@ -37,6 +37,7 @@\n     public BLangExpression expr; // TODO : replace with new node `action|expression`\n     public List<BLangMatchClause> matchClauses = new ArrayList<>();\n     public BLangOnFailClause onFailClause;\n+    public boolean hasLasPattern;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxMDY2Mg=="}, "originalCommit": {"oid": "97e6d7169c4ab16a8121dd17f536ca896570798d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTg2Njg2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNTozNjowMlrOIJMyQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzozNTozNFrOIJOzfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxNzU2OA==", "bodyText": "Do we need both wildCardMatchPattern.isLastPattern and wildCardMatchPattern.matchesAll? Going by the expression, seems like the check is rather for something like matchesAny?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546517568", "createdAt": "2020-12-21T05:36:02Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1022,7 +1019,7 @@ public void visit(BLangConstPattern constMatchPattern) {\n \n     @Override\n     public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n-        this.hasLastPatternInClause = wildCardMatchPattern.matchesAll =\n+        wildCardMatchPattern.isLastPattern = wildCardMatchPattern.matchesAll =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e6d7169c4ab16a8121dd17f536ca896570798d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU1MDY1NQ==", "bodyText": "Remove matchesAll", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546550655", "createdAt": "2020-12-21T07:35:34Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1022,7 +1019,7 @@ public void visit(BLangConstPattern constMatchPattern) {\n \n     @Override\n     public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n-        this.hasLastPatternInClause = wildCardMatchPattern.matchesAll =\n+        wildCardMatchPattern.isLastPattern = wildCardMatchPattern.matchesAll =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUxNzU2OA=="}, "originalCommit": {"oid": "97e6d7169c4ab16a8121dd17f536ca896570798d"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk2MzczOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjozMDo1NFrOIJNoRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzozNTozOFrOIJOznA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMTM5Ng==", "bodyText": "I'm not sure if checking matchGuard == null will always produce correct results. See #27603", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546531396", "createdAt": "2020-12-21T06:30:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -819,11 +813,13 @@ public void visit(BLangMatchStatement matchStatement) {\n             }\n             this.resetErrorThrown();\n             analyzeNode(matchClause, env);\n-            allClausesReturns = allClausesReturns && this.matchClauseReturns;\n-            containsLastPatternInStatement =\n-                    containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n+            allClausesReturns = allClausesReturns && this.statementReturns;\n+            resetStatementReturns();\n+            matchStatement.hasLasPattern = matchStatement.hasLasPattern\n+                    || (matchClause.matchGuard == null && matchClause.hasLastPatternInClause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e6d7169c4ab16a8121dd17f536ca896570798d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU1MDY4NA==", "bodyText": "I will check matchGuard related issues separately.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r546550684", "createdAt": "2020-12-21T07:35:38Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -819,11 +813,13 @@ public void visit(BLangMatchStatement matchStatement) {\n             }\n             this.resetErrorThrown();\n             analyzeNode(matchClause, env);\n-            allClausesReturns = allClausesReturns && this.matchClauseReturns;\n-            containsLastPatternInStatement =\n-                    containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n+            allClausesReturns = allClausesReturns && this.statementReturns;\n+            resetStatementReturns();\n+            matchStatement.hasLasPattern = matchStatement.hasLasPattern\n+                    || (matchClause.matchGuard == null && matchClause.hasLastPatternInClause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMTM5Ng=="}, "originalCommit": {"oid": "97e6d7169c4ab16a8121dd17f536ca896570798d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTU5OTc1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNToxMDozOFrOIJulLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTo1NTo0NlrOIJ4pVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3MTI3Ng==", "bodyText": "Noticed this in several places although not introduced by this PR? Can matchExpr be null?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547071276", "createdAt": "2020-12-22T05:10:38Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1022,7 +1019,7 @@ public void visit(BLangConstPattern constMatchPattern) {\n \n     @Override\n     public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n-        this.hasLastPatternInClause = wildCardMatchPattern.matchesAll =\n+        wildCardMatchPattern.isLastPattern =\n                 wildCardMatchPattern.matchExpr != null && types.isAssignable(wildCardMatchPattern.matchExpr.type,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced7816db032c1ab7f856019d307f7844544cabe"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNjE4Mw==", "bodyText": "If we consider match-stmt, matchExpr cannot be null.\nIn every match-pattern, we try keep the matchExpr of match-stmt. If we consider list-match-pattern, we cannot say the matchExpr of list-match-pattern must be same as the matchExpr of member-match-patterns. Consider below example.\nmatch v {\n    [1, 2] => {} \n}\n\nmatchExpr of [1,2] (list-match-apttern) is v. But ew cannot apply the same thing to member-match-patterns which means 1 and 2.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547236183", "createdAt": "2020-12-22T11:55:46Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1022,7 +1019,7 @@ public void visit(BLangConstPattern constMatchPattern) {\n \n     @Override\n     public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n-        this.hasLastPatternInClause = wildCardMatchPattern.matchesAll =\n+        wildCardMatchPattern.isLastPattern =\n                 wildCardMatchPattern.matchExpr != null && types.isAssignable(wildCardMatchPattern.matchExpr.type,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3MTI3Ng=="}, "originalCommit": {"oid": "ced7816db032c1ab7f856019d307f7844544cabe"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTYzMjg3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNToyOTowNVrOIJu3wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTo1NTo1NFrOIJ4pkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NjAzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        else {\n          \n          \n            \n                        } else {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547076034", "createdAt": "2020-12-22T05:29:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern-negative.bal", "diffHunk": "@@ -124,3 +124,88 @@ function testNegative2(int v) returns string {\n     }\n     return s; // variable 's' may not have been initialized\n }\n+\n+function testNegative3(any a, any b) returns string {\n+    match a {\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        \"foo\" => { // unreachable pattern\n+\n+        }\n+    }\n+    return \"\";\n+}\n+\n+function testNegative4(any a, any b) returns string {\n+    match a {\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        \"foo\" => { // unreachable pattern\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+    }\n+    return \"\"; // unreachable code\n+}\n+\n+public function testNegative5(any animal) returns string { // this function must return a result\n+    int total = 1;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                return \"Total 2\";\n+            }\n+        }\n+        _ => {\n+            return \"!Mouse\";\n+        }\n+    }\n+}\n+\n+public function testNegative6(any animal) returns string { // this function must return a result\n+    int total = 1;\n+    int age = 2;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                if (age > 3) {\n+                    return \"Age is greater that 3\";\n+                }\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced7816db032c1ab7f856019d307f7844544cabe"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNjI0MQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547236241", "createdAt": "2020-12-22T11:55:54Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern-negative.bal", "diffHunk": "@@ -124,3 +124,88 @@ function testNegative2(int v) returns string {\n     }\n     return s; // variable 's' may not have been initialized\n }\n+\n+function testNegative3(any a, any b) returns string {\n+    match a {\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        \"foo\" => { // unreachable pattern\n+\n+        }\n+    }\n+    return \"\";\n+}\n+\n+function testNegative4(any a, any b) returns string {\n+    match a {\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        \"foo\" => { // unreachable pattern\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+    }\n+    return \"\"; // unreachable code\n+}\n+\n+public function testNegative5(any animal) returns string { // this function must return a result\n+    int total = 1;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                return \"Total 2\";\n+            }\n+        }\n+        _ => {\n+            return \"!Mouse\";\n+        }\n+    }\n+}\n+\n+public function testNegative6(any animal) returns string { // this function must return a result\n+    int total = 1;\n+    int age = 2;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                if (age > 3) {\n+                    return \"Age is greater that 3\";\n+                }\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NjAzNA=="}, "originalCommit": {"oid": "ced7816db032c1ab7f856019d307f7844544cabe"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTYzNDM2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNToyOTo1NFrOIJu4kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTo1NjowMVrOIJ4p1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NjI0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        else {\n          \n          \n            \n                        } else {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547076242", "createdAt": "2020-12-22T05:29:54Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern.bal", "diffHunk": "@@ -425,6 +425,91 @@ public function testConstPattern13() {\n     }\n }\n \n+function constPattern14(any a, any b) returns string {\n+    match a {\n+        \"foo\" => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s3\";\n+                }\n+                _ => {\n+                    return \"s4\";\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+function testConstPattern14() {\n+    assertEquals(\"s2\", constPattern14(\"foo\", 2));\n+    assertEquals(\"s1\", constPattern14(\"foo\", \"bar\"));\n+    assertEquals(\"s4\", constPattern14(1, 2));\n+    assertEquals(\"s3\", constPattern14(1, \"bar\"));\n+}\n+\n+public function constPattern15(any animal) returns string {\n+    int total = 1;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                return \"Total 2\";\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced7816db032c1ab7f856019d307f7844544cabe"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNjMwOQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547236309", "createdAt": "2020-12-22T11:56:01Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern.bal", "diffHunk": "@@ -425,6 +425,91 @@ public function testConstPattern13() {\n     }\n }\n \n+function constPattern14(any a, any b) returns string {\n+    match a {\n+        \"foo\" => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s3\";\n+                }\n+                _ => {\n+                    return \"s4\";\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+function testConstPattern14() {\n+    assertEquals(\"s2\", constPattern14(\"foo\", 2));\n+    assertEquals(\"s1\", constPattern14(\"foo\", \"bar\"));\n+    assertEquals(\"s4\", constPattern14(1, 2));\n+    assertEquals(\"s3\", constPattern14(1, \"bar\"));\n+}\n+\n+public function constPattern15(any animal) returns string {\n+    int total = 1;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                return \"Total 2\";\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NjI0Mg=="}, "originalCommit": {"oid": "ced7816db032c1ab7f856019d307f7844544cabe"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTYzNTQ2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNTozMDozOVrOIJu5SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTo1NjowOVrOIJ4qBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NjQyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        else {\n          \n          \n            \n                        } else {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547076424", "createdAt": "2020-12-22T05:30:39Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern.bal", "diffHunk": "@@ -425,6 +425,91 @@ public function testConstPattern13() {\n     }\n }\n \n+function constPattern14(any a, any b) returns string {\n+    match a {\n+        \"foo\" => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s3\";\n+                }\n+                _ => {\n+                    return \"s4\";\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+function testConstPattern14() {\n+    assertEquals(\"s2\", constPattern14(\"foo\", 2));\n+    assertEquals(\"s1\", constPattern14(\"foo\", \"bar\"));\n+    assertEquals(\"s4\", constPattern14(1, 2));\n+    assertEquals(\"s3\", constPattern14(1, \"bar\"));\n+}\n+\n+public function constPattern15(any animal) returns string {\n+    int total = 1;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                return \"Total 2\";\n+            }\n+            else {\n+                return \"Not 2\";\n+            }\n+        }\n+        _ => {\n+            return \"!Mouse\";\n+        }\n+    }\n+}\n+\n+public function testConstPattern15() {\n+    assertEquals(\"Not 2\", constPattern15(\"Mouse\"));\n+    assertEquals(\"!Mouse\", constPattern15(\"Dog\"));\n+}\n+\n+public function constPattern16(any animal) returns string {\n+    int total = 1;\n+    int age = 2;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                if (age > 3) {\n+                    return \"Age is greater that 3\";\n+                } else {\n+                    return \"Age is less than 3\";\n+                }\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced7816db032c1ab7f856019d307f7844544cabe"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNjM1OQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547236359", "createdAt": "2020-12-22T11:56:09Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern.bal", "diffHunk": "@@ -425,6 +425,91 @@ public function testConstPattern13() {\n     }\n }\n \n+function constPattern14(any a, any b) returns string {\n+    match a {\n+        \"foo\" => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s3\";\n+                }\n+                _ => {\n+                    return \"s4\";\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+function testConstPattern14() {\n+    assertEquals(\"s2\", constPattern14(\"foo\", 2));\n+    assertEquals(\"s1\", constPattern14(\"foo\", \"bar\"));\n+    assertEquals(\"s4\", constPattern14(1, 2));\n+    assertEquals(\"s3\", constPattern14(1, \"bar\"));\n+}\n+\n+public function constPattern15(any animal) returns string {\n+    int total = 1;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                return \"Total 2\";\n+            }\n+            else {\n+                return \"Not 2\";\n+            }\n+        }\n+        _ => {\n+            return \"!Mouse\";\n+        }\n+    }\n+}\n+\n+public function testConstPattern15() {\n+    assertEquals(\"Not 2\", constPattern15(\"Mouse\"));\n+    assertEquals(\"!Mouse\", constPattern15(\"Dog\"));\n+}\n+\n+public function constPattern16(any animal) returns string {\n+    int total = 1;\n+    int age = 2;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                if (age > 3) {\n+                    return \"Age is greater that 3\";\n+                } else {\n+                    return \"Age is less than 3\";\n+                }\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NjQyNA=="}, "originalCommit": {"oid": "ced7816db032c1ab7f856019d307f7844544cabe"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTI5MTM4OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1NzoxOVrOIJ9_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoyMTo0MlrOIKA34g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMzg3Ng==", "bodyText": "Since we removed matchesAll and rely on isLastPattern now, shouldn't we set isLastPattern to true here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547323876", "createdAt": "2020-12-22T14:57:19Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2614,7 +2614,6 @@ public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n         }\n         BType matchExprType = wildCardMatchPattern.matchExpr.type;\n         if (types.isAssignable(matchExprType, symTable.anyType)) {\n-            wildCardMatchPattern.matchesAll = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c72c8c097dd623a56b5a92187b2433b95ef6a08"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MDk3OA==", "bodyText": "It is set in CodeAnalyser because it is related to code analysing.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547370978", "createdAt": "2020-12-22T16:21:42Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2614,7 +2614,6 @@ public void visit(BLangWildCardMatchPattern wildCardMatchPattern) {\n         }\n         BType matchExprType = wildCardMatchPattern.matchExpr.type;\n         if (types.isAssignable(matchExprType, symTable.anyType)) {\n-            wildCardMatchPattern.matchesAll = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMzg3Ng=="}, "originalCommit": {"oid": "6c72c8c097dd623a56b5a92187b2433b95ef6a08"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTI5OTYyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1OTo0MVrOIJ-E7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNDowMTo1N1rOIKQgXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTE2NQ==", "bodyText": "Shouldn't this be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.hasLastPatternInClause = hasLastPatternInClause;\n          \n          \n            \n                    this.hasLastPatternInClause = true;\n          \n      \n    \n    \n  \n\nIs setLastPatternInClause not used btw? If it is used, there should have been tests that failed due to this, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547325165", "createdAt": "2020-12-22T14:59:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java", "diffHunk": "@@ -89,13 +89,13 @@ public void addMatchPattern(MatchPatternNode matchPattern) {\n     }\n \n     @Override\n-    public boolean isLastClause() {\n-        return isLastClause;\n+    public boolean hasLastPatternInClause() {\n+        return hasLastPatternInClause;\n     }\n \n     @Override\n-    public void setLastClause() {\n-        this.isLastClause = true;\n+    public void setLastPatternInClause() {\n+        this.hasLastPatternInClause = hasLastPatternInClause;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c72c8c097dd623a56b5a92187b2433b95ef6a08"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNzEwMA==", "bodyText": "Removed that setter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547627100", "createdAt": "2020-12-23T04:01:57Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java", "diffHunk": "@@ -89,13 +89,13 @@ public void addMatchPattern(MatchPatternNode matchPattern) {\n     }\n \n     @Override\n-    public boolean isLastClause() {\n-        return isLastClause;\n+    public boolean hasLastPatternInClause() {\n+        return hasLastPatternInClause;\n     }\n \n     @Override\n-    public void setLastClause() {\n-        this.isLastClause = true;\n+    public void setLastPatternInClause() {\n+        this.hasLastPatternInClause = hasLastPatternInClause;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTE2NQ=="}, "originalCommit": {"oid": "6c72c8c097dd623a56b5a92187b2433b95ef6a08"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDg3MDQxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDoxNzo1NFrOIKgK5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzo1NzoyOVrOIKs_zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4Mzc1MQ==", "bodyText": "Instead of adding a new field hasLastPattern to BLangMatchStatement, I think we should be able to extract this information based on just this.hasLastPatternInStatement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r547883751", "createdAt": "2020-12-23T10:17:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -804,12 +799,11 @@ public void visit(BLangMatchStatement matchStatement) {\n         matchExprType = matchStatement.expr.type;\n \n         boolean currentErrorThrown = this.errorThrown;\n-        this.hasLastPatternInClause = false;\n-        boolean containsLastPatternInStatement = false;\n+        this.hasLastPatternInStatement = false;\n+        matchStatement.hasLastPattern = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6651ab9fd2f463f99f2bf7603627ca86de487e4b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MzkwMw==", "bodyText": "Yes, refactored that part", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548093903", "createdAt": "2020-12-23T17:57:29Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -804,12 +799,11 @@ public void visit(BLangMatchStatement matchStatement) {\n         matchExprType = matchStatement.expr.type;\n \n         boolean currentErrorThrown = this.errorThrown;\n-        this.hasLastPatternInClause = false;\n-        boolean containsLastPatternInStatement = false;\n+        this.hasLastPatternInStatement = false;\n+        matchStatement.hasLastPattern = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4Mzc1MQ=="}, "originalCommit": {"oid": "6651ab9fd2f463f99f2bf7603627ca86de487e4b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjQ5NTE4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODo0NjoxOVrOIKvVSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0ODozNVrOIKyRCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEzMjE3MQ==", "bodyText": "Extra new lines.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548132171", "createdAt": "2020-12-23T18:46:19Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern-negative.bal", "diffHunk": "@@ -124,3 +124,87 @@ function testNegative2(int v) returns string {\n     }\n     return s; // variable 's' may not have been initialized\n }\n+\n+function testNegative3(any a, any b) returns string {\n+    match a {\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        \"foo\" => { // unreachable pattern\n+\n+        }\n+    }\n+    return \"\";\n+}\n+\n+function testNegative4(any a, any b) returns string {\n+    match a {\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        \"foo\" => { // unreachable pattern\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+    }\n+    return \"\"; // unreachable code\n+}\n+\n+public function testNegative5(any animal) returns string { // this function must return a result\n+    int total = 1;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                return \"Total 2\";\n+            }\n+        }\n+        _ => {\n+            return \"!Mouse\";\n+        }\n+    }\n+}\n+\n+public function testNegative6(any animal) returns string { // this function must return a result\n+    int total = 1;\n+    int age = 2;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                if (age > 3) {\n+                    return \"Age is greater that 3\";\n+                }\n+            } else {\n+                if (age > 3) {\n+                    return \"Age is greater that 3\";\n+                } else {\n+                    return \"Age is less than 3\";\n+                }\n+            }\n+        }\n+        _ => {\n+            return \"!Mouse\";\n+        }\n+    }\n+}\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61da509750f839e66da7f867a12cc71d9bb1650"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE4MDIzMg==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548180232", "createdAt": "2020-12-23T19:48:35Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/const-pattern-negative.bal", "diffHunk": "@@ -124,3 +124,87 @@ function testNegative2(int v) returns string {\n     }\n     return s; // variable 's' may not have been initialized\n }\n+\n+function testNegative3(any a, any b) returns string {\n+    match a {\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        \"foo\" => { // unreachable pattern\n+\n+        }\n+    }\n+    return \"\";\n+}\n+\n+function testNegative4(any a, any b) returns string {\n+    match a {\n+        _ => {\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+        \"foo\" => { // unreachable pattern\n+            match b {\n+                \"bar\" => {\n+                    return \"s1\";\n+                }\n+                _ => {\n+                    return \"s2\";\n+                }\n+            }\n+        }\n+    }\n+    return \"\"; // unreachable code\n+}\n+\n+public function testNegative5(any animal) returns string { // this function must return a result\n+    int total = 1;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                return \"Total 2\";\n+            }\n+        }\n+        _ => {\n+            return \"!Mouse\";\n+        }\n+    }\n+}\n+\n+public function testNegative6(any animal) returns string { // this function must return a result\n+    int total = 1;\n+    int age = 2;\n+    match animal {\n+        \"Mouse\" => {\n+            if (total == 2) {\n+                if (age > 3) {\n+                    return \"Age is greater that 3\";\n+                }\n+            } else {\n+                if (age > 3) {\n+                    return \"Age is greater that 3\";\n+                } else {\n+                    return \"Age is less than 3\";\n+                }\n+            }\n+        }\n+        _ => {\n+            return \"!Mouse\";\n+        }\n+    }\n+}\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEzMjE3MQ=="}, "originalCommit": {"oid": "b61da509750f839e66da7f867a12cc71d9bb1650"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjU3OTUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTowMzo0NlrOIKwNNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0ODoyNVrOIKyQrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NjQ4Nw==", "bodyText": "We can do this when visiting BLangMatchStatement, before L803, right? Or we will be doing this assignment and re-assignment in L864 per clause even if there is no match statement in the clause?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548146487", "createdAt": "2020-12-23T19:03:46Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -853,16 +849,19 @@ public void visit(BLangMatchClause matchClause) {\n \n             this.isJSONContext = types.isJSONContext(matchExprType);\n             analyzeNode(matchPattern, env);\n-            matchPattern.isLastPattern = this.hasLastPatternInClause;\n+            this.hasLastPatternInClause = this.hasLastPatternInClause || matchPattern.isLastPattern;\n         }\n \n         if (!patternListContainsSameVars) {\n             dlog.error(matchClause.pos, DiagnosticErrorCode.MATCH_PATTERNS_SHOULD_CONTAIN_SAME_SET_OF_VARIABLES);\n         }\n         matchClause.declaredVars.putAll(matchClause.matchPatterns.get(0).declaredVars);\n \n+        boolean hasLastPatternInStatement = this.hasLastPatternInStatement;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61da509750f839e66da7f867a12cc71d9bb1650"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE4MDE0Mg==", "bodyText": "Yes, changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548180142", "createdAt": "2020-12-23T19:48:25Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -853,16 +849,19 @@ public void visit(BLangMatchClause matchClause) {\n \n             this.isJSONContext = types.isJSONContext(matchExprType);\n             analyzeNode(matchPattern, env);\n-            matchPattern.isLastPattern = this.hasLastPatternInClause;\n+            this.hasLastPatternInClause = this.hasLastPatternInClause || matchPattern.isLastPattern;\n         }\n \n         if (!patternListContainsSameVars) {\n             dlog.error(matchClause.pos, DiagnosticErrorCode.MATCH_PATTERNS_SHOULD_CONTAIN_SAME_SET_OF_VARIABLES);\n         }\n         matchClause.declaredVars.putAll(matchClause.matchPatterns.get(0).declaredVars);\n \n+        boolean hasLastPatternInStatement = this.hasLastPatternInStatement;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NjQ4Nw=="}, "originalCommit": {"oid": "b61da509750f839e66da7f867a12cc71d9bb1650"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODMwMzEzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjozOTo0NFrOILArew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNDo0NTo1OFrOILIyeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNjM3OQ==", "bodyText": "We can move this logic to the visit of BLangMatchClause, right? We can probably get rid of the hasLastPatternInClause global variable by doing so.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548416379", "createdAt": "2020-12-24T06:39:44Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -819,24 +814,27 @@ public void visit(BLangMatchStatement matchStatement) {\n             }\n             this.resetErrorThrown();\n             analyzeNode(matchClause, env);\n-            allClausesReturns = allClausesReturns && this.matchClauseReturns;\n-            containsLastPatternInStatement =\n-                    containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n+            allClausesReturns = allClausesReturns && this.statementReturns;\n+            resetStatementReturns();\n+            this.hasLastPatternInStatement =\n+                    this.hasLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8964628cb6502ff5f91493d988fcceab68a48c37"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU0OTI0Mg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27343#discussion_r548549242", "createdAt": "2020-12-24T14:45:58Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -819,24 +814,27 @@ public void visit(BLangMatchStatement matchStatement) {\n             }\n             this.resetErrorThrown();\n             analyzeNode(matchClause, env);\n-            allClausesReturns = allClausesReturns && this.matchClauseReturns;\n-            containsLastPatternInStatement =\n-                    containsLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);\n+            allClausesReturns = allClausesReturns && this.statementReturns;\n+            resetStatementReturns();\n+            this.hasLastPatternInStatement =\n+                    this.hasLastPatternInStatement || (matchClause.matchGuard == null && this.hasLastPatternInClause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNjM3OQ=="}, "originalCommit": {"oid": "8964628cb6502ff5f91493d988fcceab68a48c37"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2862, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}