{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNzQ5Njc1", "number": 27284, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoyODo0M1rOFA95YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyODoxNlrOFLWTjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTU4NDMyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoyODo0M1rOH_g6Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNTo0NjoxN1rOIEicfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTUzNQ==", "bodyText": "\u26cf\ufe0f I think we create arrays with a capacity of 10 by default. Some times arrays can be empty. Max size can be a count of union members. There is an opportunity to save memory here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r536361535", "createdAt": "2020-12-04T20:28:43Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4666,24 +4671,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTYyOTU2Nw==", "bodyText": "The size of the array can be changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541629567", "createdAt": "2020-12-12T15:46:17Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4666,24 +4671,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTUzNQ=="}, "originalCommit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjMzMTI1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1NzoyNVrOIAXIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1NzoyNVrOIAXIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0OTkyNw==", "bodyText": "why we need any and readonly, it is same as any|error isn't it ? @KavinduZoysa @MaryamZi", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537249927", "createdAt": "2020-12-07T05:57:25Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -135,6 +135,8 @@\n     public final BTypedescType typeDesc = new BTypedescType(this.anyType, null);\n     public final BType readonlyType = new BReadonlyType(TypeTags.READONLY, null);\n     public final BType anydataOrReadonly = BUnionType.create(null, anydataType, readonlyType);\n+    public final BType anyAndReadonly = new BAnyType(TypeTags.ANY, null, new Name(\"anyAndReadonly\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjM0NjA4OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNDoxMlrOIAXQlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDozMzoyN1rOIAgKJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MTk5MA==", "bodyText": "Please create an issue to track this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537251990", "createdAt": "2020-12-07T06:04:12Z", "author": {"login": "hasithaa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -53,7 +53,8 @@ public void testArrayForeachAndTrap() {\n             \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n                     \"'int'\\\"\\\\}\\n\" +\n                     \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n+                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\",\n+            enabled = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5Nzc5Nw==", "bodyText": "Created #27361", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537397797", "createdAt": "2020-12-07T10:33:27Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -53,7 +53,8 @@ public void testArrayForeachAndTrap() {\n             \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n                     \"'int'\\\"\\\\}\\n\" +\n                     \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n+                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\",\n+            enabled = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MTk5MA=="}, "originalCommit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjQxOTA5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjozMjo0MlrOIAX3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMToyMDoxMFrOIAh-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTg0Mg==", "bodyText": "Are these asserts are running? Because test has expectedExceptionsMessageRegExp attribute.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537261842", "createdAt": "2020-12-07T06:32:42Z", "author": {"login": "hasithaa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "diffHunk": "@@ -89,22 +89,25 @@ public void testJsonArrayWithType() {\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert \" \n-                + \"'null' value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyNzY5Nw==", "bodyText": "Those are not running, therefore remove.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537427697", "createdAt": "2020-12-07T11:20:10Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "diffHunk": "@@ -89,22 +89,25 @@ public void testJsonArrayWithType() {\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert \" \n-                + \"'null' value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTg0Mg=="}, "originalCommit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjQxOTU2OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjozMjo1NlrOIAX3Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMToyMDowOFrOIAh-2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTkxMA==", "bodyText": "Same as above", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537261910", "createdAt": "2020-12-07T06:32:56Z", "author": {"login": "hasithaa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "diffHunk": "@@ -89,22 +89,25 @@ public void testJsonArrayWithType() {\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert \" \n-                + \"'null' value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +\n+                \"()' cannot be cast to 'map<json>'\\\"}\");\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert 'null'\" \n-                + \" \" +\n-                \"value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyNzY3Mw==", "bodyText": "Please check above comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537427673", "createdAt": "2020-12-07T11:20:08Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "diffHunk": "@@ -89,22 +89,25 @@ public void testJsonArrayWithType() {\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert \" \n-                + \"'null' value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +\n+                \"()' cannot be cast to 'map<json>'\\\"}\");\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert 'null'\" \n-                + \" \" +\n-                \"value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTkxMA=="}, "originalCommit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTUyOTgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTozMzo0M1rOIDp0vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo1ODoxNFrOIIcadQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwMTg4NA==", "bodyText": "Can you check if we can use ImmutableTypeCloner with anyType and retrieve the immutable type for any? That way we have only one any and any & readonly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540701884", "createdAt": "2020-12-11T05:33:43Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -134,6 +134,8 @@\n     public final BType readonlyType = new BReadonlyType(TypeTags.READONLY, null);\n     public final BType anydataOrReadonly = BUnionType.create(null, anydataType, readonlyType);\n     public final BType intStringFloatOrBoolean = BUnionType.create(null, intType, stringType, floatType, booleanType);\n+    public final BType anyAndReadonly = new BAnyType(TypeTags.ANY, null, new Name(\"anyAndReadonly\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNTA0NQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r545725045", "createdAt": "2020-12-18T09:58:14Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -134,6 +134,8 @@\n     public final BType readonlyType = new BReadonlyType(TypeTags.READONLY, null);\n     public final BType anydataOrReadonly = BUnionType.create(null, anydataType, readonlyType);\n     public final BType intStringFloatOrBoolean = BUnionType.create(null, intType, stringType, floatType, booleanType);\n+    public final BType anyAndReadonly = new BAnyType(TypeTags.ANY, null, new Name(\"anyAndReadonly\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwMTg4NA=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTU1NTg4OnYy", "diffSide": "RIGHT", "path": "tests/observability-test-utils/src/main/ballerina/Ballerina.toml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTo0NDozM1rOIDqCQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNjozMTowMlrOIEj3wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNTM0NQ==", "bodyText": "Should we be committing this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540705345", "createdAt": "2020-12-11T05:44:33Z", "author": {"login": "MaryamZi"}, "path": "tests/observability-test-utils/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -4,7 +4,7 @@ name = \"testobserve\"\n version = \"0.0.0\"\n \n [[platform.java11.dependency]]\n-path = \"../libs/observability-test-utils-2.0.0-Preview7.jar\"\n+path = \"../libs/observability-test-utils-2.0.0-Preview8-SNAPSHOT.jar\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MjkzMA==", "bodyText": "It happened mistakenly. Removed it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541652930", "createdAt": "2020-12-12T16:31:02Z", "author": {"login": "KavinduZoysa"}, "path": "tests/observability-test-utils/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -4,7 +4,7 @@ name = \"testobserve\"\n version = \"0.0.0\"\n \n [[platform.java11.dependency]]\n-path = \"../libs/observability-test-utils-2.0.0-Preview7.jar\"\n+path = \"../libs/observability-test-utils-2.0.0-Preview8-SNAPSHOT.jar\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNTM0NQ=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTU2NjU4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTo0ODo1OFrOIDqHuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwNDo0MToxMVrOIEvfMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNjc0Nw==", "bodyText": "We can use ternary expressions in such scenarios, right?\nexpectedValAsString = expected is error ? expected.toString() : expected.toString();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540706747", "createdAt": "2020-12-11T05:48:58Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "diffHunk": "@@ -218,6 +218,21 @@ function assertEquality(any|error expected, any|error actual) {\n     if expected === actual {\n         return;\n     }\n+\n+    string expectedValAsString = \"\";\n+    string actualValAsString = \"\";\n+    if (expected is error) {\n+        expectedValAsString = expected.toString();\n+    } else {\n+        expectedValAsString = expected.toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg0MzI0OA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541843248", "createdAt": "2020-12-13T04:41:11Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "diffHunk": "@@ -218,6 +218,21 @@ function assertEquality(any|error expected, any|error actual) {\n     if expected === actual {\n         return;\n     }\n+\n+    string expectedValAsString = \"\";\n+    string actualValAsString = \"\";\n+    if (expected is error) {\n+        expectedValAsString = expected.toString();\n+    } else {\n+        expectedValAsString = expected.toString();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNjc0Nw=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTczODcwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNjo1NToxM1rOIDrilg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo1ODoxN1rOIIcahg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg==", "bodyText": "Why are we disabling this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540730006", "createdAt": "2020-12-11T06:55:13Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,8 +572,9 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n+    @Test(expectedExceptions = {BLangRuntimeException.class},\n+            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\",\n+            enabled = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDc5OQ==", "bodyText": "This is the original source function which is tested here.\nfunction testGetFromNull () returns (string) {\n    json j2 = {age:43, name:null};\n    string value = <string>j2.name.fname;\n    return value;\n}\n\nWith this change, I was unable to reproduce the expected error. Therefore it is disabled. Any suggestions to refactor this test case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650799", "createdAt": "2020-12-12T16:26:58Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,8 +572,9 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n+    @Test(expectedExceptions = {BLangRuntimeException.class},\n+            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\",\n+            enabled = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwOTA5MQ==", "bodyText": "Based on the name of the test seems like we're trying to test the behaviour of field access on null, so shouldn't we change the source to something like\nfunction testGetFromNull () {\n    json j2 = {age:43, name:null};\n    json value = checkpanic j2.name.fname;\n}\nand use expectedExceptions here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r542109091", "createdAt": "2020-12-14T04:47:14Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,8 +572,9 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n+    @Test(expectedExceptions = {BLangRuntimeException.class},\n+            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\",\n+            enabled = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwOTQ2NA==", "bodyText": "Also, although not applicable here, IMO if there are tests that are no longer valid we should remove them instead of disabling them. Or it will be hard to track why something is disabled in the long term and what needs to be enabled.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r542109464", "createdAt": "2020-12-14T04:48:34Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,8 +572,9 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n+    @Test(expectedExceptions = {BLangRuntimeException.class},\n+            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\",\n+            enabled = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNTA2Mg==", "bodyText": "This example does not throw the expected exception. That test was removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r545725062", "createdAt": "2020-12-18T09:58:17Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,8 +572,9 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n+    @Test(expectedExceptions = {BLangRuntimeException.class},\n+            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\",\n+            enabled = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTc2NTc5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzowNTowOFrOIDrwpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo1ODoyMVrOIIcauA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMzYwNQ==", "bodyText": "Aren't we silently ignoring the error here? I think we should either do\nPerson2 p = checkpanic pe;\n\nor add an else block and fail there.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540733605", "createdAt": "2020-12-11T07:05:08Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -486,25 +500,28 @@ function testCloneWithTypeJsonRec1() {\n     json|error ss = p.cloneWithType(json);\n     assert(ss is json, true);\n \n-    json j = <json> ss;\n-    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    if (ss is json) {\n+        assert(ss.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    }\n }\n \n function testCloneWithTypeJsonRec2() {\n    json pj = { name : \"tom\", age: 2};\n    Person2|error pe = pj.cloneWithType(Person2);\n    assert(pe is Person2, true);\n \n-   Person2 p = <Person2> pe;\n-   assert(p.name, \"tom\");\n-   assert(p.age, 2);\n+   if (pe is Person2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDgzMg==", "bodyText": "assert(pe is Person2, true); is there, therefore do we need to do the changes suggested above?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650832", "createdAt": "2020-12-12T16:27:02Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -486,25 +500,28 @@ function testCloneWithTypeJsonRec1() {\n     json|error ss = p.cloneWithType(json);\n     assert(ss is json, true);\n \n-    json j = <json> ss;\n-    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    if (ss is json) {\n+        assert(ss.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    }\n }\n \n function testCloneWithTypeJsonRec2() {\n    json pj = { name : \"tom\", age: 2};\n    Person2|error pe = pj.cloneWithType(Person2);\n    assert(pe is Person2, true);\n \n-   Person2 p = <Person2> pe;\n-   assert(p.name, \"tom\");\n-   assert(p.age, 2);\n+   if (pe is Person2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMzYwNQ=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1MzY1MA==", "bodyText": "Sorry, my bad, this is OK. But instead of using the type test shall we use checkpanic directly?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r542553650", "createdAt": "2020-12-14T17:08:35Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -486,25 +500,28 @@ function testCloneWithTypeJsonRec1() {\n     json|error ss = p.cloneWithType(json);\n     assert(ss is json, true);\n \n-    json j = <json> ss;\n-    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    if (ss is json) {\n+        assert(ss.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    }\n }\n \n function testCloneWithTypeJsonRec2() {\n    json pj = { name : \"tom\", age: 2};\n    Person2|error pe = pj.cloneWithType(Person2);\n    assert(pe is Person2, true);\n \n-   Person2 p = <Person2> pe;\n-   assert(p.name, \"tom\");\n-   assert(p.age, 2);\n+   if (pe is Person2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMzYwNQ=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNTExMg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r545725112", "createdAt": "2020-12-18T09:58:21Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -486,25 +500,28 @@ function testCloneWithTypeJsonRec1() {\n     json|error ss = p.cloneWithType(json);\n     assert(ss is json, true);\n \n-    json j = <json> ss;\n-    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    if (ss is json) {\n+        assert(ss.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    }\n }\n \n function testCloneWithTypeJsonRec2() {\n    json pj = { name : \"tom\", age: 2};\n    Person2|error pe = pj.cloneWithType(Person2);\n    assert(pe is Person2, true);\n \n-   Person2 p = <Person2> pe;\n-   assert(p.name, \"tom\");\n-   assert(p.age, 2);\n+   if (pe is Person2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMzYwNQ=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTgzODA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzozMDoyOFrOIDsYEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNjoyNzowNVrOIEjvmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList.add(symTable.errorType);\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>() {{ add(symTable.errorType); }};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540743697", "createdAt": "2020-12-11T07:30:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4651,7 +4651,12 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n+                checkedExpr.equivalentErrorTypeList.add(symTable.errorType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzkzMg==", "bodyText": "or even\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList.add(symTable.errorType);\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>(1) {{ add(symTable.errorType); }};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540743932", "createdAt": "2020-12-11T07:31:01Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4651,7 +4651,12 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n+                checkedExpr.equivalentErrorTypeList.add(symTable.errorType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzY5Nw=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDg0Mw==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650843", "createdAt": "2020-12-12T16:27:05Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4651,7 +4651,12 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n+                checkedExpr.equivalentErrorTypeList.add(symTable.errorType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzY5Nw=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTg1NTg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzozNjoxNlrOIDshvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNjoyNzowOVrOIEjvuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0NjE3Mg==", "bodyText": "Can't we call these\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<BType> errorAssignableTypes = new ArrayList<>();\n          \n          \n            \n                    List<BType> errorNotAssignableTypes = new ArrayList<>();\n          \n          \n            \n                    List<BType> errorTypes = new ArrayList<>();\n          \n          \n            \n                    List<BType> nonErrorTypes = new ArrayList<>();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540746172", "createdAt": "2020-12-11T07:36:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDg3NQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650875", "createdAt": "2020-12-12T16:27:09Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0NjE3Mg=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTg2MTY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzozNzo1OVrOIDskzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNjoyNzoxMFrOIEjvxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0Njk1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (types.isAssignable(memberType, symTable.errorType)) {\n          \n          \n            \n                            errorAssignableTypes.add(memberType);\n          \n          \n            \n                        } else {\n          \n          \n            \n                            errorNotAssignableTypes.add(memberType);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (types.isAssignable(memberType, symTable.errorType)) {\n          \n          \n            \n                            errorAssignableTypes.add(memberType);\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        errorNotAssignableTypes.add(memberType);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540746958", "createdAt": "2020-12-11T07:37:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDg4Nw==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650887", "createdAt": "2020-12-12T16:27:10Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0Njk1OA=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTg3ODI0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo0MzowNlrOIDst5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNjoyNzoxM1rOIEjv4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTI4Nw==", "bodyText": "We can directly check\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n          \n          \n            \n                    if (errorAssignableTypes.isEmpty()) {\n          \n      \n    \n    \n  \n\nright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540749287", "createdAt": "2020-12-11T07:43:06Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n+        if (checkedExpr.equivalentErrorTypeList.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDkxMw==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650913", "createdAt": "2020-12-12T16:27:13Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n+        if (checkedExpr.equivalentErrorTypeList.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTI4Nw=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTg4MTMyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo0NDoxMlrOIDsvrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNjoyNzoxNlrOIEjwBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTc0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (errorNotAssignableTypes.size() == 0) {\n          \n          \n            \n                    if (errorNotAssignableTypes.isEmpty()) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540749741", "createdAt": "2020-12-11T07:44:12Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n+        if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n             checkedExpr.type = symTable.semanticError;\n             return;\n         }\n \n-        List<BType> nonErrorTypeList = resultTypeMap.get(false);\n-        if (nonErrorTypeList == null || nonErrorTypeList.size() == 0) {\n+        if (errorNotAssignableTypes.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1MDk1MQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r541650951", "createdAt": "2020-12-12T16:27:16Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n+        if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n             checkedExpr.type = symTable.semanticError;\n             return;\n         }\n \n-        List<BType> nonErrorTypeList = resultTypeMap.get(false);\n-        if (nonErrorTypeList == null || nonErrorTypeList.size() == 0) {\n+        if (errorNotAssignableTypes.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTc0MQ=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTA0OTcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxODowODo1MVrOIJGOrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDo0Nzo0NFrOIJMJlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDE1OA==", "bodyText": "Instead of introducing a TypeKind just for this, I think we can extract the name from the effectiveType of the anyAndReadonly BIntersectionType.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546410158", "createdAt": "2020-12-20T18:08:51Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -269,6 +274,10 @@ private SymbolTable(CompilerContext context) {\n         this.trueType = new BFiniteType(finiteTypeSymbol, new HashSet<>() {{\n             add(trueLiteral);\n         }});\n+        this.anyAndReadonly =\n+                ImmutableTypeCloner.getImmutableIntersectionType((SelectivelyImmutableReferenceType) this.anyType,\n+                        this.symbolTable, names);\n+        initializeType(this.anyAndReadonly, TypeKind.ANYANDREADONLY.typeName(), BUILTIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19af047db1f9f7f390a342b8d341b95b4b4d84e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwNzE1Nw==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546507157", "createdAt": "2020-12-21T04:47:44Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -269,6 +274,10 @@ private SymbolTable(CompilerContext context) {\n         this.trueType = new BFiniteType(finiteTypeSymbol, new HashSet<>() {{\n             add(trueLiteral);\n         }});\n+        this.anyAndReadonly =\n+                ImmutableTypeCloner.getImmutableIntersectionType((SelectivelyImmutableReferenceType) this.anyType,\n+                        this.symbolTable, names);\n+        initializeType(this.anyAndReadonly, TypeKind.ANYANDREADONLY.typeName(), BUILTIN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDE1OA=="}, "originalCommit": {"oid": "d19af047db1f9f7f390a342b8d341b95b4b4d84e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTA1MTQ3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxODoxMTozNVrOIJGPgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDo0Nzo1MlrOIJMJrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDM3MQ==", "bodyText": "Can't we use this where the symbol table is needed instead of getting it from the context here? This doesn't have to be a global variable anyway, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546410371", "createdAt": "2020-12-20T18:11:35Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -209,6 +213,7 @@ private SymbolTable(CompilerContext context) {\n         context.put(SYM_TABLE_KEY, this);\n \n         this.names = Names.getInstance(context);\n+        this.symbolTable = SymbolTable.getInstance(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19af047db1f9f7f390a342b8d341b95b4b4d84e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwNzE4Mw==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546507183", "createdAt": "2020-12-21T04:47:52Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -209,6 +213,7 @@ private SymbolTable(CompilerContext context) {\n         context.put(SYM_TABLE_KEY, this);\n \n         this.names = Names.getInstance(context);\n+        this.symbolTable = SymbolTable.getInstance(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDM3MQ=="}, "originalCommit": {"oid": "d19af047db1f9f7f390a342b8d341b95b4b4d84e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk4Mjk1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MTowMFrOIJNy4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzowNzoyNlrOIKCT7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDExNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (checkedExpr.equivalentErrorTypeList.isEmpty()) {\n          \n          \n            \n                    if (errorTypes.isEmpty()) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546534114", "createdAt": "2020-12-21T06:41:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4660,24 +4666,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorTypes = new ArrayList<>();\n+        List<BType> nonErrorTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorTypes.add(symTable.errorType);\n+                nonErrorTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorTypes.add(memberType);\n+                continue;\n+            }\n+            nonErrorTypes.add(memberType);\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorTypes;\n+        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5NDU0MA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r547394540", "createdAt": "2020-12-22T17:07:26Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4660,24 +4666,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorTypes = new ArrayList<>();\n+        List<BType> nonErrorTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorTypes.add(symTable.errorType);\n+                nonErrorTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorTypes.add(memberType);\n+                continue;\n+            }\n+            nonErrorTypes.add(memberType);\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorTypes;\n+        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDExNA=="}, "originalCommit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAzNjMwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowNzo1NlrOIJOQlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzowNzoyMlrOIKCTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MTcxNg==", "bodyText": "Shouldn't we set the type for the checkedExpr here? In the union path, at L4711 we seems to be calling types.checkType(checkedExpr, actualType, expType);.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546541716", "createdAt": "2020-12-21T07:07:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4647,7 +4647,13 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>(1) {{\n+                    add(symTable.errorType);\n+                }};\n+                resultType = symTable.anyAndReadonly;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5NDUxMA==", "bodyText": "The resultType will be set as expression type in here \n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n    \n    \n         Line 374\n      in\n      92f603f\n    \n    \n    \n    \n\n        \n          \n           expr.type = resultType;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r547394510", "createdAt": "2020-12-22T17:07:22Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4647,7 +4647,13 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>(1) {{\n+                    add(symTable.errorType);\n+                }};\n+                resultType = symTable.anyAndReadonly;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MTcxNg=="}, "originalCommit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjA0NDEwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.error/src/main/java/org/ballerinalang/langlib/error/ToBalString.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoxMTo0MlrOIJOU4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzowNzoyMFrOIKCTrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MjgxOQ==", "bodyText": "Have we added tests for toBalString and toString for errors?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546542819", "createdAt": "2020-12-21T07:11:42Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.error/src/main/java/org/ballerinalang/langlib/error/ToBalString.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.error;\n+\n+import io.ballerina.runtime.api.utils.StringUtils;\n+import io.ballerina.runtime.api.values.BError;\n+import io.ballerina.runtime.api.values.BString;\n+\n+/**\n+ * Returns expression style representation of the given value as a String.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ToBalString {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5NDQ3OQ==", "bodyText": "Tests related to toBalString are already there. Tests related to toString are added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r547394479", "createdAt": "2020-12-22T17:07:20Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/lang.error/src/main/java/org/ballerinalang/langlib/error/ToBalString.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.error;\n+\n+import io.ballerina.runtime.api.utils.StringUtils;\n+import io.ballerina.runtime.api.values.BError;\n+import io.ballerina.runtime.api.values.BString;\n+\n+/**\n+ * Returns expression style representation of the given value as a String.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ToBalString {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MjgxOQ=="}, "originalCommit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTE3NzkwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.stream/src/main/ballerina/internal.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1MDowOVrOINtQ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowODowM1rOINxFTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0Mzk4Ng==", "bodyText": "To preserve the previous behvaiour, shouldn't we use checkpanic here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551243986", "createdAt": "2021-01-04T10:50:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.stream/src/main/ballerina/internal.bal", "diffHunk": "@@ -35,7 +35,7 @@ class FilterSupport {\n             } else {\n                 var value = nextVal?.value;\n                 function(any|error) returns boolean func = internal:getFilterFunc(self.func);\n-                var filtered = internal:invokeAsExternal(func, value);\n+                var filtered = check internal:invokeAsExternal(func, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjU3NQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306575", "createdAt": "2021-01-04T13:08:03Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/lang.stream/src/main/ballerina/internal.bal", "diffHunk": "@@ -35,7 +35,7 @@ class FilterSupport {\n             } else {\n                 var value = nextVal?.value;\n                 function(any|error) returns boolean func = internal:getFilterFunc(self.func);\n-                var filtered = internal:invokeAsExternal(func, value);\n+                var filtered = check internal:invokeAsExternal(func, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0Mzk4Ng=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTE5OTk1OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/langlib_test_negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1NjoyNlrOINtdmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowODowMVrOINxFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NzI1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    name : \"Name\",\n          \n          \n            \n                    address : {\n          \n          \n            \n                        country : \"Country\",\n          \n          \n            \n                        city : \"City\"\n          \n          \n            \n                    }\n          \n          \n            \n                    name: \"Name\",\n          \n          \n            \n                    address: {\n          \n          \n            \n                        country: \"Country\",\n          \n          \n            \n                        city: \"City\"\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551247258", "createdAt": "2021-01-04T10:56:26Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/langlib_test_negative.bal", "diffHunk": "@@ -38,6 +38,24 @@ function testEnsureTypeWithUnion1() returns error? {\n     int|string|float[] name = check j.name;\n }\n \n+function testToStringNegative() {\n+    json j = {\n+        name : \"Name\",\n+        address : {\n+            country : \"Country\",\n+            city : \"City\"\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjU2MA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306560", "createdAt": "2021-01-04T13:08:01Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/langlib_test_negative.bal", "diffHunk": "@@ -38,6 +38,24 @@ function testEnsureTypeWithUnion1() returns error? {\n     int|string|float[] name = check j.name;\n }\n \n+function testToStringNegative() {\n+    json j = {\n+        name : \"Name\",\n+        address : {\n+            country : \"Country\",\n+            city : \"City\"\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NzI1OA=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI1Njc0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.query/src/main/ballerina/helpers.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxNDo0M1rOINt-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowNzo1OVrOINxFLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NTU5Mw==", "bodyText": "Here again, to preserve the previous behaviour, we need to use checkpanic? Please check other changes too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551255593", "createdAt": "2021-01-04T11:14:43Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.query/src/main/ballerina/helpers.bal", "diffHunk": "@@ -126,7 +126,7 @@ function toString(stream<Type, error?> strm) returns string {\n function addToTable(stream<Type, error?> strm, table<map<Type>> tbl, error? err) returns table<map<Type>>|error {\n     record {| Type value; |}|error? v = strm.next();\n     while (v is record {| Type value; |}) {\n-        error? e = trap tbl.add(<map<Type>> v.value);\n+        error? e = trap tbl.add(<map<Type>> check v.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjU0Mw==", "bodyText": "Fixed and checked the other places too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306543", "createdAt": "2021-01-04T13:07:59Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/lang.query/src/main/ballerina/helpers.bal", "diffHunk": "@@ -126,7 +126,7 @@ function toString(stream<Type, error?> strm) returns string {\n function addToTable(stream<Type, error?> strm, table<map<Type>> tbl, error? err) returns table<map<Type>>|error {\n     record {| Type value; |}|error? v = strm.next();\n     while (v is record {| Type value; |}) {\n-        error? e = trap tbl.add(<map<Type>> v.value);\n+        error? e = trap tbl.add(<map<Type>> check v.value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NTU5Mw=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI2MjMxOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/langlib_test_negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxNjoxOFrOINuBQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowNzo1N1rOINxFJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjM4NQ==", "bodyText": "Do we have negative tests for toBalString?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551256385", "createdAt": "2021-01-04T11:16:18Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/langlib_test_negative.bal", "diffHunk": "@@ -38,6 +38,24 @@ function testEnsureTypeWithUnion1() returns error? {\n     int|string|float[] name = check j.name;\n }\n \n+function testToStringNegative() {\n+    json j = {\n+        name : \"Name\",\n+        address : {\n+            country : \"Country\",\n+            city : \"City\"\n+        }\n+    };\n+\n+    var x1 = j.age.toString();\n+    var x2 = j.address.town.toString();\n+    var x3 = foo().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjUzMg==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306532", "createdAt": "2021-01-04T13:07:57Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/langlib_test_negative.bal", "diffHunk": "@@ -38,6 +38,24 @@ function testEnsureTypeWithUnion1() returns error? {\n     int|string|float[] name = check j.name;\n }\n \n+function testToStringNegative() {\n+    json j = {\n+        name : \"Name\",\n+        address : {\n+            country : \"Country\",\n+            city : \"City\"\n+        }\n+    };\n+\n+    var x1 = j.age.toString();\n+    var x2 = j.address.town.toString();\n+    var x3 = foo().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjM4NQ=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI2NzkxOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibValueTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxNzo1OFrOINuEQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowNzo1NVrOINxFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NzE1Mw==", "bodyText": "Shall we move these assertion to the bal file? Let's move the first 4 assertions in this method too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551257153", "createdAt": "2021-01-04T11:17:58Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibValueTest.java", "diffHunk": "@@ -172,6 +172,10 @@ public void testToString() {\n         assertEquals(array.getRefValue(1).stringValue(), \"4\");\n         assertEquals(array.getRefValue(2).stringValue(), \"4\");\n         assertEquals(array.getRefValue(3).stringValue(), \"4\");\n+        assertEquals(array.getRefValue(4).stringValue(), \"error(\\\"Failed to get account balance\\\",details=true,\" +\n+                \"val1=NaN,val2=\\\"This Error\\\",val3={\\\"x\\\":\\\"AA\\\",\\\"y\\\":Infinity})\");\n+        assertEquals(array.getRefValue(5).stringValue(), \"error FirstError (\\\"Reason1\\\",message=\\\"Test passing error \" +\n+                \"union to a function\\\")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjUxMw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306513", "createdAt": "2021-01-04T13:07:55Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibValueTest.java", "diffHunk": "@@ -172,6 +172,10 @@ public void testToString() {\n         assertEquals(array.getRefValue(1).stringValue(), \"4\");\n         assertEquals(array.getRefValue(2).stringValue(), \"4\");\n         assertEquals(array.getRefValue(3).stringValue(), \"4\");\n+        assertEquals(array.getRefValue(4).stringValue(), \"error(\\\"Failed to get account balance\\\",details=true,\" +\n+                \"val1=NaN,val2=\\\"This Error\\\",val3={\\\"x\\\":\\\"AA\\\",\\\"y\\\":Infinity})\");\n+        assertEquals(array.getRefValue(5).stringValue(), \"error FirstError (\\\"Reason1\\\",message=\\\"Test passing error \" +\n+                \"union to a function\\\")\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NzE1Mw=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI4MDUyOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach_error_handling.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyMjowMVrOINuLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowNzo1M1rOINxFBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1ODk3Nw==", "bodyText": "I think we can directly assert if result is 14 here, instead of returning -1 just to cause the Java assertion to fail.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551258977", "createdAt": "2021-01-04T11:22:01Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach_error_handling.bal", "diffHunk": "@@ -24,31 +24,28 @@ function testArrayForeachAndTrap() returns int {\n     string[] validArray = [\"2\", \"5\", \"7\"];\n     result = trap convertAndGetSumFromArray(validArray);\n     assertTrue(result is int);\n-    return <int>result;\n-}\n-\n-function testArrayForeachAndPanic() {\n-    string[] invalidArray = [\"2\", \"waruna\", \"7\"];\n-    int result = convertAndGetSumFromArray(invalidArray);\n-    // This line should not be executed.\n-    panic error(ASSERTION_ERROR_REASON,\n-                message = \"Program should be panic before this line\");\n+    if (result is int) {\n+        return result;\n+    }\n+    return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjUwMA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306500", "createdAt": "2021-01-04T13:07:53Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach_error_handling.bal", "diffHunk": "@@ -24,31 +24,28 @@ function testArrayForeachAndTrap() returns int {\n     string[] validArray = [\"2\", \"5\", \"7\"];\n     result = trap convertAndGetSumFromArray(validArray);\n     assertTrue(result is int);\n-    return <int>result;\n-}\n-\n-function testArrayForeachAndPanic() {\n-    string[] invalidArray = [\"2\", \"waruna\", \"7\"];\n-    int result = convertAndGetSumFromArray(invalidArray);\n-    // This line should not be executed.\n-    panic error(ASSERTION_ERROR_REASON,\n-                message = \"Program should be panic before this line\");\n+    if (result is int) {\n+        return result;\n+    }\n+    return -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1ODk3Nw=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI4MzYyOnYy", "diffSide": "LEFT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyMzoxMlrOINuNXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNToxNDo0N1rOIOKXyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTQ4NA==", "bodyText": "Why are we removing this test? We can still have the same test and change the expected exception message to reflect the new error, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551259484", "createdAt": "2021-01-04T11:23:12Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -48,13 +47,4 @@ public void testArrayForeachAndTrap() {\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(((BInteger) returns[0]).intValue(), 14);\n     }\n-\n-    @Test(expectedExceptions = BLangRuntimeException.class, expectedExceptionsMessageRegExp =\n-            \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n-                    \"'int'\\\"\\\\}\\n\" +\n-                    \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n-    public void testArrayForeachAndPanic() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testArrayForeachAndPanic\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjQ5MA==", "bodyText": "With this new change, we cannot reproduce the expected error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306490", "createdAt": "2021-01-04T13:07:51Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -48,13 +47,4 @@ public void testArrayForeachAndTrap() {\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(((BInteger) returns[0]).intValue(), 14);\n     }\n-\n-    @Test(expectedExceptions = BLangRuntimeException.class, expectedExceptionsMessageRegExp =\n-            \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n-                    \"'int'\\\"\\\\}\\n\" +\n-                    \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n-    public void testArrayForeachAndPanic() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testArrayForeachAndPanic\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTQ4NA=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwOTUxNQ==", "bodyText": "What this seems to be asserting is that the last line is not executed.\nWith the changes in this PR, there will still be a panic due to the invalid conversion and usage of checkpanic at \n  \n    \n      ballerina-lang/langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach_error_handling.bal\n    \n    \n         Line 33\n      in\n      9b5de12\n    \n    \n    \n    \n\n        \n          \n           int val = checkpanic ints:fromString(s); \n        \n    \n  \n\n.\nSo the last line will not be executed. We can assert that the panic is due to the invalid attempt to parse the string to an int, and thereby still assert the original behaviour, right?\nBasically, we can change the expectedExceptionsMessageRegExp to reflect the new error and still assert the same logic that was previously asserted.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551309515", "createdAt": "2021-01-04T13:14:47Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -48,13 +47,4 @@ public void testArrayForeachAndTrap() {\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(((BInteger) returns[0]).intValue(), 14);\n     }\n-\n-    @Test(expectedExceptions = BLangRuntimeException.class, expectedExceptionsMessageRegExp =\n-            \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n-                    \"'int'\\\"\\\\}\\n\" +\n-                    \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n-    public void testArrayForeachAndPanic() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testArrayForeachAndPanic\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTQ4NA=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcyMDkwNg==", "bodyText": "Added the test.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551720906", "createdAt": "2021-01-05T05:14:47Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -48,13 +47,4 @@ public void testArrayForeachAndTrap() {\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(((BInteger) returns[0]).intValue(), 14);\n     }\n-\n-    @Test(expectedExceptions = BLangRuntimeException.class, expectedExceptionsMessageRegExp =\n-            \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n-                    \"'int'\\\"\\\\}\\n\" +\n-                    \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n-    public void testArrayForeachAndPanic() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testArrayForeachAndPanic\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTQ4NA=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI5ODg3OnYy", "diffSide": "LEFT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyNzo1MFrOINuV7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzowMjo0NlrOIOMJww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTY3Ng==", "bodyText": "This too we don't need to remove, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551261676", "createdAt": "2021-01-04T11:27:50Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java", "diffHunk": "@@ -94,15 +94,6 @@ public void testJSONBoolean() {\n         Assert.assertEquals(returns[0].stringValue(), result);\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'map<json>'.*\")\n-    public void testJSONNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjQ1Mg==", "bodyText": "Same as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306452", "createdAt": "2021-01-04T13:07:43Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java", "diffHunk": "@@ -94,15 +94,6 @@ public void testJSONBoolean() {\n         Assert.assertEquals(returns[0].stringValue(), result);\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'map<json>'.*\")\n-    public void testJSONNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTY3Ng=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1MDA4Mw==", "bodyText": "We can keep this test, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551750083", "createdAt": "2021-01-05T07:02:46Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java", "diffHunk": "@@ -94,15 +94,6 @@ public void testJSONBoolean() {\n         Assert.assertEquals(returns[0].stringValue(), result);\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'map<json>'.*\")\n-    public void testJSONNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTY3Ng=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTMxNjc3OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTozMzo1MlrOINugSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowNzo0MFrOINxExQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2NDMzMQ==", "bodyText": "Why can't we do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                json|error j = jNulldata.name;\n          \n          \n            \n                json j = checkpanic jdata.random;\n          \n      \n    \n    \n  \n\nhere too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551264331", "createdAt": "2021-01-04T11:33:52Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "diffHunk": "@@ -113,25 +117,29 @@ function testJsonArrayWithType() returns string {\n function testDirectAccessInvalidElementWithoutType() returns string|error {\n     output = \"\";\n \n-    json j =  <json>jdata.random;\n+    json|error j = jNulldata.name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjQzNw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306437", "createdAt": "2021-01-04T13:07:40Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "diffHunk": "@@ -113,25 +117,29 @@ function testJsonArrayWithType() returns string {\n function testDirectAccessInvalidElementWithoutType() returns string|error {\n     output = \"\";\n \n-    json j =  <json>jdata.random;\n+    json|error j = jNulldata.name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2NDMzMQ=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM0MzQwOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0MzowMVrOINuvwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowNzozN1rOINxErQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2ODI4OA==", "bodyText": "Can't we just do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (b is float) {\n          \n          \n            \n                    assert(b, 1234.0);\n          \n          \n            \n                }\n          \n          \n            \n                assert(checkpanic b, 1234.0);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551268288", "createdAt": "2021-01-04T11:43:01Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -576,14 +581,20 @@ function testCloneWithTypeNumeric1() {\n     int a = 1234;\n     float|error b = a.cloneWithType(float);\n     assert(b is float, true);\n-    assert(<float> b, 1234.0);\n+\n+    if (b is float) {\n+        assert(b, 1234.0);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjQxMw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551306413", "createdAt": "2021-01-04T13:07:37Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -576,14 +581,20 @@ function testCloneWithTypeNumeric1() {\n     int a = 1234;\n     float|error b = a.cloneWithType(float);\n     assert(b is float, true);\n-    assert(<float> b, 1234.0);\n+\n+    if (b is float) {\n+        assert(b, 1234.0);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2ODI4OA=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjUyMjAwOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo1ODo1NVrOIOMFQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0NDoyM1rOIOUNfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0ODkzMQ==", "bodyText": "Do we need this change? We return false at L284 if mje is an error anyway.\nI think we should leave this as is and change L287 to\njson mj = checkpanic mje;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551748931", "createdAt": "2021-01-05T06:58:55Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -267,7 +278,7 @@ function testMappingJsonNoIntersectionMergeSuccess() returns boolean {\n     json j1 = { one: \"hello\", two: \"world\", three: 1 };\n     map<json> j2 = { x: 12.0, y: \"test value\" };\n \n-    json|error mje = j1.mergeJson(j2);\n+    json mje = checkpanic j1.mergeJson(j2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MjEwOA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551882108", "createdAt": "2021-01-05T11:44:23Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -267,7 +278,7 @@ function testMappingJsonNoIntersectionMergeSuccess() returns boolean {\n     json j1 = { one: \"hello\", two: \"world\", three: 1 };\n     map<json> j2 = { x: 12.0, y: \"test value\" };\n \n-    json|error mje = j1.mergeJson(j2);\n+    json mje = checkpanic j1.mergeJson(j2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0ODkzMQ=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjUyNTI1OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzowMDoyNFrOIOMHGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0NDoyMVrOIOUNag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0OTQwMQ==", "bodyText": "Wouldn't it be better to do\n    json j = checkpanic ss;\n    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\nPlease check others too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551749401", "createdAt": "2021-01-05T07:00:24Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -486,25 +499,24 @@ function testCloneWithTypeJsonRec1() {\n     json|error ss = p.cloneWithType(json);\n     assert(ss is json, true);\n \n-    json j = <json> ss;\n-    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    if (ss is json) {\n+        assert(ss.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MjA5MA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551882090", "createdAt": "2021-01-05T11:44:21Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -486,25 +499,24 @@ function testCloneWithTypeJsonRec1() {\n     json|error ss = p.cloneWithType(json);\n     assert(ss is json, true);\n \n-    json j = <json> ss;\n-    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    if (ss is json) {\n+        assert(ss.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0OTQwMQ=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjU1ODEzOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzoxNTo0NVrOIOMaGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0NDoxOVrOIOUNXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NDI2NQ==", "bodyText": "The test has changed here, right? Previously we had jdata.random which returned error because jdata doesn't have a random field.\nWhen we do jNulldata.name, jNulldata has a name field so we are testing something else. The name of the test may also be misleading.\nShall we preserve the previous scenario? Please check for the other one using the newly introduced jNulldata variable too. We can remove that once we do so.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551754265", "createdAt": "2021-01-05T07:15:45Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "diffHunk": "@@ -113,7 +117,7 @@ function testJsonArrayWithType() returns string {\n function testDirectAccessInvalidElementWithoutType() returns string|error {\n     output = \"\";\n \n-    json j =  <json>jdata.random;\n+    json j = checkpanic jNulldata.name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MjA3OQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551882079", "createdAt": "2021-01-05T11:44:19Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "diffHunk": "@@ -113,7 +117,7 @@ function testJsonArrayWithType() returns string {\n function testDirectAccessInvalidElementWithoutType() returns string|error {\n     output = \"\";\n \n-    json j =  <json>jdata.random;\n+    json j = checkpanic jNulldata.name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NDI2NQ=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjU5NjM1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/taintchecking/propagation/lang-lib-function-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzozMzozM1rOIOMwUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0NDoxNlrOIOUNUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1OTk1Mw==", "bodyText": "Do we need the casts?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                json jp = <json> checkpanic p.cloneWithType(json);\n          \n          \n            \n                Person sameP = <Person> checkpanic jp.cloneWithType(Person);\n          \n          \n            \n                json jp = checkpanic p.cloneWithType(json);\n          \n          \n            \n                Person sameP = checkpanic jp.cloneWithType(Person);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551759953", "createdAt": "2021-01-05T07:33:33Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/taintchecking/propagation/lang-lib-function-negative.bal", "diffHunk": "@@ -28,8 +28,8 @@ function sensitiveF(@untainted Person p) {\n \n function driver() {\n     Person p = getTaintedParson();\n-    json jp = <json> p.cloneWithType(json);\n-    Person sameP = <Person> jp.cloneWithType(Person);\n+    json jp = <json> checkpanic p.cloneWithType(json);\n+    Person sameP = <Person> checkpanic jp.cloneWithType(Person);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MjA2NQ==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551882065", "createdAt": "2021-01-05T11:44:16Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/taintchecking/propagation/lang-lib-function-negative.bal", "diffHunk": "@@ -28,8 +28,8 @@ function sensitiveF(@untainted Person p) {\n \n function driver() {\n     Person p = getTaintedParson();\n-    json jp = <json> p.cloneWithType(json);\n-    Person sameP = <Person> jp.cloneWithType(Person);\n+    json jp = <json> checkpanic p.cloneWithType(json);\n+    Person sameP = <Person> checkpanic jp.cloneWithType(Person);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1OTk1Mw=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjYwNDA4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzozNjozMFrOIOM0yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0NDoxNVrOIOUNSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTA5Nw==", "bodyText": "Comment is no longer relevant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551761097", "createdAt": "2021-01-05T07:36:30Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "diffHunk": "@@ -193,7 +193,7 @@ function testRuntimeEqPublicStructs1 () returns string|error {\n     userPA uA = uFoo;\n \n     // This is a unsafe cast", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MjA1OQ==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551882059", "createdAt": "2021-01-05T11:44:15Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "diffHunk": "@@ -193,7 +193,7 @@ function testRuntimeEqPublicStructs1 () returns string|error {\n     userPA uA = uFoo;\n \n     // This is a unsafe cast", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTA5Nw=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjYwNDUxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzozNjozOVrOIOM1BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0NDoxMlrOIOUNQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTE1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                var uB  = <req2:closedUserPB> checkpanic uA.cloneWithType(req2:closedUserPB);\n          \n          \n            \n                var uB  = checkpanic uA.cloneWithType(req2:closedUserPB);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551761157", "createdAt": "2021-01-05T07:36:39Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "diffHunk": "@@ -193,7 +193,7 @@ function testRuntimeEqPublicStructs1 () returns string|error {\n     userPA uA = uFoo;\n \n     // This is a unsafe cast\n-    var uB  = <req2:closedUserPB> uA.cloneWithType(req2:closedUserPB);\n+    var uB  = <req2:closedUserPB> checkpanic uA.cloneWithType(req2:closedUserPB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MjA1MA==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551882050", "createdAt": "2021-01-05T11:44:12Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "diffHunk": "@@ -193,7 +193,7 @@ function testRuntimeEqPublicStructs1 () returns string|error {\n     userPA uA = uFoo;\n \n     // This is a unsafe cast\n-    var uB  = <req2:closedUserPB> uA.cloneWithType(req2:closedUserPB);\n+    var uB  = <req2:closedUserPB> checkpanic uA.cloneWithType(req2:closedUserPB);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTE1Nw=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjYwNTQyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzozNjo0OVrOIOM1ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0NDoxMFrOIOUNNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTI3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                var uB = <userPB> checkpanic uA.cloneWithType(userPB);\n          \n          \n            \n                var uB = checkpanic uA.cloneWithType(userPB);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551761275", "createdAt": "2021-01-05T07:36:49Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "diffHunk": "@@ -173,7 +173,7 @@ function testRuntimeEqPublicStructsInSamePackage () returns string|error {\n \n     userPA uA = uFoo;\n \n-    var uB = <userPB> uA.cloneWithType(userPB);\n+    var uB = <userPB> checkpanic uA.cloneWithType(userPB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MjAzNw==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551882037", "createdAt": "2021-01-05T11:44:10Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "diffHunk": "@@ -173,7 +173,7 @@ function testRuntimeEqPublicStructsInSamePackage () returns string|error {\n \n     userPA uA = uFoo;\n \n-    var uB = <userPB> uA.cloneWithType(userPB);\n+    var uB = <userPB> checkpanic uA.cloneWithType(userPB);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTI3NQ=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjYwODE3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/simple-query-with-defined-type.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzozODowNVrOIOM3TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0NDowOFrOIOUNKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTc0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\taddress: <Address> checkpanic m.cloneWithType(Address)\n          \n          \n            \n            \t\t\taddress: checkpanic m.cloneWithType(Address)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551761741", "createdAt": "2021-01-05T07:38:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/simple-query-with-defined-type.bal", "diffHunk": "@@ -422,7 +422,7 @@ function testQueryExprWithTypeConversion() returns Person1[]{\n \t\t\tfirstName: person.firstName,\n \t\t\tlastName: person.lastName,\n \t\t\tdeptAccess: person.deptAccess,\n-\t\t\taddress: <Address> m.cloneWithType(Address)\n+\t\t\taddress: <Address> checkpanic m.cloneWithType(Address)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MjAyNA==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551882024", "createdAt": "2021-01-05T11:44:08Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/simple-query-with-defined-type.bal", "diffHunk": "@@ -422,7 +422,7 @@ function testQueryExprWithTypeConversion() returns Person1[]{\n \t\t\tfirstName: person.firstName,\n \t\t\tlastName: person.lastName,\n \t\t\tdeptAccess: person.deptAccess,\n-\t\t\taddress: <Address> m.cloneWithType(Address)\n+\t\t\taddress: <Address> checkpanic m.cloneWithType(Address)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTc0MQ=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjYxMzE3OnYy", "diffSide": "LEFT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzo0MDowNVrOIOM6KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0Mzo0N1rOIOUMjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MjQ3Mw==", "bodyText": "We can keep this test too, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551762473", "createdAt": "2021-01-05T07:40:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,12 +572,6 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n-    public void testGetFromNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MTg3MQ==", "bodyText": "yes, added again", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551881871", "createdAt": "2021-01-05T11:43:47Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,12 +572,6 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n-    public void testGetFromNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MjQ3Mw=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjYxNzQ0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/function-nil-return.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzo0MjowNVrOIOM8yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0Mzo1MVrOIOUMqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MzE0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int x = <int> checkpanic ints:fromString(\"15\");\n          \n          \n            \n                int x = checkpanic ints:fromString(\"15\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551763144", "createdAt": "2021-01-05T07:42:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/function-nil-return.bal", "diffHunk": "@@ -127,11 +127,11 @@ function testReturningInMatch() returns string? {\n }\n \n function testReturnsDuringValidCheck() returns error? {\n-    int x = <int>ints:fromString(\"15\");\n+    int x = <int> checkpanic ints:fromString(\"15\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MTg5OA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551881898", "createdAt": "2021-01-05T11:43:51Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/function-nil-return.bal", "diffHunk": "@@ -127,11 +127,11 @@ function testReturningInMatch() returns string? {\n }\n \n function testReturnsDuringValidCheck() returns error? {\n-    int x = <int>ints:fromString(\"15\");\n+    int x = <int> checkpanic ints:fromString(\"15\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MzE0NA=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjY2ODAxOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODowMTo1N1rOIONaDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0Mzo1NVrOIOUM3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MDYzOQ==", "bodyText": "We are losing the studentOrError is Student3 assertion here, right? Why don't we just do\n    assert(studentOrError is Student3, true);\n    Student3 student = checkpanic studentOrError;\n    assert(student.name, \"Name\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551770639", "createdAt": "2021-01-05T08:01:57Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -895,9 +921,10 @@ function testFromJsonStringWithTypeRecord() {\n     string str = \"{\\\"name\\\":\\\"Name\\\",\\\"age\\\":35}\";\n     Student3|error studentOrError = str.fromJsonStringWithType(Student3);\n \n-    assert(studentOrError is Student3, true);\n-    Student3 student = <Student3> studentOrError;\n-    assert(student.name, \"Name\");\n+    if (studentOrError is Student3) {\n+        Student3 student = <Student3> studentOrError;\n+        assert(student.name, \"Name\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MTk0OA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551881948", "createdAt": "2021-01-05T11:43:55Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -895,9 +921,10 @@ function testFromJsonStringWithTypeRecord() {\n     string str = \"{\\\"name\\\":\\\"Name\\\",\\\"age\\\":35}\";\n     Student3|error studentOrError = str.fromJsonStringWithType(Student3);\n \n-    assert(studentOrError is Student3, true);\n-    Student3 student = <Student3> studentOrError;\n-    assert(student.name, \"Name\");\n+    if (studentOrError is Student3) {\n+        Student3 student = <Student3> studentOrError;\n+        assert(student.name, \"Name\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MDYzOQ=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjY2OTU5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODowMjozMlrOIONbDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0Mzo1OFrOIOUM7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MDg5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                map<anydata> movieMap = checkpanic movie.fromJsonWithType(MapOfAnyData);\n          \n          \n            \n                map<anydata> movieMap2 = <map<anydata>> movieMap;\n          \n          \n            \n                map<anydata> movieMap2 = checkpanic movie.fromJsonWithType(MapOfAnyData);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551770894", "createdAt": "2021-01-05T08:02:32Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -786,15 +812,15 @@ function testFromJsonWithTypeMap() {\n         title: \"Some\",\n         year: 2010\n     };\n-    map<anydata>|error movieMap = movie.fromJsonWithType(MapOfAnyData);\n+    map<anydata> movieMap = checkpanic movie.fromJsonWithType(MapOfAnyData);\n     map<anydata> movieMap2 = <map<anydata>> movieMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MTAwNw==", "bodyText": "Please check other changes in this file too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551771007", "createdAt": "2021-01-05T08:02:51Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -786,15 +812,15 @@ function testFromJsonWithTypeMap() {\n         title: \"Some\",\n         year: 2010\n     };\n-    map<anydata>|error movieMap = movie.fromJsonWithType(MapOfAnyData);\n+    map<anydata> movieMap = checkpanic movie.fromJsonWithType(MapOfAnyData);\n     map<anydata> movieMap2 = <map<anydata>> movieMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MDg5NA=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MTk2Nw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551881967", "createdAt": "2021-01-05T11:43:58Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -786,15 +812,15 @@ function testFromJsonWithTypeMap() {\n         title: \"Some\",\n         year: 2010\n     };\n-    map<anydata>|error movieMap = movie.fromJsonWithType(MapOfAnyData);\n+    map<anydata> movieMap = checkpanic movie.fromJsonWithType(MapOfAnyData);\n     map<anydata> movieMap2 = <map<anydata>> movieMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MDg5NA=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjY3MjQyOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODowMzozMVrOIONcoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo0NDowMVrOIOUM_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MTI5Nw==", "bodyText": "Again we are silently ignoring the error. I think we should do\n    xml x11 = checkpanic x1;\n    json|error j = x11.toJson();\n    assert(<json> j, s1);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551771297", "createdAt": "2021-01-05T08:03:31Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -762,9 +787,10 @@ function testFromJsonWithTypeXML() {\n     string s1 = \"<test>name</test>\";\n     xml|error x1 = s1.fromJsonWithType(xml);\n     assert(x1 is xml, true);\n-    xml x11 = <xml> x1;\n-    json|error j = x11.toJson();\n-    assert(<json> j, s1);\n+    if (x1 is xml) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4MTk4Mg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551881982", "createdAt": "2021-01-05T11:44:01Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -762,9 +787,10 @@ function testFromJsonWithTypeXML() {\n     string s1 = \"<test>name</test>\";\n     xml|error x1 = s1.fromJsonWithType(xml);\n     assert(x1 is xml, true);\n-    xml x11 = <xml> x1;\n-    json|error j = x11.toJson();\n-    assert(<json> j, s1);\n+    if (x1 is xml) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MTI5Nw=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDM3NDk5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxMjo0M1rOIOdbrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxMjo0M1rOIOdbrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzMzE5Ng==", "bodyText": "We can remove this, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r552033196", "createdAt": "2021-01-05T16:12:43Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "diffHunk": "@@ -10,6 +10,10 @@ json jdata = {\n     ]\n };\n \n+json jNulldata = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQzMzA1OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyNjoyMlrOIOd_Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyNjoyMlrOIOd_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0MjMzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                string[] a = checkpanic j.fromJsonWithType(StringArray);\n          \n          \n            \n                string[] a2 = <string[]> a;\n          \n          \n            \n                string[] a2 = checkpanic j.fromJsonWithType(StringArray);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r552042339", "createdAt": "2021-01-05T16:26:22Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -786,15 +795,14 @@ function testFromJsonWithTypeMap() {\n         title: \"Some\",\n         year: 2010\n     };\n-    map<anydata>|error movieMap = movie.fromJsonWithType(MapOfAnyData);\n-    map<anydata> movieMap2 = <map<anydata>> movieMap;\n-    assert(movieMap2[\"title\"], \"Some\");\n-    assert(movieMap2[\"year\"], 2010);\n+    map<anydata> movieMap = checkpanic movie.fromJsonWithType(MapOfAnyData);\n+    assert(movieMap[\"title\"], \"Some\");\n+    assert(movieMap[\"year\"], 2010);\n }\n \n function testFromJsonWithTypeStringArray() {\n     json j = [\"Hello\", \"World\"];\n-    string[]|error a = j.fromJsonWithType(StringArray);\n+    string[] a = checkpanic j.fromJsonWithType(StringArray);\n     string[] a2 = <string[]> a;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQzNTYxOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyNjo1NFrOIOeA1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyNjo1NFrOIOeA1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0MjcxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int[] arr = checkpanic j.fromJsonWithType(IntArray);\n          \n          \n            \n                int[] intArr = <int[]> arr;\n          \n          \n            \n                int[] intArr = checkpanic j.fromJsonWithType(IntArray);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r552042710", "createdAt": "2021-01-05T16:26:54Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -810,7 +818,7 @@ type IntArray int[];\n \n function testFromJsonWithTypeIntArray() {\n     json j = [1, 2];\n-    int[]|error arr = j.fromJsonWithType(IntArray);\n+    int[] arr = checkpanic j.fromJsonWithType(IntArray);\n     int[] intArr = <int[]> arr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQ0MTExOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyODoxNlrOIOeENw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyODozNFrOIOeFEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0MzU3NQ==", "bodyText": "Shall we just use movieMap and get rid of movieMap2?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r552043575", "createdAt": "2021-01-05T16:28:16Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -908,15 +916,15 @@ function testFromJsonStringWithAmbiguousType() {\n \n function testFromJsonStringWithTypeMap() {\n     string s = \"{\\\"title\\\":\\\"Some\\\",\\\"year\\\":2010}\";\n-    map<anydata>|error movieMap = s.fromJsonStringWithType(MapOfAnyData);\n+    map<anydata> movieMap = checkpanic s.fromJsonStringWithType(MapOfAnyData);\n     map<anydata> movieMap2 = <map<anydata>> movieMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "originalPosition": 329}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0Mzc5NQ==", "bodyText": "Please check other changes in this file too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r552043795", "createdAt": "2021-01-05T16:28:34Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -908,15 +916,15 @@ function testFromJsonStringWithAmbiguousType() {\n \n function testFromJsonStringWithTypeMap() {\n     string s = \"{\\\"title\\\":\\\"Some\\\",\\\"year\\\":2010}\";\n-    map<anydata>|error movieMap = s.fromJsonStringWithType(MapOfAnyData);\n+    map<anydata> movieMap = checkpanic s.fromJsonStringWithType(MapOfAnyData);\n     map<anydata> movieMap2 = <map<anydata>> movieMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0MzU3NQ=="}, "originalCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "originalPosition": 329}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2828, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}