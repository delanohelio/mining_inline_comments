{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3OTM4MzEy", "number": 22439, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNToyOTo0NVrODuNnYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNjowMTo1N1rOEDLNhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg0MTYyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNToyOTo0NVrOGAFlcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjowMzo0OVrOGAGJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NDY4OQ==", "bodyText": "We dont import * right? I think this should be caught by checkstyle", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402744689", "createdAt": "2020-04-03T05:29:45Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BType.java", "diffHunk": "@@ -25,15 +25,7 @@\n import org.wso2.ballerinalang.compiler.util.Names;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n \n-import static org.wso2.ballerinalang.compiler.util.TypeTags.BOOLEAN;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.BYTE;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.DECIMAL;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.ERROR;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.FLOAT;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.INT;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.NIL;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.STRING;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.TYPEDESC;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MzkwNA==", "bodyText": "i'll change it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402753904", "createdAt": "2020-04-03T06:03:49Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BType.java", "diffHunk": "@@ -25,15 +25,7 @@\n import org.wso2.ballerinalang.compiler.util.Names;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n \n-import static org.wso2.ballerinalang.compiler.util.TypeTags.BOOLEAN;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.BYTE;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.DECIMAL;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.ERROR;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.FLOAT;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.INT;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.NIL;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.STRING;\n-import static org.wso2.ballerinalang.compiler.util.TypeTags.TYPEDESC;\n+import static org.wso2.ballerinalang.compiler.util.TypeTags.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NDY4OQ=="}, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg0MzUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozMToyMFrOGAFmow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozMToyMFrOGAFmow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NDk5NQ==", "bodyText": "This is a typo right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402744995", "createdAt": "2020-04-03T05:31:20Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4", "diffHunk": "@@ -72,7 +72,7 @@ functionDefinitionBody\n     |   externalFunctionBody SEMICOLON\n     ;\n \n-functionDefinition\n+functionD   efinition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg0OTUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozNDo1M1rOGAFqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoyNzoxOFrOGBkg4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NTg2Nw==", "bodyText": "I think a better mesaage would be missing \u2018returns never\u2019 in the definition of function \u2018\u2019{0}\u2019\u2019. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402745867", "createdAt": "2020-04-03T05:34:53Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1121,6 +1121,9 @@ warning.usage.of.deprecated.construct=\\\n warning.non.module.qualified.error.reason=\\\n   error reason ''{0}'' is not module qualified\n \n+warning.function.does.not.return=\\\n+  This function doesn't return, hence use 'returns never' here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwMDAwMw==", "bodyText": "+adding\n\nI think it is a practice not to use short forms like \"doesn't\"\ndoes not start with a capital letter\nbeing a warning rather than an error type, the message looks a bit forceful. I believe the idea of giving a warning is maybe because the user forgot to add returns never. It can also be the case that this is not intentional. So the warning should guide the user to find the actual solution", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r404300003", "createdAt": "2020-04-06T18:27:18Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1121,6 +1121,9 @@ warning.usage.of.deprecated.construct=\\\n warning.non.module.qualified.error.reason=\\\n   error reason ''{0}'' is not module qualified\n \n+warning.function.does.not.return=\\\n+  This function doesn't return, hence use 'returns never' here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NTg2Nw=="}, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg1MzUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozNzozNlrOGAFscA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozNzozNlrOGAFscA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjQ4MA==", "bodyText": "Function don\u2019t have \u2018a\u2019 return value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402746480", "createdAt": "2020-04-03T05:37:36Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have return value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg1NTI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozODozNFrOGAFtiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozODozNFrOGAFtiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0Njc2MQ==", "bodyText": "Import of *", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402746761", "createdAt": "2020-04-03T05:38:34Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -28,31 +28,7 @@\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.BTypeSymbol;\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.SymTag;\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.Symbols;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BAnyType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BAnydataType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BErrorType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BFiniteType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BFutureType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BHandleType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BJSONType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BMapType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BNoType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BServiceType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BStreamType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BStringSubType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BTableType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BTupleType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BTypedescType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLSubType;\n-import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg3MDIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo0NzowMlrOGAF2cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo0OToxMlrOGAHE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0OTA0Mw==", "bodyText": "Seems like this is not the standard", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402749043", "createdAt": "2020-04-03T05:47:02Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaParser.g4 by ANTLR 4.5.3\n+// Generated from /home/dulaj/projects/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4 by ANTLR 4.5.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2OTEyMw==", "bodyText": "oops! I'll change it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402769123", "createdAt": "2020-04-03T06:49:12Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaParser.g4 by ANTLR 4.5.3\n+// Generated from /home/dulaj/projects/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4 by ANTLR 4.5.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0OTA0Mw=="}, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg4Nzc1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo1NTo0OFrOGAGAHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo1NTo0OFrOGAGAHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MTUxNw==", "bodyText": "Here as well \ud83d\ude0a", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r402751517", "createdAt": "2020-04-03T05:55:48Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaParser.g4 by ANTLR 4.5.3\n+// Generated from /home/dulaj/projects/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaParser.g4 by ANTLR 4.5.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93601f4e3a13c89049ca2f2f51cdd38e90e034d9"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjM4MTA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo0NToyN1rOGBNluA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzozODo1MFrOGX-97A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDQwOA==", "bodyText": "Is this only applicable for functions returning ()? I was under the impression that this applies to any function in which a panic is used. e.g.,\nfunction foo() returns string|never {\n    // some code\n    \n    if (true) {\n        panic error(\"ERROR\");\n    }\n\n    // more code\n\n    return \"foo\";\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r403924408", "createdAt": "2020-04-06T08:45:27Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1574,6 +1574,12 @@ public void visit(BLangThrow throwNode) {\n \n     public void visit(BLangPanic panicNode) {\n         this.checkStatementExecutionValidity(panicNode);\n+\n+        // Check whether the enclosed function's return type is 'nil'\n+        if (this.env.enclInvokable.returnTypeNode.type.tag == TypeTags.NIL) {\n+            dlog.warning(this.env.enclInvokable.returnTypeNode.pos, DiagnosticCode.FUNCTION_DOES_NOT_RETURN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c17d3025a5c0fc033ee22346e7697ecef0a71b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDU4MQ==", "bodyText": "@hasithaa thoughts?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r403924581", "createdAt": "2020-04-06T08:45:46Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1574,6 +1574,12 @@ public void visit(BLangThrow throwNode) {\n \n     public void visit(BLangPanic panicNode) {\n         this.checkStatementExecutionValidity(panicNode);\n+\n+        // Check whether the enclosed function's return type is 'nil'\n+        if (this.env.enclInvokable.returnTypeNode.type.tag == TypeTags.NIL) {\n+            dlog.warning(this.env.enclInvokable.returnTypeNode.pos, DiagnosticCode.FUNCTION_DOES_NOT_RETURN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDQwOA=="}, "originalCommit": {"oid": "b1c17d3025a5c0fc033ee22346e7697ecef0a71b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwMjA5Mg==", "bodyText": "Removed this part as discussed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427802092", "createdAt": "2020-05-20T07:38:50Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1574,6 +1574,12 @@ public void visit(BLangThrow throwNode) {\n \n     public void visit(BLangPanic panicNode) {\n         this.checkStatementExecutionValidity(panicNode);\n+\n+        // Check whether the enclosed function's return type is 'nil'\n+        if (this.env.enclInvokable.returnTypeNode.type.tag == TypeTags.NIL) {\n+            dlog.warning(this.env.enclInvokable.returnTypeNode.pos, DiagnosticCode.FUNCTION_DOES_NOT_RETURN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDQwOA=="}, "originalCommit": {"oid": "b1c17d3025a5c0fc033ee22346e7697ecef0a71b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTIxNTA1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMTozNzowNlrOGYHZ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzowMjowNFrOGYoaRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MDMyMw==", "bodyText": "Not used anymore.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427940323", "createdAt": "2020-05-20T11:37:06Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -356,6 +356,10 @@\n     USAGE_OF_DEPRECATED_CONSTRUCT(\"usage.of.deprecated.construct\"),\n     OPERATOR_NOT_SUPPORTED(\"operator.not.supported\"),\n     OPERATOR_NOT_ALLOWED_VARIABLE(\"operator.not.allowed.variable\"),\n+    FUNCTION_DOES_NOT_RETURN(\"function.does.not.return\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MTA5NA==", "bodyText": "Ack", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428481094", "createdAt": "2020-05-21T07:02:04Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -356,6 +356,10 @@\n     USAGE_OF_DEPRECATED_CONSTRUCT(\"usage.of.deprecated.construct\"),\n     OPERATOR_NOT_SUPPORTED(\"operator.not.supported\"),\n     OPERATOR_NOT_ALLOWED_VARIABLE(\"operator.not.allowed.variable\"),\n+    FUNCTION_DOES_NOT_RETURN(\"function.does.not.return\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MDMyMw=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTIyNzIzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMTo0MToxN1rOGYHhzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDozODo1N1rOGYPGlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MjM1MA==", "bodyText": "commented code", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427942350", "createdAt": "2020-05-20T11:41:17Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2432,6 +2433,15 @@ private void validateDefaultable(BLangRecordTypeNode recordTypeNode) {\n         }\n     }\n \n+    private void validateOptionalNeverTypedField(BLangRecordTypeNode recordTypeNode) {\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.type.tag == TypeTags.NEVER && !field.flagSet.contains(Flag.OPTIONAL)) {\n+                dlog.error(field.pos, DiagnosticCode.NEVER_TYPE_NOT_ALLOWED_FOR_REQUIRED_FIELDS, field.name.value);\n+//            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2NjQ1NA==", "bodyText": "Ack", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428066454", "createdAt": "2020-05-20T14:38:57Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2432,6 +2433,15 @@ private void validateDefaultable(BLangRecordTypeNode recordTypeNode) {\n         }\n     }\n \n+    private void validateOptionalNeverTypedField(BLangRecordTypeNode recordTypeNode) {\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.type.tag == TypeTags.NEVER && !field.flagSet.contains(Flag.OPTIONAL)) {\n+                dlog.error(field.pos, DiagnosticCode.NEVER_TYPE_NOT_ALLOWED_FOR_REQUIRED_FIELDS, field.name.value);\n+//            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MjM1MA=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTIzMzc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMTo0MzoyNFrOGYHl8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzowODozMFrOGYoi0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzQwOQ==", "bodyText": "Do we need else here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427943409", "createdAt": "2020-05-20T11:43:24Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1037,6 +1037,10 @@ public void visit(BLangSimpleVariable varNode) {\n             symbol.params = tsymbol.params;\n             symbol.restParam = tsymbol.restParam;\n             symbol.retType = tsymbol.returnType;\n+        } else if (varSymbol.type.tag == TypeTags.NEVER && ((env.scope.owner.tag & SymTag.RECORD) != SymTag.RECORD)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2NTQ5Mw==", "bodyText": "This is to check if the variable is defined as a never-type and is not a field of a record", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428065493", "createdAt": "2020-05-20T14:37:47Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1037,6 +1037,10 @@ public void visit(BLangSimpleVariable varNode) {\n             symbol.params = tsymbol.params;\n             symbol.restParam = tsymbol.restParam;\n             symbol.retType = tsymbol.returnType;\n+        } else if (varSymbol.type.tag == TypeTags.NEVER && ((env.scope.owner.tag & SymTag.RECORD) != SymTag.RECORD)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzQwOQ=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5NTI4Ng==", "bodyText": "it can be a separate if block right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428095286", "createdAt": "2020-05-20T15:15:35Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1037,6 +1037,10 @@ public void visit(BLangSimpleVariable varNode) {\n             symbol.params = tsymbol.params;\n             symbol.restParam = tsymbol.restParam;\n             symbol.retType = tsymbol.returnType;\n+        } else if (varSymbol.type.tag == TypeTags.NEVER && ((env.scope.owner.tag & SymTag.RECORD) != SymTag.RECORD)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzQwOQ=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MzI4Mg==", "bodyText": "Yeah. Thanks", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428483282", "createdAt": "2020-05-21T07:08:30Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1037,6 +1037,10 @@ public void visit(BLangSimpleVariable varNode) {\n             symbol.params = tsymbol.params;\n             symbol.restParam = tsymbol.restParam;\n             symbol.retType = tsymbol.returnType;\n+        } else if (varSymbol.type.tag == TypeTags.NEVER && ((env.scope.owner.tag & SymTag.RECORD) != SymTag.RECORD)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzQwOQ=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTMzOTgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxNTozNVrOGYIoSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODozNzowNVrOGbrONw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDM5Mw==", "bodyText": "do we need to override this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427960393", "createdAt": "2020-05-20T12:15:35Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {\n+\n+    public BNeverType() {\n+        super(TypeTags.NEVER);\n+    }\n+\n+    @Override\n+    public boolean isNullable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDI1Mg==", "bodyText": "Never return typed functions doesn't return anything. So we need to pass true for isNullable(). Don't we ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431474252", "createdAt": "2020-05-27T22:17:01Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {\n+\n+    public BNeverType() {\n+        super(TypeTags.NEVER);\n+    }\n+\n+    @Override\n+    public boolean isNullable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDM5Mw=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMjQwOA==", "bodyText": "Yes, this is needed now, as we extend BType", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431602408", "createdAt": "2020-05-28T06:11:32Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {\n+\n+    public BNeverType() {\n+        super(TypeTags.NEVER);\n+    }\n+\n+    @Override\n+    public boolean isNullable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDM5Mw=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3Mjg4Nw==", "bodyText": "Thanks", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431672887", "createdAt": "2020-05-28T08:37:05Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {\n+\n+    public BNeverType() {\n+        super(TypeTags.NEVER);\n+    }\n+\n+    @Override\n+    public boolean isNullable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDM5Mw=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTM1NDg1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxOToyOFrOGYIxzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjowNjoxNFrOGbe1Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjgzMQ==", "bodyText": "Don't think this is a good idea. Now we can create BNilType with any type of tag.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427962831", "createdAt": "2020-05-20T12:19:28Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java", "diffHunk": "@@ -35,6 +35,10 @@ public BNilType() {\n         super(TypeTags.NIL, null, Flags.READONLY);\n     }\n \n+    protected BNilType(int tag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2Mjg0NQ==", "bodyText": "But It is a protected constructor. So only accessible by the classes within the package or sub classes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428062845", "createdAt": "2020-05-20T14:34:20Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java", "diffHunk": "@@ -35,6 +35,10 @@ public BNilType() {\n         super(TypeTags.NIL, null, Flags.READONLY);\n     }\n \n+    protected BNilType(int tag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjgzMQ=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwNDUyNA==", "bodyText": "okay", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428504524", "createdAt": "2020-05-21T08:00:18Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java", "diffHunk": "@@ -35,6 +35,10 @@ public BNilType() {\n         super(TypeTags.NIL, null, Flags.READONLY);\n     }\n \n+    protected BNilType(int tag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjgzMQ=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTg5MA==", "bodyText": "Resolved", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431469890", "createdAt": "2020-05-27T22:06:14Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNilType.java", "diffHunk": "@@ -35,6 +35,10 @@ public BNilType() {\n         super(TypeTags.NIL, null, Flags.READONLY);\n     }\n \n+    protected BNilType(int tag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjgzMQ=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTM1NzcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoyMDowOFrOGYIzdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo1Nzo1NlrOGben7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg==", "bodyText": "Maybe we need to extend NullType not exactly the BNilType", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427963252", "createdAt": "2020-05-20T12:20:08Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NTkxNQ==", "bodyText": "Never is a subtype of null. So, shouldn't it be extends BNilType implements NeverType?\n\nHere I have ignored NeverType interface. I'll add it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428055915", "createdAt": "2020-05-20T14:25:20Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2MzI0OA==", "bodyText": "I believe subtyping rules are defined in assignability rules. I don't think we need to map subtyping between never and nil in a class hierarchy when we model. If we don't extend BNilType we don't have to create an extra constructor for BNilType. I don't think we need a NeverType interface too. Only if in future we need to implement the behaviour of a NeverType to another type. Check with others as well.\nThis is my personal opinion:\nIf never is a subtype of nil, the shape of the never type should be smaller than nil. Extending nil model does not agree with that. nil has a value but never cannot have a value. I also believe when we create a class it should only have minimum things to help behave like self. Any other extra things just increase the class size without any value addition. For two functions with never return type, we need to create two objects of these during compilation. Isn't it better if it is as small as possible?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428163248", "createdAt": "2020-05-20T16:51:43Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4ODA2OA==", "bodyText": "@hasithaa  @pubudu91 @MaryamZi Any thoughts ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428488068", "createdAt": "2020-05-21T07:21:08Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2NjQ3OA==", "bodyText": "Resolved", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431466478", "createdAt": "2020-05-27T21:57:56Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * {@code BNeverType} represents the singleton type when functions don't have a return value.\n+ * The value of the {@code BNeverType} is written as 'never'\n+ *\n+ * @since 1.2.3\n+ */\n+\n+public class BNeverType extends BNilType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzI1Mg=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTM4NjQ5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/testng.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoyNjozNFrOGYJEig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDowNjozMVrOGYNhig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2NzYyNg==", "bodyText": "are the changes in this file belong to this PR?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427967626", "createdAt": "2020-05-20T12:26:34Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/testng.xml", "diffHunk": "@@ -20,7 +20,7 @@\n \n <!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n \n-<suite name=\"ballerina-root-test-suite\" time-out=\"120000\">\n+<suite name=\"ballerina-test-suite\" time-out=\"120000\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MDU4Ng==", "bodyText": "Ack. Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428040586", "createdAt": "2020-05-20T14:06:31Z", "author": {"login": "dulajdilshan"}, "path": "tests/jballerina-unit-test/src/test/resources/testng.xml", "diffHunk": "@@ -20,7 +20,7 @@\n \n <!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n \n-<suite name=\"ballerina-root-test-suite\" time-out=\"120000\">\n+<suite name=\"ballerina-test-suite\" time-out=\"120000\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2NzYyNg=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTQwMTY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/TypeTags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoyOTo1NVrOGYJNZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTowNTowOVrOGbdGfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2OTg5NA==", "bodyText": "Do we need to add this here? Maybe we need this only in the early stages of compilation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r427969894", "createdAt": "2020-05-20T12:29:55Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/TypeTags.java", "diffHunk": "@@ -116,6 +117,7 @@ public static boolean isXMLTypeTag(int tag) {\n             case XML_PI:\n             case XML_COMMENT:\n             case XML_TEXT:\n+            case NEVER:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MTUzNA==", "bodyText": "Reverted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431441534", "createdAt": "2020-05-27T21:05:09Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/TypeTags.java", "diffHunk": "@@ -116,6 +117,7 @@ public static boolean isXMLTypeTag(int tag) {\n             case XML_PI:\n             case XML_COMMENT:\n             case XML_TEXT:\n+            case NEVER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2OTg5NA=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODkxNDM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowNDo0M1rOGYrp0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjozMjozMVrOGbfdRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNDIyNQ==", "bodyText": "Instead of handling this here, I think it'd be better to add this logic to the API for creating unions in BUnionType itself. That way, this behaviour will be guaranteed for any union created, not just the ones created through the resolver.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r428534225", "createdAt": "2020-05-21T09:04:43Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -884,6 +884,7 @@ public void visit(BLangUnionTypeNode unionTypeNode) {\n                         memBType.tag == TypeTags.UNION && !Symbols.isFlagOn(memBType.tsymbol.flags, Flags.TYPE_PARAM) ?\n                                 ((BUnionType) memBType).getMemberTypes().stream() :\n                                 Stream.of(memBType))\n+                .filter(memBType -> memBType.tag != TypeTags.NEVER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4MDEzNQ==", "bodyText": "Ack", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431480135", "createdAt": "2020-05-27T22:32:31Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -884,6 +884,7 @@ public void visit(BLangUnionTypeNode unionTypeNode) {\n                         memBType.tag == TypeTags.UNION && !Symbols.isFlagOn(memBType.tsymbol.flags, Flags.TYPE_PARAM) ?\n                                 ((BUnionType) memBType).getMemberTypes().stream() :\n                                 Stream.of(memBType))\n+                .filter(memBType -> memBType.tag != TypeTags.NEVER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNDIyNQ=="}, "originalCommit": {"oid": "71666a482e64c84a11327c3061c3c1aec1dbc794"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTgyMjA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo0MTozNFrOGanBng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoyMDo0MFrOGbfLqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1NTU1MA==", "bodyText": "Can we remove this warning.function.does.not.return", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r430555550", "createdAt": "2020-05-26T16:41:34Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1184,6 +1190,12 @@ warning.usage.of.deprecated.construct=\\\n warning.non.module.qualified.error.reason=\\\n   error reason ''{0}'' is not module qualified\n \n+warning.function.does.not.return=\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59443d88532062994421ad20048e283ba7ef8f37"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NTYyNA==", "bodyText": "sure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431475624", "createdAt": "2020-05-27T22:20:40Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1184,6 +1190,12 @@ warning.usage.of.deprecated.construct=\\\n warning.non.module.qualified.error.reason=\\\n   error reason ''{0}'' is not module qualified\n \n+warning.function.does.not.return=\\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1NTU1MA=="}, "originalCommit": {"oid": "59443d88532062994421ad20048e283ba7ef8f37"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODYyMzY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODoxOToyOVrOGbqkqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODozNzo1NVrOGbrQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MjI0OA==", "bodyText": "Not exactly related to this PR. But can you convert the stream API usages in this class to loops as well? Should be straight forward with IntelliJ", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431662248", "createdAt": "2020-05-28T08:19:29Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java", "diffHunk": "@@ -108,7 +108,9 @@ public void setNullable(boolean nullable) {\n      * @return The created union type.\n      */\n     public static BUnionType create(BTypeSymbol tsymbol, LinkedHashSet<BType> types) {\n-        LinkedHashSet<BType> memberTypes = toFlatTypeSet(types);\n+        LinkedHashSet<BType> memberTypes = toFlatTypeSet(types).stream()\n+                .filter(memBType -> memBType.tag != TypeTags.NEVER)\n+                .collect(Collectors.toCollection(LinkedHashSet::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127052ad0ceb55a1ea4b561af8a8bf19d25424e5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3MzQ0MA==", "bodyText": "Will do", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r431673440", "createdAt": "2020-05-28T08:37:55Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java", "diffHunk": "@@ -108,7 +108,9 @@ public void setNullable(boolean nullable) {\n      * @return The created union type.\n      */\n     public static BUnionType create(BTypeSymbol tsymbol, LinkedHashSet<BType> types) {\n-        LinkedHashSet<BType> memberTypes = toFlatTypeSet(types);\n+        LinkedHashSet<BType> memberTypes = toFlatTypeSet(types).stream()\n+                .filter(memBType -> memBType.tag != TypeTags.NEVER)\n+                .collect(Collectors.toCollection(LinkedHashSet::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MjI0OA=="}, "originalCommit": {"oid": "127052ad0ceb55a1ea4b561af8a8bf19d25424e5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njk1ODQ3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxOToyOTo1N1rOGc6y9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzowMDozOFrOGdAqIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3NjYyOQ==", "bodyText": "Let's update this version number across all new files", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r432976629", "createdAt": "2020-05-31T19:29:57Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jvm.types;\n+\n+/**\n+ * {@code BNeverType} represents the type of a {@code Never}.\n+ *\n+ * @since 1.3.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3MjY3NA==", "bodyText": "ack", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433072674", "createdAt": "2020-06-01T07:00:38Z", "author": {"login": "dulajdilshan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jvm.types;\n+\n+/**\n+ * {@code BNeverType} represents the type of a {@code Never}.\n+ *\n+ * @since 1.3.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3NjYyOQ=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njk5MTk5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMDoyNTo1MlrOGc7EDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzowODozNFrOGdA0Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4MTAwNw==", "bodyText": "Shall we add tests for the following scenarios as well?\n\nIn a function with a never return type,\n\nexplicitly return ()\nexplicitly return some other value (say, a string)\n\n\nReferencing a type with a never field.\n\npublic function main() {\n    Employee e = {name: \"John\", age: 20, role: \"SE\"};\n    io:println(e);\n}\n\ntype Person record {|\n    string name;\n    never age?;\n|};\n\ntype Employee record {|\n    string role;\n    *Person;\n|};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r432981007", "createdAt": "2020-05-31T20:25:52Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type-negative.bal", "diffHunk": "@@ -0,0 +1,41 @@\n+function testNeverTypedVariable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTI5OQ==", "bodyText": "Ack", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433075299", "createdAt": "2020-06-01T07:08:34Z", "author": {"login": "dulajdilshan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type-negative.bal", "diffHunk": "@@ -0,0 +1,41 @@\n+function testNeverTypedVariable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4MTAwNw=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzAwNjM4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMDo0ODoxNFrOGc7LMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzowODo0M1rOGdA0mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4MjgzMg==", "bodyText": "Shall we add a test case for the following as well:\n\nA table shape satisfies a key-constraint key if and and only if its set of key value shapes are a subset of K. The shape of a keyless table satisfies the key-constraint key<never>.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r432982832", "createdAt": "2020-05-31T20:48:14Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type.bal", "diffHunk": "@@ -0,0 +1,71 @@\n+import ballerina/lang.'xml;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTM1Mg==", "bodyText": "Ack", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433075352", "createdAt": "2020-06-01T07:08:43Z", "author": {"login": "dulajdilshan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type.bal", "diffHunk": "@@ -0,0 +1,71 @@\n+import ballerina/lang.'xml;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4MjgzMg=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzAxNzg1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMTowNzoxOFrOGc7Q9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxOTo0MlrOGdBC8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NDMwOA==", "bodyText": "This semantic rule about only optional fields being allowed to be never type fields is not included in the spec right? It's something we discussed? If so, will have to bring this up with James and add it to the spec", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r432984308", "createdAt": "2020-05-31T21:07:18Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2432,6 +2433,15 @@ private void validateDefaultable(BLangRecordTypeNode recordTypeNode) {\n         }\n     }\n \n+    private void validateOptionalNeverTypedField(BLangRecordTypeNode recordTypeNode) {\n+        // Never type is only allowed in an optional field in a record\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.type.tag == TypeTags.NEVER && !field.flagSet.contains(Flag.OPTIONAL)) {\n+                dlog.error(field.pos, DiagnosticCode.NEVER_TYPE_NOT_ALLOWED_FOR_REQUIRED_FIELDS, field.name.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTE1OA==", "bodyText": "We discussed about it . But, it is not included in the spec.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433075158", "createdAt": "2020-06-01T07:08:07Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2432,6 +2433,15 @@ private void validateDefaultable(BLangRecordTypeNode recordTypeNode) {\n         }\n     }\n \n+    private void validateOptionalNeverTypedField(BLangRecordTypeNode recordTypeNode) {\n+        // Never type is only allowed in an optional field in a record\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.type.tag == TypeTags.NEVER && !field.flagSet.contains(Flag.OPTIONAL)) {\n+                dlog.error(field.pos, DiagnosticCode.NEVER_TYPE_NOT_ALLOWED_FOR_REQUIRED_FIELDS, field.name.value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NDMwOA=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3OTAyNw==", "bodyText": "Can you put a comment in the spec issue explaining the scenario and the conclusion we came to?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433079027", "createdAt": "2020-06-01T07:19:42Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2432,6 +2433,15 @@ private void validateDefaultable(BLangRecordTypeNode recordTypeNode) {\n         }\n     }\n \n+    private void validateOptionalNeverTypedField(BLangRecordTypeNode recordTypeNode) {\n+        // Never type is only allowed in an optional field in a record\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.type.tag == TypeTags.NEVER && !field.flagSet.contains(Flag.OPTIONAL)) {\n+                dlog.error(field.pos, DiagnosticCode.NEVER_TYPE_NOT_ALLOWED_FOR_REQUIRED_FIELDS, field.name.value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NDMwOA=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzUwNTk3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type.bal", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjowNDoyNFrOGc_pnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxODo0NlrOGdBByQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1NjE1Nw==", "bodyText": "Should this be allowed if we are not allowing never x;?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433056157", "createdAt": "2020-06-01T06:04:24Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type.bal", "diffHunk": "@@ -0,0 +1,71 @@\n+import ballerina/lang.'xml;\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+//------------ Testing a function with 'never' return type ---------\n+\n+function functionWithNeverReturnType() returns never {\n+    string a = \"hello\";\n+    if (a == \"a\") {\n+        a = \"b\";\n+    } else {\n+        a = \"c\";\n+    }\n+}\n+\n+function testTypeOfNeverReturnTypedFunction() {\n+    any|error expectedFunctionType = typedesc<function () returns (never)>;\n+\n+    typedesc <any|error> actualFunctionType = typeof functionWithNeverReturnType;\n+    \n+    if (actualFunctionType is typedesc<function () returns (never)>) {\n+        return;\n+    }\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expectedFunctionType.toString() + \"', found '\" + actualFunctionType.toString () + \"'\");\n+}\n+\n+function testNeverReturnTypedFunctionCall() {\n+    functionWithNeverReturnType();\n+}\n+\n+//------------ Testing record type with 'never' field ---------\n+\n+type InclusiveRecord record {\n+    int j;\n+    never p?;\n+}; \n+\n+type ExclusiveRecord record {|\n+    int j;\n+    never p?;\n+|}; \n+\n+function testInclusiveRecord() {\n+    InclusiveRecord inclusiveRecord = {j:0, \"q\":1};\n+}\n+\n+function testExclusiveRecord() {\n+    ExclusiveRecord exclusiveRecord = {j:0};\n+}\n+\n+//------------- Testing XML<never> -----------------\n+\n+function testXMLWithNeverType() {\n+    xml<never> x = <xml<never>> 'xml:concat();  //generates an exmpty XML sequence and assign it to XML<never>\n+}\n+\n+\n+//---------------Test 'never' types with 'union-type' descriptors\n+function testNeverWithUnionType1() {\n+    string|never j;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NDUyNQ==", "bodyText": "But the spec says\n\nfor anytype T, the type T|never is the same as T.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433074525", "createdAt": "2020-06-01T07:06:20Z", "author": {"login": "dulajdilshan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type.bal", "diffHunk": "@@ -0,0 +1,71 @@\n+import ballerina/lang.'xml;\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+//------------ Testing a function with 'never' return type ---------\n+\n+function functionWithNeverReturnType() returns never {\n+    string a = \"hello\";\n+    if (a == \"a\") {\n+        a = \"b\";\n+    } else {\n+        a = \"c\";\n+    }\n+}\n+\n+function testTypeOfNeverReturnTypedFunction() {\n+    any|error expectedFunctionType = typedesc<function () returns (never)>;\n+\n+    typedesc <any|error> actualFunctionType = typeof functionWithNeverReturnType;\n+    \n+    if (actualFunctionType is typedesc<function () returns (never)>) {\n+        return;\n+    }\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expectedFunctionType.toString() + \"', found '\" + actualFunctionType.toString () + \"'\");\n+}\n+\n+function testNeverReturnTypedFunctionCall() {\n+    functionWithNeverReturnType();\n+}\n+\n+//------------ Testing record type with 'never' field ---------\n+\n+type InclusiveRecord record {\n+    int j;\n+    never p?;\n+}; \n+\n+type ExclusiveRecord record {|\n+    int j;\n+    never p?;\n+|}; \n+\n+function testInclusiveRecord() {\n+    InclusiveRecord inclusiveRecord = {j:0, \"q\":1};\n+}\n+\n+function testExclusiveRecord() {\n+    ExclusiveRecord exclusiveRecord = {j:0};\n+}\n+\n+//------------- Testing XML<never> -----------------\n+\n+function testXMLWithNeverType() {\n+    xml<never> x = <xml<never>> 'xml:concat();  //generates an exmpty XML sequence and assign it to XML<never>\n+}\n+\n+\n+//---------------Test 'never' types with 'union-type' descriptors\n+function testNeverWithUnionType1() {\n+    string|never j;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1NjE1Nw=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODYyNg==", "bodyText": "That would be useful for cases like the following:\npublic function main() {\n    int x = foo();\n}\n\nfunction foo() returns int|never {\n    return 10;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433078626", "createdAt": "2020-06-01T07:18:34Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type.bal", "diffHunk": "@@ -0,0 +1,71 @@\n+import ballerina/lang.'xml;\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+//------------ Testing a function with 'never' return type ---------\n+\n+function functionWithNeverReturnType() returns never {\n+    string a = \"hello\";\n+    if (a == \"a\") {\n+        a = \"b\";\n+    } else {\n+        a = \"c\";\n+    }\n+}\n+\n+function testTypeOfNeverReturnTypedFunction() {\n+    any|error expectedFunctionType = typedesc<function () returns (never)>;\n+\n+    typedesc <any|error> actualFunctionType = typeof functionWithNeverReturnType;\n+    \n+    if (actualFunctionType is typedesc<function () returns (never)>) {\n+        return;\n+    }\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expectedFunctionType.toString() + \"', found '\" + actualFunctionType.toString () + \"'\");\n+}\n+\n+function testNeverReturnTypedFunctionCall() {\n+    functionWithNeverReturnType();\n+}\n+\n+//------------ Testing record type with 'never' field ---------\n+\n+type InclusiveRecord record {\n+    int j;\n+    never p?;\n+}; \n+\n+type ExclusiveRecord record {|\n+    int j;\n+    never p?;\n+|}; \n+\n+function testInclusiveRecord() {\n+    InclusiveRecord inclusiveRecord = {j:0, \"q\":1};\n+}\n+\n+function testExclusiveRecord() {\n+    ExclusiveRecord exclusiveRecord = {j:0};\n+}\n+\n+//------------- Testing XML<never> -----------------\n+\n+function testXMLWithNeverType() {\n+    xml<never> x = <xml<never>> 'xml:concat();  //generates an exmpty XML sequence and assign it to XML<never>\n+}\n+\n+\n+//---------------Test 'never' types with 'union-type' descriptors\n+function testNeverWithUnionType1() {\n+    string|never j;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1NjE1Nw=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODcyOQ==", "bodyText": "let's check with the others as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433078729", "createdAt": "2020-06-01T07:18:46Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/never/never-type.bal", "diffHunk": "@@ -0,0 +1,71 @@\n+import ballerina/lang.'xml;\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+//------------ Testing a function with 'never' return type ---------\n+\n+function functionWithNeverReturnType() returns never {\n+    string a = \"hello\";\n+    if (a == \"a\") {\n+        a = \"b\";\n+    } else {\n+        a = \"c\";\n+    }\n+}\n+\n+function testTypeOfNeverReturnTypedFunction() {\n+    any|error expectedFunctionType = typedesc<function () returns (never)>;\n+\n+    typedesc <any|error> actualFunctionType = typeof functionWithNeverReturnType;\n+    \n+    if (actualFunctionType is typedesc<function () returns (never)>) {\n+        return;\n+    }\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expectedFunctionType.toString() + \"', found '\" + actualFunctionType.toString () + \"'\");\n+}\n+\n+function testNeverReturnTypedFunctionCall() {\n+    functionWithNeverReturnType();\n+}\n+\n+//------------ Testing record type with 'never' field ---------\n+\n+type InclusiveRecord record {\n+    int j;\n+    never p?;\n+}; \n+\n+type ExclusiveRecord record {|\n+    int j;\n+    never p?;\n+|}; \n+\n+function testInclusiveRecord() {\n+    InclusiveRecord inclusiveRecord = {j:0, \"q\":1};\n+}\n+\n+function testExclusiveRecord() {\n+    ExclusiveRecord exclusiveRecord = {j:0};\n+}\n+\n+//------------- Testing XML<never> -----------------\n+\n+function testXMLWithNeverType() {\n+    xml<never> x = <xml<never>> 'xml:concat();  //generates an exmpty XML sequence and assign it to XML<never>\n+}\n+\n+\n+//---------------Test 'never' types with 'union-type' descriptors\n+function testNeverWithUnionType1() {\n+    string|never j;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1NjE1Nw=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzYxODQ4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzowMjo0MlrOGdAs4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzowMjo0MlrOGdAs4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3MzM3OQ==", "bodyText": "How about something like\ninvalid invocation ''{0}()'': functions/methods returning ''never'' cannot be called in an expression context", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433073379", "createdAt": "2020-06-01T07:02:42Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1181,6 +1187,9 @@ warning.usage.of.deprecated.construct=\\\n warning.non.module.qualified.error.reason=\\\n   error reason ''{0}'' is not module qualified\n \n+error.invalid.never.return.typed.function.invocation=\\\n+  invalid invocation. function ''{0}'' returns never, hence only allowed to invoke in call statements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzYzMDg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzowODoyMFrOGdA0Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjoyNzozNlrOGdgC_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTIyNg==", "bodyText": "How about,\n''never''-typed variable definitions not allowed\n\nor\ndefining variables of type ''never'' not allowed\n\nor\nvariables of type ''never'' cannot be defined", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433075226", "createdAt": "2020-06-01T07:08:20Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -371,6 +371,12 @@ error.missing.required.record.field=\\\n error.default.values.not.allowed.for.optional.fields=\\\n   a default value specified for optional field ''{0}''\n \n+error.never.type.not.allowed.for.required.fields=\\\n+  field ''{0}'' is defined as a never-typed required field\n+\n+error.never.type.not.allowed.as.variable.type=\\\n+  variable ''{0}'' is not allowed to have type ''never''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4Njk0Mw==", "bodyText": "Seems like\n''never''-typed variable definitions not allowed\nfits better", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433586943", "createdAt": "2020-06-02T02:27:36Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -371,6 +371,12 @@ error.missing.required.record.field=\\\n error.default.values.not.allowed.for.optional.fields=\\\n   a default value specified for optional field ''{0}''\n \n+error.never.type.not.allowed.for.required.fields=\\\n+  field ''{0}'' is defined as a never-typed required field\n+\n+error.never.type.not.allowed.as.variable.type=\\\n+  variable ''{0}'' is not allowed to have type ''never''", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTIyNg=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzYzODQ2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxMjowM1rOGdA4nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzozNjozNVrOGdg-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjM4Mw==", "bodyText": "Better to define error messages so that it clearly conveys that what's being attempted is not allowed, and if possible, what to use instead.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433076383", "createdAt": "2020-06-01T07:12:03Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -371,6 +371,12 @@ error.missing.required.record.field=\\\n error.default.values.not.allowed.for.optional.fields=\\\n   a default value specified for optional field ''{0}''\n \n+error.never.type.not.allowed.for.required.fields=\\\n+  field ''{0}'' is defined as a never-typed required field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwMjExNA==", "bodyText": "How about this ?\n'never' typed required fields not allowed, define ''{0}'' as an optional field instead\nlooping @MaryamZi", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433602114", "createdAt": "2020-06-02T03:36:35Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -371,6 +371,12 @@ error.missing.required.record.field=\\\n error.default.values.not.allowed.for.optional.fields=\\\n   a default value specified for optional field ''{0}''\n \n+error.never.type.not.allowed.for.required.fields=\\\n+  field ''{0}'' is defined as a never-typed required field", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NjM4Mw=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY0NDcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNDo1NFrOGdA8bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyNjoxM1rOGePUsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzM1Nw==", "bodyText": "Should this be in the code analyzer? Not exactly a type checking logic right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433077357", "createdAt": "2020-06-01T07:14:54Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3971,6 +3971,11 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n             // This will enable, type param support, if the function is called directly.\n             this.env = SymbolEnv.createInvocationEnv(iExpr, this.env);\n         }\n+        // Log an error if the function returns never and invoked invalidly.\n+        if (funcSymbol.type.getReturnType().tag == TypeTags.NEVER &&\n+                env.node.getKind() != NodeKind.EXPRESSION_STATEMENT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MTUyMw==", "bodyText": "I will change this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434361523", "createdAt": "2020-06-03T07:26:13Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3971,6 +3971,11 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n             // This will enable, type param support, if the function is called directly.\n             this.env = SymbolEnv.createInvocationEnv(iExpr, this.env);\n         }\n+        // Log an error if the function returns never and invoked invalidly.\n+        if (funcSymbol.type.getReturnType().tag == TypeTags.NEVER &&\n+                env.node.getKind() != NodeKind.EXPRESSION_STATEMENT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzM1Nw=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY0ODY4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNjo0MVrOGdA-vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowMzozMVrOGdmg2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3Nzk1MA==", "bodyText": "No need to parameterize the name right? Since the name won't change at all", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433077950", "createdAt": "2020-06-01T07:16:41Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jvm.types;\n+\n+/**\n+ * {@code BNeverType} represents the type of a {@code Never}.\n+ *\n+ * @since 1.3.0\n+ */\n+public class BNeverType extends BNullType {\n+    /**\n+     * Create a {@code BNeverType} represents the type of a {@code Never}.\n+     *\n+     * @param typeName string name of the type\n+     * @param pkg      package path\n+     */\n+    BNeverType(String typeName, BPackage pkg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5Mjg5MA==", "bodyText": "Ack", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r433692890", "createdAt": "2020-06-02T08:03:31Z", "author": {"login": "dulajdilshan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jvm.types;\n+\n+/**\n+ * {@code BNeverType} represents the type of a {@code Never}.\n+ *\n+ * @since 1.3.0\n+ */\n+public class BNeverType extends BNullType {\n+    /**\n+     * Create a {@code BNeverType} represents the type of a {@code Never}.\n+     *\n+     * @param typeName string name of the type\n+     * @param pkg      package path\n+     */\n+    BNeverType(String typeName, BPackage pkg) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3Nzk1MA=="}, "originalCommit": {"oid": "f7915fcdaa55e54e1f36c1b3781167509169b13b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTQzMzQ4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzoyMTo1NVrOGe0eKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzoyMTo1NVrOGe0eKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MDE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!(isNeverOrNilableReturn) && !this.statementReturns) {\n          \n          \n            \n                        if (!isNeverOrNilableReturn && !this.statementReturns) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434970155", "createdAt": "2020-06-04T03:21:55Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -420,10 +420,11 @@ private void visitFunction(BLangFunction funcNode) {\n         if (funcNode.body != null) {\n             analyzeNode(funcNode.body, invokableEnv);\n \n-            boolean isNilableReturn = funcNode.symbol.type.getReturnType().isNullable();\n+            boolean isNeverOrNilableReturn = funcNode.symbol.type.getReturnType().tag == TypeTags.NEVER ||\n+                    funcNode.symbol.type.getReturnType().isNullable();\n             // If the return signature is nil-able, an implicit return will be added in Desugar.\n             // Hence this only checks for non-nil-able return signatures and uncertain return in the body.\n-            if (!isNilableReturn && !this.statementReturns) {\n+            if (!(isNeverOrNilableReturn) && !this.statementReturns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTQzNzI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzoyNDoxMFrOGe0gTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoyNzoyM1rOGe7OAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MDcwMg==", "bodyText": "We seem to be repeating the invocationExpr.symbol != null check. Can we check if it null and return if so before L2014? Then we can check the rest.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434970702", "createdAt": "2020-06-04T03:24:10Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2009,6 +2010,14 @@ public void visit(BLangInvocation invocationExpr) {\n         analyzeExprs(invocationExpr.requiredArgs);\n         analyzeExprs(invocationExpr.restArgs);\n \n+        // Log an error if the function returns never and invoked invalidly.\n+        if (invocationExpr.symbol != null &&\n+                ((BInvokableSymbol) invocationExpr.symbol).getReturnType().tag == TypeTags.NEVER &&\n+                invocationExpr.parent.getKind() != NodeKind.EXPRESSION_STATEMENT) {\n+            dlog.error(invocationExpr.pos, DiagnosticCode.INVALID_NEVER_RETURN_TYPED_FUNCTION_INVOCATION,\n+                    invocationExpr.name);\n+        }\n+\n         if ((invocationExpr.symbol != null) && invocationExpr.symbol.kind == SymbolKind.FUNCTION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MDcwNw==", "bodyText": "There was an error occurred in the integration tests due to this. I changed the behaviour", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r435080707", "createdAt": "2020-06-04T08:27:23Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2009,6 +2010,14 @@ public void visit(BLangInvocation invocationExpr) {\n         analyzeExprs(invocationExpr.requiredArgs);\n         analyzeExprs(invocationExpr.restArgs);\n \n+        // Log an error if the function returns never and invoked invalidly.\n+        if (invocationExpr.symbol != null &&\n+                ((BInvokableSymbol) invocationExpr.symbol).getReturnType().tag == TypeTags.NEVER &&\n+                invocationExpr.parent.getKind() != NodeKind.EXPRESSION_STATEMENT) {\n+            dlog.error(invocationExpr.pos, DiagnosticCode.INVALID_NEVER_RETURN_TYPED_FUNCTION_INVOCATION,\n+                    invocationExpr.name);\n+        }\n+\n         if ((invocationExpr.symbol != null) && invocationExpr.symbol.kind == SymbolKind.FUNCTION) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MDcwMg=="}, "originalCommit": {"oid": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTQ0Mzc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzoyODowOVrOGe0kIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzoyODowOVrOGe0kIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MTY4Mw==", "bodyText": "We can replace this stream too right? Formatting seems off btw.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434971683", "createdAt": "2020-06-04T03:28:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2221,14 +2221,21 @@ private boolean isAssignableToUnionType(BType source, BType target, Set<TypePair\n             targetTypes.add(target);\n         }\n \n-        return sourceTypes.stream()\n-                .allMatch(s -> (targetTypes.stream().anyMatch(t -> isAssignable(s, t, unresolvedTypes,\n-                                                                                unresolvedReadonlyTypes)))\n-                        || (s.tag == TypeTags.FINITE  && isAssignable(s, target, unresolvedTypes,\n-                                                                      unresolvedReadonlyTypes))\n-                        || (s.tag == TypeTags.XML\n-                            && isAssignableToUnionType(expandedXMLBuiltinSubtypes, target, unresolvedTypes,\n-                                                       unresolvedReadonlyTypes)));\n+        for (BType s : sourceTypes) {\n+            if (s.tag == TypeTags.NEVER) {\n+                continue;\n+            }\n+            if ((targetTypes.stream().noneMatch(t -> isAssignable(s, t, unresolvedTypes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTQ1OTM4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzozODozMlrOGe0tug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzozODozMlrOGe0tug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3NDEzOA==", "bodyText": "How about\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              'never' typed required fields not allowed, define ''{0}'' as an optional field instead\n          \n          \n            \n              a required field cannot be of type ''never'', define ''{0}'' as an optional field instead", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434974138", "createdAt": "2020-06-04T03:38:32Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -371,6 +371,12 @@ error.missing.required.record.field=\\\n error.default.values.not.allowed.for.optional.fields=\\\n   a default value specified for optional field ''{0}''\n \n+error.never.type.not.allowed.for.required.fields=\\\n+  'never' typed required fields not allowed, define ''{0}'' as an optional field instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTQ2MjE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzo0MDoyOVrOGe0vdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzo0MDoyOVrOGe0vdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3NDU4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ''never''-typed variable definitions not allowed\n          \n          \n            \n              cannot define a variable of type ''never''", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434974581", "createdAt": "2020-06-04T03:40:29Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -371,6 +371,12 @@ error.missing.required.record.field=\\\n error.default.values.not.allowed.for.optional.fields=\\\n   a default value specified for optional field ''{0}''\n \n+error.never.type.not.allowed.for.required.fields=\\\n+  'never' typed required fields not allowed, define ''{0}'' as an optional field instead\n+\n+error.never.typed.var.def.not.allowed=\\\n+  ''never''-typed variable definitions not allowed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTQ2MzUwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/never/NeverTypeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzo0MTozNlrOGe0wYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjozNTowNlrOGe3pWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3NDgxNw==", "bodyText": "The error message should've been\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"never typed required fields not allowed, define 'y' as an optional field instead\", 49, 5);\n          \n          \n            \n                            \"'never' typed required fields not allowed, define 'y' as an optional field instead\", 49, 5);\n          \n      \n    \n    \n  \n\nright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r434974817", "createdAt": "2020-06-04T03:41:36Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/never/NeverTypeTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.types.never;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class for ballerina never type.\n+ */\n+public class NeverTypeTest {\n+\n+    private CompileResult neverTypeTestResult;\n+    private CompileResult negativeCompileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        neverTypeTestResult = BCompileUtil.compile(\"test-src/types/never/never-type.bal\");\n+        negativeCompileResult = BCompileUtil.compile(\"test-src/types/never/never-type-negative.bal\");\n+    }\n+\n+    @Test(description = \"Test type of the function with 'never' return type\")\n+    public void testTypeOfNeverReturnTypedFunction() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testTypeOfNeverReturnTypedFunction\");\n+    }\n+\n+    @Test(description = \"Test calling function with 'never' return type\")\n+    public void testNeverReturnTypedFunctionCall() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverReturnTypedFunctionCall\");\n+    }\n+\n+    @Test(description = \"Test inclusive record type with 'never' typed field\")\n+    public void testInclusiveRecordTypeWithNeverTypedField() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testInclusiveRecord\");\n+    }\n+\n+    @Test(description = \"Test exclusive record type with 'never' typed field\")\n+    public void testExclusiveRecordTypeWithNeverTypedField() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testExclusiveRecord\");\n+    }\n+\n+    @Test(description = \"Test XML with 'never' type constraint\")\n+    public void testXMLWithNeverTypeConstraint() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testXMLWithNeverType\");\n+    }\n+\n+    @Test(description = \"Test union type with 'never' type: 1\")\n+    public void testNeverWithUnionType1() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithUnionType1\");\n+    }\n+\n+    @Test(description = \"Test union type with 'never' type: 2\")\n+    public void testNeverWithUnionType2() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithUnionType1\");\n+    }\n+\n+    @Test(description = \"Test union type with 'never' type: 3\")\n+    public void testNeverWithUnionType3() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithUnionType3\");\n+    }\n+\n+    @Test(description = \"Test table's key constraint with 'never' type\")\n+    public void testNeverWithKeyLessTable() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithKeyLessTable\");\n+    }\n+\n+    @Test(description = \"Test table key constraint with 'never' type\")\n+    public void testNeverInUnionTypedKeyConstraints() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverInUnionTypedKeyConstraints\");\n+    }\n+\n+    @Test(description = \"Test 'never' type as future type param\")\n+    public void testNeverAsFutureTypeParam() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverAsFutureTypeParam\");\n+    }\n+\n+    @Test(description = \"Test 'never' type as mapping type param\")\n+    public void testNeverAsMappingTypeParam() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverAsMappingTypeParam\");\n+    }\n+\n+    @Test\n+    public void testNeverTypeNegative() {\n+        Assert.assertEquals(negativeCompileResult.getErrorCount(), 19);\n+        int i = 0;\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"'never'-typed variable definitions not allowed\", 2, 5);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"'never'-typed variable definitions not allowed\", 12, 5);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected '()', found 'never'\", 16, 12);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found 'string'\", 25, 12);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found 'string'\", 31, 16);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found '()'\", 36, 12);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found '()'\", 41, 20);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"never typed required fields not allowed, define 'y' as an optional field instead\", 49, 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyMjE2OQ==", "bodyText": "Yeah. \ud83d\ude2c My bad", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r435022169", "createdAt": "2020-06-04T06:35:06Z", "author": {"login": "dulajdilshan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/never/NeverTypeTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.types.never;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class for ballerina never type.\n+ */\n+public class NeverTypeTest {\n+\n+    private CompileResult neverTypeTestResult;\n+    private CompileResult negativeCompileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        neverTypeTestResult = BCompileUtil.compile(\"test-src/types/never/never-type.bal\");\n+        negativeCompileResult = BCompileUtil.compile(\"test-src/types/never/never-type-negative.bal\");\n+    }\n+\n+    @Test(description = \"Test type of the function with 'never' return type\")\n+    public void testTypeOfNeverReturnTypedFunction() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testTypeOfNeverReturnTypedFunction\");\n+    }\n+\n+    @Test(description = \"Test calling function with 'never' return type\")\n+    public void testNeverReturnTypedFunctionCall() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverReturnTypedFunctionCall\");\n+    }\n+\n+    @Test(description = \"Test inclusive record type with 'never' typed field\")\n+    public void testInclusiveRecordTypeWithNeverTypedField() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testInclusiveRecord\");\n+    }\n+\n+    @Test(description = \"Test exclusive record type with 'never' typed field\")\n+    public void testExclusiveRecordTypeWithNeverTypedField() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testExclusiveRecord\");\n+    }\n+\n+    @Test(description = \"Test XML with 'never' type constraint\")\n+    public void testXMLWithNeverTypeConstraint() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testXMLWithNeverType\");\n+    }\n+\n+    @Test(description = \"Test union type with 'never' type: 1\")\n+    public void testNeverWithUnionType1() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithUnionType1\");\n+    }\n+\n+    @Test(description = \"Test union type with 'never' type: 2\")\n+    public void testNeverWithUnionType2() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithUnionType1\");\n+    }\n+\n+    @Test(description = \"Test union type with 'never' type: 3\")\n+    public void testNeverWithUnionType3() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithUnionType3\");\n+    }\n+\n+    @Test(description = \"Test table's key constraint with 'never' type\")\n+    public void testNeverWithKeyLessTable() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverWithKeyLessTable\");\n+    }\n+\n+    @Test(description = \"Test table key constraint with 'never' type\")\n+    public void testNeverInUnionTypedKeyConstraints() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverInUnionTypedKeyConstraints\");\n+    }\n+\n+    @Test(description = \"Test 'never' type as future type param\")\n+    public void testNeverAsFutureTypeParam() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverAsFutureTypeParam\");\n+    }\n+\n+    @Test(description = \"Test 'never' type as mapping type param\")\n+    public void testNeverAsMappingTypeParam() {\n+        BRunUtil.invoke(neverTypeTestResult, \"testNeverAsMappingTypeParam\");\n+    }\n+\n+    @Test\n+    public void testNeverTypeNegative() {\n+        Assert.assertEquals(negativeCompileResult.getErrorCount(), 19);\n+        int i = 0;\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"'never'-typed variable definitions not allowed\", 2, 5);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"'never'-typed variable definitions not allowed\", 12, 5);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected '()', found 'never'\", 16, 12);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found 'string'\", 25, 12);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found 'string'\", 31, 16);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found '()'\", 36, 12);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"incompatible types: expected 'never', found '()'\", 41, 20);\n+        BAssertUtil.validateError(negativeCompileResult, i++,\n+                \"never typed required fields not allowed, define 'y' as an optional field instead\", 49, 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3NDgxNw=="}, "originalCommit": {"oid": "c9a3d5e6e5507a5ffdf1903163de4e9f227787be"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzY0ODcxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNjowMTo1N1rOGgEZxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNjowMzoxN1rOGgEaPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTc0OQ==", "bodyText": "Why is this BPackage param required? BNullType's constructor accepts two String params`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r436279749", "createdAt": "2020-06-06T16:01:57Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jvm.types;\n+\n+/**\n+ * {@code BNeverType} represents the type of a {@code Never}.\n+ *\n+ * @since 2.0.0-preview1\n+ */\n+public class BNeverType extends BNullType {\n+    /**\n+     * Create a {@code BNeverType} represents the type of a {@code Never}.\n+     *\n+     * @param pkg package path\n+     */\n+    BNeverType(BPackage pkg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65a8de57160e0d5136c98789604d796f59e8a06e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTg2OA==", "bodyText": "Ah sorry, nvm. I was looking at the wrong class.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22439#discussion_r436279868", "createdAt": "2020-06-06T16:03:17Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BNeverType.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jvm.types;\n+\n+/**\n+ * {@code BNeverType} represents the type of a {@code Never}.\n+ *\n+ * @since 2.0.0-preview1\n+ */\n+public class BNeverType extends BNullType {\n+    /**\n+     * Create a {@code BNeverType} represents the type of a {@code Never}.\n+     *\n+     * @param pkg package path\n+     */\n+    BNeverType(BPackage pkg) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTc0OQ=="}, "originalCommit": {"oid": "65a8de57160e0d5136c98789604d796f59e8a06e"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4521, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}