{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDA2NzA4", "number": 25695, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzo0MTozM1rOEh_cmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxMTo0OFrOEjQf1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDc3OTc2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzo0MTozM1rOHPnFJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzo0MjozMlrOHPnHZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzMDk4Mg==", "bodyText": "Order is wrong here. you have to first write the size to the buffer and then write individual elements. And when reading, you read in the same order.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r486130982", "createdAt": "2020-09-10T07:41:33Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -296,6 +299,20 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeFunctionsGlobalVarDependency(ByteBuf buf, BIRNode.BIRFunction birFunction) {\n+        List<Integer> globalVarBuf = new LinkedList<>();\n+\n+        for (BIRNode.BIRVariableDcl var : birFunction.dependentGlobalVars) {\n+            if (var == null) {\n+                continue;\n+            }\n+            globalVarBuf.add(addStringCPEntry(var.name.value));\n+        }\n+\n+        buf.writeLong(globalVarBuf.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d8f27632336e25766a0e08590bea8e236044c2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzMTU1Nw==", "bodyText": "I think I have read it wrong. This looks correct.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r486131557", "createdAt": "2020-09-10T07:42:32Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -296,6 +299,20 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeFunctionsGlobalVarDependency(ByteBuf buf, BIRNode.BIRFunction birFunction) {\n+        List<Integer> globalVarBuf = new LinkedList<>();\n+\n+        for (BIRNode.BIRVariableDcl var : birFunction.dependentGlobalVars) {\n+            if (var == null) {\n+                continue;\n+            }\n+            globalVarBuf.add(addStringCPEntry(var.name.value));\n+        }\n+\n+        buf.writeLong(globalVarBuf.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzMDk4Mg=="}, "originalCommit": {"oid": "19d8f27632336e25766a0e08590bea8e236044c2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDc5NjEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzo0NTo1M1rOHPnO-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNTo1OTozMFrOHQPXEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzMzQ5Ng==", "bodyText": "Btw, we can use writeInt here, than writing Long", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r486133496", "createdAt": "2020-09-10T07:45:53Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -296,6 +299,20 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeFunctionsGlobalVarDependency(ByteBuf buf, BIRNode.BIRFunction birFunction) {\n+        List<Integer> globalVarBuf = new LinkedList<>();\n+\n+        for (BIRNode.BIRVariableDcl var : birFunction.dependentGlobalVars) {\n+            if (var == null) {\n+                continue;\n+            }\n+            globalVarBuf.add(addStringCPEntry(var.name.value));\n+        }\n+\n+        buf.writeLong(globalVarBuf.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d8f27632336e25766a0e08590bea8e236044c2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MDkzMQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r486790931", "createdAt": "2020-09-11T05:59:30Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -296,6 +299,20 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeFunctionsGlobalVarDependency(ByteBuf buf, BIRNode.BIRFunction birFunction) {\n+        List<Integer> globalVarBuf = new LinkedList<>();\n+\n+        for (BIRNode.BIRVariableDcl var : birFunction.dependentGlobalVars) {\n+            if (var == null) {\n+                continue;\n+            }\n+            globalVarBuf.add(addStringCPEntry(var.name.value));\n+        }\n+\n+        buf.writeLong(globalVarBuf.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzMzQ5Ng=="}, "originalCommit": {"oid": "19d8f27632336e25766a0e08590bea8e236044c2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg2ODE2OnYy", "diffSide": "RIGHT", "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MjoyNlrOHRMTLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MzozMlrOHRMVlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTM1Ng==", "bodyText": "can this arg be moved to the above line? or did it exceed the 120 space?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r487789356", "createdAt": "2020-09-14T09:52:26Z", "author": {"login": "Kishanthan"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -144,12 +144,30 @@ private static void assertFunctions(BIRNode.BIRPackage expectedBIR, Bir.Module b\n             Assert.assertEquals(actualFunctionBody.argsCount(), expectedFunction.argsCount);\n             Assert.assertEquals(actualFunctionBody.defaultParameterCount(), expectedFunction.parameters.size());\n \n+            // assert dependent global variables\n+            assertDepGlobalVar(actualFunction, expectedFunction.dependentGlobalVars.toArray(), constantPoolEntries);\n+\n             // assert basic blocks\n             assertBasicBlocks(actualFunctionBody.functionBasicBlocksInfo(), expectedFunction.basicBlocks,\n                     constantPoolEntries);\n         }\n     }\n \n+    private static void assertDepGlobalVar(Bir.Function actualFunction,\n+            Object[] dependentGlobalVars,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1385288f600913065f68aa5351d8a4f7b138297"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTk3NQ==", "bodyText": "btw, is is the formatted correctly ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r487789975", "createdAt": "2020-09-14T09:53:32Z", "author": {"login": "Kishanthan"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -144,12 +144,30 @@ private static void assertFunctions(BIRNode.BIRPackage expectedBIR, Bir.Module b\n             Assert.assertEquals(actualFunctionBody.argsCount(), expectedFunction.argsCount);\n             Assert.assertEquals(actualFunctionBody.defaultParameterCount(), expectedFunction.parameters.size());\n \n+            // assert dependent global variables\n+            assertDepGlobalVar(actualFunction, expectedFunction.dependentGlobalVars.toArray(), constantPoolEntries);\n+\n             // assert basic blocks\n             assertBasicBlocks(actualFunctionBody.functionBasicBlocksInfo(), expectedFunction.basicBlocks,\n                     constantPoolEntries);\n         }\n     }\n \n+    private static void assertDepGlobalVar(Bir.Function actualFunction,\n+            Object[] dependentGlobalVars,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTM1Ng=="}, "originalCommit": {"oid": "b1385288f600913065f68aa5351d8a4f7b138297"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI0NzcyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo0MTo0NlrOHRP1FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxMzowOFrOHRZ2sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0NzE4OQ==", "bodyText": "can this be null at any point?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r487847189", "createdAt": "2020-09-14T11:41:46Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -302,6 +305,20 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeFunctionsGlobalVarDependency(ByteBuf buf, BIRNode.BIRFunction birFunction) {\n+        List<Integer> globalVarBuf = new LinkedList<>();\n+\n+        for (BIRNode.BIRVariableDcl var : birFunction.dependentGlobalVars) {\n+            if (var == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1385288f600913065f68aa5351d8a4f7b138297"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMTQ0MQ==", "bodyText": "Earlier there was another bug collecting constants as well. I also fixed that issue along with this but forgot to remove it here. Fixed it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r488011441", "createdAt": "2020-09-14T15:13:08Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -302,6 +305,20 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeFunctionsGlobalVarDependency(ByteBuf buf, BIRNode.BIRFunction birFunction) {\n+        List<Integer> globalVarBuf = new LinkedList<>();\n+\n+        for (BIRNode.BIRVariableDcl var : birFunction.dependentGlobalVars) {\n+            if (var == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0NzE4OQ=="}, "originalCommit": {"oid": "b1385288f600913065f68aa5351d8a4f7b138297"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA1MjgyOnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/cyclefind/GlobalVariableRefAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxMDoxNFrOHRg51w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMzo1NDo0MlrOHRvkug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNjkzNQ==", "bodyText": "what is the reason to remove the condition on CONSTANT here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r488126935", "createdAt": "2020-09-14T18:10:14Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/cyclefind/GlobalVariableRefAnalyzer.java", "diffHunk": "@@ -192,9 +192,7 @@ private boolean isGlobalVarSymbol(BSymbol symbol) {\n             return false;\n         }\n \n-        return ((symbol.tag & SymTag.VARIABLE) == SymTag.VARIABLE) ||\n-                ((symbol.tag & SymTag.CONSTANT) == SymTag.CONSTANT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85dc64c9d9c02cef95163b4c776402d0d1ca3c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2NzI5MA==", "bodyText": "A lock doesnt have to depend on a constant.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r488367290", "createdAt": "2020-09-15T03:54:42Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/cyclefind/GlobalVariableRefAnalyzer.java", "diffHunk": "@@ -192,9 +192,7 @@ private boolean isGlobalVarSymbol(BSymbol symbol) {\n             return false;\n         }\n \n-        return ((symbol.tag & SymTag.VARIABLE) == SymTag.VARIABLE) ||\n-                ((symbol.tag & SymTag.CONSTANT) == SymTag.CONSTANT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNjkzNQ=="}, "originalCommit": {"oid": "a85dc64c9d9c02cef95163b4c776402d0d1ca3c7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA1OTA4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxMTo0OFrOHRg9eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxMTo0OFrOHRg9eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNzg2NA==", "bodyText": "this can be simplified now right? you don't need an intermediate list, but we can start writing to the buf directly from the loop?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25695#discussion_r488127864", "createdAt": "2020-09-14T18:11:48Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -302,6 +305,17 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeFunctionsGlobalVarDependency(ByteBuf buf, BIRNode.BIRFunction birFunction) {\n+        List<Integer> globalVarBuf = new LinkedList<>();\n+\n+        for (BIRNode.BIRVariableDcl var : birFunction.dependentGlobalVars) {\n+            globalVarBuf.add(addStringCPEntry(var.name.value));\n+        }\n+\n+        buf.writeInt(globalVarBuf.size());\n+        globalVarBuf.forEach(buf::writeInt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85dc64c9d9c02cef95163b4c776402d0d1ca3c7"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 62, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}