{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyOTkwMDM3", "number": 27347, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1NjoxNFrOFBnDmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNjowNlrOFBnMjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjMyNzkzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/AnnotationUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1NjoxNFrOIAXG3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMToyMzozNlrOIAiHDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0OTUwMg==", "bodyText": "processServiceAnnotations used to be codegen-ed separately for services to specifically recompute the annotations in services that are created within a function (via https://github.com/ballerina-platform/ballerina-lang/blob/v2.0.0-Preview7/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmInstructionGen.java#L1625).\nTo continue to support the same, IMO we need to do something similar.\nThe second annotation access in the following sample used to return {i: 202}, but now returns {i: 101}.\nannotation record {int i;} x on service;\n\nint globalInt = 101;\n\npublic function getService() returns service object {} {\n    return @x {i: globalInt} service object {\n        \n    };\n}\n\npublic function main() {\n    typedesc<service object {}> t = typeof getService();\n    var v = t.@x; // {\"i\":101}\n\n    globalInt = 202;\n    t = typeof getService();\n    v = t.@x; // used to be {\"i\":202}, now {\"i\":101}\n}\nWill we be fixing this anytime soon given that it's a breaking change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27347#discussion_r537249502", "createdAt": "2020-12-07T05:56:14Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/AnnotationUtils.java", "diffHunk": "@@ -43,12 +43,17 @@\n      * @param globalAnnotMap The global annotation map\n      * @param bType          The type for which annotations need to be set\n      */\n-    public static void processAnnotations(MapValue globalAnnotMap, Type bType) {\n+    public static void processAnnotations(MapValue globalAnnotMap, Type bType, Strand strand) {\n         if (!(bType instanceof BAnnotatableType)) {\n             return;\n         }\n \n         BAnnotatableType type = (BAnnotatableType) bType;\n+        if (type.getTag() == TypeTags.SERVICE_TAG) {\n+            processServiceAnnotations(globalAnnotMap, (BServiceType) bType, strand);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "217817f7468b711f07cddc3b82e2d5d1252904dc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxOTcyMA==", "bodyText": "Could this be this issue, I mean this behavior #26838.\nEdit, no this is a different issue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27347#discussion_r537419720", "createdAt": "2020-12-07T11:07:16Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/AnnotationUtils.java", "diffHunk": "@@ -43,12 +43,17 @@\n      * @param globalAnnotMap The global annotation map\n      * @param bType          The type for which annotations need to be set\n      */\n-    public static void processAnnotations(MapValue globalAnnotMap, Type bType) {\n+    public static void processAnnotations(MapValue globalAnnotMap, Type bType, Strand strand) {\n         if (!(bType instanceof BAnnotatableType)) {\n             return;\n         }\n \n         BAnnotatableType type = (BAnnotatableType) bType;\n+        if (type.getTag() == TypeTags.SERVICE_TAG) {\n+            processServiceAnnotations(globalAnnotMap, (BServiceType) bType, strand);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0OTUwMg=="}, "originalCommit": {"oid": "217817f7468b711f07cddc3b82e2d5d1252904dc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyOTc3NA==", "bodyText": "Issue to re-visit this annot impl: #27348\nI think we will have to consider object constructors for the above issue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27347#discussion_r537429774", "createdAt": "2020-12-07T11:23:36Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/AnnotationUtils.java", "diffHunk": "@@ -43,12 +43,17 @@\n      * @param globalAnnotMap The global annotation map\n      * @param bType          The type for which annotations need to be set\n      */\n-    public static void processAnnotations(MapValue globalAnnotMap, Type bType) {\n+    public static void processAnnotations(MapValue globalAnnotMap, Type bType, Strand strand) {\n         if (!(bType instanceof BAnnotatableType)) {\n             return;\n         }\n \n         BAnnotatableType type = (BAnnotatableType) bType;\n+        if (type.getTag() == TypeTags.SERVICE_TAG) {\n+            processServiceAnnotations(globalAnnotMap, (BServiceType) bType, strand);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0OTUwMg=="}, "originalCommit": {"oid": "217817f7468b711f07cddc3b82e2d5d1252904dc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjMzNDQ1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1OTowM1rOIAXKPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMToxNTo0N1rOIAh0pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDM2Nw==", "bodyText": "Should we call this hasAnnotations instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27347#discussion_r537250367", "createdAt": "2020-12-07T05:59:03Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java", "diffHunk": "@@ -99,4 +93,8 @@ public void setResourceFunctions(ResourceFunctionType[] resourceFunctions) {\n     public int getTag() {\n         return TypeTags.SERVICE_TAG;\n     }\n+\n+    public boolean isAnnotationsAvailable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "217817f7468b711f07cddc3b82e2d5d1252904dc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyNTA2Mw==", "bodyText": "will update", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27347#discussion_r537425063", "createdAt": "2020-12-07T11:15:47Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BServiceType.java", "diffHunk": "@@ -99,4 +93,8 @@ public void setResourceFunctions(ResourceFunctionType[] resourceFunctions) {\n     public int getTag() {\n         return TypeTags.SERVICE_TAG;\n     }\n+\n+    public boolean isAnnotationsAvailable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDM2Nw=="}, "originalCommit": {"oid": "217817f7468b711f07cddc3b82e2d5d1252904dc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjM0OTMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNToyNVrOIAXSQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNToyNVrOIAXSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MjQxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!types.isServiceObject((BObjectTypeSymbol) type.tsymbol)) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                        return true;\n          \n          \n            \n                        return types.isServiceObject((BObjectTypeSymbol) type.tsymbol);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27347#discussion_r537252419", "createdAt": "2020-12-07T06:05:25Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -3798,18 +3796,25 @@ private boolean checkAttachMethod(BAttachedFunction func) {\n \n             // todo: change is unions are allowed as service type.\n             BType firstParamType = func.type.paramTypes.get(0);\n-            if (firstParamType.tag != TypeTags.OBJECT) {\n-                return false;\n-            }\n-\n-            if (!types.isServiceObject((BObjectTypeSymbol) firstParamType.tsymbol)) {\n+            if (!isServiceObject(firstParamType)) {\n                 return false;\n             }\n \n             BType secondParamType = func.type.paramTypes.get(1);\n-            boolean sameType = types.isSameType(this.serviceNameType, secondParamType);\n+            boolean sameType = types.isAssignable(secondParamType, this.serviceNameType);\n             return attachFound = sameType;\n \n         }\n+\n+        private boolean isServiceObject(BType type) {\n+            if (type.tag != TypeTags.OBJECT) {\n+                return false;\n+            }\n+\n+            if (!types.isServiceObject((BObjectTypeSymbol) type.tsymbol)) {\n+                return false;\n+            }\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "217817f7468b711f07cddc3b82e2d5d1252904dc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjM1MDcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNTo1OFrOIAXS9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMToxNTo0MFrOIAh0Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MjU5OQ==", "bodyText": "Will these be supported in the future?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27347#discussion_r537252599", "createdAt": "2020-12-07T06:05:58Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -775,6 +775,22 @@ error.invalid.listener.var=\\\n error.invalid.listener.attachment=\\\n   invalid listener attachment\n \n+error.service.absolute.path.or.literal.required.by.listener=\\\n+  service absolute path or literal is required by listener\n+\n+error.service.path.literal.is.not.supported.by.listener=\\\n+  service path literal is not supported by listener\n+\n+error.service.absolute.path.is.not.supported.by.listener=\\\n+  service absolute path is not supported by listener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "217817f7468b711f07cddc3b82e2d5d1252904dc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyNDk5MQ==", "bodyText": "No this is the expected behavior,\nif listener attach method is attach(service object s, string? path), then it's an error to have following:\nservice \\abs\\path on new http:Listener(4000) {\n\n}\n\nIt should be  either service \"name-literal\" on lsn { } or service on lsn { }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27347#discussion_r537424991", "createdAt": "2020-12-07T11:15:40Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -775,6 +775,22 @@ error.invalid.listener.var=\\\n error.invalid.listener.attachment=\\\n   invalid listener attachment\n \n+error.service.absolute.path.or.literal.required.by.listener=\\\n+  service absolute path or literal is required by listener\n+\n+error.service.path.literal.is.not.supported.by.listener=\\\n+  service path literal is not supported by listener\n+\n+error.service.absolute.path.is.not.supported.by.listener=\\\n+  service absolute path is not supported by listener", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MjU5OQ=="}, "originalCommit": {"oid": "217817f7468b711f07cddc3b82e2d5d1252904dc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjM1MDg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNjowNlrOIAXTDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNjowNlrOIAXTDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MjYyMw==", "bodyText": "Extra new line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27347#discussion_r537252623", "createdAt": "2020-12-07T06:06:06Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -775,6 +775,22 @@ error.invalid.listener.var=\\\n error.invalid.listener.attachment=\\\n   invalid listener attachment\n \n+error.service.absolute.path.or.literal.required.by.listener=\\\n+  service absolute path or literal is required by listener\n+\n+error.service.path.literal.is.not.supported.by.listener=\\\n+  service path literal is not supported by listener\n+\n+error.service.absolute.path.is.not.supported.by.listener=\\\n+  service absolute path is not supported by listener\n+\n+error.service.path.literal.required.by.listener=\\\n+  service path literal is required by the listener\n+\n+error.service.absolute.path.required.by.listener=\\\n+  service absolute path is required by the listener\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "217817f7468b711f07cddc3b82e2d5d1252904dc"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2866, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}