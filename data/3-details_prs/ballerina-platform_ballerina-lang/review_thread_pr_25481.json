{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTEyMDgy", "number": 25481, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjo0Nzo0M1rOEdfxmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjo0Nzo0M1rOEdfxmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzY0NzYxOnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/BasicCasesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjo0Nzo0M1rOHIrlng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDoxMDo1MVrOHI4Ljw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2NDc5OA==", "bodyText": "Assertions are used in all tests. So the order of test execution should be as follows:\n\ntestAssertTrue\ntestAssertions (the assertions other than assertTrue)\nrest of the tests\n\nTherefore, this and the rest of the tests should depend on testAssertions", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25481#discussion_r478864798", "createdAt": "2020-08-28T06:47:43Z", "author": {"login": "azinneera"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/BasicCasesTest.java", "diffHunk": "@@ -55,31 +55,68 @@ public void testJavaInterops() throws BallerinaTestException {\n         clientLeecher.waitForText(20000);\n     }\n \n+    @Test()\n+    public void testAnnotationAccess() throws BallerinaTestException {\n+        String msg = \"3 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"annotation-access\"}, null,\n+                new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(40000);\n+    }\n+\n+    @Test()\n+    public void testAnnotations() throws BallerinaTestException {\n+        String msg = \"15 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"annotations\"}, null,\n+                new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(40000);\n+    }\n+\n     @Test(dependsOnMethods = \"testAssertTrue\")\n-    public void testAllExceptAssertTrue() throws BallerinaTestException {\n-        String msg1 = \"15 passing\";\n-        String msg2 = \"1 passing\";\n-        String msg3 = \"87 passing\";\n-        String msg4 = \"3 passing\";\n-        String msg5 = \"2 passing\";\n-        String msg6 = \"3 passing\";\n-        String msg7 = \"8 passing\";\n-        LogLeecher clientLeecher1 = new LogLeecher(msg1);\n-        LogLeecher clientLeecher2 = new LogLeecher(msg2);\n-        LogLeecher clientLeecher3 = new LogLeecher(msg3);\n-        LogLeecher clientLeecher4 = new LogLeecher(msg4);\n-        LogLeecher clientLeecher5 = new LogLeecher(msg5);\n-        LogLeecher clientLeecher6 = new LogLeecher(msg6);\n-        LogLeecher clientLeecher7 = new LogLeecher(msg7);\n-        balClient.runMain(\"test\", new String[]{\"--disable-groups\", \"p1\", \"--all\", \"--\", \"--user.name=waruna\"}, null,\n-                          new String[]{}, new LogLeecher[]{clientLeecher1, clientLeecher2, clientLeecher3,\n-                        clientLeecher4, clientLeecher5, clientLeecher6, clientLeecher7}, projectPath);\n-        clientLeecher1.waitForText(400000);\n-        clientLeecher2.waitForText(400000);\n-        clientLeecher3.waitForText(400000);\n-        clientLeecher4.waitForText(400000);\n-        clientLeecher5.waitForText(400000);\n-        clientLeecher6.waitForText(400000);\n-        clientLeecher7.waitForText(400000);\n+    public void testAssertions() throws BallerinaTestException {\n+        String msg = \"87 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--disable-groups\", \"p1\", \"assertions\", \"--user.name=waruna\"}, null,\n+                new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(40000);\n+    }\n+\n+    @Test()\n+    public void testBeforeAfter() throws BallerinaTestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5357ae88f5d4279f906fde183ac7ce815871c046"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5NjQ4MQ==", "bodyText": "+1\n@Ibaqu\nAlso,\nannotations test cases use \"before\", \"dependsOn\" annotations. Likewise, shall we order the test execution accordingly?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25481#discussion_r478896481", "createdAt": "2020-08-28T07:43:21Z", "author": {"login": "Dilhasha"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/BasicCasesTest.java", "diffHunk": "@@ -55,31 +55,68 @@ public void testJavaInterops() throws BallerinaTestException {\n         clientLeecher.waitForText(20000);\n     }\n \n+    @Test()\n+    public void testAnnotationAccess() throws BallerinaTestException {\n+        String msg = \"3 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"annotation-access\"}, null,\n+                new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(40000);\n+    }\n+\n+    @Test()\n+    public void testAnnotations() throws BallerinaTestException {\n+        String msg = \"15 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"annotations\"}, null,\n+                new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(40000);\n+    }\n+\n     @Test(dependsOnMethods = \"testAssertTrue\")\n-    public void testAllExceptAssertTrue() throws BallerinaTestException {\n-        String msg1 = \"15 passing\";\n-        String msg2 = \"1 passing\";\n-        String msg3 = \"87 passing\";\n-        String msg4 = \"3 passing\";\n-        String msg5 = \"2 passing\";\n-        String msg6 = \"3 passing\";\n-        String msg7 = \"8 passing\";\n-        LogLeecher clientLeecher1 = new LogLeecher(msg1);\n-        LogLeecher clientLeecher2 = new LogLeecher(msg2);\n-        LogLeecher clientLeecher3 = new LogLeecher(msg3);\n-        LogLeecher clientLeecher4 = new LogLeecher(msg4);\n-        LogLeecher clientLeecher5 = new LogLeecher(msg5);\n-        LogLeecher clientLeecher6 = new LogLeecher(msg6);\n-        LogLeecher clientLeecher7 = new LogLeecher(msg7);\n-        balClient.runMain(\"test\", new String[]{\"--disable-groups\", \"p1\", \"--all\", \"--\", \"--user.name=waruna\"}, null,\n-                          new String[]{}, new LogLeecher[]{clientLeecher1, clientLeecher2, clientLeecher3,\n-                        clientLeecher4, clientLeecher5, clientLeecher6, clientLeecher7}, projectPath);\n-        clientLeecher1.waitForText(400000);\n-        clientLeecher2.waitForText(400000);\n-        clientLeecher3.waitForText(400000);\n-        clientLeecher4.waitForText(400000);\n-        clientLeecher5.waitForText(400000);\n-        clientLeecher6.waitForText(400000);\n-        clientLeecher7.waitForText(400000);\n+    public void testAssertions() throws BallerinaTestException {\n+        String msg = \"87 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--disable-groups\", \"p1\", \"assertions\", \"--user.name=waruna\"}, null,\n+                new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(40000);\n+    }\n+\n+    @Test()\n+    public void testBeforeAfter() throws BallerinaTestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2NDc5OA=="}, "originalCommit": {"oid": "5357ae88f5d4279f906fde183ac7ce815871c046"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA3MTExOQ==", "bodyText": "Addressed requested changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25481#discussion_r479071119", "createdAt": "2020-08-28T10:10:51Z", "author": {"login": "Ibaqu"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/BasicCasesTest.java", "diffHunk": "@@ -55,31 +55,68 @@ public void testJavaInterops() throws BallerinaTestException {\n         clientLeecher.waitForText(20000);\n     }\n \n+    @Test()\n+    public void testAnnotationAccess() throws BallerinaTestException {\n+        String msg = \"3 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"annotation-access\"}, null,\n+                new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(40000);\n+    }\n+\n+    @Test()\n+    public void testAnnotations() throws BallerinaTestException {\n+        String msg = \"15 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"annotations\"}, null,\n+                new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(40000);\n+    }\n+\n     @Test(dependsOnMethods = \"testAssertTrue\")\n-    public void testAllExceptAssertTrue() throws BallerinaTestException {\n-        String msg1 = \"15 passing\";\n-        String msg2 = \"1 passing\";\n-        String msg3 = \"87 passing\";\n-        String msg4 = \"3 passing\";\n-        String msg5 = \"2 passing\";\n-        String msg6 = \"3 passing\";\n-        String msg7 = \"8 passing\";\n-        LogLeecher clientLeecher1 = new LogLeecher(msg1);\n-        LogLeecher clientLeecher2 = new LogLeecher(msg2);\n-        LogLeecher clientLeecher3 = new LogLeecher(msg3);\n-        LogLeecher clientLeecher4 = new LogLeecher(msg4);\n-        LogLeecher clientLeecher5 = new LogLeecher(msg5);\n-        LogLeecher clientLeecher6 = new LogLeecher(msg6);\n-        LogLeecher clientLeecher7 = new LogLeecher(msg7);\n-        balClient.runMain(\"test\", new String[]{\"--disable-groups\", \"p1\", \"--all\", \"--\", \"--user.name=waruna\"}, null,\n-                          new String[]{}, new LogLeecher[]{clientLeecher1, clientLeecher2, clientLeecher3,\n-                        clientLeecher4, clientLeecher5, clientLeecher6, clientLeecher7}, projectPath);\n-        clientLeecher1.waitForText(400000);\n-        clientLeecher2.waitForText(400000);\n-        clientLeecher3.waitForText(400000);\n-        clientLeecher4.waitForText(400000);\n-        clientLeecher5.waitForText(400000);\n-        clientLeecher6.waitForText(400000);\n-        clientLeecher7.waitForText(400000);\n+    public void testAssertions() throws BallerinaTestException {\n+        String msg = \"87 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--disable-groups\", \"p1\", \"assertions\", \"--user.name=waruna\"}, null,\n+                new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(40000);\n+    }\n+\n+    @Test()\n+    public void testBeforeAfter() throws BallerinaTestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2NDc5OA=="}, "originalCommit": {"oid": "5357ae88f5d4279f906fde183ac7ce815871c046"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 296, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}