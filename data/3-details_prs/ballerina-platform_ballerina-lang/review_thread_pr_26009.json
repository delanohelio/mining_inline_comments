{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODY1Mjcy", "number": 26009, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNToyOTozNFrOEmJKmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozNzoxN1rOEmr6NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDMxNTE1OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/test/java/io/ballerina/projects/test/TestBuildProject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNToyOTozNFrOHWADaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDo0OTo0M1rOHWWP7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzMTU5Mw==", "bodyText": "Can we change this to a simple constant importing ballerina/io will not compile since the stdlibs are removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r492831593", "createdAt": "2020-09-22T15:29:34Z", "author": {"login": "hevayo"}, "path": "project-api/ballerina-projects/src/test/java/io/ballerina/projects/test/TestBuildProject.java", "diffHunk": "@@ -199,4 +209,334 @@ public void testSetBuildOptionsFromToml() {\n         Assert.assertTrue(project.getBuildOptions().isSkipLock());\n     }\n \n+    @Test\n+    public void testUpdateDocument() {\n+        // Inputs from langserver\n+        Path filePath = RESOURCE_DIRECTORY.resolve(\"myproject\").resolve(\"main.bal\").toAbsolutePath();\n+        String newContent = \"import ballerina/io;\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100ec8d76034156c2f7a6212d638d810948cbbab"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NTI0Ng==", "bodyText": "Changed in 918ddd9", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493195246", "createdAt": "2020-09-23T04:49:43Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/test/java/io/ballerina/projects/test/TestBuildProject.java", "diffHunk": "@@ -199,4 +209,334 @@ public void testSetBuildOptionsFromToml() {\n         Assert.assertTrue(project.getBuildOptions().isSkipLock());\n     }\n \n+    @Test\n+    public void testUpdateDocument() {\n+        // Inputs from langserver\n+        Path filePath = RESOURCE_DIRECTORY.resolve(\"myproject\").resolve(\"main.bal\").toAbsolutePath();\n+        String newContent = \"import ballerina/io;\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzMTU5Mw=="}, "originalCommit": {"oid": "100ec8d76034156c2f7a6212d638d810948cbbab"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDM1Mzg3OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/ProjectLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTozNzozNVrOHWAbBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDo0OTozMVrOHWWPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzNzYzOA==", "bodyText": "Shall we add @nullable", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r492837638", "createdAt": "2020-09-22T15:37:35Z", "author": {"login": "hevayo"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/ProjectLoader.java", "diffHunk": "@@ -74,6 +80,37 @@ public static Project loadProject(Path path) {\n         return SingleFileProject.loadProject(absProjectPath);\n     }\n \n+    /**\n+     * Returns the documentId of the provided file path.\n+     *\n+     * @param documentFilePath file path of the document\n+     * @param project project that the file belongs to\n+     * @return documentId of the document\n+     */\n+    public static DocumentId getDocumentId(Path documentFilePath, BuildProject project) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100ec8d76034156c2f7a6212d638d810948cbbab"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NTE4Ng==", "bodyText": "Added in 918ddd9", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493195186", "createdAt": "2020-09-23T04:49:31Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/ProjectLoader.java", "diffHunk": "@@ -74,6 +80,37 @@ public static Project loadProject(Path path) {\n         return SingleFileProject.loadProject(absProjectPath);\n     }\n \n+    /**\n+     * Returns the documentId of the provided file path.\n+     *\n+     * @param documentFilePath file path of the document\n+     * @param project project that the file belongs to\n+     * @return documentId of the document\n+     */\n+    public static DocumentId getDocumentId(Path documentFilePath, BuildProject project) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzNzYzOA=="}, "originalCommit": {"oid": "100ec8d76034156c2f7a6212d638d810948cbbab"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Nzg1MDUxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0NTo1NFrOHWhvCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMDo0MVrOHWy7yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4MzQzMw==", "bodyText": "A document should be created using a DocumentConfig and not DocumentContext", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493383433", "createdAt": "2020-09-23T09:45:54Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "diffHunk": "@@ -34,14 +34,18 @@\n         this.module = module;\n     }\n \n-    static Document from(DocumentContext documentContext, Module module) {\n+    public static Document from(DocumentContext documentContext, Module module) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NTIyNQ==", "bodyText": "Fixed in 9a7d6fe", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493665225", "createdAt": "2020-09-23T15:00:41Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "diffHunk": "@@ -34,14 +34,18 @@\n         this.module = module;\n     }\n \n-    static Document from(DocumentContext documentContext, Module module) {\n+    public static Document from(DocumentContext documentContext, Module module) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4MzQzMw=="}, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzkxMDk3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo1NjoxOFrOHWiWoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMDozNFrOHWy7Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM5MzU2OA==", "bodyText": "This should hold all the attributes from the old document and apply() should blindly create the new document from these attributes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493393568", "createdAt": "2020-09-23T09:56:18Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "diffHunk": "@@ -53,4 +57,48 @@ public SyntaxTree syntaxTree() {\n     public TextDocument textDocument() {\n         return this.documentContext.textDocument();\n     }\n+\n+    /** Returns an instance of the Document.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {\n+        return new Modifier(this);\n+    }\n+\n+    /**\n+     * Inner class that handles Document modifications.\n+     */\n+    public static class Modifier {\n+        private String content;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NTExOQ==", "bodyText": "Fixed in 9a7d6fe", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493665119", "createdAt": "2020-09-23T15:00:34Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "diffHunk": "@@ -53,4 +57,48 @@ public SyntaxTree syntaxTree() {\n     public TextDocument textDocument() {\n         return this.documentContext.textDocument();\n     }\n+\n+    /** Returns an instance of the Document.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {\n+        return new Modifier(this);\n+    }\n+\n+    /**\n+     * Inner class that handles Document modifications.\n+     */\n+    public static class Modifier {\n+        private String content;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM5MzU2OA=="}, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Nzk1MzEzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDowMzozMFrOHWiyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMDoyOVrOHWy7KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMDU5Mw==", "bodyText": "Follow method in https://github.com/ballerina-platform/ballerina-lang/pull/26009/files#r493393568", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493400593", "createdAt": "2020-09-23T10:03:30Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +134,118 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private Module oldModule;\n+        private DocumentContext newDocContext;\n+        private Module newModule;\n+\n+        private Modifier(Module oldModule) {\n+            this.oldModule = oldModule;\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            this.newDocContext = newDocContext;\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            if (oldModule.moduleContext.srcDocumentIds().contains(newDocContext.documentId())) {\n+                srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            } else {\n+                testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            }\n+            createNewModule(srcDocContextMap, testDocContextMap);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new source document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addDocument(DocumentConfig documentConfig) {\n+            this.newDocContext = DocumentContext.from(documentConfig);\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            createNewModule(srcDocContextMap, testDocContextMap);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new test document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addTestDocument(DocumentConfig documentConfig) {\n+            this.newDocContext = DocumentContext.from(documentConfig);\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            createNewModule(srcDocContextMap, testDocContextMap);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and removes the specified document from the new module.\n+         *\n+         * @param documentId documentId of the document to remove\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier removeDocument(DocumentId documentId) {\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            if (oldModule.moduleContext.srcDocumentIds().contains(documentId)) {\n+                srcDocContextMap.remove(documentId);\n+            } else {\n+                testDocContextMap.remove(documentId);\n+            }\n+            createNewModule(srcDocContextMap, testDocContextMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NTA2NA==", "bodyText": "Fixed in 9a7d6fe", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493665064", "createdAt": "2020-09-23T15:00:29Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +134,118 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private Module oldModule;\n+        private DocumentContext newDocContext;\n+        private Module newModule;\n+\n+        private Modifier(Module oldModule) {\n+            this.oldModule = oldModule;\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            this.newDocContext = newDocContext;\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            if (oldModule.moduleContext.srcDocumentIds().contains(newDocContext.documentId())) {\n+                srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            } else {\n+                testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            }\n+            createNewModule(srcDocContextMap, testDocContextMap);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new source document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addDocument(DocumentConfig documentConfig) {\n+            this.newDocContext = DocumentContext.from(documentConfig);\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            createNewModule(srcDocContextMap, testDocContextMap);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new test document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addTestDocument(DocumentConfig documentConfig) {\n+            this.newDocContext = DocumentContext.from(documentConfig);\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            createNewModule(srcDocContextMap, testDocContextMap);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and removes the specified document from the new module.\n+         *\n+         * @param documentId documentId of the document to remove\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier removeDocument(DocumentId documentId) {\n+            Map<DocumentId, DocumentContext> srcDocContextMap = copySrcDocsfromOld();\n+            Map<DocumentId, DocumentContext> testDocContextMap = copyTestDocsfromOld();\n+\n+            if (oldModule.moduleContext.srcDocumentIds().contains(documentId)) {\n+                srcDocContextMap.remove(documentId);\n+            } else {\n+                testDocContextMap.remove(documentId);\n+            }\n+            createNewModule(srcDocContextMap, testDocContextMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMDU5Mw=="}, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Nzk1OTYxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDowNDo0MVrOHWi2NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMDoyM1rOHWy6zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMTY1Mg==", "bodyText": "Follow the same technique as : https://github.com/ballerina-platform/ballerina-lang/pull/26009/files#r493393568", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493401652", "createdAt": "2020-09-23T10:04:41Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -103,4 +114,113 @@ public void resolveDependencies() {\n //    public BallerinaToml ballerinaToml() {\n //        return this.packageContext.ballerinaToml();\n //    }\n+\n+\n+    /** Returns an instance of the Package.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {\n+        return new Modifier(this);\n+    }\n+\n+    private static class ModuleIterable implements Iterable {\n+        private final Collection<Module> moduleList;\n+\n+        public ModuleIterable(Collection<Module> moduleList) {\n+            this.moduleList = moduleList;\n+        }\n+\n+        @Override\n+        public Iterator<Module> iterator() {\n+            return this.moduleList.iterator();\n+        }\n+\n+        @Override\n+        public Spliterator spliterator() {\n+            return this.moduleList.spliterator();\n+        }\n+    }\n+\n+    /**\n+     * Inner class that handles package modifications.\n+     */\n+    public static class Modifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NDk3Mg==", "bodyText": "Fixed in 9a7d6fe", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493664972", "createdAt": "2020-09-23T15:00:23Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -103,4 +114,113 @@ public void resolveDependencies() {\n //    public BallerinaToml ballerinaToml() {\n //        return this.packageContext.ballerinaToml();\n //    }\n+\n+\n+    /** Returns an instance of the Package.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {\n+        return new Modifier(this);\n+    }\n+\n+    private static class ModuleIterable implements Iterable {\n+        private final Collection<Module> moduleList;\n+\n+        public ModuleIterable(Collection<Module> moduleList) {\n+            this.moduleList = moduleList;\n+        }\n+\n+        @Override\n+        public Iterator<Module> iterator() {\n+            return this.moduleList.iterator();\n+        }\n+\n+        @Override\n+        public Spliterator spliterator() {\n+            return this.moduleList.spliterator();\n+        }\n+    }\n+\n+    /**\n+     * Inner class that handles package modifications.\n+     */\n+    public static class Modifier {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMTY1Mg=="}, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Nzk3MzUzOnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDowNzoxMlrOHWi_QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMDoxMFrOHWy6Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMzk2OA==", "bodyText": "Add another method to return the document path", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493403968", "createdAt": "2020-09-23T10:07:12Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java", "diffHunk": "@@ -55,14 +60,37 @@ public static BuildProject loadProject(Path projectPath) {\n     private BuildProject(EnvironmentContext environmentContext, Path projectPath) {\n         super(environmentContext);\n         this.sourceRoot = projectPath;\n-        addPackage(projectPath.toString());\n+\n+        // load Ballerina.toml\n+        Path ballerinaTomlPath = this.sourceRoot.resolve(ProjectConstants.BALLERINA_TOML);\n+        BallerinaToml ballerinaToml;\n+        try {\n+            ballerinaToml = BallerinaTomlProcessor.parse(ballerinaTomlPath);\n+        } catch (IOException | TomlException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n \n         // Set default build options\n-//        if (this.context.currentPackage().ballerinaToml().getBuildOptions() != null) {\n-//            this.context.setBuildOptions(this.context.currentPackage().ballerinaToml().getBuildOptions());\n-//        } else {\n-//            this.context.setBuildOptions(new BuildOptions());\n-//        }\n+        if (ballerinaToml.getBuildOptions() != null) {\n+            this.setBuildOptions(ballerinaToml.getBuildOptions());\n+        } else {\n+            this.setBuildOptions(new BuildOptions());\n+        }\n+\n+        addPackage(projectPath.toString());\n+    }\n+\n+    public BuildOptions getBuildOptions() {\n+        return (BuildOptions) super.getBuildOptions();\n+    }\n+\n+    public Path modulePath(ModuleId moduleId) {\n+        if (currentPackage().getDefaultModule().moduleId() == moduleId) {\n+            return sourceRoot;\n+        } else {\n+            return sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n+                    currentPackage().module(moduleId).moduleName().moduleNamePart());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NDgyMg==", "bodyText": "Fixed in 9a7d6fe", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493664822", "createdAt": "2020-09-23T15:00:10Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java", "diffHunk": "@@ -55,14 +60,37 @@ public static BuildProject loadProject(Path projectPath) {\n     private BuildProject(EnvironmentContext environmentContext, Path projectPath) {\n         super(environmentContext);\n         this.sourceRoot = projectPath;\n-        addPackage(projectPath.toString());\n+\n+        // load Ballerina.toml\n+        Path ballerinaTomlPath = this.sourceRoot.resolve(ProjectConstants.BALLERINA_TOML);\n+        BallerinaToml ballerinaToml;\n+        try {\n+            ballerinaToml = BallerinaTomlProcessor.parse(ballerinaTomlPath);\n+        } catch (IOException | TomlException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n \n         // Set default build options\n-//        if (this.context.currentPackage().ballerinaToml().getBuildOptions() != null) {\n-//            this.context.setBuildOptions(this.context.currentPackage().ballerinaToml().getBuildOptions());\n-//        } else {\n-//            this.context.setBuildOptions(new BuildOptions());\n-//        }\n+        if (ballerinaToml.getBuildOptions() != null) {\n+            this.setBuildOptions(ballerinaToml.getBuildOptions());\n+        } else {\n+            this.setBuildOptions(new BuildOptions());\n+        }\n+\n+        addPackage(projectPath.toString());\n+    }\n+\n+    public BuildOptions getBuildOptions() {\n+        return (BuildOptions) super.getBuildOptions();\n+    }\n+\n+    public Path modulePath(ModuleId moduleId) {\n+        if (currentPackage().getDefaultModule().moduleId() == moduleId) {\n+            return sourceRoot;\n+        } else {\n+            return sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n+                    currentPackage().module(moduleId).moduleName().moduleNamePart());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMzk2OA=="}, "originalCommit": {"oid": "918ddd990c75bb5021f74e2ea0d895b3da36f302"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTgwMjA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0ODoxN1rOHW1IBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTowODo0MlrOHXo8Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMTEyNg==", "bodyText": "Better to change the API name to a noun instead of the verb, since this seems to be working as a getter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493701126", "createdAt": "2020-09-23T15:48:17Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "diffHunk": "@@ -53,4 +58,53 @@ public SyntaxTree syntaxTree() {\n     public TextDocument textDocument() {\n         return this.documentContext.textDocument();\n     }\n+\n+    /** Returns an instance of the Document.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1MDA3OA==", "bodyText": "This is the name used in classes in the syntax tree. Therefore, we have followed the same.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494550078", "createdAt": "2020-09-24T19:08:42Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Document.java", "diffHunk": "@@ -53,4 +58,53 @@ public SyntaxTree syntaxTree() {\n     public TextDocument textDocument() {\n         return this.documentContext.textDocument();\n     }\n+\n+    /** Returns an instance of the Document.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMTEyNg=="}, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTg5MzcyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjowOToyMlrOHW2CHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo0NDoxMFrOHXKhoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxNTk5OQ==", "bodyText": "Shall we refactor this method to have only single return?\nWe can set the value only if it is null and always return at the end this.textDocument", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493715999", "createdAt": "2020-09-23T16:09:22Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java", "diffHunk": "@@ -95,15 +94,7 @@ TextDocument textDocument() {\n             return this.textDocument;\n         }\n \n-        // TODO: The content should be loaded from a TextLoader\n-        Path documentPath = Paths.get(documentId().documentPath());\n-        try {\n-            String text = new String(Files.readAllBytes(documentPath), StandardCharsets.UTF_8);\n-            this.textDocument = TextDocuments.from(text);\n-        } catch (IOException e) {\n-            // TODO improve error handling\n-            throw new RuntimeException(\"Unable to read file: \" + documentPath);\n-        }\n+        this.textDocument = TextDocuments.from(this.content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTc0NA==", "bodyText": "Fixed in 0d89c8f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051744", "createdAt": "2020-09-24T05:44:10Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java", "diffHunk": "@@ -95,15 +94,7 @@ TextDocument textDocument() {\n             return this.textDocument;\n         }\n \n-        // TODO: The content should be loaded from a TextLoader\n-        Path documentPath = Paths.get(documentId().documentPath());\n-        try {\n-            String text = new String(Files.readAllBytes(documentPath), StandardCharsets.UTF_8);\n-            this.textDocument = TextDocuments.from(text);\n-        } catch (IOException e) {\n-            // TODO improve error handling\n-            throw new RuntimeException(\"Unable to read file: \" + documentPath);\n-        }\n+        this.textDocument = TextDocuments.from(this.content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxNTk5OQ=="}, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTkwNTg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoxMjoxNlrOHW2KCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoxMjoxNlrOHW2KCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxODAyNA==", "bodyText": "Shall we change the method name to the noun, instead of the verb since this act as a getter?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493718024", "createdAt": "2020-09-23T16:12:16Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -99,6 +102,18 @@ public boolean isDefaultModule() {\n         return moduleContext.isDefaultModule();\n     }\n \n+    public Project project() {\n+        return this.moduleContext.project();\n+    }\n+\n+    /** Returns an instance of the Module.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTkyNDg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoxNjo0NlrOHW2WGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo0NDowMFrOHXKhbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMTExNQ==", "bodyText": "If we do not allow null values for the value against a particular documentId key, let's use Map.containsKey API", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493721115", "createdAt": "2020-09-23T16:16:46Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTY5Mw==", "bodyText": "Fixed in 0d89c8f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051693", "createdAt": "2020-09-24T05:44:00Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMTExNQ=="}, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTkzNTg3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoxOToyN1rOHW2dCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo0Mzo0M1rOHXKhFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMjg5MQ==", "bodyText": "If we do not allow null values for the value against a particular documentId key, let's use Map.containsKey API", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493722891", "createdAt": "2020-09-23T16:19:27Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+                this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            } else {\n+                this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new source document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.srcDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new test document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addTestDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.testDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and removes the specified document from the new module.\n+         *\n+         * @param documentId documentId of the document to remove\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier removeDocument(DocumentId documentId) {\n+\n+            if (this.srcDocContextMap.get(documentId) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTYwNw==", "bodyText": "Fixed in 0d89c8f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051607", "createdAt": "2020-09-24T05:43:43Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+                this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            } else {\n+                this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new source document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.srcDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new test document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addTestDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.testDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and removes the specified document from the new module.\n+         *\n+         * @param documentId documentId of the document to remove\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier removeDocument(DocumentId documentId) {\n+\n+            if (this.srcDocContextMap.get(documentId) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMjg5MQ=="}, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk1Njg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNDo0NFrOHW2quA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo0MzozNFrOHXKg7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjM5Mg==", "bodyText": "If we do not allow null values in the map, let's use the Map.containsKey API", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493726392", "createdAt": "2020-09-23T16:24:44Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTU2Ng==", "bodyText": "Fixed in 0d89c8f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051566", "createdAt": "2020-09-24T05:43:34Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjM5Mg=="}, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk1ODk1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNToxMlrOHW2r7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo0MzozMFrOHXKg3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjcwMw==", "bodyText": "If we do not allow null values in the map, let's use the Map.containsKey API", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493726703", "createdAt": "2020-09-23T16:25:12Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+                this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            } else {\n+                this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new source document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.srcDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new test document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addTestDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.testDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and removes the specified document from the new module.\n+         *\n+         * @param documentId documentId of the document to remove\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier removeDocument(DocumentId documentId) {\n+\n+            if (this.srcDocContextMap.get(documentId) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTU0OQ==", "bodyText": "Fixed in 0d89c8f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051549", "createdAt": "2020-09-24T05:43:30Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Module.java", "diffHunk": "@@ -120,4 +135,114 @@ public Spliterator spliterator() {\n             return this.documentList.spliterator();\n         }\n     }\n+\n+    /**\n+     * Inner class that handles module modifications.\n+     */\n+    public static class Modifier {\n+        private ModuleId moduleId;\n+        private ModuleName moduleName;\n+        private Map<DocumentId, DocumentContext> srcDocContextMap;\n+        private Map<DocumentId, DocumentContext> testDocContextMap;\n+        private boolean isDefaultModule;\n+        private Set<ModuleDependency> moduleDependencies;\n+        private Package packageInstance;\n+        private Project project;\n+\n+\n+        private Modifier(Module oldModule) {\n+            moduleId = oldModule.moduleId();\n+            moduleName = oldModule.moduleName();\n+            srcDocContextMap = copySrcDocs(oldModule);\n+            testDocContextMap = copyTestDocs(oldModule);\n+            isDefaultModule = oldModule.isDefaultModule();\n+            moduleDependencies = new HashSet<>(oldModule.moduleDependencies());\n+            packageInstance = oldModule.packageInstance;\n+            project = oldModule.project();\n+        }\n+\n+        Modifier updateDocument(DocumentContext newDocContext) {\n+            if (this.srcDocContextMap.get(newDocContext.documentId()) != null) {\n+                this.srcDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            } else {\n+                this.testDocContextMap.put(newDocContext.documentId(), newDocContext);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new source document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.srcDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and adds a new test document to the new module.\n+         *\n+         * @param documentConfig configurations to create the document\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier addTestDocument(DocumentConfig documentConfig) {\n+            DocumentContext newDocumentContext = DocumentContext.from(documentConfig);\n+            this.testDocContextMap.put(newDocumentContext.documentId(), newDocumentContext);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a copy of the existing module and removes the specified document from the new module.\n+         *\n+         * @param documentId documentId of the document to remove\n+         * @return an instance of the Module.Modifier\n+         */\n+        public Modifier removeDocument(DocumentId documentId) {\n+\n+            if (this.srcDocContextMap.get(documentId) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjcwMw=="}, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk2NzgxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNzoxN1rOHW2xaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo0MzoyNFrOHXKguA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyODEwNw==", "bodyText": "Let's assign only if the textDocument is null and then we can use only one return,  since we use the same twice now", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493728107", "createdAt": "2020-09-23T16:27:17Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java", "diffHunk": "@@ -95,15 +94,7 @@ TextDocument textDocument() {\n             return this.textDocument;\n         }\n \n-        // TODO: The content should be loaded from a TextLoader\n-        Path documentPath = Paths.get(documentId().documentPath());\n-        try {\n-            String text = new String(Files.readAllBytes(documentPath), StandardCharsets.UTF_8);\n-            this.textDocument = TextDocuments.from(text);\n-        } catch (IOException e) {\n-            // TODO improve error handling\n-            throw new RuntimeException(\"Unable to read file: \" + documentPath);\n-        }\n+        this.textDocument = TextDocuments.from(this.content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTUxMg==", "bodyText": "Fixed in 0d89c8f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051512", "createdAt": "2020-09-24T05:43:24Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DocumentContext.java", "diffHunk": "@@ -95,15 +94,7 @@ TextDocument textDocument() {\n             return this.textDocument;\n         }\n \n-        // TODO: The content should be loaded from a TextLoader\n-        Path documentPath = Paths.get(documentId().documentPath());\n-        try {\n-            String text = new String(Files.readAllBytes(documentPath), StandardCharsets.UTF_8);\n-            this.textDocument = TextDocuments.from(text);\n-        } catch (IOException e) {\n-            // TODO improve error handling\n-            throw new RuntimeException(\"Unable to read file: \" + documentPath);\n-        }\n+        this.textDocument = TextDocuments.from(this.content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyODEwNw=="}, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk3NDI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyODo1M1rOHW21ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo0MzoxOVrOHXKgoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyOTEyNQ==", "bodyText": "extra indentation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493729125", "createdAt": "2020-09-23T16:28:53Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -103,4 +114,101 @@ public void resolveDependencies() {\n //    public BallerinaToml ballerinaToml() {\n //        return this.packageContext.ballerinaToml();\n //    }\n+\n+\n+    /** Returns an instance of the Package.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {\n+        return new Modifier(this);\n+    }\n+\n+    private static class ModuleIterable implements Iterable {\n+        private final Collection<Module> moduleList;\n+\n+        public ModuleIterable(Collection<Module> moduleList) {\n+            this.moduleList = moduleList;\n+        }\n+\n+        @Override\n+        public Iterator<Module> iterator() {\n+            return this.moduleList.iterator();\n+        }\n+\n+        @Override\n+        public Spliterator spliterator() {\n+            return this.moduleList.spliterator();\n+        }\n+    }\n+\n+    /**\n+     * Inner class that handles package modifications.\n+     */\n+    public static class Modifier {\n+        private PackageId packageId;\n+        private PackageName packageName;\n+        private Map<ModuleId, ModuleContext> moduleContextMap;\n+        private Project project;\n+\n+        public Modifier(Package oldPackage) {\n+            this.packageId = oldPackage.packageId();\n+            this.packageName = oldPackage.packageName();\n+             this.moduleContextMap = copyModules(oldPackage);\n+             this.project = oldPackage.project;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTQ4OQ==", "bodyText": "Fixed in 0d89c8f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051489", "createdAt": "2020-09-24T05:43:19Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -103,4 +114,101 @@ public void resolveDependencies() {\n //    public BallerinaToml ballerinaToml() {\n //        return this.packageContext.ballerinaToml();\n //    }\n+\n+\n+    /** Returns an instance of the Package.Modifier.\n+     *\n+     * @return  module modifier\n+     */\n+    public Modifier modify() {\n+        return new Modifier(this);\n+    }\n+\n+    private static class ModuleIterable implements Iterable {\n+        private final Collection<Module> moduleList;\n+\n+        public ModuleIterable(Collection<Module> moduleList) {\n+            this.moduleList = moduleList;\n+        }\n+\n+        @Override\n+        public Iterator<Module> iterator() {\n+            return this.moduleList.iterator();\n+        }\n+\n+        @Override\n+        public Spliterator spliterator() {\n+            return this.moduleList.spliterator();\n+        }\n+    }\n+\n+    /**\n+     * Inner class that handles package modifications.\n+     */\n+    public static class Modifier {\n+        private PackageId packageId;\n+        private PackageName packageName;\n+        private Map<ModuleId, ModuleContext> moduleContextMap;\n+        private Project project;\n+\n+        public Modifier(Package oldPackage) {\n+            this.packageId = oldPackage.packageId();\n+            this.packageName = oldPackage.packageName();\n+             this.moduleContextMap = copyModules(oldPackage);\n+             this.project = oldPackage.project;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyOTEyNQ=="}, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDAwNzU3OnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozNzoxN1rOHW3KWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo0MzowOVrOHXKgYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNDQ5MA==", "bodyText": "What if we use an Optional here, instead of returning null?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r493734490", "createdAt": "2020-09-23T16:37:17Z", "author": {"login": "nadeeshaan"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java", "diffHunk": "@@ -55,14 +65,56 @@ public static BuildProject loadProject(Path projectPath) {\n     private BuildProject(EnvironmentContext environmentContext, Path projectPath) {\n         super(environmentContext);\n         this.sourceRoot = projectPath;\n-        addPackage(projectPath.toString());\n+\n+        // load Ballerina.toml\n+        Path ballerinaTomlPath = this.sourceRoot.resolve(ProjectConstants.BALLERINA_TOML);\n+        BallerinaToml ballerinaToml;\n+        try {\n+            ballerinaToml = BallerinaTomlProcessor.parse(ballerinaTomlPath);\n+        } catch (IOException | TomlException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n \n         // Set default build options\n-//        if (this.context.currentPackage().ballerinaToml().getBuildOptions() != null) {\n-//            this.context.setBuildOptions(this.context.currentPackage().ballerinaToml().getBuildOptions());\n-//        } else {\n-//            this.context.setBuildOptions(new BuildOptions());\n-//        }\n+        if (ballerinaToml.getBuildOptions() != null) {\n+            this.setBuildOptions(ballerinaToml.getBuildOptions());\n+        } else {\n+            this.setBuildOptions(new BuildOptions());\n+        }\n+\n+        addPackage(projectPath.toString());\n+    }\n+\n+    public BuildOptions getBuildOptions() {\n+        return (BuildOptions) super.getBuildOptions();\n+    }\n+\n+    @Nullable\n+    public Path modulePath(ModuleId moduleId) {\n+        if (currentPackage().moduleIds().contains(moduleId)) {\n+            if (currentPackage().getDefaultModule().moduleId() == moduleId) {\n+                return sourceRoot;\n+            } else {\n+                return sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n+                        currentPackage().module(moduleId).moduleName().moduleNamePart());\n+            }\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MTQyNg==", "bodyText": "Fixed in 0d89c8f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26009#discussion_r494051426", "createdAt": "2020-09-24T05:43:09Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/directory/BuildProject.java", "diffHunk": "@@ -55,14 +65,56 @@ public static BuildProject loadProject(Path projectPath) {\n     private BuildProject(EnvironmentContext environmentContext, Path projectPath) {\n         super(environmentContext);\n         this.sourceRoot = projectPath;\n-        addPackage(projectPath.toString());\n+\n+        // load Ballerina.toml\n+        Path ballerinaTomlPath = this.sourceRoot.resolve(ProjectConstants.BALLERINA_TOML);\n+        BallerinaToml ballerinaToml;\n+        try {\n+            ballerinaToml = BallerinaTomlProcessor.parse(ballerinaTomlPath);\n+        } catch (IOException | TomlException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n \n         // Set default build options\n-//        if (this.context.currentPackage().ballerinaToml().getBuildOptions() != null) {\n-//            this.context.setBuildOptions(this.context.currentPackage().ballerinaToml().getBuildOptions());\n-//        } else {\n-//            this.context.setBuildOptions(new BuildOptions());\n-//        }\n+        if (ballerinaToml.getBuildOptions() != null) {\n+            this.setBuildOptions(ballerinaToml.getBuildOptions());\n+        } else {\n+            this.setBuildOptions(new BuildOptions());\n+        }\n+\n+        addPackage(projectPath.toString());\n+    }\n+\n+    public BuildOptions getBuildOptions() {\n+        return (BuildOptions) super.getBuildOptions();\n+    }\n+\n+    @Nullable\n+    public Path modulePath(ModuleId moduleId) {\n+        if (currentPackage().moduleIds().contains(moduleId)) {\n+            if (currentPackage().getDefaultModule().moduleId() == moduleId) {\n+                return sourceRoot;\n+            } else {\n+                return sourceRoot.resolve(ProjectConstants.MODULES_ROOT).resolve(\n+                        currentPackage().module(moduleId).moduleName().moduleNamePart());\n+            }\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNDQ5MA=="}, "originalCommit": {"oid": "9a7d6fed84e75b0bc66cf8289b98e0f1fbe3c791"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 13, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}