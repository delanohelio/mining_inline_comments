{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4Nzk2NDIy", "number": 25606, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDowNjo0N1rOEhEqsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToyOTowOFrOEj-GTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTE0OTI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDowNjo0N1rOHOL_Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDowNjo0N1rOHOL_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODU2Mw==", "bodyText": "Remove extra new lines", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484638563", "createdAt": "2020-09-08T04:06:47Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -949,15 +954,27 @@ public void visit(BLangBlockStmt astBlockStmt) {\n \n     @Override\n     public void visit(BLangSimpleVariableDef astVarDefStmt) {\n+        VarKind kind;\n+        if (Symbols.isFlagOn(astVarDefStmt.var.symbol.flags, Flags.DESTRUCTURED)) {\n+            kind = VarKind.SYNTHETIC;\n+        } else {\n+            kind = VarKind.LOCAL;\n+        }\n         BIRVariableDcl birVarDcl = new BIRVariableDcl(astVarDefStmt.pos, astVarDefStmt.var.symbol.type,\n-                this.env.nextLocalVarId(names), VarScope.FUNCTION, VarKind.LOCAL, astVarDefStmt.var.name.value);\n+                this.env.nextLocalVarId(names), VarScope.FUNCTION, kind, astVarDefStmt.var.name.value);\n         birVarDcl.startBB = this.env.enclBB;\n         this.varDclsByBlock.get(this.currentBlock).add(birVarDcl);\n         this.env.enclFunc.localVars.add(birVarDcl);\n         // We maintain a mapping from variable symbol to the bir_variable declaration.\n         // This is required to pull the correct bir_variable declaration for variable references.\n         this.env.symbolVarMap.put(astVarDefStmt.var.symbol, birVarDcl);\n \n+        BirScope newScope = new BirScope(this.currentScope.id + 1, this.currentScope, this.currentScope.function);\n+        birVarDcl.insScope = newScope;\n+        this.currentScope = newScope;\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20798d7da9626eeae6a460168c6ef100fa22176f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTE5Njc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDozOToxOFrOHOMa6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDozOToxOFrOHOMa6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0NTYwOA==", "bodyText": "Move out ot a method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484645608", "createdAt": "2020-09-08T04:39:18Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -2005,8 +2005,8 @@ public void visit(BLangTupleDestructure tupleDestructure) {\n         String name = \"tuple\";\n         final BLangSimpleVariable tuple =\n                 ASTBuilderUtil.createVariable(tupleDestructure.pos, name, runTimeType, null,\n-                                              new BVarSymbol(0, names.fromString(name), this.env.scope.owner.pkgID,\n-                                                             runTimeType, this.env.scope.owner, tupleDestructure.pos));\n+                        new BVarSymbol(Flags.DESTRUCTURED, names.fromString(name), this.env.scope.owner.pkgID,\n+                                runTimeType, this.env.scope.owner, tupleDestructure.pos));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20798d7da9626eeae6a460168c6ef100fa22176f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTIxOTQwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1MzoyOFrOHOMn4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1MzoyOFrOHOMn4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0ODkyOA==", "bodyText": "Remove this and use this in the JvmMethodGen", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484648928", "createdAt": "2020-09-08T04:53:28Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -91,8 +95,11 @@\n     public static final ResolvedTypeBuilder TYPE_BUILDER = new ResolvedTypeBuilder();\n     public static final String INITIAL_MEHOD_DESC = \"(Lorg/ballerinalang/jvm/scheduling/Strand;\";\n \n-    private JvmCodeGenUtil() {\n+    public static final String SCOPE_PREFIX = \"_SCOPE_\";\n+    private static BirScope lastScope = null;\n+    private static Set<BirScope> visitedScopesSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20798d7da9626eeae6a460168c6ef100fa22176f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTIzNTg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/internal/LabelGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTowMzo0MlrOHOMxkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTowMzo0MlrOHOMxkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MTQwOQ==", "bodyText": "Refactor this class names", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484651409", "createdAt": "2020-09-08T05:03:42Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/internal/LabelGenerator.java", "diffHunk": "@@ -42,4 +42,8 @@ public Label getLabel(String labelKey) {\n             return label;\n         }\n     }\n+\n+    public void putLabel(String labelKey, Label label) {\n+        this.bbLabels.put(labelKey, label);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20798d7da9626eeae6a460168c6ef100fa22176f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTI0MTYzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTowNzowMlrOHOM0xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTowNzowMlrOHOM0xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MjIzMA==", "bodyText": "writeBoolean()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484652230", "createdAt": "2020-09-08T05:07:02Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -71,6 +73,36 @@ void writeBBs(List<BIRBasicBlock> bbList) {\n         bbList.forEach(bb -> bb.accept(this));\n     }\n \n+    void writeScopes(List<BIRBasicBlock> bbList) {\n+        int instructionOffset = 0;\n+        BirScope currentScope = null;\n+        for (BIRBasicBlock bb : bbList) {\n+            for (BIRAbstractInstruction ins : bb.instructions) {\n+                instructionOffset++;\n+\n+                if (ins.scope == currentScope) {\n+                    continue;\n+                }\n+\n+                currentScope = ins.scope;\n+                writeScope(currentScope, instructionOffset);\n+            }\n+        }\n+    }\n+\n+    private void writeScope(BirScope currentScope, int instructionOffset) {\n+        buf.writeInt(currentScope.id);\n+        buf.writeInt(instructionOffset);\n+\n+        if (currentScope.parent != null) {\n+            buf.writeInt(1); // Parent available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20798d7da9626eeae6a460168c6ef100fa22176f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTI0NjQzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTowOToyOVrOHOM3cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTowOToyOVrOHOM3cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MjkxNQ==", "bodyText": "Write the number of scopes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r484652915", "createdAt": "2020-09-08T05:09:29Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -71,6 +73,36 @@ void writeBBs(List<BIRBasicBlock> bbList) {\n         bbList.forEach(bb -> bb.accept(this));\n     }\n \n+    void writeScopes(List<BIRBasicBlock> bbList) {\n+        int instructionOffset = 0;\n+        BirScope currentScope = null;\n+        for (BIRBasicBlock bb : bbList) {\n+            for (BIRAbstractInstruction ins : bb.instructions) {\n+                instructionOffset++;\n+\n+                if (ins.scope == currentScope) {\n+                    continue;\n+                }\n+\n+                currentScope = ins.scope;\n+                writeScope(currentScope, instructionOffset);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20798d7da9626eeae6a460168c6ef100fa22176f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzUzNDAyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTowMzoxMlrOHQB7aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjo1Nzo1OFrOHQmnPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3MDg1Nw==", "bodyText": "I think this count can also be written within intructionWriter as it is the one which calculates the total count.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r486570857", "createdAt": "2020-09-10T19:03:12Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -290,12 +292,23 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n             birbuf.writeBoolean(details.send);\n         }\n \n+        // Write the instruction vs scope table\n+        writeScopes(buf, scopebuf, funcInsWriter.getScopeCount());\n+\n         // Write length of the function body so that it can be skipped easily.\n         int length = birbuf.nioBuffer().limit();\n         buf.writeLong(length);\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeScopes(ByteBuf buf, ByteBuf scopebuf, int scopeCount) {\n+        int length = scopebuf.nioBuffer().limit();\n+        // 4 is the size of int which is the number of scopes that we are going to add to the beginning of the buffer\n+        buf.writeLong(length + 4);\n+        buf.writeInt(scopeCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "386c4306159bec9bec82dec46b7ab0a8ec216f5e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MTkwMQ==", "bodyText": "Since I'm writing the scopes to the buffer on the fly, to write the scope count I'll have to start a brand new buffer and write to it. I felt like thats an overkill. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487171901", "createdAt": "2020-09-11T16:57:58Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -290,12 +292,23 @@ private void writeFunction(ByteBuf buf, BIRTypeWriter typeWriter, BIRInstruction\n             birbuf.writeBoolean(details.send);\n         }\n \n+        // Write the instruction vs scope table\n+        writeScopes(buf, scopebuf, funcInsWriter.getScopeCount());\n+\n         // Write length of the function body so that it can be skipped easily.\n         int length = birbuf.nioBuffer().limit();\n         buf.writeLong(length);\n         buf.writeBytes(birbuf.nioBuffer().array(), 0, length);\n     }\n \n+    private void writeScopes(ByteBuf buf, ByteBuf scopebuf, int scopeCount) {\n+        int length = scopebuf.nioBuffer().limit();\n+        // 4 is the size of int which is the number of scopes that we are going to add to the beginning of the buffer\n+        buf.writeLong(length + 4);\n+        buf.writeInt(scopeCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU3MDg1Nw=="}, "originalCommit": {"oid": "386c4306159bec9bec82dec46b7ab0a8ec216f5e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzA2NzUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTozMTozOVrOHQjrdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDo0NzoxOVrOHQyj7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzgzMA==", "bodyText": "Can we move this varSymbol new instance creation logic to a method and call? Looks like there are 5-6 places the same is happening.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487123830", "createdAt": "2020-09-11T15:31:39Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1142,9 +1142,9 @@ public void visit(BLangTupleVariable varNode) {\n         String name = \"$tuple$\";\n         final BLangSimpleVariable tuple =\n                 ASTBuilderUtil.createVariable(varNode.pos, name, symTable.arrayAllType, null,\n-                                              new BVarSymbol(0, names.fromString(name), this.env.scope.owner.pkgID,\n-                                                             symTable.arrayAllType, this.env.scope.owner, varNode.pos,\n-                                                             VIRTUAL));\n+                        new BVarSymbol(Flags.DESTRUCTURED, names.fromString(name), this.env.scope.owner.pkgID,\n+                                symTable.arrayAllType, this.env.scope.owner, varNode.pos,\n+                                VIRTUAL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefede61c79fa7f0a1067d254f9437fe282d89d5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MDg4MA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487170880", "createdAt": "2020-09-11T16:56:05Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1142,9 +1142,9 @@ public void visit(BLangTupleVariable varNode) {\n         String name = \"$tuple$\";\n         final BLangSimpleVariable tuple =\n                 ASTBuilderUtil.createVariable(varNode.pos, name, symTable.arrayAllType, null,\n-                                              new BVarSymbol(0, names.fromString(name), this.env.scope.owner.pkgID,\n-                                                             symTable.arrayAllType, this.env.scope.owner, varNode.pos,\n-                                                             VIRTUAL));\n+                        new BVarSymbol(Flags.DESTRUCTURED, names.fromString(name), this.env.scope.owner.pkgID,\n+                                symTable.arrayAllType, this.env.scope.owner, varNode.pos,\n+                                VIRTUAL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzgzMA=="}, "originalCommit": {"oid": "eefede61c79fa7f0a1067d254f9437fe282d89d5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NzY2MA==", "bodyText": "Frontend team has merged a PR which identifies the desugard symbol. So took advantage of it and refactored to use it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487367660", "createdAt": "2020-09-12T04:47:19Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1142,9 +1142,9 @@ public void visit(BLangTupleVariable varNode) {\n         String name = \"$tuple$\";\n         final BLangSimpleVariable tuple =\n                 ASTBuilderUtil.createVariable(varNode.pos, name, symTable.arrayAllType, null,\n-                                              new BVarSymbol(0, names.fromString(name), this.env.scope.owner.pkgID,\n-                                                             symTable.arrayAllType, this.env.scope.owner, varNode.pos,\n-                                                             VIRTUAL));\n+                        new BVarSymbol(Flags.DESTRUCTURED, names.fromString(name), this.env.scope.owner.pkgID,\n+                                symTable.arrayAllType, this.env.scope.owner, varNode.pos,\n+                                VIRTUAL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMzgzMA=="}, "originalCommit": {"oid": "eefede61c79fa7f0a1067d254f9437fe282d89d5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI2NjA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo0NzoyN1rOHRQAPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjo1NDoyNVrOHRuoXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDA0NA==", "bodyText": "We only need the new buffer at function writing ? why it is needed here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r487850044", "createdAt": "2020-09-14T11:47:27Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -65,8 +65,9 @@ public BIRBinaryWriter(BIRNode.BIRPackage birPackage) {\n \n     public byte[] serialize() {\n         ByteBuf birbuf = Unpooled.buffer();\n+        ByteBuf scopebuf = Unpooled.buffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ef2f13b58ce0754190a16bf2a63921f0930dea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMDg0NQ==", "bodyText": "hmmm, looks like we have a new BIRInstructionWriter instance being created, which is not needed. Ideally, an BIRInstructionWriter is needed when writing the function body. I think the use for that is to call the writePosition method in that class.\nCan you just remove this new BIRInstructionWriter creation line here and use the writePosition method found in the BIRBinaryWriter class?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488130845", "createdAt": "2020-09-14T18:17:05Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -65,8 +65,9 @@ public BIRBinaryWriter(BIRNode.BIRPackage birPackage) {\n \n     public byte[] serialize() {\n         ByteBuf birbuf = Unpooled.buffer();\n+        ByteBuf scopebuf = Unpooled.buffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDA0NA=="}, "originalCommit": {"oid": "f1ef2f13b58ce0754190a16bf2a63921f0930dea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM1MTgzOA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488351838", "createdAt": "2020-09-15T02:54:25Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRBinaryWriter.java", "diffHunk": "@@ -65,8 +65,9 @@ public BIRBinaryWriter(BIRNode.BIRPackage birPackage) {\n \n     public byte[] serialize() {\n         ByteBuf birbuf = Unpooled.buffer();\n+        ByteBuf scopebuf = Unpooled.buffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDA0NA=="}, "originalCommit": {"oid": "f1ef2f13b58ce0754190a16bf2a63921f0930dea"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA2NjMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxNDowNlrOHRhCSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDowODoyM1rOHRvx9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyOTA5OQ==", "bodyText": "not sure your formatting setting is correct here? the new line should start from the same column level as the previous line for method arguments.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488129099", "createdAt": "2020-09-14T18:14:06Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -507,30 +511,68 @@ public static boolean isBallerinaBuiltinModule(String orgName, String moduleName\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static void generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                              int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                              String funcName,\n-                                              BIRNode.BIRBasicBlock bb) {\n+    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n+            int localVarOffset, AsyncDataCollector asyncDataCollector,\n+            String funcName,\n+            BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet, BirScope lastScope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ef2f13b58ce0754190a16bf2a63921f0930dea"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3MDY3Nw==", "bodyText": "I guess somethings wrong with my ide formatter. I'll check all the instances again", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488370677", "createdAt": "2020-09-15T04:08:23Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -507,30 +511,68 @@ public static boolean isBallerinaBuiltinModule(String orgName, String moduleName\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static void generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                              int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                              String funcName,\n-                                              BIRNode.BIRBasicBlock bb) {\n+    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n+            int localVarOffset, AsyncDataCollector asyncDataCollector,\n+            String funcName,\n+            BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet, BirScope lastScope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyOTA5OQ=="}, "originalCommit": {"oid": "f1ef2f13b58ce0754190a16bf2a63921f0930dea"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njk3NjAyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1NjoxM1rOHR8MMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoyMTozOVrOHSJ1LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDAwMA==", "bodyText": "method name may not be correct as it returns BirScope?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488574000", "createdAt": "2020-09-15T10:56:13Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -507,30 +511,70 @@ public static boolean isBallerinaBuiltinModule(String orgName, String moduleName\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static void generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                              int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                              String funcName,\n-                                              BIRNode.BIRBasicBlock bb) {\n+    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzQ4NQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797485", "createdAt": "2020-09-15T16:21:39Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -507,30 +511,70 @@ public static boolean isBallerinaBuiltinModule(String orgName, String moduleName\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static void generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                              int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                              String funcName,\n-                                              BIRNode.BIRBasicBlock bb) {\n+    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDAwMA=="}, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njk3Nzg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1Njo0NVrOHR8NUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoyMTozNVrOHSJ0-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDI5MA==", "bodyText": "Same here as well. Method name may not be correct as it returns BirScope?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488574290", "createdAt": "2020-09-15T10:56:45Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -507,30 +511,70 @@ public static boolean isBallerinaBuiltinModule(String orgName, String moduleName\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static void generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                              int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                              String funcName,\n-                                              BIRNode.BIRBasicBlock bb) {\n+    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n+                                                  int localVarOffset, AsyncDataCollector asyncDataCollector,\n+                                                  String funcName,\n+                                                  BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet,\n+                                                  BirScope lastScope) {\n+\n         int insCount = bb.instructions.size();\n         for (int i = 0; i < insCount; i++) {\n             Label insLabel = labelGen.getLabel(funcName + bb.id.value + \"ins\" + i);\n             mv.visitLabel(insLabel);\n             BIRInstruction inst = bb.instructions.get(i);\n             if (inst != null) {\n-                generateDiagnosticPos(((BIRNode) inst).pos, mv);\n+                lastScope = generateDiagnosticPos((BIRAbstractInstruction) inst, funcName, mv, labelGen,\n+                                                  visitedScopesSet, lastScope);\n                 instGen.generateInstructions(localVarOffset, asyncDataCollector, inst);\n             }\n         }\n+\n+        return lastScope;\n+    }\n+\n+    private static BirScope generateDiagnosticPos(BIRAbstractInstruction instruction, String funcName, MethodVisitor mv,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzQzMw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797433", "createdAt": "2020-09-15T16:21:35Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -507,30 +511,70 @@ public static boolean isBallerinaBuiltinModule(String orgName, String moduleName\n         return orgName.equals(\"ballerina\") && moduleName.equals(\"builtin\");\n     }\n \n-    public static void generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n-                                              int localVarOffset, AsyncDataCollector asyncDataCollector,\n-                                              String funcName,\n-                                              BIRNode.BIRBasicBlock bb) {\n+    public static BirScope generateBbInstructions(MethodVisitor mv, LabelGenerator labelGen, JvmInstructionGen instGen,\n+                                                  int localVarOffset, AsyncDataCollector asyncDataCollector,\n+                                                  String funcName,\n+                                                  BIRNode.BIRBasicBlock bb, Set<BirScope> visitedScopesSet,\n+                                                  BirScope lastScope) {\n+\n         int insCount = bb.instructions.size();\n         for (int i = 0; i < insCount; i++) {\n             Label insLabel = labelGen.getLabel(funcName + bb.id.value + \"ins\" + i);\n             mv.visitLabel(insLabel);\n             BIRInstruction inst = bb.instructions.get(i);\n             if (inst != null) {\n-                generateDiagnosticPos(((BIRNode) inst).pos, mv);\n+                lastScope = generateDiagnosticPos((BIRAbstractInstruction) inst, funcName, mv, labelGen,\n+                                                  visitedScopesSet, lastScope);\n                 instGen.generateInstructions(localVarOffset, asyncDataCollector, inst);\n             }\n         }\n+\n+        return lastScope;\n+    }\n+\n+    private static BirScope generateDiagnosticPos(BIRAbstractInstruction instruction, String funcName, MethodVisitor mv,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDI5MA=="}, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njk4MDM0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1NzoyOFrOHR8Ovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoyMToyOFrOHSJ0qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDY1NQ==", "bodyText": "we don't need this new constructor as discussed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488574655", "createdAt": "2020-09-15T10:57:28Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -57,20 +61,65 @@\n public class BIRInstructionWriter extends BIRVisitor {\n \n     private ByteBuf buf;\n+    private ByteBuf scopeBuf;\n     private ConstantPool cp;\n     private BIRBinaryWriter binaryWriter;\n+    private int instructionOffset;\n+    private Set<BirScope> completedScopeSet;\n+    private int scopeCount;\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+    BIRInstructionWriter(ByteBuf buf, ByteBuf scopeBuf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n         this.buf = buf;\n+        this.scopeBuf = scopeBuf;\n         this.binaryWriter = birBinaryWriter;\n         this.cp = cp;\n+        this.instructionOffset = 0;\n+        this.completedScopeSet = new HashSet<>();\n+        this.scopeCount = 0;\n+    }\n+\n+    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+        this(buf, null, cp, birBinaryWriter);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzM1NQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797355", "createdAt": "2020-09-15T16:21:28Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -57,20 +61,65 @@\n public class BIRInstructionWriter extends BIRVisitor {\n \n     private ByteBuf buf;\n+    private ByteBuf scopeBuf;\n     private ConstantPool cp;\n     private BIRBinaryWriter binaryWriter;\n+    private int instructionOffset;\n+    private Set<BirScope> completedScopeSet;\n+    private int scopeCount;\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+    BIRInstructionWriter(ByteBuf buf, ByteBuf scopeBuf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n         this.buf = buf;\n+        this.scopeBuf = scopeBuf;\n         this.binaryWriter = birBinaryWriter;\n         this.cp = cp;\n+        this.instructionOffset = 0;\n+        this.completedScopeSet = new HashSet<>();\n+        this.scopeCount = 0;\n+    }\n+\n+    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+        this(buf, null, cp, birBinaryWriter);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDY1NQ=="}, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njk4MTU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1Nzo1MlrOHR8Piw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoyMToyNFrOHSJ0cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDg1OQ==", "bodyText": "once you remove the constructor, this check will also be not needed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488574859", "createdAt": "2020-09-15T10:57:52Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -57,20 +61,65 @@\n public class BIRInstructionWriter extends BIRVisitor {\n \n     private ByteBuf buf;\n+    private ByteBuf scopeBuf;\n     private ConstantPool cp;\n     private BIRBinaryWriter binaryWriter;\n+    private int instructionOffset;\n+    private Set<BirScope> completedScopeSet;\n+    private int scopeCount;\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+    BIRInstructionWriter(ByteBuf buf, ByteBuf scopeBuf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n         this.buf = buf;\n+        this.scopeBuf = scopeBuf;\n         this.binaryWriter = birBinaryWriter;\n         this.cp = cp;\n+        this.instructionOffset = 0;\n+        this.completedScopeSet = new HashSet<>();\n+        this.scopeCount = 0;\n+    }\n+\n+    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+        this(buf, null, cp, birBinaryWriter);\n+    }\n+\n+    public int getScopeCount() {\n+        return scopeCount;\n     }\n \n     void writeBBs(List<BIRBasicBlock> bbList) {\n         buf.writeInt(bbList.size());\n         bbList.forEach(bb -> bb.accept(this));\n     }\n \n+    void writeScopes(BIRAbstractInstruction instruction) {\n+        if (scopeBuf == null) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzI5OQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797299", "createdAt": "2020-09-15T16:21:24Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -57,20 +61,65 @@\n public class BIRInstructionWriter extends BIRVisitor {\n \n     private ByteBuf buf;\n+    private ByteBuf scopeBuf;\n     private ConstantPool cp;\n     private BIRBinaryWriter binaryWriter;\n+    private int instructionOffset;\n+    private Set<BirScope> completedScopeSet;\n+    private int scopeCount;\n \n-    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+    BIRInstructionWriter(ByteBuf buf, ByteBuf scopeBuf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n         this.buf = buf;\n+        this.scopeBuf = scopeBuf;\n         this.binaryWriter = birBinaryWriter;\n         this.cp = cp;\n+        this.instructionOffset = 0;\n+        this.completedScopeSet = new HashSet<>();\n+        this.scopeCount = 0;\n+    }\n+\n+    BIRInstructionWriter(ByteBuf buf, ConstantPool cp, BIRBinaryWriter birBinaryWriter) {\n+        this(buf, null, cp, birBinaryWriter);\n+    }\n+\n+    public int getScopeCount() {\n+        return scopeCount;\n     }\n \n     void writeBBs(List<BIRBasicBlock> bbList) {\n         buf.writeInt(bbList.size());\n         bbList.forEach(bb -> bb.accept(this));\n     }\n \n+    void writeScopes(BIRAbstractInstruction instruction) {\n+        if (scopeBuf == null) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NDg1OQ=="}, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njk4NDMyOnYy", "diffSide": "RIGHT", "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1ODo0MFrOHR8RQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoyMToxOVrOHSJ0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NTI5Nw==", "bodyText": "shall we inverse the if condition here?\nif (visitedScopes.contains(instructionScope)) {\ncontinue;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488575297", "createdAt": "2020-09-15T10:58:40Z", "author": {"login": "Kishanthan"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -153,6 +158,73 @@ private static void assertFunctions(BIRNode.BIRPackage expectedBIR, Bir.Module b\n             // assert basic blocks\n             assertBasicBlocks(actualFunctionBody.functionBasicBlocksInfo(), expectedFunction.basicBlocks,\n                     constantPoolEntries);\n+\n+            assertScopes(actualFunction.scopeEntries(), expectedFunction);\n+        }\n+    }\n+\n+    private static void assertScopes(ArrayList<Bir.ScopeEntry> scopeEntries, BIRNode.BIRFunction function) {\n+        int instructionOffset = 0;\n+        Map<Integer, ExpectedScopeEntry> scopes = new HashMap<>();\n+        Set<BirScope> visitedScopes = new HashSet<>();\n+\n+        // Collect scope vs starting instruction offset\n+        Collection<List<BIRNode.BIRBasicBlock>> basicBlocksCollection = function.parameters.values();\n+        for (List<BIRNode.BIRBasicBlock> basicBlocks : basicBlocksCollection) {\n+            instructionOffset = generateExpectedScopeEntries(basicBlocks, instructionOffset, scopes, visitedScopes);\n+        }\n+\n+        generateExpectedScopeEntries(function.basicBlocks, instructionOffset, scopes, visitedScopes);\n+\n+        for (Bir.ScopeEntry actualScopeEntry : scopeEntries) {\n+            ExpectedScopeEntry expectedScopeEntry = scopes.get(actualScopeEntry.currentScopeIndex());\n+            Assert.assertNotNull(expectedScopeEntry);\n+\n+            Assert.assertEquals(actualScopeEntry.instructionOffset(), expectedScopeEntry.instructionOffset);\n+            Assert.assertEquals(actualScopeEntry.hasParent(), expectedScopeEntry.hasParent);\n+            Assert.assertEquals(actualScopeEntry.parentScopeIndex(), expectedScopeEntry.parentId);\n+        }\n+    }\n+\n+    private static int generateExpectedScopeEntries(List<BIRNode.BIRBasicBlock> bbList, int instructionOffset,\n+            Map<Integer, ExpectedScopeEntry> scopes, Set<BirScope> visitedScopes) {\n+        for (BIRNode.BIRBasicBlock bb : bbList) {\n+            for (BIRAbstractInstruction instruction : bb.instructions) {\n+                instructionOffset++;\n+                BirScope instructionScope = instruction.scope;\n+\n+                if (!visitedScopes.contains(instructionScope)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzIzOQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r488797239", "createdAt": "2020-09-15T16:21:19Z", "author": {"login": "dulvinw"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -153,6 +158,73 @@ private static void assertFunctions(BIRNode.BIRPackage expectedBIR, Bir.Module b\n             // assert basic blocks\n             assertBasicBlocks(actualFunctionBody.functionBasicBlocksInfo(), expectedFunction.basicBlocks,\n                     constantPoolEntries);\n+\n+            assertScopes(actualFunction.scopeEntries(), expectedFunction);\n+        }\n+    }\n+\n+    private static void assertScopes(ArrayList<Bir.ScopeEntry> scopeEntries, BIRNode.BIRFunction function) {\n+        int instructionOffset = 0;\n+        Map<Integer, ExpectedScopeEntry> scopes = new HashMap<>();\n+        Set<BirScope> visitedScopes = new HashSet<>();\n+\n+        // Collect scope vs starting instruction offset\n+        Collection<List<BIRNode.BIRBasicBlock>> basicBlocksCollection = function.parameters.values();\n+        for (List<BIRNode.BIRBasicBlock> basicBlocks : basicBlocksCollection) {\n+            instructionOffset = generateExpectedScopeEntries(basicBlocks, instructionOffset, scopes, visitedScopes);\n+        }\n+\n+        generateExpectedScopeEntries(function.basicBlocks, instructionOffset, scopes, visitedScopes);\n+\n+        for (Bir.ScopeEntry actualScopeEntry : scopeEntries) {\n+            ExpectedScopeEntry expectedScopeEntry = scopes.get(actualScopeEntry.currentScopeIndex());\n+            Assert.assertNotNull(expectedScopeEntry);\n+\n+            Assert.assertEquals(actualScopeEntry.instructionOffset(), expectedScopeEntry.instructionOffset);\n+            Assert.assertEquals(actualScopeEntry.hasParent(), expectedScopeEntry.hasParent);\n+            Assert.assertEquals(actualScopeEntry.parentScopeIndex(), expectedScopeEntry.parentId);\n+        }\n+    }\n+\n+    private static int generateExpectedScopeEntries(List<BIRNode.BIRBasicBlock> bbList, int instructionOffset,\n+            Map<Integer, ExpectedScopeEntry> scopes, Set<BirScope> visitedScopes) {\n+        for (BIRNode.BIRBasicBlock bb : bbList) {\n+            for (BIRAbstractInstruction instruction : bb.instructions) {\n+                instructionOffset++;\n+                BirScope instructionScope = instruction.scope;\n+\n+                if (!visitedScopes.contains(instructionScope)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NTI5Nw=="}, "originalCommit": {"oid": "d4b246951dac26fde77a38172195110cb413130b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ5OTA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRWriterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzoyNjo0MlrOHSerCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzoyNjo0MlrOHSerCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzODk1Mw==", "bodyText": "is this constructor needed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489138953", "createdAt": "2020-09-16T03:26:42Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRWriterUtils.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.writer;\n+\n+import io.netty.buffer.ByteBuf;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+/**\n+ * Common functions used in BIR writers.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRWriterUtils {\n+\n+    public BIRWriterUtils() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5354c74ff4b28d715c466543c0b14005718515b6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTEyOTQwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BirScope.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1MDoyMlrOHSkgVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODoxMzozMVrOHSlW6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNDUxNw==", "bodyText": "shall we have getter setter instead of having public variables?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489234517", "createdAt": "2020-09-16T07:50:22Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BirScope.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * Hold the scope of the instruction w.r.t variable declarations.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BirScope {\n+    public int id;\n+    public BirScope parent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb7be8baebd712e8045c975b3d46b816d613b31"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0ODQ4OA==", "bodyText": "This is used as a data class without any functionality. Using getters setters would be too much imo. I'll make these final instead.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489248488", "createdAt": "2020-09-16T08:13:31Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BirScope.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * Hold the scope of the instruction w.r.t variable declarations.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BirScope {\n+    public int id;\n+    public BirScope parent;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNDUxNw=="}, "originalCommit": {"oid": "0cb7be8baebd712e8045c975b3d46b816d613b31"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTEzODMyOnYy", "diffSide": "RIGHT", "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1Mjo0MlrOHSkl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODoxMzozNFrOHSlW_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNTkyOA==", "bodyText": "shall we have getter setter instead of having public variables? If it is a Immutable class let's make them final", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489235928", "createdAt": "2020-09-16T07:52:42Z", "author": {"login": "riyafa"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -590,4 +665,18 @@ Bir getActualBIR() {\n             return actualBIR;\n         }\n     }\n+\n+    static class ExpectedScopeEntry {\n+        public int id;\n+        public int instructionOffset;\n+        public int hasParent;\n+        public Integer parentId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb7be8baebd712e8045c975b3d46b816d613b31"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0ODUxMA==", "bodyText": "This is used as a data class without any functionality. Using getters setters would be too much imo. I'll make these final instead.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489248510", "createdAt": "2020-09-16T08:13:34Z", "author": {"login": "dulvinw"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -590,4 +665,18 @@ Bir getActualBIR() {\n             return actualBIR;\n         }\n     }\n+\n+    static class ExpectedScopeEntry {\n+        public int id;\n+        public int instructionOffset;\n+        public int hasParent;\n+        public Integer parentId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNTkyOA=="}, "originalCommit": {"oid": "0cb7be8baebd712e8045c975b3d46b816d613b31"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE1NzE2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/bir/bir-dump/cacheInserts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1NzoyN1rOHSkxVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODoxMjowMVrOHSlTgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzODg3MA==", "bodyText": "Just for my clarity what does the new SYNTHETIC type mean? I think I have explicitly checked for LOCAL types and temp types when reusing variables during optimization. Using a new type might break all those code. There might be other places as well. Shall we also mention in the PR description on the need to introduce this new type as it appears to be a big change", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489238870", "createdAt": "2020-09-16T07:57:27Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/bir/bir-dump/cacheInserts", "diffHunk": "@@ -8,57 +8,57 @@ public cacheInserts function() -> () {\n     %6(TEMP) string;\n     %7(TEMP) float;\n     %8(LOCAL) ballerina/cache:2.0.0:Cache;\n-    %9(LOCAL) ballerina/cache:2.0.0:Cache;\n+    %9(SYNTHETIC) ballerina/cache:2.0.0:Cache;\n     %13(TEMP) ();\n-    %15(LOCAL) ();\n-    %16(LOCAL) error{map<anydata | readonly>} | ();\n+    %15(SYNTHETIC) ();\n+    %16(SYNTHETIC) error{map<anydata | readonly>} | ();\n     %18(TEMP) string;\n     %19(TEMP) any;\n     %20(TEMP) string;\n     %23(TEMP) ();\n     %24(TEMP) boolean;\n-    %25(LOCAL) ();\n-    %30(LOCAL) error;\n-    %35(LOCAL) ();\n-    %36(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %45(LOCAL) ();\n-    %50(LOCAL) error;\n-    %55(LOCAL) ();\n-    %56(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %65(LOCAL) ();\n-    %70(LOCAL) error;\n-    %75(LOCAL) ();\n-    %76(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %85(LOCAL) ();\n-    %90(LOCAL) error;\n-    %95(LOCAL) ();\n-    %96(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %105(LOCAL) ();\n-    %110(LOCAL) error;\n-    %115(LOCAL) ();\n-    %116(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %125(LOCAL) ();\n-    %130(LOCAL) error;\n-    %135(LOCAL) ();\n-    %136(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %145(LOCAL) ();\n-    %150(LOCAL) error;\n-    %155(LOCAL) ();\n-    %156(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %165(LOCAL) ();\n-    %170(LOCAL) error;\n-    %175(LOCAL) ();\n-    %176(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %185(LOCAL) ();\n-    %190(LOCAL) error;\n-    %195(LOCAL) ();\n-    %196(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %205(LOCAL) ();\n-    %210(LOCAL) error;\n-    %215(LOCAL) ();\n-    %216(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %225(LOCAL) ();\n-    %230(LOCAL) error;\n+    %25(SYNTHETIC) ();\n+    %30(SYNTHETIC) error;\n+    %35(SYNTHETIC) ();\n+    %36(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %45(SYNTHETIC) ();\n+    %50(SYNTHETIC) error;\n+    %55(SYNTHETIC) ();\n+    %56(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %65(SYNTHETIC) ();\n+    %70(SYNTHETIC) error;\n+    %75(SYNTHETIC) ();\n+    %76(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %85(SYNTHETIC) ();\n+    %90(SYNTHETIC) error;\n+    %95(SYNTHETIC) ();\n+    %96(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %105(SYNTHETIC) ();\n+    %110(SYNTHETIC) error;\n+    %115(SYNTHETIC) ();\n+    %116(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %125(SYNTHETIC) ();\n+    %130(SYNTHETIC) error;\n+    %135(SYNTHETIC) ();\n+    %136(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %145(SYNTHETIC) ();\n+    %150(SYNTHETIC) error;\n+    %155(SYNTHETIC) ();\n+    %156(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %165(SYNTHETIC) ();\n+    %170(SYNTHETIC) error;\n+    %175(SYNTHETIC) ();\n+    %176(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %185(SYNTHETIC) ();\n+    %190(SYNTHETIC) error;\n+    %195(SYNTHETIC) ();\n+    %196(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %205(SYNTHETIC) ();\n+    %210(SYNTHETIC) error;\n+    %215(SYNTHETIC) ();\n+    %216(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %225(SYNTHETIC) ();\n+    %230(SYNTHETIC) error;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb7be8baebd712e8045c975b3d46b816d613b31"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NzYxNg==", "bodyText": "Synthetic variables are the generated variables which we add in the desugar phase. These aint temporary variables w.r.t CBE and not LOCAL variables w.r.t CFE. Hence the new type", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489247616", "createdAt": "2020-09-16T08:12:01Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/bir/bir-dump/cacheInserts", "diffHunk": "@@ -8,57 +8,57 @@ public cacheInserts function() -> () {\n     %6(TEMP) string;\n     %7(TEMP) float;\n     %8(LOCAL) ballerina/cache:2.0.0:Cache;\n-    %9(LOCAL) ballerina/cache:2.0.0:Cache;\n+    %9(SYNTHETIC) ballerina/cache:2.0.0:Cache;\n     %13(TEMP) ();\n-    %15(LOCAL) ();\n-    %16(LOCAL) error{map<anydata | readonly>} | ();\n+    %15(SYNTHETIC) ();\n+    %16(SYNTHETIC) error{map<anydata | readonly>} | ();\n     %18(TEMP) string;\n     %19(TEMP) any;\n     %20(TEMP) string;\n     %23(TEMP) ();\n     %24(TEMP) boolean;\n-    %25(LOCAL) ();\n-    %30(LOCAL) error;\n-    %35(LOCAL) ();\n-    %36(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %45(LOCAL) ();\n-    %50(LOCAL) error;\n-    %55(LOCAL) ();\n-    %56(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %65(LOCAL) ();\n-    %70(LOCAL) error;\n-    %75(LOCAL) ();\n-    %76(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %85(LOCAL) ();\n-    %90(LOCAL) error;\n-    %95(LOCAL) ();\n-    %96(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %105(LOCAL) ();\n-    %110(LOCAL) error;\n-    %115(LOCAL) ();\n-    %116(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %125(LOCAL) ();\n-    %130(LOCAL) error;\n-    %135(LOCAL) ();\n-    %136(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %145(LOCAL) ();\n-    %150(LOCAL) error;\n-    %155(LOCAL) ();\n-    %156(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %165(LOCAL) ();\n-    %170(LOCAL) error;\n-    %175(LOCAL) ();\n-    %176(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %185(LOCAL) ();\n-    %190(LOCAL) error;\n-    %195(LOCAL) ();\n-    %196(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %205(LOCAL) ();\n-    %210(LOCAL) error;\n-    %215(LOCAL) ();\n-    %216(LOCAL) ballerina/cache:2.0.0:CacheError | ();\n-    %225(LOCAL) ();\n-    %230(LOCAL) error;\n+    %25(SYNTHETIC) ();\n+    %30(SYNTHETIC) error;\n+    %35(SYNTHETIC) ();\n+    %36(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %45(SYNTHETIC) ();\n+    %50(SYNTHETIC) error;\n+    %55(SYNTHETIC) ();\n+    %56(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %65(SYNTHETIC) ();\n+    %70(SYNTHETIC) error;\n+    %75(SYNTHETIC) ();\n+    %76(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %85(SYNTHETIC) ();\n+    %90(SYNTHETIC) error;\n+    %95(SYNTHETIC) ();\n+    %96(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %105(SYNTHETIC) ();\n+    %110(SYNTHETIC) error;\n+    %115(SYNTHETIC) ();\n+    %116(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %125(SYNTHETIC) ();\n+    %130(SYNTHETIC) error;\n+    %135(SYNTHETIC) ();\n+    %136(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %145(SYNTHETIC) ();\n+    %150(SYNTHETIC) error;\n+    %155(SYNTHETIC) ();\n+    %156(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %165(SYNTHETIC) ();\n+    %170(SYNTHETIC) error;\n+    %175(SYNTHETIC) ();\n+    %176(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %185(SYNTHETIC) ();\n+    %190(SYNTHETIC) error;\n+    %195(SYNTHETIC) ();\n+    %196(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %205(SYNTHETIC) ();\n+    %210(SYNTHETIC) error;\n+    %215(SYNTHETIC) ();\n+    %216(SYNTHETIC) ballerina/cache:2.0.0:CacheError | ();\n+    %225(SYNTHETIC) ();\n+    %230(SYNTHETIC) error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzODg3MA=="}, "originalCommit": {"oid": "0cb7be8baebd712e8045c975b3d46b816d613b31"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTUzMDM5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToyOTowOFrOHSoWcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjowNDozNFrOHStmaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA==", "bodyText": "Do we have to do this change? What if we leave it as LOCAL ? @dulvinw @riyafa", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489297520", "createdAt": "2020-09-16T09:29:08Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1115,15 +1121,25 @@ public void visit(BLangFail failNode) {\n \n     @Override\n     public void visit(BLangSimpleVariableDef astVarDefStmt) {\n+        VarKind kind;\n+        if (astVarDefStmt.var.symbol.origin == SymbolOrigin.VIRTUAL) {\n+            kind = VarKind.SYNTHETIC;\n+        } else {\n+            kind = VarKind.LOCAL;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55dca2644e867fc517e9c703d6b5510b7c6b9d57"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyODYyOA==", "bodyText": "I need this varkind to stop generating localvariables at the codegen phase.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489328628", "createdAt": "2020-09-16T10:20:20Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1115,15 +1121,25 @@ public void visit(BLangFail failNode) {\n \n     @Override\n     public void visit(BLangSimpleVariableDef astVarDefStmt) {\n+        VarKind kind;\n+        if (astVarDefStmt.var.symbol.origin == SymbolOrigin.VIRTUAL) {\n+            kind = VarKind.SYNTHETIC;\n+        } else {\n+            kind = VarKind.LOCAL;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA=="}, "originalCommit": {"oid": "55dca2644e867fc517e9c703d6b5510b7c6b9d57"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2NjU0MQ==", "bodyText": "ok. so @riyafa, if we update the liveness analysis phase to look for both SYNTHETIC and LOCAL vars, will that solve your issue?\nBtw, hows the BIR optimization test cases are passing?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489366541", "createdAt": "2020-09-16T11:33:21Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1115,15 +1121,25 @@ public void visit(BLangFail failNode) {\n \n     @Override\n     public void visit(BLangSimpleVariableDef astVarDefStmt) {\n+        VarKind kind;\n+        if (astVarDefStmt.var.symbol.origin == SymbolOrigin.VIRTUAL) {\n+            kind = VarKind.SYNTHETIC;\n+        } else {\n+            kind = VarKind.LOCAL;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA=="}, "originalCommit": {"oid": "55dca2644e867fc517e9c703d6b5510b7c6b9d57"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4Mjg0Mw==", "bodyText": "Because the test cases have been modified in this PR. Please create an issue to fix this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489382843", "createdAt": "2020-09-16T12:03:10Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1115,15 +1121,25 @@ public void visit(BLangFail failNode) {\n \n     @Override\n     public void visit(BLangSimpleVariableDef astVarDefStmt) {\n+        VarKind kind;\n+        if (astVarDefStmt.var.symbol.origin == SymbolOrigin.VIRTUAL) {\n+            kind = VarKind.SYNTHETIC;\n+        } else {\n+            kind = VarKind.LOCAL;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA=="}, "originalCommit": {"oid": "55dca2644e867fc517e9c703d6b5510b7c6b9d57"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4MzUyOQ==", "bodyText": "Maybe there are other places that rely on these checks. We might need to make sure we create issues for those cases as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25606#discussion_r489383529", "createdAt": "2020-09-16T12:04:34Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1115,15 +1121,25 @@ public void visit(BLangFail failNode) {\n \n     @Override\n     public void visit(BLangSimpleVariableDef astVarDefStmt) {\n+        VarKind kind;\n+        if (astVarDefStmt.var.symbol.origin == SymbolOrigin.VIRTUAL) {\n+            kind = VarKind.SYNTHETIC;\n+        } else {\n+            kind = VarKind.LOCAL;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NzUyMA=="}, "originalCommit": {"oid": "55dca2644e867fc517e9c703d6b5510b7c6b9d57"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 182, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}