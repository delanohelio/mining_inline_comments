{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMjcyMDMy", "number": 20845, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNToxODozN1rODdNtGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNToyNzozMlrODdNxsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTU5ODMzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/FromClauseNode.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNToxODozN1rOFlsDmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTozMDo0MlrOFlsNOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MzQ1MA==", "bodyText": "Need to add version info", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375063450", "createdAt": "2020-02-05T05:18:37Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/FromClauseNode.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.model.clauses;\n+\n+import org.ballerinalang.model.tree.Node;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.statements.VariableDefinitionNode;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe62db700616a9c5150087fb801eceb719097ea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MzU2Mw==", "bodyText": "applies to other files as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375063563", "createdAt": "2020-02-05T05:19:09Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/FromClauseNode.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.model.clauses;\n+\n+import org.ballerinalang.model.tree.Node;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.statements.VariableDefinitionNode;\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MzQ1MA=="}, "originalCommit": {"oid": "afe62db700616a9c5150087fb801eceb719097ea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTkxNA==", "bodyText": "Done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375065914", "createdAt": "2020-02-05T05:30:42Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/FromClauseNode.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.model.clauses;\n+\n+import org.ballerinalang.model.tree.Node;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.statements.VariableDefinitionNode;\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MzQ1MA=="}, "originalCommit": {"oid": "afe62db700616a9c5150087fb801eceb719097ea"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTYwMDI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/QueryExpressionNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNToyMDoxNlrOFlsE3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTozMDo1MFrOFlsNXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2Mzc3NQ==", "bodyText": "IMO the description is not meaningful", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375063775", "createdAt": "2020-02-05T05:20:16Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/QueryExpressionNode.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+import org.ballerinalang.model.clauses.FromClauseNode;\n+import org.ballerinalang.model.clauses.SelectClauseNode;\n+import org.ballerinalang.model.clauses.WhereClauseNode;\n+\n+import java.util.List;\n+\n+/**\n+ * Expression of (expression).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe62db700616a9c5150087fb801eceb719097ea"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTk1MQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375065951", "createdAt": "2020-02-05T05:30:50Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/QueryExpressionNode.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+import org.ballerinalang.model.clauses.FromClauseNode;\n+import org.ballerinalang.model.clauses.SelectClauseNode;\n+import org.ballerinalang.model.clauses.WhereClauseNode;\n+\n+import java.util.List;\n+\n+/**\n+ * Expression of (expression).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2Mzc3NQ=="}, "originalCommit": {"oid": "afe62db700616a9c5150087fb801eceb719097ea"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTYwNTk0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNToyNDozM1rOFlsIOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTozMToyNFrOFlsN1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NDYzMw==", "bodyText": "Why do we set this field to true always?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375064633", "createdAt": "2020-02-05T05:24:33Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4324,6 +4328,139 @@ public void visit(BLangStatementExpression bLangStatementExpression) {\n         result = bLangStatementExpression;\n     }\n \n+    @Override\n+    public void visit(BLangQueryExpr queryExpr) {\n+        List<BLangFromClause> fromClauseList = queryExpr.fromClauseList;\n+        BLangFromClause fromClause = fromClauseList.get(0);\n+        BLangSelectClause selectClause = queryExpr.selectClause;\n+        List<BLangWhereClause> whereClauseList = queryExpr.whereClauseList;\n+        DiagnosticPos pos = fromClause.pos;\n+\n+        // Create Foreach statement\n+        //\n+        // Below query expression :\n+        //      from var person in personList\n+        //\n+        // changes as,\n+        //      foreach var person in personList {\n+        //          ....\n+        //      }\n+\n+        BLangForeach leafForEach = null;\n+        BLangForeach parentForEach = null;\n+\n+        for (BLangFromClause bLangFromClause : fromClauseList) {\n+            BLangForeach foreach = (BLangForeach) TreeBuilder.createForeachNode();\n+            foreach.pos = queryExpr.pos;\n+            foreach.collection = bLangFromClause.collection;\n+            types.setForeachTypedBindingPatternType(foreach);\n+\n+            foreach.variableDefinitionNode = bLangFromClause.variableDefinitionNode;\n+            foreach.isDeclaredWithVar = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe62db700616a9c5150087fb801eceb719097ea"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NjA2OA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375066068", "createdAt": "2020-02-05T05:31:24Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4324,6 +4328,139 @@ public void visit(BLangStatementExpression bLangStatementExpression) {\n         result = bLangStatementExpression;\n     }\n \n+    @Override\n+    public void visit(BLangQueryExpr queryExpr) {\n+        List<BLangFromClause> fromClauseList = queryExpr.fromClauseList;\n+        BLangFromClause fromClause = fromClauseList.get(0);\n+        BLangSelectClause selectClause = queryExpr.selectClause;\n+        List<BLangWhereClause> whereClauseList = queryExpr.whereClauseList;\n+        DiagnosticPos pos = fromClause.pos;\n+\n+        // Create Foreach statement\n+        //\n+        // Below query expression :\n+        //      from var person in personList\n+        //\n+        // changes as,\n+        //      foreach var person in personList {\n+        //          ....\n+        //      }\n+\n+        BLangForeach leafForEach = null;\n+        BLangForeach parentForEach = null;\n+\n+        for (BLangFromClause bLangFromClause : fromClauseList) {\n+            BLangForeach foreach = (BLangForeach) TreeBuilder.createForeachNode();\n+            foreach.pos = queryExpr.pos;\n+            foreach.collection = bLangFromClause.collection;\n+            types.setForeachTypedBindingPatternType(foreach);\n+\n+            foreach.variableDefinitionNode = bLangFromClause.variableDefinitionNode;\n+            foreach.isDeclaredWithVar = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NDYzMw=="}, "originalCommit": {"oid": "afe62db700616a9c5150087fb801eceb719097ea"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTYxMDA4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNToyNzozMlrOFlsKpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTozMzowOFrOFlsPJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTI1NQ==", "bodyText": "this is always not null after typechecker?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375065255", "createdAt": "2020-02-05T05:27:32Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4324,6 +4328,139 @@ public void visit(BLangStatementExpression bLangStatementExpression) {\n         result = bLangStatementExpression;\n     }\n \n+    @Override\n+    public void visit(BLangQueryExpr queryExpr) {\n+        List<BLangFromClause> fromClauseList = queryExpr.fromClauseList;\n+        BLangFromClause fromClause = fromClauseList.get(0);\n+        BLangSelectClause selectClause = queryExpr.selectClause;\n+        List<BLangWhereClause> whereClauseList = queryExpr.whereClauseList;\n+        DiagnosticPos pos = fromClause.pos;\n+\n+        // Create Foreach statement\n+        //\n+        // Below query expression :\n+        //      from var person in personList\n+        //\n+        // changes as,\n+        //      foreach var person in personList {\n+        //          ....\n+        //      }\n+\n+        BLangForeach leafForEach = null;\n+        BLangForeach parentForEach = null;\n+\n+        for (BLangFromClause bLangFromClause : fromClauseList) {\n+            BLangForeach foreach = (BLangForeach) TreeBuilder.createForeachNode();\n+            foreach.pos = queryExpr.pos;\n+            foreach.collection = bLangFromClause.collection;\n+            types.setForeachTypedBindingPatternType(foreach);\n+\n+            foreach.variableDefinitionNode = bLangFromClause.variableDefinitionNode;\n+            foreach.isDeclaredWithVar = true;\n+\n+            if (leafForEach != null) {\n+                BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n+                foreachBody.addStatement(foreach);\n+                leafForEach.setBody(foreachBody);\n+            } else {\n+                parentForEach = foreach;\n+            }\n+\n+            leafForEach = foreach;\n+        }\n+\n+        BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BType outputArrayType;\n+        if (selectClause.expression  != null && selectClause.expression.type != null) {\n+            outputArrayType = new BArrayType(selectClause.expression.type);\n+        } else {\n+            outputArrayType = fromClause.varType;\n+        }\n+\n+        BLangListConstructorExpr emptyArrayExpr = ASTBuilderUtil.createEmptyArrayLiteral(pos,\n+                (BArrayType) outputArrayType);\n+        BVarSymbol emptyArrayVarSymbol = new BVarSymbol(0, new Name(\"$outputDataArray$\"),\n+                this.env.scope.owner.pkgID, outputArrayType, env.scope.owner);\n+        BLangSimpleVariable outputArrayVariable =\n+                ASTBuilderUtil.createVariable(pos, \"$outputDataArray$\", outputArrayType,\n+                        emptyArrayExpr, emptyArrayVarSymbol);\n+\n+        // Create temp array variable\n+        //      Person[] x = [];\n+\n+        BLangSimpleVariableDef outputVariableDef =\n+                ASTBuilderUtil.createVariableDef(pos, outputArrayVariable);\n+        BLangSimpleVarRef outputVarRef = ASTBuilderUtil.createVariableRef(pos, outputArrayVariable.symbol);\n+\n+        // Create indexed based access expression statement\n+        //      x[x.length()] = {\n+        //         firstName: person.firstName,\n+        //         lastName: person.lastName\n+        //      };\n+\n+        if (selectClause.expression.type == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe62db700616a9c5150087fb801eceb719097ea"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NjQwNg==", "bodyText": "Now, record literals are not type checked hence we need this check in Desugar. We can remove this once lang level changes are done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20845#discussion_r375066406", "createdAt": "2020-02-05T05:33:08Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4324,6 +4328,139 @@ public void visit(BLangStatementExpression bLangStatementExpression) {\n         result = bLangStatementExpression;\n     }\n \n+    @Override\n+    public void visit(BLangQueryExpr queryExpr) {\n+        List<BLangFromClause> fromClauseList = queryExpr.fromClauseList;\n+        BLangFromClause fromClause = fromClauseList.get(0);\n+        BLangSelectClause selectClause = queryExpr.selectClause;\n+        List<BLangWhereClause> whereClauseList = queryExpr.whereClauseList;\n+        DiagnosticPos pos = fromClause.pos;\n+\n+        // Create Foreach statement\n+        //\n+        // Below query expression :\n+        //      from var person in personList\n+        //\n+        // changes as,\n+        //      foreach var person in personList {\n+        //          ....\n+        //      }\n+\n+        BLangForeach leafForEach = null;\n+        BLangForeach parentForEach = null;\n+\n+        for (BLangFromClause bLangFromClause : fromClauseList) {\n+            BLangForeach foreach = (BLangForeach) TreeBuilder.createForeachNode();\n+            foreach.pos = queryExpr.pos;\n+            foreach.collection = bLangFromClause.collection;\n+            types.setForeachTypedBindingPatternType(foreach);\n+\n+            foreach.variableDefinitionNode = bLangFromClause.variableDefinitionNode;\n+            foreach.isDeclaredWithVar = true;\n+\n+            if (leafForEach != null) {\n+                BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n+                foreachBody.addStatement(foreach);\n+                leafForEach.setBody(foreachBody);\n+            } else {\n+                parentForEach = foreach;\n+            }\n+\n+            leafForEach = foreach;\n+        }\n+\n+        BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BType outputArrayType;\n+        if (selectClause.expression  != null && selectClause.expression.type != null) {\n+            outputArrayType = new BArrayType(selectClause.expression.type);\n+        } else {\n+            outputArrayType = fromClause.varType;\n+        }\n+\n+        BLangListConstructorExpr emptyArrayExpr = ASTBuilderUtil.createEmptyArrayLiteral(pos,\n+                (BArrayType) outputArrayType);\n+        BVarSymbol emptyArrayVarSymbol = new BVarSymbol(0, new Name(\"$outputDataArray$\"),\n+                this.env.scope.owner.pkgID, outputArrayType, env.scope.owner);\n+        BLangSimpleVariable outputArrayVariable =\n+                ASTBuilderUtil.createVariable(pos, \"$outputDataArray$\", outputArrayType,\n+                        emptyArrayExpr, emptyArrayVarSymbol);\n+\n+        // Create temp array variable\n+        //      Person[] x = [];\n+\n+        BLangSimpleVariableDef outputVariableDef =\n+                ASTBuilderUtil.createVariableDef(pos, outputArrayVariable);\n+        BLangSimpleVarRef outputVarRef = ASTBuilderUtil.createVariableRef(pos, outputArrayVariable.symbol);\n+\n+        // Create indexed based access expression statement\n+        //      x[x.length()] = {\n+        //         firstName: person.firstName,\n+        //         lastName: person.lastName\n+        //      };\n+\n+        if (selectClause.expression.type == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTI1NQ=="}, "originalCommit": {"oid": "afe62db700616a9c5150087fb801eceb719097ea"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1261, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}