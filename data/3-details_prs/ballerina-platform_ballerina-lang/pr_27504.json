{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMjA0ODU2", "number": 27504, "title": "[Testerina] Derive test suite from Syntax tree and Semantic API", "bodyText": "Purpose\nDerive test suite from syntax tree\nFixes #27256\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-12-15T12:12:54Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504", "merged": true, "mergeCommit": {"oid": "11ba85de423fca6b8a54254259313a0940ca9a75"}, "closed": true, "closedAt": "2021-01-07T09:53:50Z", "author": {"login": "Dilhasha"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmarpnABqjQxMTQ2Nzc1NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtxA7DgFqTU2MzM0ODAyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c051752e331a2d5d2491100790e8c70877cb7317", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c051752e331a2d5d2491100790e8c70877cb7317", "committedDate": "2020-12-15T11:53:59Z", "message": "Change test suite processing"}, "afterCommit": {"oid": "eee1af5930f819d3b2e4d34f7c0c2d681d67f36a", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eee1af5930f819d3b2e4d34f7c0c2d681d67f36a", "committedDate": "2020-12-15T13:51:01Z", "message": "Change annotation processing for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e73cbb5c10074869b54fa591ded435052fa7be3f", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e73cbb5c10074869b54fa591ded435052fa7be3f", "committedDate": "2020-12-15T14:32:29Z", "message": "Change annotation processing for tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6608a2bae1eee81b540b09b15e7ab058882ae60a", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6608a2bae1eee81b540b09b15e7ab058882ae60a", "committedDate": "2020-12-15T14:23:57Z", "message": "Update test annotations"}, "afterCommit": {"oid": "e73cbb5c10074869b54fa591ded435052fa7be3f", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e73cbb5c10074869b54fa591ded435052fa7be3f", "committedDate": "2020-12-15T14:32:29Z", "message": "Change annotation processing for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bc47b1bd0180b5715432ea13ee4806e624cf3d5", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bc47b1bd0180b5715432ea13ee4806e624cf3d5", "committedDate": "2020-12-15T14:33:04Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into new-testerina"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c08b1ed5a93cccac9696c12e5c94f5b4a3a4b4af", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c08b1ed5a93cccac9696c12e5c94f5b4a3a4b4af", "committedDate": "2020-12-17T20:37:25Z", "message": "Improve test annotation processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b8a8b28e392beae9fb3b3248589771d5f237b84", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b8a8b28e392beae9fb3b3248589771d5f237b84", "committedDate": "2020-12-17T20:38:00Z", "message": "Move test json generation logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c8adcbcc010991712c99dfa7726f25db9f04603", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3c8adcbcc010991712c99dfa7726f25db9f04603", "committedDate": "2020-12-15T20:39:10Z", "message": "Add mock annotation basics"}, "afterCommit": {"oid": "3b8a8b28e392beae9fb3b3248589771d5f237b84", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b8a8b28e392beae9fb3b3248589771d5f237b84", "committedDate": "2020-12-17T20:38:00Z", "message": "Move test json generation logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac83d6dbda8f10ede0c8cc9a919adca64600b6e", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ac83d6dbda8f10ede0c8cc9a919adca64600b6e", "committedDate": "2020-12-22T06:49:49Z", "message": "Update annotation processing for Testerina"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc648209fdb43a698f991feeda8cef8e5f629268", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc648209fdb43a698f991feeda8cef8e5f629268", "committedDate": "2020-12-22T07:56:31Z", "message": "Resolve conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4987802d067af0b517860e7afba01dc62927bc50", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4987802d067af0b517860e7afba01dc62927bc50", "committedDate": "2021-01-01T06:46:03Z", "message": "Fix issues in tests"}, "afterCommit": {"oid": "828f40cb1a943a98eb2d7c53dfa015261da9c671", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/828f40cb1a943a98eb2d7c53dfa015261da9c671", "committedDate": "2021-01-01T14:42:39Z", "message": "Fix issues with testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "882e2a25d97224dc32fcadb9b2560f261a4f4c79", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/882e2a25d97224dc32fcadb9b2560f261a4f4c79", "committedDate": "2021-01-04T06:39:57Z", "message": "Fix issues after testing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "828f40cb1a943a98eb2d7c53dfa015261da9c671", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/828f40cb1a943a98eb2d7c53dfa015261da9c671", "committedDate": "2021-01-01T14:42:39Z", "message": "Fix issues with testing"}, "afterCommit": {"oid": "882e2a25d97224dc32fcadb9b2560f261a4f4c79", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/882e2a25d97224dc32fcadb9b2560f261a4f4c79", "committedDate": "2021-01-04T06:39:57Z", "message": "Fix issues after testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02f8628b533cbbd923342d6257a964d4a5f83c70", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02f8628b533cbbd923342d6257a964d4a5f83c70", "committedDate": "2021-01-04T08:11:37Z", "message": "Remove old implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a6d97ba6bb3a24893a54bbd1d58fd95bda10ff2", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a6d97ba6bb3a24893a54bbd1d58fd95bda10ff2", "committedDate": "2021-01-04T08:29:38Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into new-testerina"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d088463a01fd6c21745316b480214e82c0e38fc", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d088463a01fd6c21745316b480214e82c0e38fc", "committedDate": "2021-01-04T10:57:22Z", "message": "Remove old implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c7fb3bda9984dba6588abb60caad24f5b33da7f", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c7fb3bda9984dba6588abb60caad24f5b33da7f", "committedDate": "2021-01-05T17:57:19Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27247b8520ea63a584080d24fae101b534abf1cb", "committedDate": "2021-01-05T17:57:25Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into new-testerina"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMzU1NTY5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#pullrequestreview-562355569", "createdAt": "2021-01-06T06:36:09Z", "commit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjozNjowOVrOIOzjQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjozNjowOVrOIOzjQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM5NTU4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#discussion_r552395584", "createdAt": "2021-01-06T06:36:09Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/MockAnnotationProcessor.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMzU2MTY3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#pullrequestreview-562356167", "createdAt": "2021-01-06T06:37:47Z", "commit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjozNzo0N1rOIOzlOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjozNzo0N1rOIOzlOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM5NjA5MA==", "bodyText": "missing return statement", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#discussion_r552396090", "createdAt": "2021-01-06T06:37:47Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestProcessor.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.testerina.core;\n+\n+import io.ballerina.compiler.api.symbols.AnnotationSymbol;\n+import io.ballerina.compiler.api.symbols.FunctionSymbol;\n+import io.ballerina.compiler.api.symbols.Qualifier;\n+import io.ballerina.compiler.api.symbols.Symbol;\n+import io.ballerina.compiler.api.symbols.SymbolKind;\n+import io.ballerina.compiler.syntax.tree.AnnotationNode;\n+import io.ballerina.compiler.syntax.tree.ExpressionNode;\n+import io.ballerina.compiler.syntax.tree.FunctionDefinitionNode;\n+import io.ballerina.compiler.syntax.tree.ListConstructorExpressionNode;\n+import io.ballerina.compiler.syntax.tree.MappingConstructorExpressionNode;\n+import io.ballerina.compiler.syntax.tree.MappingFieldNode;\n+import io.ballerina.compiler.syntax.tree.MetadataNode;\n+import io.ballerina.compiler.syntax.tree.ModulePartNode;\n+import io.ballerina.compiler.syntax.tree.Node;\n+import io.ballerina.compiler.syntax.tree.NodeList;\n+import io.ballerina.compiler.syntax.tree.SpecificFieldNode;\n+import io.ballerina.compiler.syntax.tree.SyntaxKind;\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.projects.Document;\n+import io.ballerina.projects.JarResolver;\n+import io.ballerina.projects.Module;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.ProjectKind;\n+import io.ballerina.projects.testsuite.Test;\n+import io.ballerina.projects.testsuite.TestSuite;\n+import io.ballerina.tools.diagnostics.Location;\n+import io.ballerina.tools.text.LinePosition;\n+import org.ballerinalang.model.elements.Flag;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Responsible of processing Testerina annotations.\n+ * Lifetime of an instance of this class will end upon the completion of processing a ballerina package.\n+ */\n+public class TestProcessor {\n+    private static final String TEST_ANNOTATION_NAME = \"Config\";\n+    private static final String BEFORE_SUITE_ANNOTATION_NAME = \"BeforeSuite\";\n+    private static final String AFTER_SUITE_ANNOTATION_NAME = \"AfterSuite\";\n+    private static final String BEFORE_EACH_ANNOTATION_NAME = \"BeforeEach\";\n+    private static final String AFTER_EACH_ANNOTATION_NAME = \"AfterEach\";\n+    private static final String BEFORE_FUNCTION = \"before\";\n+    private static final String AFTER_FUNCTION = \"after\";\n+    private static final String DEPENDS_ON_FUNCTIONS = \"dependsOn\";\n+    private static final String GROUP_ANNOTATION_NAME = \"groups\";\n+    private static final String VALUE_SET_ANNOTATION_NAME = \"dataProvider\";\n+    private static final String TEST_ENABLE_ANNOTATION_NAME = \"enable\";\n+    private static final String AFTER_SUITE_ALWAYS_RUN_FIELD_NAME = \"alwaysRun\";\n+    private static final String VALUE_FIELD_NAME = \"value\";\n+    private static final String BEFORE_GROUPS_ANNOTATION_NAME = \"BeforeGroups\";\n+    private static final String AFTER_GROUPS_ANNOTATION_NAME = \"AfterGroups\";\n+    private static final String TEST_PREFIX = \"@test:\";\n+\n+    private TesterinaRegistry registry = TesterinaRegistry.getInstance();\n+\n+    /**\n+     * Generate and return the testsuite for module tests.\n+     *\n+     * @param module  Module\n+     * @param project Project\n+     * @return Optional<TestSuite>\n+     */\n+    public Optional<TestSuite> testSuite(Module module, Project project) {\n+        if (project.kind() != ProjectKind.SINGLE_FILE_PROJECT\n+                && module.testDocumentIds().isEmpty()) {\n+            return Optional.empty();\n+        }\n+        // skip generation of the testsuite if --skip-tests option is set to true\n+        if (project.buildOptions().skipTests()) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(generateTestSuite(module));\n+    }\n+\n+    /**\n+     * Get the syntax tree for tests.\n+     *\n+     * @param module Module\n+     * @return Map<String, SyntaxTree>\n+     */\n+    private Map<String, SyntaxTree> getTestSyntaxTreeMap(Module module) {\n+        Map<String, SyntaxTree> syntaxTreeMap = new HashMap<>();\n+        if (isSingleFileProject(module.project())) {\n+            module.documentIds().forEach(documentId -> {\n+                Document document = module.document(documentId);\n+                syntaxTreeMap.put(document.name(), document.syntaxTree());\n+            });\n+        } else {\n+            module.testDocumentIds().forEach(documentId -> {\n+                Document document = module.document(documentId);\n+                syntaxTreeMap.put(document.name(), document.syntaxTree());\n+            });\n+        }\n+        return syntaxTreeMap;\n+    }\n+\n+    /**\n+     * Generate the testsuite for module using syntax and semantic APIs.\n+     *\n+     * @param module  Module\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMzU2OTQ0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#pullrequestreview-562356944", "createdAt": "2021-01-06T06:39:57Z", "commit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjozOTo1N1rOIOzn1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjo0MjowNVrOIOzqPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM5Njc1Ng==", "bodyText": "Shall we use the constant in ProjectConstants instead of hardcoding .bal", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#discussion_r552396756", "createdAt": "2021-01-06T06:39:57Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestProcessor.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.testerina.core;\n+\n+import io.ballerina.compiler.api.symbols.AnnotationSymbol;\n+import io.ballerina.compiler.api.symbols.FunctionSymbol;\n+import io.ballerina.compiler.api.symbols.Qualifier;\n+import io.ballerina.compiler.api.symbols.Symbol;\n+import io.ballerina.compiler.api.symbols.SymbolKind;\n+import io.ballerina.compiler.syntax.tree.AnnotationNode;\n+import io.ballerina.compiler.syntax.tree.ExpressionNode;\n+import io.ballerina.compiler.syntax.tree.FunctionDefinitionNode;\n+import io.ballerina.compiler.syntax.tree.ListConstructorExpressionNode;\n+import io.ballerina.compiler.syntax.tree.MappingConstructorExpressionNode;\n+import io.ballerina.compiler.syntax.tree.MappingFieldNode;\n+import io.ballerina.compiler.syntax.tree.MetadataNode;\n+import io.ballerina.compiler.syntax.tree.ModulePartNode;\n+import io.ballerina.compiler.syntax.tree.Node;\n+import io.ballerina.compiler.syntax.tree.NodeList;\n+import io.ballerina.compiler.syntax.tree.SpecificFieldNode;\n+import io.ballerina.compiler.syntax.tree.SyntaxKind;\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.projects.Document;\n+import io.ballerina.projects.JarResolver;\n+import io.ballerina.projects.Module;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.ProjectKind;\n+import io.ballerina.projects.testsuite.Test;\n+import io.ballerina.projects.testsuite.TestSuite;\n+import io.ballerina.tools.diagnostics.Location;\n+import io.ballerina.tools.text.LinePosition;\n+import org.ballerinalang.model.elements.Flag;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Responsible of processing Testerina annotations.\n+ * Lifetime of an instance of this class will end upon the completion of processing a ballerina package.\n+ */\n+public class TestProcessor {\n+    private static final String TEST_ANNOTATION_NAME = \"Config\";\n+    private static final String BEFORE_SUITE_ANNOTATION_NAME = \"BeforeSuite\";\n+    private static final String AFTER_SUITE_ANNOTATION_NAME = \"AfterSuite\";\n+    private static final String BEFORE_EACH_ANNOTATION_NAME = \"BeforeEach\";\n+    private static final String AFTER_EACH_ANNOTATION_NAME = \"AfterEach\";\n+    private static final String BEFORE_FUNCTION = \"before\";\n+    private static final String AFTER_FUNCTION = \"after\";\n+    private static final String DEPENDS_ON_FUNCTIONS = \"dependsOn\";\n+    private static final String GROUP_ANNOTATION_NAME = \"groups\";\n+    private static final String VALUE_SET_ANNOTATION_NAME = \"dataProvider\";\n+    private static final String TEST_ENABLE_ANNOTATION_NAME = \"enable\";\n+    private static final String AFTER_SUITE_ALWAYS_RUN_FIELD_NAME = \"alwaysRun\";\n+    private static final String VALUE_FIELD_NAME = \"value\";\n+    private static final String BEFORE_GROUPS_ANNOTATION_NAME = \"BeforeGroups\";\n+    private static final String AFTER_GROUPS_ANNOTATION_NAME = \"AfterGroups\";\n+    private static final String TEST_PREFIX = \"@test:\";\n+\n+    private TesterinaRegistry registry = TesterinaRegistry.getInstance();\n+\n+    /**\n+     * Generate and return the testsuite for module tests.\n+     *\n+     * @param module  Module\n+     * @param project Project\n+     * @return Optional<TestSuite>\n+     */\n+    public Optional<TestSuite> testSuite(Module module, Project project) {\n+        if (project.kind() != ProjectKind.SINGLE_FILE_PROJECT\n+                && module.testDocumentIds().isEmpty()) {\n+            return Optional.empty();\n+        }\n+        // skip generation of the testsuite if --skip-tests option is set to true\n+        if (project.buildOptions().skipTests()) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(generateTestSuite(module));\n+    }\n+\n+    /**\n+     * Get the syntax tree for tests.\n+     *\n+     * @param module Module\n+     * @return Map<String, SyntaxTree>\n+     */\n+    private Map<String, SyntaxTree> getTestSyntaxTreeMap(Module module) {\n+        Map<String, SyntaxTree> syntaxTreeMap = new HashMap<>();\n+        if (isSingleFileProject(module.project())) {\n+            module.documentIds().forEach(documentId -> {\n+                Document document = module.document(documentId);\n+                syntaxTreeMap.put(document.name(), document.syntaxTree());\n+            });\n+        } else {\n+            module.testDocumentIds().forEach(documentId -> {\n+                Document document = module.document(documentId);\n+                syntaxTreeMap.put(document.name(), document.syntaxTree());\n+            });\n+        }\n+        return syntaxTreeMap;\n+    }\n+\n+    /**\n+     * Generate the testsuite for module using syntax and semantic APIs.\n+     *\n+     * @param module  Module\n+     */\n+    private TestSuite generateTestSuite(Module module) {\n+        TestSuite testSuite = new TestSuite(module.descriptor().name().toString(),\n+                module.descriptor().packageName().toString(),\n+                module.descriptor().org().value(), module.descriptor().version().toString());\n+        TesterinaRegistry.getInstance().getTestSuites().put(\n+                module.descriptor().name().toString(), testSuite);\n+        testSuite.setPackageName(module.descriptor().packageName().toString());\n+        testSuite.setSourceRootPath(module.project().sourceRoot().toString());\n+        addUtilityFunctions(module, testSuite);\n+        processAnnotations(module, testSuite);\n+        return testSuite;\n+    }\n+\n+    /**\n+     * Process the annotations for a given module.\n+     *\n+     * @param module        Module\n+     * @param suite        TestSuite\n+     */\n+    private void processAnnotations(Module module, TestSuite suite) {\n+        Map<String, SyntaxTree> syntaxTreeMap = getTestSyntaxTreeMap(module);\n+        List<FunctionSymbol> functionSymbolList = getFunctionSymbolList(syntaxTreeMap, module);\n+        for (FunctionSymbol functionSymbol : functionSymbolList) {\n+            String functionName = functionSymbol.name();\n+            List<AnnotationSymbol> annotations = functionSymbol.annotations();\n+            for (AnnotationSymbol annotationSymbol : annotations) {\n+                String annotationName = annotationSymbol.name();\n+                if (annotationName.contains(BEFORE_SUITE_ANNOTATION_NAME)) {\n+                    suite.addBeforeSuiteFunction(functionName);\n+                } else if (annotationName.contains(AFTER_SUITE_ANNOTATION_NAME)) {\n+                    suite.addAfterSuiteFunction(functionName,\n+                            isAlwaysRunAfterSuite(getAnnotationNode(annotationSymbol, syntaxTreeMap, functionName)));\n+                } else if (annotationName.contains(BEFORE_GROUPS_ANNOTATION_NAME)) {\n+                    processGroupsAnnotation(getAnnotationNode(annotationSymbol, syntaxTreeMap, functionName),\n+                            functionName, suite, true);\n+                } else if (annotationName.contains(AFTER_GROUPS_ANNOTATION_NAME)) {\n+                    processGroupsAnnotation(getAnnotationNode(annotationSymbol, syntaxTreeMap, functionName),\n+                            functionName, suite, false);\n+                } else if (annotationName.contains(BEFORE_EACH_ANNOTATION_NAME)) {\n+                    suite.addBeforeEachFunction(functionName);\n+                } else if (annotationName.contains(AFTER_EACH_ANNOTATION_NAME)) {\n+                    suite.addAfterEachFunction(functionName);\n+                } else if (annotationName.contains(TEST_ANNOTATION_NAME)) {\n+                    processTestAnnotation(getAnnotationNode(annotationSymbol, syntaxTreeMap, functionName),\n+                            functionName, suite);\n+                } else {\n+                    // disregard this annotation\n+                }\n+            }\n+        }\n+    }\n+\n+    private AnnotationNode getAnnotationNode(AnnotationSymbol annotationSymbol, Map<String, SyntaxTree> syntaxTreeMap,\n+                                             String function) {\n+        for (Map.Entry<String, SyntaxTree> syntaxTreeEntry : syntaxTreeMap.entrySet()) {\n+            if (syntaxTreeEntry.getValue().containsModulePart()) {\n+                ModulePartNode modulePartNode = syntaxTreeMap.get(syntaxTreeEntry.getKey()).rootNode();\n+                for (Node node : modulePartNode.members()) {\n+                    if ((node.kind() == SyntaxKind.FUNCTION_DEFINITION) && node instanceof FunctionDefinitionNode) {\n+                        String functionName = ((FunctionDefinitionNode) node).functionName().text();\n+                        if (functionName.equals(function)) {\n+                            Optional<MetadataNode> optionalMetadataNode = ((FunctionDefinitionNode) node).metadata();\n+                            if (optionalMetadataNode.isEmpty()) {\n+                                continue;\n+                            } else {\n+                                NodeList<AnnotationNode> annotations = optionalMetadataNode.get().annotations();\n+                                for (AnnotationNode annotation : annotations) {\n+                                    if ((annotation.toString().trim()).contains(\n+                                            TEST_PREFIX + annotationSymbol.name())) {\n+                                        return annotation;\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get function symbols list using syntax tree and semantic API.\n+     *\n+     * @param syntaxTreeMap Map<String, SyntaxTree>\n+     * @param module        Module\n+     * @return List<FunctionSymbol>\n+     */\n+    private List<FunctionSymbol> getFunctionSymbolList(Map<String, SyntaxTree> syntaxTreeMap, Module module) {\n+        List<FunctionSymbol> functionSymbolList = new ArrayList<>();\n+        List<String> functionNamesList = new ArrayList<>();\n+        for (Map.Entry<String, SyntaxTree> syntaxTreeEntry : syntaxTreeMap.entrySet()) {\n+            List<Symbol> symbols = module.getCompilation().getSemanticModel().visibleSymbols(\n+                    syntaxTreeEntry.getKey(),\n+                    LinePosition.from(syntaxTreeEntry.getValue().rootNode().location().lineRange().endLine().line(),\n+                            syntaxTreeEntry.getValue().rootNode().location().lineRange().endLine().offset()));\n+            for (Symbol symbol : symbols) {\n+                if (symbol.kind() == SymbolKind.FUNCTION && symbol instanceof FunctionSymbol &&\n+                        !functionNamesList.contains(symbol.name())) {\n+                    functionSymbolList.add((FunctionSymbol) symbol);\n+                    functionNamesList.add(symbol.name());\n+                }\n+            }\n+        }\n+        return functionSymbolList;\n+    }\n+\n+    /**\n+     * Checks whether given project is a single file project.\n+     *\n+     * @param project Project\n+     * @return boolean\n+     */\n+    private boolean isSingleFileProject(Project project) {\n+        boolean isSingleFileProject = false;\n+        if (project.kind() == ProjectKind.SINGLE_FILE_PROJECT) {\n+            isSingleFileProject = true;\n+        }\n+        return isSingleFileProject;\n+    }\n+\n+    /**\n+     * Add utility functions for the test suite.\n+     *\n+     * @param module        Module\n+     * @param testSuite     TestSuite\n+     */\n+    private void addUtilityFunctions(Module module, TestSuite testSuite) {\n+        Map<String, SyntaxTree> syntaxTreeMap = new HashMap<>();\n+        module.documentIds().forEach(documentId -> {\n+            Document document = module.document(documentId);\n+            syntaxTreeMap.put(document.name(), document.syntaxTree());\n+        });\n+        if (!isSingleFileProject(module.project())) {\n+            module.testDocumentIds().forEach(documentId -> {\n+                Document document = module.document(documentId);\n+                syntaxTreeMap.put(document.name(), document.syntaxTree());\n+            });\n+        }\n+        List<FunctionSymbol> functionSymbolList = getFunctionSymbolList(syntaxTreeMap, module);\n+        for (FunctionSymbol functionSymbol : functionSymbolList) {\n+            String functionName = functionSymbol.name();\n+            Location pos = functionSymbol.location();\n+            List<Qualifier> qualifiers = functionSymbol.qualifiers();\n+            boolean isUtility = true;\n+            for (Qualifier qualifier : qualifiers) {\n+                if (Flag.RESOURCE.name().equals(qualifier.getValue()) ||\n+                        Flag.REMOTE.name().equals(qualifier.getValue())) {\n+                    isUtility = false;\n+                    break;\n+                }\n+            }\n+            if (pos != null && isUtility) {\n+                // Remove the duplicated annotations.\n+                String className = pos.lineRange().filePath().replace(\".bal\", \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM5NzM3Mw==", "bodyText": "shall we remove the io.ballerina.projects.testsuite package and move all the classes back to testerina runtime module?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#discussion_r552397373", "createdAt": "2021-01-06T06:42:05Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TesterinaRegistry.java", "diffHunk": "@@ -17,7 +17,7 @@\n */\n package org.ballerinalang.testerina.core;\n \n-import org.ballerinalang.test.runtime.entity.TestSuite;\n+import io.ballerina.projects.testsuite.TestSuite;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMzU4MzMy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#pullrequestreview-562358332", "createdAt": "2021-01-06T06:43:47Z", "commit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjo0Mzo0N1rOIOzsIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjo0Mzo0N1rOIOzsIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM5Nzg1OQ==", "bodyText": "we can access the project from the module using module.project()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#discussion_r552397859", "createdAt": "2021-01-06T06:43:47Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/RunTestsTask.java", "diffHunk": "@@ -160,15 +161,15 @@ public void execute(Project project) {\n         PackageCompilation packageCompilation = project.currentPackage().getCompilation();\n         JBallerinaBackend jBallerinaBackend = JBallerinaBackend.from(packageCompilation, JvmTarget.JAVA_11);\n         JarResolver jarResolver = jBallerinaBackend.jarResolver();\n-\n+        TestProcessor testProcessor = new TestProcessor();\n         // Only tests in packages are executed so default packages i.e. single bal files which has the package name\n         // as \".\" are ignored. This is to be consistent with the \"ballerina test\" command which only executes tests\n         // in packages.\n         for (ModuleId moduleId : project.currentPackage().moduleIds()) {\n             Module module = project.currentPackage().module(moduleId);\n             ModuleName moduleName = module.moduleName();\n \n-            TestSuite suite = jBallerinaBackend.testSuite(module).orElse(null);\n+            TestSuite suite = testProcessor.testSuite(module, project).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27247b8520ea63a584080d24fae101b534abf1cb"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42e4227f2a68b54ce451945ead2cdc03f096f2cd", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/42e4227f2a68b54ce451945ead2cdc03f096f2cd", "committedDate": "2021-01-06T09:55:25Z", "message": "Fix PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f4728dc5bf62753fd38f3f59674ad7d9e2590fb", "author": {"user": {"login": "Dilhasha", "name": "Fathima Dilhasha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f4728dc5bf62753fd38f3f59674ad7d9e2590fb", "committedDate": "2021-01-06T17:54:57Z", "message": "Fix formatting issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMzQ4MDI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27504#pullrequestreview-563348028", "createdAt": "2021-01-07T09:50:11Z", "commit": {"oid": "5f4728dc5bf62753fd38f3f59674ad7d9e2590fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4608, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}