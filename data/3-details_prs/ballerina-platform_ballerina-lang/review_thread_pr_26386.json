{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NzU4NTA4", "number": 26386, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMTo0M1rOEucFaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoyNjozNlrOEuedAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTMwMDg4OnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMTo0M1rOHi12yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMTo0M1rOHi12yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NjAxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null != path.getParameters() && path.getParameters().size() > 0) {\n          \n          \n            \n                    if (path.getParameters() != null && path.getParameters().size() > 0) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506296011", "createdAt": "2020-10-16T11:01:43Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTMwNDA1OnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMjoyN1rOHi146A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMjoyN1rOHi146A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NjU1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n          \n          \n            \n                                .anyMatch(parameter -> parameter.getIn() != null) && parameter.getIn().equals(\"path\"));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506296552", "createdAt": "2020-10-16T11:02:27Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTMwNjUzOnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMjo1N1rOHi16gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMjo1N1rOHi16gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5Njk2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (null != operation.getParameters() && operation.getParameters().size() > 0) {\n          \n          \n            \n                            if (operation.getParameters() != null && operation.getParameters().size() > 0) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506296963", "createdAt": "2020-10-16T11:02:57Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (null != operation.getParameters() && operation.getParameters().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTMwODU0OnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMzoyNVrOHi177w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMzoyNVrOHi177w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NzMyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n          \n          \n            \n                                        .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506297327", "createdAt": "2020-10-16T11:03:25Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (null != operation.getParameters() && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream()\n+                            .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTQ2MTk2OnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTozNjoxMlrOHi3iRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTozNjoxMlrOHi3iRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyMzUyNw==", "bodyText": "Shall we assign the string \"path\"  to private static final variable and use it here instead of hard coding the value directly?\nprivate static final String PATH = \"path\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506323527", "createdAt": "2020-10-16T11:36:12Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTQ2NTkzOnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTozNzowMlrOHi3k9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTozNzowMlrOHi3k9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyNDIxNQ==", "bodyText": "Do the same change here as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506324215", "createdAt": "2020-10-16T11:37:02Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream()\n+                            .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTY4ODk3OnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoyNjozNlrOHi54kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDo0NTo0M1rOHjCbEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MjAwMQ==", "bodyText": "IMO better to do an early return in here. WDYT?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (path.readOperations().size() > 0) {\n          \n          \n            \n                        return path.readOperations().stream().anyMatch(operation -> {\n          \n          \n            \n                            if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n          \n          \n            \n                                return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n          \n          \n            \n                                        parameter.getIn().equals(GeneratorConstants.PATH));\n          \n          \n            \n                            }\n          \n          \n            \n                            return false;\n          \n          \n            \n                        });\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    if (path.readOperations().isEmpty()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return path.readOperations().stream().anyMatch(operation -> {\n          \n          \n            \n                        if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n          \n          \n            \n                            return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n          \n          \n            \n                                    parameter.getIn().equals(GeneratorConstants.PATH));\n          \n          \n            \n                        }\n          \n          \n            \n                        return false;\n          \n          \n            \n                    });\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506362001", "createdAt": "2020-10-16T12:26:36Z", "author": {"login": "NipunaRanasinghe"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +128,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null && parameter.getIn()\n+                    .equals(GeneratorConstants.PATH));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n+                            parameter.getIn().equals(GeneratorConstants.PATH));\n+                }\n+                return false;\n+            });\n         }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MzAzOA==", "bodyText": "Also, don't we need to validate whether path.readOperations() is null ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506363038", "createdAt": "2020-10-16T12:27:53Z", "author": {"login": "NipunaRanasinghe"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +128,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null && parameter.getIn()\n+                    .equals(GeneratorConstants.PATH));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n+                            parameter.getIn().equals(GeneratorConstants.PATH));\n+                }\n+                return false;\n+            });\n         }\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MjAwMQ=="}, "originalCommit": {"oid": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwMTkwNQ==", "bodyText": "yeah we don't need to validate with null :) it return list", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506501905", "createdAt": "2020-10-16T14:45:43Z", "author": {"login": "lnash94"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +128,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null && parameter.getIn()\n+                    .equals(GeneratorConstants.PATH));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n+                            parameter.getIn().equals(GeneratorConstants.PATH));\n+                }\n+                return false;\n+            });\n         }\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MjAwMQ=="}, "originalCommit": {"oid": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4767, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}