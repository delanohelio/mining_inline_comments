{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NTA0NTg5", "number": 27073, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxNzo1MlrOE8PFrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxODo1NFrOE8PHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTk3MjI5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxNzo1MlrOH4PXEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoyNDowOVrOH4VVNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMzk3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if(or is error) {\n          \n          \n            \n                if (or is error) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27073#discussion_r528733970", "createdAt": "2020-11-23T14:17:52Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -66,3 +66,35 @@ function testConvertStampTupleToMap() returns [[string, Employee], [string, Empl\n     tupleValue[0] = \"Vinod\";\n     return [tupleValue, returnValue];\n }\n+\n+type OpenRecord record {\n+\n+};\n+\n+function testConvertMapJsonWithDecimalToOpenRecord() {\n+    map<json> mp = {\n+        name: \"foo\",\n+        factor: 1.23d\n+    };\n+\n+    var or = mp.cloneWithType(OpenRecord);\n+\n+    if(or is error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d41968e69b0eb4f035935fcbd57280145ddae32"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgzMTc5OA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27073#discussion_r528831798", "createdAt": "2020-11-23T16:24:09Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -66,3 +66,35 @@ function testConvertStampTupleToMap() returns [[string, Employee], [string, Empl\n     tupleValue[0] = \"Vinod\";\n     return [tupleValue, returnValue];\n }\n+\n+type OpenRecord record {\n+\n+};\n+\n+function testConvertMapJsonWithDecimalToOpenRecord() {\n+    map<json> mp = {\n+        name: \"foo\",\n+        factor: 1.23d\n+    };\n+\n+    var or = mp.cloneWithType(OpenRecord);\n+\n+    if(or is error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMzk3MA=="}, "originalCommit": {"oid": "0d41968e69b0eb4f035935fcbd57280145ddae32"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTk3NjA0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxODo1NFrOH4PZhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoyNDoxN1rOH4VVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczNDU5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    error e = error(reason);\n          \n          \n            \n                    panic e;\n          \n          \n            \n                    panic error(reason);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27073#discussion_r528734599", "createdAt": "2020-11-23T14:18:54Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -66,3 +66,35 @@ function testConvertStampTupleToMap() returns [[string, Employee], [string, Empl\n     tupleValue[0] = \"Vinod\";\n     return [tupleValue, returnValue];\n }\n+\n+type OpenRecord record {\n+\n+};\n+\n+function testConvertMapJsonWithDecimalToOpenRecord() {\n+    map<json> mp = {\n+        name: \"foo\",\n+        factor: 1.23d\n+    };\n+\n+    var or = mp.cloneWithType(OpenRecord);\n+\n+    if(or is error) {\n+        panic error(\"Invalid Response\", detail = \"Invalid type `error` recieved from cloneWithType\");\n+    }\n+\n+    OpenRecord castedValue = <OpenRecord>or;\n+    assert(castedValue[\"factor\"], mp[\"factor\"]);\n+    assert(castedValue[\"name\"], mp[\"name\"]);\n+}\n+\n+function assert(anydata actual, anydata expected) {\n+    if (expected != actual) {\n+        typedesc<anydata> expT = typeof expected;\n+        typedesc<anydata> actT = typeof actual;\n+        string reason = \"expected [\" + expected.toString() + \"] of type [\" + expT.toString()\n+                            + \"], but found [\" + actual.toString() + \"] of type [\" + actT.toString() + \"]\";\n+        error e = error(reason);\n+        panic e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d41968e69b0eb4f035935fcbd57280145ddae32"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgzMTkwOA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27073#discussion_r528831908", "createdAt": "2020-11-23T16:24:17Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -66,3 +66,35 @@ function testConvertStampTupleToMap() returns [[string, Employee], [string, Empl\n     tupleValue[0] = \"Vinod\";\n     return [tupleValue, returnValue];\n }\n+\n+type OpenRecord record {\n+\n+};\n+\n+function testConvertMapJsonWithDecimalToOpenRecord() {\n+    map<json> mp = {\n+        name: \"foo\",\n+        factor: 1.23d\n+    };\n+\n+    var or = mp.cloneWithType(OpenRecord);\n+\n+    if(or is error) {\n+        panic error(\"Invalid Response\", detail = \"Invalid type `error` recieved from cloneWithType\");\n+    }\n+\n+    OpenRecord castedValue = <OpenRecord>or;\n+    assert(castedValue[\"factor\"], mp[\"factor\"]);\n+    assert(castedValue[\"name\"], mp[\"name\"]);\n+}\n+\n+function assert(anydata actual, anydata expected) {\n+    if (expected != actual) {\n+        typedesc<anydata> expT = typeof expected;\n+        typedesc<anydata> actT = typeof actual;\n+        string reason = \"expected [\" + expected.toString() + \"] of type [\" + expT.toString()\n+                            + \"], but found [\" + actual.toString() + \"] of type [\" + actT.toString() + \"]\";\n+        error e = error(reason);\n+        panic e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczNDU5OQ=="}, "originalCommit": {"oid": "0d41968e69b0eb4f035935fcbd57280145ddae32"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3053, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}