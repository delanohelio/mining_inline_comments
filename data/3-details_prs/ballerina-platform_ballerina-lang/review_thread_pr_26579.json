{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NjI4MzQ3", "number": 26579, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjowMTo1MlrOE0Pdig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0MTowM1rOE0r8pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjE0NzMwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjowMTo1MlrOHr3K5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMjowMzowNFrOHsBooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDcyNw==", "bodyText": "Can we move the transaction context to strand locals similar to observation context", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515754727", "createdAt": "2020-11-02T06:01:52Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;\n     public TransactionLocalContext currentTrxContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNjE3Ng==", "bodyText": "yes, we need to do that. But will be a separate pr because it's tightly coupled to transaction langlib.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515926176", "createdAt": "2020-11-02T12:03:04Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;\n     public TransactionLocalContext currentTrxContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDcyNw=="}, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjE4MDE0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/Runtime.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjoyMDowMVrOHr3djw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzo1Mzo1NFrOHr5Www==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTUwMw==", "bodyText": "This is not necessary. Is it? Because in the next line it will automatically throw Nullpointer and throwing this exception explicitly is not recommended AFAIK", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515759503", "createdAt": "2020-11-02T06:20:01Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/Runtime.java", "diffHunk": "@@ -86,15 +83,10 @@ public Object invokeMethodAsync(BObject object, String methodName, String strand\n      */\n     public void invokeMethodAsync(BObject object, String methodName, String strandName, StrandMetadata metadata,\n                                   Callback callback, Map<String, Object> properties, Object... args) {\n-        Function<Object[], Object> func = objects -> {\n-            Strand strand = (Strand) objects[0];\n-            if (ObserveUtils.isObservabilityEnabled() && properties != null &&\n-                    properties.containsKey(ObservabilityConstants.KEY_OBSERVER_CONTEXT)) {\n-                strand.observerContext =\n-                        (ObserverContext) properties.remove(ObservabilityConstants.KEY_OBSERVER_CONTEXT);\n-            }\n-            return object.call(strand, methodName, args);\n-        };\n+        if (object == null) {\n+            throw new NullPointerException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4MjQ5Mw==", "bodyText": "below object.call is in a lambda, therefor error gets thrown in a different thread. so the original stack trace is lost.\nExplicit null pointer exception is ok for parameter checking. eg: http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/Objects.java#l201", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515782493", "createdAt": "2020-11-02T07:34:23Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/Runtime.java", "diffHunk": "@@ -86,15 +83,10 @@ public Object invokeMethodAsync(BObject object, String methodName, String strand\n      */\n     public void invokeMethodAsync(BObject object, String methodName, String strandName, StrandMetadata metadata,\n                                   Callback callback, Map<String, Object> properties, Object... args) {\n-        Function<Object[], Object> func = objects -> {\n-            Strand strand = (Strand) objects[0];\n-            if (ObserveUtils.isObservabilityEnabled() && properties != null &&\n-                    properties.containsKey(ObservabilityConstants.KEY_OBSERVER_CONTEXT)) {\n-                strand.observerContext =\n-                        (ObserverContext) properties.remove(ObservabilityConstants.KEY_OBSERVER_CONTEXT);\n-            }\n-            return object.call(strand, methodName, args);\n-        };\n+        if (object == null) {\n+            throw new NullPointerException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTUwMw=="}, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5MDUzMQ==", "bodyText": "Reading on this, came across this: https://stackoverflow.com/questions/3322638/is-it-okay-to-throw-nullpointerexception-programmatically\nIt seems to be a point of argument \ud83d\ude00", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515790531", "createdAt": "2020-11-02T07:53:54Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/Runtime.java", "diffHunk": "@@ -86,15 +83,10 @@ public Object invokeMethodAsync(BObject object, String methodName, String strand\n      */\n     public void invokeMethodAsync(BObject object, String methodName, String strandName, StrandMetadata metadata,\n                                   Callback callback, Map<String, Object> properties, Object... args) {\n-        Function<Object[], Object> func = objects -> {\n-            Strand strand = (Strand) objects[0];\n-            if (ObserveUtils.isObservabilityEnabled() && properties != null &&\n-                    properties.containsKey(ObservabilityConstants.KEY_OBSERVER_CONTEXT)) {\n-                strand.observerContext =\n-                        (ObserverContext) properties.remove(ObservabilityConstants.KEY_OBSERVER_CONTEXT);\n-            }\n-            return object.call(strand, methodName, args);\n-        };\n+        if (object == null) {\n+            throw new NullPointerException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTUwMw=="}, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjE4MjMzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjoyMToxNVrOHr3e3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzoyOTozOVrOHsimXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTgzOA==", "bodyText": "Shall we also create an issue for the Todo and link here or fix the Todo before the PR is merged?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515759838", "createdAt": "2020-11-02T06:21:15Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java", "diffHunk": "@@ -456,7 +457,8 @@ public FutureValue createFuture(Strand parent, Callback callback, Map<String, Ob\n \n     private FutureValue createFuture(Strand parent, Callback callback, Type constraint, Strand newStrand) {\n         if (parent != null) {\n-            newStrand.observerContext = parent.observerContext;\n+            //TODO: improve by using a copy on write map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNjMwOA==", "bodyText": "+1 will create", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515926308", "createdAt": "2020-11-02T12:03:21Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java", "diffHunk": "@@ -456,7 +457,8 @@ public FutureValue createFuture(Strand parent, Callback callback, Map<String, Ob\n \n     private FutureValue createFuture(Strand parent, Callback callback, Type constraint, Strand newStrand) {\n         if (parent != null) {\n-            newStrand.observerContext = parent.observerContext;\n+            //TODO: improve by using a copy on write map", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTgzOA=="}, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2NjI3MQ==", "bodyText": "#26710", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r516466271", "createdAt": "2020-11-03T07:29:39Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java", "diffHunk": "@@ -456,7 +457,8 @@ public FutureValue createFuture(Strand parent, Callback callback, Map<String, Ob\n \n     private FutureValue createFuture(Strand parent, Callback callback, Type constraint, Strand newStrand) {\n         if (parent != null) {\n-            newStrand.observerContext = parent.observerContext;\n+            //TODO: improve by using a copy on write map", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTgzOA=="}, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjE4NTI5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNjoyMjo1NlrOHr3gqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNzowM1rOHsogjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MDI5Ng==", "bodyText": "Shall we try not to make public variables? We can use getters for any future variables. I know this class already uses a lot of public variables, but we can try to reduce them in the future", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515760296", "createdAt": "2020-11-02T06:22:56Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNTUwMg==", "bodyText": "We will hide this from others using java 9 modules. But better to keep things public here, as long as they are only accessed by us (runtime module) for performance reasons. what do you think?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515925502", "createdAt": "2020-11-02T12:01:30Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MDI5Ng=="}, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MzA4Ng==", "bodyText": "will fix.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r516563086", "createdAt": "2020-11-03T10:27:03Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MDI5Ng=="}, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjMxNTk0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzoyNjo0MFrOHr4sAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNzoxM1rOHsog-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3OTU4Nw==", "bodyText": "Why did we make this public? I thought we are getting rid of it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515779587", "createdAt": "2020-11-02T07:26:40Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNTc4NQ==", "bodyText": "We will hide this from others using java 9 modules. but needs to be public here because I need to access it from Environment.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r515925785", "createdAt": "2020-11-02T12:02:05Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3OTU4Nw=="}, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MzE5NA==", "bodyText": "fill fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r516563194", "createdAt": "2020-11-03T10:27:13Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Strand.java", "diffHunk": "@@ -71,15 +70,14 @@\n     public boolean blockedOnExtern;\n     public Set<ChannelDetails> channelDetails;\n     public Set<SchedulerItem> dependants;\n-    public ObserverContext observerContext;\n     public boolean cancel;\n \n     SchedulerItem schedulerItem;\n     List<WaitContext> waitingContexts;\n     WaitContext waitContext;\n     ItemGroup strandGroup;\n \n-    private Map<String, Object> globalProps;\n+    public Map<String, Object> globalProps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3OTU4Nw=="}, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjgxNDQ0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0MTowM1rOHsi2gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0MTowM1rOHsi2gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MDQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //TODO: improve by using a copy on write map\n          \n          \n            \n                        //TODO: improve by using a copy on write map #26710", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26579#discussion_r516470403", "createdAt": "2020-11-03T07:41:03Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/scheduling/Scheduler.java", "diffHunk": "@@ -456,7 +457,8 @@ public FutureValue createFuture(Strand parent, Callback callback, Map<String, Ob\n \n     private FutureValue createFuture(Strand parent, Callback callback, Type constraint, Strand newStrand) {\n         if (parent != null) {\n-            newStrand.observerContext = parent.observerContext;\n+            //TODO: improve by using a copy on write map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15ea34aa10b9588b2a1df0aeeca8ff8e0adea7"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4635, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}