{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTIwOTk0", "number": 21764, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxNzoyMVrODoDymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxOTozOVrODoDy-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzMxNzM5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxNzoyMVrOF2aJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxNzoyMVrOF2aJAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTcxMg==", "bodyText": "This has to be the union type of nil type and error type right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#discussion_r392595712", "createdAt": "2020-03-14T15:17:21Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -168,12 +169,26 @@ BLangBlockStmt desugarQueryAction(BLangQueryAction queryAction, SymbolEnv env) {\n         List<BLangWhereClause> whereClauseList = queryAction.whereClauseList;\n         DiagnosticPos pos = fromClause.pos;\n \n+        BLangExpression nilExpression = ASTBuilderUtil.createLiteral(pos, symTable.nilType, Names.NIL_VALUE);\n+        BVarSymbol outputVarSymbol = new BVarSymbol(0, new Name(\"$outputVar$\"),\n+                env.scope.owner.pkgID, symTable.nilType, env.scope.owner);\n+        BLangSimpleVariable outputVariable =\n+                ASTBuilderUtil.createVariable(pos, \"$outputVar$\", symTable.nilType,\n+                        nilExpression, outputVarSymbol);\n+        BLangSimpleVariableDef outputVariableDef =\n+                ASTBuilderUtil.createVariableDef(pos, outputVariable);\n+        BLangSimpleVarRef outputVarRef = ASTBuilderUtil.createVariableRef(pos, outputVariable.symbol);\n+\n         BLangForeach leafForeach = buildFromClauseBlock(fromClauseList);\n         BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n         buildWhereClauseBlock(whereClauseList, letClauseList, leafForeach, foreachBody, doClause.pos);\n         foreachBody.addStatement(doClause.body);\n+        blockNode.stmts.add(outputVariableDef);\n         blockNode.stmts.add(parentForeach);\n-        return blockNode;\n+\n+        BLangStatementExpression stmtExpr = ASTBuilderUtil.createStatementExpression(blockNode, outputVarRef);\n+        stmtExpr.type = symTable.nilType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1582805268bab290c5bd69cae10014dea6878c16"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzMxODMyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxOTo0MFrOF2aJmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToxOTo0MFrOF2aJmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTg2Nw==", "bodyText": "This has to check if the return type is union of nil type and error type, not just nil type right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#discussion_r392595867", "createdAt": "2020-03-14T15:19:40Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2779,11 +2781,42 @@ public void visit(BLangQueryExpr queryExpr) {\n         }\n \n         BType selectType = checkExpr(selectClause.expression, whereEnv, expSelectType);\n-\n         resultType = selectType == symTable.semanticError ? selectType : new BArrayType(selectType);\n     }\n \n-    SymbolEnv typeCheckFromClause(BLangFromClause fromClause, SymbolEnv parentEnv) {\n+    @Override\n+    public void visit(BLangQueryAction queryAction) {\n+        List<? extends FromClauseNode> fromClauseList = queryAction.fromClauseList;\n+        List<? extends WhereClauseNode> whereClauseList = queryAction.whereClauseList;\n+        List<? extends LetClauseNode> letClauseList = queryAction.letClauseList;\n+        BLangDoClause doClauseNode = queryAction.doClause;\n+\n+        SymbolEnv parentEnv = env;\n+        for (FromClauseNode fromClause : fromClauseList) {\n+            parentEnv = typeCheckFromClause((BLangFromClause) fromClause, parentEnv);\n+        }\n+        for (LetClauseNode letClauseNode : letClauseList) {\n+            parentEnv = typeCheckLetClause((BLangLetClause) letClauseNode, parentEnv);\n+        }\n+\n+        SymbolEnv whereEnv = parentEnv;\n+        for (WhereClauseNode whereClauseNode : whereClauseList) {\n+            BLangWhereClause whereClause = (BLangWhereClause) whereClauseNode;\n+            checkExpr(whereClause.expression, parentEnv);\n+            whereEnv = typeNarrower.evaluateTruth(whereClause.expression, doClauseNode, parentEnv);\n+        }\n+\n+        SymbolEnv blockEnv = SymbolEnv.createBlockEnv(doClauseNode.body, whereEnv);\n+        // Analyze foreach node's statements.\n+        semanticAnalyzer.analyzeStmt(doClauseNode.body, blockEnv);\n+\n+        BType returnType = types.checkType(doClauseNode.pos, symTable.nilType, expType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1582805268bab290c5bd69cae10014dea6878c16"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 877, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}