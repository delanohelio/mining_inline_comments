{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4Mzg3MTUy", "number": 24430, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjozMTowMlrOEIPDGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMzozMzoyMFrOELHNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDcwNjE5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjozMTowMlrOGoEr4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjozNjo0NFrOGoE0Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3Mjk5NQ==", "bodyText": "As discussed in the meeting, positions in the new tree should be correct.\nLet's verify that and update the test case  with the correct line/column number info.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r444672995", "createdAt": "2020-06-24T06:31:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2901,7 +2889,7 @@ public BLangNode transform(XMLTextNode xmlTextNode) {\n \n     private BLangNode createXMLLiteral(TemplateExpressionNode expressionNode) {\n         BLangXMLTextLiteral xmlTextLiteral = (BLangXMLTextLiteral) TreeBuilder.createXMLTextLiteralNode();\n-        xmlTextLiteral.pos = getPosition(expressionNode);\n+        xmlTextLiteral.pos = getPosition(expressionNode.content().get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381afa2290f05daccf8b86acbc92613f853d4a90"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NTE0Mg==", "bodyText": "ah alright", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r444675142", "createdAt": "2020-06-24T06:36:44Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2901,7 +2889,7 @@ public BLangNode transform(XMLTextNode xmlTextNode) {\n \n     private BLangNode createXMLLiteral(TemplateExpressionNode expressionNode) {\n         BLangXMLTextLiteral xmlTextLiteral = (BLangXMLTextLiteral) TreeBuilder.createXMLTextLiteralNode();\n-        xmlTextLiteral.pos = getPosition(expressionNode);\n+        xmlTextLiteral.pos = getPosition(expressionNode.content().get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3Mjk5NQ=="}, "originalCommit": {"oid": "381afa2290f05daccf8b86acbc92613f853d4a90"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDcxNTk5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachNegativeTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjozNDo1OFrOGoEx2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNDo0MzozOVrOGqreyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NDUyMQ==", "bodyText": "I feel it's better to leave this disabled, since it has unsupported features (functional binding pattern).\nOtherwise we will lose the track of this, since this is enabled..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r444674521", "createdAt": "2020-06-24T06:34:58Z", "author": {"login": "SupunS"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachNegativeTests.java", "diffHunk": "@@ -30,10 +30,10 @@\n  */\n public class ForeachNegativeTests {\n \n-    @Test(enabled = false)\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381afa2290f05daccf8b86acbc92613f853d4a90"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NTA1MQ==", "bodyText": "we can make a note of it in the excel sheet and create an issue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r444675051", "createdAt": "2020-06-24T06:36:28Z", "author": {"login": "m36dot"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachNegativeTests.java", "diffHunk": "@@ -30,10 +30,10 @@\n  */\n public class ForeachNegativeTests {\n \n-    @Test(enabled = false)\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NDUyMQ=="}, "originalCommit": {"oid": "381afa2290f05daccf8b86acbc92613f853d4a90"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTQ0MQ==", "bodyText": "docs tend to get lost in time :)\nLets keep it disabled for now.. Since we have done the same thing for error related langlib tests, I think its good to follow a single pattern..\nWe can enable it once we add the func-binding-pattern", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r444761441", "createdAt": "2020-06-24T09:21:24Z", "author": {"login": "SupunS"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachNegativeTests.java", "diffHunk": "@@ -30,10 +30,10 @@\n  */\n public class ForeachNegativeTests {\n \n-    @Test(enabled = false)\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NDUyMQ=="}, "originalCommit": {"oid": "381afa2290f05daccf8b86acbc92613f853d4a90"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwNTc3MA==", "bodyText": "alright :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r447405770", "createdAt": "2020-06-30T04:43:39Z", "author": {"login": "m36dot"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachNegativeTests.java", "diffHunk": "@@ -30,10 +30,10 @@\n  */\n public class ForeachNegativeTests {\n \n-    @Test(enabled = false)\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3NDUyMQ=="}, "originalCommit": {"oid": "381afa2290f05daccf8b86acbc92613f853d4a90"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDg3NDUzOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-semantics-negative.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMzozMDoxMlrOGsiqpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDozNzoyOFrOGsjc9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1ODUwMw==", "bodyText": "need this change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r449358503", "createdAt": "2020-07-03T03:30:12Z", "author": {"login": "SupunS"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-semantics-negative.bal", "diffHunk": "@@ -215,4 +215,4 @@ function print(any... v) {\n \n function concatString(int index, string value) {\n     output = output + index.toString() + \":\" + value + \" \";\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e276681332e562d21a88e77ea286a4f57018ac"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MTM4Mg==", "bodyText": "nope, dont really remember adding it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r449371382", "createdAt": "2020-07-03T04:37:28Z", "author": {"login": "m36dot"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-semantics-negative.bal", "diffHunk": "@@ -215,4 +215,4 @@ function print(any... v) {\n \n function concatString(int index, string value) {\n     output = output + index.toString() + \":\" + value + \" \";\n-}\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1ODUwMw=="}, "originalCommit": {"oid": "49e276681332e562d21a88e77ea286a4f57018ac"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDg3Njk3OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachNegativeTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMzozMjoxNFrOGsisJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDozNjo1NFrOGsjcaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1ODg4Ng==", "bodyText": "do we need these whitespace changes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r449358886", "createdAt": "2020-07-03T03:32:14Z", "author": {"login": "SupunS"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachNegativeTests.java", "diffHunk": "@@ -36,31 +36,31 @@ public void testForeachSemanticsNegative() {\n         Assert.assertEquals(compile.getErrorCount(), 18);\n         int index = 0;\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  39, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                39, 17);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  48, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                48, 17);\n         BAssertUtil.validateError(compile, index++, \"redeclared symbol 'i'\", 48, 18);\n         BAssertUtil.validateError(compile, index++, \"redeclared symbol 's'\", 48, 21);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  55, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                55, 17);\n         BAssertUtil.validateError(compile, index++, \"undefined symbol 'i'\", 58, 13);\n         BAssertUtil.validateError(compile, index++, \"incompatible types: 'int' is not an iterable collection\", 63,\n                 22);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  76, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                76, 17);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  84, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                84, 17);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'json'\",\n-                                  93, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'json'\",\n+                93, 17);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  119, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                119, 17);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e276681332e562d21a88e77ea286a4f57018ac"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MTI0Mw==", "bodyText": "will fix it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r449371243", "createdAt": "2020-07-03T04:36:54Z", "author": {"login": "m36dot"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachNegativeTests.java", "diffHunk": "@@ -36,31 +36,31 @@ public void testForeachSemanticsNegative() {\n         Assert.assertEquals(compile.getErrorCount(), 18);\n         int index = 0;\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  39, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                39, 17);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  48, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                48, 17);\n         BAssertUtil.validateError(compile, index++, \"redeclared symbol 'i'\", 48, 18);\n         BAssertUtil.validateError(compile, index++, \"redeclared symbol 's'\", 48, 21);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  55, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                55, 17);\n         BAssertUtil.validateError(compile, index++, \"undefined symbol 'i'\", 58, 13);\n         BAssertUtil.validateError(compile, index++, \"incompatible types: 'int' is not an iterable collection\", 63,\n                 22);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  76, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                76, 17);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  84, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                84, 17);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'json'\",\n-                                  93, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'json'\",\n+                93, 17);\n         BAssertUtil.validateError(compile, index++,\n-                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n-                                  119, 17);\n+                \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'string'\",\n+                119, 17);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1ODg4Ng=="}, "originalCommit": {"oid": "49e276681332e562d21a88e77ea286a4f57018ac"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDg3ODIyOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMzozMzoyMVrOGsis8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDo0MDoxMVrOGsjfHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1OTA5MQ==", "bodyText": "any reason for comment-out these?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r449359091", "createdAt": "2020-07-03T03:33:21Z", "author": {"login": "SupunS"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -520,13 +530,13 @@ type StringArray string[];\n function testCloneWithTypeStringArray() {\n    string anArray = \"[\\\"hello\\\", \\\"world\\\"]\";\n    json j = <json> anArray.fromJsonString();\n-    string[]|error cloned = j.cloneWithType(StringArray);\n-    assert(cloned is string[], true);\n+// string[]|error cloned = j.cloneWithType(StringArray);\n+// assert(cloned is string[], true);\n \n-    string[]  clonedArr= <string[]> a2;\n-    assert(clonedArr.length(), anArray.length());\n-    assert(clonedArr[0], \"Hello\");\n-    assert(clonedArr[1], \"World\");\n+// string[]  clonedArr= <string[]> a2;\n+// assert(clonedArr.length(), anArray.length());\n+// assert(clonedArr[0], \"Hello\");\n+// assert(clonedArr[1], \"World\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e276681332e562d21a88e77ea286a4f57018ac"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MTIwMw==", "bodyText": "a2 is an unrecognized symbol, I contacted the person who introduced the change and they said they ll fix it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r449371203", "createdAt": "2020-07-03T04:36:43Z", "author": {"login": "m36dot"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -520,13 +530,13 @@ type StringArray string[];\n function testCloneWithTypeStringArray() {\n    string anArray = \"[\\\"hello\\\", \\\"world\\\"]\";\n    json j = <json> anArray.fromJsonString();\n-    string[]|error cloned = j.cloneWithType(StringArray);\n-    assert(cloned is string[], true);\n+// string[]|error cloned = j.cloneWithType(StringArray);\n+// assert(cloned is string[], true);\n \n-    string[]  clonedArr= <string[]> a2;\n-    assert(clonedArr.length(), anArray.length());\n-    assert(clonedArr[0], \"Hello\");\n-    assert(clonedArr[1], \"World\");\n+// string[]  clonedArr= <string[]> a2;\n+// assert(clonedArr.length(), anArray.length());\n+// assert(clonedArr[0], \"Hello\");\n+// assert(clonedArr[1], \"World\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1OTA5MQ=="}, "originalCommit": {"oid": "49e276681332e562d21a88e77ea286a4f57018ac"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MTkzNQ==", "bodyText": "ack.\nPlease create an issue, and assigned it to the person working on it..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24430#discussion_r449371935", "createdAt": "2020-07-03T04:40:11Z", "author": {"login": "SupunS"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -520,13 +530,13 @@ type StringArray string[];\n function testCloneWithTypeStringArray() {\n    string anArray = \"[\\\"hello\\\", \\\"world\\\"]\";\n    json j = <json> anArray.fromJsonString();\n-    string[]|error cloned = j.cloneWithType(StringArray);\n-    assert(cloned is string[], true);\n+// string[]|error cloned = j.cloneWithType(StringArray);\n+// assert(cloned is string[], true);\n \n-    string[]  clonedArr= <string[]> a2;\n-    assert(clonedArr.length(), anArray.length());\n-    assert(clonedArr[0], \"Hello\");\n-    assert(clonedArr[1], \"World\");\n+// string[]  clonedArr= <string[]> a2;\n+// assert(clonedArr.length(), anArray.length());\n+// assert(clonedArr[0], \"Hello\");\n+// assert(clonedArr[1], \"World\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1OTA5MQ=="}, "originalCommit": {"oid": "49e276681332e562d21a88e77ea286a4f57018ac"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3279, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}