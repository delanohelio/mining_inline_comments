{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MDMyMTMx", "number": 21581, "title": "Implement testerina code coverage", "bodyText": "Purpose\n\nImplement code coverage feature along with the testerina report. A json file is generated with a summary of module statutes and coverage information.\n\nTo make the report presentable an HTML report will be generated which will be tracked by #21580\nFixes #21084\nFixes #14605\nApproach\nCode Coverage\n\nJacoco has been used for analyzing the code coverage of Ballerina source files. The implementation is broken into two parts.\n\ninstrumentation of files and generating code coverage information in binary format\nConverting the report in to readable format\n\n\nThe first part is done by injecting the jacoco agent.jar in to the process that runs the test suite. This will create a .exec binary file in the target/coverage directory. Required filters are used to avoid instrumenting unnecessary classes.\nThe second part is implemented using jacoco java APIs since the jacoco reports are not meaningful for Ballerina tests. For this, the generated .exec file is given and based on the source class files, the coverage of Ballerina source files (.bal) is generated.\nReport generation runs as another separate process after running the test suite since instrumentation and analysis cannot be done in a single process.\nThe mapping from java class file to the corresponding ballerina source file happens automatically in Jacoco using the lineNumberTable.\n\nTest Report\n\nAs of this PR, the test report is a json file. The file has three main elements, namely, the projectName, the moduleStatus and the modulCoverage(empty if code coverage is not enabled).\nSince there are separate processes run for executing tests and generating the code coverage report, separate json files are generated in these processes and later aggregated in to a single report in RunTestsTask#execute metthod.\nThe final json report is located at target/test_results.json\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-10T09:48:37Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21581", "merged": true, "mergeCommit": {"oid": "860fe9336496128991b5e3bb9fd3553edcf64bfd"}, "closed": true, "closedAt": "2020-03-11T13:16:36Z", "author": {"login": "azinneera"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMPtC2gBqjMxMTQwNDAyNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMm8fJAFqTM3Mjc0NTAwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cd01ca4af912849ecf2187271b1a3339feed21d", "author": {"user": {"login": "azinneera", "name": "Asma Jabir"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6cd01ca4af912849ecf2187271b1a3339feed21d", "committedDate": "2020-03-10T09:31:46Z", "message": "Implement testerina code coverage"}, "afterCommit": {"oid": "07154cf52484aef0d6a26e89483a244d5c55679f", "author": {"user": {"login": "azinneera", "name": "Asma Jabir"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07154cf52484aef0d6a26e89483a244d5c55679f", "committedDate": "2020-03-10T10:10:36Z", "message": "Implement testerina code coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "290f1ff958bd8682913cd8a9db69a6d9a85e215a", "author": {"user": {"login": "azinneera", "name": "Asma Jabir"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/290f1ff958bd8682913cd8a9db69a6d9a85e215a", "committedDate": "2020-03-11T05:52:11Z", "message": "Implement testerina code coverage"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07154cf52484aef0d6a26e89483a244d5c55679f", "author": {"user": {"login": "azinneera", "name": "Asma Jabir"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07154cf52484aef0d6a26e89483a244d5c55679f", "committedDate": "2020-03-10T10:10:36Z", "message": "Implement testerina code coverage"}, "afterCommit": {"oid": "290f1ff958bd8682913cd8a9db69a6d9a85e215a", "author": {"user": {"login": "azinneera", "name": "Asma Jabir"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/290f1ff958bd8682913cd8a9db69a6d9a85e215a", "committedDate": "2020-03-11T05:52:11Z", "message": "Implement testerina code coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd9db867ec4aa975d3d2c1b5047938112788a97", "author": {"user": {"login": "azinneera", "name": "Asma Jabir"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/acd9db867ec4aa975d3d2c1b5047938112788a97", "committedDate": "2020-03-11T09:50:40Z", "message": "Add code-cov review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e3ec90e6ee33b5779a200797608ef3c5fcb0111", "author": {"user": {"login": "azinneera", "name": "Asma Jabir"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e3ec90e6ee33b5779a200797608ef3c5fcb0111", "committedDate": "2020-03-11T09:44:39Z", "message": "Add code-cov review suggestions"}, "afterCommit": {"oid": "acd9db867ec4aa975d3d2c1b5047938112788a97", "author": {"user": {"login": "azinneera", "name": "Asma Jabir"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/acd9db867ec4aa975d3d2c1b5047938112788a97", "committedDate": "2020-03-11T09:50:40Z", "message": "Add code-cov review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNjIzMTQ3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21581#pullrequestreview-372623147", "createdAt": "2020-03-11T10:11:31Z", "commit": {"oid": "acd9db867ec4aa975d3d2c1b5047938112788a97"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoxMTozMlrOF0wibw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMToyOTowMlrOF0zE1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NTUxOQ==", "bodyText": "Shall we change this to more specific message. If there are test failures this code should not run.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21581#discussion_r390865519", "createdAt": "2020-03-11T10:11:32Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunTestsTask.java", "diffHunk": "@@ -93,11 +125,34 @@ public void execute(BuildContext buildContext) {\n             HashSet<Path> testDependencies = getTestDependencies(buildContext, bLangPackage);\n             Path jsonPath = buildContext.getTestJsonPathTargetCache(bLangPackage.packageID);\n             createTestJson(bLangPackage, suite, sourceRootPath, jsonPath);\n-            int testResult = runTestSuit(jsonPath, buildContext, testDependencies);\n+            int testResult = runTestSuit(jsonPath, buildContext, testDependencies, bLangPackage);\n             if (testResult != 0) {\n                 throw createLauncherException(\"there are test failures\");\n             }\n+            Path statusJsonPath = jsonPath.resolve(TesterinaConstants.STATUS_FILE);\n+            try {\n+                ModuleStatus moduleStatus = loadModuleStatusFromFile(statusJsonPath);\n+                testReport.addModuleStatus(String.valueOf(bLangPackage.packageID.name), moduleStatus);\n+            } catch (IOException e) {\n+                throw createLauncherException(\"error while generating test report\", e);\n+            }\n+\n+            if (coverage) {\n+                int coverageResult = generateCoverageReport(buildContext, testDependencies, bLangPackage);\n+                if (coverageResult != 0) {\n+                    throw createLauncherException(\"there are test failures\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9db867ec4aa975d3d2c1b5047938112788a97"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwNzA5Mw==", "bodyText": "Shall we reduce the no of new lines here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21581#discussion_r390907093", "createdAt": "2020-03-11T11:29:02Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunTestsTask.java", "diffHunk": "@@ -166,23 +221,95 @@ private static void writeToJson(TestSuite testSuite, Path jsonPath) {\n         }\n     }\n \n-    private int runTestSuit(Path jsonPath, BuildContext buildContext, HashSet<Path> testDependencies) {\n-        String javaCommand = System.getProperty(\"java.command\");\n+    /**\n+     * Write the test report content into a json file.\n+     *\n+     * @param out PrintStream object to print messages to console\n+     * @param testReport Data that are parsed to the json\n+     */\n+    private void writeReportToJson(PrintStream out, TestReport testReport, Path jsonPath) {\n+        out.println();\n+        out.println(\"Generating Test Report\");\n+        File jsonFile = new File(jsonPath.resolve(TEST_RESULTS_FILE).toString());\n+        try (Writer writer = new OutputStreamWriter(new FileOutputStream(jsonFile), StandardCharsets.UTF_8)) {\n+            Gson gson;\n+            if (this.coverage) {\n+                 gson = new Gson();\n+            } else {\n+                gson = new GsonBuilder().setExclusionStrategies(new TestReport.ReportExclusionStrategy()).create();\n+            }\n+            String json = gson.toJson(testReport);\n+            writer.write(new String(json.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8));\n+            out.println(\"\\t\" + Paths.get(\"\").toAbsolutePath().relativize(jsonFile.toPath()));\n+        } catch (IOException e) {\n+            throw LauncherUtils.createLauncherException(\"couldn't read data from the Json file : \" + e.toString());\n+        }\n+    }\n+\n+    private int runTestSuit(Path jsonPath, BuildContext buildContext, HashSet<Path> testDependencies,\n+                            BLangPackage bLangPackage) {\n+        List<String> cmdArgs = new ArrayList<>();\n+        cmdArgs.add(System.getProperty(\"java.command\"));\n         String mainClassName = TesterinaConstants.TESTERINA_LAUNCHER_CLASS_NAME;\n+        Path targetDir = Paths.get(buildContext.get(BuildContextField.TARGET_DIR).toString());\n+        String orgName = String.valueOf(bLangPackage.packageID.orgName);\n+        String packageName = String.valueOf(bLangPackage.packageID.name);\n+\n+        String jacocoAgentJarPath = Paths.get(System.getProperty(BALLERINA_HOME)).resolve(BALLERINA_HOME_BRE)\n+                .resolve(BALLERINA_HOME_LIB).resolve(TesterinaConstants.AGENT_FILE_NAME).toString();\n         try {\n+            if (coverage) {\n+                String agentCommand = \"-javaagent:\"\n+                        + jacocoAgentJarPath\n+                        + \"=destfile=\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9db867ec4aa975d3d2c1b5047938112788a97"}, "originalPosition": 185}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNzQ1MDA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21581#pullrequestreview-372745006", "createdAt": "2020-03-11T13:15:38Z", "commit": {"oid": "acd9db867ec4aa975d3d2c1b5047938112788a97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4015, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}