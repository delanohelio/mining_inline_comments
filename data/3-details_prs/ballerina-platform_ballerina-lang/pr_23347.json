{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODkwMTU3", "number": 23347, "title": "Add singleton type descriptor support to new parser.", "bodyText": "Purpose\nAdd singleton type descriptor support to new parser with recovery logic and test cases.\nFixes #23317\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-19T05:40:15Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347", "merged": true, "mergeCommit": {"oid": "24b5a0a238fef2b445ab7fe4fd565e921b131951"}, "closed": true, "closedAt": "2020-05-20T08:20:49Z", "author": {"login": "rdulmina"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcitbNGgH2gAyNDE5ODkwMTU3OjM4YjY3ZmZjNTZlNDdlZmEzZWE0MWE5MjUwNWJmMzY2MWRiYTEwNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjErk9gFqTQxNTA5ODkyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "38b67ffc56e47efa3ea41a92505bf3661dba1064", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38b67ffc56e47efa3ea41a92505bf3661dba1064", "committedDate": "2020-05-19T05:14:57Z", "message": "Singleton type desc support with recovery logic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec563e664c720b63a3b7901ec948f7071fbe2b2", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ec563e664c720b63a3b7901ec948f7071fbe2b2", "committedDate": "2020-05-19T05:37:25Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into singleton-type\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/ParserRuleContext.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MTIxMjEw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#pullrequestreview-414121210", "createdAt": "2020-05-19T05:55:08Z", "commit": {"oid": "1ec563e664c720b63a3b7901ec948f7071fbe2b2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1NTowOFrOGXQ1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjowOTo0MVrOGXRIqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NjI5MA==", "bodyText": "Better to pass the nodeKind as a parameter, coz you may be reaching here after recovering (inserting a token). Then the next tokenKind may not be same as peek().kind.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#discussion_r427046290", "createdAt": "2020-05-19T05:55:08Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9343,4 +9350,55 @@ private STNode parseIntersectionTypeDescriptor(STNode leftTypeDesc, ParserRuleCo\n         STNode rightTypeDesc = parseTypeDescriptor(context);\n         return STNodeFactory.createIntersectionTypeDescriptorNode(leftTypeDesc, bitwiseAndToken, rightTypeDesc);\n     }\n+\n+    /**\n+     * Parse singleton type descriptor.\n+     * <p>singleton-type-descriptor := simple-const-expr\n+     * simple-const-expr :=\n+     *   nil-literal\n+     *   | boolean-literal\n+     *   | [Sign] int-literal\n+     *   | [Sign] floating-point-literal\n+     *   | string-literal\n+     *   | constant-reference-expr</p>\n+     */\n+    private STNode parseSingletonTypeDesc() {\n+        STNode simpleContExpr =  parseConstExpr();\n+        return STNodeFactory.createSingletonTypeDescriptorNode(simpleContExpr);\n+    }\n+\n+    private STNode parseSignedIntOrFloat() {\n+        STNode operator = parseUnaryOperator();\n+        STNode literal;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case HEX_INTEGER_LITERAL:\n+            case DECIMAL_FLOATING_POINT_LITERAL:\n+            case HEX_FLOATING_POINT_LITERAL:\n+                literal = consume();\n+                break;\n+            default:   //decimal integer literal\n+                literal = parseDecimalIntLiteral(ParserRuleContext.DECIMAL_INTEGER_LITERAL);\n+        }\n+        return STNodeFactory.createUnaryExpressionNode(operator, literal);\n+    }\n+\n+    private boolean isSingletonTypeDescStartToken() {\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec563e664c720b63a3b7901ec948f7071fbe2b2"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NzE3Mw==", "bodyText": "We come here trying to get the next expected token/context after close-parenthesis of a nil-literal. In that case the next token is an rhs of an expression. So this has to be ParserRuleContext.EXPRESSION_RHS", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#discussion_r427047173", "createdAt": "2020-05-19T05:57:50Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2169,7 +2184,7 @@ private ParserRuleContext getNextRuleForCloseParenthsis() {\n             return ParserRuleContext.TYPEDESC_RHS;\n         } else if (parentCtx == ParserRuleContext.NIL_LITERAL) {\n             endContext();\n-            return ParserRuleContext.EXPRESSION_RHS;\n+            return getNextRuleForExpr();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec563e664c720b63a3b7901ec948f7071fbe2b2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MTE3Nw==", "bodyText": "There are situations where, a statement can start with an expression.\ne.g: sync-send/async-send action-stmt (https://ballerina.io/ballerina-spec/spec.html#send-action)\nfunction foo() {\n   5 -> w1;    // send value 5 to worker w1\n}\n\nSo I think here you'll have to look some more tokens ahead, and determine whether this is actually a singleton type start or whether this is an expression.\nAlso need to note, this ambiguity is there only for var-decl-stmt. This issue is not there for other places where a type-desc is expected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#discussion_r427051177", "createdAt": "2020-05-19T06:09:41Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9343,4 +9350,55 @@ private STNode parseIntersectionTypeDescriptor(STNode leftTypeDesc, ParserRuleCo\n         STNode rightTypeDesc = parseTypeDescriptor(context);\n         return STNodeFactory.createIntersectionTypeDescriptorNode(leftTypeDesc, bitwiseAndToken, rightTypeDesc);\n     }\n+\n+    /**\n+     * Parse singleton type descriptor.\n+     * <p>singleton-type-descriptor := simple-const-expr\n+     * simple-const-expr :=\n+     *   nil-literal\n+     *   | boolean-literal\n+     *   | [Sign] int-literal\n+     *   | [Sign] floating-point-literal\n+     *   | string-literal\n+     *   | constant-reference-expr</p>\n+     */\n+    private STNode parseSingletonTypeDesc() {\n+        STNode simpleContExpr =  parseConstExpr();\n+        return STNodeFactory.createSingletonTypeDescriptorNode(simpleContExpr);\n+    }\n+\n+    private STNode parseSignedIntOrFloat() {\n+        STNode operator = parseUnaryOperator();\n+        STNode literal;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case HEX_INTEGER_LITERAL:\n+            case DECIMAL_FLOATING_POINT_LITERAL:\n+            case HEX_FLOATING_POINT_LITERAL:\n+                literal = consume();\n+                break;\n+            default:   //decimal integer literal\n+                literal = parseDecimalIntLiteral(ParserRuleContext.DECIMAL_INTEGER_LITERAL);\n+        }\n+        return STNodeFactory.createUnaryExpressionNode(operator, literal);\n+    }\n+\n+    private boolean isSingletonTypeDescStartToken() {\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case STRING_LITERAL:\n+            case DECIMAL_INTEGER_LITERAL:\n+            case HEX_INTEGER_LITERAL:\n+            case DECIMAL_FLOATING_POINT_LITERAL:\n+            case HEX_FLOATING_POINT_LITERAL:\n+            case TRUE_KEYWORD:\n+            case FALSE_KEYWORD:\n+            case NULL_KEYWORD:\n+            case PLUS_TOKEN:\n+            case MINUS_TOKEN:\n+                return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec563e664c720b63a3b7901ec948f7071fbe2b2"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c087f9fbb64b038874098276293089a12fc6c852", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c087f9fbb64b038874098276293089a12fc6c852", "committedDate": "2020-05-19T12:54:08Z", "message": "Test cases for singleton type desc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0673c67ef7268dd7f9de0166f5065e1a0855d69b", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0673c67ef7268dd7f9de0166f5065e1a0855d69b", "committedDate": "2020-05-19T12:54:32Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into singleton-type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645121b4682eaf553907797e3f9729bb9b1fc8ca", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/645121b4682eaf553907797e3f9729bb9b1fc8ca", "committedDate": "2020-05-19T13:02:06Z", "message": "Removed extra new lines."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NDUwMDc0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#pullrequestreview-414450074", "createdAt": "2020-05-19T13:34:16Z", "commit": {"oid": "645121b4682eaf553907797e3f9729bb9b1fc8ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozNDoxNlrOGXgrhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozNDoxNlrOGXgrhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNTg2Mw==", "bodyText": "This can be a problem if two consecutive tokens are equal.\nI feel you'll have to pass the peek-index as an argument here. I've done a similar thing in isValidExpressionStart() in: #23365", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#discussion_r427305863", "createdAt": "2020-05-19T13:34:16Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9343,4 +9360,85 @@ private STNode parseIntersectionTypeDescriptor(STNode leftTypeDesc, ParserRuleCo\n         STNode rightTypeDesc = parseTypeDescriptor(context);\n         return STNodeFactory.createIntersectionTypeDescriptorNode(leftTypeDesc, bitwiseAndToken, rightTypeDesc);\n     }\n+\n+    /**\n+     * Parse singleton type descriptor.\n+     * <p>singleton-type-descriptor := simple-const-expr\n+     * simple-const-expr :=\n+     *   nil-literal\n+     *   | boolean-literal\n+     *   | [Sign] int-literal\n+     *   | [Sign] floating-point-literal\n+     *   | string-literal\n+     *   | constant-reference-expr</p>\n+     */\n+    private STNode parseSingletonTypeDesc() {\n+        STNode simpleContExpr =  parseConstExpr();\n+        return STNodeFactory.createSingletonTypeDescriptorNode(simpleContExpr);\n+    }\n+\n+    private STNode parseSignedIntOrFloat() {\n+        STNode operator = parseUnaryOperator();\n+        STNode literal;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case HEX_INTEGER_LITERAL:\n+            case DECIMAL_FLOATING_POINT_LITERAL:\n+            case HEX_FLOATING_POINT_LITERAL:\n+                literal = consume();\n+                break;\n+            default:   //decimal integer literal\n+                literal = parseDecimalIntLiteral(ParserRuleContext.DECIMAL_INTEGER_LITERAL);\n+        }\n+        return STNodeFactory.createUnaryExpressionNode(operator, literal);\n+    }\n+\n+    private boolean isSingletonTypeDescStart(SyntaxKind tokenKind, boolean inTypeDescCtx) {\n+        STToken nextToken = peek();\n+        STToken nextNextToken, nextNextNextToken;\n+        if (tokenKind != nextToken.kind) { //this will be true if and only if we come here after recovering", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645121b4682eaf553907797e3f9729bb9b1fc8ca"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NDU0MjU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#pullrequestreview-414454257", "createdAt": "2020-05-19T13:38:42Z", "commit": {"oid": "645121b4682eaf553907797e3f9729bb9b1fc8ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozODo0MlrOGXg4Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozODo0MlrOGXg4Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwOTA4Nw==", "bodyText": "Might need to check whether a basic-literal is followed by | or &. Because with type binding patterns, var name would not always be an identifier.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#discussion_r427309087", "createdAt": "2020-05-19T13:38:42Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9343,4 +9360,85 @@ private STNode parseIntersectionTypeDescriptor(STNode leftTypeDesc, ParserRuleCo\n         STNode rightTypeDesc = parseTypeDescriptor(context);\n         return STNodeFactory.createIntersectionTypeDescriptorNode(leftTypeDesc, bitwiseAndToken, rightTypeDesc);\n     }\n+\n+    /**\n+     * Parse singleton type descriptor.\n+     * <p>singleton-type-descriptor := simple-const-expr\n+     * simple-const-expr :=\n+     *   nil-literal\n+     *   | boolean-literal\n+     *   | [Sign] int-literal\n+     *   | [Sign] floating-point-literal\n+     *   | string-literal\n+     *   | constant-reference-expr</p>\n+     */\n+    private STNode parseSingletonTypeDesc() {\n+        STNode simpleContExpr =  parseConstExpr();\n+        return STNodeFactory.createSingletonTypeDescriptorNode(simpleContExpr);\n+    }\n+\n+    private STNode parseSignedIntOrFloat() {\n+        STNode operator = parseUnaryOperator();\n+        STNode literal;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case HEX_INTEGER_LITERAL:\n+            case DECIMAL_FLOATING_POINT_LITERAL:\n+            case HEX_FLOATING_POINT_LITERAL:\n+                literal = consume();\n+                break;\n+            default:   //decimal integer literal\n+                literal = parseDecimalIntLiteral(ParserRuleContext.DECIMAL_INTEGER_LITERAL);\n+        }\n+        return STNodeFactory.createUnaryExpressionNode(operator, literal);\n+    }\n+\n+    private boolean isSingletonTypeDescStart(SyntaxKind tokenKind, boolean inTypeDescCtx) {\n+        STToken nextToken = peek();\n+        STToken nextNextToken, nextNextNextToken;\n+        if (tokenKind != nextToken.kind) { //this will be true if and only if we come here after recovering\n+            nextNextToken = nextToken;\n+            nextNextNextToken = peek(2);\n+        } else {\n+            nextNextToken = peek(2);\n+            nextNextNextToken = peek(3);\n+        }\n+        switch (tokenKind) {\n+            case STRING_LITERAL:\n+            case DECIMAL_INTEGER_LITERAL:\n+            case HEX_INTEGER_LITERAL:\n+            case DECIMAL_FLOATING_POINT_LITERAL:\n+            case HEX_FLOATING_POINT_LITERAL:\n+            case TRUE_KEYWORD:\n+            case FALSE_KEYWORD:\n+            case NULL_KEYWORD:\n+                if (inTypeDescCtx || nextNextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+                    return true;\n+                }\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645121b4682eaf553907797e3f9729bb9b1fc8ca"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "897682b658dec4bf570a2b719cf6246a4b2a7dd0", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/897682b658dec4bf570a2b719cf6246a4b2a7dd0", "committedDate": "2020-05-19T15:27:06Z", "message": "Changed the parsing logic of singleton type desc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f781a7aaeeb4495deb220d6b17cc78803efb742", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f781a7aaeeb4495deb220d6b17cc78803efb742", "committedDate": "2020-05-19T15:58:22Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into singleton-type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTY4MzIz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#pullrequestreview-414968323", "createdAt": "2020-05-20T03:31:12Z", "commit": {"oid": "4f781a7aaeeb4495deb220d6b17cc78803efb742"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzozMToxMlrOGX6D3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzozMToyMVrOGX6D-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMTY5Mw==", "bodyText": "base is TypeDescriptorNode", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#discussion_r427721693", "createdAt": "2020-05-20T03:31:12Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -2813,6 +2813,17 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"SingletonTypeDescriptorNode\",\n+            \"base\": \"Node\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f781a7aaeeb4495deb220d6b17cc78803efb742"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMTcyMg==", "bodyText": "base is ExpressionNode", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#discussion_r427721722", "createdAt": "2020-05-20T03:31:21Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -2813,6 +2813,17 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"SingletonTypeDescriptorNode\",\n+            \"base\": \"Node\",\n+            \"kind\": \"SINGLETON_TYPE_DESC\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"simpleContExprNode\",\n+                    \"type\": \"Node\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f781a7aaeeb4495deb220d6b17cc78803efb742"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c547a0c3558b5ecf77b63ff861ad4f3a01750c", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/42c547a0c3558b5ecf77b63ff861ad4f3a01750c", "committedDate": "2020-05-20T03:58:29Z", "message": "Changed base node of singleton type desc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bf4cb3c702f73ddcb25765d6c7061db630a7354", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bf4cb3c702f73ddcb25765d6c7061db630a7354", "committedDate": "2020-05-20T05:32:24Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into singleton-type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MDk4OTIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23347#pullrequestreview-415098922", "createdAt": "2020-05-20T08:20:39Z", "commit": {"oid": "3bf4cb3c702f73ddcb25765d6c7061db630a7354"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3333, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}