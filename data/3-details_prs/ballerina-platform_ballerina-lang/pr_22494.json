{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NzYwNzg2", "number": 22494, "title": "Fix type checking against `error[]` and `any[]`", "bodyText": "Purpose\nProper type checking logic is not happening when trying to assign error[] to any[].\nFixes #22410\nApproach\nType checking logic is added to filter out error type. Existing code let any type or array to be assigned to any type array.\nSamples\nerror[] ea = [];\nany[] j = ea;\nerror: .::error_test_negative.bal:127:15: incompatible types: expected 'any[]', found 'error[]'\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-06T16:26:37Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494", "merged": true, "mergeCommit": {"oid": "a435e101bb4119a9233580dfc0cc1a12a65de4ff"}, "closed": true, "closedAt": "2020-05-05T05:42:56Z", "author": {"login": "KRVPerera"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVfQ5IAFqTM4OTYyODQ4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABceNZI1AFqTQwNTUwMzQ3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjI4NDg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#pullrequestreview-389628489", "createdAt": "2020-04-08T03:24:00Z", "commit": {"oid": "8585dc433b22363195edb73af11770c8963a40f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyNDowMFrOGCdrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyNDowMFrOGCdrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjU0Mw==", "bodyText": "I think we can refactor this method a bit.\nIn L779 and L782 IMO we can call isAssignable instead of isArrayTypesAssignable.\nAFAICT we can then change the first parameter of this method to a BArrayType (we'll probably have to deprecate this and introduce a new method). This'll reduce the number of specific checks and reuse the isAssignable logic, which has been tested quite a lot, more.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r405236543", "createdAt": "2020-04-08T03:24:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -784,18 +784,19 @@ public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair>\n         } else if (source.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8585dc433b22363195edb73af11770c8963a40f6"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8585dc433b22363195edb73af11770c8963a40f6", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8585dc433b22363195edb73af11770c8963a40f6", "committedDate": "2020-04-06T16:07:35Z", "message": "Add negative test for type checking error[], any[]\n\nTest cases will test scenarios where user assign `error[]` to `any[]`\nand vice versa.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "af764862b26f2e58550174fc34b3a1a96e09797a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af764862b26f2e58550174fc34b3a1a96e09797a", "committedDate": "2020-04-17T17:17:05Z", "message": "Fix : test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af764862b26f2e58550174fc34b3a1a96e09797a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af764862b26f2e58550174fc34b3a1a96e09797a", "committedDate": "2020-04-17T17:17:05Z", "message": "Fix : test"}, "afterCommit": {"oid": "c0d32db2635c7b506272e8f5875661e733171f54", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0d32db2635c7b506272e8f5875661e733171f54", "committedDate": "2020-04-17T17:22:04Z", "message": "Fix stdlib fails for un assignable error type\n\nWe cannot assign `error` type to `ClientError` as `error` is a superset\nwhich may contain error Types which does not belong to `ClientError`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0d32db2635c7b506272e8f5875661e733171f54", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0d32db2635c7b506272e8f5875661e733171f54", "committedDate": "2020-04-17T17:22:04Z", "message": "Fix stdlib fails for un assignable error type\n\nWe cannot assign `error` type to `ClientError` as `error` is a superset\nwhich may contain error Types which does not belong to `ClientError`"}, "afterCommit": {"oid": "8504573cefe4690a352fb63077261375c4ef8e29", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8504573cefe4690a352fb63077261375c4ef8e29", "committedDate": "2020-04-17T19:51:43Z", "message": "Fix stdlib fails for un assignable error type\n\nWe cannot assign `error` type to `ClientError` as `error` is a superset\nwhich may contain error Types which does not belong to `ClientError`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cae305fa068a8191ea7b4ba706a65523de42b90a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cae305fa068a8191ea7b4ba706a65523de42b90a", "committedDate": "2020-04-18T16:09:24Z", "message": "Add test cases for error[] assignable changes"}, "afterCommit": {"oid": "309d033ab9bd0f661fdb7b0f25a9ae6b5be26526", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/309d033ab9bd0f661fdb7b0f25a9ae6b5be26526", "committedDate": "2020-04-20T10:12:41Z", "message": "Add test cases for error[] assignable changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "309d033ab9bd0f661fdb7b0f25a9ae6b5be26526", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/309d033ab9bd0f661fdb7b0f25a9ae6b5be26526", "committedDate": "2020-04-20T10:12:41Z", "message": "Add test cases for error[] assignable changes"}, "afterCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c1d6cc8adc77572100cc6532a6fed54e8e9797f", "committedDate": "2020-04-21T09:30:18Z", "message": "Add test cases for error[] assignable changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODQ3MTE4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#pullrequestreview-397847118", "createdAt": "2020-04-22T05:09:14Z", "commit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTowOToxNVrOGJjmZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxODoxM1rOGJjyTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzYzNg==", "bodyText": "For unions, consider something like,\n   int[] x = [1, 2];\n   int|string[] y = x;\nThe current check will cause this assignment to pass right?\nI think for unions we have to check isArrayTypesAssignable individually for each member and return true if at least one returns true.\n        if (target.tag == TypeTags.UNION) {\n            for (BType memberType : ((BUnionType) target).getMemberTypes()) {\n                if (isArrayTypesAssignable(source, memberType, unresolvedTypes) {\n                    return true;\n                }\n            }\n            return false;\n        }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412673636", "createdAt": "2020-04-22T05:09:15Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +776,26 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return target.tag == TypeTags.ANY;\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzY4Ng==", "bodyText": "Please add a couple of tests too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412673686", "createdAt": "2020-04-22T05:09:26Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +776,26 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return target.tag == TypeTags.ANY;\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzYzNg=="}, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NTE3Ng==", "bodyText": "error[] x = [e1, e2];\nany y = x;\nThis is valid. So we don't need this check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412675176", "createdAt": "2020-04-22T05:13:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +776,26 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return target.tag == TypeTags.ANY;\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {\n+            return isAssignable(sourceElementType, target, unresolvedTypes);\n         }\n \n-        // In this case, lhs type should be of type 'any' and the rhs type cannot be a value type\n-        return target.tag == TypeTags.ANY && !isValueType(source);\n+        return (target.tag == TypeTags.ANY) && (sourceElementType.tag != TypeTags.ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NjY4Nw==", "bodyText": "@ThisaruGuruge can you verify these changes please? The previous behaviour (passing an error?[] where a ClientError?[] is expected in populateFailoverErrorHttpStatusCodes) was allowed due to a bug.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412676687", "createdAt": "2020-04-22T05:18:13Z", "author": {"login": "MaryamZi"}, "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -308,7 +308,7 @@ function performFailoverAction (string path, Request request, HttpOperation requ\n     Response inResponse = new;\n     HttpFuture inFuture = new;\n     Request failoverRequest = request;\n-    error?[] failoverActionErrData = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTc5ODI5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#pullrequestreview-400579829", "createdAt": "2020-04-27T01:34:20Z", "commit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMTozNDoyMFrOGMNRYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoyNTozOFrOGMOG1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ1MzUzNg==", "bodyText": "Why is this removed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415453536", "createdAt": "2020-04-27T01:34:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -564,12 +565,8 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n         }\n \n         if (targetTag == TypeTags.JSON) {\n-            if (sourceTag == TypeTags.JSON) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Njg5OA==", "bodyText": "Shall we do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (targetArrayType.size == source.size) {\n          \n          \n            \n                            return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (targetArrayType.size != source.size) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                        \n          \n          \n            \n                        return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n          \n      \n    \n    \n  \n\ninstead?\nImproves readabilty IMO.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415466898", "createdAt": "2020-04-27T02:24:19Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +772,28 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n+    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n \n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzIyMQ==", "bodyText": "This can be removed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415467221", "createdAt": "2020-04-27T02:25:38Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/assign/AssignStmtTest.java", "diffHunk": "@@ -207,6 +207,20 @@ public void testAssignmentNegativeCases() {\n                 \"invalid record binding pattern with type 'error'\", 92, 9);\n         BAssertUtil.validateError(resultNegative, i++,\n                 \"invalid record variable; expecting a record type but found 'error' in type definition\", 92, 20);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected 'any[]', found 'error[]'\", 98, 15);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected 'error[]', found 'any[]'\", 100, 26);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(CError|LError)?[]', found 'error?[]'\", 118, 19);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(CError|LError)?[]', found 'error?[]'\", 119, 11);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(error|int[])', found 'error[]'\", 127, 21);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(int|error[])', found 'error'\", 132, 21);\n+//        BAssertUtil.validateError(resultNegative, i++,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTgzMjA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#pullrequestreview-403183209", "createdAt": "2020-04-30T03:49:56Z", "commit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo0OTo1N1rOGOYtIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDoxMzo1NlrOGOZBmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczODAxNg==", "bodyText": "Why are we doing this change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417738016", "createdAt": "2020-04-30T03:49:57Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-bstring-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java", "diffHunk": "@@ -270,10 +270,11 @@ public void testErrorNegative() {\n                 \"error reason is mandatory for direct error constructor\", 112, 28);\n         BAssertUtil.validateError(negativeCompileResult, i++,\n                 \"incompatible types: expected 'error', found '(error|int)'\", 118, 11);\n-        BAssertUtil.validateError(negativeCompileResult, i,\n+        BAssertUtil.validateError(negativeCompileResult, i++,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczODI5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CLError? [] err = [];\n          \n          \n            \n                error? [] errs = err;\n          \n          \n            \n                CLError?[] err = [];\n          \n          \n            \n                error?[] errs = err;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417738291", "createdAt": "2020-04-30T03:51:14Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt-negative.bal", "diffHunk": "@@ -91,3 +91,43 @@ public function restActionResultAssignment() {\n     map<string> sm = c->foo1();\n     var { a: d } = c->foo2();\n }\n+\n+\n+function assignErrorArrayToAnyTypeArrayViseVersa() {\n+    error[] ea = [];\n+    any[] j = ea;\n+    any[] anyArray = [];\n+    error[] errorArray = anyArray;\n+}\n+\n+public const C_ERROR = \"CError\";\n+public const L_ERROR = \"LError\";\n+\n+public type Detail record {\n+    string message;\n+    error cause?;\n+};\n+\n+type CError error<C_ERROR, Detail>;\n+type LError error<L_ERROR, Detail>;\n+type CLError CError|LError;\n+\n+function nonAssingableErrorTypeArrayAssign() {\n+    CLError? [] err = [];\n+    error? [] errs = err;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTE4Mg==", "bodyText": "Shouldn't this be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function testAssignErrorArrayToAnyArray() {\n          \n          \n            \n            function testAssignErrorArrayToAny() {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417739182", "createdAt": "2020-04-30T03:55:40Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTU2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                string errorMessage = \"Test Error\";\n          \n          \n            \n                error testError = error(\"Test Error\");\n          \n          \n            \n                error[] errorArray = [testError];\n          \n          \n            \n                any anyArray = errorArray;\n          \n          \n            \n                error[] errorArrayBack = <error[]>anyArray;\n          \n          \n            \n                assertEquality(errorMessage, errorArrayBack[0].reason());\n          \n          \n            \n                string errorReason = \"TestError\";\n          \n          \n            \n                error testError = error(errorReason);\n          \n          \n            \n                error[] errorArray = [testError];\n          \n          \n            \n                any anyVal = errorArray;\n          \n          \n            \n                error[] errorArrayBack = <error[]>anyVal;\n          \n          \n            \n                assertEquality(errorReason, errorArrayBack[0].reason());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417739565", "createdAt": "2020-04-30T03:57:27Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MjMwNQ==", "bodyText": "This variable name does not make sense IMO.\nShall we rename it to jsonVar or jsonArray?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417742305", "createdAt": "2020-04-30T04:09:36Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());\n+}\n+\n+function testAssignIntArrayToJson() {\n+    int[*] intArray = [1, 2];\n+    json jsonObjectOfIntArray = intArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MjQyMA==", "bodyText": "Why do we need another assignment to a variable of the same type? What are we trying to test here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417742420", "createdAt": "2020-04-30T04:10:07Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());\n+}\n+\n+function testAssignIntArrayToJson() {\n+    int[*] intArray = [1, 2];\n+    json jsonObjectOfIntArray = intArray;\n+    json jsonToJson = jsonObjectOfIntArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0Mjk4Mg==", "bodyText": "Shall we assert the actual values instead of using .toString()?\nHow about\nassertTrue(jsonVar is int[2]);\n\nint[2] arr = <int[2]> jsonVar;\nassertEquality(1, arr[0]);\nassertEquality(2, arr[1]);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417742982", "createdAt": "2020-04-30T04:12:51Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());\n+}\n+\n+function testAssignIntArrayToJson() {\n+    int[*] intArray = [1, 2];\n+    json jsonObjectOfIntArray = intArray;\n+    json jsonToJson = jsonObjectOfIntArray;\n+    assertEquality(\"1 2\", jsonToJson.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MzI1OQ==", "bodyText": "Again variable name doesn't reflect the actual type does it.\nGiven that these are small tests I'd rather go with simple names, a and b, arr1 and arr2, etc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417743259", "createdAt": "2020-04-30T04:13:56Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());\n+}\n+\n+function testAssignIntArrayToJson() {\n+    int[*] intArray = [1, 2];\n+    json jsonObjectOfIntArray = intArray;\n+    json jsonToJson = jsonObjectOfIntArray;\n+    assertEquality(\"1 2\", jsonToJson.toString());\n+}\n+\n+function testAssignIntOrStringArrayIntOrFloatOrStringUnionArray() {\n+    int[]|string[] intOrStringArray = <int[]>[1, 2];\n+    (int|float)[]|string[] intOrFloatArray = intOrStringArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccc84e5829588393953aaf7e7c34e351575c9635", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccc84e5829588393953aaf7e7c34e351575c9635", "committedDate": "2020-04-30T08:40:45Z", "message": "Fix code review suggestions"}, "afterCommit": {"oid": "a5fe529a4cfbefda277e625a798db07bd748c2d5", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5fe529a4cfbefda277e625a798db07bd748c2d5", "committedDate": "2020-04-30T08:44:31Z", "message": "Fix code review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5fe529a4cfbefda277e625a798db07bd748c2d5", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5fe529a4cfbefda277e625a798db07bd748c2d5", "committedDate": "2020-04-30T08:44:31Z", "message": "Fix code review suggestions"}, "afterCommit": {"oid": "43d79b809e35dc3d40026fc46bc1ca4a502805e7", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43d79b809e35dc3d40026fc46bc1ca4a502805e7", "committedDate": "2020-04-30T08:46:16Z", "message": "Fix code review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bae74607f6e189d501bcd2fe9b525da4775d0e0d", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bae74607f6e189d501bcd2fe9b525da4775d0e0d", "committedDate": "2020-04-30T08:55:26Z", "message": "Fix referring wrong ballerina method"}, "afterCommit": {"oid": "cd4eee3796b4f617a46d429496a00184132d6918", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd4eee3796b4f617a46d429496a00184132d6918", "committedDate": "2020-04-30T23:24:02Z", "message": "Fix referring wrong ballerina method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d164e99f15ca4b0afd1336811bfa538104ad806", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d164e99f15ca4b0afd1336811bfa538104ad806", "committedDate": "2020-05-02T19:46:07Z", "message": "Fix `error[]` being assignable to `any[]`\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "125138e730d26cd0c6fd736953451461907a7acc", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/125138e730d26cd0c6fd736953451461907a7acc", "committedDate": "2020-05-02T19:46:07Z", "message": "Add negative test for type checking error[], any[]\n\nTest cases will test scenarios where user assign `error[]` to `any[]`\nand vice versa.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f422b5274eb46ec57295f9daa06ed9c489c55e21", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f422b5274eb46ec57295f9daa06ed9c489c55e21", "committedDate": "2020-05-02T19:46:07Z", "message": "Fix isArrayTypesAssignable : calling wrong method\n\nFor the array element types function is recursively calling\n`isArrayTypesAssignable` where it should call `isAssignable` since it\nhas common logic for `isAssignable`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49c6a8d3ad7630cbb368774551897b6141765585", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49c6a8d3ad7630cbb368774551897b6141765585", "committedDate": "2020-05-02T19:46:07Z", "message": "Fix assign sealed array to dynamic array ref"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7c4e2874b92414d78f64e4ed717c40392ed6afb", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7c4e2874b92414d78f64e4ed717c40392ed6afb", "committedDate": "2020-05-02T19:46:07Z", "message": "Fix : fixed-length array assignable logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79fba17aa6e6a2817576ebe4bd7bb07fc35081de", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79fba17aa6e6a2817576ebe4bd7bb07fc35081de", "committedDate": "2020-05-02T19:46:07Z", "message": "Refactor : function - isArrayTypesAssignable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "734e2b7ca85641520faef6194211eef4099fb832", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/734e2b7ca85641520faef6194211eef4099fb832", "committedDate": "2020-05-02T19:46:08Z", "message": "Fix stdlib fails for un assignable error type\n\nWe cannot assign `error` type to `ClientError` as `error` is a superset\nwhich may contain error Types which does not belong to `ClientError`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaec079000298fa6db4f02e2bae2b708ac75c5b8", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aaec079000298fa6db4f02e2bae2b708ac75c5b8", "committedDate": "2020-05-02T19:46:08Z", "message": "Add test cases for error[] assignable changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba6266b51c84e4696f3c9cb08fd4c7dd0aed3de4", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba6266b51c84e4696f3c9cb08fd4c7dd0aed3de4", "committedDate": "2020-05-02T19:46:08Z", "message": "Fix array type assignable logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62a7bb05dd65c004c12b96f302983ca80c4c0538", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/62a7bb05dd65c004c12b96f302983ca80c4c0538", "committedDate": "2020-05-02T19:46:08Z", "message": "Make isArrayTypesAssignable private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c3b582cfe1ab3618d9a85d260cdcfdd38fdd0b", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25c3b582cfe1ab3618d9a85d260cdcfdd38fdd0b", "committedDate": "2020-05-02T19:46:08Z", "message": "Add test cases for assign error[] to any[]"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d67945932e1279b9646cca12e3a133c6bf4d15b0", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d67945932e1279b9646cca12e3a133c6bf4d15b0", "committedDate": "2020-05-02T19:46:08Z", "message": "Add int[] to json test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a38b7278165f59d731134d064b0af4de3705f4b7", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a38b7278165f59d731134d064b0af4de3705f4b7", "committedDate": "2020-05-02T19:46:08Z", "message": "Remove redundant logic in isAssignable logic\n\nWhen source and target are both json it is already checked by isSameType\n logic. We don't need to check it again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e34f3b6c007afe680c299b8f9df2fd034159efd", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e34f3b6c007afe680c299b8f9df2fd034159efd", "committedDate": "2020-05-02T19:46:08Z", "message": "Remove redundant logic in isAssignable logic\n\nWhen source or target is union, unions are expanded and tested for is\nassignable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "431a372e112c56672ab87f50b2cbda08ad9a7bcd", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/431a372e112c56672ab87f50b2cbda08ad9a7bcd", "committedDate": "2020-05-02T19:46:08Z", "message": "Add test case to test union of strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd8e41f9741c5d7519b9bf0d604ddfe11d6d1a15", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd8e41f9741c5d7519b9bf0d604ddfe11d6d1a15", "committedDate": "2020-05-02T19:46:08Z", "message": "Remove unwanted commented line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67bd6eca977e9fcc5a5729bab89b5765a7ad5b47", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67bd6eca977e9fcc5a5729bab89b5765a7ad5b47", "committedDate": "2020-05-02T19:46:08Z", "message": "Add code changes by code review\r\n\r\nCode changes to reflect if array sizes are different we cant assign\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd4eee3796b4f617a46d429496a00184132d6918", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd4eee3796b4f617a46d429496a00184132d6918", "committedDate": "2020-04-30T23:24:02Z", "message": "Fix referring wrong ballerina method"}, "afterCommit": {"oid": "b5981403dd9d3cfa7b2d168004f41dc2abd5007c", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5981403dd9d3cfa7b2d168004f41dc2abd5007c", "committedDate": "2020-05-02T19:46:08Z", "message": "Fix referring wrong ballerina method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b810107a16989b75916a6a0e6afab82cc090713d", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b810107a16989b75916a6a0e6afab82cc090713d", "committedDate": "2020-05-04T08:27:41Z", "message": "Fix code review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20cea9fa6a99c6f6223f6dd10c3d90580583a439", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20cea9fa6a99c6f6223f6dd10c3d90580583a439", "committedDate": "2020-05-04T08:27:41Z", "message": "Add test for function parameters assignable logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "101084784887514a27469a7a920b0c36e6fae619", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/101084784887514a27469a7a920b0c36e6fae619", "committedDate": "2020-05-04T08:27:41Z", "message": "Fix broken example test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79cf3c92cfef9454fe38648d03a972cfc5de1a82", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79cf3c92cfef9454fe38648d03a972cfc5de1a82", "committedDate": "2020-05-04T03:28:02Z", "message": "Fix unit test case AssignStmtTest"}, "afterCommit": {"oid": "101084784887514a27469a7a920b0c36e6fae619", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/101084784887514a27469a7a920b0c36e6fae619", "committedDate": "2020-05-04T08:27:41Z", "message": "Fix broken example test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NTAzNDc1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#pullrequestreview-405503475", "createdAt": "2020-05-05T05:40:02Z", "commit": {"oid": "101084784887514a27469a7a920b0c36e6fae619"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3656, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}