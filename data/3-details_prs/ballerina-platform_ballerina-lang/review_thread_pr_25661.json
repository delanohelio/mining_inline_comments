{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODc3MTIx", "number": 25661, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDo1MjoyMFrOEhnf0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoxNjowNFrOEiFj-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjg1NTg3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/statements/DoNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDo1MjoyMFrOHPBvhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTowOTo0NFrOHPjRGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxOTIzOA==", "bodyText": "Shall we have a proper description here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485519238", "createdAt": "2020-09-09T10:52:20Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/statements/DoNode.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.statements;\n+\n+import org.ballerinalang.model.clauses.OnFailClauseNode;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2ODUwNQ==", "bodyText": "Added in 3cd62b5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486068505", "createdAt": "2020-09-10T05:09:44Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/statements/DoNode.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.statements;\n+\n+import org.ballerinalang.model.clauses.OnFailClauseNode;\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxOTIzOA=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjg4OTEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangDo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTowMjoyM1rOHPCEtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTowOTo1NFrOHPjRhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNDY2Mg==", "bodyText": "Lets give a brief description to this class", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485524662", "createdAt": "2020-09-09T11:02:23Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangDo.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.statements;\n+\n+import org.ballerinalang.model.clauses.OnFailClauseNode;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.statements.BlockStatementNode;\n+import org.ballerinalang.model.tree.statements.DoNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOnFailClause;\n+\n+/**\n+ * @since Swan Lake\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2ODYxNQ==", "bodyText": "Added in 3cd62b5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486068615", "createdAt": "2020-09-10T05:09:54Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangDo.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.statements;\n+\n+import org.ballerinalang.model.clauses.OnFailClauseNode;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.statements.BlockStatementNode;\n+import org.ballerinalang.model.tree.statements.DoNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangOnFailClause;\n+\n+/**\n+ * @since Swan Lake\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNDY2Mg=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjg5NzgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STDoStatementNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTowNDo1MFrOHPCJrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTowNDo1MFrOHPCJrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNTkzNA==", "bodyText": "@SInCE Swan Lake", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485525934", "createdAt": "2020-09-09T11:04:50Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STDoStatementNode.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.DoStatementNode;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * This is a generated internal syntax tree node.\n+ *\n+ * @since 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjg5OTg2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STFailStatementNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTowNTowOVrOHPCKpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo0MTowM1rOHPDRLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNjE4Mw==", "bodyText": "version should be Swan Lake", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485526183", "createdAt": "2020-09-09T11:05:09Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STFailStatementNode.java", "diffHunk": "@@ -30,62 +30,66 @@\n  *\n  * @since 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDIzNw==", "bodyText": "Actually, we have decided to move ahead with 2.0.0. Let's use \"2.0.0\" instead of Swan Lake.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485544237", "createdAt": "2020-09-09T11:41:03Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STFailStatementNode.java", "diffHunk": "@@ -30,62 +30,66 @@\n  *\n  * @since 2.0.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNjE4Mw=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjkwMTUyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STOnFailClauseNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTowNTo0MVrOHPCLlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTowNTo0MVrOHPCLlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNjQyMQ==", "bodyText": "@SInCE Swan Lake", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485526421", "createdAt": "2020-09-09T11:05:41Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STOnFailClauseNode.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.OnFailClauseNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * This is a generated internal syntax tree node.\n+ *\n+ * @since 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjkwMjU0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/DoStatementNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTowNjowNVrOHPCMSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTowNjowNVrOHPCMSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNjYwMw==", "bodyText": "@SInCE Swan Lake", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485526603", "createdAt": "2020-09-09T11:06:05Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/DoStatementNode.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * This is a generated syntax tree node.\n+ *\n+ * @since 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjkyNzU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/DoStatementNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToxNDowN1rOHPCbtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToxNDowN1rOHPCbtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMDU1MQ==", "bodyText": "version", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485530551", "createdAt": "2020-09-09T11:14:07Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/DoStatementNode.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * This is a generated syntax tree node.\n+ *\n+ * @since 2.0.0\n+ */\n+public class DoStatementNode extends StatementNode {\n+\n+    public DoStatementNode(STNode internalNode, int position, NonTerminalNode parent) {\n+        super(internalNode, position, parent);\n+    }\n+\n+    public Token doKeyword() {\n+        return childInBucket(0);\n+    }\n+\n+    public BlockStatementNode blockStatement() {\n+        return childInBucket(1);\n+    }\n+\n+    public Optional<OnFailClauseNode> onFailClause() {\n+        return optionalChildInBucket(2);\n+    }\n+\n+    @Override\n+    public void accept(NodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public <T> T apply(NodeTransformer<T> visitor) {\n+        return visitor.transform(this);\n+    }\n+\n+    @Override\n+    protected String[] childNames() {\n+        return new String[]{\n+                \"doKeyword\",\n+                \"blockStatement\",\n+                \"onFailClause\"};\n+    }\n+\n+    public DoStatementNode modify(\n+            Token doKeyword,\n+            BlockStatementNode blockStatement,\n+            OnFailClauseNode onFailClause) {\n+        if (checkForReferenceEquality(\n+                doKeyword,\n+                blockStatement,\n+                onFailClause)) {\n+            return this;\n+        }\n+\n+        return NodeFactory.createDoStatementNode(\n+                doKeyword,\n+                blockStatement,\n+                onFailClause);\n+    }\n+\n+    public DoStatementNodeModifier modify() {\n+        return new DoStatementNodeModifier(this);\n+    }\n+\n+    /**\n+     * This is a generated tree node modifier utility.\n+     *\n+     * @since 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjkyOTIwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/OnFailClauseNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToxNDozN1rOHPCcxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToxNDozN1rOHPCcxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMDgyMQ==", "bodyText": "version", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485530821", "createdAt": "2020-09-09T11:14:37Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/OnFailClauseNode.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This is a generated syntax tree node.\n+ *\n+ * @since 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzAxNDIyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo0MDoyMFrOHPDPzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxOToxNVrOHPEl8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0Mzg4Ng==", "bodyText": "We need to for error recovery here, if the next token is not the on keyword nor any statement-starting token.\neg: missing on keyword, but the rest is present from the fail keyword.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485543886", "createdAt": "2020-09-09T11:40:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7362,7 +7378,13 @@ private STNode parseLockStatement() {\n         STNode lockKeyword = parseLockKeyword();\n         STNode blockStatement = parseBlockNode();\n         endContext();\n-        return STNodeFactory.createLockStatementNode(lockKeyword, blockStatement);\n+        STNode onFailClause;\n+        if (peek().kind == SyntaxKind.ON_KEYWORD) {\n+            onFailClause = parseOnFailClause();\n+        } else {\n+            onFailClause = STNodeFactory.createEmptyNode();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NTkzOA==", "bodyText": "Seems on on fail clause is not optional.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485565938", "createdAt": "2020-09-09T12:19:15Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7362,7 +7378,13 @@ private STNode parseLockStatement() {\n         STNode lockKeyword = parseLockKeyword();\n         STNode blockStatement = parseBlockNode();\n         endContext();\n-        return STNodeFactory.createLockStatementNode(lockKeyword, blockStatement);\n+        STNode onFailClause;\n+        if (peek().kind == SyntaxKind.ON_KEYWORD) {\n+            onFailClause = parseOnFailClause();\n+        } else {\n+            onFailClause = STNodeFactory.createEmptyNode();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0Mzg4Ng=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzAxODc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo0MTozN1rOHPDSaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNToxMDoxNlrOHPjSWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDU1Mw==", "bodyText": "According to the grammar, fail keyword is not optional.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485544553", "createdAt": "2020-09-09T11:41:37Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10690,6 +10730,25 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    private STNode parseOnFailClause() {\n+        STNode onKeyword = parseOnKeyword();\n+        STNode failKeyword;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.FAIL_KEYWORD) {\n+            failKeyword = parseFailKeyword();\n+        } else {\n+            // No other cases for now\n+            failKeyword = STNodeFactory.createEmptyNode();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2ODgyNQ==", "bodyText": "Fixed with 3189bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486068825", "createdAt": "2020-09-10T05:10:16Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10690,6 +10730,25 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    private STNode parseOnFailClause() {\n+        STNode onKeyword = parseOnKeyword();\n+        STNode failKeyword;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.FAIL_KEYWORD) {\n+            failKeyword = parseFailKeyword();\n+        } else {\n+            // No other cases for now\n+            failKeyword = STNodeFactory.createEmptyNode();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDU1Mw=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 357}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzIwNzY3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozMzo1MVrOHPFGoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNToxMDozMFrOHPjSpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDMwNA==", "bodyText": "Shall we add the grammar rule as a doc comment?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485574304", "createdAt": "2020-09-09T12:33:51Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10690,6 +10730,25 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    private STNode parseOnFailClause() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NzI1Nw==", "bodyText": "Fixed with 3189bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486067257", "createdAt": "2020-09-10T05:07:52Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10690,6 +10730,25 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    private STNode parseOnFailClause() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDMwNA=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2ODkwMg==", "bodyText": "Fixed with 3189bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486068902", "createdAt": "2020-09-10T05:10:30Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10690,6 +10730,25 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    private STNode parseOnFailClause() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDMwNA=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 348}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzIxMTI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozNDo1MVrOHPFIxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNToxMTowN1rOHPjTSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDg1Mw==", "bodyText": "grammar rule seems to be incorrect", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485574853", "createdAt": "2020-09-09T12:34:51Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5056,75 +5085,66 @@ private STNode parseCheckingKeyword() {\n     }\n \n     /**\n-     * Parse fail expression. This method is used to parse both fail expression\n-     * as well as fail action.\n-     *\n-     * <p>\n-     * <code>\n-     * fail-expr := fail-keyword expression\n-     * fail-action := fail-keyword action\n-     * </code>\n+     * Parse continue statement.\n+     * <code>continue-stmt := continue ; </code>\n      *\n-     * @param allowActions Allow actions\n-     * @param isRhsExpr    Is rhs expression\n-     * @return Fail expression node\n+     * @return continue statement\n      */\n-    private STNode parseFailExpression(boolean isRhsExpr, boolean allowActions, boolean isInConditionalExpr) {\n-        STNode failKeyword = parseFailKeyword();\n-        STNode expr =\n-                parseExpression(OperatorPrecedence.EXPRESSION_ACTION, isRhsExpr, allowActions, isInConditionalExpr);\n-        if (isAction(expr)) {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_ACTION, failKeyword, expr);\n-        } else {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_EXPRESSION, failKeyword, expr);\n-        }\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatementNode(continueKeyword, semicolon);\n     }\n \n     /**\n-     * Parse fail keyword.\n-     * <p>\n-     * <code>\n-     * fail-keyword := fail\n-     * </code>\n+     * Parse continue-keyword.\n      *\n-     * @return Parsed node\n+     * @return continue-keyword node\n      */\n-    private STNode parseFailKeyword() {\n+    private STNode parseContinueKeyword() {\n         STToken token = peek();\n-        if (token.kind == SyntaxKind.FAIL_KEYWORD) {\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n             return consume();\n         } else {\n-            recover(token, ParserRuleContext.FAIL_KEYWORD);\n-            return parseFailKeyword();\n+            recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return parseContinueKeyword();\n         }\n     }\n \n     /**\n-     * Parse continue statement.\n-     * <code>continue-stmt := continue ; </code>\n+     * Parse fail statement.\n+     * <code>fail-stmt := return [ action-or-expr ] ;</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NzE3MA==", "bodyText": "Fixed with 3189bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486067170", "createdAt": "2020-09-10T05:07:45Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5056,75 +5085,66 @@ private STNode parseCheckingKeyword() {\n     }\n \n     /**\n-     * Parse fail expression. This method is used to parse both fail expression\n-     * as well as fail action.\n-     *\n-     * <p>\n-     * <code>\n-     * fail-expr := fail-keyword expression\n-     * fail-action := fail-keyword action\n-     * </code>\n+     * Parse continue statement.\n+     * <code>continue-stmt := continue ; </code>\n      *\n-     * @param allowActions Allow actions\n-     * @param isRhsExpr    Is rhs expression\n-     * @return Fail expression node\n+     * @return continue statement\n      */\n-    private STNode parseFailExpression(boolean isRhsExpr, boolean allowActions, boolean isInConditionalExpr) {\n-        STNode failKeyword = parseFailKeyword();\n-        STNode expr =\n-                parseExpression(OperatorPrecedence.EXPRESSION_ACTION, isRhsExpr, allowActions, isInConditionalExpr);\n-        if (isAction(expr)) {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_ACTION, failKeyword, expr);\n-        } else {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_EXPRESSION, failKeyword, expr);\n-        }\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatementNode(continueKeyword, semicolon);\n     }\n \n     /**\n-     * Parse fail keyword.\n-     * <p>\n-     * <code>\n-     * fail-keyword := fail\n-     * </code>\n+     * Parse continue-keyword.\n      *\n-     * @return Parsed node\n+     * @return continue-keyword node\n      */\n-    private STNode parseFailKeyword() {\n+    private STNode parseContinueKeyword() {\n         STToken token = peek();\n-        if (token.kind == SyntaxKind.FAIL_KEYWORD) {\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n             return consume();\n         } else {\n-            recover(token, ParserRuleContext.FAIL_KEYWORD);\n-            return parseFailKeyword();\n+            recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return parseContinueKeyword();\n         }\n     }\n \n     /**\n-     * Parse continue statement.\n-     * <code>continue-stmt := continue ; </code>\n+     * Parse fail statement.\n+     * <code>fail-stmt := return [ action-or-expr ] ;</code>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDg1Mw=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2OTA2NA==", "bodyText": "Fixed with 3189bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486069064", "createdAt": "2020-09-10T05:11:07Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5056,75 +5085,66 @@ private STNode parseCheckingKeyword() {\n     }\n \n     /**\n-     * Parse fail expression. This method is used to parse both fail expression\n-     * as well as fail action.\n-     *\n-     * <p>\n-     * <code>\n-     * fail-expr := fail-keyword expression\n-     * fail-action := fail-keyword action\n-     * </code>\n+     * Parse continue statement.\n+     * <code>continue-stmt := continue ; </code>\n      *\n-     * @param allowActions Allow actions\n-     * @param isRhsExpr    Is rhs expression\n-     * @return Fail expression node\n+     * @return continue statement\n      */\n-    private STNode parseFailExpression(boolean isRhsExpr, boolean allowActions, boolean isInConditionalExpr) {\n-        STNode failKeyword = parseFailKeyword();\n-        STNode expr =\n-                parseExpression(OperatorPrecedence.EXPRESSION_ACTION, isRhsExpr, allowActions, isInConditionalExpr);\n-        if (isAction(expr)) {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_ACTION, failKeyword, expr);\n-        } else {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_EXPRESSION, failKeyword, expr);\n-        }\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatementNode(continueKeyword, semicolon);\n     }\n \n     /**\n-     * Parse fail keyword.\n-     * <p>\n-     * <code>\n-     * fail-keyword := fail\n-     * </code>\n+     * Parse continue-keyword.\n      *\n-     * @return Parsed node\n+     * @return continue-keyword node\n      */\n-    private STNode parseFailKeyword() {\n+    private STNode parseContinueKeyword() {\n         STToken token = peek();\n-        if (token.kind == SyntaxKind.FAIL_KEYWORD) {\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n             return consume();\n         } else {\n-            recover(token, ParserRuleContext.FAIL_KEYWORD);\n-            return parseFailKeyword();\n+            recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return parseContinueKeyword();\n         }\n     }\n \n     /**\n-     * Parse continue statement.\n-     * <code>continue-stmt := continue ; </code>\n+     * Parse fail statement.\n+     * <code>fail-stmt := return [ action-or-expr ] ;</code>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDg1Mw=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzIxNjY3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozNjowMlrOHPFLxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNToxMTozMVrOHPjTtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NTYyMw==", "bodyText": "Need to update the doc comment with the new grammar.\nApplicable for all places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485575623", "createdAt": "2020-09-09T12:36:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4963,7 +4986,13 @@ private STNode parseWhileStatement() {\n         STNode condition = parseExpression();\n         STNode whileBody = parseBlockNode();\n         endContext();\n-        return STNodeFactory.createWhileStatementNode(whileKeyword, condition, whileBody);\n+        STNode onFailClause;\n+        if (peek().kind == SyntaxKind.ON_KEYWORD) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NzA1NA==", "bodyText": "Fixed with 3189bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486067054", "createdAt": "2020-09-10T05:07:32Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4963,7 +4986,13 @@ private STNode parseWhileStatement() {\n         STNode condition = parseExpression();\n         STNode whileBody = parseBlockNode();\n         endContext();\n-        return STNodeFactory.createWhileStatementNode(whileKeyword, condition, whileBody);\n+        STNode onFailClause;\n+        if (peek().kind == SyntaxKind.ON_KEYWORD) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NTYyMw=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2OTE3Mg==", "bodyText": "Fixed with 3189bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486069172", "createdAt": "2020-09-10T05:11:31Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4963,7 +4986,13 @@ private STNode parseWhileStatement() {\n         STNode condition = parseExpression();\n         STNode whileBody = parseBlockNode();\n         endContext();\n-        return STNodeFactory.createWhileStatementNode(whileKeyword, condition, whileBody);\n+        STNode onFailClause;\n+        if (peek().kind == SyntaxKind.ON_KEYWORD) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NTYyMw=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzIyOTkwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/WhileStatementTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozOToyMlrOHPFT2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzo0MzoyN1rOHPnJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NzY4OA==", "bodyText": "Shall we add some negative tests as well?\neg: missing certain parts of the on-fail-clause, having additional tokens in between the tokens in on-fail-clause, etc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485577688", "createdAt": "2020-09-09T12:39:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/WhileStatementTest.java", "diffHunk": "@@ -36,6 +36,11 @@ public void testWhileWithBody() {\n         testFile(\"while-stmt/while_stmt_source_02.bal\", \"while-stmt/while_stmt_assert_02.json\");\n     }\n \n+    @Test\n+    public void testWhileWithOnFailClause() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzMjA3Nw==", "bodyText": "We'll improve error handling and negative test cases separately. Created #25711 to track the progress.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486132077", "createdAt": "2020-09-10T07:43:27Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/WhileStatementTest.java", "diffHunk": "@@ -36,6 +36,11 @@ public void testWhileWithBody() {\n         testFile(\"while-stmt/while_stmt_source_02.bal\", \"while-stmt/while_stmt_assert_02.json\");\n     }\n \n+    @Test\n+    public void testWhileWithOnFailClause() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NzY4OA=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzM1OTk0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoxMDoxNlrOHPGj5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNToxNToxNVrOHPjXoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5ODE4Mg==", "bodyText": "is on_keyword statement start token?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485598182", "createdAt": "2020-09-09T13:10:16Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2859,10 +2862,11 @@ protected STNode parseStatement() {\n             case RETRY_KEYWORD:\n             case ROLLBACK_KEYWORD:\n             case MATCH_KEYWORD:\n+            case ON_KEYWORD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NzUzNA==", "bodyText": "No. Fixed with 3189bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486067534", "createdAt": "2020-09-10T05:08:19Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2859,10 +2862,11 @@ protected STNode parseStatement() {\n             case RETRY_KEYWORD:\n             case ROLLBACK_KEYWORD:\n             case MATCH_KEYWORD:\n+            case ON_KEYWORD:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5ODE4Mg=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA3MDE3Ng==", "bodyText": "Fixed with 3189bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486070176", "createdAt": "2020-09-10T05:15:15Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2859,10 +2862,11 @@ protected STNode parseStatement() {\n             case RETRY_KEYWORD:\n             case ROLLBACK_KEYWORD:\n             case MATCH_KEYWORD:\n+            case ON_KEYWORD:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5ODE4Mg=="}, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzM2NjQ5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoxMTo1MFrOHPGn_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoxMTo1MFrOHPGn_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5OTIyOQ==", "bodyText": "Shouldn't this be ?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Solution sol = recover(token, ParserRuleContext.FAIL_KEYWORD);\n          \n          \n            \n                        return sol.recoveredNode;\n          \n          \n            \n                        recover(token, ParserRuleContext.FAIL_KEYWORD);\n          \n          \n            \n                        return parseFailKeyword();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485599229", "createdAt": "2020-09-09T13:11:50Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5056,75 +5085,66 @@ private STNode parseCheckingKeyword() {\n     }\n \n     /**\n-     * Parse fail expression. This method is used to parse both fail expression\n-     * as well as fail action.\n-     *\n-     * <p>\n-     * <code>\n-     * fail-expr := fail-keyword expression\n-     * fail-action := fail-keyword action\n-     * </code>\n+     * Parse continue statement.\n+     * <code>continue-stmt := continue ; </code>\n      *\n-     * @param allowActions Allow actions\n-     * @param isRhsExpr    Is rhs expression\n-     * @return Fail expression node\n+     * @return continue statement\n      */\n-    private STNode parseFailExpression(boolean isRhsExpr, boolean allowActions, boolean isInConditionalExpr) {\n-        STNode failKeyword = parseFailKeyword();\n-        STNode expr =\n-                parseExpression(OperatorPrecedence.EXPRESSION_ACTION, isRhsExpr, allowActions, isInConditionalExpr);\n-        if (isAction(expr)) {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_ACTION, failKeyword, expr);\n-        } else {\n-            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_EXPRESSION, failKeyword, expr);\n-        }\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatementNode(continueKeyword, semicolon);\n     }\n \n     /**\n-     * Parse fail keyword.\n-     * <p>\n-     * <code>\n-     * fail-keyword := fail\n-     * </code>\n+     * Parse continue-keyword.\n      *\n-     * @return Parsed node\n+     * @return continue-keyword node\n      */\n-    private STNode parseFailKeyword() {\n+    private STNode parseContinueKeyword() {\n         STToken token = peek();\n-        if (token.kind == SyntaxKind.FAIL_KEYWORD) {\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n             return consume();\n         } else {\n-            recover(token, ParserRuleContext.FAIL_KEYWORD);\n-            return parseFailKeyword();\n+            recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return parseContinueKeyword();\n         }\n     }\n \n     /**\n-     * Parse continue statement.\n-     * <code>continue-stmt := continue ; </code>\n+     * Parse fail statement.\n+     * <code>fail-stmt := return [ action-or-expr ] ;</code>\n      *\n-     * @return continue statement\n+     * @return Fail statement\n      */\n-    private STNode parseContinueStatement() {\n-        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n-        STNode continueKeyword = parseContinueKeyword();\n+    private STNode parseFailStatement() {\n+        startContext(ParserRuleContext.FAIL_STATEMENT);\n+        STNode failKeyword = parseFailKeyword();\n+        STNode expr = parseExpression();\n         STNode semicolon = parseSemicolon();\n         endContext();\n-        return STNodeFactory.createContinueStatementNode(continueKeyword, semicolon);\n+        return STNodeFactory.createFailStatementNode(failKeyword, expr, semicolon);\n     }\n \n     /**\n-     * Parse continue-keyword.\n+     * Parse fail keyword.\n+     * <p>\n+     * <code>\n+     * fail-keyword := fail\n+     * </code>\n      *\n-     * @return continue-keyword node\n+     * @return Parsed node\n      */\n-    private STNode parseContinueKeyword() {\n+    private STNode parseFailKeyword() {\n+\n         STToken token = peek();\n-        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n+        if (token.kind == SyntaxKind.FAIL_KEYWORD) {\n             return consume();\n         } else {\n-            recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n-            return parseContinueKeyword();\n+            Solution sol = recover(token, ParserRuleContext.FAIL_KEYWORD);\n+            return sol.recoveredNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzM5MTA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoxNzo0MVrOHPG3aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoxNzo0MVrOHPG3aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwMzE3Ng==", "bodyText": "shouldn't we use parseTypedBindingPattern() instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485603176", "createdAt": "2020-09-09T13:17:41Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10690,6 +10730,25 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    private STNode parseOnFailClause() {\n+        STNode onKeyword = parseOnKeyword();\n+        STNode failKeyword;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.FAIL_KEYWORD) {\n+            failKeyword = parseFailKeyword();\n+        } else {\n+            // No other cases for now\n+            failKeyword = STNodeFactory.createEmptyNode();\n+        }\n+        STNode typeDescriptorNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n+                true, false);\n+        STNode identifierNode = parseIdentifier(ParserRuleContext.VARIABLE_REF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 360}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzQwMDY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoxOTo1NVrOHPG9Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoxOTo1NVrOHPG9Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNDY5OA==", "bodyText": "shouldn't we use typedBindingPatternNode here?\n               {\n                    \"name\": \"typedBindingPattern\",\n                    \"type\": \"TypedBindingPatternNode\"\n                },", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r485604698", "createdAt": "2020-09-09T13:19:55Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -4058,6 +4093,53 @@\n                     \"isOptional\": true\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"OnFailClauseNode\",\n+            \"base\": \"ClauseNode\",\n+            \"kind\": \"ON_FAIL_CLAUSE\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"onKeyword\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"failKeyword\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"typeDescriptor\",\n+                    \"type\": \"TypeDescriptorNode\"\n+                },\n+                {\n+                    \"name\": \"failErrorName\",\n+                    \"type\": \"IdentifierToken\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708f74f9506b94a67300286190f353bbcd9f5912"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDI0Mjk4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDowNDowOVrOHPiHPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDowNDowOVrOHPiHPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0OTU5OA==", "bodyText": "Don't we need to start a context for DO_BLOCK also?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486049598", "createdAt": "2020-09-10T04:04:09Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -3001,6 +3006,7 @@ private void startContextIfRequired(ParserRuleContext currentCtx) {\n             case CONTINUE_STATEMENT:\n             case BREAK_STATEMENT:\n             case RETURN_STMT:\n+            case FAIL_STATEMENT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3189bc6c6a9ee435ca57fa863f10d8e4f357ab6b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTc4MTcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoxNjowNFrOHPwrww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjozMDo0MlrOHPxN7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4ODMyMw==", "bodyText": "Don't we need to start context for on fail clause?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486288323", "createdAt": "2020-09-10T12:16:04Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10703,6 +10742,24 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    /**\n+     * Parse on fail clause.\n+     * <code>on-fail-clause := on fail typed-binding-pattern block-stmt</code>\n+     *\n+     * @return While statement\n+     */\n+    private STNode parseOnFailClause() {\n+        STNode onKeyword = parseOnKeyword();\n+        STNode failKeyword = parseFailKeyword();\n+        STNode typeDescriptorNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "533a2a7aac031aad8c2ce7f9d678d4db32752665"}, "originalPosition": 387}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzA3MQ==", "bodyText": "I thing we need to add error handler logic for on fail clause as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25661#discussion_r486297071", "createdAt": "2020-09-10T12:30:42Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10703,6 +10742,24 @@ private STNode parseRetryBody() {\n         }\n     }\n \n+    /**\n+     * Parse on fail clause.\n+     * <code>on-fail-clause := on fail typed-binding-pattern block-stmt</code>\n+     *\n+     * @return While statement\n+     */\n+    private STNode parseOnFailClause() {\n+        STNode onKeyword = parseOnKeyword();\n+        STNode failKeyword = parseFailKeyword();\n+        STNode typeDescriptorNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4ODMyMw=="}, "originalCommit": {"oid": "533a2a7aac031aad8c2ce7f9d678d4db32752665"}, "originalPosition": 387}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 202, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}