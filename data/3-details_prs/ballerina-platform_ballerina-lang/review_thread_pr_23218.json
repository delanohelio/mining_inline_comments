{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NDgwODU1", "number": 23218, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzowMzoxNVrOEB1lvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyMTowNVrOEDmFAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzYyMDQ0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/object-type-reference.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzowMzoxNVrOGd7WsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzowMzoxNVrOGd7WsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzNDM1Mw==", "bodyText": "need to remove this dependency", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23218#discussion_r434034353", "createdAt": "2020-06-02T17:03:15Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/object-type-reference.bal", "diffHunk": "@@ -14,6 +14,9 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+import ballerina/lang.'int;\n+import ballerina/test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5cba6bc02dac7013fa1b76eb830e704b40ebc8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjA1MDU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyMTowNVrOGgtDnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoyMzo1OFrOGg3eUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0NTgyMQ==", "bodyText": "If possible, shall we update these comments as well? Or at least open an issue for it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23218#discussion_r436945821", "createdAt": "2020-06-08T19:21:05Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -637,21 +636,22 @@ private void checkErrors(TypeDefinition unresolvedType, BLangType currentTypeNod\n                     // Cyclic dependency detected. We need to add the `unresolvedTypeNodeName` or the\n                     // `memberTypeNodeName` to the end of the list to complete the cyclic dependency when\n                     // printing the error.\n-                    visitedNodes.add(currentTypeNodeName);\n+                    visitedNodes.push(currentTypeNodeName);\n                     dlog.error((DiagnosticPos) unresolvedType.getPosition(), DiagnosticCode.CYCLIC_TYPE_REFERENCE,\n                             visitedNodes);\n                     // We need to remove the last occurrence since we use this list in a recursive call.\n                     // Otherwise, unwanted types will get printed in the cyclic dependency error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f998be70090f824d8743a7c69d0bb4692a7c4a"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNjQ5Nw==", "bodyText": "created an issue: #23825", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23218#discussion_r437116497", "createdAt": "2020-06-09T03:23:58Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -637,21 +636,22 @@ private void checkErrors(TypeDefinition unresolvedType, BLangType currentTypeNod\n                     // Cyclic dependency detected. We need to add the `unresolvedTypeNodeName` or the\n                     // `memberTypeNodeName` to the end of the list to complete the cyclic dependency when\n                     // printing the error.\n-                    visitedNodes.add(currentTypeNodeName);\n+                    visitedNodes.push(currentTypeNodeName);\n                     dlog.error((DiagnosticPos) unresolvedType.getPosition(), DiagnosticCode.CYCLIC_TYPE_REFERENCE,\n                             visitedNodes);\n                     // We need to remove the last occurrence since we use this list in a recursive call.\n                     // Otherwise, unwanted types will get printed in the cyclic dependency error.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0NTgyMQ=="}, "originalCommit": {"oid": "c2f998be70090f824d8743a7c69d0bb4692a7c4a"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3651, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}