{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMjMyNDgz", "number": 21278, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNTo1MzoyMFrODjVxDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNzoyMVrODjWGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzgzMzczOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNTo1MzoyMFrOFvGAPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNTo1MzoyMFrOFvGAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNTc1Nw==", "bodyText": "Shouldn't this go into checkIsRecursiveType similar to maps, lists, etc.?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384925757", "createdAt": "2020-02-27T05:53:20Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -502,6 +503,8 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n                 return checkIsServiceType(sourceType);\n             case TypeTags.HANDLE_TAG:\n                 return sourceType.getTag() == TypeTags.HANDLE_TAG;\n+            case TypeTags.TYPEDESC_TAG:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzgzNDc0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNTo1NDowM1rOFvGA4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODozMTo1MVrOFvJGSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNTkyMw==", "bodyText": "Shall we pass down the unresolved types also and use it when calling checkIsType for the constraint?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384925923", "createdAt": "2020-02-27T05:54:03Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -510,6 +513,15 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n \n     // Private methods\n \n+    private static boolean checkTypeDescType(BType sourceType, BTypedescType targetType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDgzNQ==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384934835", "createdAt": "2020-02-27T06:30:18Z", "author": {"login": "SupunS"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -510,6 +513,15 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n \n     // Private methods\n \n+    private static boolean checkTypeDescType(BType sourceType, BTypedescType targetType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNTkyMw=="}, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NjQ1OA==", "bodyText": "+1. Will fix.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384976458", "createdAt": "2020-02-27T08:31:51Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -510,6 +513,15 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n \n     // Private methods\n \n+    private static boolean checkTypeDescType(BType sourceType, BTypedescType targetType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNTkyMw=="}, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzgzOTUwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypedescType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNTo1NzozNlrOFvGEBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODozMTo0MVrOFvJGGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNjcyNg==", "bodyText": "Should we call .equals() instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384926726", "createdAt": "2020-02-27T05:57:36Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypedescType.java", "diffHunk": "@@ -52,6 +52,17 @@ public int getTag() {\n         return TypeTags.TYPEDESC_TAG;\n     }\n \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj instanceof BTypedescType) {\n+            return constraint == ((BTypedescType) obj).getConstraint();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NjQwOQ==", "bodyText": "Will do.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384976409", "createdAt": "2020-02-27T08:31:41Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypedescType.java", "diffHunk": "@@ -52,6 +52,17 @@ public int getTag() {\n         return TypeTags.TYPEDESC_TAG;\n     }\n \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj instanceof BTypedescType) {\n+            return constraint == ((BTypedescType) obj).getConstraint();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNjcyNg=="}, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg0NzUzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/typedesc/typedesc_positive.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowMjoxNFrOFvGIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowMjoxNFrOFvGIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyNzk0Mg==", "bodyText": "Instead of importing http shall we introduce a new object here?\nOr if the test is for an object from an imported module, shall we use something from langlib or just add a separate balo test?\nAlso, I guess it would be better to move these tests to TypeGuardTest.java and test type narrowing also?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384927942", "createdAt": "2020-02-27T06:02:14Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/typedesc/typedesc_positive.bal", "diffHunk": "@@ -1,3 +1,5 @@\n+import ballerina/http;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg4ODA3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TypedescValue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNzoyMVrOFvGg_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODozMToyNlrOFvJFow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDE0Mg==", "bodyText": "Do we need the describingType field anymore, since that is already there in the type now?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384934142", "createdAt": "2020-02-27T06:27:21Z", "author": {"login": "SupunS"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TypedescValue.java", "diffHunk": "@@ -44,7 +44,7 @@\n \n     @Deprecated\n     public TypedescValue(BType describingType) {\n-        this.type = BTypes.typeTypedesc;\n+        this.type = new BTypedescType(describingType);\n         this.describingType = describingType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNTEzMw==", "bodyText": "On a second thought, I think we may have to keep it. Please ignore my previous comment :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384935133", "createdAt": "2020-02-27T06:31:35Z", "author": {"login": "SupunS"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TypedescValue.java", "diffHunk": "@@ -44,7 +44,7 @@\n \n     @Deprecated\n     public TypedescValue(BType describingType) {\n-        this.type = BTypes.typeTypedesc;\n+        this.type = new BTypedescType(describingType);\n         this.describingType = describingType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDE0Mg=="}, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NjI5MQ==", "bodyText": "OK :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21278#discussion_r384976291", "createdAt": "2020-02-27T08:31:26Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TypedescValue.java", "diffHunk": "@@ -44,7 +44,7 @@\n \n     @Deprecated\n     public TypedescValue(BType describingType) {\n-        this.type = BTypes.typeTypedesc;\n+        this.type = new BTypedescType(describingType);\n         this.describingType = describingType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDE0Mg=="}, "originalCommit": {"oid": "417fc6b2f85504f6bc8c0196e18955504b9d52c3"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1001, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}