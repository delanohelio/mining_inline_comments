{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MTU3NzQ5", "number": 21017, "title": "Add custom serializer / deserializer support for Ballerina Kafka module", "bodyText": "Purpose\n\nThis will introduce custom serializer / deserializer support for Ballerina Kafka module.\nUsers can define their own serializers / deserializers using kafka:Serializer and kafka:Deserializer abstract objects, respectively.\nkafka:Serializer object\npublic type Serializer abstract object {\n   public function close();\n\n   public function serialize(any data) returns byte[];\n};\nUsers can implement the serialize() and the close() functions in their own serializers to serialize custom ballerina objects / records.\nkafka:Deserializer object\npublic type Deserializer abstract object {\n    public function close();\n\n    public function deserialize(byte[] data) returns any;\n};\nThe deserialize() and close() functions should be implemented for the deserialize the serialized ballerina objects / records.\nChanges\nKafka version updated to Kafka 2.3.1\nThis version bumps Kafka version to 2.3.1\nProducer\nThe producer->send() function now accepts any as the type for the value parameter and the any? as the type of the key parameter.\nThis will not break any existing code since they any includes byte[] which was the type of the value parameter previously.\nConsumer\nThe key and the value fields in the kafka:ConsumerRecord is now changed to any instead of byte[].\nThis will break any existing codes since the key and value are defined as byte[] previously.\nTo fix the issues, your code should change as follows:\nPrevious code:\nkafka:ConsumerRecord consumerRecord = someFunction();\nbyte[] value = consumerRecord.value;\n// process value\nbyte[] key = consumerRecord.key\n// process key\nNew code:\nkafka:ConsumerRecord consumerRecord = someFunction();\nvar value = consumerRecord.value;\nif (value is byte[]) {\n    // process value\n}\nvar key = consumerRecord.key\nif (key is byte[]) {\n    // process key\n}\n\nFixes #20787\nThere can be issues due to #20644\nSamples\n\nSample serializer\nThe serializer should implement the kafka:Serializer object, and the kafka:ProducerConfig should be configured to use custom serializer by setting valueSerializerType (for value) and / or keySerializerType (for key) to the value kafka:SER_CUSTOM.\nThen the valueSerializer (for value) and / or keySerializer (for key) should be set to the corresponding Serializer object .\nSample code:\npublic type MySerializer object {\n    *kafka:Serializer;\n    public function serialize(any value) returns byte[] {\n        MyObject myObject = <MyObject> value;\n        // Serialize myObject to a byte[]\n        return serializedMyObject;\n    }\n}\nMySerializer mySerializer = new;\n\nkafka:ProducerConfig producerConfig = {\n    bootstrapServers: \"<kafka_server_host_port>\",\n    // Other configs\n    valueSerializerType: kafka:SER_CUSTOM,\n    valueSerializer: mySerializer\n};\nSimilarly, deserializer should implement the kafka:Deserializer object. kafka:ConsumerConfig should be configured to use the custom-defined Deserializer, by providing kafka:DES_CUSTOM as the value for keyDeserializerType (for key) and / or valueDeserializerType (for value) field(s). Then the instance of the Serializer should be set as the value of keySerializer and / or valueDeserializer fields.\nSample code\npublic type MyDeserializer object {\n    *kafka:Deserializer;\n    public function deserialize(byte[] data) returns any {\n        // Deserialize data to MyObject type\n        return deserializedMyObject;\n    }\n}\n\nMyDeserializer myDeserializer = new;\n\nkafka:ConsumerConfig consumerConfig = {\n    bootstrapServers: \"localhost:9092\",\n    // Other configs\n    valueDeserializerType: kafka:DES_CUSTOM,\n    valueDeserializer: myDeserializer\n}\n\nRemarks\n\nThis is the next part of the Ballerina Kafka serializer / deserializer support, which previously improved to support default serializers and deserializers in #20652\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-02-12T07:46:37Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017", "merged": true, "mergeCommit": {"oid": "8e31dcd723426145691eeaf5c202e533711afb97"}, "closed": true, "closedAt": "2020-02-19T03:26:53Z", "author": {"login": "ThisaruGuruge"}, "timelineItems": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_tqgjgH2gAyMzc0MTU3NzQ5OmY0MzcyNjI0NDZmNWRjYWUyYjVjZWFlNGI4MzEyNjBkYmM5ZTA2ZTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFt7xTgFqTM2MDgyMTA0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f437262446f5dcae2b5ceae4b831260dbc9e06e9", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f437262446f5dcae2b5ceae4b831260dbc9e06e9", "committedDate": "2020-01-31T11:44:19Z", "message": "rename serializer deserializer types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ed479dab530e026354dfe90241be09c992886a", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7ed479dab530e026354dfe90241be09c992886a", "committedDate": "2020-02-03T15:00:32Z", "message": "Bump Kafka and Debezium versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eae69dfcbf488d420062559f07c193421dc2cd0b", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eae69dfcbf488d420062559f07c193421dc2cd0b", "committedDate": "2020-02-03T15:15:40Z", "message": "Fix tests after version bump"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6fa9ebaa2f7f2050251283f232576847bcceeee", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6fa9ebaa2f7f2050251283f232576847bcceeee", "committedDate": "2020-02-03T15:38:14Z", "message": "Add custom serializer support for Kafka producer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "299fb482716b8568b00d8887fc668d5f6ded3f74", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/299fb482716b8568b00d8887fc668d5f6ded3f74", "committedDate": "2020-02-05T11:05:04Z", "message": "Add custom deserializer support for Kafka consumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad8de625b85f0d8a232c48fb41b60530e1e61821", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad8de625b85f0d8a232c48fb41b60530e1e61821", "committedDate": "2020-02-06T15:48:47Z", "message": "Fix kafka serializing issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3137bef452e3ae834ea005531c56372a531a8216", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3137bef452e3ae834ea005531c56372a531a8216", "committedDate": "2020-02-07T07:53:46Z", "message": "Fix Kafka deserializer issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f20dc179c63013e65dd9a0768c07e04b50e915e", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f20dc179c63013e65dd9a0768c07e04b50e915e", "committedDate": "2020-02-07T09:39:45Z", "message": "Remove unnecessary methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ca61fb0ba26c905f3b4938f28a1732f63d1c9d", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18ca61fb0ba26c905f3b4938f28a1732f63d1c9d", "committedDate": "2020-02-07T13:43:56Z", "message": "Add serdes tests to kafka module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbde37905669a6b001c01c049dcfa23e4aaf44b8", "author": {"user": null}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbde37905669a6b001c01c049dcfa23e4aaf44b8", "committedDate": "2020-02-11T09:03:20Z", "message": "Fix issues in Observeraility methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0a8c1baeb8a308671ec85176e1c7f37111edfb5", "author": {"user": null}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0a8c1baeb8a308671ec85176e1c7f37111edfb5", "committedDate": "2020-02-11T09:04:34Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-custom-serdes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dd762fb1a6ef14405a151e6a139643f47dd8c24", "author": {"user": null}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9dd762fb1a6ef14405a151e6a139643f47dd8c24", "committedDate": "2020-02-11T09:40:46Z", "message": "Merge branch 'kafka-custom-serdes' into kafka-serdes-new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72ff4493cc85db498aff3db86f2849aa68e3540", "author": {"user": null}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e72ff4493cc85db498aff3db86f2849aa68e3540", "committedDate": "2020-02-12T05:59:17Z", "message": "Add integration test to kafka seriliazation, deserialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54c0df59c0ae92858a5431f26a4c3155ca9fad2c", "author": {"user": null}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54c0df59c0ae92858a5431f26a4c3155ca9fad2c", "committedDate": "2020-02-12T07:45:32Z", "message": "Update Kafka module.MD file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b271904d15943fc5c8ac6db6425508357147fb", "author": {"user": null}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22b271904d15943fc5c8ac6db6425508357147fb", "committedDate": "2020-02-12T08:43:19Z", "message": "Add Kaka integration tests and fix observability tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTQ1MTYx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-357945161", "createdAt": "2020-02-13T04:15:55Z", "commit": {"oid": "22b271904d15943fc5c8ac6db6425508357147fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxNTo1NVrOFpGjdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxNTo1NVrOFpGjdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MzMxOA==", "bodyText": "Shall we acquire the semaphore with the finite timeout?\nIf the subsequent process failed or crashed, the ballerina thread blocks infinitely.\nUse tryAcquire(xx, TimeUnit.SECONDS) with a sufficient timeout period.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r378643318", "createdAt": "2020-02-13T04:15:55Z", "author": {"login": "chamil321"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BRuntime.java", "diffHunk": "@@ -110,6 +111,35 @@ public void notifyFailure(ErrorValue error) {\n         }\n     }\n \n+    public Object getSyncMethodInvokeResult(ObjectValue object, String methodName, Object... args) {\n+        Function<?, ?> func = o -> object.call((Strand) (((Object[]) o)[0]), methodName, args);\n+        Semaphore semaphore = new Semaphore(0);\n+        final ErrorValue[] errorValue = new ErrorValue[1];\n+        // Add 1 more element to keep null for add the strand later.\n+        Object[] params = new Object[]{null, args};\n+        FutureValue futureValue = scheduler.schedule(params, func, null, new CallableUnitCallback() {\n+            @Override\n+            public void notifySuccess() {\n+                semaphore.release();\n+            }\n+\n+            @Override\n+            public void notifyFailure(ErrorValue error) {\n+                errorValue[0] = error;\n+                semaphore.release();\n+            }\n+        });\n+        try {\n+            semaphore.acquire();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b271904d15943fc5c8ac6db6425508357147fb"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTU3MTMw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-357957130", "createdAt": "2020-02-13T05:09:01Z", "commit": {"oid": "22b271904d15943fc5c8ac6db6425508357147fb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTowOTowMVrOFpHLaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNToyMzowM1rOFpHWYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY1MzU0NQ==", "bodyText": "Shall we use checkpanic whenever you panic the error?\ncheckpanic self->connect();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r378653545", "createdAt": "2020-02-13T05:09:01Z", "author": {"login": "chamil321"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -185,11 +220,9 @@ public type Consumer client object {\n     }\n \n     function init(ConsumerConfig config) returns ConsumerError? {\n-        if (config.bootstrapServers is string) {\n-            var result = self->connect();\n-            if (result is error) {\n-                panic result;\n-            }\n+        var connectResult = self->connect();\n+        if (connectResult is error) {\n+            panic connectResult;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b271904d15943fc5c8ac6db6425508357147fb"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY1NjM1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(SendAnyValues.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(SendAnyKeys.class);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r378656353", "createdAt": "2020-02-13T05:23:03Z", "author": {"login": "chamil321"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/SendAnyKeys.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.nativeimpl.producer;\n+\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.ballerinalang.messaging.kafka.nativeimpl.producer.Send.sendKafkaRecord;\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.ALIAS_PARTITION;\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getIntValue;\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getLongValue;\n+\n+/**\n+ * Native methods to send {@code any} keys and with different types of values to Kafka broker from ballerina kafka\n+ * producer.\n+ */\n+public class SendAnyKeys {\n+    // TODO: This class should be merged with \"Send\" when #20918 is fixed.\n+    private static final Logger logger = LoggerFactory.getLogger(SendAnyValues.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b271904d15943fc5c8ac6db6425508357147fb"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "313894a823632fc2b90709c1442c428093869146", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/313894a823632fc2b90709c1442c428093869146", "committedDate": "2020-02-13T15:40:46Z", "message": "Fix review suggestions and integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dd0e0787afe4f8be4ed5f9725b80792fd764090", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7dd0e0787afe4f8be4ed5f9725b80792fd764090", "committedDate": "2020-02-13T15:46:17Z", "message": "Add default value to request timeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4a5889ab52fb487615cc2ceea5b5a83fe7ef967", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4a5889ab52fb487615cc2ceea5b5a83fe7ef967", "committedDate": "2020-02-13T16:01:26Z", "message": "Increase default request timeout value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2658a9f9d0855ce1bf39e6684f2df0942fbdef04", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2658a9f9d0855ce1bf39e6684f2df0942fbdef04", "committedDate": "2020-02-13T16:11:50Z", "message": "Fix invalid config error issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5972104689adb814f3fad6b776bb0430aa05c6a7", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5972104689adb814f3fad6b776bb0430aa05c6a7", "committedDate": "2020-02-14T09:32:48Z", "message": "Implement review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50eff08a6cf65356e73201dfb729275e177d7f91", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50eff08a6cf65356e73201dfb729275e177d7f91", "committedDate": "2020-02-14T09:35:21Z", "message": "Merge branch 'master' into kafka-serdes-new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b20f87d41a475abedd87751ded3734a8c16b02a1", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b20f87d41a475abedd87751ded3734a8c16b02a1", "committedDate": "2020-02-14T12:11:06Z", "message": "Fix test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "853619dbcf7e2984bad4f49f2a7d3803280be09f", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/853619dbcf7e2984bad4f49f2a7d3803280be09f", "committedDate": "2020-02-14T12:13:18Z", "message": "Merge branch 'kafka-serdes-new' of https://github.com/ThisaruGuruge/ballerina-lang into kafka-serdes-new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79f6c283ed931213afc1f9fcb6187df517315ba4", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79f6c283ed931213afc1f9fcb6187df517315ba4", "committedDate": "2020-02-14T12:14:15Z", "message": "Set return values to null at the NonBlocking callback constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6b35d3009d974333361d0c1e39cf38dfc2a45c1", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6b35d3009d974333361d0c1e39cf38dfc2a45c1", "committedDate": "2020-02-14T12:22:10Z", "message": "Disable Kafka serdes test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b93bd0cd36faa055a7ace5eadb8a9699e38e26", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1b93bd0cd36faa055a7ace5eadb8a9699e38e26", "committedDate": "2020-02-17T07:49:25Z", "message": "Disable Kafka integration test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NTk2MzU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-359596357", "createdAt": "2020-02-17T09:36:40Z", "commit": {"oid": "d1b93bd0cd36faa055a7ace5eadb8a9699e38e26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTozNjo0MFrOFqdvWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTozNjo0MFrOFqdvWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3MTc2OA==", "bodyText": "This initialisation is unnecessary. Shall we remove it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380071768", "createdAt": "2020-02-17T09:36:40Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -126,28 +136,49 @@ public type SerializerType SER_BYTE_ARRAY|SER_STRING|SER_INT|SER_FLOAT;\n public type Producer client object {\n \n     public ProducerConfig? producerConfig = ();\n-    private string keySerializer;\n-    private string valueSerializer;\n+    private string keySerializerType;\n+    private string valueSerializerType;\n+    private Serializer? keySerializer = ();\n+    private Serializer? valueSerializer = ();\n \n     # Creates a new Kafka `Producer`.\n     #\n     # + config - Configurations related to initializing a Kafka `Producer`.\n     public function __init(ProducerConfig config) {\n         self.producerConfig = config;\n-        self.keySerializer = config.keySerializer;\n-        self.valueSerializer = config.valueSerializer;\n-        var result = self.init(config);\n-        if (result is error) {\n-            panic result;\n+        self.keySerializerType = config.keySerializerType;\n+        self.valueSerializerType = config.valueSerializerType;\n+\n+        if (self.keySerializerType == SER_CUSTOM) {\n+            var keySerializerObject = config.keySerializer;\n+            if (keySerializerObject is ()) {\n+                ProducerError e = error(PRODUCER_ERROR, message = \"Invalid keySerializer config: Please Provide a \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b93bd0cd36faa055a7ace5eadb8a9699e38e26"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e219813e28edb792f73955dbb36c968a14afd55", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e219813e28edb792f73955dbb36c968a14afd55", "committedDate": "2020-02-17T10:03:06Z", "message": "Remove unnecessary variable initialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455d1632e1b43e611ab55c33672396a9f4e15c57", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/455d1632e1b43e611ab55c33672396a9f4e15c57", "committedDate": "2020-02-17T11:31:40Z", "message": "Set default timeout value for request timeouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb", "committedDate": "2020-02-17T11:46:02Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-serdes-new"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzExNTQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-359711541", "createdAt": "2020-02-17T12:51:15Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo1MToxNVrOFqjXAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo1MToxNVrOFqjXAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2Mzg0MQ==", "bodyText": "Should this be anydata instead of any?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380163841", "createdAt": "2020-02-17T12:51:15Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -119,8 +126,8 @@ public type ConsumerConfig record {|\n # + timestamp - Timestamp of the record, in milliseconds since epoch.\n # + topic - Topic to which the record belongs to.\n public type ConsumerRecord record {|\n-    Data key;\n-    Data value;\n+    any key;\n+    any value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODMyMjU4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-359832258", "createdAt": "2020-02-17T15:52:04Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1MjowNFrOFqpGXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1MjowNFrOFqpGXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1Nzg4NA==", "bodyText": "Seems this method can be private?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380257884", "createdAt": "2020-02-17T15:52:04Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java", "diffHunk": "@@ -118,30 +118,35 @@ public static void reportPublish(ObjectValue producerObject, String topic, Objec\n         if (!ObserveUtils.isMetricsEnabled()) {\n             return;\n         }\n+        KafkaObserverContext observerContext = new KafkaObserverContext(KafkaObservabilityConstants.CONTEXT_PRODUCER,\n+                                                                        KafkaUtils.getClientId(producerObject),\n+                                                                        KafkaUtils.getBootstrapServers(producerObject),\n+                                                                        topic);\n+        int size = getMessageSize(value);\n+        reportPublish(observerContext, size);\n+    }\n+\n+    public static int getMessageSize(Object message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODMzMzM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-359833334", "createdAt": "2020-02-17T15:53:37Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1MzozN1rOFqpJlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1MzozN1rOFqpJlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1ODcxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int timeout = 10000;\n          \n          \n            \n                private int timeout = 10000;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380258711", "createdAt": "2020-02-17T15:53:37Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaSerializer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a serializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaSerializer implements Serializer {\n+\n+    private ObjectValue serializerObject = null;\n+    int timeout = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODM0NjU2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-359834656", "createdAt": "2020-02-17T15:55:32Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1NTozM1rOFqpNiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1NTozM1rOFqpNiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1OTcyMQ==", "bodyText": "This can be private?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380259721", "createdAt": "2020-02-17T15:55:33Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaConstants.java", "diffHunk": "@@ -36,8 +36,7 @@ private KafkaConstants() {\n     public static final String BLOCK_SEPARATOR = \":\";\n     public static final String ARRAY_INDICATOR = \"[]\";\n     public static final String KAFKA_PACKAGE_NAME = \"kafka\";\n-    public static final String ORG_NAME = \"ballerina\";\n-    public static final String VERSION = \"0.0.0\";\n+    public static final String VERSION = \"1.1.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODM4NDA3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-359838407", "createdAt": "2020-02-17T16:00:56Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMDo1NlrOFqpYYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMDo1NlrOFqpYYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MjQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Person person = <Person> data;\n          \n          \n            \n                    Person person = <Person>data;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380262497", "createdAt": "2020-02-17T16:00:56Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/kafka;\n+import ballerina/lang.'array;\n+import ballerina/lang.'string;\n+import ballerina/lang.'int;\n+\n+public const TOPIC = \"add-person\";\n+\n+public type Person record {|\n+    string name;\n+    int age;\n+|};\n+\n+public type PersonSerializer object {\n+    *kafka:Serializer;\n+\n+    public function serialize(any data) returns byte[] {\n+        Person person = <Person> data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODM4NTU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-359838554", "createdAt": "2020-02-17T16:01:10Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMToxMVrOFqpY6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMToxMVrOFqpY6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MjYzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Person result = { name: name, age: age };\n          \n          \n            \n                    Person result = {name: name, age: age};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380262632", "createdAt": "2020-02-17T16:01:11Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/kafka;\n+import ballerina/lang.'array;\n+import ballerina/lang.'string;\n+import ballerina/lang.'int;\n+\n+public const TOPIC = \"add-person\";\n+\n+public type Person record {|\n+    string name;\n+    int age;\n+|};\n+\n+public type PersonSerializer object {\n+    *kafka:Serializer;\n+\n+    public function serialize(any data) returns byte[] {\n+        Person person = <Person> data;\n+        byte[] result = person.age.toString().toBytes();\n+        byte[] nameBytes = person.name.toBytes();\n+        result.push(...nameBytes);\n+\n+        return result;\n+    }\n+\n+    public function close() {\n+        io:println(\"closing\");\n+    }\n+};\n+\n+public type PersonDeserializer object {\n+    *kafka:Deserializer;\n+\n+    public function deserialize(byte[] data) returns any {\n+        int age = checkpanic 'int:fromString(checkpanic 'string:fromBytes('array:slice(data, 0, 2)));\n+        string name = checkpanic 'string:fromBytes('array:slice(data, 2));\n+\n+        Person result = { name: name, age: age };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODM4Njcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-359838672", "createdAt": "2020-02-17T16:01:23Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMToyM1rOFqpZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMToyM1rOFqpZSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MjcyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            kafka:Producer producer = new(producerConfigs);\n          \n          \n            \n            kafka:Producer producer = new (producerConfigs);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380262729", "createdAt": "2020-02-17T16:01:23Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/kafka;\n+import ballerina/lang.'array;\n+import ballerina/lang.'string;\n+import ballerina/lang.'int;\n+\n+public const TOPIC = \"add-person\";\n+\n+public type Person record {|\n+    string name;\n+    int age;\n+|};\n+\n+public type PersonSerializer object {\n+    *kafka:Serializer;\n+\n+    public function serialize(any data) returns byte[] {\n+        Person person = <Person> data;\n+        byte[] result = person.age.toString().toBytes();\n+        byte[] nameBytes = person.name.toBytes();\n+        result.push(...nameBytes);\n+\n+        return result;\n+    }\n+\n+    public function close() {\n+        io:println(\"closing\");\n+    }\n+};\n+\n+public type PersonDeserializer object {\n+    *kafka:Deserializer;\n+\n+    public function deserialize(byte[] data) returns any {\n+        int age = checkpanic 'int:fromString(checkpanic 'string:fromBytes('array:slice(data, 0, 2)));\n+        string name = checkpanic 'string:fromBytes('array:slice(data, 2));\n+\n+        Person result = { name: name, age: age };\n+        return result;\n+    }\n+\n+    public function close() {\n+        io:println(\"closing\");\n+    }\n+};\n+\n+PersonSerializer personSerializer = new;\n+PersonDeserializer personDeserializer = new;\n+\n+kafka:ProducerConfig producerConfigs = {\n+    bootstrapServers: \"localhost:14113\",\n+    clientId: \"basic-producer\",\n+    acks: kafka:ACKS_ALL,\n+    requestTimeoutInMillis: 1000,\n+    retryCount: 0,\n+    valueSerializerType: kafka:SER_CUSTOM,\n+    valueSerializer: personSerializer\n+};\n+kafka:Producer producer = new(producerConfigs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDM1Mjk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360035299", "createdAt": "2020-02-18T02:15:07Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjoxNTowN1rOFqzSlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjoxNTowN1rOFqzSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA==", "bodyText": "Why do we need to set null here? Can we set necessary return value in Kafka actions level?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380424854", "createdAt": "2020-02-18T02:15:07Z", "author": {"login": "wggihan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/NonBlockingCallback.java", "diffHunk": "@@ -38,6 +38,7 @@ public NonBlockingCallback(Strand strand) {\n         strand.setState(State.BLOCK_AND_YIELD);\n         this.strand = strand;\n         this.scheduler = strand.scheduler;\n+        this.strand.setReturnValues(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDQxODQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360041845", "createdAt": "2020-02-18T02:43:46Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjo0Mzo0NlrOFqzoAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjo0Mzo0NlrOFqzoAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDMzOQ==", "bodyText": "Is it ok to get runtime from the config field? or we should get it from  BRuntime.getCurrentRuntime()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380430339", "createdAt": "2020-02-18T02:43:46Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.BALLERINA_STRAND;\n+\n+/**\n+ * Represents a deserializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaDeserializer implements Deserializer {\n+\n+    private ObjectValue deserializerObject = null;\n+    private BRuntime runtime = null;\n+    private int timeout = 10000;\n+\n+    @Override\n+    public void configure(Map configs, boolean isKey) {\n+        this.runtime = (BRuntime) configs.get(BALLERINA_STRAND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDQ1ODkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360045891", "createdAt": "2020-02-18T03:00:45Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowMDo0NVrOFqz1Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowMDo0NVrOFqz1Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMzY5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n            // Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380433690", "createdAt": "2020-02-18T03:00:45Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDQ2ODU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360046857", "createdAt": "2020-02-18T03:04:54Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowNDo1NVrOFqz4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowNDo1NVrOFqz4VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzNDUxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380434517", "createdAt": "2020-02-18T03:04:55Z", "author": {"login": "daneshk"}, "path": "tests/jballerina-integration-test/src/test/resources/messaging/kafka/kafka_custom_serdes_test.bal", "diffHunk": "@@ -0,0 +1,171 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/kafka;\n+import ballerina/lang.'array;\n+import ballerina/lang.'string;\n+import ballerina/lang.'int;\n+import ballerina/runtime;\n+\n+public const TOPIC = \"add-person\";\n+\n+public type Person record {|\n+    string name;\n+    int age;\n+|};\n+\n+public type PersonSerializer object {\n+    *kafka:Serializer;\n+\n+    public function serialize(any data) returns byte[] {\n+        Person person = <Person> data;\n+        byte[] result = person.age.toString().toBytes();\n+        byte[] nameBytes = person.name.toBytes();\n+        result.push(...nameBytes);\n+\n+        return result;\n+    }\n+\n+    public function close() {\n+        // Do nothing\n+    }\n+};\n+\n+public type PersonDeserializer object {\n+    *kafka:Deserializer;\n+\n+    public function deserialize(byte[] data) returns any {\n+        int age = checkpanic getIntFromString(checkpanic 'string:fromBytes('array:slice(data, 0, 2)));\n+        string name = checkpanic 'string:fromBytes('array:slice(data, 2));\n+\n+        Person result = { name: name, age: age };\n+        return result;\n+    }\n+\n+    public function close() {\n+        // Do nothing\n+    }\n+};\n+\n+Person resultPerson = {\n+    name: \"John Doe\",\n+    age: 0\n+};\n+\n+PersonSerializer personSerializer = new;\n+PersonDeserializer personDeserializer = new;\n+\n+kafka:ProducerConfig producerConfigs = {\n+    bootstrapServers: \"localhost:9092\",\n+    clientId: \"basic-producer\",\n+    acks: kafka:ACKS_ALL,\n+    requestTimeoutInMillis: 1000,\n+    retryCount: 3,\n+    valueSerializerType: kafka:SER_CUSTOM,\n+    valueSerializer: personSerializer\n+};\n+kafka:Producer producer = new(producerConfigs);\n+\n+kafka:ConsumerConfig consumerConfigs = {\n+    bootstrapServers: \"localhost:9092\",\n+    groupId: \"test-group\",\n+    clientId: \"person-consumer\",\n+    offsetReset: \"earliest\",\n+    autoCommit: true,\n+    topics: [TOPIC],\n+    valueDeserializerType: kafka:DES_CUSTOM,\n+    valueDeserializer: personDeserializer\n+};\n+listener kafka:Consumer consumer = new(consumerConfigs);\n+\n+public function sendData(string name, int age) returns error? {\n+    Person person = {\n+        name: name,\n+        age: age\n+    };\n+    var result =  producer->send(person, TOPIC);\n+    return result;\n+}\n+\n+service ListenerService on consumer {\n+    resource function onMessage(kafka:Consumer consumer, kafka:ConsumerRecord[] records) {\n+        foreach var kafkaRecord in records {\n+            var value = <@untainted> kafkaRecord.value;\n+            if (value is Person) {\n+                resultPerson = value;\n+            }\n+        }\n+    }\n+}\n+\n+listener http:Listener httpListener = new(14001);\n+\n+@http:ServiceConfig {\n+    basePath: \"/\"\n+}\n+service SendData on httpListener {\n+    resource function sendData(http:Caller caller, http:Request request) {\n+        http:Response response = new;\n+        var payload = request.getJsonPayload();\n+        int age = 0;\n+        string name = \"\";\n+        boolean failed = false;\n+        if (payload is json) {\n+            var nameValue = payload.name.toString();\n+            var ageValue = getIntFromString(payload.age.toString());\n+            if (ageValue is int) {\n+                age = ageValue;\n+                name = nameValue;\n+                var result = sendData(name, age);\n+                if (result is error) {\n+                    failed = true;\n+                    response.statusCode = 501;\n+                    response.setPayload(\"Sending data to Kafka server failed: \" + result.toString());\n+                }\n+            } else {\n+                failed = true;\n+                response.statusCode = 400;\n+                response.setPayload(\"Invalid request: Data conversion failed.\");\n+            }\n+        } else {\n+            response.statusCode = 400;\n+            failed = true;\n+            response.setPayload(\"Invalid request: Payload is not JSON.\");\n+        }\n+        int i = 0;\n+\n+        while (i < 10) {\n+            i += 1;\n+            runtime:sleep(1000);\n+            if (resultPerson.name == name && resultPerson.age == age) {\n+                response.setPayload(\"Successfully received\");\n+                failed = false;\n+                break;\n+            }\n+        }\n+        if (failed && response.statusCode == 200) {\n+            response.statusCode = 501;\n+            response.setPayload(\"Not received the data\");\n+        }\n+        var responseResult = caller->respond(response);\n+    }\n+}\n+\n+function getIntFromString(string value) returns int|error {\n+    int result = check 'int:fromString(value);\n+    return result;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDQ3Mjgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360047283", "createdAt": "2020-02-18T03:06:55Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowNjo1NlrOFqz59A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowNjo1NlrOFqz59A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzNDkzMg==", "bodyText": "Shall we add doc comments for these two functions", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380434932", "createdAt": "2020-02-18T03:06:56Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/deserializer.bal", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public type Deserializer abstract object {\n+    public function close();\n+\n+    public function deserialize(byte[] data) returns any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDUyOTkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360052991", "createdAt": "2020-02-18T03:32:17Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzozMjoxN1rOFq0Myg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzozMjoxN1rOFq0Myg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzOTc1NA==", "bodyText": "Shall we add documentation here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380439754", "createdAt": "2020-02-18T03:32:17Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/deserializer.bal", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDYwNjAx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360060601", "createdAt": "2020-02-18T04:07:18Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNDowNzoxOFrOFq0l2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNDowNzoxOFrOFq0l2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ0NjE2OQ==", "bodyText": "Let's add documentation here as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380446169", "createdAt": "2020-02-18T04:07:18Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/serializer.bal", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public type Serializer abstract object {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDgzMDQ5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360083049", "createdAt": "2020-02-18T05:47:58Z", "commit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNTo0Nzo1OFrOFq1vsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNTo0Nzo1OFrOFq1vsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2NTA3NA==", "bodyText": "Normally 'isKey' kind word use for a method name.  Shall we use something else like keyPresent  etc.?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380465074", "createdAt": "2020-02-18T05:47:58Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.BALLERINA_STRAND;\n+\n+/**\n+ * Represents a deserializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaDeserializer implements Deserializer {\n+\n+    private ObjectValue deserializerObject = null;\n+    private BRuntime runtime = null;\n+    private int timeout = 10000;\n+\n+    @Override\n+    public void configure(Map configs, boolean isKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e78d02d3c36e6cbe9b419ec9afe6248db0a522", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1e78d02d3c36e6cbe9b419ec9afe6248db0a522", "committedDate": "2020-02-18T06:19:33Z", "message": "Implement review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjM2NjQw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360236640", "createdAt": "2020-02-18T10:44:29Z", "commit": {"oid": "d1e78d02d3c36e6cbe9b419ec9afe6248db0a522"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwODIxMDQ4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#pullrequestreview-360821048", "createdAt": "2020-02-19T03:26:43Z", "commit": {"oid": "d1e78d02d3c36e6cbe9b419ec9afe6248db0a522"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4264, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}