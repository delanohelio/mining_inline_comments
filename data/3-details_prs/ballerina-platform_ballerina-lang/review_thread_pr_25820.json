{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MjQ0NDY0", "number": 25820, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTowNjo1NlrOEjo2lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo1ODowNlrOEjqTxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODA0OTUxOnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/Generator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTowNjo1NlrOHSGi5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjozMDozNVrOHSiBvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0MzY1Mg==", "bodyText": "@shehan360 do we need check? Below for each won't execute if there are 0 entries?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r488743652", "createdAt": "2020-09-15T15:06:56Z", "author": {"login": "keizer619"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/Generator.java", "diffHunk": "@@ -417,28 +391,48 @@ private static void addDocForObjectType(BLangObjectTypeNode objectType,\n                 }\n             }\n         }\n+        module.abstractObjects.add(new BAbstractObject(name, description, isDeprecated, fields, functions));\n+    }\n+\n+    private static void addDocForClassType(BLangClassDefinition classDefinition, Module module) {\n+        List<Function> functions = new ArrayList<>();\n+        String name = classDefinition.getName().getValue();\n+        String description = description(classDefinition);\n+        boolean isDeprecated = isDeprecated(classDefinition.getAnnotationAttachments());\n+\n+        List<DefaultableVariable> fields = getFields(classDefinition, classDefinition.fields,\n+                classDefinition.getMarkdownDocumentationAttachment(), module);\n+\n+        // Iterate through the functions\n+        if (classDefinition.getFunctions().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5MzkxOA==", "bodyText": "Yes the check can be removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r489193918", "createdAt": "2020-09-16T06:30:35Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/Generator.java", "diffHunk": "@@ -417,28 +391,48 @@ private static void addDocForObjectType(BLangObjectTypeNode objectType,\n                 }\n             }\n         }\n+        module.abstractObjects.add(new BAbstractObject(name, description, isDeprecated, fields, functions));\n+    }\n+\n+    private static void addDocForClassType(BLangClassDefinition classDefinition, Module module) {\n+        List<Function> functions = new ArrayList<>();\n+        String name = classDefinition.getName().getValue();\n+        String description = description(classDefinition);\n+        boolean isDeprecated = isDeprecated(classDefinition.getAnnotationAttachments());\n+\n+        List<DefaultableVariable> fields = getFields(classDefinition, classDefinition.fields,\n+                classDefinition.getMarkdownDocumentationAttachment(), module);\n+\n+        // Iterate through the functions\n+        if (classDefinition.getFunctions().size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0MzY1Mg=="}, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODE5NTAyOnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/Generator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozNzozN1rOHSH8gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjozMTowMFrOHSiCaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2NjU5Mw==", "bodyText": "isAnonymous is never used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r488766593", "createdAt": "2020-09-15T15:37:37Z", "author": {"login": "pramodya1994"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/Generator.java", "diffHunk": "@@ -391,9 +365,9 @@ private static String findDescFromList(String name, BLangMarkdownDocumentation d\n         }\n     }\n \n-    private static void addDocForObjectType(BLangObjectTypeNode objectType,\n-                                            BLangTypeDefinition parent,\n-                                            Module module) {\n+    private static void addDocForAbstractObjectType(BLangObjectTypeNode objectType,\n+                                                    BLangTypeDefinition parent,\n+                                                    Module module) {\n         List<Function> functions = new ArrayList<>();\n         String name = parent.getName().getValue();\n         boolean isAnonymous = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5NDA4OQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r489194089", "createdAt": "2020-09-16T06:31:00Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/Generator.java", "diffHunk": "@@ -391,9 +365,9 @@ private static String findDescFromList(String name, BLangMarkdownDocumentation d\n         }\n     }\n \n-    private static void addDocForObjectType(BLangObjectTypeNode objectType,\n-                                            BLangTypeDefinition parent,\n-                                            Module module) {\n+    private static void addDocForAbstractObjectType(BLangObjectTypeNode objectType,\n+                                                    BLangTypeDefinition parent,\n+                                                    Module module) {\n         List<Function> functions = new ArrayList<>();\n         String name = parent.getName().getValue();\n         boolean isAnonymous = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2NjU5Mw=="}, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODIxMzQzOnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/Writer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0MTozOFrOHSIH4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjozMToxN1rOHSiC5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2OTUwNQ==", "bodyText": "handlebars.registerHelper(\"addColon\",\n                    (Helper<PageContext>) (page, options) -> page.getClass() == ClassPageContext.class\n                            || page.getClass() == RecordPageContext.class || page.getClass() == ClientPageContext.class\n                            || page.getClass() == ListenerPageContext.class);\nCan't we simplify L152 - 160 like this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r488769505", "createdAt": "2020-09-15T15:41:38Z", "author": {"login": "pramodya1994"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/Writer.java", "diffHunk": "@@ -168,7 +150,7 @@ public static void writeHtmlDocument(Object object, String packageTemplateName,\n             });\n \n             handlebars.registerHelper(\"addColon\", (Helper<PageContext>) (page, options) -> {\n-                if (page.getClass() == ObjectPageContext.class || page.getClass() == RecordPageContext.class ||\n+                if (page.getClass() == ClassPageContext.class || page.getClass() == RecordPageContext.class ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5NDIxNA==", "bodyText": "Added the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r489194214", "createdAt": "2020-09-16T06:31:17Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/Writer.java", "diffHunk": "@@ -168,7 +150,7 @@ public static void writeHtmlDocument(Object object, String packageTemplateName,\n             });\n \n             handlebars.registerHelper(\"addColon\", (Helper<PageContext>) (page, options) -> {\n-                if (page.getClass() == ObjectPageContext.class || page.getClass() == RecordPageContext.class ||\n+                if (page.getClass() == ClassPageContext.class || page.getClass() == RecordPageContext.class ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2OTUwNQ=="}, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODIyMzk3OnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0Mzo0M1rOHSIOFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjozMzowM1rOHSiFjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MTA5NQ==", "bodyText": "Access can be package-private for both consts", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r488771095", "createdAt": "2020-09-15T15:43:43Z", "author": {"login": "pramodya1994"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocConstants.java", "diffHunk": "@@ -34,7 +34,8 @@\n     public static final String ORG_NAME = \"org-name\";\n     public static final String VERSION = \"version\";\n     public static final String RECORD_TEMPLATE_NAME_KEY = \"record.template.name\";\n-    public static final String OBJECT_TEMPLATE_NAME_KEY = \"object.template.name\";\n+    public static final String CLASS_TEMPLATE_NAME_KEY = \"class.template.name\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5NDg5NA==", "bodyText": "Added the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r489194894", "createdAt": "2020-09-16T06:33:03Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocConstants.java", "diffHunk": "@@ -34,7 +34,8 @@\n     public static final String ORG_NAME = \"org-name\";\n     public static final String VERSION = \"version\";\n     public static final String RECORD_TEMPLATE_NAME_KEY = \"record.template.name\";\n-    public static final String OBJECT_TEMPLATE_NAME_KEY = \"object.template.name\";\n+    public static final String CLASS_TEMPLATE_NAME_KEY = \"class.template.name\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MTA5NQ=="}, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODI0Mzk0OnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/AbstractObjectPageContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0ODowNlrOHSIaSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjozMTo1MlrOHSiD0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3NDIxOA==", "bodyText": "make this a static final constant or private & provide getters if need to access", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r488774218", "createdAt": "2020-09-15T15:48:06Z", "author": {"login": "pramodya1994"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/AbstractObjectPageContext.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.docgen.generator.model;\n+\n+/**\n+ * Page context for the Abstract Object page.\n+ *\n+ * @since 2.0\n+ */\n+public class AbstractObjectPageContext extends ModulePageContext {\n+    public BAbstractObject abstractObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5NDQ1MA==", "bodyText": "I think this has to be kept public because its accessed by handlebars template", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r489194450", "createdAt": "2020-09-16T06:31:52Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/AbstractObjectPageContext.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.docgen.generator.model;\n+\n+/**\n+ * Page context for the Abstract Object page.\n+ *\n+ * @since 2.0\n+ */\n+public class AbstractObjectPageContext extends ModulePageContext {\n+    public BAbstractObject abstractObject;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3NDIxOA=="}, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODI2MjMyOnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/ClassPageContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo1MjowOFrOHSIluQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjozMjowM1rOHSiEEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3NzE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public BClass bClass;\n          \n          \n            \n                private BClass bClass;\n          \n      \n    \n    \n  \n\nAccess ca be private", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r488777145", "createdAt": "2020-09-15T15:52:08Z", "author": {"login": "pramodya1994"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/ClassPageContext.java", "diffHunk": "@@ -16,13 +16,15 @@\n package org.ballerinalang.docgen.generator.model;\n \n /**\n- * Page context for the object page.\n+ * Page context for the bClass page.\n+ *\n+ * @since 2.0\n  */\n-public class ObjectPageContext extends ModulePageContext {\n-    public Object object;\n-    public ObjectPageContext(Object object, Module module, Project project, String rootPath, String title,\n-                             boolean excludeIndex) {\n+public class ClassPageContext extends ModulePageContext {\n+    public BClass bClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5NDUxNA==", "bodyText": "I think this has to be kept public because its accessed by handlebars template", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r489194514", "createdAt": "2020-09-16T06:32:03Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/ClassPageContext.java", "diffHunk": "@@ -16,13 +16,15 @@\n package org.ballerinalang.docgen.generator.model;\n \n /**\n- * Page context for the object page.\n+ * Page context for the bClass page.\n+ *\n+ * @since 2.0\n  */\n-public class ObjectPageContext extends ModulePageContext {\n-    public Object object;\n-    public ObjectPageContext(Object object, Module module, Project project, String rootPath, String title,\n-                             boolean excludeIndex) {\n+public class ClassPageContext extends ModulePageContext {\n+    public BClass bClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3NzE0NQ=="}, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODI3NDQzOnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/Type.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo1NDo1NVrOHSItYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjozMjoxNlrOHSiEYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3OTEwNw==", "bodyText": "// if anonymous empty record can remove one, since the same comment duplicated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r488779107", "createdAt": "2020-09-15T15:54:55Z", "author": {"login": "pramodya1994"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/Type.java", "diffHunk": "@@ -216,12 +217,14 @@ public static Type fromTypeNode(BLangType type, String currentModule) {\n         // If anonymous type substitute the name\n         if (typeModel.name != null && typeModel.name.contains(\"$anonType$\")) {\n             // if anonymous empty record\n-            if (type.type instanceof BRecordType && ((BRecordType) type.type).fields.isEmpty()) {\n-                    typeModel.name = type.type.toString();\n-                    typeModel.generateUserDefinedTypeLink = false;\n+            // if anonymous empty record", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5NDU5Mg==", "bodyText": "Added the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r489194592", "createdAt": "2020-09-16T06:32:16Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/Type.java", "diffHunk": "@@ -216,12 +217,14 @@ public static Type fromTypeNode(BLangType type, String currentModule) {\n         // If anonymous type substitute the name\n         if (typeModel.name != null && typeModel.name.contains(\"$anonType$\")) {\n             // if anonymous empty record\n-            if (type.type instanceof BRecordType && ((BRecordType) type.type).fields.isEmpty()) {\n-                    typeModel.name = type.type.toString();\n-                    typeModel.generateUserDefinedTypeLink = false;\n+            // if anonymous empty record", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3OTEwNw=="}, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODI4ODA1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/ObjectFieldDefaultValueTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo1ODowNlrOHSI2Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjozMjoyN1rOHSiEpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc4MTMzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<BClass> bClasses;\n          \n          \n            \n                priavte List<BClass> bClasses;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r488781331", "createdAt": "2020-09-15T15:58:06Z", "author": {"login": "pramodya1994"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/ObjectFieldDefaultValueTest.java", "diffHunk": "@@ -41,12 +41,12 @@\n import java.util.Map;\n \n /**\n- * Test cases to check default value initialization for objects in docs.\n+ * Test cases to check default value initialization for bClasses in docs.\n  */\n @Test(groups = \"brokenOnClassChange\")\n public class ObjectFieldDefaultValueTest {\n     private Module testModule;\n-    List<Object> objects;\n+    List<BClass> bClasses;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5NDY2Mg==", "bodyText": "Added the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25820#discussion_r489194662", "createdAt": "2020-09-16T06:32:27Z", "author": {"login": "shehan360"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/ObjectFieldDefaultValueTest.java", "diffHunk": "@@ -41,12 +41,12 @@\n import java.util.Map;\n \n /**\n- * Test cases to check default value initialization for objects in docs.\n+ * Test cases to check default value initialization for bClasses in docs.\n  */\n @Test(groups = \"brokenOnClassChange\")\n public class ObjectFieldDefaultValueTest {\n     private Module testModule;\n-    List<Object> objects;\n+    List<BClass> bClasses;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc4MTMzMQ=="}, "originalCommit": {"oid": "8ddf93a264607cc9f2134c565aa623965bc33e5e"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 116, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}