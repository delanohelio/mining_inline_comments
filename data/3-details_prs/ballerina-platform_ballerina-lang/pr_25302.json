{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MjE2NDg0", "number": 25302, "title": "Add object constructor expression support", "bodyText": "Purpose\nFixes #25043\nApproach\nFollowing all the steps in the compiler by creating an anonymous type definition and finally initializing the object via an expression.\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nimport ballerina/io;\n\nvar objVariable = object {\n    int n = 20;\n    int x;\n\n    public function init() {\n        self.x = 4;\n    }\n};\n\npublic function main() {\n    io:println(objVariable.n);\n    io:println(objVariable.x);\n}\nRemarks\n\ud83d\udd27 Need to test on Const expressions and Readonly\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-08-18T05:37:24Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302", "merged": true, "mergeCommit": {"oid": "4fd10d3c81f5b20f94b1d4514a27a19039a06c58"}, "closed": true, "closedAt": "2020-08-26T08:18:50Z", "author": {"login": "KRVPerera"}, "timelineItems": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAADS1AH2gAyNDY5MjE2NDg0OjQxZGUyNzkxOTg4YWRiYzBhYmE0NWRhYTI4MGZiMzkwNTM5Y2MzNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCrbNHgFqTQ3NTQ2MjM3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "41de2791988adbc0aba45daa280fb390539cc36d", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41de2791988adbc0aba45daa280fb390539cc36d", "committedDate": "2020-08-18T05:20:50Z", "message": "Add parser node transformer support for object-constructor-expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3866fa1d13b38d42a0bd36ead20aa19dd68227ad", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3866fa1d13b38d42a0bd36ead20aa19dd68227ad", "committedDate": "2020-08-18T05:24:56Z", "message": "Add object-ctor-expression front-end changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75a9734e7fa44743d2c9c826ac066b06bb4753ef", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/75a9734e7fa44743d2c9c826ac066b06bb4753ef", "committedDate": "2020-08-18T05:29:14Z", "message": "Taint analyzer changes for object-constructor-expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c938aed5d5c2c46cccf35c30eb365286c036c896", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c938aed5d5c2c46cccf35c30eb365286c036c896", "committedDate": "2020-08-18T05:29:40Z", "message": "Add test cases for object-constructor-expression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MDA2OTEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-469006913", "createdAt": "2020-08-18T05:46:20Z", "commit": {"oid": "c938aed5d5c2c46cccf35c30eb365286c036c896"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0NjoyMFrOHCENxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0NjoyMFrOHCENxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyODI2Mw==", "bodyText": "\ud83c\udfd5\ufe0f  Not related to this PR", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r471928263", "createdAt": "2020-08-18T05:46:20Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2118,7 +2119,7 @@ public void visit(BLangSimpleVarRef varRefExpr) {\n             //  locally defined record type defs. This check should be removed once local var referencing is supported.\n             if (((symbol.tag & SymTag.VARIABLE) == SymTag.VARIABLE)) {\n                 BVarSymbol varSym = (BVarSymbol) symbol;\n-                checkSefReferences(varRefExpr.pos, env, varSym);\n+                checkSelfReferences(varRefExpr.pos, env, varSym);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c938aed5d5c2c46cccf35c30eb365286c036c896"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc94f0c7a4ea8ddb418bfd7b397d9c178f42e3cc", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc94f0c7a4ea8ddb418bfd7b397d9c178f42e3cc", "committedDate": "2020-08-18T05:51:05Z", "message": "Fix negative test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d65a4f748ec3036fb029bd7f5d19c98c466e39", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2d65a4f748ec3036fb029bd7f5d19c98c466e39", "committedDate": "2020-08-19T04:07:53Z", "message": "Remove unused attributes from BLangObjectCtorExpr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a228160fc0967f67ce2aff96e1d824065f19fd2", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a228160fc0967f67ce2aff96e1d824065f19fd2", "committedDate": "2020-08-19T04:09:26Z", "message": "Add init method checks for object-ctor-expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa30a3fb1522039b4b36e6384f159ee177731a5", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6fa30a3fb1522039b4b36e6384f159ee177731a5", "committedDate": "2020-08-19T04:44:44Z", "message": "Remove balos as cannot disable on old parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d1062f8f8826a6f5b9d6a09e2c4579c1e1fd9cf", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d1062f8f8826a6f5b9d6a09e2c4579c1e1fd9cf", "committedDate": "2020-08-19T05:28:46Z", "message": "Fix code formatting issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMjA4Njg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-470208687", "createdAt": "2020-08-19T07:51:19Z", "commit": {"oid": "8d1062f8f8826a6f5b9d6a09e2c4579c1e1fd9cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzo1MToyMFrOHC64Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzo1MToyMFrOHC64Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgyMzg1OA==", "bodyText": "\ud83d\udd27 Need to remove all unused methods", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r472823858", "createdAt": "2020-08-19T07:51:20Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangObjectCtorExpr.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.SimpleVariableNode;\n+import org.ballerinalang.model.tree.types.StructureTypeNode;\n+import org.ballerinalang.model.tree.types.TypeNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents the object-constructor-expr.\n+ *\n+ * @since slp3\n+ */\n+public class BLangObjectCtorExpr extends BLangExpression implements StructureTypeNode {\n+\n+    public BLangObjectTypeNode objectTypeNode;\n+    public BLangTypeInit typeInit;\n+    public BLangType referenceType;\n+\n+    public BLangObjectCtorExpr(BLangObjectTypeNode objectTypeNode) {\n+        super();\n+        this.objectTypeNode = objectTypeNode;\n+    }\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    /**\n+     * Returns the kind of this node.\n+     *\n+     * @return the kind of this node.\n+     */\n+    @Override\n+    public NodeKind getKind() {\n+\n+        return NodeKind.OBJECT_CTOR_EXPRESSION;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder(\"OCE {\");\n+        sb.append(this.objectTypeNode.toString());\n+        sb.append(\"};\\n\");\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public boolean getIsAnonymous() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1062f8f8826a6f5b9d6a09e2c4579c1e1fd9cf"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/700fdf265d65ca68beba9176f89ace237816f4f3", "committedDate": "2020-08-19T09:19:37Z", "message": "Remove StructureTypeNode interface from BLangObjectCtorExpr"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87c780f73855fcb89edb552d655d2d5690a29cc0", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87c780f73855fcb89edb552d655d2d5690a29cc0", "committedDate": "2020-08-19T09:15:51Z", "message": "Remove StructureTypeNode interface from BLangObjectCtorExpr"}, "afterCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/700fdf265d65ca68beba9176f89ace237816f4f3", "committedDate": "2020-08-19T09:19:37Z", "message": "Remove StructureTypeNode interface from BLangObjectCtorExpr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDk0MDUx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471494051", "createdAt": "2020-08-20T11:14:56Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNDo1NlrOHD8I7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNDo1NlrOHD8I7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MzEwMg==", "bodyText": "Shall we add these grammar rules as a doc comment? you can check other places for a sample", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473893102", "createdAt": "2020-08-20T11:14:56Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDk0Mzcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471494373", "createdAt": "2020-08-20T11:15:28Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNToyOFrOHD8KBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNToyOFrOHD8KBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MzM4MA==", "bodyText": "these context starts  and closes are not necessary.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473893380", "createdAt": "2020-08-20T11:15:28Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDk1MDg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471495085", "createdAt": "2020-08-20T11:16:41Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNjo0MVrOHD8MSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxNjo0MVrOHD8MSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5Mzk2MA==", "bodyText": "Since we come here after checking next token is CLIENT_KEYWORD, we can directly use consume() without going to parseClientKeyword()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473893960", "createdAt": "2020-08-20T11:16:41Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDk2Mzg2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471496386", "createdAt": "2020-08-20T11:18:42Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxODo0M1rOHD8Qbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxODo0M1rOHD8Qbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NTAyMw==", "bodyText": "we need type-reference := identifier | qualified-identifier right? not a typeDescriptor\ncan use parseQualifiedIdentifier() for that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473895023", "createdAt": "2020-08-20T11:18:43Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDk3MDE4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471497018", "createdAt": "2020-08-20T11:19:48Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxOTo0OFrOHD8Sbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToxOTo0OFrOHD8Sbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NTUzNA==", "bodyText": "Shall we change method name parseObjectConstructorExpressionNode to parseObjectConstructorExpression to be aligned with other expressions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473895534", "createdAt": "2020-08-20T11:19:48Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDk3OTg2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471497986", "createdAt": "2020-08-20T11:21:19Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyMToxOVrOHD8Vow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyMToxOVrOHD8Vow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NjM1NQ==", "bodyText": "don't need this context as well since we are already inside OBJECT_CONSTRUCTOR context", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473896355", "createdAt": "2020-08-20T11:21:19Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);\n+        } else {\n+            typeDescriptor = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectCtorBody = parseObjectConstructorBody();\n+\n+        endContext();\n+\n+        return STNodeFactory.createObjectConstructorExpressionNode(annots,\n+                objectTypeQualifier, objectKeyword, typeDescriptor, objectCtorBody);\n+    }\n+\n+    private STNode parseObjectConstructorBody() {\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR_BODY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDk5MDA3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471499007", "createdAt": "2020-08-20T11:23:04Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyMzowNFrOHD8YpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyMzowNFrOHD8YpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NzEyNA==", "bodyText": "I think currently parseObjectMembers() allows object-type-inclusion := * type-reference ; as well.\nI can fix this when adding error recovery though. :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473897124", "createdAt": "2020-08-20T11:23:04Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);\n+        } else {\n+            typeDescriptor = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectCtorBody = parseObjectConstructorBody();\n+\n+        endContext();\n+\n+        return STNodeFactory.createObjectConstructorExpressionNode(annots,\n+                objectTypeQualifier, objectKeyword, typeDescriptor, objectCtorBody);\n+    }\n+\n+    private STNode parseObjectConstructorBody() {\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR_BODY);\n+\n+        STNode openBrace = parseOpenBrace();\n+        STNode objectMembers = parseObjectMembers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDk5OTIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471499922", "createdAt": "2020-08-20T11:24:41Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyNDo0MVrOHD8big==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyNDo0MVrOHD8big==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5Nzg2Ng==", "bodyText": "I think it is better to merge two nodes. @SupunS WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473897866", "createdAt": "2020-08-20T11:24:41Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectKeyword\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"typeDescriptor\",\n+                    \"type\": \"TypeDescriptorNode\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectConstructorBody\",\n+                    \"type\": \"ObjectConstructorBodyNode\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"ObjectConstructorBodyNode\",\n+            \"base\": \"Node\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR_BODY\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"openBraceToken\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"members\",\n+                    \"type\": \"Node\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"closeBraceToken\",\n+                    \"type\": \"Token\"\n+                }\n+            ]\n+        },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTAyMTM5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471502139", "createdAt": "2020-08-20T11:28:22Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyODoyMlrOHD8jAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyODoyMlrOHD8jAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5OTc3OQ==", "bodyText": "{\n                    \"name\": \"qualifierList\",\n                    \"type\": \"Token\",\n                    \"occurrences\": \"MULTIPLE\"\n                }\nShall we use qualifierList instead?  bcz when there's a change to no of preceding qualifiers we don't need to change the syntax tree.\nCheck MethodDeclarationNode there's similar case with remote-qual := remote", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473899779", "createdAt": "2020-08-20T11:28:22Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTAyODI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471502828", "createdAt": "2020-08-20T11:29:31Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTozMlrOHD8lJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTozMlrOHD8lJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMDMyNA==", "bodyText": "missing EOF newline", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473900324", "createdAt": "2020-08-20T11:29:32Z", "author": {"login": "lochana-chathura"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression_negative.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// test object reference type\n+\n+type SampleRec record {};\n+\n+var objCreatedViaConstructor = object SampleRec {};\n+\n+var notClient = object {\n+    private remote function remoteFunc() {}\n+};\n+\n+var invalidInit = object {\n+    private function init(int x) {}\n+};\n+\n+var objVariable = object {\n+    private function init() {\n+    }\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTAyOTI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471502926", "createdAt": "2020-08-20T11:29:42Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTo0MlrOHD8lcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTo0MlrOHD8lcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMDQwMA==", "bodyText": "add new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473900400", "createdAt": "2020-08-20T11:29:42Z", "author": {"login": "lochana-chathura"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression.bal", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// test object field access\n+\n+type MO object {\n+    int x = 0;\n+};\n+\n+type MOO object {\n+    *MO;\n+    int n = 0;\n+\n+    public function init() {\n+        self.x = 5;\n+    }\n+};\n+\n+var objCreatedViaConstructor = object MOO {\n+    int n = 20;\n+    int y = 5;\n+\n+    public function init() {\n+        self.x = 4;\n+        self.y = 10;\n+    }\n+};\n+\n+function testObjectCreationViaObjectConstructor() {\n+    assertValueEquality(20, objCreatedViaConstructor.n);\n+    assertValueEquality(4, objCreatedViaConstructor.x);\n+    assertValueEquality(10, objCreatedViaConstructor.y);\n+}\n+\n+// Test annotation attachment and access\n+\n+public type ObjectData record {|\n+    string descriptor = \"\";\n+|};\n+\n+public annotation ObjectData OBJAnnots on type;\n+\n+var obj = @OBJAnnots { descriptor: \"ConstructedObject\" }\n+    object {\n+        int n = 0;\n+        function inc() {\n+            self.n += 1;\n+        }\n+    };\n+\n+function testObjectConstructorAnnotationAttachment() {\n+    typedesc<object{}> t = typeof obj;\n+    ObjectData annotationVal = <ObjectData>t.@OBJAnnots;\n+    assertValueEquality(\"ConstructedObject\", annotationVal.descriptor);\n+}\n+\n+function testObjectConstructorObjectFunctionInvocation() {\n+    obj.inc();\n+    assertTrue(obj.n == 1);\n+    obj.inc();\n+    assertTrue(obj.n == 2);\n+}\n+\n+//var remoteObject = @OBJAnnots { descriptor: \"ConstructedObject\" }\n+//    client object {\n+//        int n = 0;\n+//        remote function remoteFunc() {\n+//            self.n += 1;\n+//        }\n+//\n+//        function inc() {\n+//            self.n += 1;\n+//        }\n+//    };\n+//\n+//function testObjectConstructorClientKeyword() {\n+//    remoteObject->remoteFunc();\n+//    assertTrue(remoteObject.n == 1);\n+//    remoteObject.inc();\n+//    assertTrue(remoteObject.n == 2);\n+//}\n+\n+type MoAdvanced object {\n+    int n = 0;\n+\n+    public function setN(int userN) {\n+        self.n = userN;\n+    }\n+\n+    public function init() {\n+        self.n = 0;\n+    }\n+};\n+\n+function testObjectConstructorIncludedMethod() {\n+    var objWithIncludedMethod = object MoAdvanced {\n+\n+        public function init() {\n+            self.n = -1;\n+        }\n+\n+        public function setN(int userN) {\n+            self.n = userN;\n+        }\n+    };\n+\n+    objWithIncludedMethod.setN(200);\n+    assertTrue(objWithIncludedMethod.n == 200);\n+    objWithIncludedMethod.setN(100);\n+    assertTrue(objWithIncludedMethod.n == 100);\n+}\n+\n+// assertion helpers\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertTrue(any|error actual) {\n+    if actual is boolean && actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected 'true', found '\" + actual.toString () + \"'\");\n+}\n+\n+function assertFalse(any|error actual) {\n+    if actual is boolean && !actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected 'false', found '\" + actual.toString () + \"'\");\n+}\n+\n+function assertValueEquality(anydata|error expected, anydata|error actual) {\n+    if expected == actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expected.toString() + \"', found '\" + actual.toString () + \"'\");\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTAzMDQw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471503040", "createdAt": "2020-08-20T11:29:53Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTo1M1rOHD8lyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyOTo1M1rOHD8lyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMDQ4OQ==", "bodyText": "add new liine :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473900489", "createdAt": "2020-08-20T11:29:53Z", "author": {"login": "lochana-chathura"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_balo/object/test_objects.bal", "diffHunk": "@@ -303,4 +303,4 @@ public function testObjectReferingNonAbstractObjLoadedFromBalo() {\n     utils:assertEquality((), cemp1.setWorkingFromHomeAllowance(50));\n     utils:assertEquality(\"Contactless hello! John\", cemp1.getName());\n     utils:assertEquality(20, cemp1.Age());\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTU0NjU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471554655", "createdAt": "2020-08-20T12:42:46Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0Mjo0N1rOHD-_2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowMjo0OFrOHD_uyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzOTkyOQ==", "bodyText": "If we invert the conditions of if-else stmts, we can reduce the number of nested levels.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473939929", "createdAt": "2020-08-20T12:42:47Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -898,6 +901,104 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    @Override\n+    public BLangNode transform(ObjectConstructorBodyNode objectConstructorBodyNode) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        NodeList<Node> members = objectConstructorBodyNode.members();\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            if (bLangNode.getKind() == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    if (objectTypeNode.initFunction == null) {\n+                        if (bLangFunction.requiredParams.size() != 0) {\n+                            dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MTk4Nw==", "bodyText": "Ideally we shouldn't reach here. So throwing an exception would be better.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473941987", "createdAt": "2020-08-20T12:46:27Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -898,6 +901,104 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    @Override\n+    public BLangNode transform(ObjectConstructorBodyNode objectConstructorBodyNode) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        NodeList<Node> members = objectConstructorBodyNode.members();\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            if (bLangNode.getKind() == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    if (objectTypeNode.initFunction == null) {\n+                        if (bLangFunction.requiredParams.size() != 0) {\n+                            dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                            continue;\n+                        }\n+                        bLangFunction.objInitFunction = true;\n+                        objectTypeNode.initFunction = bLangFunction;\n+                    } else {\n+                        objectTypeNode.addFunction(bLangFunction);\n+                    }\n+                } else {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                }\n+            } else if (bLangNode.getKind() == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (bLangNode.getKind() == NodeKind.USER_DEFINED_TYPE) {\n+                objectTypeNode.addTypeReference((BLangType) bLangNode);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        objectTypeNode.pos = getPosition(objectConstructorBodyNode);\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+\n+        DiagnosticPos pos = getPositionWithoutMetadata(objectConstructorExpressionNode);\n+\n+        BLangObjectTypeNode objectTypeNode =\n+                (BLangObjectTypeNode) createTypeNode(objectConstructorExpressionNode.objectConstructorBody());\n+\n+        BLangObjectCtorExpr objectCtorExpression = TreeBuilder.createObjectCtorExpression(objectTypeNode);\n+        objectCtorExpression.pos = pos;\n+\n+        Optional<TypeDescriptorNode> typeDescriptor = objectConstructorExpressionNode.typeDescriptor();\n+\n+        typeDescriptor.ifPresent(typeDescriptorNode -> {\n+            BLangType type = createTypeNode(typeDescriptorNode);\n+            objectCtorExpression.addTypeReference(type);\n+        });\n+\n+        // create a type definition and attach annotations\n+        BLangTypeDefinition bLTypeDef = createTypeDefinitionWithTypeNode(objectTypeNode);\n+        Optional<Token> objectTypeQualifier = objectConstructorExpressionNode.objectTypeQualifier();\n+\n+        objectTypeQualifier.ifPresent(qualifier -> {\n+            if (qualifier.kind() == SyntaxKind.CLIENT_KEYWORD) {\n+                objectTypeNode.flagSet.add(Flag.CLIENT);\n+                bLTypeDef.flagSet.add(Flag.CLIENT);\n+                objectCtorExpression.isClient = true;\n+            } else {\n+                dlog.error(pos, DiagnosticCode.INVALID_TOKEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MzIwMA==", "bodyText": "Better to use the complete name BLangObjectConstructorExpression, since this is part of the public API.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473943200", "createdAt": "2020-08-20T12:48:31Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangObjectCtorExpr.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.types.TypeNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangType;\n+\n+\n+/**\n+ * Represents the object-constructor-expr.\n+ *\n+ * @since slp3\n+ */\n+public class BLangObjectCtorExpr extends BLangExpression {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MzU0NQ==", "bodyText": "extra newline", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473943545", "createdAt": "2020-08-20T12:49:06Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangObjectCtorExpr.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.types.TypeNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangObjectTypeNode;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangType;\n+\n+\n+/**\n+ * Represents the object-constructor-expr.\n+ *\n+ * @since slp3\n+ */\n+public class BLangObjectCtorExpr extends BLangExpression {\n+\n+    public BLangObjectTypeNode objectTypeNode;\n+    public BLangTypeInit typeInit;\n+    public BLangType referenceType;\n+    public boolean isClient;\n+\n+    public BLangObjectCtorExpr(BLangObjectTypeNode objectTypeNode) {\n+        super();\n+        this.objectTypeNode = objectTypeNode;\n+        this.isClient = false;\n+    }\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    /**\n+     * Returns the kind of this node.\n+     *\n+     * @return the kind of this node.\n+     */\n+    @Override\n+    public NodeKind getKind() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MzkwOQ==", "bodyText": "Let's complete these parameters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473943909", "createdAt": "2020-08-20T12:49:46Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0ODQyNg==", "bodyText": "Here there are three possible paths:\n\nclient keyword --> parse the qualifiers\nobject keyword --> parse object\nnon of the above --> recover and re-parse\n\nThus, to handle these three cases we need a switch-case here. Refer parseFunctionBody() for a similar method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473948426", "createdAt": "2020-08-20T12:57:01Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0OTExNw==", "bodyText": "Same as my prev comment in L#4399", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473949117", "createdAt": "2020-08-20T12:58:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MDE2OA==", "bodyText": "Shall we remove these additional newlines?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473950168", "createdAt": "2020-08-20T12:59:55Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4374,6 +4377,64 @@ private STNode parseObjectTypeDescriptor() {\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * Parse object constructor expression.\n+     *\n+     * object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }\n+     * object-member := object-field | method-defn\n+     *\n+     * @param isRhsExpr\n+     * @param annots\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectConstructorExpressionNode(boolean isRhsExpr, STNode annots) {\n+\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+\n+        STNode objectTypeQualifier;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.CLIENT_KEYWORD) {\n+            startContext(ParserRuleContext.CLIENT_KEYWORD);\n+            objectTypeQualifier = parseClientKeyword();\n+            endContext();\n+        } else {\n+            objectTypeQualifier = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectKeyword = parseObjectKeyword();\n+\n+        STNode typeDescriptor;\n+        nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            typeDescriptor = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_NEW_EXPR);\n+        } else {\n+            typeDescriptor = STNodeFactory.createEmptyNode();\n+        }\n+\n+        STNode objectCtorBody = parseObjectConstructorBody();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MTk0NA==", "bodyText": "We can add the package under <packages>. Then we don't have to update this xml for every new test class..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473951944", "createdAt": "2020-08-20T13:02:48Z", "author": {"login": "SupunS"}, "path": "tests/jballerina-unit-test/src/test/resources/testng-new-parser.xml", "diffHunk": "@@ -146,6 +146,7 @@\n             <class name=\"org.ballerinalang.test.statements.transaction.NestedTransactionTest\"/>\n             <class name=\"org.ballerinalang.test.statements.transaction.NestedRetryTransactionStmtsTest\" />\n             <class name=\"org.ballerinalang.test.statements.transaction.SetRollbackOnlyTest\" />\n+            <class name=\"org.ballerinalang.test.expressions.object.ObjectConstructorTest\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNjE0NDc2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-471614476", "createdAt": "2020-08-20T13:29:13Z", "commit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoyOToxM1rOHEBBig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoyOToxM1rOHEBBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3MzEzMA==", "bodyText": "Should the name be \"typeReference\"?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r473973130", "createdAt": "2020-08-20T13:29:13Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1125,6 +1125,56 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ObjectConstructorExpressionNode\",\n+            \"base\": \"ExpressionNode\",\n+            \"kind\": \"OBJECT_CONSTRUCTOR\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"annotations\",\n+                    \"type\": \"AnnotationNode\",\n+                    \"occurrences\": \"MULTIPLE\"\n+                },\n+                {\n+                    \"name\": \"objectTypeQualifier\",\n+                    \"type\": \"Token\",\n+                    \"isOptional\": true\n+                },\n+                {\n+                    \"name\": \"objectKeyword\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"typeDescriptor\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fdf265d65ca68beba9176f89ace237816f4f3"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8eb452e29359a8d8632f7390b8b5c51515558dd", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8eb452e29359a8d8632f7390b8b5c51515558dd", "committedDate": "2020-08-20T14:24:47Z", "message": "Fix first code review suggestion by parser team"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40edc1d7bd229ca8f69813f9dde5b6ab13ad036c", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40edc1d7bd229ca8f69813f9dde5b6ab13ad036c", "committedDate": "2020-08-20T14:27:20Z", "message": "Change testng class to package level in xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc7d3d171dc872437869dc0e005086fc1d45382f", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc7d3d171dc872437869dc0e005086fc1d45382f", "committedDate": "2020-08-21T04:15:01Z", "message": "Fix Parser suggestions for object-constructor-expr\n\nJoined object-constructor-body to object-constructor-expression\nUse existing object-type-qualifiers to parse client token\nChanged type definition to correct type-reference"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMTQyNDA0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-472142404", "createdAt": "2020-08-21T04:50:11Z", "commit": {"oid": "bc7d3d171dc872437869dc0e005086fc1d45382f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDo1MDoxMVrOHEbfbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDo1MDoxMVrOHEbfbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQwNjc2Nw==", "bodyText": "Shall we use parseTypeReference() here rather than directly using parseQualifiedIdentifier()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r474406767", "createdAt": "2020-08-21T04:50:11Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4402,6 +4432,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**\n+     * Parse object constructor expression type qualifiers.\n+     *\n+     * @return Parsed qualifier list with only client or empty node list\n+     */\n+    private STNode parseObjectConstructorExpressionQualifier() {\n+        STNode qualifier;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                qualifier = parseClientKeyword();\n+                break;\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR);\n+                return parseObjectConstructorExpressionQualifier();\n+        }\n+        return qualifier;\n+    }\n+\n+    /**\n+     /**\n+     * Parse object constructor expression type reference.\n+     *\n+     * @return Parsed type reference or empty node\n+     */\n+    private STNode parseObjectConstructorExpressionTypeReference() {\n+        STNode typeReference;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case IDENTIFIER_TOKEN:\n+                typeReference = parseQualifiedIdentifier(ParserRuleContext.TYPE_REFERENCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d3d171dc872437869dc0e005086fc1d45382f"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e07a3c949debfda2c73d0124de3dd071785598ac", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e07a3c949debfda2c73d0124de3dd071785598ac", "committedDate": "2020-08-21T07:01:00Z", "message": "change object-ctor-expr type-ref parsing logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b45c6382bf1051f25e60fda56e62a65e4e285d42", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b45c6382bf1051f25e60fda56e62a65e4e285d42", "committedDate": "2020-08-21T07:02:24Z", "message": "change object_*_expression.bal assertion logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df2ec9db2462323f69b6554eaa7446e660a652a7", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df2ec9db2462323f69b6554eaa7446e660a652a7", "committedDate": "2020-08-24T07:15:21Z", "message": "Disallow type inclusion inside object constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12b6dc008dfccebc56c33489fe5af464b1e33cb7", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/12b6dc008dfccebc56c33489fe5af464b1e33cb7", "committedDate": "2020-08-24T07:25:22Z", "message": "Fix coding style of object ctor negative tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1276780473fa52f93750570cdb880f1bd14b52a3", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1276780473fa52f93750570cdb880f1bd14b52a3", "committedDate": "2020-08-24T10:15:45Z", "message": "Merge branch 'class-change' into krv_object_ctor_expression\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b952e60f39c5fcbfb34628e4009cf6dbc491f924", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b952e60f39c5fcbfb34628e4009cf6dbc491f924", "committedDate": "2020-08-24T10:20:52Z", "message": "Update class changes parseObjectMember api call"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3f77d7530fea4aef7fc6305fe75e75dcf9e8fac", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3f77d7530fea4aef7fc6305fe75e75dcf9e8fac", "committedDate": "2020-08-24T07:33:51Z", "message": "Merge branch 'master' into object_ctor_expression\n\n# Conflicts:\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/sy\nntax/tree/SyntaxKind.java"}, "afterCommit": {"oid": "b952e60f39c5fcbfb34628e4009cf6dbc491f924", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b952e60f39c5fcbfb34628e4009cf6dbc491f924", "committedDate": "2020-08-24T10:20:52Z", "message": "Update class changes parseObjectMember api call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e47f09544553d5c024bf6f30fb26a2f64813a3a6", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e47f09544553d5c024bf6f30fb26a2f64813a3a6", "committedDate": "2020-08-24T10:40:30Z", "message": "Update docs for parseObjectMember"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b482031487decd0a4b6f60cb242924cad33dbf55", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b482031487decd0a4b6f60cb242924cad33dbf55", "committedDate": "2020-08-26T01:17:00Z", "message": "Merge remote-tracking branch 'up/class-change' into krv_object_ctor_expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c46768dd9fbb87d1769a80534b2f1bbbc044bd", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2c46768dd9fbb87d1769a80534b2f1bbbc044bd", "committedDate": "2020-08-26T02:19:57Z", "message": "Add object-constructor-expression parser tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cabe7f37f79679cf84ffd0b21e39d2c03359b94", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7cabe7f37f79679cf84ffd0b21e39d2c03359b94", "committedDate": "2020-08-26T02:32:38Z", "message": "Add object-ctor-expr type-reference parser test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "589d4d42dc3c14c7877862c210f27122d1766e9b", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/589d4d42dc3c14c7877862c210f27122d1766e9b", "committedDate": "2020-08-26T02:58:59Z", "message": "Clean code for object-constructor-expression body\n\nReduce if statement nested levels. Throw an exception for object-type\ninclusion. This is already handled at parser level."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306", "committedDate": "2020-08-26T03:28:25Z", "message": "Add error for type inclusion in object-ctor body"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTkxMDMz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475191033", "createdAt": "2020-08-26T06:38:26Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozODoyNlrOHG93oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjozODoyNlrOHG93oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2NzE2OQ==", "bodyText": "Shouldn't we return a qualifer list?\nList<STNode> qualifiers = new ArrayList<>();\nqualifiers.add(qualifier);\nreturn STNodeFactory.createNodeList(qualifiers);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477067169", "createdAt": "2020-08-26T06:38:26Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4523,6 +4555,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**\n+     * Parse object constructor expression type qualifiers.\n+     *\n+     * @return Parsed qualifier list with only client or empty node list\n+     */\n+    private STNode parseObjectConstructorExpressionQualifier() {\n+        STNode qualifier;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                qualifier = parseClientKeyword();\n+                break;\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR);\n+                return parseObjectConstructorExpressionQualifier();\n+        }\n+        return qualifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTkyMjMx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475192231", "createdAt": "2020-08-26T06:40:49Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MDo0OVrOHG97bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MDo0OVrOHG97bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2ODE0Mg==", "bodyText": "Since we check if the next token is a CLIENT_KEYWORD(in this switch case) and reach here don't need to check it again inside parseClientKeyword() right?. can use consume() directly", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477068142", "createdAt": "2020-08-26T06:40:49Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4523,6 +4555,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**\n+     * Parse object constructor expression type qualifiers.\n+     *\n+     * @return Parsed qualifier list with only client or empty node list\n+     */\n+    private STNode parseObjectConstructorExpressionQualifier() {\n+        STNode qualifier;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                qualifier = parseClientKeyword();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTkyNTkw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475192590", "createdAt": "2020-08-26T06:41:30Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MTozMFrOHG98jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MTozMFrOHG98jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2ODQyOA==", "bodyText": "extra line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477068428", "createdAt": "2020-08-26T06:41:30Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4523,6 +4555,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTkyNzUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475192753", "createdAt": "2020-08-26T06:41:45Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MTo0NVrOHG99CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0MTo0NVrOHG99CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2ODU1Mw==", "bodyText": "extra line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477068553", "createdAt": "2020-08-26T06:41:45Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4523,6 +4555,50 @@ private STNode parseObjectTypeQualifiers() {\n         return parseObjectTypeNextQualifiers(firstQualifier);\n     }\n \n+    /**\n+     /**\n+     * Parse object constructor expression type qualifiers.\n+     *\n+     * @return Parsed qualifier list with only client or empty node list\n+     */\n+    private STNode parseObjectConstructorExpressionQualifier() {\n+        STNode qualifier;\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                qualifier = parseClientKeyword();\n+                break;\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR);\n+                return parseObjectConstructorExpressionQualifier();\n+        }\n+        return qualifier;\n+    }\n+\n+    /**\n+     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTkzMjc1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475193275", "createdAt": "2020-08-26T06:42:41Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0Mjo0MlrOHG9-ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0Mjo0MlrOHG9-ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2ODkzOA==", "bodyText": "extra line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477068938", "createdAt": "2020-08-26T06:42:42Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4488,13 +4493,40 @@ private STNode parseObjectTypeDescriptor() {\n         STNode objectTypeQualifiers = parseObjectTypeQualifiers();\n         STNode objectKeyword = parseObjectKeyword();\n         STNode openBrace = parseOpenBrace();\n-        STNode objectMembers = parseObjectMembers();\n+        STNode objectMembers = parseObjectMembers(false);\n         STNode closeBrace = parseCloseBrace();\n         endContext();\n         return STNodeFactory.createObjectTypeDescriptorNode(objectTypeQualifiers, objectKeyword, openBrace,\n                 objectMembers, closeBrace);\n     }\n \n+    /**\n+     * <p>\n+     * Parse object constructor expression.\n+     * </p>\n+     * <code>object-constructor-expr :=\n+     *    [annots] [client] object [type-reference] {\n+     *       object-member*\n+     *    }</code>\n+     * <code>object-member := object-field | method-defn</code>\n+     *\n+     * @param annots annotations attached to object constructor\n+     * @return Parsed object constructor expression node\n+     */\n+    private STNode parseObjectConstructorExpression(STNode annots) {\n+        startContext(ParserRuleContext.OBJECT_CONSTRUCTOR);\n+        STNode objectTypeQualifier = parseObjectConstructorExpressionQualifier();\n+        STNode objectKeyword = parseObjectKeyword();\n+        STNode typeReference = parseObjectConstructorExpressionTypeReference();\n+        STNode openBrace = parseOpenBrace();\n+        STNode objectMembers = parseObjectMembers(true);\n+        STNode closeBrace = parseCloseBrace();\n+        endContext();\n+        return STNodeFactory.createObjectConstructorExpressionNode(annots,\n+                objectTypeQualifier, objectKeyword, typeReference, openBrace, objectMembers, closeBrace);\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjU3MzEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475257313", "createdAt": "2020-08-26T08:17:31Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjYxMDcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475261073", "createdAt": "2020-08-26T08:22:19Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoyMjoyMFrOHHBPSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoyMjoyMFrOHHBPSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMjM3OA==", "bodyText": "With the introduction of classes BLangObjectTypeNode should not have method implementations, only the method declarations. Shall we move this to a BLangClassDefinition", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477122378", "createdAt": "2020-08-26T08:22:20Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -900,6 +902,95 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    public BLangObjectTypeNode createObjectExpressionBody(NodeList<Node> members) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            NodeKind nodeKind =  bLangNode.getKind();\n+            if (nodeKind == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (!Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (objectTypeNode.initFunction != null) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (bLangFunction.requiredParams.size() != 0) {\n+                    dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                    continue;\n+                }\n+                bLangFunction.objInitFunction = true;\n+                objectTypeNode.initFunction = bLangFunction;\n+            } else if (nodeKind == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (nodeKind == NodeKind.USER_DEFINED_TYPE) {\n+                dlog.error(bLangNode.pos, DiagnosticCode.OBJECT_CTOR_DOES_NOT_SUPPORT_TYPE_REFERENCE_MEMBERS);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+\n+        DiagnosticPos pos = getPositionWithoutMetadata(objectConstructorExpressionNode);\n+\n+        BLangObjectTypeNode objectTypeNode = createObjectExpressionBody(objectConstructorExpressionNode.members());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDU3MjMw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475457230", "createdAt": "2020-08-26T12:54:44Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1NDo0NFrOHHKsIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1NDo0NFrOHHKsIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NzIxOQ==", "bodyText": "Any other method in TreeBuilder doesn't seem to take arguments. I'm not completely sure why it was designed like that but I think it would be better to adhere to that constraint.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477277219", "createdAt": "2020-08-26T12:54:44Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -900,6 +902,95 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    public BLangObjectTypeNode createObjectExpressionBody(NodeList<Node> members) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            NodeKind nodeKind =  bLangNode.getKind();\n+            if (nodeKind == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (!Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (objectTypeNode.initFunction != null) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (bLangFunction.requiredParams.size() != 0) {\n+                    dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                    continue;\n+                }\n+                bLangFunction.objInitFunction = true;\n+                objectTypeNode.initFunction = bLangFunction;\n+            } else if (nodeKind == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (nodeKind == NodeKind.USER_DEFINED_TYPE) {\n+                dlog.error(bLangNode.pos, DiagnosticCode.OBJECT_CTOR_DOES_NOT_SUPPORT_TYPE_REFERENCE_MEMBERS);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+\n+        DiagnosticPos pos = getPositionWithoutMetadata(objectConstructorExpressionNode);\n+\n+        BLangObjectTypeNode objectTypeNode = createObjectExpressionBody(objectConstructorExpressionNode.members());\n+        objectTypeNode.pos = pos;\n+        BLangObjectConstructorExpression objectCtorExpression = TreeBuilder.createObjectCtorExpression(objectTypeNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDYwMTQ3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475460147", "createdAt": "2020-08-26T12:58:11Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1ODoxMVrOHHK02A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1ODoxMVrOHHK02A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3OTQ0OA==", "bodyText": "Shall we add a comment explaining that there is a desugaring happening here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477279448", "createdAt": "2020-08-26T12:58:11Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -900,6 +902,95 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    public BLangObjectTypeNode createObjectExpressionBody(NodeList<Node> members) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            NodeKind nodeKind =  bLangNode.getKind();\n+            if (nodeKind == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (!Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (objectTypeNode.initFunction != null) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (bLangFunction.requiredParams.size() != 0) {\n+                    dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                    continue;\n+                }\n+                bLangFunction.objInitFunction = true;\n+                objectTypeNode.initFunction = bLangFunction;\n+            } else if (nodeKind == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (nodeKind == NodeKind.USER_DEFINED_TYPE) {\n+                dlog.error(bLangNode.pos, DiagnosticCode.OBJECT_CTOR_DOES_NOT_SUPPORT_TYPE_REFERENCE_MEMBERS);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDYyMzcw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#pullrequestreview-475462370", "createdAt": "2020-08-26T13:00:42Z", "commit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzowMDo0MlrOHHK7Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzowMDo0MlrOHHK7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4MTExMA==", "bodyText": "no need to break the line I think", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25302#discussion_r477281110", "createdAt": "2020-08-26T13:00:42Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -900,6 +902,95 @@ public BLangNode transform(ObjectTypeDescriptorNode objTypeDescNode) {\n         return deSugarTypeAsUserDefType(objectTypeNode);\n     }\n \n+    public BLangObjectTypeNode createObjectExpressionBody(NodeList<Node> members) {\n+        BLangObjectTypeNode objectTypeNode = (BLangObjectTypeNode) TreeBuilder.createObjectTypeNode();\n+        objectTypeNode.flagSet.add(Flag.ANONYMOUS);\n+\n+        for (Node node : members) {\n+            BLangNode bLangNode = node.apply(this);\n+            NodeKind nodeKind =  bLangNode.getKind();\n+            if (nodeKind == NodeKind.FUNCTION) {\n+                BLangFunction bLangFunction = (BLangFunction) bLangNode;\n+                bLangFunction.attachedFunction = true;\n+                bLangFunction.flagSet.add(Flag.ATTACHED);\n+                if (!Names.USER_DEFINED_INIT_SUFFIX.value.equals(bLangFunction.name.value)) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (objectTypeNode.initFunction != null) {\n+                    objectTypeNode.addFunction(bLangFunction);\n+                    continue;\n+                }\n+                if (bLangFunction.requiredParams.size() != 0) {\n+                    dlog.error(bLangFunction.pos, DiagnosticCode.OBJECT_CTOR_INIT_CANNOT_HAVE_PARAMETERS);\n+                    continue;\n+                }\n+                bLangFunction.objInitFunction = true;\n+                objectTypeNode.initFunction = bLangFunction;\n+            } else if (nodeKind == NodeKind.VARIABLE) {\n+                objectTypeNode.addField((BLangSimpleVariable) bLangNode);\n+            } else if (nodeKind == NodeKind.USER_DEFINED_TYPE) {\n+                dlog.error(bLangNode.pos, DiagnosticCode.OBJECT_CTOR_DOES_NOT_SUPPORT_TYPE_REFERENCE_MEMBERS);\n+            }\n+        }\n+\n+        objectTypeNode.isAnonymous = true;\n+        return objectTypeNode;\n+    }\n+\n+    @Override\n+    public BLangNode transform(ObjectConstructorExpressionNode objectConstructorExpressionNode) {\n+\n+        DiagnosticPos pos = getPositionWithoutMetadata(objectConstructorExpressionNode);\n+\n+        BLangObjectTypeNode objectTypeNode = createObjectExpressionBody(objectConstructorExpressionNode.members());\n+        objectTypeNode.pos = pos;\n+        BLangObjectConstructorExpression objectCtorExpression = TreeBuilder.createObjectCtorExpression(objectTypeNode);\n+        objectCtorExpression.pos = pos;\n+\n+        Optional<TypeDescriptorNode> typeReference = objectConstructorExpressionNode.typeReference();\n+        typeReference.ifPresent(typeReferenceNode -> {\n+            objectCtorExpression.addTypeReference(createTypeNode(typeReferenceNode));\n+        });\n+\n+        BLangTypeDefinition bLTypeDef = createTypeDefinitionWithTypeNode(objectTypeNode);\n+\n+        NodeList<Token> objectConstructorQualifierList = objectConstructorExpressionNode.objectTypeQualifiers();\n+        for (Token qualifier : objectConstructorQualifierList) {\n+            if (qualifier.kind() == SyntaxKind.CLIENT_KEYWORD) {\n+                objectTypeNode.flagSet.add(Flag.CLIENT);\n+                objectCtorExpression.isClient = true;\n+            } else {\n+                throw new RuntimeException(\"Syntax kind is not supported: \" + qualifier.kind());\n+            }\n+        }\n+        bLTypeDef.annAttachments = applyAll(objectConstructorExpressionNode.annotations());\n+        addToTop(bLTypeDef);\n+\n+        BLangIdentifier identifier = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n+        BLangUserDefinedType userDefinedType = createUserDefinedType(pos,\n+                identifier, bLTypeDef.name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b96cbf2d6bd8a5c4da44dd1015283fd9ddf306"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4874, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}