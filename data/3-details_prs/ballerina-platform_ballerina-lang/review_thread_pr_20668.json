{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NjM1Nzcy", "number": 20668, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTo0MjozOVrODZGnLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNToxNDoyNVrODaDomQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjQ5MzI3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTo0MjozOVrOFfT9DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNDowMjoxNlrOFgyTFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NzEwMA==", "bodyText": "What if we define throws since this a public method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r368377100", "createdAt": "2020-01-20T05:42:39Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLText;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * XML Serializer for Ballerina XML value trees.\n+ *\n+ * @since 1.1.0\n+ */\n+public class BallerinaXMLSerializer extends OutputStream {\n+    private static final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlStreamWriter;\n+    private Deque<Set<String>> parentNSSet;\n+    private int nsNumber;\n+\n+\n+    public BallerinaXMLSerializer(OutputStream outputStream) {\n+        try {\n+            xmlStreamWriter = xmlOutputFactory.createXMLStreamWriter(outputStream);\n+            parentNSSet = new ArrayDeque<>();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(int b) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public void flush() {\n+        try {\n+            xmlStreamWriter.flush();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        try {\n+            xmlStreamWriter.close();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    public void write(BXML xmlValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dccefbf59d4dc59b53ab828231dfd05b0073ae93"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMjgzNg==", "bodyText": "It doesn't throw any checked exceptions, in that case, do we need to do that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369922836", "createdAt": "2020-01-23T04:02:16Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLText;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * XML Serializer for Ballerina XML value trees.\n+ *\n+ * @since 1.1.0\n+ */\n+public class BallerinaXMLSerializer extends OutputStream {\n+    private static final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlStreamWriter;\n+    private Deque<Set<String>> parentNSSet;\n+    private int nsNumber;\n+\n+\n+    public BallerinaXMLSerializer(OutputStream outputStream) {\n+        try {\n+            xmlStreamWriter = xmlOutputFactory.createXMLStreamWriter(outputStream);\n+            parentNSSet = new ArrayDeque<>();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(int b) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public void flush() {\n+        try {\n+            xmlStreamWriter.flush();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        try {\n+            xmlStreamWriter.close();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    public void write(BXML xmlValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NzEwMA=="}, "originalCommit": {"oid": "dccefbf59d4dc59b53ab828231dfd05b0073ae93"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjQ2NzkzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTowNDo0MFrOFgy4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTowNDo0MFrOFgy4VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMjM3Mw==", "bodyText": "Shall we use constants for \"xmlns\", \"\", \"}\", etc.?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369932373", "createdAt": "2020-01-23T05:04:40Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLText;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * XML Serializer for Ballerina XML value trees.\n+ *\n+ * @since 1.1.0\n+ */\n+public class BallerinaXMLSerializer extends OutputStream {\n+    private static final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlStreamWriter;\n+    private Deque<Set<String>> parentNSSet;\n+    private int nsNumber;\n+\n+\n+    public BallerinaXMLSerializer(OutputStream outputStream) {\n+        try {\n+            xmlStreamWriter = xmlOutputFactory.createXMLStreamWriter(outputStream);\n+            parentNSSet = new ArrayDeque<>();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(int b) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public void flush() {\n+        try {\n+            xmlStreamWriter.flush();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        try {\n+            xmlStreamWriter.close();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    public void write(BXML xmlValue) {\n+        if (xmlValue == null) {\n+            return;\n+        }\n+        try {\n+            switch (xmlValue.getNodeType()) {\n+                case SEQUENCE:\n+                    writeSeq((XMLSequence) xmlValue);\n+                    break;\n+                case ELEMENT:\n+                    writeElement((XMLItem) xmlValue);\n+                    break;\n+                case TEXT:\n+                    writeXMLText((XMLText) xmlValue);\n+                    break;\n+                case COMMENT:\n+                    writeXMLComment((XMLComment) xmlValue);\n+                    break;\n+                case PI:\n+                    writeXMLPI((XMLPi) xmlValue);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unexpected value: \" + xmlValue.getNodeType());\n+            }\n+        } catch (XMLStreamException e) {\n+            // todo: need to use these for all the errors that need to be panics\n+            throw new ErrorValue(e.getMessage(), null);\n+        }\n+    }\n+\n+    private void writeXMLPI(XMLPi xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeProcessingInstruction(xmlValue.getTarget(), xmlValue.getData());\n+    }\n+\n+    private void writeXMLComment(XMLComment xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeComment(xmlValue.getTextValue());\n+\n+    }\n+\n+    private void writeXMLText(XMLText xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeCharacters(xmlValue.getTextValue());\n+    }\n+\n+    private void writeElement(XMLItem xmlValue) throws XMLStreamException {\n+        // Setup namespace hierarchy\n+        Set<String> prevNSSet = this.parentNSSet.peek();\n+        HashSet<String> currentNSLevel = prevNSSet == null ? new HashSet<>() : new HashSet<>(prevNSSet);\n+        this.parentNSSet.push(currentNSLevel);\n+\n+        Map<String, String> nsPrefixMap = prefixToNSUri(xmlValue);\n+        QName qName = xmlValue.getQName();\n+        writeStartElement(qName, nsPrefixMap, currentNSLevel);\n+        setMissingElementPrefix(currentNSLevel, nsPrefixMap, qName);\n+\n+        // Write namespaces\n+        writeNamespaceAttributes(currentNSLevel, nsPrefixMap);\n+\n+        // Write attributes\n+        writeAttributes(xmlValue, currentNSLevel);\n+\n+        xmlValue.getChildrenSeq().serialize(this);\n+        xmlStreamWriter.writeEndElement();\n+        // Reset namespace decl hierarchy for this node.\n+        this.parentNSSet.pop();\n+    }\n+\n+    private String setDefaultNamespace(Map<String, String> nsPrefixMap, QName qName, HashSet<String> currentNSLevel)\n+            throws XMLStreamException {\n+        boolean elementNSUsageFoundInAttribute = false;\n+        for (Map.Entry<String, String> entry : nsPrefixMap.entrySet()) {\n+            if (entry.getValue().equals(qName.getNamespaceURI())) {\n+                elementNSUsageFoundInAttribute = true;\n+            }\n+            if (entry.getKey().isEmpty()) {\n+                xmlStreamWriter.setDefaultNamespace(entry.getValue());\n+                return entry.getValue();\n+            }\n+        }\n+        if (!elementNSUsageFoundInAttribute && !qName.getNamespaceURI().isEmpty()) {\n+            xmlStreamWriter.setDefaultNamespace(qName.getNamespaceURI());\n+            return qName.getNamespaceURI();\n+        }\n+\n+        // Undeclare default namespace for this element, if outer elements have redefined default ns and this\n+        // element doesn't have NS URI in it's name.\n+        if ((qName.getNamespaceURI() == null || qName.getNamespaceURI().isEmpty())) {\n+            for (String s : currentNSLevel) {\n+                if (s.startsWith(\"xmlns\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjQ2OTIwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLTreeBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTowNTo1NlrOFgy5Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTowNTo1NlrOFgy5Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMjU3NA==", "bodyText": "Versions need to be updated?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369932574", "createdAt": "2020-01-23T05:05:56Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLTreeBuilder.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+\n+import static javax.xml.stream.XMLStreamConstants.CDATA;\n+import static javax.xml.stream.XMLStreamConstants.CHARACTERS;\n+import static javax.xml.stream.XMLStreamConstants.COMMENT;\n+import static javax.xml.stream.XMLStreamConstants.DTD;\n+import static javax.xml.stream.XMLStreamConstants.END_DOCUMENT;\n+import static javax.xml.stream.XMLStreamConstants.END_ELEMENT;\n+import static javax.xml.stream.XMLStreamConstants.PROCESSING_INSTRUCTION;\n+import static javax.xml.stream.XMLStreamConstants.START_ELEMENT;\n+\n+/**\n+ * XML tree builder for Ballerina xml node structure using {@code XMLStreamReader}.\n+ *\n+ * @since 1.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjQ3MDcwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLTreeBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTowNzozNVrOFgy6Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTowNzozNVrOFgy6Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMjgyNg==", "bodyText": "I guess the reason should be {ballerina/lang.xml}XxxError", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369932826", "createdAt": "2020-01-23T05:07:35Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLTreeBuilder.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+\n+import static javax.xml.stream.XMLStreamConstants.CDATA;\n+import static javax.xml.stream.XMLStreamConstants.CHARACTERS;\n+import static javax.xml.stream.XMLStreamConstants.COMMENT;\n+import static javax.xml.stream.XMLStreamConstants.DTD;\n+import static javax.xml.stream.XMLStreamConstants.END_DOCUMENT;\n+import static javax.xml.stream.XMLStreamConstants.END_ELEMENT;\n+import static javax.xml.stream.XMLStreamConstants.PROCESSING_INSTRUCTION;\n+import static javax.xml.stream.XMLStreamConstants.START_ELEMENT;\n+\n+/**\n+ * XML tree builder for Ballerina xml node structure using {@code XMLStreamReader}.\n+ *\n+ * @since 1.1.0\n+ */\n+public class XMLTreeBuilder {\n+\n+    // XMLInputFactory2\n+    private static final XMLInputFactory xmlInputFactory;\n+\n+    static {\n+        xmlInputFactory = XMLInputFactory.newInstance();\n+        xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\n+    }\n+\n+    private XMLStreamReader xmlStreamReader;\n+    private Map<String, String> namespaces; // xml ns declarations from Bal source [xmlns \"http://ns.com\" as ns]\n+    private Deque<XMLSequence> seqDeque;\n+    private Deque<List<BXML>> siblingDeque; // we can remove this by opening up children list in XMLSeq\n+\n+    public XMLTreeBuilder(String str) {\n+        this(new StringReader(str));\n+    }\n+\n+    public XMLTreeBuilder(Reader stringReader) {\n+        namespaces = new HashMap<>();\n+        seqDeque = new ArrayDeque<>();\n+        siblingDeque = new ArrayDeque<>();\n+        try {\n+            xmlStreamReader = xmlInputFactory.createXMLStreamReader(stringReader);\n+        } catch (XMLStreamException e) {\n+            handleXMLStreamException(e);\n+        }\n+    }\n+\n+    private void handleXMLStreamException(Exception e) {\n+        // todo: do e.getMessage contain all the information? verify\n+        throw new BallerinaException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjQ3NTQyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTowOTozMlrOFgy8jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTowOTozMlrOFgy8jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMzQ1Mg==", "bodyText": "Error reasons need to be fixed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369933452", "createdAt": "2020-01-23T05:09:32Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLText;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * XML Serializer for Ballerina XML value trees.\n+ *\n+ * @since 1.1.0\n+ */\n+public class BallerinaXMLSerializer extends OutputStream {\n+    private static final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlStreamWriter;\n+    private Deque<Set<String>> parentNSSet;\n+    private int nsNumber;\n+\n+\n+    public BallerinaXMLSerializer(OutputStream outputStream) {\n+        try {\n+            xmlStreamWriter = xmlOutputFactory.createXMLStreamWriter(outputStream);\n+            parentNSSet = new ArrayDeque<>();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjQ3ODE4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNToxMDoxOVrOFgy99Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNToxMDoxOVrOFgy99Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMzgxMw==", "bodyText": "Extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369933813", "createdAt": "2020-01-23T05:10:19Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLText;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * XML Serializer for Ballerina XML value trees.\n+ *\n+ * @since 1.1.0\n+ */\n+public class BallerinaXMLSerializer extends OutputStream {\n+    private static final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlStreamWriter;\n+    private Deque<Set<String>> parentNSSet;\n+    private int nsNumber;\n+\n+\n+    public BallerinaXMLSerializer(OutputStream outputStream) {\n+        try {\n+            xmlStreamWriter = xmlOutputFactory.createXMLStreamWriter(outputStream);\n+            parentNSSet = new ArrayDeque<>();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(int b) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public void flush() {\n+        try {\n+            xmlStreamWriter.flush();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        try {\n+            xmlStreamWriter.close();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    public void write(BXML xmlValue) {\n+        if (xmlValue == null) {\n+            return;\n+        }\n+        try {\n+            switch (xmlValue.getNodeType()) {\n+                case SEQUENCE:\n+                    writeSeq((XMLSequence) xmlValue);\n+                    break;\n+                case ELEMENT:\n+                    writeElement((XMLItem) xmlValue);\n+                    break;\n+                case TEXT:\n+                    writeXMLText((XMLText) xmlValue);\n+                    break;\n+                case COMMENT:\n+                    writeXMLComment((XMLComment) xmlValue);\n+                    break;\n+                case PI:\n+                    writeXMLPI((XMLPi) xmlValue);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unexpected value: \" + xmlValue.getNodeType());\n+            }\n+        } catch (XMLStreamException e) {\n+            // todo: need to use these for all the errors that need to be panics\n+            throw new ErrorValue(e.getMessage(), null);\n+        }\n+    }\n+\n+    private void writeXMLPI(XMLPi xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeProcessingInstruction(xmlValue.getTarget(), xmlValue.getData());\n+    }\n+\n+    private void writeXMLComment(XMLComment xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeComment(xmlValue.getTextValue());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjQ5MDU0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLNonElementItem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNToxMzo1M1rOFgzEoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTozMzoxMFrOFiW_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzNTUyMQ==", "bodyText": "Do we need this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369935521", "createdAt": "2020-01-23T05:13:53Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLNonElementItem.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm.values;\n+\n+import org.apache.axiom.om.OMNode;\n+import org.ballerinalang.jvm.BallerinaXMLSerializer;\n+import org.ballerinalang.jvm.XMLNodeType;\n+import org.ballerinalang.jvm.values.api.BMap;\n+import org.ballerinalang.jvm.values.api.BXML;\n+import org.ballerinalang.jvm.values.freeze.Status;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import static org.ballerinalang.jvm.util.BLangConstants.STRING_NULL_VALUE;\n+\n+/**\n+ * Functionality common to PI, COMMENT and TEXT nodes.\n+ *\n+ * @since 1.2.0\n+ */\n+public abstract class XMLNonElementItem extends XMLValue {\n+    @Override\n+    public abstract boolean isEmpty();\n+\n+    @Override\n+    public boolean isSingleton() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getItemType() {\n+        return getNodeType().value();\n+    }\n+\n+    @Override\n+    public String getElementName() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public abstract String getTextValue();\n+\n+    @Override\n+    public String getAttribute(String localName, String namespace) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getAttribute(String localName, String namespace, String prefix) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setAttribute(String localName, String namespace, String prefix, String value) {\n+\n+    }\n+\n+    @Override\n+    public MapValue<String, String> getAttributesMap() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setAttributes(BMap<String, ?> attributes) {\n+\n+    }\n+\n+    @Override\n+    public BXML elements() {\n+        return new XMLSequence();\n+    }\n+\n+    @Override\n+    public BXML elements(String qname) {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLValue children() {\n+        return new XMLSequence();\n+    }\n+\n+    @Override\n+    public XMLValue children(String qname) {\n+        return new XMLSequence();\n+    }\n+\n+    @Override\n+    public void setChildren(BXML seq) {\n+    }\n+\n+    @Override\n+    @Deprecated\n+    public void addChildren(BXML seq) {\n+    }\n+\n+    @Override\n+    public BXML strip() {\n+        return new XMLText(\"\");\n+    }\n+\n+    @Override\n+    public abstract XMLNodeType getNodeType();\n+\n+    @Override\n+    public BXML slice(long startIndex, long endIndex) {\n+        return null;\n+    }\n+\n+    @Override\n+    public BXML descendants(String qname) {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLValue getItem(int index) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object copy(Map<Object, Object> refs) {\n+        // XMLContentHolderItem is immutable\n+        return this;\n+    }\n+\n+    @Override\n+    public Object frozenCopy(Map<Object, Object> refs) {\n+        return this;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return 1;\n+    }\n+\n+    @Override\n+    public void build() {\n+\n+    }\n+\n+    @Override\n+    public void removeAttribute(String qname) {\n+\n+    }\n+\n+    @Override\n+    @Deprecated\n+    public void removeChildren(String qname) {\n+\n+    }\n+\n+    @Override\n+    public abstract OMNode value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MjU2Ng==", "bodyText": "This is still being used for testing (Jvm values to BVM values conversion)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r371572566", "createdAt": "2020-01-28T01:33:10Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLNonElementItem.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm.values;\n+\n+import org.apache.axiom.om.OMNode;\n+import org.ballerinalang.jvm.BallerinaXMLSerializer;\n+import org.ballerinalang.jvm.XMLNodeType;\n+import org.ballerinalang.jvm.values.api.BMap;\n+import org.ballerinalang.jvm.values.api.BXML;\n+import org.ballerinalang.jvm.values.freeze.Status;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import static org.ballerinalang.jvm.util.BLangConstants.STRING_NULL_VALUE;\n+\n+/**\n+ * Functionality common to PI, COMMENT and TEXT nodes.\n+ *\n+ * @since 1.2.0\n+ */\n+public abstract class XMLNonElementItem extends XMLValue {\n+    @Override\n+    public abstract boolean isEmpty();\n+\n+    @Override\n+    public boolean isSingleton() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getItemType() {\n+        return getNodeType().value();\n+    }\n+\n+    @Override\n+    public String getElementName() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public abstract String getTextValue();\n+\n+    @Override\n+    public String getAttribute(String localName, String namespace) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getAttribute(String localName, String namespace, String prefix) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setAttribute(String localName, String namespace, String prefix, String value) {\n+\n+    }\n+\n+    @Override\n+    public MapValue<String, String> getAttributesMap() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setAttributes(BMap<String, ?> attributes) {\n+\n+    }\n+\n+    @Override\n+    public BXML elements() {\n+        return new XMLSequence();\n+    }\n+\n+    @Override\n+    public BXML elements(String qname) {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLValue children() {\n+        return new XMLSequence();\n+    }\n+\n+    @Override\n+    public XMLValue children(String qname) {\n+        return new XMLSequence();\n+    }\n+\n+    @Override\n+    public void setChildren(BXML seq) {\n+    }\n+\n+    @Override\n+    @Deprecated\n+    public void addChildren(BXML seq) {\n+    }\n+\n+    @Override\n+    public BXML strip() {\n+        return new XMLText(\"\");\n+    }\n+\n+    @Override\n+    public abstract XMLNodeType getNodeType();\n+\n+    @Override\n+    public BXML slice(long startIndex, long endIndex) {\n+        return null;\n+    }\n+\n+    @Override\n+    public BXML descendants(String qname) {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLValue getItem(int index) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object copy(Map<Object, Object> refs) {\n+        // XMLContentHolderItem is immutable\n+        return this;\n+    }\n+\n+    @Override\n+    public Object frozenCopy(Map<Object, Object> refs) {\n+        return this;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return 1;\n+    }\n+\n+    @Override\n+    public void build() {\n+\n+    }\n+\n+    @Override\n+    public void removeAttribute(String qname) {\n+\n+    }\n+\n+    @Override\n+    @Deprecated\n+    public void removeChildren(String qname) {\n+\n+    }\n+\n+    @Override\n+    public abstract OMNode value();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzNTUyMQ=="}, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjQ5MTEzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLText.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNToxNDoyNVrOFgzE9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNToxNDoyNVrOFgzE9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzNTYwNA==", "bodyText": "formatting issue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369935604", "createdAt": "2020-01-23T05:14:25Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLText.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm.values;\n+\n+import org.apache.axiom.om.OMNode;\n+import org.apache.axiom.om.impl.llom.CharacterDataImpl;\n+import org.ballerinalang.jvm.XMLNodeType;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.util.NoSuchElementException;\n+\n+import static org.ballerinalang.jvm.util.BLangConstants.STRING_NULL_VALUE;\n+\n+/**\n+ * XML nodes containing atomic content such as text, comment and processing instructions.\n+ *\n+ * @since 1.2.0\n+ */\n+public class XMLText extends XMLNonElementItem {\n+\n+    private String data;\n+\n+    public XMLText(String data) {\n+        // data is the content of xml comment or text node\n+        this.data = data;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        if (getNodeType() == XMLNodeType.TEXT) {\n+            return data.isEmpty();\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String getItemType() {\n+        return getNodeType().value();\n+    }\n+\n+    @Override\n+    public String getTextValue() {\n+        return data;\n+    }\n+\n+    @Override\n+    public BXML strip() {\n+        if (!data.trim().isEmpty()) {\n+            return this;\n+        }\n+        return new XMLText(\"\");\n+    }\n+\n+    @Override\n+    public XMLNodeType getNodeType() {\n+        return XMLNodeType.TEXT;\n+    }\n+\n+    @Override\n+    public OMNode value() {\n+            CharacterDataImpl characterData = new CharacterDataImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 524, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}