{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NjUyMzI3", "number": 24251, "title": "Improve unit test cases for annotation with readonly types", "bodyText": "Purpose\nFixes #24245\n\n\n add readonly type test cases\nThere are already usages for read-only values\nrefer comment: #23473 (review)\nObject read-only check for annotations is skipped for now. This issue is created to add unit test cases for other scenarios.\n\n\n We can do regex expression check for unit test cases from ballerina side as well.\n#23473 (comment)\n\n\n Fix PR suggestion:\n#23473 (comment)\n\n\n Add a test case to reflect runtime changes.\nWe have override copy, freezeDirect like methods to allow Abstract objects for cloneReadOnly.\n\n\nRemarks\nThere was a crash which also gets fixed by this.\n[2020-06-17 12:34:27,745] SEVERE {b7a.log.crash} - function () cannot be immutable\norg.ballerinalang.jvm.util.exceptions.BallerinaException: function () cannot be immutable\n\tat org.ballerinalang.jvm.types.BType.getImmutableType(BType.java:157)\n\tat org.ballerinalang.jvm.values.ReadOnlyUtils.setImmutableIntersectionType(ReadOnlyUtils.java:100)\n\tat org.ballerinalang.jvm.values.ReadOnlyUtils.getImmutableType(ReadOnlyUtils.java:95)\n\tat org.ballerinalang.jvm.values.ReadOnlyUtils.setImmutableIntersectionType(ReadOnlyUtils.java:172)\n\tat org.ballerinalang.jvm.values.ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(ReadOnlyUtils.java:87)\n\tat org.ballerinalang.jvm.values.MapValueImpl.freezeDirect(MapValueImpl.java:435)\n\tat org.ballerinalang.jvm.values.MapValueImpl.frozenCopy(MapValueImpl.java:405)\n\tat org.ballerinalang.jvm.values.CloneUtils.cloneReadOnly(CloneUtils.java:67)\n\tat org.ballerinalang.langlib.value.CloneReadOnly.cloneReadOnly(CloneReadOnly.java:45)\n\tat ballerina.lang_value.1_0_0.value.cloneReadOnly(value.bal:39)\n\tat annotation_readonly_types.$annot_func$0(annotation_readonly_types.bal:53)\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-06-17T07:19:10Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251", "merged": true, "mergeCommit": {"oid": "47db2926584d942074c331017d6c9c0df161d63e"}, "closed": true, "closedAt": "2020-06-17T10:39:14Z", "author": {"login": "KRVPerera"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsEEg3AH2gAyNDM1NjUyMzI3OmIwYTRiYThiNzhjZDRmNmVkZDliYzhlOTVlMTFhZTk4MGFjNGVkZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsHBR6gFqTQzMjI1NDU3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b0a4ba8b78cd4f6edd9bc8e95e11ae980ac4ede0", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0a4ba8b78cd4f6edd9bc8e95e11ae980ac4ede0", "committedDate": "2020-06-17T06:43:18Z", "message": "Check tests runtime exceptions from Ballerina"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3e15eebb751a3c45237b446fea1e7c48483183e", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b3e15eebb751a3c45237b446fea1e7c48483183e", "committedDate": "2020-06-17T07:15:56Z", "message": "Override getImmutableType for BFunctionType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6f42f2d3af6ebe1720c67ec5eb8bcb56fb68cd4", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6f42f2d3af6ebe1720c67ec5eb8bcb56fb68cd4", "committedDate": "2020-06-17T07:16:44Z", "message": "Add annotation readonly types test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b744315819a5e6b0b33e75f45c38aa4926fa9dc8", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b744315819a5e6b0b33e75f45c38aa4926fa9dc8", "committedDate": "2020-06-17T07:27:56Z", "message": "Add FUNCTION_POINTER_TAG as inherently immutable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTM2NzYy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#pullrequestreview-432136762", "createdAt": "2020-06-17T07:39:41Z", "commit": {"oid": "b744315819a5e6b0b33e75f45c38aa4926fa9dc8"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTQzMDY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#pullrequestreview-432143066", "createdAt": "2020-06-17T07:48:14Z", "commit": {"oid": "b744315819a5e6b0b33e75f45c38aa4926fa9dc8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0ODoxNFrOGk5zGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0ODoxNFrOGk5zGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODg4OA==", "bodyText": "extra indentation?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441348888", "createdAt": "2020-06-17T07:48:14Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_access_negative.bal", "diffHunk": "@@ -35,11 +35,21 @@ public type T1 record {\n T1 a = { name: \"John\" };\n \n function testRecordTypeAnnotationReadonlyValueEdit()  {\n-    typedesc<any> t = typeof a;\n-    Annot? annot = t.@v1;\n-    if (annot is Annot) {\n-        annot.foo = \"EDITED\";\n-    }\n+    var fn = function() {\n+        typedesc<any> t = typeof a;\n+        Annot? annot = t.@v1;\n+        if (annot is Annot) {\n+            annot.foo = \"EDITED\";\n+        }\n+    };\n+\n+    error? res = trap fn();\n+        assertEquality(true, res is error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b744315819a5e6b0b33e75f45c38aa4926fa9dc8"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/08560d977755e6b552e9d355d101f40a5fed4292", "committedDate": "2020-06-17T07:58:55Z", "message": "Fix indentation of annotation_access_negative.bal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTY3NTk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#pullrequestreview-432167596", "createdAt": "2020-06-17T08:20:11Z", "commit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTcwMzUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#pullrequestreview-432170353", "createdAt": "2020-06-17T08:23:47Z", "commit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyMzo0OFrOGk7GEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyMzo0OFrOGk7GEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MDEzMQ==", "bodyText": "Do we need this main function?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441370131", "createdAt": "2020-06-17T08:23:48Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_access_negative.bal", "diffHunk": "@@ -65,9 +85,44 @@ function testAnnotationOnObjectTypeReadonlyValueEdit() {\n function funcWithAnnots() {}\n \n function testAnnotationOnFunctionTypeReadonlyValueEdit() {\n-    typedesc<any> t = typeof funcWithAnnots;\n-    Annot? annot = t.@v3;\n-    if (annot is Annot) {\n-        annot.foo = \"EDITED\";\n+    var fn = function() {\n+        typedesc<any> t = typeof funcWithAnnots;\n+        Annot? annot = t.@v3;\n+        if (annot is Annot) {\n+            annot.foo = \"EDITED\";\n+        }\n+    };\n+\n+    error? res = trap fn();\n+    assertTrue(res is error);\n+\n+    error resError = <error> res;\n+    assertEquality(\"{ballerina/lang.map}InvalidUpdate\", resError.message());\n+    assertEquality(\"Invalid update of record field: modification not allowed on readonly value\",\n+                   resError.detail()[\"message\"].toString());\n+}\n+\n+public function main() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTcyMjI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#pullrequestreview-432172226", "createdAt": "2020-06-17T08:26:14Z", "commit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyNjoxNFrOGk7LuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyNjoxNFrOGk7LuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MTU3Nw==", "bodyText": "Does this compile? Can't seem to find testTypeAnnotAccess1.\nWe don't need this main function anyway right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441371577", "createdAt": "2020-06-17T08:26:14Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_readonly_types.bal", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'object as lang;\n+import ballerina/java;\n+\n+type Annot record {|\n+   service myService;\n+   object {} myObject;\n+   handle myHandle;\n+   typedesc myTypedesc;\n+   function () myFunction;\n+|};\n+\n+public annotation Annot v1 on type;\n+\n+string strValue = \"v1 value\";\n+\n+type Dummy abstract object {};\n+\n+type DummyImpl object {\n+    *Dummy;\n+};\n+\n+public function newArrayList() returns handle = @java:Constructor {\n+    class:\"java.util.ArrayList\"\n+} external;\n+\n+handle dummyHandle = newArrayList();\n+\n+typedesc<any> T = typeof strValue;\n+\n+var fn = function () {\n+    int x = 5;\n+    int y = 4;\n+};\n+\n+DummyImpl dummyImpl = new();\n+\n+@v1 {\n+    myService: ser,\n+    myObject: dummyImpl,\n+    myHandle: dummyHandle,\n+    myTypedesc: T,\n+    myFunction: fn\n+}\n+public type T1 record {\n+    string name;\n+};\n+\n+T1 a = { name: \"John\" };\n+\n+function testReadonlyTypeAnnotationAttachment()  {\n+    typedesc<any> t = typeof a;\n+    Annot? annot = t.@v1;\n+    assertTrue(annot is Annot);\n+}\n+\n+public function main() {\n+    testTypeAnnotAccess1();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5604d29b2fc131265541d30ea1335c316fb8fe82", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5604d29b2fc131265541d30ea1335c316fb8fe82", "committedDate": "2020-06-17T08:34:54Z", "message": "Fix unit test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c755378fc2d6ef9d066080a44137f967bd8df129", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c755378fc2d6ef9d066080a44137f967bd8df129", "committedDate": "2020-06-17T08:26:20Z", "message": "Remove main function as run by test suite"}, "afterCommit": {"oid": "5604d29b2fc131265541d30ea1335c316fb8fe82", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5604d29b2fc131265541d30ea1335c316fb8fe82", "committedDate": "2020-06-17T08:34:54Z", "message": "Fix unit test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTgxNzM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#pullrequestreview-432181734", "createdAt": "2020-06-17T08:38:15Z", "commit": {"oid": "5604d29b2fc131265541d30ea1335c316fb8fe82"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a893b9a3da8b37aef0dc69f5698cf7fd491359c", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a893b9a3da8b37aef0dc69f5698cf7fd491359c", "committedDate": "2020-06-17T09:08:50Z", "message": "Fix code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjU0NTc0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#pullrequestreview-432254574", "createdAt": "2020-06-17T10:09:29Z", "commit": {"oid": "7a893b9a3da8b37aef0dc69f5698cf7fd491359c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4278, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}