{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4Mzk0MTM4", "number": 25021, "title": "Add missing contexts for resumeParsing, split resumeParsing Method and resolve parsing conflicts", "bodyText": "Purpose\nAdded missing contexts for resumeParsing and added tests to verify those. Split resumeParsing Method.\nResolve conflicts in resumeParsing. Fix parseTypedBindingPatternOrExprRhs.\nFixes #23937\nFixes #24651\nApproach\nAdded the missing cases.\nSplit the resumeParsing method as Top level nodes, statements, keywords, expresssionsandActions and others.\nResolved conflicts in the resumeParsing method.\nFixed how parseTypedBindingPatternOrExprRhs handles SyntaxKind.NONE returned by the error handler.\nSamples\n\nn/a\n\nRemarks\n\nn/a\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-07-29T12:04:01Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021", "merged": true, "mergeCommit": {"oid": "d9d0cad11bafd78a5df39353aa6c6e338d5ab1ca"}, "closed": true, "closedAt": "2020-08-10T13:28:10Z", "author": {"login": "m36dot"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5puJugH2gAyNDU4Mzk0MTM4OjQ0ZDdlMmQ0NmNjMzMzMTA3ZDlkYzUxMzhmODFlMWY1MGE1OTk4MmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9iOX2AFqTQ2NDIyNjUyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "44d7e2d46cc333107d9dc5138f81e1f50a59982e", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44d7e2d46cc333107d9dc5138f81e1f50a59982e", "committedDate": "2020-07-29T11:56:17Z", "message": "Add missing contexts for resumeParsing\n\nAdded missing contexts for resumePasing and added tests to verify those."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30f46823ffda2d1db5f02c9eb5b97a1f1e2e97b6", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30f46823ffda2d1db5f02c9eb5b97a1f1e2e97b6", "committedDate": "2020-07-29T12:20:22Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f791d1f33f69dec8a52a6a8ddf8f86ebe1b8e78a", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f791d1f33f69dec8a52a6a8ddf8f86ebe1b8e78a", "committedDate": "2020-07-30T08:34:00Z", "message": "Refactor resumeParsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7122e2b84bca5fc73d98c054f3f2f5123d35fee", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7122e2b84bca5fc73d98c054f3f2f5123d35fee", "committedDate": "2020-07-30T09:59:35Z", "message": "Fix merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db846af90d113c7dab22ac997ef520fb273dc240", "committedDate": "2020-07-30T12:40:14Z", "message": "Fix ResumeParsing conflicts\n\nFix conflicts in resumeParsing where more than 1 method recovers with the same context."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTIyMzIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-458922321", "createdAt": "2020-07-31T05:21:36Z", "commit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyMTozNlrOG58VZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyMTozNlrOG58VZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMDUzNA==", "bodyText": "parseCompoundAssignmentStmt() is only called within resumeParsing()\nNo other usage. Do we need that method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463410534", "createdAt": "2020-07-31T05:21:36Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +510,169 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:// 2 resume-points : parseTypeDescOrExprRhs()\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            case COMPOUND_ASSIGNMENT_STMT:// following method is only referred in resume parsing\n+                return parseCompoundAssignmentStmt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 647}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTIyNzQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-458922745", "createdAt": "2020-07-31T05:23:02Z", "commit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyMzowM1rOG58WvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyMzowM1rOG58WvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMDg3Ng==", "bodyText": "parseNilTypeDescriptor() above this line also has no usage in other places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463410876", "createdAt": "2020-07-31T05:23:03Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -283,121 +213,35 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseOpenBracket();\n             case RESOURCE_DEF:\n                 return parseResource();\n-            case OPTIONAL_SERVICE_NAME:\n-                return parseServiceName();\n-            case SERVICE_KEYWORD:\n-                return parseServiceKeyword();\n-            case ON_KEYWORD:\n-                return parseOnKeyword();\n-            case RESOURCE_KEYWORD:\n-                return parseResourceKeyword();\n-            case LISTENER_KEYWORD:\n-                return parseListenerKeyword();\n             case NIL_TYPE_DESCRIPTOR:// following method is only referred in resume parsing\n                 return parseNilTypeDescriptor();\n-            case COMPOUND_ASSIGNMENT_STMT:// following method is only referred in resume parsing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTIzNDc3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-458923477", "createdAt": "2020-07-31T05:25:40Z", "commit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyNTo0MFrOG58ZNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyNTo0MFrOG58ZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMTUxMQ==", "bodyText": "we can check if this context is required in resumeParsing and remove // revisit comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463411511", "createdAt": "2020-07-31T05:25:40Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -448,42 +288,20 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseLeftArrowToken();\n             case RECEIVE_WORKERS:\n                 return parseReceiveWorkers();\n-            case WAIT_KEYWORD:\n-                return parseWaitKeyword();\n-            case WAIT_FUTURE_EXPR_END:\n-                return parseWaitFutureExprEnd((int) args[0]);\n             case WAIT_FIELD_NAME:// revisit\n                 return parseWaitField();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 297}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTIzOTI0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-458923924", "createdAt": "2020-07-31T05:27:25Z", "commit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyNzoyNVrOG58atQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyNzoyNVrOG58atQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMTg5Mw==", "bodyText": "if the conflict is resolved, we can remove the comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463411893", "createdAt": "2020-07-31T05:27:25Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +510,169 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:// 2 resume-points : parseTypeDescOrExprRhs()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 615}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e47de2a07887eec88bad4be07682b5b702e95d7d", "committedDate": "2020-07-31T06:17:14Z", "message": "Refactor resumeParsing in ballerinaParser\n\nRemoved some outdated comments and removed some cases which werent necessary."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDkxOTA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-459091906", "createdAt": "2020-07-31T11:01:32Z", "commit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowMTozMlrOG6EpHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowODo1MFrOG6Ezzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjY1NA==", "bodyText": "Can't we have the logic inside this function iteself?\nThere's no value addition of delegating the logic to another function, if this is the only place it is used..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463546654", "createdAt": "2020-07-31T11:01:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -138,41 +138,28 @@ public STNode parse(ParserRuleContext context) {\n      */\n     @Override\n     public STNode resumeParsing(ParserRuleContext context, Object... args) {\n-        // TODO: revisit the commented resume-points\n+        return resumeTopLevelNodeParsing(context, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NzIwNg==", "bodyText": "Shall we re-order the functions in the same order they are chained?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463547206", "createdAt": "2020-07-31T11:02:59Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +506,167 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            default:\n+                return resumeActionOrExpressionNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeTopLevelNodeParsing(ParserRuleContext context, Object... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 645}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Nzc3Mw==", "bodyText": "Since theres a separate method for resuming keywords, shall we move all keywords in to that method?\nFix in all places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463547773", "createdAt": "2020-07-31T11:04:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +506,167 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            default:\n+                return resumeActionOrExpressionNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeTopLevelNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TOP_LEVEL_NODE:\n+                return parseTopLevelNode();\n+            case TOP_LEVEL_NODE_WITHOUT_METADATA:\n+                return parseTopLevelNode((STNode) args[0]);\n+            case TOP_LEVEL_NODE_WITHOUT_MODIFIER:\n+                return parseTopLevelNode((STNode) args[0], (STNode) args[1]);\n+            case IMPORT_DECL_RHS:\n+                return parseImportDecl((STNode) args[0], (STNode) args[1]);\n+            case IMPORT_PREFIX:\n+                return parseImportPrefix();\n+            case IMPORT_MODULE_NAME:\n+            case IMPORT_ORG_OR_MODULE_NAME:\n+            case SERVICE_NAME:\n+            case MODULE_ENUM_NAME:\n+                return parseIdentifier(context);\n+            case IMPORT_KEYWORD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 662}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Nzk3Nw==", "bodyText": "This is not a keyword", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463547977", "createdAt": "2020-07-31T11:04:59Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -523,22 +327,163 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumMemberRhs((STNode) args[0], (STNode) args[1]);\n             case RECEIVE_FIELD:\n                 return parseReceiveField();\n-            case PUBLIC_KEYWORD:// 2 resume-points : parseObjectMemberVisibility()\n+            case PARAM_END:\n+                return parseParameterRhs();\n+            case ELLIPSIS:\n+                return parseEllipsis();\n+            case BINARY_OPERATOR:\n+                return parseBinaryOperator();\n+            case QUESTION_MARK:\n+                return parseQuestionMark();\n+            case COMPOUND_BINARY_OPERATOR:\n+                return parseCompoundBinaryOperator();\n+            case UNARY_OPERATOR:\n+                return parseUnaryOperator();\n+            case AT:\n+                return parseAtToken();\n+            case RIGHT_ARROW:\n+                return parseRightArrow();\n+            case ATTACH_POINT:\n+                return parseAnnotationAttachPoint();\n+            case PIPE:\n+                return parsePipeToken();\n+            case INTERPOLATION_START_TOKEN:\n+                return parseInterpolationStart();\n+            case LIST_MATCH_PATTERN_MEMBER_RHS:\n+                return parseListMatchPatternMemberRhs();\n+            case LIST_BINDING_PATTERN_MEMBER:\n+                return parseListBindingPatternMember();\n+            case FIELD_MATCH_PATTERN_MEMBER:\n+                return parseFieldMatchPatternMember();\n+            case FIELD_MATCH_PATTERN_MEMBER_RHS:\n+                return parseFieldMatchPatternRhs();\n+            case FUNC_MATCH_PATTERN_OR_CONST_PATTERN:\n+                return parseFunctionalMatchPatternOrConsPattern((STNode) args[0]);\n+            case ARG_MATCH_PATTERN:\n+                return parseArgMatchPattern();\n+            case ARG_MATCH_PATTERN_RHS:\n+                return parseArgMatchPatternRhs();\n+            case ARG_BINDING_PATTERN:\n+                return parseArgBindingPattern();\n+            case ARG_BINDING_PATTERN_END:\n+                return parseArgsBindingPatternEnd();\n+            case TABLE_ROW_END:\n+                return parseTableRowEnd();\n+            case LIST_BP_OR_LIST_CONSTRUCTOR_MEMBER:\n+                return parseListBindingPatternOrListConstructorMember();\n+            case TUPLE_TYPE_DESC_OR_LIST_CONST_MEMBER:\n+                return parseTupleTypeDescOrListConstructorMember((STNode) args[0]);\n+            case REMOTE_CALL_OR_ASYNC_SEND_END:\n+                return parseRemoteCallOrAsyncSendEnd((STNode) args[0], (STNode) args[1], (STNode) args[2]);\n+            case RECEIVE_FIELD_END:\n+                return parseReceiveFieldEnd();\n+            case MAPPING_BP_OR_MAPPING_CONSTRUCTOR_MEMBER:\n+                return parseMappingBindingPatterOrMappingConstructorMember();\n+            default:\n+                throw new IllegalStateException(\"cannot resume parsing the rule: \" + context);\n+        }\n+    }\n+\n+    public STNode resumeKeywordParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case EXTERNAL_KEYWORD:\n+                return parseExternalKeyword();\n+            case IF_KEYWORD:\n+                return parseIfKeyword();\n+            case ELSE_KEYWORD:\n+                return parseElseKeyword();\n+            case ELSE_BODY:\n+                return parseElseBody();\n+            case WHILE_KEYWORD:\n+                return parseWhileKeyword();\n+            case PANIC_KEYWORD:\n+                return parsePanicKeyword();\n+            case VERSION_KEYWORD:\n+                return parseVersionKeyword();\n+            case AS_KEYWORD:\n+                return parseAsKeyword();\n+            case CONTINUE_KEYWORD:\n+                return parseContinueKeyword();\n+            case BREAK_KEYWORD:\n+                return parseBreakKeyword();\n+            case RETURN_KEYWORD:\n+                return parseReturnKeyword();\n+            case ON_KEYWORD:\n+                return parseOnKeyword();\n+            case RESOURCE_KEYWORD:\n+                return parseResourceKeyword();\n+            case TYPEOF_KEYWORD:\n+                return parseTypeofKeyword();\n+            case IS_KEYWORD:\n+                return parseIsKeyword();\n+            case SOURCE_KEYWORD:\n+                return parseSourceKeyword();\n+            case XMLNS_KEYWORD:\n+                return parseXMLNSKeyword();\n+            case WORKER_KEYWORD:\n+                return parseWorkerKeyword();\n+            case FORK_KEYWORD:\n+                return parseForkKeyword();\n+            case TRAP_KEYWORD:\n+                return parseTrapKeyword();\n+            case IN_KEYWORD:\n+                return parseInKeyword();\n+            case FOREACH_KEYWORD:\n+                return parseForEachKeyword();\n+            case TABLE_KEYWORD:\n+                return parseTableKeyword();\n+            case KEY_KEYWORD:\n+                return parseKeyKeyword();\n+            case TABLE_KEYWORD_RHS:\n+                return parseTableConstructorOrQuery((STNode) args[0], (boolean) args[1]);\n+            case ERROR_KEYWORD:\n+                return parseErrorKeyword();\n+            case LET_KEYWORD:\n+                return parseLetKeyword();\n+            case STREAM_KEYWORD:\n+                return parseStreamKeyword();\n+            case RETURNS_KEYWORD:\n+                return parseReturnsKeyword();\n+            case NEW_KEYWORD:\n+                return parseNewKeyword();\n+            case FROM_KEYWORD:\n+                return parseFromKeyword();\n+            case WHERE_KEYWORD:\n+                return parseWhereKeyword();\n+            case SELECT_KEYWORD:\n+                return parseSelectKeyword();\n+            case ORDER_KEYWORD:\n+                return parseOrderKeyword();\n+            case BY_KEYWORD:\n+                return parseByKeyword();\n+            case ASCENDING_KEYWORD:\n+                return parseAscendingKeyword();\n+            case DESCENDING_KEYWORD:\n+                return parseDescendingKeyword();\n+            case TRANSACTION_KEYWORD:\n+                return parseTransactionKeyword();\n+            case COMMIT_KEYWORD:\n+                return parseCommitKeyword();\n+            case RETRY_KEYWORD:\n+                return parseRetryKeyword();\n+            case ROLLBACK_KEYWORD:\n+                return parseRollbackKeyword();\n+            case WAIT_KEYWORD:\n+                return parseWaitKeyword();\n+            case DO_KEYWORD:\n+                return parseDoKeyword();\n+            case RETRY_KEYWORD_RHS:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 513}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODA3Nw==", "bodyText": "Not a keyword", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463548077", "createdAt": "2020-07-31T11:05:15Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +506,167 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 586}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODc4MQ==", "bodyText": "Whats the size of this method after refactoring?\nShould we separate out syntax tokens (semicolons, commas, etc) as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463548781", "createdAt": "2020-07-31T11:07:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -138,41 +138,28 @@ public STNode parse(ParserRuleContext context) {\n      */\n     @Override\n     public STNode resumeParsing(ParserRuleContext context, Object... args) {\n-        // TODO: revisit the commented resume-points\n+        return resumeTopLevelNodeParsing(context, args);\n+    }\n+\n+    public STNode resumeOtherNodesParsing(ParserRuleContext context, Object... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTM5MQ==", "bodyText": "These mapping field related stuff are part of mapping constructor.Think these should go under resume expressions method ?\nThere are few other such cases.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463549391", "createdAt": "2020-07-31T11:08:50Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -184,97 +171,40 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n             case PARAMETER_NAME_RHS:\n                 return parseParameterRhs((SyntaxKind) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n                         (STNode) args[4], (STNode) args[5]);\n-            case TOP_LEVEL_NODE:\n-                return parseTopLevelNode();\n-            case TOP_LEVEL_NODE_WITHOUT_METADATA:\n-                return parseTopLevelNode((STNode) args[0]);\n-            case TOP_LEVEL_NODE_WITHOUT_MODIFIER:\n-                return parseTopLevelNode((STNode) args[0], (STNode) args[1]);\n             case TYPE_NAME_OR_VAR_NAME:\n-            case RECORD_FIELD_NAME_OR_TYPE_NAME:\n             case TYPE_REFERENCE:\n-            case ANNOT_REFERENCE:\n             case FIELD_ACCESS_IDENTIFIER:\n                 return parseQualifiedIdentifier(context, (boolean) args[0]);\n-            case VAR_DECL_STMT_RHS:\n-                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n             case FIELD_DESCRIPTOR_RHS:\n                 return parseFieldDescriptorRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3]);\n-            case RECORD_BODY_START:\n-                return parseRecordBodyStartDelimiter();\n             case TYPE_DESCRIPTOR:\n                 return parseTypeDescriptorInternal((ParserRuleContext) args[0], (boolean) args[1]);\n-            case OBJECT_MEMBER_START:\n-                return parseObjectMember();\n-            case OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY:\n-                return parseObjectMethodOrField((STNode) args[0], (STNode) args[1]);\n-            case OBJECT_FIELD_RHS:\n-                return parseObjectFieldRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n-                        (STNode) args[4]);\n-            case OBJECT_TYPE_QUALIFIER:\n-                return parseObjectTypeQualifiers();\n-            case OBJECT_KEYWORD:\n-                return parseObjectKeyword();\n             case TYPE_NAME:\n                 return parseTypeName();\n-            case IF_KEYWORD:\n-                return parseIfKeyword();\n-            case ELSE_KEYWORD:\n-                return parseElseKeyword();\n-            case ELSE_BODY:\n-                return parseElseBody();\n-            case WHILE_KEYWORD:\n-                return parseWhileKeyword();\n-            case PANIC_KEYWORD:\n-                return parsePanicKeyword();\n-            case IMPORT_DECL_RHS:\n-                return parseImportDecl((STNode) args[0], (STNode) args[1]);\n-            case IMPORT_PREFIX:\n-                return parseImportPrefix();\n-            case IMPORT_MODULE_NAME:\n-            case IMPORT_ORG_OR_MODULE_NAME:\n-            case VARIABLE_REF:// 2 resume-points : parseQualifiedIdentifier(context)\n-            case SERVICE_NAME:\n+            case VARIABLE_REF:\n             case IMPLICIT_ANON_FUNC_PARAM:\n             case MAPPING_FIELD_NAME:\n             case RECEIVE_FIELD_NAME:\n-            case MODULE_ENUM_NAME:\n             case ENUM_MEMBER_NAME:\n                 return parseIdentifier(context);\n-            case IMPORT_KEYWORD:\n-                return parseImportKeyword();\n             case SLASH:\n                 return parseSlashToken();\n             case DOT:\n                 return parseDotToken();\n-            case IMPORT_VERSION_DECL:\n-                return parseVersion();\n-            case VERSION_KEYWORD:\n-                return parseVersionKeyword();\n             case VERSION_NUMBER:\n                 return parseVersionNumber();\n             case DECIMAL_INTEGER_LITERAL:\n             case MAJOR_VERSION:\n             case MINOR_VERSION:\n             case PATCH_VERSION:\n                 return parseDecimalIntLiteral(context);\n-            case IMPORT_SUB_VERSION:\n-                return parseSubVersion(context);\n-            case IMPORT_PREFIX_DECL:\n-                return parseImportPrefixDecl();\n-            case AS_KEYWORD:\n-                return parseAsKeyword();\n-            case CONTINUE_KEYWORD:\n-                return parseContinueKeyword();\n-            case BREAK_KEYWORD:\n-                return parseBreakKeyword();\n-            case RETURN_KEYWORD:\n-                return parseReturnKeyword();\n             case MAPPING_FIELD:\n             case FIRST_MAPPING_FIELD:\n                 return parseMappingField((ParserRuleContext) args[0]);\n-            case SPECIFIC_FIELD_RHS:// 2 resume-points : parseMappingFieldRhs(key)\n+            case SPECIFIC_FIELD_RHS:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "942a12e88d2f68b598e11c7949f531249f4c191a", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/942a12e88d2f68b598e11c7949f531249f4c191a", "committedDate": "2020-08-04T07:24:36Z", "message": "Refactor Code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNzc4Mjc5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-460778279", "createdAt": "2020-08-04T12:47:32Z", "commit": {"oid": "942a12e88d2f68b598e11c7949f531249f4c191a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo0NzozMlrOG7ezQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo0NzozMlrOG7ezQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyMzgwOA==", "bodyText": "Don't we need this method? What if we reach here after recovering?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r465023808", "createdAt": "2020-08-04T12:47:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5546,7 +5590,7 @@ private STNode parseObjectMember(SyntaxKind nextTokenKind, STNode metadata) {\n                 break;\n             case PUBLIC_KEYWORD:\n             case PRIVATE_KEYWORD:\n-                STNode visibilityQualifier = parseObjectMemberVisibility();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "942a12e88d2f68b598e11c7949f531249f4c191a"}, "originalPosition": 844}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa65c2e66e4ff0099f4a38668cb102907620009c", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa65c2e66e4ff0099f4a38668cb102907620009c", "committedDate": "2020-08-05T06:10:18Z", "message": "Refactor Code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902fec90e3b57adb8163d15cbc5d8dff6ba47ead", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/902fec90e3b57adb8163d15cbc5d8dff6ba47ead", "committedDate": "2020-08-05T06:56:53Z", "message": "Fix visibility Qualifier recovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12e3143aa4989af2bba8fa66c093a191d96aec3e", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/12e3143aa4989af2bba8fa66c093a191d96aec3e", "committedDate": "2020-08-05T07:37:20Z", "message": "Fix merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a18a89de5d368bc19ef769731df93e28e8f93ba", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a18a89de5d368bc19ef769731df93e28e8f93ba", "committedDate": "2020-08-05T09:02:58Z", "message": "Fix parseTypedBindingPatternOrExprRhs\n\nFix how parseTypedBindingPatternOrExprRhs handles SyntaxKind.NONE\nreturned by recovery."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fbf7b219e29cf482cccd718cba9c0b5743dfff4", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fbf7b219e29cf482cccd718cba9c0b5743dfff4", "committedDate": "2020-08-05T12:03:21Z", "message": "Refactor Code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93ea0cf983ffac2af5743ff494b31ca3598bd517", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93ea0cf983ffac2af5743ff494b31ca3598bd517", "committedDate": "2020-08-06T05:28:41Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fixResumeParsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a1d1031dabf638a85db7bcdd1212306a29a4fc8f", "committedDate": "2020-08-06T06:50:27Z", "message": "Refactor Code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMjU0NzY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-462254766", "createdAt": "2020-08-06T07:30:41Z", "commit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzozMDo0MVrOG8msmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzozMDo0MVrOG8msmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwMTc1Mg==", "bodyText": "Extra newlines?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466201752", "createdAt": "2020-08-06T07:30:41Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/misc/ambiguity/ambiguity_source_30.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;\n+\n+public function hello() re\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDAyOTc4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-463002978", "createdAt": "2020-08-07T02:56:02Z", "commit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjo1NjowMlrOG9Kx2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjo1NjowMlrOG9Kx2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5MjkyMQ==", "bodyText": "@m36dot Do we need this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466792921", "createdAt": "2020-08-07T02:56:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -184,8 +184,11 @@\n     private static final ParserRuleContext[] OBJECT_MEMBER_WITHOUT_METADATA =\n             { ParserRuleContext.ASTERISK, ParserRuleContext.OBJECT_FUNC_OR_FIELD, ParserRuleContext.CLOSE_BRACE };\n \n-    private static final ParserRuleContext[] OBJECT_FUNC_OR_FIELD = { ParserRuleContext.PUBLIC_KEYWORD,\n-            ParserRuleContext.PRIVATE_KEYWORD, ParserRuleContext.OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY };\n+    private static final ParserRuleContext[] OBJECT_FUNC_OR_FIELD = { ParserRuleContext.PUBLIC_OR_PRIVATE_KEYWORD,\n+            ParserRuleContext.OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY };\n+\n+    private static final ParserRuleContext[] PUBLIC_OR_PRIVATE_KEYWORD = {ParserRuleContext.PUBLIC_KEYWORD,\n+            ParserRuleContext.PRIVATE_KEYWORD};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDEzNjAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-463013600", "createdAt": "2020-08-07T03:37:20Z", "commit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzozNzoyMFrOG9LXmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzo0MToyNVrOG9LbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMjU4Ng==", "bodyText": "formatting is incorrect", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466802586", "createdAt": "2020-08-07T03:37:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -574,6 +577,9 @@\n     private static final ParserRuleContext[] JOIN_CLAUSE_START =\n             { ParserRuleContext.JOIN_KEYWORD, ParserRuleContext.OUTER_KEYWORD };\n \n+    private static final ParserRuleContext[] MAPPING_BP_OR_MAPPING_CONSTRUCTOR_MEMBER =\n+            { ParserRuleContext.MAPPING_BINDING_PATTERN_MEMBER, ParserRuleContext.MAPPING_FIELD};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMjY2Mg==", "bodyText": "Would \"object member qualifier\" be a better name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466802662", "createdAt": "2020-08-07T03:37:43Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -974,7 +982,10 @@ protected Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curr\n                     hasMatch = nextToken.kind == SyntaxKind.ASCENDING_KEYWORD ||\n                             nextToken.kind == SyntaxKind.DESCENDING_KEYWORD;\n                     break;\n-\n+                case PUBLIC_OR_PRIVATE_KEYWORD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMjg3MQ==", "bodyText": "Better to keep the override annotation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466802871", "createdAt": "2020-08-07T03:38:48Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -136,220 +136,288 @@ public STNode parse(ParserRuleContext context) {\n      * @param args Arguments that requires to continue parsing from the given parser context\n      * @return Parsed node\n      */\n-    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMzQ4Mw==", "bodyText": "Can you explain why do we need to check SyntaxKind.NONE here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466803483", "createdAt": "2020-08-07T03:41:25Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -13807,6 +13826,12 @@ private STNode parseTypedBindingPatternOrExprRhs(SyntaxKind nextTokenKind, STNod\n                     return solution.recoveredNode;\n                 }\n \n+                // If the recovered token is not something that can be re-parsed,\n+                // then don't try to re-parse the same rule.\n+                if (solution.tokenKind == SyntaxKind.NONE) {\n+                    return typeOrExpr;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 1093}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c99644924974c93ae8f872cc8eaa9e0f4496c575", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c99644924974c93ae8f872cc8eaa9e0f4496c575", "committedDate": "2020-08-07T08:42:52Z", "message": "Refactor Code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a557dd04f82cb842eaa2e7f6f82093fedec90b51", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a557dd04f82cb842eaa2e7f6f82093fedec90b51", "committedDate": "2020-08-10T06:32:10Z", "message": "Fix ErrorHandler returning SyntaxKind.NONE\n\nFix error handler returning SyntaxKind.NONE for recovery of\nparseTypedBindingPatternOrExprRhs for source 2 in #24651"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe3bf52fcd478cf95761b40cd8b108b5f5f71477", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe3bf52fcd478cf95761b40cd8b108b5f5f71477", "committedDate": "2020-08-10T07:26:06Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fixResumeParsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3d7bc605920fb7e32a1417cc6da9da08accf0d1", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3d7bc605920fb7e32a1417cc6da9da08accf0d1", "committedDate": "2020-08-10T07:56:35Z", "message": "Update assert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46659751f9d3a65303e9e4085fbc259bccce353a", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46659751f9d3a65303e9e4085fbc259bccce353a", "committedDate": "2020-08-10T11:06:27Z", "message": "remove extra new lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MjI2NTI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#pullrequestreview-464226525", "createdAt": "2020-08-10T13:27:56Z", "commit": {"oid": "46659751f9d3a65303e9e4085fbc259bccce353a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4952, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}