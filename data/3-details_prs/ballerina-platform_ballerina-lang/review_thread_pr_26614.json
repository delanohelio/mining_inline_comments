{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDU2NTQ4", "number": 26614, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDo1NjoxOFrOEyLrHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToyMzozMFrOEyL9_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU1NTE5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDo1NjoxOFrOHorbZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNTo0MDozNlrOHosKYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxNjYxMw==", "bodyText": "We shouldn't expose this API in the interface, since this is temporary.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512416613", "createdAt": "2020-10-27T04:56:18Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticLog.java", "diffHunk": "@@ -30,12 +32,19 @@\n \n \n     /**\n-     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link DiagnosticPosition}.\n+     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link Location}.\n      *\n      * @param kind    the kind of the diagnostic\n-     * @param pos     the position of the source code element.\n+     * @param location  the location of the source code element.\n      * @param message the message\n      */\n-    void logDiagnostic(Kind kind, DiagnosticPosition pos, CharSequence message);\n+    void logDiagnostic(Kind kind, Location location, CharSequence message);\n+\n+    /**\n+     * Set the working package id for logging.\n+     *\n+     * @param packageID Package Id specified in the {@link BLangPackage}\n+     */\n+    void setCurrentPackageId(PackageID packageID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyODY0Mg==", "bodyText": "Okay", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512428642", "createdAt": "2020-10-27T05:40:36Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticLog.java", "diffHunk": "@@ -30,12 +32,19 @@\n \n \n     /**\n-     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link DiagnosticPosition}.\n+     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link Location}.\n      *\n      * @param kind    the kind of the diagnostic\n-     * @param pos     the position of the source code element.\n+     * @param location  the location of the source code element.\n      * @param message the message\n      */\n-    void logDiagnostic(Kind kind, DiagnosticPosition pos, CharSequence message);\n+    void logDiagnostic(Kind kind, Location location, CharSequence message);\n+\n+    /**\n+     * Set the working package id for logging.\n+     *\n+     * @param packageID Package Id specified in the {@link BLangPackage}\n+     */\n+    void setCurrentPackageId(PackageID packageID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxNjYxMw=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU1OTEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDo1ODo0MFrOHordwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNTo0MToxM1rOHosLEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxNzIxNg==", "bodyText": "Let's deprecate this API, and introduce an overloaded API, that accepts the package ID as a parameter.\nvoid logDiagnostic(Kind kind, PackageID pkgId, Location location, CharSequence message);\nWe should eventually migrate everything to use this API", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512417216", "createdAt": "2020-10-27T04:58:40Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticLog.java", "diffHunk": "@@ -30,12 +32,19 @@\n \n \n     /**\n-     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link DiagnosticPosition}.\n+     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link Location}.\n      *\n      * @param kind    the kind of the diagnostic\n-     * @param pos     the position of the source code element.\n+     * @param location  the location of the source code element.\n      * @param message the message\n      */\n-    void logDiagnostic(Kind kind, DiagnosticPosition pos, CharSequence message);\n+    void logDiagnostic(Kind kind, Location location, CharSequence message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyODgxNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512428816", "createdAt": "2020-10-27T05:41:13Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticLog.java", "diffHunk": "@@ -30,12 +32,19 @@\n \n \n     /**\n-     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link DiagnosticPosition}.\n+     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link Location}.\n      *\n      * @param kind    the kind of the diagnostic\n-     * @param pos     the position of the source code element.\n+     * @param location  the location of the source code element.\n      * @param message the message\n      */\n-    void logDiagnostic(Kind kind, DiagnosticPosition pos, CharSequence message);\n+    void logDiagnostic(Kind kind, Location location, CharSequence message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxNzIxNg=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU4MjgwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/Diagnostic.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToxMjowN1rOHorrZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjoxMzo1M1rOHpbXyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMDcxMQ==", "bodyText": "Shall we remove this interface? The changes we are introducing with this PR are breaking-changes anyway, so I feel its good to do all these changes at one go.\nLets remove DiagnosticListener.class also", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512420711", "createdAt": "2020-10-27T05:12:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/Diagnostic.java", "diffHunk": "@@ -17,6 +17,9 @@\n */\n package org.ballerinalang.util.diagnostic;\n \n+import io.ballerina.tools.diagnostics.Location;\n+import org.ballerinalang.model.elements.PackageID;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NTc5MQ==", "bodyText": "Do you mean the DiagnosticPosition interface or Diagnostic interface?.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512465791", "createdAt": "2020-10-27T07:29:50Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/Diagnostic.java", "diffHunk": "@@ -17,6 +17,9 @@\n */\n package org.ballerinalang.util.diagnostic;\n \n+import io.ballerina.tools.diagnostics.Location;\n+import org.ballerinalang.model.elements.PackageID;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMDcxMQ=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ4MzI1OA==", "bodyText": "both", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512483258", "createdAt": "2020-10-27T08:05:11Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/Diagnostic.java", "diffHunk": "@@ -17,6 +17,9 @@\n */\n package org.ballerinalang.util.diagnostic;\n \n+import io.ballerina.tools.diagnostics.Location;\n+import org.ballerinalang.model.elements.PackageID;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMDcxMQ=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE5MTU1Ng==", "bodyText": "Removed the whole Diagnostic interface. Shall I changing all DiagnosticKind usages to DiagnosticSeverity?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r513191556", "createdAt": "2020-10-28T05:37:22Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/Diagnostic.java", "diffHunk": "@@ -17,6 +17,9 @@\n */\n package org.ballerinalang.util.diagnostic;\n \n+import io.ballerina.tools.diagnostics.Location;\n+import org.ballerinalang.model.elements.PackageID;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMDcxMQ=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMjEyMA==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r513202120", "createdAt": "2020-10-28T06:13:53Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/Diagnostic.java", "diffHunk": "@@ -17,6 +17,9 @@\n */\n package org.ballerinalang.util.diagnostic;\n \n+import io.ballerina.tools.diagnostics.Location;\n+import org.ballerinalang.model.elements.PackageID;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMDcxMQ=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU5NDAyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/Parser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToxODoxNlrOHorx1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzozMTowOVrOHoudyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjM1Ng==", "bodyText": "cUnitName is unused", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512422356", "createdAt": "2020-10-27T05:18:16Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/Parser.java", "diffHunk": "@@ -117,30 +114,25 @@ private CompilationUnitNode generateCompilationUnitNew(CompilerInput sourceEntry\n             return compilationUnit;\n         }\n \n-        BLangNodeTransformer bLangNodeTransformer = new BLangNodeTransformer(this.context, diagnosticSource);\n+        BLangNodeTransformer bLangNodeTransformer = new BLangNodeTransformer(this.context, packageID, entryName);\n         compilationUnit = (BLangCompilationUnit) bLangNodeTransformer.accept(tree.rootNode()).get(0);\n+        compilationUnit.setPackageID(packageID);\n         parserCache.put(packageID, entryName, hash, length, compilationUnit);\n         // Node cloner will run for valid ASTs.\n         // This will verify, any modification done to the AST will get handled properly.\n         compilationUnit = nodeCloner.cloneCUnit(compilationUnit);\n         return compilationUnit;\n     }\n \n-    private BDiagnosticSource getDiagnosticSource(CompilerInput sourceEntry, PackageID packageID) {\n-        String entryName = sourceEntry.getEntryName();\n-        return new BDiagnosticSource(packageID, entryName);\n-    }\n-\n-\n     private static int getHash(byte[] code) {\n         // Assuming hash collision is unlikely in a modified source.\n         // Additionally code.Length is considered to avoid hash collision.\n         return Arrays.hashCode(code);\n     }\n \n-    private void reportSyntaxDiagnostics(BDiagnosticSource diagnosticSource, SyntaxTree tree) {\n+    private void reportSyntaxDiagnostics(String cUnitName, PackageID pkgID, SyntaxTree tree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NjM3Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512466377", "createdAt": "2020-10-27T07:31:09Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/Parser.java", "diffHunk": "@@ -117,30 +114,25 @@ private CompilationUnitNode generateCompilationUnitNew(CompilerInput sourceEntry\n             return compilationUnit;\n         }\n \n-        BLangNodeTransformer bLangNodeTransformer = new BLangNodeTransformer(this.context, diagnosticSource);\n+        BLangNodeTransformer bLangNodeTransformer = new BLangNodeTransformer(this.context, packageID, entryName);\n         compilationUnit = (BLangCompilationUnit) bLangNodeTransformer.accept(tree.rootNode()).get(0);\n+        compilationUnit.setPackageID(packageID);\n         parserCache.put(packageID, entryName, hash, length, compilationUnit);\n         // Node cloner will run for valid ASTs.\n         // This will verify, any modification done to the AST will get handled properly.\n         compilationUnit = nodeCloner.cloneCUnit(compilationUnit);\n         return compilationUnit;\n     }\n \n-    private BDiagnosticSource getDiagnosticSource(CompilerInput sourceEntry, PackageID packageID) {\n-        String entryName = sourceEntry.getEntryName();\n-        return new BDiagnosticSource(packageID, entryName);\n-    }\n-\n-\n     private static int getHash(byte[] code) {\n         // Assuming hash collision is unlikely in a modified source.\n         // Additionally code.Length is considered to avoid hash collision.\n         return Arrays.hashCode(code);\n     }\n \n-    private void reportSyntaxDiagnostics(BDiagnosticSource diagnosticSource, SyntaxTree tree) {\n+    private void reportSyntaxDiagnostics(String cUnitName, PackageID pkgID, SyntaxTree tree) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjM1Ng=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDYwMzQ4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLog.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToyMzozMFrOHor3MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDozNToxM1rOHpjs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzcyOQ==", "bodyText": "I think we don't need this method, if we always pass the package ID when logging. Since we would eventually move to that, this method won't be needed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512423729", "createdAt": "2020-10-27T05:23:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLog.java", "diffHunk": "@@ -65,40 +66,58 @@ public static BLangDiagnosticLog getInstance(CompilerContext context) {\n         return dLogger;\n     }\n \n+    public static BLangDiagnosticLog getInstance(CompilerContext context, PackageID packageID) {\n+        BLangDiagnosticLog dLogger = context.get(DIAGNOSTIC_LOG_KEY);\n+        if (dLogger == null) {\n+            dLogger = new BLangDiagnosticLog(context);\n+        }\n+\n+        if (packageID != null) {\n+            dLogger.setCurrentPackageId(packageID);\n+        }\n+\n+        return dLogger;\n+    }\n+\n+    @Override\n+    public void setCurrentPackageId(PackageID packageID) {\n+        this.currentPackageId = packageID;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNDIyNw==", "bodyText": "But we need this for now as we use error() , warning() and note() methods in BLangDiagnosticLog class to log diagnostics. Right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512524227", "createdAt": "2020-10-27T09:12:27Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLog.java", "diffHunk": "@@ -65,40 +66,58 @@ public static BLangDiagnosticLog getInstance(CompilerContext context) {\n         return dLogger;\n     }\n \n+    public static BLangDiagnosticLog getInstance(CompilerContext context, PackageID packageID) {\n+        BLangDiagnosticLog dLogger = context.get(DIAGNOSTIC_LOG_KEY);\n+        if (dLogger == null) {\n+            dLogger = new BLangDiagnosticLog(context);\n+        }\n+\n+        if (packageID != null) {\n+            dLogger.setCurrentPackageId(packageID);\n+        }\n+\n+        return dLogger;\n+    }\n+\n+    @Override\n+    public void setCurrentPackageId(PackageID packageID) {\n+        this.currentPackageId = packageID;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzcyOQ=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUzMTc5Mw==", "bodyText": "Sorry I meant, we don't need the overloaded getInstance() method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r512531793", "createdAt": "2020-10-27T09:23:54Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLog.java", "diffHunk": "@@ -65,40 +66,58 @@ public static BLangDiagnosticLog getInstance(CompilerContext context) {\n         return dLogger;\n     }\n \n+    public static BLangDiagnosticLog getInstance(CompilerContext context, PackageID packageID) {\n+        BLangDiagnosticLog dLogger = context.get(DIAGNOSTIC_LOG_KEY);\n+        if (dLogger == null) {\n+            dLogger = new BLangDiagnosticLog(context);\n+        }\n+\n+        if (packageID != null) {\n+            dLogger.setCurrentPackageId(packageID);\n+        }\n+\n+        return dLogger;\n+    }\n+\n+    @Override\n+    public void setCurrentPackageId(PackageID packageID) {\n+        this.currentPackageId = packageID;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzcyOQ=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMzODYwOA==", "bodyText": "ah \ud83d\ude04 okay", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26614#discussion_r513338608", "createdAt": "2020-10-28T10:35:13Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLog.java", "diffHunk": "@@ -65,40 +66,58 @@ public static BLangDiagnosticLog getInstance(CompilerContext context) {\n         return dLogger;\n     }\n \n+    public static BLangDiagnosticLog getInstance(CompilerContext context, PackageID packageID) {\n+        BLangDiagnosticLog dLogger = context.get(DIAGNOSTIC_LOG_KEY);\n+        if (dLogger == null) {\n+            dLogger = new BLangDiagnosticLog(context);\n+        }\n+\n+        if (packageID != null) {\n+            dLogger.setCurrentPackageId(packageID);\n+        }\n+\n+        return dLogger;\n+    }\n+\n+    @Override\n+    public void setCurrentPackageId(PackageID packageID) {\n+        this.currentPackageId = packageID;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzcyOQ=="}, "originalCommit": {"oid": "885ca46480a3d83044206f9f1bb76257aae71515"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4661, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}