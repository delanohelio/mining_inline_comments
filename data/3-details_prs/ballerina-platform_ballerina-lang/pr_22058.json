{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDE4Mzg3", "number": 22058, "title": "Introduce annotations for Path/Query/Databinding params", "bodyText": "Purpose\n\nAdd @http: BodyParam annotation in the resource signature when binding payload instead of specifying the body field in the resource config.\nAdd @http:QueryParam annotation in the resource signature instead of having req.getQueryParamValue(string key) function.\nAdd @http:PathParam annotation for path params.\n\nFixes #21303\nFixes #17749\nApproach\n\nUse annotation to retrieve the identifier\nRemove desugared pathParamOrderConfig\n\nSamples\n   @http:ResourceConfig {\n        path: \"/{foo}\"\n    }\n    resource function testResource(http:Caller caller, http:Request req, \n                             @http:PathParam string foo,\n                             @http:BodyParam string payload, \n                             @http:QueryParam string[] bar) {\n        json responseJson = { path1 : foo, body : payload, query1 : bar[0]};\n        checkpanic caller->respond(<@untainted> responseJson);\n    }\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-22T14:50:31Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058", "merged": true, "mergeCommit": {"oid": "b9f66c42f9ff4cb1e3e1228203cfeca8c15f2fa1"}, "closed": true, "closedAt": "2020-04-11T05:54:36Z", "author": {"login": "chamil321"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLPQhIAH2gAyMzkyMDE4Mzg3OmY5OWM5ZmMwOGI1NmMyOTBmNTY4NmRlOTgwMWVhYTgyMjJhZGMwZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVAgR6gH2gAyMzkyMDE4Mzg3OmIyOGMwMDQ4MTJjYzYyOTE1OWNkZDFiMzlmMjIzMWFkMWExZWVkYWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f99c9fc08b56c290f5686de9801eaa8222adc0e2", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f99c9fc08b56c290f5686de9801eaa8222adc0e2", "committedDate": "2020-03-07T07:05:52Z", "message": "Add parameter annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b3f50849580662eba47dfcd0aed79ec1bcf9487", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b3f50849580662eba47dfcd0aed79ec1bcf9487", "committedDate": "2020-03-13T08:22:34Z", "message": "Add signature param processing logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fc421aed72d02001134a232312f6cd01c61c224", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fc421aed72d02001134a232312f6cd01c61c224", "committedDate": "2020-03-13T08:24:43Z", "message": "Add runtime param assignment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de9adcb9d7709c04392bea5c368853748140a9c9", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/de9adcb9d7709c04392bea5c368853748140a9c9", "committedDate": "2020-03-18T06:27:46Z", "message": "Structure dispatcher code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f20d252e484a67ea727f41252173286f3cc39dc", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f20d252e484a67ea727f41252173286f3cc39dc", "committedDate": "2020-03-20T11:23:18Z", "message": "Add compiler validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66d979c4f074476201c80984fcfde3d3a169f81a", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66d979c4f074476201c80984fcfde3d3a169f81a", "committedDate": "2020-03-22T12:42:57Z", "message": "Add compiler validation and refactor others"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4b68bb954cc19cbee26498b7b9213a3a4cc0dea", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4b68bb954cc19cbee26498b7b9213a3a4cc0dea", "committedDate": "2020-03-22T13:51:36Z", "message": "Remove desurgered pathParamOrderConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "committedDate": "2020-03-22T14:54:24Z", "message": "Fix spotbugs issues and refactor code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a1b3a1a7768fd79c45e9a92571053f64aeaa4c3", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a1b3a1a7768fd79c45e9a92571053f64aeaa4c3", "committedDate": "2020-03-22T14:50:01Z", "message": "Fix spotbugs issues"}, "afterCommit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "committedDate": "2020-03-22T14:54:24Z", "message": "Fix spotbugs issues and refactor code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTIxNDQ4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#pullrequestreview-379121448", "createdAt": "2020-03-23T04:05:02Z", "commit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDowNTowM1rOF52WiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDowNTowM1rOF52WiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMzY1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                resource function productsInfo1 (http:Caller caller, http:Request req, @http:PathParam string productId,\n          \n          \n            \n                resource function productsInfo1(http:Caller caller, http:Request req, @http:PathParam string productId,\n          \n      \n    \n    \n  \n\nCan you check other places?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396203656", "createdAt": "2020-03-23T04:05:03Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/http/src/test/resources/test-src/services/dispatching/uri-template.bal", "diffHunk": "@@ -12,7 +12,8 @@ service Ecommerce on testEP {\n         methods:[\"GET\"],\n         path:\"/products/{productId}/{regId}\"\n     }\n-    resource function productsInfo1 (http:Caller caller, http:Request req, string productId, string regId) {\n+    resource function productsInfo1 (http:Caller caller, http:Request req, @http:PathParam string productId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTM4NjI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#pullrequestreview-379138626", "createdAt": "2020-03-23T05:19:26Z", "commit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNToxOToyNlrOF53Ogg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNToxOToyNlrOF53Ogg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxNzk4Ng==", "bodyText": "Convert this to a loop. We don't use streams in the runtime since it has a performance impact.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396217986", "createdAt": "2020-03-23T05:19:26Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BFunctionType.java", "diffHunk": "@@ -119,4 +121,9 @@ public String toString() {\n     public String getAnnotationKey() {\n         return this.typeName;\n     }\n+\n+    public List<String> getParamAnnotationKeys() {\n+        return Arrays.stream(this.annotations.getKeys()).filter(key -> key.startsWith(\"$param$\")).collect(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTQwMTcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#pullrequestreview-379140173", "createdAt": "2020-03-23T05:25:25Z", "commit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNToyNToyNVrOF53Tsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNToyNToyNVrOF53Tsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxOTMxNA==", "bodyText": "Do we really need this check? This method is called for resource functions only.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396219314", "createdAt": "2020-03-23T05:25:25Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ServiceDesugar.java", "diffHunk": "@@ -201,7 +201,8 @@ void engageCustomServiceDesugar(BLangService service, SymbolEnv env) {\n     }\n \n     private void engageCustomResourceDesugar(BLangFunction functionNode, SymbolEnv env) {\n-        httpFiltersDesugar.addHttpFilterStatementsToResource(functionNode, env);\n-        httpFiltersDesugar.addCustomAnnotationToResource(functionNode, env);\n+        if (HttpFiltersDesugar.isHttpResource(functionNode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTQ2MjUw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#pullrequestreview-379146250", "createdAt": "2020-03-23T05:47:58Z", "commit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo0Nzo1OFrOF53naA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo0Nzo1OFrOF53naA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDM2MA==", "bodyText": "Shall we change this to the same format as the standard incompatible types error message?\ndlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible query param type: expected 'string|string[]', found '\" + param.type + \"'\";\nAlso, the expected type can be stated as string|string[] right? Also, how would the user know what type(s) to use for query params?\nAnother point, in error messages, we use ' around type names, not `", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396224360", "createdAt": "2020-03-23T05:47:58Z", "author": {"login": "pubudu91"}, "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/compiler/ResourceValidator.java", "diffHunk": "@@ -2,68 +2,172 @@\n \n import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n import org.ballerinalang.model.tree.FunctionNode;\n-import org.ballerinalang.model.tree.SimpleVariableNode;\n import org.ballerinalang.model.tree.expressions.LiteralNode;\n import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n import org.ballerinalang.util.diagnostic.Diagnostic;\n import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BAnnotationSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.util.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.ballerinalang.net.http.HttpConstants.ANN_CONFIG_ATTR_WEBSOCKET_UPGRADE;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_BODY_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_PATH_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_QUERY_PARAM;\n import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_RESOURCE_CONFIG;\n-import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_BODY;\n import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_PATH;\n import static org.ballerinalang.net.http.HttpConstants.ANN_WEBSOCKET_ATTR_UPGRADE_PATH;\n import static org.ballerinalang.net.http.HttpConstants.CALLER;\n import static org.ballerinalang.net.http.HttpConstants.HTTP_LISTENER_ENDPOINT;\n+import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_PACKAGE_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.REQUEST;\n \n /**\n- * A utility class for validating an HTTP resource signature at compile time.\n+ * A utility class for validating an HTTP resource signature, c at compile time.\n  *\n  * @since 0.965.0\n  */\n-public class ResourceSignatureValidator {\n+public class ResourceValidator {\n \n     public static final int COMPULSORY_PARAM_COUNT = 2;\n \n     private static final String ENDPOINT_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + HTTP_LISTENER_ENDPOINT;\n     private static final String CALLER_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + CALLER;\n     private static final String HTTP_REQUEST_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + REQUEST;\n+    private static final String HTTP_ANNOTATION = \"@\" + PROTOCOL_HTTP + \":\";\n \n-    public static void validate(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos) {\n+    static void validateSignature(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos,\n+                                  List<String> pathSegments) {\n         final int nParams = signatureParams.size();\n \n         if (nParams < COMPULSORY_PARAM_COUNT) {\n             dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"resource signature parameter count should be >= 2\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type \" + CALLER_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type `\" + CALLER_TYPE + \"`\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type \" + HTTP_REQUEST_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type `\" +\n+                    HTTP_REQUEST_TYPE + \"`\");\n+            return;\n+        }\n+\n+        if (nParams == COMPULSORY_PARAM_COUNT) {\n+            return;\n+        }\n+\n+        int bodyParamCount = 0;\n+        for (int index = 2; index < nParams; index++) {\n+\n+            BLangSimpleVariable param = signatureParams.get(index);\n+            String annotationName = getCompatibleAnnotation(param);\n+            if (annotationName == null) {\n+                dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"missing annotation of parameter `\" +\n+                        param.name.value + \"`: expected `\" + HTTP_ANNOTATION + ANN_NAME_PATH_PARAM + \"`, `\" +\n+                        HTTP_ANNOTATION + ANN_NAME_QUERY_PARAM + \"`, `\" + HTTP_ANNOTATION + ANN_NAME_BODY_PARAM + \"`\");\n+                continue;\n+            }\n+            switch (annotationName) {\n+                case ANN_NAME_PATH_PARAM:\n+                    validatePathParam(param, pathSegments, dlog);\n+                    break;\n+                case ANN_NAME_QUERY_PARAM:\n+                    validateQueryParam(param, dlog);\n+                    break;\n+                case ANN_NAME_BODY_PARAM:\n+                    if (bodyParamCount++ == 0) {\n+                        validateBodyParam(param, dlog);\n+                        continue;\n+                    }\n+                    dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid multiple `\" + HTTP_ANNOTATION +\n+                            ANN_NAME_BODY_PARAM + \"` annotations: cannot specify > 1 entity-body params\");\n+                    break;\n+                default:\n+                    // do not execute\n+            }\n+        }\n+    }\n+\n+    private static boolean isInvalidResourceParam(BLangSimpleVariable param, String expectedType) {\n+        return !expectedType.equals(param.type.toString());\n+    }\n+\n+    private static String getCompatibleAnnotation(BLangSimpleVariable param) {\n+        for (BLangAnnotationAttachment annotationAttachment : param.annAttachments) {\n+            BAnnotationSymbol annotationSymbol = annotationAttachment.annotationSymbol;\n+            if (!PROTOCOL_HTTP.equals(annotationSymbol.pkgID.name.value)) {\n+                continue;\n+            }\n+            String annotationName = annotationSymbol.name.value;\n+            if (ANN_NAME_PATH_PARAM.equals(annotationName) || ANN_NAME_QUERY_PARAM.equals(annotationName) ||\n+                    ANN_NAME_BODY_PARAM.equals(annotationName)) {\n+                return annotationName;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void validatePathParam(BLangSimpleVariable param, List<String> pathSegments, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && varTag != TypeTags.INT && varTag != TypeTags.BOOLEAN &&\n+                varTag != TypeTags.FLOAT) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible path param type: `\" + param.type +\n+                    \"`, expected `string`, `int`, `boolean`, `float`\");\n+            return;\n+        }\n+        if (!pathSegments.contains(param.name.value)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid path param: `\" + param.toString() +\n+                    \"`, missing segment `{\" + param.name.value + \"}` in the path config of the resource annotation\");\n+        }\n+    }\n+\n+    private static void validateQueryParam(BLangSimpleVariable param, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && (varTag != TypeTags.ARRAY ||\n+                ((BArrayType) paramType).getElementType().tag != TypeTags.STRING)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible query param type: `\" + param.type +\n+                    \"`, expected `string`, `string[]`\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTQ2NDk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#pullrequestreview-379146496", "createdAt": "2020-03-23T05:48:49Z", "commit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo0ODo0OVrOF53oOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo0ODo0OVrOF53oOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDU2OA==", "bodyText": "Same comment as above here, regarding error message format, use of unions and formatting", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396224568", "createdAt": "2020-03-23T05:48:49Z", "author": {"login": "pubudu91"}, "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/compiler/ResourceValidator.java", "diffHunk": "@@ -2,68 +2,172 @@\n \n import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n import org.ballerinalang.model.tree.FunctionNode;\n-import org.ballerinalang.model.tree.SimpleVariableNode;\n import org.ballerinalang.model.tree.expressions.LiteralNode;\n import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n import org.ballerinalang.util.diagnostic.Diagnostic;\n import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BAnnotationSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.util.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.ballerinalang.net.http.HttpConstants.ANN_CONFIG_ATTR_WEBSOCKET_UPGRADE;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_BODY_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_PATH_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_QUERY_PARAM;\n import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_RESOURCE_CONFIG;\n-import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_BODY;\n import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_PATH;\n import static org.ballerinalang.net.http.HttpConstants.ANN_WEBSOCKET_ATTR_UPGRADE_PATH;\n import static org.ballerinalang.net.http.HttpConstants.CALLER;\n import static org.ballerinalang.net.http.HttpConstants.HTTP_LISTENER_ENDPOINT;\n+import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_PACKAGE_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.REQUEST;\n \n /**\n- * A utility class for validating an HTTP resource signature at compile time.\n+ * A utility class for validating an HTTP resource signature, c at compile time.\n  *\n  * @since 0.965.0\n  */\n-public class ResourceSignatureValidator {\n+public class ResourceValidator {\n \n     public static final int COMPULSORY_PARAM_COUNT = 2;\n \n     private static final String ENDPOINT_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + HTTP_LISTENER_ENDPOINT;\n     private static final String CALLER_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + CALLER;\n     private static final String HTTP_REQUEST_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + REQUEST;\n+    private static final String HTTP_ANNOTATION = \"@\" + PROTOCOL_HTTP + \":\";\n \n-    public static void validate(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos) {\n+    static void validateSignature(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos,\n+                                  List<String> pathSegments) {\n         final int nParams = signatureParams.size();\n \n         if (nParams < COMPULSORY_PARAM_COUNT) {\n             dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"resource signature parameter count should be >= 2\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type \" + CALLER_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type `\" + CALLER_TYPE + \"`\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type \" + HTTP_REQUEST_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type `\" +\n+                    HTTP_REQUEST_TYPE + \"`\");\n+            return;\n+        }\n+\n+        if (nParams == COMPULSORY_PARAM_COUNT) {\n+            return;\n+        }\n+\n+        int bodyParamCount = 0;\n+        for (int index = 2; index < nParams; index++) {\n+\n+            BLangSimpleVariable param = signatureParams.get(index);\n+            String annotationName = getCompatibleAnnotation(param);\n+            if (annotationName == null) {\n+                dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"missing annotation of parameter `\" +\n+                        param.name.value + \"`: expected `\" + HTTP_ANNOTATION + ANN_NAME_PATH_PARAM + \"`, `\" +\n+                        HTTP_ANNOTATION + ANN_NAME_QUERY_PARAM + \"`, `\" + HTTP_ANNOTATION + ANN_NAME_BODY_PARAM + \"`\");\n+                continue;\n+            }\n+            switch (annotationName) {\n+                case ANN_NAME_PATH_PARAM:\n+                    validatePathParam(param, pathSegments, dlog);\n+                    break;\n+                case ANN_NAME_QUERY_PARAM:\n+                    validateQueryParam(param, dlog);\n+                    break;\n+                case ANN_NAME_BODY_PARAM:\n+                    if (bodyParamCount++ == 0) {\n+                        validateBodyParam(param, dlog);\n+                        continue;\n+                    }\n+                    dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid multiple `\" + HTTP_ANNOTATION +\n+                            ANN_NAME_BODY_PARAM + \"` annotations: cannot specify > 1 entity-body params\");\n+                    break;\n+                default:\n+                    // do not execute\n+            }\n+        }\n+    }\n+\n+    private static boolean isInvalidResourceParam(BLangSimpleVariable param, String expectedType) {\n+        return !expectedType.equals(param.type.toString());\n+    }\n+\n+    private static String getCompatibleAnnotation(BLangSimpleVariable param) {\n+        for (BLangAnnotationAttachment annotationAttachment : param.annAttachments) {\n+            BAnnotationSymbol annotationSymbol = annotationAttachment.annotationSymbol;\n+            if (!PROTOCOL_HTTP.equals(annotationSymbol.pkgID.name.value)) {\n+                continue;\n+            }\n+            String annotationName = annotationSymbol.name.value;\n+            if (ANN_NAME_PATH_PARAM.equals(annotationName) || ANN_NAME_QUERY_PARAM.equals(annotationName) ||\n+                    ANN_NAME_BODY_PARAM.equals(annotationName)) {\n+                return annotationName;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void validatePathParam(BLangSimpleVariable param, List<String> pathSegments, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && varTag != TypeTags.INT && varTag != TypeTags.BOOLEAN &&\n+                varTag != TypeTags.FLOAT) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible path param type: `\" + param.type +\n+                    \"`, expected `string`, `int`, `boolean`, `float`\");\n+            return;\n+        }\n+        if (!pathSegments.contains(param.name.value)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid path param: `\" + param.toString() +\n+                    \"`, missing segment `{\" + param.name.value + \"}` in the path config of the resource annotation\");\n+        }\n+    }\n+\n+    private static void validateQueryParam(BLangSimpleVariable param, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && (varTag != TypeTags.ARRAY ||\n+                ((BArrayType) paramType).getElementType().tag != TypeTags.STRING)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible query param type: `\" + param.type +\n+                    \"`, expected `string`, `string[]`\");\n+        }\n+    }\n+\n+    private static void validateBodyParam(BLangSimpleVariable param, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int type = paramType.tag;\n+\n+        if (type != TypeTags.RECORD && type != TypeTags.JSON && type != TypeTags.XML &&\n+                type != TypeTags.STRING && (type != TypeTags.ARRAY || !validArrayType(paramType))) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible entity-body param type: `\"\n+                    + param.type + \"`, expected `string`, `json`, `xml`, `byte[]`, `{}`, `{}[]`\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "originalPosition": 168}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTQ3NjUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#pullrequestreview-379147653", "createdAt": "2020-03-23T05:53:10Z", "commit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo1MzoxMFrOF53r_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo1MzoxMFrOF53r_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNTUzMw==", "bodyText": "Check https://github.com/ballerina-platform/ballerina-lang/pull/22058/files#r396224360", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396225533", "createdAt": "2020-03-23T05:53:10Z", "author": {"login": "pubudu91"}, "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/compiler/ResourceValidator.java", "diffHunk": "@@ -2,68 +2,172 @@\n \n import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n import org.ballerinalang.model.tree.FunctionNode;\n-import org.ballerinalang.model.tree.SimpleVariableNode;\n import org.ballerinalang.model.tree.expressions.LiteralNode;\n import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n import org.ballerinalang.util.diagnostic.Diagnostic;\n import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BAnnotationSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.util.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.ballerinalang.net.http.HttpConstants.ANN_CONFIG_ATTR_WEBSOCKET_UPGRADE;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_BODY_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_PATH_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_QUERY_PARAM;\n import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_RESOURCE_CONFIG;\n-import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_BODY;\n import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_PATH;\n import static org.ballerinalang.net.http.HttpConstants.ANN_WEBSOCKET_ATTR_UPGRADE_PATH;\n import static org.ballerinalang.net.http.HttpConstants.CALLER;\n import static org.ballerinalang.net.http.HttpConstants.HTTP_LISTENER_ENDPOINT;\n+import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_PACKAGE_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.REQUEST;\n \n /**\n- * A utility class for validating an HTTP resource signature at compile time.\n+ * A utility class for validating an HTTP resource signature, c at compile time.\n  *\n  * @since 0.965.0\n  */\n-public class ResourceSignatureValidator {\n+public class ResourceValidator {\n \n     public static final int COMPULSORY_PARAM_COUNT = 2;\n \n     private static final String ENDPOINT_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + HTTP_LISTENER_ENDPOINT;\n     private static final String CALLER_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + CALLER;\n     private static final String HTTP_REQUEST_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + REQUEST;\n+    private static final String HTTP_ANNOTATION = \"@\" + PROTOCOL_HTTP + \":\";\n \n-    public static void validate(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos) {\n+    static void validateSignature(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos,\n+                                  List<String> pathSegments) {\n         final int nParams = signatureParams.size();\n \n         if (nParams < COMPULSORY_PARAM_COUNT) {\n             dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"resource signature parameter count should be >= 2\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type \" + CALLER_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type `\" + CALLER_TYPE + \"`\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type \" + HTTP_REQUEST_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type `\" +\n+                    HTTP_REQUEST_TYPE + \"`\");\n+            return;\n+        }\n+\n+        if (nParams == COMPULSORY_PARAM_COUNT) {\n+            return;\n+        }\n+\n+        int bodyParamCount = 0;\n+        for (int index = 2; index < nParams; index++) {\n+\n+            BLangSimpleVariable param = signatureParams.get(index);\n+            String annotationName = getCompatibleAnnotation(param);\n+            if (annotationName == null) {\n+                dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"missing annotation of parameter `\" +\n+                        param.name.value + \"`: expected `\" + HTTP_ANNOTATION + ANN_NAME_PATH_PARAM + \"`, `\" +\n+                        HTTP_ANNOTATION + ANN_NAME_QUERY_PARAM + \"`, `\" + HTTP_ANNOTATION + ANN_NAME_BODY_PARAM + \"`\");\n+                continue;\n+            }\n+            switch (annotationName) {\n+                case ANN_NAME_PATH_PARAM:\n+                    validatePathParam(param, pathSegments, dlog);\n+                    break;\n+                case ANN_NAME_QUERY_PARAM:\n+                    validateQueryParam(param, dlog);\n+                    break;\n+                case ANN_NAME_BODY_PARAM:\n+                    if (bodyParamCount++ == 0) {\n+                        validateBodyParam(param, dlog);\n+                        continue;\n+                    }\n+                    dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid multiple `\" + HTTP_ANNOTATION +\n+                            ANN_NAME_BODY_PARAM + \"` annotations: cannot specify > 1 entity-body params\");\n+                    break;\n+                default:\n+                    // do not execute\n+            }\n+        }\n+    }\n+\n+    private static boolean isInvalidResourceParam(BLangSimpleVariable param, String expectedType) {\n+        return !expectedType.equals(param.type.toString());\n+    }\n+\n+    private static String getCompatibleAnnotation(BLangSimpleVariable param) {\n+        for (BLangAnnotationAttachment annotationAttachment : param.annAttachments) {\n+            BAnnotationSymbol annotationSymbol = annotationAttachment.annotationSymbol;\n+            if (!PROTOCOL_HTTP.equals(annotationSymbol.pkgID.name.value)) {\n+                continue;\n+            }\n+            String annotationName = annotationSymbol.name.value;\n+            if (ANN_NAME_PATH_PARAM.equals(annotationName) || ANN_NAME_QUERY_PARAM.equals(annotationName) ||\n+                    ANN_NAME_BODY_PARAM.equals(annotationName)) {\n+                return annotationName;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void validatePathParam(BLangSimpleVariable param, List<String> pathSegments, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && varTag != TypeTags.INT && varTag != TypeTags.BOOLEAN &&\n+                varTag != TypeTags.FLOAT) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible path param type: `\" + param.type +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTQ4MTA0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#pullrequestreview-379148104", "createdAt": "2020-03-23T05:54:33Z", "commit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo1NDozM1rOF53tgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo1NDozM1rOF53tgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNTkyMw==", "bodyText": "Use ' instead of ` to quote types", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396225923", "createdAt": "2020-03-23T05:54:33Z", "author": {"login": "pubudu91"}, "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/compiler/ResourceValidator.java", "diffHunk": "@@ -2,68 +2,172 @@\n \n import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n import org.ballerinalang.model.tree.FunctionNode;\n-import org.ballerinalang.model.tree.SimpleVariableNode;\n import org.ballerinalang.model.tree.expressions.LiteralNode;\n import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n import org.ballerinalang.util.diagnostic.Diagnostic;\n import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BAnnotationSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.util.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.ballerinalang.net.http.HttpConstants.ANN_CONFIG_ATTR_WEBSOCKET_UPGRADE;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_BODY_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_PATH_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_QUERY_PARAM;\n import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_RESOURCE_CONFIG;\n-import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_BODY;\n import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_PATH;\n import static org.ballerinalang.net.http.HttpConstants.ANN_WEBSOCKET_ATTR_UPGRADE_PATH;\n import static org.ballerinalang.net.http.HttpConstants.CALLER;\n import static org.ballerinalang.net.http.HttpConstants.HTTP_LISTENER_ENDPOINT;\n+import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_PACKAGE_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.REQUEST;\n \n /**\n- * A utility class for validating an HTTP resource signature at compile time.\n+ * A utility class for validating an HTTP resource signature, c at compile time.\n  *\n  * @since 0.965.0\n  */\n-public class ResourceSignatureValidator {\n+public class ResourceValidator {\n \n     public static final int COMPULSORY_PARAM_COUNT = 2;\n \n     private static final String ENDPOINT_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + HTTP_LISTENER_ENDPOINT;\n     private static final String CALLER_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + CALLER;\n     private static final String HTTP_REQUEST_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + REQUEST;\n+    private static final String HTTP_ANNOTATION = \"@\" + PROTOCOL_HTTP + \":\";\n \n-    public static void validate(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos) {\n+    static void validateSignature(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos,\n+                                  List<String> pathSegments) {\n         final int nParams = signatureParams.size();\n \n         if (nParams < COMPULSORY_PARAM_COUNT) {\n             dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"resource signature parameter count should be >= 2\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type \" + CALLER_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type `\" + CALLER_TYPE + \"`\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type \" + HTTP_REQUEST_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type `\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7161412792d8d1c9c0b723f4d4762851e9339ba", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7161412792d8d1c9c0b723f4d4762851e9339ba", "committedDate": "2020-03-23T17:34:38Z", "message": "Resolve review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd82f603ef8fbeeb31e9ee767a14a88c32755091", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd82f603ef8fbeeb31e9ee767a14a88c32755091", "committedDate": "2020-04-05T18:22:43Z", "message": "Merge branch 'http-v2' of https://github.com/ballerina-platform/ballerina-lang into param-api-change\n\n# Conflicts:\n#\tstdlib/http/src/main/java/org/ballerinalang/net/uri/URIUtil.java\n#\tstdlib/http/src/test/resources/test-src/services/dispatching/data-binding-test.bal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ddf465332f94d266c5473c7ebf14fd38146c737", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ddf465332f94d266c5473c7ebf14fd38146c737", "committedDate": "2020-04-06T04:39:06Z", "message": "Merge branch 'http-v2' of https://github.com/ballerina-platform/ballerina-lang into param-api-change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b28c004812cc629159cdd1b39f2231ad1a1eedaa", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b28c004812cc629159cdd1b39f2231ad1a1eedaa", "committedDate": "2020-04-06T15:33:45Z", "message": "Add unused path segment warning"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3759, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}