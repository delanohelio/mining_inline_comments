{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjcyMzAx", "number": 23319, "title": "Add shift and range expression parsing", "bodyText": "Purpose\n\nAdd shift and range expression support\nFix parser crashing with type-cast-expr recovery\n\nFixes #22953\nFixes #23266\nFixes #23287\nApproach\n\nN/A\n\nSamples\n\nN/A\n\nRemarks\n\nN/A\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-18T05:45:01Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319", "merged": true, "mergeCommit": {"oid": "a2be127a5e7785bdd16507b0b4b3bc5ff23420dc"}, "closed": true, "closedAt": "2020-05-20T13:55:41Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchcrEXAH2gAyNDE5MjcyMzAxOjM1ZjFiZDhkODFjMTY0ODBkNGZjNzQ2N2U4OGQ5OWY2NjllMjJiM2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjICltAFqTQxNTI3MDc4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "35f1bd8d81c16480d4fc7467e88d99f669e22b3c", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/35f1bd8d81c16480d4fc7467e88d99f669e22b3c", "committedDate": "2020-05-15T07:09:58Z", "message": "Add shift and range expressions support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33eede9d867964ba0dbbc00cdc0011bdf8dc7cea", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33eede9d867964ba0dbbc00cdc0011bdf8dc7cea", "committedDate": "2020-05-15T07:27:44Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80d4f5fcddbc963252f1f766f91c8fbeab4e3030", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/80d4f5fcddbc963252f1f766f91c8fbeab4e3030", "committedDate": "2020-05-15T08:37:29Z", "message": "Fix falling test cases with new feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5210e8281a6d53f46c08b707366a52f2159adce9", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5210e8281a6d53f46c08b707366a52f2159adce9", "committedDate": "2020-05-15T11:26:38Z", "message": "Fix parser crashing with type-cast-expr recovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "760f0b66e54c3c70ce4ccc498f22f8e5da1006e8", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/760f0b66e54c3c70ce4ccc498f22f8e5da1006e8", "committedDate": "2020-05-15T12:17:46Z", "message": "Fix type-cast-expr operator precedence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03981fb39dcd7c27f2830faf222ece2e5dea7861", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/03981fb39dcd7c27f2830faf222ece2e5dea7861", "committedDate": "2020-05-15T15:19:20Z", "message": "Modify syntax tree descriptor for <<, >>, >>> nodes and generate tree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/191c6694d610bff01f2363730d8449bf376f2f9e", "committedDate": "2020-05-15T15:34:39Z", "message": "Add <<, >>, >>> operator support at parser level and modify test cases accordingly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjkzODY0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#pullrequestreview-413293864", "createdAt": "2020-05-18T06:09:51Z", "commit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjowOTo1MVrOGWoqcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjowOTo1MVrOGWoqcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4ODA4Mw==", "bodyText": "In here we have to check whether next tokens belong to a type-cast-expr. It seems it is not possible unless we process up to the >. i.e. next token being an @ or isTypeStartingToken does not always imply a type-cast-expr start.\nEven if we processed up to >, still there's ambiguity.\ne.g.  a <<b> c  could mean either a << (b > c) or a < (<b> c)\nSo feel like it is better not  allow a <<int> b; to be parsed as a type-cast-expr.\nOnly  a < <int> b; is allowed. That way we don't need nodes for <<, >>, >>> at parser level. WDT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426388083", "createdAt": "2020-05-18T06:09:51Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3684,6 +3700,17 @@ private STNode parseExpressionRhs(SyntaxKind tokenKind, OperatorPrecedence curre\n             }\n         }\n \n+        // TODO: Add a good comment\n+        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {\n+            tokenKind = SyntaxKind.DOUBLE_LT_TOKEN;\n+        } else if (tokenKind == SyntaxKind.GT_TOKEN && peek(2).kind == SyntaxKind.GT_TOKEN) {\n+            if (peek(3).kind == SyntaxKind.GT_TOKEN) {\n+                tokenKind = SyntaxKind.TRIPPLE_GT_TOKEN;\n+            } else {\n+                tokenKind = SyntaxKind.DOUBLE_GT_TOKEN;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjIzMjAz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#pullrequestreview-413623203", "createdAt": "2020-05-18T14:01:02Z", "commit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowMTowM1rOGW4ioA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowOTowMFrOGW44NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0ODIyNA==", "bodyText": "Can we merge this code, with the below switch case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426648224", "createdAt": "2020-05-18T14:01:03Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3684,6 +3700,17 @@ private STNode parseExpressionRhs(SyntaxKind tokenKind, OperatorPrecedence curre\n             }\n         }\n \n+        // TODO: Add a good comment\n+        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0OTg2Nw==", "bodyText": "we need to validate whether there are any whitespaces/trivia between the tokens. Can log an error and continue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426649867", "createdAt": "2020-05-18T14:03:23Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8782,4 +8821,38 @@ private STNode parseSelectKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse double-LT token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseDoubleLTToken() {\n+        STNode openLTToken = parseLTToken();\n+        STNode endLTToken = parseLTToken();\n+        return STNodeFactory.createDoubleLTTokenNode(openLTToken, endLTToken);\n+    }\n+\n+    /**\n+     * Parse double-GT token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseDoubleGTToken() {\n+        STNode openGTToken = parseGTToken();\n+        STNode endLGToken = parseGTToken();\n+        return STNodeFactory.createDoubleGTTokenNode(openGTToken, endLGToken);\n+    }\n+\n+    /**\n+     * Parse tripple-GT token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTrippleGTToken() {\n+        STNode openGTToken = parseGTToken();\n+        STNode middleLGToken = parseGTToken();\n+        STNode endLGToken = parseGTToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MDE4NA==", "bodyText": "why a semicolon is needed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426650184", "createdAt": "2020-05-18T14:03:51Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "diffHunk": "@@ -41,13 +41,18 @@ public void testTypeCast() {\n         test(\"<@foo:bar{a:b} @bar{} int> c + d\", \"type-cast-expr/type_cast_expr_assert_07.json\");\n     }\n \n+    @Test\n+    public void testTypeCastOpPrecedence() {\n+        test(\"<int> a + <int> b\", \"type-cast-expr/type_cast_expr_assert_19.json\");\n+    }\n+\n     // Recovery tests\n \n     @Test\n     public void testTypeCastWithMissingExpr() {\n-        test(\"<int>\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n-        test(\"<@foo{}>\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n-        test(\"<@foo{} int>\", \"type-cast-expr/type_cast_expr_assert_10.json\");\n+        test(\"<int>;\", \"type-cast-expr/type_cast_expr_assert_08.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MTEzOA==", "bodyText": "there  shouldn't be  any difference even without the whitespace right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426651138", "createdAt": "2020-05-18T14:05:14Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java", "diffHunk": "@@ -73,7 +73,7 @@ public void testInValidErrorTypeMissingErrorTypeParams() {\n \n     @Test\n     public void testInValidErrorTypeExtraGt() {\n-        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_02.json\");\n+        test(\"error<NO_MATCHING_OBJECT> > a;\", \"error-type/error_type_assert_10.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1Mzc0OA==", "bodyText": "Are there any test for things like a <<b> c, <map<map<int>>> x, etc?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426653748", "createdAt": "2020-05-18T14:09:00Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "diffHunk": "@@ -41,13 +41,18 @@ public void testTypeCast() {\n         test(\"<@foo:bar{a:b} @bar{} int> c + d\", \"type-cast-expr/type_cast_expr_assert_07.json\");\n     }\n \n+    @Test\n+    public void testTypeCastOpPrecedence() {\n+        test(\"<int> a + <int> b\", \"type-cast-expr/type_cast_expr_assert_19.json\");\n+    }\n+\n     // Recovery tests\n \n     @Test\n     public void testTypeCastWithMissingExpr() {\n-        test(\"<int>\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n-        test(\"<@foo{}>\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n-        test(\"<@foo{} int>\", \"type-cast-expr/type_cast_expr_assert_10.json\");\n+        test(\"<int>;\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n+        test(\"<@foo{}>;\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n+        test(\"<@foo{} int>;\", \"type-cast-expr/type_cast_expr_assert_10.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff1e62839e1b53d866fc64dd5a5cc76a75ea926", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fff1e62839e1b53d866fc64dd5a5cc76a75ea926", "committedDate": "2020-05-19T19:33:23Z", "message": "Change double-LT token parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "553f7c915a78ccfc556504ca28017265b7775c5e", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/553f7c915a78ccfc556504ca28017265b7775c5e", "committedDate": "2020-05-20T07:08:49Z", "message": "Add more test cases for shift and range expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4094607ff7eb1cdaba900a54088e8578c2899623", "committedDate": "2020-05-20T07:55:32Z", "message": "Fix test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da0bf9a3860247d2566562dfa7bffb88c2410f20", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da0bf9a3860247d2566562dfa7bffb88c2410f20", "committedDate": "2020-05-20T06:45:33Z", "message": "Add more test cases for shift and range expressions"}, "afterCommit": {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4094607ff7eb1cdaba900a54088e8578c2899623", "committedDate": "2020-05-20T07:55:32Z", "message": "Fix test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MDkwMTUx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#pullrequestreview-415090151", "createdAt": "2020-05-20T08:09:21Z", "commit": {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODowOToyMVrOGYACNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODowOToyMVrOGYACNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxOTU3NQ==", "bodyText": "With ... rage operator first var-arg in\nfoo( bar(5, a, age  baz() ...subjects), 5, a, age = 18, ...subjects) is now recovered as range expression.\n(age  baz() ...subjects part.)\nIs it alright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427819575", "createdAt": "2020-05-20T08:09:21Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/resources/expressions/func-call/func_call_assert_11.json", "diffHunk": "@@ -58,52 +58,47 @@\n                                                     \"kind\": \"BINARY_EXPRESSION\",\n                                                     \"children\": [\n                                                         {\n-                                                            \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                            \"value\": \"age\"\n-                                                        },\n-                                                        {\n-                                                            \"kind\": \"PLUS_TOKEN\",\n-                                                            \"isMissing\": true\n-                                                        },\n-                                                        {\n-                                                            \"kind\": \"FUNCTION_CALL\",\n+                                                            \"kind\": \"BINARY_EXPRESSION\",\n                                                             \"children\": [\n                                                                 {\n                                                                     \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                                    \"value\": \"baz\"\n+                                                                    \"value\": \"age\"\n                                                                 },\n                                                                 {\n-                                                                    \"kind\": \"OPEN_PAREN_TOKEN\"\n+                                                                    \"kind\": \"PLUS_TOKEN\",\n+                                                                    \"isMissing\": true\n                                                                 },\n                                                                 {\n-                                                                    \"kind\": \"LIST\",\n+                                                                    \"kind\": \"FUNCTION_CALL\",\n                                                                     \"children\": [\n+                                                                        {\n+                                                                            \"kind\": \"IDENTIFIER_TOKEN\",\n+                                                                            \"value\": \"baz\"\n+                                                                        },\n+                                                                        {\n+                                                                            \"kind\": \"OPEN_PAREN_TOKEN\"\n+                                                                        },\n+                                                                        {\n+                                                                            \"kind\": \"LIST\",\n+                                                                            \"children\": []\n+                                                                        },\n+                                                                        {\n+                                                                            \"kind\": \"CLOSE_PAREN_TOKEN\"\n+                                                                        }\n                                                                     ]\n-                                                                },\n-                                                                {\n-                                                                    \"kind\": \"CLOSE_PAREN_TOKEN\"\n                                                                 }\n                                                             ]\n+                                                        },\n+                                                        {\n+                                                            \"kind\": \"ELLIPSIS_TOKEN\"\n+                                                        },\n+                                                        {\n+                                                            \"kind\": \"IDENTIFIER_TOKEN\",\n+                                                            \"value\": \"subjects\"\n                                                         }\n                                                     ]\n                                                 }\n                                             ]\n-                                        },\n-                                        {\n-                                            \"kind\": \"REST_ARG\",\n-                                            \"children\": [\n-                                                {\n-                                                    \"kind\": \"COMMA_TOKEN\",\n-                                                    \"isMissing\": true\n-                                                },\n-                                                {\n-                                                    \"kind\": \"ELLIPSIS_TOKEN\"\n-                                                },\n-                                                {\n-                                                    \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                    \"value\": \"subjects\"\n-                                                }\n-                                            ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MDkyMjEx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#pullrequestreview-415092211", "createdAt": "2020-05-20T08:12:09Z", "commit": {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoxMjowOVrOGYAIeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoxMjowOVrOGYAIeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyMTE3Ng==", "bodyText": "error_type_assert_02.json is also used in another test case as well. So I added 10.json here which is identical to 02.json", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427821176", "createdAt": "2020-05-20T08:12:09Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java", "diffHunk": "@@ -73,7 +73,7 @@ public void testInValidErrorTypeMissingErrorTypeParams() {\n \n     @Test\n     public void testInValidErrorTypeExtraGt() {\n-        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_02.json\");\n+        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_10.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d1a3c870ddb9013217e5949dab67738f6c09ca3", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d1a3c870ddb9013217e5949dab67738f6c09ca3", "committedDate": "2020-05-20T11:35:37Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-parser/src/test/resources/expressions/func-call/func_call_assert_11.json\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "598746dda410a6eee671df2a6d872d9650108383", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/598746dda410a6eee671df2a6d872d9650108383", "committedDate": "2020-05-20T11:48:27Z", "message": "Regenerate tree after merging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4f9134a036d6d6bdc06f152ee2ea8eb4b1924f", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c4f9134a036d6d6bdc06f152ee2ea8eb4b1924f", "committedDate": "2020-05-20T11:58:13Z", "message": "Fix test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MjcwNzg0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#pullrequestreview-415270784", "createdAt": "2020-05-20T12:15:30Z", "commit": {"oid": "2c4f9134a036d6d6bdc06f152ee2ea8eb4b1924f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3327, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}