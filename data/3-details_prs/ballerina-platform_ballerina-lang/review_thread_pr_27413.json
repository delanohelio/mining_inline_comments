{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MDUyMDQ2", "number": 27413, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODo0Mzo0NVrOFD4J1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToyNTozNFrOFD5NKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjEwMDcxOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionModuleId.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODo0Mzo0NVrOIDup3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTo1Mjo1MFrOIDxR1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4MTAyMQ==", "bodyText": "will it be possible to use the optional for alias?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540781021", "createdAt": "2020-12-11T08:43:45Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionModuleId.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.syntax.tree.ImportDeclarationNode;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a module information in ballerina.\n+ * <p>\n+ * Allows convenient transformation of ImportDeclarationNode node model representation for org-name, module-name,\n+ * version and alias.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CodeActionModuleId implements ModuleID {\n+    private static final String ORG_SEPARATOR = \"/\";\n+    private final String orgName;\n+    private final String moduleName;\n+    private final String version;\n+    private final String alias;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyNDAyMQ==", "bodyText": "Added alias to support ModuleID interface. I think we need to remove alias from this class since it doesn't affect the equality of the two separate imports. equal implementation ignores it here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540824021", "createdAt": "2020-12-11T09:52:50Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionModuleId.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.syntax.tree.ImportDeclarationNode;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a module information in ballerina.\n+ * <p>\n+ * Allows convenient transformation of ImportDeclarationNode node model representation for org-name, module-name,\n+ * version and alias.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CodeActionModuleId implements ModuleID {\n+    private static final String ORG_SEPARATOR = \"/\";\n+    private final String orgName;\n+    private final String moduleName;\n+    private final String version;\n+    private final String alias;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4MTAyMQ=="}, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjIzMTMxOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToxNjoxMlrOIDv0_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTo1NTozMFrOIDxYTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwMDI1NA==", "bodyText": "What would be the consequence if we try to depend on the node kind instance of code action node kind?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540800254", "createdAt": "2020-12-11T09:16:12Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -77,87 +87,47 @@ private CodeActionUtil() {\n     /**\n      * Get the top level node type at the cursor line.\n      *\n-     * @param context {@link LSContext}\n+     * @param node node\n      * @return {@link String}   Top level node type\n      */\n-    public static Optional<Pair<CodeActionNodeType, NonTerminalNode>> codeActionNodeType(CodeActionContext context) {\n-        Position position = context.cursorPosition();\n-        Optional<SyntaxTree> syntaxTree = context.workspace().syntaxTree(context.filePath());\n-\n-        if (syntaxTree.isEmpty()) {\n-            return Optional.empty();\n+    public static CodeActionNodeType codeActionNodeType(Node node) {\n+        if (node == null) {\n+            return CodeActionNodeType.NONE;\n         }\n-\n-        ModulePartNode modulePartNode = syntaxTree.get().rootNode();\n-        int cursorPosOffset = syntaxTree.get().textDocument().textPositionFrom(LinePosition.from(position.getLine(),\n-                position.getCharacter()));\n-\n-        List<NonTerminalNode> members = modulePartNode.members().stream().collect(Collectors.toList());\n-        modulePartNode.imports().forEach(members::add);\n-        for (NonTerminalNode member : members) {\n-            boolean isWithinStartSegment = isWithinStartCodeSegment(member, cursorPosOffset);\n-            boolean isWithinBody = isWithinBody(member, cursorPosOffset);\n-            if (!isWithinStartSegment && !isWithinBody) {\n-                continue;\n-            }\n-\n-            if (member.kind() == SyntaxKind.SERVICE_DECLARATION) {\n-                if (isWithinStartSegment) {\n-                    // Cursor on the service\n-                    return Optional.of(new ImmutablePair<>(CodeActionNodeType.SERVICE, member));\n+        switch (node.kind()) {\n+            case SERVICE_DECLARATION:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyNTY3Ng==", "bodyText": "I tried to implement it that way, issue is we cannot distinguish nodes in different contexts with node syntax-kind alone. For instance when you have a function definition syntax-kind, there's no clue whether it is a resource-function or a top-level function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540825676", "createdAt": "2020-12-11T09:55:30Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -77,87 +87,47 @@ private CodeActionUtil() {\n     /**\n      * Get the top level node type at the cursor line.\n      *\n-     * @param context {@link LSContext}\n+     * @param node node\n      * @return {@link String}   Top level node type\n      */\n-    public static Optional<Pair<CodeActionNodeType, NonTerminalNode>> codeActionNodeType(CodeActionContext context) {\n-        Position position = context.cursorPosition();\n-        Optional<SyntaxTree> syntaxTree = context.workspace().syntaxTree(context.filePath());\n-\n-        if (syntaxTree.isEmpty()) {\n-            return Optional.empty();\n+    public static CodeActionNodeType codeActionNodeType(Node node) {\n+        if (node == null) {\n+            return CodeActionNodeType.NONE;\n         }\n-\n-        ModulePartNode modulePartNode = syntaxTree.get().rootNode();\n-        int cursorPosOffset = syntaxTree.get().textDocument().textPositionFrom(LinePosition.from(position.getLine(),\n-                position.getCharacter()));\n-\n-        List<NonTerminalNode> members = modulePartNode.members().stream().collect(Collectors.toList());\n-        modulePartNode.imports().forEach(members::add);\n-        for (NonTerminalNode member : members) {\n-            boolean isWithinStartSegment = isWithinStartCodeSegment(member, cursorPosOffset);\n-            boolean isWithinBody = isWithinBody(member, cursorPosOffset);\n-            if (!isWithinStartSegment && !isWithinBody) {\n-                continue;\n-            }\n-\n-            if (member.kind() == SyntaxKind.SERVICE_DECLARATION) {\n-                if (isWithinStartSegment) {\n-                    // Cursor on the service\n-                    return Optional.of(new ImmutablePair<>(CodeActionNodeType.SERVICE, member));\n+        switch (node.kind()) {\n+            case SERVICE_DECLARATION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwMDI1NA=="}, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjIzOTg3OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToxNzo0NlrOIDv5fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTo1NTo0MVrOIDxYyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwMTQwNg==", "bodyText": "Shall we add a doc comment here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540801406", "createdAt": "2020-12-11T09:17:46Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -459,7 +327,127 @@ public static PositionDetails findCursorDetails(Range range, SyntaxTree syntaxTr\n             matchedSymbol = null;\n         }\n         matchedExprTypeSymbol = semanticModel.type(relPath, largestExpressionNode(cursorNode, range).lineRange());\n-        return PositionDetailsImpl.from(matchedNode, matchedSymbol, matchedExprTypeSymbol.orElse(null));\n+        return CodeActionPositionDetails.from(matchedNode, matchedSymbol, matchedExprTypeSymbol.orElse(null));\n+    }\n+\n+    public static List<TextEdit> getTypeGuardCodeActionEdits(String varName, Range range, UnionTypeSymbol unionType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyNTgwMQ==", "bodyText": "Sure will add", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540825801", "createdAt": "2020-12-11T09:55:41Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -459,7 +327,127 @@ public static PositionDetails findCursorDetails(Range range, SyntaxTree syntaxTr\n             matchedSymbol = null;\n         }\n         matchedExprTypeSymbol = semanticModel.type(relPath, largestExpressionNode(cursorNode, range).lineRange());\n-        return PositionDetailsImpl.from(matchedNode, matchedSymbol, matchedExprTypeSymbol.orElse(null));\n+        return CodeActionPositionDetails.from(matchedNode, matchedSymbol, matchedExprTypeSymbol.orElse(null));\n+    }\n+\n+    public static List<TextEdit> getTypeGuardCodeActionEdits(String varName, Range range, UnionTypeSymbol unionType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwMTQwNg=="}, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjI2MzA3OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToyMzoxMFrOIDwHJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDowMTowMFrOIDxmNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwNDkwMA==", "bodyText": "can convert to if ladder", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540804900", "createdAt": "2020-12-11T09:23:10Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -469,17 +457,236 @@ public static PositionDetails findCursorDetails(Range range, SyntaxTree syntaxTr\n      * @param range {@link Range}\n      * @return largest possible node\n      */\n-    private static NonTerminalNode largestExpressionNode(NonTerminalNode node, Range range) {\n-        Predicate<NonTerminalNode> isWithinScope =\n+    public static Node largestExpressionNode(Node node, Range range) {\n+        Predicate<Node> isWithinScope =\n                 tNode -> tNode != null && !(tNode instanceof ExpressionStatementNode) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().startLine()), range) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().endLine()), range);\n         while (isWithinScope.test(node.parent())) {\n             node = node.parent();\n         }\n+        if (node.kind() == SyntaxKind.ASSIGNMENT_STATEMENT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 478}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyOTIzOQ==", "bodyText": "not clear what you meant here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540829239", "createdAt": "2020-12-11T10:01:00Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -469,17 +457,236 @@ public static PositionDetails findCursorDetails(Range range, SyntaxTree syntaxTr\n      * @param range {@link Range}\n      * @return largest possible node\n      */\n-    private static NonTerminalNode largestExpressionNode(NonTerminalNode node, Range range) {\n-        Predicate<NonTerminalNode> isWithinScope =\n+    public static Node largestExpressionNode(Node node, Range range) {\n+        Predicate<Node> isWithinScope =\n                 tNode -> tNode != null && !(tNode instanceof ExpressionStatementNode) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().startLine()), range) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().endLine()), range);\n         while (isWithinScope.test(node.parent())) {\n             node = node.parent();\n         }\n+        if (node.kind() == SyntaxKind.ASSIGNMENT_STATEMENT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwNDkwMA=="}, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 478}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjI3MzA3OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToyNTozNFrOIDwMsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDowNDozNlrOIDxu0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwNjMyMw==", "bodyText": "Following checks are bit hard to understand. Shall we try to simplify this? There are common conditions with the same return, we can merge them as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540806323", "createdAt": "2020-12-11T09:25:34Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -469,17 +457,236 @@ public static PositionDetails findCursorDetails(Range range, SyntaxTree syntaxTr\n      * @param range {@link Range}\n      * @return largest possible node\n      */\n-    private static NonTerminalNode largestExpressionNode(NonTerminalNode node, Range range) {\n-        Predicate<NonTerminalNode> isWithinScope =\n+    public static Node largestExpressionNode(Node node, Range range) {\n+        Predicate<Node> isWithinScope =\n                 tNode -> tNode != null && !(tNode instanceof ExpressionStatementNode) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().startLine()), range) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().endLine()), range);\n         while (isWithinScope.test(node.parent())) {\n             node = node.parent();\n         }\n+        if (node.kind() == SyntaxKind.ASSIGNMENT_STATEMENT) {\n+            return ((AssignmentStatementNode) node).expression();\n+        } else if (node.kind() == SyntaxKind.MODULE_VAR_DECL) {\n+            return ((ModuleVariableDeclarationNode) node).typedBindingPattern().typeDescriptor();\n+        } else if (node.kind() == SyntaxKind.LOCAL_VAR_DECL) {\n+            return ((VariableDeclarationNode) node).typedBindingPattern().typeDescriptor();\n+        }\n         return node;\n     }\n \n+    /**\n+     * Get the top level node type at the cursor line.\n+     *\n+     * @param position   {@link Position}\n+     * @param syntaxTree {@link SyntaxTree}\n+     * @return {@link String}   Top level node\n+     */\n+    public static Optional<Node> getTopLevelNode(Position position, SyntaxTree syntaxTree) {\n+        NonTerminalNode member = CommonUtil.findNode(new Range(position, position), syntaxTree);\n+        LinePosition cursorPosition = LinePosition.from(position.getLine(), position.getCharacter());\n+        int cursorPosOffset = syntaxTree.textDocument().textPositionFrom(cursorPosition);\n+        while (member != null) {\n+            boolean isWithinStartSegment = isWithinStartCodeSegment(member, cursorPosOffset);\n+            boolean isWithinBody = isWithinBody(member, cursorPosOffset);\n+            if (!isWithinStartSegment && !isWithinBody) {\n+                member = member.parent();\n+                continue;\n+            }\n+\n+            if (member.kind() == SyntaxKind.SERVICE_DECLARATION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 507}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMTQ0Mw==", "bodyText": "This is a code movement of what we introduced for detecting unformatted sources. First part checks whether it is within start segment of the node. isWithinStartSegment has separate calculations base on the node-type. Some checks are for isWithinBody. We can merge only variables, imports and assignments. Others are bit different. Will try to simplify this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27413#discussion_r540831443", "createdAt": "2020-12-11T10:04:36Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -469,17 +457,236 @@ public static PositionDetails findCursorDetails(Range range, SyntaxTree syntaxTr\n      * @param range {@link Range}\n      * @return largest possible node\n      */\n-    private static NonTerminalNode largestExpressionNode(NonTerminalNode node, Range range) {\n-        Predicate<NonTerminalNode> isWithinScope =\n+    public static Node largestExpressionNode(Node node, Range range) {\n+        Predicate<Node> isWithinScope =\n                 tNode -> tNode != null && !(tNode instanceof ExpressionStatementNode) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().startLine()), range) &&\n                         CommonUtil.isWithinRange(CommonUtil.toPosition(tNode.lineRange().endLine()), range);\n         while (isWithinScope.test(node.parent())) {\n             node = node.parent();\n         }\n+        if (node.kind() == SyntaxKind.ASSIGNMENT_STATEMENT) {\n+            return ((AssignmentStatementNode) node).expression();\n+        } else if (node.kind() == SyntaxKind.MODULE_VAR_DECL) {\n+            return ((ModuleVariableDeclarationNode) node).typedBindingPattern().typeDescriptor();\n+        } else if (node.kind() == SyntaxKind.LOCAL_VAR_DECL) {\n+            return ((VariableDeclarationNode) node).typedBindingPattern().typeDescriptor();\n+        }\n         return node;\n     }\n \n+    /**\n+     * Get the top level node type at the cursor line.\n+     *\n+     * @param position   {@link Position}\n+     * @param syntaxTree {@link SyntaxTree}\n+     * @return {@link String}   Top level node\n+     */\n+    public static Optional<Node> getTopLevelNode(Position position, SyntaxTree syntaxTree) {\n+        NonTerminalNode member = CommonUtil.findNode(new Range(position, position), syntaxTree);\n+        LinePosition cursorPosition = LinePosition.from(position.getLine(), position.getCharacter());\n+        int cursorPosOffset = syntaxTree.textDocument().textPositionFrom(cursorPosition);\n+        while (member != null) {\n+            boolean isWithinStartSegment = isWithinStartCodeSegment(member, cursorPosOffset);\n+            boolean isWithinBody = isWithinBody(member, cursorPosOffset);\n+            if (!isWithinStartSegment && !isWithinBody) {\n+                member = member.parent();\n+                continue;\n+            }\n+\n+            if (member.kind() == SyntaxKind.SERVICE_DECLARATION) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwNjMyMw=="}, "originalCommit": {"oid": "7ac0b93c0373a25d4df03639a00b65d7d93cba50"}, "originalPosition": 507}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2904, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}