{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMTk0NTgy", "number": 21273, "title": "[IntelliJ Plugin] Improve handling ballerina source files inside non-ballerina projects", "bodyText": "Purpose\nFixes #20718.\nRemarks\n\nRelated PR - #21306\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-02-26T12:02:43Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273", "merged": true, "mergeCommit": {"oid": "f0de28691c8d75315cbf7897659b7d0e72ac7c19"}, "closed": true, "closedAt": "2020-02-27T04:47:33Z", "author": {"login": "NipunaRanasinghe"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIFbrZAH2gAyMzgwMTk0NTgyOjI5ZDVmYzRlMzk5OTM2NmFkYWE1MGFiNTk0YTFjMzgyMDk4ODg2NDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIGz_vAFqTM2NDg5OTA2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29d5fc4e3999366adaa50ab594a1c38209888646", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29d5fc4e3999366adaa50ab594a1c38209888646", "committedDate": "2020-02-26T11:57:14Z", "message": "Improve handling ballerina source files inside non-ballerina projects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f191923bc7e58ba8e60d035d6da38e9f967de30", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f191923bc7e58ba8e60d035d6da38e9f967de30", "committedDate": "2020-02-26T12:06:55Z", "message": "Add minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b12bb642ac40a952547e3902506c770d0f55fa", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28b12bb642ac40a952547e3902506c770d0f55fa", "committedDate": "2020-02-26T12:57:01Z", "message": "Fix licence headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODg5ODY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#pullrequestreview-364889866", "createdAt": "2020-02-26T13:20:25Z", "commit": {"oid": "28b12bb642ac40a952547e3902506c770d0f55fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODg5OTY4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#pullrequestreview-364889968", "createdAt": "2020-02-26T13:20:34Z", "commit": {"oid": "28b12bb642ac40a952547e3902506c770d0f55fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMDozNFrOFurMCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMDozNFrOFurMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NjQxMQ==", "bodyText": "Is it possible to convert this to an if else clause?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#discussion_r384486411", "createdAt": "2020-02-26T13:20:34Z", "author": {"login": "nadeeshaan"}, "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.google.common.base.Strings;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.ui.MessageType;\n+import io.ballerina.plugins.idea.extensions.BallerinaLSPExtensionManager;\n+import io.ballerina.plugins.idea.notifiers.BallerinaAutoDetectNotifier;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdk;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdkUtils;\n+import io.ballerina.plugins.idea.settings.autodetect.BallerinaAutoDetectionSettings;\n+import io.ballerina.plugins.idea.settings.langserverlogs.LangServerLogsSettings;\n+import org.jetbrains.annotations.NotNull;\n+import org.wso2.lsp4intellij.IntellijLanguageClient;\n+import org.wso2.lsp4intellij.client.languageserver.serverdefinition.ProcessBuilderServerDefinition;\n+\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.BallerinaConstants.LAUNCHER_SCRIPT_PATH;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_EXPERIMENTAL;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_DEBUG;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_TRACE;\n+\n+/**\n+ * Language server protocol related utils.\n+ */\n+public class LSPUtils {\n+\n+    private static BallerinaAutoDetectNotifier autoDetectNotifier = new BallerinaAutoDetectNotifier();\n+\n+    /**\n+     * Registered language server definition using currently opened ballerina projects.\n+     */\n+    static void registerServerDefinition() {\n+        Project[] openProjects = ProjectManager.getInstance().getOpenProjects();\n+        for (Project project : openProjects) {\n+            registerServerDefinition(project);\n+        }\n+    }\n+\n+    static boolean registerServerDefinition(Project project) {\n+\n+        boolean autoDetected = false;\n+\n+        //If the project does not have a ballerina SDK attached, ballerinaSdkPath will be null.\n+        BallerinaSdk balSdk = BallerinaSdkUtils.getBallerinaSdkFor(project);\n+        String balSdkPath = balSdk.getSdkPath();\n+\n+        // Checks for the user-configured auto detection settings.\n+        if (balSdkPath == null && BallerinaAutoDetectionSettings.getInstance(project).isAutoDetectionEnabled()) {\n+\n+            //If a ballerina SDK is not configured for the project, Plugin tries to auto detect the ballerina SDK.\n+            showInIdeaEventLog(project, String.format(\"No ballerina SDK is found for project: %s\\n \" +\n+                    \"Trying to Auto detect Ballerina Home...\", project.getBasePath()));\n+\n+            balSdkPath = BallerinaSdkUtils.autoDetectSdk(project);\n+            autoDetected = true;\n+        }\n+\n+        if (!Strings.isNullOrEmpty(balSdkPath)) {\n+            boolean success = doRegister(project, balSdkPath);\n+            if (success && autoDetected) {\n+                BallerinaPreloadingActivity.LOG.info(String.format(\"Auto-detected Ballerina Home: %s for the \" +\n+                        \"project: %s\", balSdkPath, project.getBasePath()));\n+                showInIdeaEventLog(project, \"Auto-Detected Ballerina Home: \" + balSdkPath);\n+            }\n+            return success;\n+        } else {\n+            if (BallerinaAutoDetectionSettings.getInstance(project).isAutoDetectionEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b12bb642ac40a952547e3902506c770d0f55fa"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODkwMzMz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#pullrequestreview-364890333", "createdAt": "2020-02-26T13:21:05Z", "commit": {"oid": "28b12bb642ac40a952547e3902506c770d0f55fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMTowNVrOFurNJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMTowNVrOFurNJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NjY5Mw==", "bodyText": "Let's add the @SInCE annotation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#discussion_r384486693", "createdAt": "2020-02-26T13:21:05Z", "author": {"login": "nadeeshaan"}, "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSPUtils.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.google.common.base.Strings;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.ui.MessageType;\n+import io.ballerina.plugins.idea.extensions.BallerinaLSPExtensionManager;\n+import io.ballerina.plugins.idea.notifiers.BallerinaAutoDetectNotifier;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdk;\n+import io.ballerina.plugins.idea.sdk.BallerinaSdkUtils;\n+import io.ballerina.plugins.idea.settings.autodetect.BallerinaAutoDetectionSettings;\n+import io.ballerina.plugins.idea.settings.langserverlogs.LangServerLogsSettings;\n+import org.jetbrains.annotations.NotNull;\n+import org.wso2.lsp4intellij.IntellijLanguageClient;\n+import org.wso2.lsp4intellij.client.languageserver.serverdefinition.ProcessBuilderServerDefinition;\n+\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.BallerinaConstants.LAUNCHER_SCRIPT_PATH;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_EXPERIMENTAL;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_DEBUG;\n+import static io.ballerina.plugins.idea.BallerinaConstants.SYS_PROP_LS_TRACE;\n+\n+/**\n+ * Language server protocol related utils.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b12bb642ac40a952547e3902506c770d0f55fa"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODkwNTM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#pullrequestreview-364890534", "createdAt": "2020-02-26T13:21:24Z", "commit": {"oid": "28b12bb642ac40a952547e3902506c770d0f55fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMToyNVrOFurNxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyMToyNVrOFurNxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4Njg1Mg==", "bodyText": "Let's add the @ since annotation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#discussion_r384486852", "createdAt": "2020-02-26T13:21:25Z", "author": {"login": "nadeeshaan"}, "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/BallerinaEditorFactoryListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.ballerina.plugins.idea.preloading;\n+\n+import com.intellij.openapi.editor.event.EditorFactoryEvent;\n+import com.intellij.openapi.editor.event.EditorFactoryListener;\n+import com.intellij.openapi.fileEditor.FileDocumentManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.testFramework.LightVirtualFileBase;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static io.ballerina.plugins.idea.BallerinaConstants.BAL_FILE_EXT;\n+import static io.ballerina.plugins.idea.preloading.LSPUtils.registerServerDefinition;\n+\n+/**\n+ * Editor listener implementation which is used to handle ballerina source files inside non-ballerina projects.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b12bb642ac40a952547e3902506c770d0f55fa"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb244dc655d811fceff520b888797d367d929620", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb244dc655d811fceff520b888797d367d929620", "committedDate": "2020-02-26T13:30:37Z", "message": "Add review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca88f6c448049ab4b5851ac95235e05266b85c55", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca88f6c448049ab4b5851ac95235e05266b85c55", "committedDate": "2020-02-26T13:29:23Z", "message": "Add review suggestions"}, "afterCommit": {"oid": "eb244dc655d811fceff520b888797d367d929620", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb244dc655d811fceff520b888797d367d929620", "committedDate": "2020-02-26T13:30:37Z", "message": "Add review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODk5MDY3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21273#pullrequestreview-364899067", "createdAt": "2020-02-26T13:33:43Z", "commit": {"oid": "eb244dc655d811fceff520b888797d367d929620"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4025, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}