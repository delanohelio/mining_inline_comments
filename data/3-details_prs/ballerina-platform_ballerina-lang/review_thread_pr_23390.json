{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNjU0Mjgy", "number": 23390, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyODozMlrOD-dBdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozNDowM1rOD-dEYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODEzODE1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyODozMlrOGYkJew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNjo1NzoxN1rOGYoTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTI1OQ==", "bodyText": "Here types.get(i) will give you a RestDescriptorNode.I think you'l have to get the typeDescriptor field of it, to pass to createTypeNode() method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23390#discussion_r428411259", "createdAt": "2020-05-21T02:28:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -393,9 +392,14 @@ public BLangNode transform(ParenthesisedTypeDescriptorNode parenthesisedTypeDesc\n     public BLangNode transform(TupleTypeDescriptorNode tupleTypeDescriptorNode) {\n         // TODO: Fully implement after tuple-type-desc is completed.\n         BLangTupleTypeNode tupleTypeNode = (BLangTupleTypeNode) TreeBuilder.createTupleTypeNode();\n-        SeparatedNodeList<TypeDescriptorNode> types = tupleTypeDescriptorNode.memberTypeDesc();\n+        SeparatedNodeList<Node> types = tupleTypeDescriptorNode.memberTypeDesc();\n         for (int i = 0; i < types.size(); i++) {\n-            tupleTypeNode.memberTypeNodes.add(createTypeNode(types.get(i)));\n+            Node node = types.get(i);\n+            if (node.kind() == SyntaxKind.REST_TYPE) {\n+                tupleTypeNode.restParamType = createTypeNode(types.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d24e3e1a9970b14126a35f2538f4af53010d193"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3OTM0MQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23390#discussion_r428479341", "createdAt": "2020-05-21T06:57:17Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -393,9 +392,14 @@ public BLangNode transform(ParenthesisedTypeDescriptorNode parenthesisedTypeDesc\n     public BLangNode transform(TupleTypeDescriptorNode tupleTypeDescriptorNode) {\n         // TODO: Fully implement after tuple-type-desc is completed.\n         BLangTupleTypeNode tupleTypeNode = (BLangTupleTypeNode) TreeBuilder.createTupleTypeNode();\n-        SeparatedNodeList<TypeDescriptorNode> types = tupleTypeDescriptorNode.memberTypeDesc();\n+        SeparatedNodeList<Node> types = tupleTypeDescriptorNode.memberTypeDesc();\n         for (int i = 0; i < types.size(); i++) {\n-            tupleTypeNode.memberTypeNodes.add(createTypeNode(types.get(i)));\n+            Node node = types.get(i);\n+            if (node.kind() == SyntaxKind.REST_TYPE) {\n+                tupleTypeNode.restParamType = createTypeNode(types.get(i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTI1OQ=="}, "originalCommit": {"oid": "5d24e3e1a9970b14126a35f2538f4af53010d193"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODE0MDUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozMDoxNVrOGYkK8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNjo1NzoxMlrOGYoTTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTYzMg==", "bodyText": "can replace types.get(i) with node.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23390#discussion_r428411632", "createdAt": "2020-05-21T02:30:15Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -393,9 +392,14 @@ public BLangNode transform(ParenthesisedTypeDescriptorNode parenthesisedTypeDesc\n     public BLangNode transform(TupleTypeDescriptorNode tupleTypeDescriptorNode) {\n         // TODO: Fully implement after tuple-type-desc is completed.\n         BLangTupleTypeNode tupleTypeNode = (BLangTupleTypeNode) TreeBuilder.createTupleTypeNode();\n-        SeparatedNodeList<TypeDescriptorNode> types = tupleTypeDescriptorNode.memberTypeDesc();\n+        SeparatedNodeList<Node> types = tupleTypeDescriptorNode.memberTypeDesc();\n         for (int i = 0; i < types.size(); i++) {\n-            tupleTypeNode.memberTypeNodes.add(createTypeNode(types.get(i)));\n+            Node node = types.get(i);\n+            if (node.kind() == SyntaxKind.REST_TYPE) {\n+                tupleTypeNode.restParamType = createTypeNode(types.get(i));\n+            } else {\n+                tupleTypeNode.memberTypeNodes.add(createTypeNode(types.get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d24e3e1a9970b14126a35f2538f4af53010d193"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3OTMxMA==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23390#discussion_r428479310", "createdAt": "2020-05-21T06:57:12Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -393,9 +392,14 @@ public BLangNode transform(ParenthesisedTypeDescriptorNode parenthesisedTypeDesc\n     public BLangNode transform(TupleTypeDescriptorNode tupleTypeDescriptorNode) {\n         // TODO: Fully implement after tuple-type-desc is completed.\n         BLangTupleTypeNode tupleTypeNode = (BLangTupleTypeNode) TreeBuilder.createTupleTypeNode();\n-        SeparatedNodeList<TypeDescriptorNode> types = tupleTypeDescriptorNode.memberTypeDesc();\n+        SeparatedNodeList<Node> types = tupleTypeDescriptorNode.memberTypeDesc();\n         for (int i = 0; i < types.size(); i++) {\n-            tupleTypeNode.memberTypeNodes.add(createTypeNode(types.get(i)));\n+            Node node = types.get(i);\n+            if (node.kind() == SyntaxKind.REST_TYPE) {\n+                tupleTypeNode.restParamType = createTypeNode(types.get(i));\n+            } else {\n+                tupleTypeNode.memberTypeNodes.add(createTypeNode(types.get(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTYzMg=="}, "originalCommit": {"oid": "5d24e3e1a9970b14126a35f2538f4af53010d193"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODE0NTYyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozNDowM1rOGYkOQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNjo1NzowN1rOGYoTJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjQ4MA==", "bodyText": "Without removing and adding, can we do this check and create the RestDescriptorNode, before add it to the list.\nMay be introduce a new method like parseTupleMember() and do it inside that method. Then here instead of calling parseTypeDescriptorInternalwe can call that method. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23390#discussion_r428412480", "createdAt": "2020-05-21T02:34:03Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9050,7 +9049,12 @@ private STNode parseTupleMemberTypeDescList() {\n             if (tupleMemberRhs == null) {\n                 break;\n             }\n-\n+            if (tupleMemberRhs.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                typeDesc = typeDescList.remove(typeDescList.size() - 1);\n+                typeDesc = STNodeFactory.createRestDescriptorNode(typeDesc, tupleMemberRhs);\n+                typeDescList.add(typeDesc);\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d24e3e1a9970b14126a35f2538f4af53010d193"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3OTI2OQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23390#discussion_r428479269", "createdAt": "2020-05-21T06:57:07Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9050,7 +9049,12 @@ private STNode parseTupleMemberTypeDescList() {\n             if (tupleMemberRhs == null) {\n                 break;\n             }\n-\n+            if (tupleMemberRhs.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                typeDesc = typeDescList.remove(typeDescList.size() - 1);\n+                typeDesc = STNodeFactory.createRestDescriptorNode(typeDesc, tupleMemberRhs);\n+                typeDescList.add(typeDesc);\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjQ4MA=="}, "originalCommit": {"oid": "5d24e3e1a9970b14126a35f2538f4af53010d193"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3568, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}