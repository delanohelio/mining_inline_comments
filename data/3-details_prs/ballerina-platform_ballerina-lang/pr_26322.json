{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxOTcwMDQ4", "number": 26322, "title": "Add debug expression evaluation support for equality and type check expressions", "bodyText": "Purpose\nThis PR adds ballerina debug expression evaluation support for\n\n Equality Expressions\n\n Deep Value Equality\n Reference Equality\n\n\n Type test Expressions\n\nThis PR also adds integration test scenarios for the added expression types.\nFixes #26321.\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-10-13T04:27:40Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322", "merged": true, "mergeCommit": {"oid": "5a286d927c8b865568f4cdc0fb2373f65b98523e"}, "closed": true, "closedAt": "2020-10-15T15:59:36Z", "author": {"login": "NipunaRanasinghe"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOO1iBgH2gAyNTAxOTcwMDQ4OmMyNDI2MGI4NTVjZGRjNjY2MjNjOTNiMmNlMGFhMTgzMmMwYjIxNDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSzrOxgFqTUwOTUxNzE2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c24260b855cddc66623c93b2ce0aa1832c0b2146", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c24260b855cddc66623c93b2ce0aa1832c0b2146", "committedDate": "2020-10-01T10:29:19Z", "message": "Add minor fix for typdesc value presentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9383239a9f09d6a83e8707a0f6182825c6380f6", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9383239a9f09d6a83e8707a0f6182825c6380f6", "committedDate": "2020-10-03T12:29:19Z", "message": "Add typeof expression evaluation support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b88217bf66c00f8868ec71dadab2221eaff34c54", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b88217bf66c00f8868ec71dadab2221eaff34c54", "committedDate": "2020-10-05T11:20:22Z", "message": "Add evaluation support for deep value and reference equality expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63d6eeab3a97d709163bff77a6fdbcec1d7350d6", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63d6eeab3a97d709163bff77a6fdbcec1d7350d6", "committedDate": "2020-10-06T04:23:22Z", "message": "Add tests for typeof and equality expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "491a30aafc78e485ae422a58d3217bcb27a4f579", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/491a30aafc78e485ae422a58d3217bcb27a4f579", "committedDate": "2020-10-06T04:59:14Z", "message": "Add minor change for json type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aa4988e40c95c84754ac07974cdee543798314c", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1aa4988e40c95c84754ac07974cdee543798314c", "committedDate": "2020-10-09T09:09:08Z", "message": "Resolve conflicts with master\n\n# Conflicts:\n#\tmisc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/EvaluatorBuilder.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6fd53f2033761b44fbe90404349606004f7ea6f", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6fd53f2033761b44fbe90404349606004f7ea6f", "committedDate": "2020-10-13T04:34:17Z", "message": "Sync with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "committedDate": "2020-10-13T08:00:15Z", "message": "Update for recent compiler API changes and add spotbugs fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42eda4d02f8d698bcb122c006844c4b6c1e58c11", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/42eda4d02f8d698bcb122c006844c4b6c1e58c11", "committedDate": "2020-10-13T06:39:50Z", "message": "Update for recent compiler API changes"}, "afterCommit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2", "committedDate": "2020-10-13T08:00:15Z", "message": "Update for recent compiler API changes and add spotbugs fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjA2NDM2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#pullrequestreview-509206436", "createdAt": "2020-10-15T09:50:08Z", "commit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo1MDowOVrOHh_1lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo1MDowOVrOHh_1lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxMDk2Ng==", "bodyText": "Can these be private? These are used only within the EvaluationUtils class right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505410966", "createdAt": "2020-10-15T09:50:09Z", "author": {"login": "Ibaqu"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/EvaluationUtils.java", "diffHunk": "@@ -36,13 +41,57 @@\n  */\n public class EvaluationUtils {\n \n-    private static final String JAVA_LANG_CLASS = \"java.lang.Class\";\n+    // Helper classes\n+    public static final String B_TYPE_CHECKER_CLASS = \"org.ballerinalang.jvm.TypeChecker\";\n     private static final String B_STRING_UTILS_CLASS = \"org.ballerinalang.jvm.api.BStringUtils\";\n+    public static final String JAVA_BOOLEAN_CLASS = \"java.lang.Boolean\";\n+    public static final String JAVA_LONG_CLASS = \"java.lang.Long\";\n+    public static final String JAVA_DOUBLE_CLASS = \"java.lang.Double\";\n+    public static final String JAVA_LANG_CLASS = \"java.lang.Class\";\n+    public static final String JAVA_OBJECT_CLASS = \"java.lang.Object\";\n+    // Helper methods\n+    public static final String GET_TYPEDESC_METHOD = \"getTypedesc\";\n+    public static final String VALUE_OF_METHOD = \"valueOf\";\n+    public static final String REF_EQUAL_METHOD = \"isReferenceEqual\";\n+    public static final String VALUE_EQUAL_METHOD = \"isEqual\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjM5Njk0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#pullrequestreview-509239694", "createdAt": "2020-10-15T10:33:18Z", "commit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDozMzoxOFrOHiBcdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDozMzoxOFrOHiBcdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzNzMwMg==", "bodyText": "What is the relevant action if the operatorType is DOUBLE_EQUAL_TOKEN and TRIPPLE_EQUAL_TOKEN?\nAre we planning to implement these in future?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505437302", "createdAt": "2020-10-15T10:33:18Z", "author": {"login": "praveennadarajah"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/BinaryExpressionEvaluator.java", "diffHunk": "@@ -104,6 +114,12 @@ private BExpressionValue performOperation(BExpressionValue lhs, BExpressionValue\n                 return logicalOR(lVar, rVar);\n             case ELVIS_TOKEN:\n                 return conditionalReturn(lVar, rVar);\n+            case DOUBLE_EQUAL_TOKEN:\n+            case NOT_EQUAL_TOKEN:\n+                return checkValueEquality(lVar, rVar, operatorType);\n+            case TRIPPLE_EQUAL_TOKEN:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjQ0Mzc5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#pullrequestreview-509244379", "createdAt": "2020-10-15T10:40:12Z", "commit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MDoxMlrOHiBrYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MDoxMlrOHiBrYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MTEyMA==", "bodyText": "Seems like you are adding the JAVA_OBJECT_CLASS twice. This is redundant.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505441120", "createdAt": "2020-10-15T10:40:12Z", "author": {"login": "praveennadarajah"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/BinaryExpressionEvaluator.java", "diffHunk": "@@ -387,6 +403,50 @@ private BExpressionValue conditionalReturn(BVariable lVar, BVariable rVar) {\n         }\n     }\n \n+    /**\n+     * Checks for deep value equality.\n+     */\n+    private BExpressionValue checkValueEquality(BVariable lVar, BVariable rVar, SyntaxKind operatorType)\n+            throws EvaluationException {\n+        List<Value> argList = new ArrayList<>();\n+        argList.add(getValueAsObject(context, lVar));\n+        argList.add(getValueAsObject(context, rVar));\n+\n+        List<String> argTypeNames = new ArrayList<>();\n+        argTypeNames.add(JAVA_OBJECT_CLASS);\n+        argTypeNames.add(JAVA_OBJECT_CLASS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjQ2NDgw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#pullrequestreview-509246480", "createdAt": "2020-10-15T10:43:10Z", "commit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MzoxMFrOHiBx7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MzoxMFrOHiBx7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0Mjc5Nw==", "bodyText": "Same here as well. Is there any specific reason for this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505442797", "createdAt": "2020-10-15T10:43:10Z", "author": {"login": "praveennadarajah"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/BinaryExpressionEvaluator.java", "diffHunk": "@@ -387,6 +403,50 @@ private BExpressionValue conditionalReturn(BVariable lVar, BVariable rVar) {\n         }\n     }\n \n+    /**\n+     * Checks for deep value equality.\n+     */\n+    private BExpressionValue checkValueEquality(BVariable lVar, BVariable rVar, SyntaxKind operatorType)\n+            throws EvaluationException {\n+        List<Value> argList = new ArrayList<>();\n+        argList.add(getValueAsObject(context, lVar));\n+        argList.add(getValueAsObject(context, rVar));\n+\n+        List<String> argTypeNames = new ArrayList<>();\n+        argTypeNames.add(JAVA_OBJECT_CLASS);\n+        argTypeNames.add(JAVA_OBJECT_CLASS);\n+        RuntimeStaticMethod runtimeMethod = getRuntimeMethod(context, B_TYPE_CHECKER_CLASS, VALUE_EQUAL_METHOD,\n+                argTypeNames);\n+        runtimeMethod.setArgValues(argList);\n+        Value result = runtimeMethod.invoke();\n+        BVariable variable = VariableFactory.getVariable(context, result);\n+        boolean booleanValue = Boolean.parseBoolean(variable.getDapVariable().getValue());\n+        booleanValue = operatorType == SyntaxKind.DOUBLE_EQUAL_TOKEN ? booleanValue : !booleanValue;\n+        return EvaluationUtils.make(context, booleanValue);\n+    }\n+\n+    /**\n+     * Checks for reference equality.\n+     */\n+    private BExpressionValue checkReferenceEquality(BVariable lVar, BVariable rVar, SyntaxKind operatorType)\n+            throws EvaluationException {\n+        List<Value> argList = new ArrayList<>();\n+        argList.add(getValueAsObject(context, lVar));\n+        argList.add(getValueAsObject(context, rVar));\n+\n+        List<String> argTypeNames = new ArrayList<>();\n+        argTypeNames.add(JAVA_OBJECT_CLASS);\n+        argTypeNames.add(JAVA_OBJECT_CLASS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjU3NjIz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#pullrequestreview-509257623", "createdAt": "2020-10-15T10:58:48Z", "commit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo1ODo0OFrOHiCTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo1ODo0OFrOHiCTNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MTMxOQ==", "bodyText": "getMethodArgs(JvmMethod method) method is almost repeated in JvmStaticMethod and JvmInstanceMethod. Shall we add them to a Util class and use it from there?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505451319", "createdAt": "2020-10-15T10:58:48Z", "author": {"login": "praveennadarajah"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/JvmInstanceMethod.java", "diffHunk": "@@ -57,8 +65,44 @@ public Value invoke() throws EvaluationException {\n         } catch (EvaluationException e) {\n             throw e;\n         } catch (Exception e) {\n-            throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR\n-                    .getString(), methodRef.name()));\n+            throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR.getString(),\n+                    methodRef.name()));\n+        }\n+    }\n+\n+    @Override\n+    protected List<Value> getMethodArgs(JvmMethod method) throws EvaluationException {\n+        try {\n+            if (argValues == null && argEvaluators == null) {\n+                throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR\n+                        .getString(), methodRef.name()));\n+            }\n+            if (argValues != null) {\n+                return argValues;\n+            }\n+            List<Value> argValueList = new ArrayList<>();\n+            // Evaluates all function argument expressions at first.\n+            for (Evaluator argEvaluator : argEvaluators) {\n+                argValueList.add(argEvaluator.evaluate().getJdiValue());\n+                // Assuming all the arguments are positional args.\n+                argValueList.add(EvaluationUtils.make(context, true).getJdiValue());\n+            }\n+\n+            List<Type> types = method.methodRef.argumentTypes();\n+            // Removes injected arguments added during the jvm method gen phase.\n+            for (int index = types.size() - 1; index >= 0; index -= 2) {\n+                types.remove(index);\n+            }\n+\n+            // Todo - IMPORTANT: Add remaining steps to validate and match named, defaultable and rest args\n+            // Todo - verify\n+            // Here we use the parent strand instance to execute the function invocation expression.\n+            Value parentStrand = getParentStrand();\n+            argValueList.add(0, parentStrand);\n+            return argValueList;\n+        } catch (ClassNotLoadedException e) {\n+            throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR.getString(),\n+                    methodRef.name()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjU4MzE0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#pullrequestreview-509258314", "createdAt": "2020-10-15T10:59:45Z", "commit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo1OTo0NlrOHiCVMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo1OTo0NlrOHiCVMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MTgyNA==", "bodyText": "Repeated method mentioned in here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#discussion_r505451824", "createdAt": "2020-10-15T10:59:46Z", "author": {"login": "praveennadarajah"}, "path": "misc/debug-adapter/modules/debug-adapter-core/src/main/java/org/ballerinalang/debugadapter/evaluation/engine/JvmStaticMethod.java", "diffHunk": "@@ -63,4 +71,40 @@ public Value invoke() throws EvaluationException {\n                     .getString(), methodRef.name()));\n         }\n     }\n+\n+    @Override\n+    protected List<Value> getMethodArgs(JvmMethod method) throws EvaluationException {\n+        try {\n+            if (argValues == null && argEvaluators == null) {\n+                throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR.getString()\n+                        , methodRef.name()));\n+            }\n+            if (argValues != null) {\n+                return argValues;\n+            }\n+            List<Value> argValueList = new ArrayList<>();\n+            // Evaluates all function argument expressions at first.\n+            for (Evaluator argEvaluator : argEvaluators) {\n+                argValueList.add(argEvaluator.evaluate().getJdiValue());\n+                // Assuming all the arguments are positional args.\n+                argValueList.add(EvaluationUtils.make(context, true).getJdiValue());\n+            }\n+\n+            List<Type> types = method.methodRef.argumentTypes();\n+            // Removes injected arguments added during the jvm method gen phase.\n+            for (int index = types.size() - 1; index >= 0; index -= 2) {\n+                types.remove(index);\n+            }\n+\n+            // Todo - IMPORTANT: Add remaining steps to validate and match named, defaultable and rest args\n+            // Todo - verify\n+            // Here we use the parent strand instance to execute the function invocation expression.\n+            Value parentStrand = getParentStrand();\n+            argValueList.add(0, parentStrand);\n+            return argValueList;\n+        } catch (ClassNotLoadedException e) {\n+            throw new EvaluationException(String.format(EvaluationExceptionKind.FUNCTION_EXECUTION_ERROR.getString(),\n+                    methodRef.name()));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NTE3MTY3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26322#pullrequestreview-509517167", "createdAt": "2020-10-15T15:40:15Z", "commit": {"oid": "7d9ee1ba3f08f3c5043f3cdf21ec66f601e472a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4342, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}