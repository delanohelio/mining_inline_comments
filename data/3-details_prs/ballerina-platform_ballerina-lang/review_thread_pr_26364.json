{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzODAzOTgy", "number": 26364, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoxOToxNVrOEvKMAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozNjozMVrOEv0Dzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODg1NDQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoxOToxNVrOHj_HWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoxOToxNVrOHj_HWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5NjI4Mw==", "bodyText": "cursorPos.lineRange().startLine() and location.lineRange().startLine() is called multiple times.\nBetter to extract that to a variable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r507496283", "createdAt": "2020-10-19T06:19:15Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -161,9 +160,38 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n \n     // Private helper methods for the public APIs above.\n \n-    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+    private boolean isSymbolInUserProject(BSymbol symbol, BLangDiagnosticLocation cursorPos) {\n+        String packageDetailsString = bLangPackage.packageID.name.value\n+                + bLangPackage.packageID.getPackageVersion().value\n+                + cursorPos.lineRange().filePath();\n+        String symbolPackageDetailsString = symbol.pkgID.name.value\n+                + symbol.pkgID.getPackageVersion().value\n+                + symbol.pos.lineRange().filePath();\n+\n+        int value = packageDetailsString.compareTo(symbolPackageDetailsString);\n+\n+        BLangDiagnosticLocation location = symbol.pos;\n+\n+        if (value == 0) {\n+            // If the package detail strings are same, then compare the start line.\n+            if (cursorPos.lineRange().startLine().line() < location.lineRange().startLine().line()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODg2NDgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyMTo1NFrOHj_N7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyMTo1NFrOHj_N7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5Nzk2NQ==", "bodyText": "Can't we simply use PackageID.equals()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r507497965", "createdAt": "2020-10-19T06:21:54Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -161,9 +160,38 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n \n     // Private helper methods for the public APIs above.\n \n-    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+    private boolean isSymbolInUserProject(BSymbol symbol, BLangDiagnosticLocation cursorPos) {\n+        String packageDetailsString = bLangPackage.packageID.name.value\n+                + bLangPackage.packageID.getPackageVersion().value\n+                + cursorPos.lineRange().filePath();\n+        String symbolPackageDetailsString = symbol.pkgID.name.value\n+                + symbol.pkgID.getPackageVersion().value\n+                + symbol.pos.lineRange().filePath();\n+\n+        int value = packageDetailsString.compareTo(symbolPackageDetailsString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODg3MzAyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/symbols/Symbol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyNDowOVrOHj_TLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyNDowOVrOHj_TLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5OTMwOA==", "bodyText": "We should use interface classes (i.e: Location) in these method signatures", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r507499308", "createdAt": "2020-10-19T06:24:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/symbols/Symbol.java", "diffHunk": "@@ -45,7 +45,7 @@\n \n     List<? extends Symbol> getEnclosedSymbols();\n \n-    DiagnosticPosition getPosition();\n+    BLangDiagnosticLocation getPosition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODg4MDYyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyNjowOFrOHj_YHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyNjowOFrOHj_YHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwMDU3NQ==", "bodyText": "Same here.\nLet's update in all places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r507500575", "createdAt": "2020-10-19T06:26:08Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticLog.java", "diffHunk": "@@ -30,12 +32,19 @@\n \n \n     /**\n-     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link DiagnosticPosition}.\n+     * Logs a message of the specified {@link Diagnostic.Kind} at the {@link BLangDiagnosticLocation}.\n      *\n      * @param kind    the kind of the diagnostic\n      * @param pos     the position of the source code element.\n      * @param message the message\n      */\n-    void logDiagnostic(Kind kind, DiagnosticPosition pos, CharSequence message);\n+    void logDiagnostic(Kind kind, BLangDiagnosticLocation pos, CharSequence message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODg4MTY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/BIRPackageSymbolEnter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyNjozMlrOHj_Y1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyNjozMlrOHj_Y1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwMDc1Nw==", "bodyText": "Same", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r507500757", "createdAt": "2020-10-19T06:26:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/BIRPackageSymbolEnter.java", "diffHunk": "@@ -426,7 +422,7 @@ private void defineGlobalVarDependencies(BInvokableSymbol invokableSymbol, DataI\n     }\n \n     private void defineTypeDef(DataInputStream dataInStream) throws IOException {\n-        DiagnosticPos pos = readPosition(dataInStream);\n+        BLangDiagnosticLocation pos = readPosition(dataInStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODg5MjUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjozMDozN1rOHj_fCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjozMDozN1rOHj_fCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwMjM0NQ==", "bodyText": "Having the current package ID in the logger can be problematic. Only one logger is created per compilation. But a single compilation can have multiple modules.\nSo here it is expected to set the currentPackageId before visiting the package. That makes us depend on the order of usage of the methods, and also makes it easy for someone to miss it out.\nShall we send package ID as a parameter to the diagnostic reporting function every-time?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r507502345", "createdAt": "2020-10-19T06:30:37Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLog.java", "diffHunk": "@@ -49,13 +47,15 @@\n \n     private int errorCount = 0;\n     private PackageCache packageCache;\n+    private PackageID currentPackageId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODkxMzQ1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjozODozM1rOHj_rBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjozODozM1rOHj_rBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNTQxNQ==", "bodyText": "Lets remove these commented out code", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r507505415", "createdAt": "2020-10-19T06:38:33Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/Parser.java", "diffHunk": "@@ -117,30 +114,41 @@ private CompilationUnitNode generateCompilationUnitNew(CompilerInput sourceEntry\n             return compilationUnit;\n         }\n \n-        BLangNodeTransformer bLangNodeTransformer = new BLangNodeTransformer(this.context, diagnosticSource);\n+        BLangNodeTransformer bLangNodeTransformer = new BLangNodeTransformer(this.context, packageID, entryName);\n         compilationUnit = (BLangCompilationUnit) bLangNodeTransformer.accept(tree.rootNode()).get(0);\n+        compilationUnit.setPackageID(packageID);\n         parserCache.put(packageID, entryName, hash, length, compilationUnit);\n         // Node cloner will run for valid ASTs.\n         // This will verify, any modification done to the AST will get handled properly.\n         compilationUnit = nodeCloner.cloneCUnit(compilationUnit);\n         return compilationUnit;\n     }\n \n-    private BDiagnosticSource getDiagnosticSource(CompilerInput sourceEntry, PackageID packageID) {\n-        String entryName = sourceEntry.getEntryName();\n-        return new BDiagnosticSource(packageID, entryName);\n-    }\n-\n-\n     private static int getHash(byte[] code) {\n         // Assuming hash collision is unlikely in a modified source.\n         // Additionally code.Length is considered to avoid hash collision.\n         return Arrays.hashCode(code);\n     }\n \n-    private void reportSyntaxDiagnostics(BDiagnosticSource diagnosticSource, SyntaxTree tree) {\n+    private void reportSyntaxDiagnostics(String cUnitName, PackageID pkgID, SyntaxTree tree) {\n         for (Diagnostic syntaxDiagnostic : tree.diagnostics()) {\n-            dlog.logDiagnostic(diagnosticSource.pkgID, syntaxDiagnostic);\n+            dlog.logDiagnostic(pkgID, syntaxDiagnostic);\n         }\n     }\n+\n+//    private void reportSyntaxDiagnostics(String cUnitName, PackageID pkgID, SyntaxTree tree) {\n+//        for (Diagnostic syntaxDiagnostic : tree.diagnostics()) {\n+//            // This conversion is needed because the compiler diagnostic locations starting index\n+//            // is 1, where as syntax diagnostics locations starting index is 0.\n+//            Location syntaxLocation = syntaxDiagnostic.location();\n+//            LineRange lineRange = syntaxLocation.lineRange();\n+//            LinePosition startLine = lineRange.startLine();\n+//            LinePosition endLine = lineRange.startLine();\n+//            Location location = new BLangDiagnosticLocation(cUnitName, pkgID, startLine.line() + 1,\n+//                    endLine.line() + 1, startLine.offset() + 1, endLine.offset() + 1);\n+//            BLangDiagnostic diag =\n+//                    new BLangDiagnostic(location, syntaxDiagnostic.message(), syntaxDiagnostic.diagnosticInfo());\n+//            dlog.logDiagnostic(pkgID, diag);\n+//        }\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODkyNzM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLocation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjo0MzoyMlrOHj_yzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODozMzo1NVrOHkw59w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNzQwNg==", "bodyText": "Looks like this constructor is never used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r507507406", "createdAt": "2020-10-19T06:43:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLocation.java", "diffHunk": "@@ -34,12 +34,18 @@\n     private LineRange lineRange;\n     private TextRange textRange;\n \n+    @Deprecated\n     public BLangDiagnosticLocation(String filePath, int startLine, int endLine, int startColumn, int endColumn) {\n         this.lineRange = LineRange.from(filePath, LinePosition.from(startLine, startColumn),\n                 LinePosition.from(endLine, endColumn));\n         this.textRange = TextRange.from(0, 0);\n     }\n \n+    public BLangDiagnosticLocation(LineRange lineRange, TextRange textRange) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUyMjg5MQ==", "bodyText": "We need this constructor to be used later right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r507522891", "createdAt": "2020-10-19T07:17:42Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLocation.java", "diffHunk": "@@ -34,12 +34,18 @@\n     private LineRange lineRange;\n     private TextRange textRange;\n \n+    @Deprecated\n     public BLangDiagnosticLocation(String filePath, int startLine, int endLine, int startColumn, int endColumn) {\n         this.lineRange = LineRange.from(filePath, LinePosition.from(startLine, startColumn),\n                 LinePosition.from(endLine, endColumn));\n         this.textRange = TextRange.from(0, 0);\n     }\n \n+    public BLangDiagnosticLocation(LineRange lineRange, TextRange textRange) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNzQwNg=="}, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIyMDIxOA==", "bodyText": "Since these are internal classes, we can add it when we have a solid requirement", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r508220218", "createdAt": "2020-10-20T05:35:08Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLocation.java", "diffHunk": "@@ -34,12 +34,18 @@\n     private LineRange lineRange;\n     private TextRange textRange;\n \n+    @Deprecated\n     public BLangDiagnosticLocation(String filePath, int startLine, int endLine, int startColumn, int endColumn) {\n         this.lineRange = LineRange.from(filePath, LinePosition.from(startLine, startColumn),\n                 LinePosition.from(endLine, endColumn));\n         this.textRange = TextRange.from(0, 0);\n     }\n \n+    public BLangDiagnosticLocation(LineRange lineRange, TextRange textRange) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNzQwNg=="}, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxMjA1NQ==", "bodyText": "okay", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r508312055", "createdAt": "2020-10-20T08:33:55Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BLangDiagnosticLocation.java", "diffHunk": "@@ -34,12 +34,18 @@\n     private LineRange lineRange;\n     private TextRange textRange;\n \n+    @Deprecated\n     public BLangDiagnosticLocation(String filePath, int startLine, int endLine, int startColumn, int endColumn) {\n         this.lineRange = LineRange.from(filePath, LinePosition.from(startLine, startColumn),\n                 LinePosition.from(endLine, endColumn));\n         this.textRange = TextRange.from(0, 0);\n     }\n \n+    public BLangDiagnosticLocation(LineRange lineRange, TextRange textRange) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNzQwNg=="}, "originalCommit": {"oid": "879fe81a5bfa536ea681759e5e10cfff0d176400"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTY3MDI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDoyODowM1rOHk_3Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDoyODowM1rOHk_3Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1NzA2Mw==", "bodyText": "Shall we invert the condition and do early exit?\nif (!bLangPackage.packageID.equals(symbol.pkgID)) {\n    return false;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r508557063", "createdAt": "2020-10-20T14:28:03Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -160,9 +160,34 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n \n     // Private helper methods for the public APIs above.\n \n-    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+    private boolean isSymbolInUserProject(BSymbol symbol, Location cursorPos) {\n+        int value = 0;\n+\n+        LinePosition cursorPosStartLine = cursorPos.lineRange().startLine();\n+        LinePosition symbolStartLine = symbol.pos.lineRange().startLine();\n+\n+        if (bLangPackage.packageID.equals(symbol.pkgID)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2adc278f705b6476d857752008b01dc0c7bcc5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTcxNDcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozNjozMVrOHlATVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1NDo1NlrOHlZTuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2NDMwOA==", "bodyText": "Can simplify this as:\nif (symbol.owner.getKind() == SymbolKind.PACKAGE || Symbols.isFlagOn(symbol.flags, Flags.WORKER) {\n   return true;\n}\n\nif (cursorPosStartLine.line() < symbolStartLine.line()) {\n    return false;\n} \n\nif (cursorPosStartLine.line() > symbolStartLine.line()) {\n    return true;\n}\n\n// means line numbers are equal. check for the column numbers\nreturn cursorPosStartLine.offset() <= symbolStartLine.offset();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r508564308", "createdAt": "2020-10-20T14:36:31Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -160,9 +160,34 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n \n     // Private helper methods for the public APIs above.\n \n-    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+    private boolean isSymbolInUserProject(BSymbol symbol, Location cursorPos) {\n+        int value = 0;\n+\n+        LinePosition cursorPosStartLine = cursorPos.lineRange().startLine();\n+        LinePosition symbolStartLine = symbol.pos.lineRange().startLine();\n+\n+        if (bLangPackage.packageID.equals(symbol.pkgID)) {\n+            // If the package detail strings are same, then compare the start line.\n+            if (cursorPosStartLine.line() < symbolStartLine.line()) {\n+                value = -1;\n+            } else if (cursorPosStartLine.line() > symbolStartLine.line()) {\n+                value = 1;\n+            }\n+\n+            if (value == 0) {\n+                // If the start line is the same, then compare the start column.\n+                if (cursorPosStartLine.offset() < symbolStartLine.offset()) {\n+                    value = -1;\n+                } else if (cursorPosStartLine.offset() > symbolStartLine.offset()) {\n+                    value = 1;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2adc278f705b6476d857752008b01dc0c7bcc5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2NzczMA==", "bodyText": "btw, shouldn't we check for the in-range kinda check?\nCheck here for a similar one: https://github.com/ballerina-platform/ballerina-lang/blob/master/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java#L32", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r508567730", "createdAt": "2020-10-20T14:40:29Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -160,9 +160,34 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n \n     // Private helper methods for the public APIs above.\n \n-    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+    private boolean isSymbolInUserProject(BSymbol symbol, Location cursorPos) {\n+        int value = 0;\n+\n+        LinePosition cursorPosStartLine = cursorPos.lineRange().startLine();\n+        LinePosition symbolStartLine = symbol.pos.lineRange().startLine();\n+\n+        if (bLangPackage.packageID.equals(symbol.pkgID)) {\n+            // If the package detail strings are same, then compare the start line.\n+            if (cursorPosStartLine.line() < symbolStartLine.line()) {\n+                value = -1;\n+            } else if (cursorPosStartLine.line() > symbolStartLine.line()) {\n+                value = 1;\n+            }\n+\n+            if (value == 0) {\n+                // If the start line is the same, then compare the start column.\n+                if (cursorPosStartLine.offset() < symbolStartLine.offset()) {\n+                    value = -1;\n+                } else if (cursorPosStartLine.offset() > symbolStartLine.offset()) {\n+                    value = 1;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2NDMwOA=="}, "originalCommit": {"oid": "2f2adc278f705b6476d857752008b01dc0c7bcc5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5NDU3MA==", "bodyText": "Yeah I think the name of the function should be changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r508694570", "createdAt": "2020-10-20T17:03:25Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -160,9 +160,34 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n \n     // Private helper methods for the public APIs above.\n \n-    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+    private boolean isSymbolInUserProject(BSymbol symbol, Location cursorPos) {\n+        int value = 0;\n+\n+        LinePosition cursorPosStartLine = cursorPos.lineRange().startLine();\n+        LinePosition symbolStartLine = symbol.pos.lineRange().startLine();\n+\n+        if (bLangPackage.packageID.equals(symbol.pkgID)) {\n+            // If the package detail strings are same, then compare the start line.\n+            if (cursorPosStartLine.line() < symbolStartLine.line()) {\n+                value = -1;\n+            } else if (cursorPosStartLine.line() > symbolStartLine.line()) {\n+                value = 1;\n+            }\n+\n+            if (value == 0) {\n+                // If the start line is the same, then compare the start column.\n+                if (cursorPosStartLine.offset() < symbolStartLine.offset()) {\n+                    value = -1;\n+                } else if (cursorPosStartLine.offset() > symbolStartLine.offset()) {\n+                    value = 1;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2NDMwOA=="}, "originalCommit": {"oid": "2f2adc278f705b6476d857752008b01dc0c7bcc5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NjE2Mw==", "bodyText": "The current one only seems to check for the start line/columns info only.\nIf we are doing a range check, shouldn't we check for the ending line/column info as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r508756163", "createdAt": "2020-10-20T18:41:03Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -160,9 +160,34 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n \n     // Private helper methods for the public APIs above.\n \n-    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+    private boolean isSymbolInUserProject(BSymbol symbol, Location cursorPos) {\n+        int value = 0;\n+\n+        LinePosition cursorPosStartLine = cursorPos.lineRange().startLine();\n+        LinePosition symbolStartLine = symbol.pos.lineRange().startLine();\n+\n+        if (bLangPackage.packageID.equals(symbol.pkgID)) {\n+            // If the package detail strings are same, then compare the start line.\n+            if (cursorPosStartLine.line() < symbolStartLine.line()) {\n+                value = -1;\n+            } else if (cursorPosStartLine.line() > symbolStartLine.line()) {\n+                value = 1;\n+            }\n+\n+            if (value == 0) {\n+                // If the start line is the same, then compare the start column.\n+                if (cursorPosStartLine.offset() < symbolStartLine.offset()) {\n+                    value = -1;\n+                } else if (cursorPosStartLine.offset() > symbolStartLine.offset()) {\n+                    value = 1;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2NDMwOA=="}, "originalCommit": {"oid": "2f2adc278f705b6476d857752008b01dc0c7bcc5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3NDAwOQ==", "bodyText": "what this function does is checking whether the current cursor position has passed the position of symbol. So, do we need to check the endline ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26364#discussion_r508974009", "createdAt": "2020-10-21T03:54:56Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -160,9 +160,34 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n \n     // Private helper methods for the public APIs above.\n \n-    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+    private boolean isSymbolInUserProject(BSymbol symbol, Location cursorPos) {\n+        int value = 0;\n+\n+        LinePosition cursorPosStartLine = cursorPos.lineRange().startLine();\n+        LinePosition symbolStartLine = symbol.pos.lineRange().startLine();\n+\n+        if (bLangPackage.packageID.equals(symbol.pkgID)) {\n+            // If the package detail strings are same, then compare the start line.\n+            if (cursorPosStartLine.line() < symbolStartLine.line()) {\n+                value = -1;\n+            } else if (cursorPosStartLine.line() > symbolStartLine.line()) {\n+                value = 1;\n+            }\n+\n+            if (value == 0) {\n+                // If the start line is the same, then compare the start column.\n+                if (cursorPosStartLine.offset() < symbolStartLine.offset()) {\n+                    value = -1;\n+                } else if (cursorPosStartLine.offset() > symbolStartLine.offset()) {\n+                    value = 1;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2NDMwOA=="}, "originalCommit": {"oid": "2f2adc278f705b6476d857752008b01dc0c7bcc5"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4735, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}