{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDUzNzUx", "number": 22224, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNzo0MlrODro-wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMzoyMVrODrpH8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg2Nzg1OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNzo0MlrOF8GYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNzo0MlrOF8GYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzQyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Initialize the TCP socket client with the given client configuration.\n          \n          \n            \n                # Initializes the TCP socket client with the given client configuration.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398563423", "createdAt": "2020-03-26T13:17:42Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -32,6 +32,9 @@ public type Client client object {\n     public string? localAddress = ();\n     public int id = 0;\n \n+    # Initialize the TCP socket client with the given client configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg2OTAxOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNzo1OVrOF8GZFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxNzo1OVrOF8GZFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzYwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + clientConfig - This use to provide the configuration like host, port and timeout\n          \n          \n            \n                # + clientConfig - This is used to provide the configurations like host, port, and timeout", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398563606", "createdAt": "2020-03-26T13:17:59Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -32,6 +32,9 @@ public type Client client object {\n     public string? localAddress = ();\n     public int id = 0;\n \n+    # Initialize the TCP socket client with the given client configuration.\n+    #\n+    # + clientConfig - This use to provide the configuration like host, port and timeout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg2OTc3OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxODoxMlrOF8GZkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxODoxMlrOF8GZkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Initialize the TCP socket listener with a port and optional listener configuration.\n          \n          \n            \n                # Initializes the TCP socket listener with a port and an optional listener configuration.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398563728", "createdAt": "2020-03-26T13:18:12Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg3MDU2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxODoyNFrOF8GaEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxODoyNFrOF8GaEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2Mzg1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + port - The port number to which this listener is attached and listen\n          \n          \n            \n                # + port - The port number to which this listener is attached and will listen", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398563859", "createdAt": "2020-03-26T13:18:24Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg3MzU2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxOTowMlrOF8Gb4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxOTowMlrOF8Gb4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NDMyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n          \n          \n            \n                # + return - Returns an error if an error occurs while starting the server or returns nil otherwise.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398564323", "createdAt": "2020-03-26T13:19:02Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg3NjE4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxOTozN1rOF8Gdgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxOTozN1rOF8Gdgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NDczOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n          \n          \n            \n                # Stops the registered service. Behaviours of this and the `__immediateStop()` function are similar.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398564738", "createdAt": "2020-03-26T13:19:37Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg3NzQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxOTo1NVrOF8GeQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoxOTo1NVrOF8GeQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NDkyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n          \n          \n            \n                # + return - Returns an error if an error occurs while stopping the server or returns nil otherwise.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398564928", "createdAt": "2020-03-26T13:19:55Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg3OTYzOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMDoyNVrOF8GftA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMDoyNVrOF8GftA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NTMwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n          \n          \n            \n                # Stops the registered service. Behaviours of this and the `__gracefulStop()` function are similar.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398565300", "createdAt": "2020-03-26T13:20:25Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg4MDY4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMDo0MVrOF8GgYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMDo0MVrOF8GgYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NTQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n          \n          \n            \n                # + return - Returns an error if an error occurs while stopping the server or returns nil otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398565474", "createdAt": "2020-03-26T13:20:41Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg4MjkwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMToxN1rOF8Gh5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMToxN1rOF8Gh5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NTg2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets called every time a service attaches itself to this listener - also happens at module init time.\n          \n          \n            \n                # Gets called every time a service attaches itself to this listener. Also, happens at the initialization of  the module.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398565861", "createdAt": "2020-03-26T13:21:17Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg4NDE4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMTozMlrOF8Gimg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMTozMlrOF8Gimg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjA0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n          \n          \n            \n                # + return - Returns an error if an error occurs while attaching the service or returns nil otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398566042", "createdAt": "2020-03-26T13:21:32Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg4NTI2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMTo0N1rOF8GjSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMTo0N1rOF8GjSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjIxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets called every time a service detach itself to this listener\n          \n          \n            \n                # Gets called every time a service detaches itself from this listener", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398566217", "createdAt": "2020-03-26T13:21:47Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s);\n     }\n \n+    # Gets called every time a service detach itself to this listener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg4NjMzOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMjowNFrOF8Gj_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMjowNFrOF8Gj_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while detaching the service, returns nil otherwise\n          \n          \n            \n                # + return - Returns an error if an error occurs while detaching the service or returns nil otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398566397", "createdAt": "2020-03-26T13:22:04Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s);\n     }\n \n+    # Gets called every time a service detach itself to this listener\n+    #\n+    # + s - The type of the service to be detached\n+    # + return - Returns an error if encounters an error while detaching the service, returns nil otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg4NzQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMjoyMVrOF8Gksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMjoyMVrOF8Gksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support\n          \n          \n            \n                // Socket listener operations are strictly bound to the attached service. In fact, a listener doesn't support", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398566579", "createdAt": "2020-03-26T13:22:21Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s);\n     }\n \n+    # Gets called every time a service detach itself to this listener\n+    #\n+    # + s - The type of the service to be detached\n+    # + return - Returns an error if encounters an error while detaching the service, returns nil otherwise\n     public function __detach(service s) returns error? {\n-        // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support\n-        // for multiple services. So not removing already attached service during the detach.\n+    // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDg5MTM2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMzoyMVrOF8GnSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzoyMzoyMVrOF8GnSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NzI0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // for multiple services. So not removing already attached service during the detach.\n          \n          \n            \n                // multiple services. Therefore, an already attached service is not removed during the detachment.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398567243", "createdAt": "2020-03-26T13:23:21Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s);\n     }\n \n+    # Gets called every time a service detach itself to this listener\n+    #\n+    # + s - The type of the service to be detached\n+    # + return - Returns an error if encounters an error while detaching the service, returns nil otherwise\n     public function __detach(service s) returns error? {\n-        // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support\n-        // for multiple services. So not removing already attached service during the detach.\n+    // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support\n+    // for multiple services. So not removing already attached service during the detach.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4578, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}