{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDUxMjAx", "number": 22222, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDo1ODo0NFrODsBBTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTo0NjoxOVrODshMUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDgwNjUzOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/BuildCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDo1ODo0NFrOF8sR_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjoyMDo0MlrOF9bCbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NDM4MA==", "bodyText": "I think we need this task for Test and Run command as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399184380", "createdAt": "2020-03-27T10:58:44Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/BuildCommand.java", "diffHunk": "@@ -390,6 +391,7 @@ public void execute() {\n                 // create the jar.\n                 .addTask(new CreateJarTask(this.dumpBIR, skipCopyLibsFromDist))\n                 .addTask(new CopyResourcesTask(), isSingleFileBuild)\n+                .addTask(new CopyObservabilitySymbolsTask(), isSingleFileBuild)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzMjk4NQ==", "bodyText": "I think we don't need this for the test. But not sure, we need this for run command. @a5anka Are we trying to observe using run common?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399932985", "createdAt": "2020-03-30T05:21:28Z", "author": {"login": "hasithaa"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/BuildCommand.java", "diffHunk": "@@ -390,6 +391,7 @@ public void execute() {\n                 // create the jar.\n                 .addTask(new CreateJarTask(this.dumpBIR, skipCopyLibsFromDist))\n                 .addTask(new CopyResourcesTask(), isSingleFileBuild)\n+                .addTask(new CopyObservabilitySymbolsTask(), isSingleFileBuild)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NDM4MA=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1MDQ0Ng==", "bodyText": "Actually, I added this to run command. In the future users might need to run with observability features fro advanced debugging use cases with Choreo. Therefore it will be easier for the user if we have this enabled for run command. Isn't it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399950446", "createdAt": "2020-03-30T06:20:42Z", "author": {"login": "a5anka"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/BuildCommand.java", "diffHunk": "@@ -390,6 +391,7 @@ public void execute() {\n                 // create the jar.\n                 .addTask(new CreateJarTask(this.dumpBIR, skipCopyLibsFromDist))\n                 .addTask(new CopyResourcesTask(), isSingleFileBuild)\n+                .addTask(new CopyObservabilitySymbolsTask(), isSingleFileBuild)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NDM4MA=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDk2NDA3OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyObservabilitySymbolsTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTo0ODozMVrOF8tytw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzowOTowNFrOF9cM9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwOTE0Mw==", "bodyText": "Shall we move this to createJarTask. AFAIU module jar with entry points should contain those sequence diagram json.\nThere is writeJarFile in CodeGenerater where we might need to modify that api with those resource files. So we do not need to create Jar File System again.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399209143", "createdAt": "2020-03-27T11:48:31Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyObservabilitySymbolsTask.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.task;\n+\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.wso2.ballerinalang.compiler.semantics.analyzer.ObserverbilitySymbolCollectorRunner;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Copy collected observability symbol to module jar.\n+ */\n+public class CopyObservabilitySymbolsTask implements Task {\n+\n+    @Override\n+    public void execute(BuildContext buildContext) {\n+        List<BLangPackage> modulesWithEntryPoints = buildContext.getModules().stream()\n+                .filter(m -> m.symbol.entryPointExists)\n+                .collect(Collectors.toList());\n+\n+        if (!modulesWithEntryPoints.isEmpty()) {\n+            CompilerContext compilerContext = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+            ObservabilitySymbolCollector observabilitySymbolCollector\n+                    = ObserverbilitySymbolCollectorRunner.getInstance(compilerContext);\n+\n+            for (BLangPackage module : modulesWithEntryPoints) {\n+                PackageID packageID = module.packageID;\n+                Path moduleJarPath = buildContext.getJarPathFromTargetCache(packageID);\n+                URI uberJarUri = URI.create(\"jar:\" + moduleJarPath.toUri().toString());\n+\n+                try (FileSystem toFs = FileSystems.newFileSystem(uberJarUri, Collections.emptyMap())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1OTc3NA==", "bodyText": "Shall we move this to createJarTask. AFAIU module jar with entry points should contain those sequence diagram json.\n\nCreateJarTask class is delegating the jar creation to backendDriver.execute therefore may be not the best place. And additionally, we use observabilty only to build and run. Therefore isn't it better to have a separate task?\nWe are already adding the sequence diagram JSON to all module jars with entry points. Refer https://github.com/ballerina-platform/ballerina-lang/pull/22222/files/28e3e366af91af5f08c3549d31f73c78986f155d#diff-7c4c3a978dc518ee1571ea5b436a401aR51\n\nThere is writeJarFile in CodeGenerater where we might need to modify that api with those resource files. So we do not need to create Jar File System again.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399959774", "createdAt": "2020-03-30T06:46:16Z", "author": {"login": "a5anka"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyObservabilitySymbolsTask.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.task;\n+\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.wso2.ballerinalang.compiler.semantics.analyzer.ObserverbilitySymbolCollectorRunner;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Copy collected observability symbol to module jar.\n+ */\n+public class CopyObservabilitySymbolsTask implements Task {\n+\n+    @Override\n+    public void execute(BuildContext buildContext) {\n+        List<BLangPackage> modulesWithEntryPoints = buildContext.getModules().stream()\n+                .filter(m -> m.symbol.entryPointExists)\n+                .collect(Collectors.toList());\n+\n+        if (!modulesWithEntryPoints.isEmpty()) {\n+            CompilerContext compilerContext = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+            ObservabilitySymbolCollector observabilitySymbolCollector\n+                    = ObserverbilitySymbolCollectorRunner.getInstance(compilerContext);\n+\n+            for (BLangPackage module : modulesWithEntryPoints) {\n+                PackageID packageID = module.packageID;\n+                Path moduleJarPath = buildContext.getJarPathFromTargetCache(packageID);\n+                URI uberJarUri = URI.create(\"jar:\" + moduleJarPath.toUri().toString());\n+\n+                try (FileSystem toFs = FileSystems.newFileSystem(uberJarUri, Collections.emptyMap())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwOTE0Mw=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2OTUyNg==", "bodyText": "IMO we need to provide an api for all the resources to pack during create module jar. For the moment this is fine.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399969526", "createdAt": "2020-03-30T07:09:04Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyObservabilitySymbolsTask.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.task;\n+\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.wso2.ballerinalang.compiler.semantics.analyzer.ObserverbilitySymbolCollectorRunner;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Copy collected observability symbol to module jar.\n+ */\n+public class CopyObservabilitySymbolsTask implements Task {\n+\n+    @Override\n+    public void execute(BuildContext buildContext) {\n+        List<BLangPackage> modulesWithEntryPoints = buildContext.getModules().stream()\n+                .filter(m -> m.symbol.entryPointExists)\n+                .collect(Collectors.toList());\n+\n+        if (!modulesWithEntryPoints.isEmpty()) {\n+            CompilerContext compilerContext = buildContext.get(BuildContextField.COMPILER_CONTEXT);\n+            ObservabilitySymbolCollector observabilitySymbolCollector\n+                    = ObserverbilitySymbolCollectorRunner.getInstance(compilerContext);\n+\n+            for (BLangPackage module : modulesWithEntryPoints) {\n+                PackageID packageID = module.packageID;\n+                Path moduleJarPath = buildContext.getJarPathFromTargetCache(packageID);\n+                URI uberJarUri = URI.create(\"jar:\" + moduleJarPath.toUri().toString());\n+\n+                try (FileSystem toFs = FileSystems.newFileSystem(uberJarUri, Collections.emptyMap())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwOTE0Mw=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDk3NDAyOnYy", "diffSide": "RIGHT", "path": "misc/observerability-symbol-collector/spotbugs-exclude.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTo1MTo0NlrOF8t40w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjoyMTowNVrOF9bDCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMDcwNw==", "bodyText": "I think we do not need this file since no spotbug element is skip.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399210707", "createdAt": "2020-03-27T11:51:46Z", "author": {"login": "warunalakshitha"}, "path": "misc/observerability-symbol-collector/spotbugs-exclude.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1MDYwMw==", "bodyText": "Removed in the latest commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399950603", "createdAt": "2020-03-30T06:21:05Z", "author": {"login": "a5anka"}, "path": "misc/observerability-symbol-collector/spotbugs-exclude.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<!--\n+  ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMDcwNw=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDk3NzA0OnYy", "diffSide": "RIGHT", "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTo1Mjo0OVrOF8t6wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjoyMTozNlrOF9bD2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMTIwMg==", "bodyText": "Shall we fix licence year and missing licence in other places as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399211202", "createdAt": "2020-03-27T11:52:49Z", "author": {"login": "warunalakshitha"}, "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1MDgxMQ==", "bodyText": "Done in the latest commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399950811", "createdAt": "2020-03-30T06:21:36Z", "author": {"login": "a5anka"}, "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMTIwMg=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAwMDQzOnYy", "diffSide": "RIGHT", "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowMDoxM1rOF8uI5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjoyMjo0N1rOF9bFYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNDgyMA==", "bodyText": "We do not recommend to use stream api if performance is critical", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399214820", "createdAt": "2020-03-27T12:00:13Z", "author": {"login": "warunalakshitha"}, "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.observability.anaylze;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.ballerinalang.langserver.compiler.common.modal.SymbolMetaInfo;\n+import org.ballerinalang.langserver.compiler.format.JSONGenerationException;\n+import org.ballerinalang.langserver.compiler.format.TextDocumentFormatUtil;\n+import org.ballerinalang.langserver.extensions.VisibleEndpointVisitor;\n+import org.ballerinalang.util.diagnostic.Diagnostic;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.SourceDirectory;\n+import org.wso2.ballerinalang.compiler.SourceDirectoryManager;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.BLangDiagnosticLogHelper;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Default implementation of ObserverbilitySymbolCollector.\n+ */\n+public class DefaultObservabilitySymbolCollector implements ObservabilitySymbolCollector {\n+    private final PrintStream console = System.out;\n+\n+    private static final String NAME = \"name\";\n+    private static final String ORG_NAME = \"orgName\";\n+    private static final String PKG_VERSION = \"pkgVersion\";\n+    private static final String COMPILATION_UNITS = \"compilationUnits\";\n+    private static final String SRC = \"src\";\n+    private static final String KEY_URI = \"uri\";\n+    private static final String AST = \"ast\";\n+    private static final String JSON = \".json\";\n+    public static final String PROGRAM_HASH_KEY = \"PROGRAM_HASH\";\n+    public static final String AST_META_FILENAME = \"meta.properties\";\n+\n+    private CompilerContext compilerContext;\n+\n+    private DiagnosticLog diagnosticLog;\n+\n+    @Override\n+    public void init(CompilerContext context) {\n+        compilerContext = context;\n+        diagnosticLog = BLangDiagnosticLogHelper.getInstance(context);\n+    }\n+\n+    @Override\n+    public void process(BLangPackage module) {\n+        JsonObject moduleJson = getModuleJson(module);\n+        JsonASTHolder.getInstance().addAST(module.packageID.name.getValue(), moduleJson);\n+    }\n+\n+    @Override\n+    public void writeCollectedSymbols(BLangPackage module, Path destination) throws IOException {\n+        Path targetDirPath = destination.resolve(AST);\n+        if (Files.notExists(targetDirPath)) {\n+            Files.createDirectory(targetDirPath);\n+        }\n+        Set<String> packages = getUserPackages();\n+\n+        JsonObject ast = new JsonObject();\n+        for (Map.Entry<String, JsonObject> entry : JsonASTHolder.getInstance()\n+                .getASTMap().entrySet()) {\n+            if (packages.contains(entry.getKey())) {\n+                ast.add(entry.getKey(), entry.getValue());\n+            }\n+        }\n+\n+        String astDataString = JsonCanonicalizer.getEncodedString(ast.toString());\n+        Files.write(targetDirPath.resolve(AST + JSON), astDataString.getBytes(StandardCharsets.UTF_8));\n+\n+        Properties props = new Properties();\n+        props.setProperty(PROGRAM_HASH_KEY, String.valueOf(astDataString.hashCode()));\n+        try (OutputStream outputStream = Files.newOutputStream(targetDirPath.resolve(AST_META_FILENAME))) {\n+            props.store(outputStream, null);\n+        }\n+    }\n+\n+    private Set<String> getUserPackages() {\n+        SourceDirectoryManager sourceDirectoryManager = SourceDirectoryManager.getInstance(compilerContext);\n+        return sourceDirectoryManager.listSourceFilesAndPackages()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1MTIwMA==", "bodyText": "This is not in the critical path AFAIU. Is it ok if I keep this for readability?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399951200", "createdAt": "2020-03-30T06:22:47Z", "author": {"login": "a5anka"}, "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.observability.anaylze;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.ballerinalang.langserver.compiler.common.modal.SymbolMetaInfo;\n+import org.ballerinalang.langserver.compiler.format.JSONGenerationException;\n+import org.ballerinalang.langserver.compiler.format.TextDocumentFormatUtil;\n+import org.ballerinalang.langserver.extensions.VisibleEndpointVisitor;\n+import org.ballerinalang.util.diagnostic.Diagnostic;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.SourceDirectory;\n+import org.wso2.ballerinalang.compiler.SourceDirectoryManager;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.BLangDiagnosticLogHelper;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Default implementation of ObserverbilitySymbolCollector.\n+ */\n+public class DefaultObservabilitySymbolCollector implements ObservabilitySymbolCollector {\n+    private final PrintStream console = System.out;\n+\n+    private static final String NAME = \"name\";\n+    private static final String ORG_NAME = \"orgName\";\n+    private static final String PKG_VERSION = \"pkgVersion\";\n+    private static final String COMPILATION_UNITS = \"compilationUnits\";\n+    private static final String SRC = \"src\";\n+    private static final String KEY_URI = \"uri\";\n+    private static final String AST = \"ast\";\n+    private static final String JSON = \".json\";\n+    public static final String PROGRAM_HASH_KEY = \"PROGRAM_HASH\";\n+    public static final String AST_META_FILENAME = \"meta.properties\";\n+\n+    private CompilerContext compilerContext;\n+\n+    private DiagnosticLog diagnosticLog;\n+\n+    @Override\n+    public void init(CompilerContext context) {\n+        compilerContext = context;\n+        diagnosticLog = BLangDiagnosticLogHelper.getInstance(context);\n+    }\n+\n+    @Override\n+    public void process(BLangPackage module) {\n+        JsonObject moduleJson = getModuleJson(module);\n+        JsonASTHolder.getInstance().addAST(module.packageID.name.getValue(), moduleJson);\n+    }\n+\n+    @Override\n+    public void writeCollectedSymbols(BLangPackage module, Path destination) throws IOException {\n+        Path targetDirPath = destination.resolve(AST);\n+        if (Files.notExists(targetDirPath)) {\n+            Files.createDirectory(targetDirPath);\n+        }\n+        Set<String> packages = getUserPackages();\n+\n+        JsonObject ast = new JsonObject();\n+        for (Map.Entry<String, JsonObject> entry : JsonASTHolder.getInstance()\n+                .getASTMap().entrySet()) {\n+            if (packages.contains(entry.getKey())) {\n+                ast.add(entry.getKey(), entry.getValue());\n+            }\n+        }\n+\n+        String astDataString = JsonCanonicalizer.getEncodedString(ast.toString());\n+        Files.write(targetDirPath.resolve(AST + JSON), astDataString.getBytes(StandardCharsets.UTF_8));\n+\n+        Properties props = new Properties();\n+        props.setProperty(PROGRAM_HASH_KEY, String.valueOf(astDataString.hashCode()));\n+        try (OutputStream outputStream = Files.newOutputStream(targetDirPath.resolve(AST_META_FILENAME))) {\n+            props.store(outputStream, null);\n+        }\n+    }\n+\n+    private Set<String> getUserPackages() {\n+        SourceDirectoryManager sourceDirectoryManager = SourceDirectoryManager.getInstance(compilerContext);\n+        return sourceDirectoryManager.listSourceFilesAndPackages()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNDgyMA=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAwODYxOnYy", "diffSide": "RIGHT", "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowMjo1N1rOF8uNzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMzo0NDo1MFrOF9GieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNjA3Nw==", "bodyText": "Do we need to encode the json.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399216077", "createdAt": "2020-03-27T12:02:57Z", "author": {"login": "warunalakshitha"}, "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.observability.anaylze;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.ballerinalang.langserver.compiler.common.modal.SymbolMetaInfo;\n+import org.ballerinalang.langserver.compiler.format.JSONGenerationException;\n+import org.ballerinalang.langserver.compiler.format.TextDocumentFormatUtil;\n+import org.ballerinalang.langserver.extensions.VisibleEndpointVisitor;\n+import org.ballerinalang.util.diagnostic.Diagnostic;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.SourceDirectory;\n+import org.wso2.ballerinalang.compiler.SourceDirectoryManager;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.BLangDiagnosticLogHelper;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Default implementation of ObserverbilitySymbolCollector.\n+ */\n+public class DefaultObservabilitySymbolCollector implements ObservabilitySymbolCollector {\n+    private final PrintStream console = System.out;\n+\n+    private static final String NAME = \"name\";\n+    private static final String ORG_NAME = \"orgName\";\n+    private static final String PKG_VERSION = \"pkgVersion\";\n+    private static final String COMPILATION_UNITS = \"compilationUnits\";\n+    private static final String SRC = \"src\";\n+    private static final String KEY_URI = \"uri\";\n+    private static final String AST = \"ast\";\n+    private static final String JSON = \".json\";\n+    public static final String PROGRAM_HASH_KEY = \"PROGRAM_HASH\";\n+    public static final String AST_META_FILENAME = \"meta.properties\";\n+\n+    private CompilerContext compilerContext;\n+\n+    private DiagnosticLog diagnosticLog;\n+\n+    @Override\n+    public void init(CompilerContext context) {\n+        compilerContext = context;\n+        diagnosticLog = BLangDiagnosticLogHelper.getInstance(context);\n+    }\n+\n+    @Override\n+    public void process(BLangPackage module) {\n+        JsonObject moduleJson = getModuleJson(module);\n+        JsonASTHolder.getInstance().addAST(module.packageID.name.getValue(), moduleJson);\n+    }\n+\n+    @Override\n+    public void writeCollectedSymbols(BLangPackage module, Path destination) throws IOException {\n+        Path targetDirPath = destination.resolve(AST);\n+        if (Files.notExists(targetDirPath)) {\n+            Files.createDirectory(targetDirPath);\n+        }\n+        Set<String> packages = getUserPackages();\n+\n+        JsonObject ast = new JsonObject();\n+        for (Map.Entry<String, JsonObject> entry : JsonASTHolder.getInstance()\n+                .getASTMap().entrySet()) {\n+            if (packages.contains(entry.getKey())) {\n+                ast.add(entry.getKey(), entry.getValue());\n+            }\n+        }\n+\n+        String astDataString = JsonCanonicalizer.getEncodedString(ast.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxNDU4NA==", "bodyText": "This is to canonicalize the JSON output to ensure that we generate the same JSON when the program does not change. Without this, we observed that the order of items in the JSON changing.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399614584", "createdAt": "2020-03-28T03:44:50Z", "author": {"login": "a5anka"}, "path": "misc/observerability-symbol-collector/src/main/java/org/ballerinalang/observability/anaylze/DefaultObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.observability.anaylze;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import org.ballerinalang.langserver.compiler.common.modal.SymbolMetaInfo;\n+import org.ballerinalang.langserver.compiler.format.JSONGenerationException;\n+import org.ballerinalang.langserver.compiler.format.TextDocumentFormatUtil;\n+import org.ballerinalang.langserver.extensions.VisibleEndpointVisitor;\n+import org.ballerinalang.util.diagnostic.Diagnostic;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.SourceDirectory;\n+import org.wso2.ballerinalang.compiler.SourceDirectoryManager;\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangCompilationUnit;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.BLangDiagnosticLogHelper;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Default implementation of ObserverbilitySymbolCollector.\n+ */\n+public class DefaultObservabilitySymbolCollector implements ObservabilitySymbolCollector {\n+    private final PrintStream console = System.out;\n+\n+    private static final String NAME = \"name\";\n+    private static final String ORG_NAME = \"orgName\";\n+    private static final String PKG_VERSION = \"pkgVersion\";\n+    private static final String COMPILATION_UNITS = \"compilationUnits\";\n+    private static final String SRC = \"src\";\n+    private static final String KEY_URI = \"uri\";\n+    private static final String AST = \"ast\";\n+    private static final String JSON = \".json\";\n+    public static final String PROGRAM_HASH_KEY = \"PROGRAM_HASH\";\n+    public static final String AST_META_FILENAME = \"meta.properties\";\n+\n+    private CompilerContext compilerContext;\n+\n+    private DiagnosticLog diagnosticLog;\n+\n+    @Override\n+    public void init(CompilerContext context) {\n+        compilerContext = context;\n+        diagnosticLog = BLangDiagnosticLogHelper.getInstance(context);\n+    }\n+\n+    @Override\n+    public void process(BLangPackage module) {\n+        JsonObject moduleJson = getModuleJson(module);\n+        JsonASTHolder.getInstance().addAST(module.packageID.name.getValue(), moduleJson);\n+    }\n+\n+    @Override\n+    public void writeCollectedSymbols(BLangPackage module, Path destination) throws IOException {\n+        Path targetDirPath = destination.resolve(AST);\n+        if (Files.notExists(targetDirPath)) {\n+            Files.createDirectory(targetDirPath);\n+        }\n+        Set<String> packages = getUserPackages();\n+\n+        JsonObject ast = new JsonObject();\n+        for (Map.Entry<String, JsonObject> entry : JsonASTHolder.getInstance()\n+                .getASTMap().entrySet()) {\n+            if (packages.contains(entry.getKey())) {\n+                ast.add(entry.getKey(), entry.getValue());\n+            }\n+        }\n+\n+        String astDataString = JsonCanonicalizer.getEncodedString(ast.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNjA3Nw=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDA1OTMzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/NullObservabiltySymbolCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTozNTo1NVrOF9aNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjoyMzoyMlrOF9bGCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzNjgyMQ==", "bodyText": "No Licence header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399936821", "createdAt": "2020-03-30T05:35:55Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/NullObservabiltySymbolCollector.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1MTM3MA==", "bodyText": "Added in the latest commit.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399951370", "createdAt": "2020-03-30T06:23:22Z", "author": {"login": "a5anka"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/NullObservabiltySymbolCollector.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzNjgyMQ=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDA2MDcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/NullObservabiltySymbolCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTozNjo1MFrOF9aOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjoyMzo1MFrOF9bGnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzNzAyOA==", "bodyText": "As a practice, we add @since annotation. Please add that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399937028", "createdAt": "2020-03-30T05:36:50Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/NullObservabiltySymbolCollector.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;\n+\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.nio.file.Path;\n+\n+/**\n+ * Null Object for ObserverbilitySymbolCollector interface.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1MTUxNw==", "bodyText": "Added in the latest commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399951517", "createdAt": "2020-03-30T06:23:50Z", "author": {"login": "a5anka"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/NullObservabiltySymbolCollector.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;\n+\n+import org.wso2.ballerinalang.compiler.spi.ObservabilitySymbolCollector;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.nio.file.Path;\n+\n+/**\n+ * Null Object for ObserverbilitySymbolCollector interface.\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzNzAyOA=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDA2MTE1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/ObserverbilitySymbolCollectorRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTozNzowNlrOF9aOTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjoyNDozOFrOF9bHpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzNzEwMQ==", "bodyText": "Missing Licence header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399937101", "createdAt": "2020-03-30T05:37:06Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/ObserverbilitySymbolCollectorRunner.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1MTc4Mw==", "bodyText": "Added in the latest commit. I didn't have the copyright settings configured. I fixed it in the IDE.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399951783", "createdAt": "2020-03-30T06:24:38Z", "author": {"login": "a5anka"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/ObserverbilitySymbolCollectorRunner.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzNzEwMQ=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDA3NzYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/spi/ObservabilitySymbolCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTo0NjoxOVrOF9aYPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjoyNToxNFrOF9bIaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzOTY0Nw==", "bodyText": "Missing Licence header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399939647", "createdAt": "2020-03-30T05:46:19Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/spi/ObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.wso2.ballerinalang.compiler.spi;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1MTk3Nw==", "bodyText": "Added in latest commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22222#discussion_r399951977", "createdAt": "2020-03-30T06:25:14Z", "author": {"login": "a5anka"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/spi/ObservabilitySymbolCollector.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.wso2.ballerinalang.compiler.spi;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzOTY0Nw=="}, "originalCommit": {"oid": "28e3e366af91af5f08c3549d31f73c78986f155d"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4571, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}