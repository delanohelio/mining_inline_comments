{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NjM3Njc1", "number": 26717, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozODo1MFrOE1Eauw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo1ODoyM1rOE7fjvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDgyMzYzOnYy", "diffSide": "RIGHT", "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Schema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozODo1MFrOHtI4Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozODo1MFrOHtI4Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MzM4Mg==", "bodyText": "Licenses should come to the top.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r517093382", "createdAt": "2020-11-04T04:38:50Z", "author": {"login": "anuruddhal"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Schema.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.ballerina.toml.validator.models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0ebf5f973c60a7e17e18a84d2f96a3a5aeb830"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTAzODgzOnYy", "diffSide": "RIGHT", "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0MjoyN1rOHtK0Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0MjoyN1rOHtK0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyNTIwNg==", "bodyText": "Shall we add proper messages?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r517125206", "createdAt": "2020-11-04T06:42:27Z", "author": {"login": "anuruddhal"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;\n+\n+import io.ballerina.toml.semantic.TomlType;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Contains the validation logic related to Type checking and type related validations.\n+ *\n+ * @since 2.0.0\n+ */\n+public class Type implements Command {\n+\n+    private final Schema schema;\n+    private final TopLevelNode topLevelNode;\n+\n+    public Type(Schema schema, TopLevelNode topLevelNode) {\n+        this.schema = schema;\n+        this.topLevelNode = topLevelNode;\n+    }\n+\n+    @Override\n+    public List<TomlDiagnostic> apply() {\n+        List<TomlDiagnostic> diagnostics = new ArrayList<>();\n+\n+        if (topLevelNode == null) {\n+            return diagnostics;\n+        }\n+\n+        if (schema.getType().equals(\"object\")) {\n+            if (topLevelNode.kind() != TomlType.TABLE) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(topLevelNode.location(), \"0000\", \"Message Here\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0ebf5f973c60a7e17e18a84d2f96a3a5aeb830"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTM0OTAxOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0NjowNVrOHxo2og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0NjowNVrOHxo2og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMTYxOA==", "bodyText": "Do we need this method?\nWe can use String content = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8); to get the content from input stream", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521811618", "createdAt": "2020-11-12T03:46:05Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -82,45 +100,46 @@ public static Toml read(Path path) throws IOException {\n      * @throws IOException if file is not accessible\n      */\n     public static Toml read(InputStream inputStream) throws IOException {\n-        return read(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n+        return read(new InputStreamReader(inputStream, StandardCharsets.UTF_8), null);\n     }\n \n     /**\n      * Read TOML File using Reader.\n      *\n      * @param reader reader of the TOML file\n+     * @param filePath path of the TOML file\n      * @return TOML Object\n      * @throws IOException if file is not accessible\n      */\n-    public static Toml read(Reader reader) throws IOException {\n+    public static Toml read(Reader reader, String filePath) throws IOException {\n         BufferedReader bufferedReader = new BufferedReader(reader);\n         StringBuilder w = new StringBuilder();\n         for (String line = bufferedReader.readLine(); line != null; line = bufferedReader.readLine()) {\n             w.append(line).append('\\n');\n         }\n-        return read(w.toString());\n+        return read(w.toString(), filePath);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTM1OTkzOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0ODo0N1rOHxo9qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0ODo0N1rOHxo9qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzQxNw==", "bodyText": "We could use Files.readString(path)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521813417", "createdAt": "2020-11-12T03:48:47Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -71,7 +84,12 @@ private Toml(TomlTableNode tomlTableNode) {\n      * @throws IOException if file is not accessible\n      */\n     public static Toml read(Path path) throws IOException {\n-        return read(Files.newBufferedReader(path));\n+        Path fileNamePath = path.getFileName();\n+        if (fileNamePath == null) {\n+            return null;\n+        }\n+        return read(Files.newBufferedReader(path),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTM3NjE1OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1Mjo1MlrOHxpIKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1Mjo1MlrOHxpIKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxNjEwNw==", "bodyText": "In getTable method, the condition in the if-clause is inverted. It's good to follow a single pattern in all places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521816107", "createdAt": "2020-11-12T03:52:52Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -169,7 +188,7 @@ public Toml getTable(String key) {\n      */\n     public List<Toml> getTables(String key) {\n         TopLevelNode tableNode = rootNode.children().get(key);\n-        if (tableNode.kind() == TomlType.TABLE_ARRAY) {\n+        if (tableNode != null && tableNode.kind() == TomlType.TABLE_ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTM4NDM3OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1NDo1N1rOHxpNyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1NDo1N1rOHxpNyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxNzU0NA==", "bodyText": "We can use a TreeSet with DiagnosticComparator to store diagnostics. Then we don't have to sort it every-time here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521817544", "createdAt": "2020-11-12T03:54:57Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -181,7 +200,12 @@ public Toml getTable(String key) {\n         return null;\n     }\n \n-    public List<TomlDiagnostic> getDiagnostics() {\n-        return this.rootNode.diagnostics();\n+    public List<Diagnostic> getDiagnostics() {\n+        this.diagnostics.sort(new DiagnosticComparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTQxMDU0OnYy", "diffSide": "RIGHT", "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMTozNFrOHxpfUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDowNTo0MVrOHyoNdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjAzMg==", "bodyText": "Shall we use the visitor pattern for validations? Each separate validator is a new visitor.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521822032", "createdAt": "2020-11-12T04:01:34Z", "author": {"login": "SupunS"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;\n+\n+import io.ballerina.toml.semantic.TomlType;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Contains the validation logic related to Type checking and type related validations.\n+ *\n+ * @since 2.0.0\n+ */\n+public class Type implements Command {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyODQ3NQ==", "bodyText": "Can we call this a C2CSchemaValidator?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521828475", "createdAt": "2020-11-12T04:13:36Z", "author": {"login": "SupunS"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;\n+\n+import io.ballerina.toml.semantic.TomlType;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Contains the validation logic related to Type checking and type related validations.\n+ *\n+ * @since 2.0.0\n+ */\n+public class Type implements Command {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjAzMg=="}, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0OTY1Mw==", "bodyText": "This class contains Type related validations of toml. its not Toml specific.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r522849653", "createdAt": "2020-11-13T10:05:41Z", "author": {"login": "xlight05"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;\n+\n+import io.ballerina.toml.semantic.TomlType;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Contains the validation logic related to Type checking and type related validations.\n+ *\n+ * @since 2.0.0\n+ */\n+public class Type implements Command {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjAzMg=="}, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTQxNzYzOnYy", "diffSide": "RIGHT", "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMzozMVrOHxpj5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMzozMVrOHxpj5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMzIwNg==", "bodyText": "Instead of returning diagnostics as a list, Can we append them to the TOML model then and there?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521823206", "createdAt": "2020-11-12T04:03:31Z", "author": {"login": "SupunS"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;\n+\n+import io.ballerina.toml.semantic.TomlType;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Contains the validation logic related to Type checking and type related validations.\n+ *\n+ * @since 2.0.0\n+ */\n+public class Type implements Command {\n+\n+    private final Schema schema;\n+    private final TopLevelNode topLevelNode;\n+\n+    public Type(Schema schema, TopLevelNode topLevelNode) {\n+        this.schema = schema;\n+        this.topLevelNode = topLevelNode;\n+    }\n+\n+    @Override\n+    public List<Diagnostic> apply() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTQyODQ1OnYy", "diffSide": "RIGHT", "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/AdditionalProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowNjoxOFrOHxpq-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowNjoxOFrOHxpq-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyNTAxOA==", "bodyText": "Can we have a better name for AdditionalProperties?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521825018", "createdAt": "2020-11-12T04:06:18Z", "author": {"login": "SupunS"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/AdditionalProperties.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;\n+\n+import io.ballerina.toml.semantic.TomlType;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Contains the validation logic for AdditionalProperties in the JSON schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class AdditionalProperties implements Command {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTQ0MDI2OnYy", "diffSide": "RIGHT", "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Schema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowOToyMlrOHxpyig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowOToyMlrOHxpyig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyNjk1NA==", "bodyText": "Add java-docs for all public APIs", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521826954", "createdAt": "2020-11-12T04:09:22Z", "author": {"login": "SupunS"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Schema.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Represents deserialized version of a Json Schema.\n+ */\n+public class Schema {\n+    @SerializedName(\"$schema\")\n+    private String schema;\n+    private String title;\n+    private String description;\n+    private String type;\n+    private boolean additionalProperties;\n+    private Map<String, Schema> properties;\n+    private Schema items;\n+    private Integer minimum;\n+    private Integer maximum;\n+    private String pattern;\n+\n+    private Schema () {}\n+\n+    public static Schema from(Path jsonPath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTQ0MTk1OnYy", "diffSide": "RIGHT", "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Schema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowOTo0NVrOHxpzgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowOTo0NVrOHxpzgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyNzIwMA==", "bodyText": "Missing @since", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521827200", "createdAt": "2020-11-12T04:09:45Z", "author": {"login": "SupunS"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Schema.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Represents deserialized version of a Json Schema.\n+ */\n+public class Schema {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTQ1NTk1OnYy", "diffSide": "RIGHT", "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDoxNzoxNFrOHxp7vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo0NDoxMFrOHyGabw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyOTMwOQ==", "bodyText": "Since this is a C2C specific validator implementation, I think this should go to the C2C repo.\nThe base validator framework can be moved to the toml-parser module itself.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r521829309", "createdAt": "2020-11-12T04:17:14Z", "author": {"login": "SupunS"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5NTkxOQ==", "bodyText": "This is not a C2C specific implementation. We use C2C as a test case, other than that, all the source code is entirely independent and can be used with any json schema and toml file.\nThat means we'll move everything to toml parser module right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r522295919", "createdAt": "2020-11-12T17:44:10Z", "author": {"login": "xlight05"}, "path": "misc/toml-validator/src/main/java/io/ballerina/toml/validator/models/Type.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.models;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyOTMwOQ=="}, "originalCommit": {"oid": "735b35e4ad3f152d36632484187926ce0403c8cd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgxNDQ0OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/semantic/ast/TomlNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo0MToyMFrOH29jNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo0MToyMFrOH29jNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MzU5MQ==", "bodyText": "Remove the commented out codes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527393591", "createdAt": "2020-11-20T04:41:20Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/semantic/ast/TomlNode.java", "diffHunk": "@@ -32,29 +33,38 @@\n public abstract class TomlNode implements Node {\n \n     private final TomlType kind;\n-    private final List<TomlDiagnostic> diagnostics;\n-    private final TomlNodeLocation location; //The position of this node in the source file.\n+    private final TomlNodeLocation location;\n+    protected Set<Diagnostic> diagnostics;\n \n     public TomlNode(TomlType kind, TomlNodeLocation location) {\n-        this.diagnostics = new ArrayList<>();\n         this.kind = kind;\n         this.location = location;\n+        diagnostics = new TreeSet<>(new DiagnosticComparator());\n+//        copySyntaxDiagnostics();\n     }\n \n     public abstract void accept(TomlNodeVisitor visitor);\n \n-    public List<TomlDiagnostic> diagnostics() {\n+    public Set<Diagnostic> diagnostics() {\n         return diagnostics;\n     }\n \n-    public void addDiagnostic(TomlDiagnostic diagnostic) {\n+    public void addDiagnostic(Diagnostic diagnostic) {\n         diagnostics.add(diagnostic);\n     }\n \n     public TomlNodeLocation location() {\n         return location;\n     }\n \n+//    private void copySyntaxDiagnostics() {\n+//        if (stNode != null && stNode.hasDiagnostics()) {\n+//            for (Diagnostic diagnostic : stNode.diagnostics()) {\n+//                this.addDiagnostic(diagnostic);\n+//            }\n+//        }\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgxNzk0OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/semantic/ast/TomlNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo0MzowNFrOH29lIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo0MzowNFrOH29lIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NDA4Mg==", "bodyText": "Its better for the API to return a List<Diagnostic>", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527394082", "createdAt": "2020-11-20T04:43:04Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/semantic/ast/TomlNode.java", "diffHunk": "@@ -32,29 +33,38 @@\n public abstract class TomlNode implements Node {\n \n     private final TomlType kind;\n-    private final List<TomlDiagnostic> diagnostics;\n-    private final TomlNodeLocation location; //The position of this node in the source file.\n+    private final TomlNodeLocation location;\n+    protected Set<Diagnostic> diagnostics;\n \n     public TomlNode(TomlType kind, TomlNodeLocation location) {\n-        this.diagnostics = new ArrayList<>();\n         this.kind = kind;\n         this.location = location;\n+        diagnostics = new TreeSet<>(new DiagnosticComparator());\n+//        copySyntaxDiagnostics();\n     }\n \n     public abstract void accept(TomlNodeVisitor visitor);\n \n-    public List<TomlDiagnostic> diagnostics() {\n+    public Set<Diagnostic> diagnostics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgyMjUzOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo0NTozOVrOH29niQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo0NTozOVrOH29niQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NDY5Nw==", "bodyText": "Lets follow the early-exit pattern for if-else conditions", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527394697", "createdAt": "2020-11-20T04:45:39Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgyNzYxOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo0ODo0OFrOH29qcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDozNzoyNlrOH3KUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NTQ0MQ==", "bodyText": "Let's follow a similar approach that is used in the parser and compiler to log diagnostics, using diagnostic codes and templates.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527395441", "createdAt": "2020-11-20T04:48:48Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);\n+                if (abstractSchema != null) {\n+                    this.schema = abstractSchema;\n+                    this.key = key;\n+                    lookupNode(value);\n+                } else {\n+                    if (!objectSchema.hasAdditionalProperties()) {\n+                        DiagnosticInfo diagnosticInfo = new DiagnosticInfo(\"TVE0001\", \"warn.unexpected.property\",\n+                                DiagnosticSeverity.WARNING);\n+                        TomlDiagnostic diagnostic = new TomlDiagnostic(value.location(), diagnosticInfo,\n+                                \"Unexpected Property \\\"\" + key + \"\\\"\");\n+                        tomlTableNode.addDiagnostic(diagnostic);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlTableArrayNode tomlTableArrayNode) {\n+        if (schema.type() != Type.ARRAY) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlTableArrayNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found array\", this.key,\n+                                    schema.type()));\n+            tomlTableArrayNode.addDiagnostic(diagnostic);\n+        } else {\n+            ArraySchema arraySchema = (ArraySchema) schema;\n+            AbstractSchema items = arraySchema.items();\n+            List<TomlTableNode> children = tomlTableArrayNode.children();\n+            for (TomlTableNode child : children) {\n+                this.schema = items;\n+                visit(child);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlKeyValueNode keyValue) {\n+        TomlValueNode value = keyValue.value();\n+        lookupNode(value);\n+    }\n+\n+    @Override\n+    public void visit(TomlValueNode tomlValue) {\n+        lookupNode(tomlValue);\n+    }\n+\n+    @Override\n+    public void visit(TomlStringValueNode tomlStringValueNode) {\n+        if (schema.type() != Type.STRING) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" expects %s . Found string\", this.key, schema.type()));\n+            tomlStringValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            StringSchema stringSchema = (StringSchema) this.schema;\n+            if (stringSchema.pattern().isPresent()) {\n+                String pattern = stringSchema.pattern().get();\n+                if (!Pattern.compile(pattern).matcher(tomlStringValueNode.getValue()).matches()) {\n+                    TomlDiagnostic diagnostic = getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0003\",\n+                            \"error.regex.mismatch\", DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" value does not match the Regex provided in Schema %s\", this.key,\n+                                    pattern));\n+                    tomlStringValueNode.addDiagnostic(diagnostic);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlDoubleValueNodeNode tomlDoubleValueNodeNode) {\n+        if (schema.type() != Type.NUMBER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlDoubleValueNodeNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found number\", this.key, schema.type()));\n+            tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, tomlDoubleValueNodeNode.getValue(),\n+                            tomlDoubleValueNodeNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlLongValueNode tomlLongValueNode) {\n+        if (schema.type() != Type.INTEGER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlLongValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found integer\", this.key, schema.type()));\n+            tomlLongValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, Double.valueOf(tomlLongValueNode.getValue()),\n+                            tomlLongValueNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlLongValueNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    private List<Diagnostic> validateMinMaxValues(NumericSchema numericSchema, Double value,\n+                                                  TomlNodeLocation location) {\n+        List<Diagnostic> diagnostics = new ArrayList<>();\n+        if (numericSchema.maximum().isPresent()) {\n+            Double max = numericSchema.maximum().get();\n+            if (value >= max) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0005\", \"error\" +\n+                                \".maximum.value.exceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be higher than %f\", this.key,\n+                                max));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        if (numericSchema.minimum().isPresent()) {\n+            Double min = numericSchema.minimum().get();\n+            if (value <= min) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0004\",\n+                        \"error.minimum.value.deceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be lower than %f\", this.key,\n+                                min));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        return diagnostics;\n+    }\n+\n+    @Override\n+    public void visit(TomlBooleanValueNode tomlBooleanValueNode) {\n+        if (schema.type() != Type.BOOLEAN) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlBooleanValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found boolean\", this.key, schema.type()));\n+            tomlBooleanValueNode.addDiagnostic(diagnostic);\n+        }\n+    }\n+\n+    private void lookupNode(TomlNode node) {\n+        AbstractSchema previousSchema = this.schema;\n+        String previousKey = this.key;\n+        node.accept(this);\n+        this.schema = previousSchema;\n+        this.key = previousKey;\n+    }\n+\n+    private TomlDiagnostic getTomlDiagnostic(TomlNodeLocation location, String code, String template,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NDk2MQ==", "bodyText": "Is it ok if we do this in a separate PR? there are some things that needs to be discussed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527574961", "createdAt": "2020-11-20T09:51:23Z", "author": {"login": "xlight05"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);\n+                if (abstractSchema != null) {\n+                    this.schema = abstractSchema;\n+                    this.key = key;\n+                    lookupNode(value);\n+                } else {\n+                    if (!objectSchema.hasAdditionalProperties()) {\n+                        DiagnosticInfo diagnosticInfo = new DiagnosticInfo(\"TVE0001\", \"warn.unexpected.property\",\n+                                DiagnosticSeverity.WARNING);\n+                        TomlDiagnostic diagnostic = new TomlDiagnostic(value.location(), diagnosticInfo,\n+                                \"Unexpected Property \\\"\" + key + \"\\\"\");\n+                        tomlTableNode.addDiagnostic(diagnostic);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlTableArrayNode tomlTableArrayNode) {\n+        if (schema.type() != Type.ARRAY) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlTableArrayNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found array\", this.key,\n+                                    schema.type()));\n+            tomlTableArrayNode.addDiagnostic(diagnostic);\n+        } else {\n+            ArraySchema arraySchema = (ArraySchema) schema;\n+            AbstractSchema items = arraySchema.items();\n+            List<TomlTableNode> children = tomlTableArrayNode.children();\n+            for (TomlTableNode child : children) {\n+                this.schema = items;\n+                visit(child);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlKeyValueNode keyValue) {\n+        TomlValueNode value = keyValue.value();\n+        lookupNode(value);\n+    }\n+\n+    @Override\n+    public void visit(TomlValueNode tomlValue) {\n+        lookupNode(tomlValue);\n+    }\n+\n+    @Override\n+    public void visit(TomlStringValueNode tomlStringValueNode) {\n+        if (schema.type() != Type.STRING) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" expects %s . Found string\", this.key, schema.type()));\n+            tomlStringValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            StringSchema stringSchema = (StringSchema) this.schema;\n+            if (stringSchema.pattern().isPresent()) {\n+                String pattern = stringSchema.pattern().get();\n+                if (!Pattern.compile(pattern).matcher(tomlStringValueNode.getValue()).matches()) {\n+                    TomlDiagnostic diagnostic = getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0003\",\n+                            \"error.regex.mismatch\", DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" value does not match the Regex provided in Schema %s\", this.key,\n+                                    pattern));\n+                    tomlStringValueNode.addDiagnostic(diagnostic);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlDoubleValueNodeNode tomlDoubleValueNodeNode) {\n+        if (schema.type() != Type.NUMBER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlDoubleValueNodeNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found number\", this.key, schema.type()));\n+            tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, tomlDoubleValueNodeNode.getValue(),\n+                            tomlDoubleValueNodeNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlLongValueNode tomlLongValueNode) {\n+        if (schema.type() != Type.INTEGER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlLongValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found integer\", this.key, schema.type()));\n+            tomlLongValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, Double.valueOf(tomlLongValueNode.getValue()),\n+                            tomlLongValueNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlLongValueNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    private List<Diagnostic> validateMinMaxValues(NumericSchema numericSchema, Double value,\n+                                                  TomlNodeLocation location) {\n+        List<Diagnostic> diagnostics = new ArrayList<>();\n+        if (numericSchema.maximum().isPresent()) {\n+            Double max = numericSchema.maximum().get();\n+            if (value >= max) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0005\", \"error\" +\n+                                \".maximum.value.exceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be higher than %f\", this.key,\n+                                max));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        if (numericSchema.minimum().isPresent()) {\n+            Double min = numericSchema.minimum().get();\n+            if (value <= min) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0004\",\n+                        \"error.minimum.value.deceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be lower than %f\", this.key,\n+                                min));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        return diagnostics;\n+    }\n+\n+    @Override\n+    public void visit(TomlBooleanValueNode tomlBooleanValueNode) {\n+        if (schema.type() != Type.BOOLEAN) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlBooleanValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found boolean\", this.key, schema.type()));\n+            tomlBooleanValueNode.addDiagnostic(diagnostic);\n+        }\n+    }\n+\n+    private void lookupNode(TomlNode node) {\n+        AbstractSchema previousSchema = this.schema;\n+        String previousKey = this.key;\n+        node.accept(this);\n+        this.schema = previousSchema;\n+        this.key = previousKey;\n+    }\n+\n+    private TomlDiagnostic getTomlDiagnostic(TomlNodeLocation location, String code, String template,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NTQ0MQ=="}, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4MjI4MA==", "bodyText": "Yea, that should be fine", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527582280", "createdAt": "2020-11-20T10:02:49Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);\n+                if (abstractSchema != null) {\n+                    this.schema = abstractSchema;\n+                    this.key = key;\n+                    lookupNode(value);\n+                } else {\n+                    if (!objectSchema.hasAdditionalProperties()) {\n+                        DiagnosticInfo diagnosticInfo = new DiagnosticInfo(\"TVE0001\", \"warn.unexpected.property\",\n+                                DiagnosticSeverity.WARNING);\n+                        TomlDiagnostic diagnostic = new TomlDiagnostic(value.location(), diagnosticInfo,\n+                                \"Unexpected Property \\\"\" + key + \"\\\"\");\n+                        tomlTableNode.addDiagnostic(diagnostic);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlTableArrayNode tomlTableArrayNode) {\n+        if (schema.type() != Type.ARRAY) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlTableArrayNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found array\", this.key,\n+                                    schema.type()));\n+            tomlTableArrayNode.addDiagnostic(diagnostic);\n+        } else {\n+            ArraySchema arraySchema = (ArraySchema) schema;\n+            AbstractSchema items = arraySchema.items();\n+            List<TomlTableNode> children = tomlTableArrayNode.children();\n+            for (TomlTableNode child : children) {\n+                this.schema = items;\n+                visit(child);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlKeyValueNode keyValue) {\n+        TomlValueNode value = keyValue.value();\n+        lookupNode(value);\n+    }\n+\n+    @Override\n+    public void visit(TomlValueNode tomlValue) {\n+        lookupNode(tomlValue);\n+    }\n+\n+    @Override\n+    public void visit(TomlStringValueNode tomlStringValueNode) {\n+        if (schema.type() != Type.STRING) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" expects %s . Found string\", this.key, schema.type()));\n+            tomlStringValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            StringSchema stringSchema = (StringSchema) this.schema;\n+            if (stringSchema.pattern().isPresent()) {\n+                String pattern = stringSchema.pattern().get();\n+                if (!Pattern.compile(pattern).matcher(tomlStringValueNode.getValue()).matches()) {\n+                    TomlDiagnostic diagnostic = getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0003\",\n+                            \"error.regex.mismatch\", DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" value does not match the Regex provided in Schema %s\", this.key,\n+                                    pattern));\n+                    tomlStringValueNode.addDiagnostic(diagnostic);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlDoubleValueNodeNode tomlDoubleValueNodeNode) {\n+        if (schema.type() != Type.NUMBER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlDoubleValueNodeNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found number\", this.key, schema.type()));\n+            tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, tomlDoubleValueNodeNode.getValue(),\n+                            tomlDoubleValueNodeNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlLongValueNode tomlLongValueNode) {\n+        if (schema.type() != Type.INTEGER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlLongValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found integer\", this.key, schema.type()));\n+            tomlLongValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, Double.valueOf(tomlLongValueNode.getValue()),\n+                            tomlLongValueNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlLongValueNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    private List<Diagnostic> validateMinMaxValues(NumericSchema numericSchema, Double value,\n+                                                  TomlNodeLocation location) {\n+        List<Diagnostic> diagnostics = new ArrayList<>();\n+        if (numericSchema.maximum().isPresent()) {\n+            Double max = numericSchema.maximum().get();\n+            if (value >= max) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0005\", \"error\" +\n+                                \".maximum.value.exceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be higher than %f\", this.key,\n+                                max));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        if (numericSchema.minimum().isPresent()) {\n+            Double min = numericSchema.minimum().get();\n+            if (value <= min) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0004\",\n+                        \"error.minimum.value.deceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be lower than %f\", this.key,\n+                                min));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        return diagnostics;\n+    }\n+\n+    @Override\n+    public void visit(TomlBooleanValueNode tomlBooleanValueNode) {\n+        if (schema.type() != Type.BOOLEAN) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlBooleanValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found boolean\", this.key, schema.type()));\n+            tomlBooleanValueNode.addDiagnostic(diagnostic);\n+        }\n+    }\n+\n+    private void lookupNode(TomlNode node) {\n+        AbstractSchema previousSchema = this.schema;\n+        String previousKey = this.key;\n+        node.accept(this);\n+        this.schema = previousSchema;\n+        this.key = previousKey;\n+    }\n+\n+    private TomlDiagnostic getTomlDiagnostic(TomlNodeLocation location, String code, String template,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NTQ0MQ=="}, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMjc4Mg==", "bodyText": "#27041", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527602782", "createdAt": "2020-11-20T10:37:26Z", "author": {"login": "xlight05"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);\n+                if (abstractSchema != null) {\n+                    this.schema = abstractSchema;\n+                    this.key = key;\n+                    lookupNode(value);\n+                } else {\n+                    if (!objectSchema.hasAdditionalProperties()) {\n+                        DiagnosticInfo diagnosticInfo = new DiagnosticInfo(\"TVE0001\", \"warn.unexpected.property\",\n+                                DiagnosticSeverity.WARNING);\n+                        TomlDiagnostic diagnostic = new TomlDiagnostic(value.location(), diagnosticInfo,\n+                                \"Unexpected Property \\\"\" + key + \"\\\"\");\n+                        tomlTableNode.addDiagnostic(diagnostic);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlTableArrayNode tomlTableArrayNode) {\n+        if (schema.type() != Type.ARRAY) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlTableArrayNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found array\", this.key,\n+                                    schema.type()));\n+            tomlTableArrayNode.addDiagnostic(diagnostic);\n+        } else {\n+            ArraySchema arraySchema = (ArraySchema) schema;\n+            AbstractSchema items = arraySchema.items();\n+            List<TomlTableNode> children = tomlTableArrayNode.children();\n+            for (TomlTableNode child : children) {\n+                this.schema = items;\n+                visit(child);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlKeyValueNode keyValue) {\n+        TomlValueNode value = keyValue.value();\n+        lookupNode(value);\n+    }\n+\n+    @Override\n+    public void visit(TomlValueNode tomlValue) {\n+        lookupNode(tomlValue);\n+    }\n+\n+    @Override\n+    public void visit(TomlStringValueNode tomlStringValueNode) {\n+        if (schema.type() != Type.STRING) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" expects %s . Found string\", this.key, schema.type()));\n+            tomlStringValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            StringSchema stringSchema = (StringSchema) this.schema;\n+            if (stringSchema.pattern().isPresent()) {\n+                String pattern = stringSchema.pattern().get();\n+                if (!Pattern.compile(pattern).matcher(tomlStringValueNode.getValue()).matches()) {\n+                    TomlDiagnostic diagnostic = getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0003\",\n+                            \"error.regex.mismatch\", DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" value does not match the Regex provided in Schema %s\", this.key,\n+                                    pattern));\n+                    tomlStringValueNode.addDiagnostic(diagnostic);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlDoubleValueNodeNode tomlDoubleValueNodeNode) {\n+        if (schema.type() != Type.NUMBER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlDoubleValueNodeNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found number\", this.key, schema.type()));\n+            tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, tomlDoubleValueNodeNode.getValue(),\n+                            tomlDoubleValueNodeNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlLongValueNode tomlLongValueNode) {\n+        if (schema.type() != Type.INTEGER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlLongValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found integer\", this.key, schema.type()));\n+            tomlLongValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, Double.valueOf(tomlLongValueNode.getValue()),\n+                            tomlLongValueNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlLongValueNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    private List<Diagnostic> validateMinMaxValues(NumericSchema numericSchema, Double value,\n+                                                  TomlNodeLocation location) {\n+        List<Diagnostic> diagnostics = new ArrayList<>();\n+        if (numericSchema.maximum().isPresent()) {\n+            Double max = numericSchema.maximum().get();\n+            if (value >= max) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0005\", \"error\" +\n+                                \".maximum.value.exceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be higher than %f\", this.key,\n+                                max));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        if (numericSchema.minimum().isPresent()) {\n+            Double min = numericSchema.minimum().get();\n+            if (value <= min) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0004\",\n+                        \"error.minimum.value.deceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be lower than %f\", this.key,\n+                                min));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        return diagnostics;\n+    }\n+\n+    @Override\n+    public void visit(TomlBooleanValueNode tomlBooleanValueNode) {\n+        if (schema.type() != Type.BOOLEAN) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlBooleanValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found boolean\", this.key, schema.type()));\n+            tomlBooleanValueNode.addDiagnostic(diagnostic);\n+        }\n+    }\n+\n+    private void lookupNode(TomlNode node) {\n+        AbstractSchema previousSchema = this.schema;\n+        String previousKey = this.key;\n+        node.accept(this);\n+        this.schema = previousSchema;\n+        this.key = previousKey;\n+    }\n+\n+    private TomlDiagnostic getTomlDiagnostic(TomlNodeLocation location, String code, String template,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NTQ0MQ=="}, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgzMDk3OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo1MDozN1rOH29sUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo1MDozN1rOH29sUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NTkyMQ==", "bodyText": "lookupNode -> visitNode", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527395921", "createdAt": "2020-11-20T04:50:37Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);\n+                if (abstractSchema != null) {\n+                    this.schema = abstractSchema;\n+                    this.key = key;\n+                    lookupNode(value);\n+                } else {\n+                    if (!objectSchema.hasAdditionalProperties()) {\n+                        DiagnosticInfo diagnosticInfo = new DiagnosticInfo(\"TVE0001\", \"warn.unexpected.property\",\n+                                DiagnosticSeverity.WARNING);\n+                        TomlDiagnostic diagnostic = new TomlDiagnostic(value.location(), diagnosticInfo,\n+                                \"Unexpected Property \\\"\" + key + \"\\\"\");\n+                        tomlTableNode.addDiagnostic(diagnostic);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlTableArrayNode tomlTableArrayNode) {\n+        if (schema.type() != Type.ARRAY) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlTableArrayNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found array\", this.key,\n+                                    schema.type()));\n+            tomlTableArrayNode.addDiagnostic(diagnostic);\n+        } else {\n+            ArraySchema arraySchema = (ArraySchema) schema;\n+            AbstractSchema items = arraySchema.items();\n+            List<TomlTableNode> children = tomlTableArrayNode.children();\n+            for (TomlTableNode child : children) {\n+                this.schema = items;\n+                visit(child);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlKeyValueNode keyValue) {\n+        TomlValueNode value = keyValue.value();\n+        lookupNode(value);\n+    }\n+\n+    @Override\n+    public void visit(TomlValueNode tomlValue) {\n+        lookupNode(tomlValue);\n+    }\n+\n+    @Override\n+    public void visit(TomlStringValueNode tomlStringValueNode) {\n+        if (schema.type() != Type.STRING) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" expects %s . Found string\", this.key, schema.type()));\n+            tomlStringValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            StringSchema stringSchema = (StringSchema) this.schema;\n+            if (stringSchema.pattern().isPresent()) {\n+                String pattern = stringSchema.pattern().get();\n+                if (!Pattern.compile(pattern).matcher(tomlStringValueNode.getValue()).matches()) {\n+                    TomlDiagnostic diagnostic = getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0003\",\n+                            \"error.regex.mismatch\", DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" value does not match the Regex provided in Schema %s\", this.key,\n+                                    pattern));\n+                    tomlStringValueNode.addDiagnostic(diagnostic);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlDoubleValueNodeNode tomlDoubleValueNodeNode) {\n+        if (schema.type() != Type.NUMBER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlDoubleValueNodeNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found number\", this.key, schema.type()));\n+            tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, tomlDoubleValueNodeNode.getValue(),\n+                            tomlDoubleValueNodeNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlLongValueNode tomlLongValueNode) {\n+        if (schema.type() != Type.INTEGER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlLongValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found integer\", this.key, schema.type()));\n+            tomlLongValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, Double.valueOf(tomlLongValueNode.getValue()),\n+                            tomlLongValueNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlLongValueNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    private List<Diagnostic> validateMinMaxValues(NumericSchema numericSchema, Double value,\n+                                                  TomlNodeLocation location) {\n+        List<Diagnostic> diagnostics = new ArrayList<>();\n+        if (numericSchema.maximum().isPresent()) {\n+            Double max = numericSchema.maximum().get();\n+            if (value >= max) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0005\", \"error\" +\n+                                \".maximum.value.exceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be higher than %f\", this.key,\n+                                max));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        if (numericSchema.minimum().isPresent()) {\n+            Double min = numericSchema.minimum().get();\n+            if (value <= min) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0004\",\n+                        \"error.minimum.value.deceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be lower than %f\", this.key,\n+                                min));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        return diagnostics;\n+    }\n+\n+    @Override\n+    public void visit(TomlBooleanValueNode tomlBooleanValueNode) {\n+        if (schema.type() != Type.BOOLEAN) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlBooleanValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found boolean\", this.key, schema.type()));\n+            tomlBooleanValueNode.addDiagnostic(diagnostic);\n+        }\n+    }\n+\n+    private void lookupNode(TomlNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgzNDUyOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo1MjoxOFrOH29uOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo1MjoxOFrOH29uOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NjQwOA==", "bodyText": "This seems to not correct. You are caching the state only after changing it. So what you cache is the changed state, not the original state.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527396408", "createdAt": "2020-11-20T04:52:18Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);\n+                if (abstractSchema != null) {\n+                    this.schema = abstractSchema;\n+                    this.key = key;\n+                    lookupNode(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg0MTY3OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo1NjoxOFrOH29yKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo1NjoxOFrOH29yKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NzQxOA==", "bodyText": "A visitor should be visited using child.accept(this)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527397418", "createdAt": "2020-11-20T04:56:18Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);\n+                if (abstractSchema != null) {\n+                    this.schema = abstractSchema;\n+                    this.key = key;\n+                    lookupNode(value);\n+                } else {\n+                    if (!objectSchema.hasAdditionalProperties()) {\n+                        DiagnosticInfo diagnosticInfo = new DiagnosticInfo(\"TVE0001\", \"warn.unexpected.property\",\n+                                DiagnosticSeverity.WARNING);\n+                        TomlDiagnostic diagnostic = new TomlDiagnostic(value.location(), diagnosticInfo,\n+                                \"Unexpected Property \\\"\" + key + \"\\\"\");\n+                        tomlTableNode.addDiagnostic(diagnostic);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlTableArrayNode tomlTableArrayNode) {\n+        if (schema.type() != Type.ARRAY) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlTableArrayNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found array\", this.key,\n+                                    schema.type()));\n+            tomlTableArrayNode.addDiagnostic(diagnostic);\n+        } else {\n+            ArraySchema arraySchema = (ArraySchema) schema;\n+            AbstractSchema items = arraySchema.items();\n+            List<TomlTableNode> children = tomlTableArrayNode.children();\n+            for (TomlTableNode child : children) {\n+                this.schema = items;\n+                visit(child);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg0ODI5OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowMDowN1rOH2916A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowMDowN1rOH2916A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5ODM3Ng==", "bodyText": "variable name abstractSchema is a bit misleading. Shall we call it just schema?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527398376", "createdAt": "2020-11-20T05:00:07Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg1MDEzOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowMToxMFrOH293CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowMToxMFrOH293CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5ODY2NA==", "bodyText": "Usually a table has 'entries'\nSo better to change tableChildren -> tableEntries\nIt would also be better to change the method name as well x.children() to x.entries()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527398664", "createdAt": "2020-11-20T05:01:10Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg1MjMwOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowMjoxOVrOH294Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowMjoxOVrOH294Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5ODk5MA==", "bodyText": "propertyEntry -> tableEntry", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527398990", "createdAt": "2020-11-20T05:02:19Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg2NjU4OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/ObjectSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxMDoxNVrOH2-ATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxMDoxNVrOH2-ATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMTAzOA==", "bodyText": "additionalProperties -> hasAdditionalProperties", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527401038", "createdAt": "2020-11-20T05:10:15Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/ObjectSchema.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.schema;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Represents Object schema in JSON schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ObjectSchema extends AbstractSchema {\n+    private String description;\n+    private boolean additionalProperties;\n+    private Map<String, AbstractSchema> properties;\n+\n+    public ObjectSchema(Type type) {\n+        super(type);\n+        this.additionalProperties = true;\n+        this.properties = new HashMap<>();\n+    }\n+\n+    public ObjectSchema(Type type, Map<String, AbstractSchema> properties) {\n+        super(type);\n+        this.additionalProperties = true;\n+        this.properties = properties;\n+    }\n+\n+    public ObjectSchema(Type type, String description, boolean additionalProperties,\n+                        Map<String, AbstractSchema> properties) {\n+        super(type);\n+        this.description = description;\n+        this.additionalProperties = additionalProperties;\n+        this.properties = properties;\n+    }\n+\n+    public Optional<String> description() {\n+        return Optional.ofNullable(description);\n+    }\n+\n+    public boolean hasAdditionalProperties() {\n+        return additionalProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg3MTc5OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxMjo1NVrOH2-DNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxMjo1NVrOH2-DNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMTc4Mw==", "bodyText": "items -> memberSchema", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527401783", "createdAt": "2020-11-20T05:12:55Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);\n+                if (abstractSchema != null) {\n+                    this.schema = abstractSchema;\n+                    this.key = key;\n+                    lookupNode(value);\n+                } else {\n+                    if (!objectSchema.hasAdditionalProperties()) {\n+                        DiagnosticInfo diagnosticInfo = new DiagnosticInfo(\"TVE0001\", \"warn.unexpected.property\",\n+                                DiagnosticSeverity.WARNING);\n+                        TomlDiagnostic diagnostic = new TomlDiagnostic(value.location(), diagnosticInfo,\n+                                \"Unexpected Property \\\"\" + key + \"\\\"\");\n+                        tomlTableNode.addDiagnostic(diagnostic);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlTableArrayNode tomlTableArrayNode) {\n+        if (schema.type() != Type.ARRAY) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlTableArrayNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found array\", this.key,\n+                                    schema.type()));\n+            tomlTableArrayNode.addDiagnostic(diagnostic);\n+        } else {\n+            ArraySchema arraySchema = (ArraySchema) schema;\n+            AbstractSchema items = arraySchema.items();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg3ODE5OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxNjozMFrOH2-G4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxNjozMFrOH2-G4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMjcyMg==", "bodyText": "Here we are traversing the diagnostics again.\nInstead, can't we add the diagnostics to the node itself directly?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527402722", "createdAt": "2020-11-20T05:16:30Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+        } else {\n+            ObjectSchema objectSchema = (ObjectSchema) schema;\n+            Map<String, AbstractSchema> properties = objectSchema.properties();\n+            Map<String, TopLevelNode> tableChildren = tomlTableNode.children();\n+            for (Map.Entry<String, TopLevelNode> propertyEntry : tableChildren.entrySet()) {\n+                String key = propertyEntry.getKey();\n+                TopLevelNode value = propertyEntry.getValue();\n+                AbstractSchema abstractSchema = properties.get(key);\n+                if (abstractSchema != null) {\n+                    this.schema = abstractSchema;\n+                    this.key = key;\n+                    lookupNode(value);\n+                } else {\n+                    if (!objectSchema.hasAdditionalProperties()) {\n+                        DiagnosticInfo diagnosticInfo = new DiagnosticInfo(\"TVE0001\", \"warn.unexpected.property\",\n+                                DiagnosticSeverity.WARNING);\n+                        TomlDiagnostic diagnostic = new TomlDiagnostic(value.location(), diagnosticInfo,\n+                                \"Unexpected Property \\\"\" + key + \"\\\"\");\n+                        tomlTableNode.addDiagnostic(diagnostic);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlTableArrayNode tomlTableArrayNode) {\n+        if (schema.type() != Type.ARRAY) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlTableArrayNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found array\", this.key,\n+                                    schema.type()));\n+            tomlTableArrayNode.addDiagnostic(diagnostic);\n+        } else {\n+            ArraySchema arraySchema = (ArraySchema) schema;\n+            AbstractSchema items = arraySchema.items();\n+            List<TomlTableNode> children = tomlTableArrayNode.children();\n+            for (TomlTableNode child : children) {\n+                this.schema = items;\n+                visit(child);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlKeyValueNode keyValue) {\n+        TomlValueNode value = keyValue.value();\n+        lookupNode(value);\n+    }\n+\n+    @Override\n+    public void visit(TomlValueNode tomlValue) {\n+        lookupNode(tomlValue);\n+    }\n+\n+    @Override\n+    public void visit(TomlStringValueNode tomlStringValueNode) {\n+        if (schema.type() != Type.STRING) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" expects %s . Found string\", this.key, schema.type()));\n+            tomlStringValueNode.addDiagnostic(diagnostic);\n+        } else {\n+            StringSchema stringSchema = (StringSchema) this.schema;\n+            if (stringSchema.pattern().isPresent()) {\n+                String pattern = stringSchema.pattern().get();\n+                if (!Pattern.compile(pattern).matcher(tomlStringValueNode.getValue()).matches()) {\n+                    TomlDiagnostic diagnostic = getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0003\",\n+                            \"error.regex.mismatch\", DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" value does not match the Regex provided in Schema %s\", this.key,\n+                                    pattern));\n+                    tomlStringValueNode.addDiagnostic(diagnostic);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlDoubleValueNodeNode tomlDoubleValueNodeNode) {\n+        if (schema.type() != Type.NUMBER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlDoubleValueNodeNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found number\", this.key, schema.type()));\n+            tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+        } else {\n+            List<Diagnostic> diagnostics =\n+                    validateMinMaxValues((NumericSchema) schema, tomlDoubleValueNodeNode.getValue(),\n+                            tomlDoubleValueNodeNode.location());\n+            for (Diagnostic diagnostic : diagnostics) {\n+                tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg4Mzc3OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxOTo1OFrOH2-KNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxOTo1OFrOH2-KNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMzU3NA==", "bodyText": "We should throw our own exception here. Throwing an exception from  the gson library is not correct.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527403574", "createdAt": "2020-11-20T05:19:58Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.schema;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Responsible for Deserializing abstract Schema nodes accordingly.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaDeserializer implements JsonDeserializer<AbstractSchema> {\n+\n+    @Override\n+    public AbstractSchema deserialize(JsonElement jsonElement, java.lang.reflect.Type refType,\n+                                      JsonDeserializationContext jsonDeserializationContext)\n+            throws JsonParseException {\n+        JsonObject jsonObj = jsonElement.getAsJsonObject();\n+        String type = jsonObj.get(\"type\").getAsString();\n+        switch (type) {\n+            case \"object\":\n+                return getObjectSchema(jsonDeserializationContext, jsonObj);\n+            case \"array\":\n+                return getArraySchema(jsonDeserializationContext, jsonObj);\n+            case \"integer\":\n+                return getNumericSchema(jsonObj, Type.INTEGER);\n+            case \"number\":\n+                return getNumericSchema(jsonObj, Type.NUMBER);\n+            case \"string\":\n+                return getStringSchema(jsonObj);\n+            case \"boolean\":\n+                return new BooleanSchema(Type.BOOLEAN);\n+            default:\n+                throw new JsonParseException(\"type \" + type + \" is not supported type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg4NTg2OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToyMTowMFrOH2-LSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToyMTowMFrOH2-LSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMzg0OA==", "bodyText": "Shall we move all these hardcoded strings to constants?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527403848", "createdAt": "2020-11-20T05:21:00Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.schema;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Responsible for Deserializing abstract Schema nodes accordingly.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaDeserializer implements JsonDeserializer<AbstractSchema> {\n+\n+    @Override\n+    public AbstractSchema deserialize(JsonElement jsonElement, java.lang.reflect.Type refType,\n+                                      JsonDeserializationContext jsonDeserializationContext)\n+            throws JsonParseException {\n+        JsonObject jsonObj = jsonElement.getAsJsonObject();\n+        String type = jsonObj.get(\"type\").getAsString();\n+        switch (type) {\n+            case \"object\":\n+                return getObjectSchema(jsonDeserializationContext, jsonObj);\n+            case \"array\":\n+                return getArraySchema(jsonDeserializationContext, jsonObj);\n+            case \"integer\":\n+                return getNumericSchema(jsonObj, Type.INTEGER);\n+            case \"number\":\n+                return getNumericSchema(jsonObj, Type.NUMBER);\n+            case \"string\":\n+                return getStringSchema(jsonObj);\n+            case \"boolean\":\n+                return new BooleanSchema(Type.BOOLEAN);\n+            default:\n+                throw new JsonParseException(\"type \" + type + \" is not supported type\");\n+        }\n+    }\n+\n+    private ObjectSchema getObjectSchema(JsonDeserializationContext jsonDeserializationContext, JsonObject jsonObj) {\n+        JsonElement descriptionProperty = jsonObj.get(\"description\");\n+        String description = descriptionProperty != null ? descriptionProperty.getAsString() : null;\n+        JsonElement additionalProperty = jsonObj.get(\"additionalProperties\");\n+        boolean additionalProperties = additionalProperty == null || additionalProperty.getAsBoolean();\n+        JsonObject properties = jsonObj.get(\"properties\").getAsJsonObject();\n+        Set<Map.Entry<String, JsonElement>> entries = properties.entrySet();\n+        Map<String, AbstractSchema> propertiesList = new HashMap<>();\n+        for (Map.Entry<String, JsonElement> entry : entries) {\n+            String key = entry.getKey();\n+            AbstractSchema\n+                    abstractSchema = jsonDeserializationContext.deserialize(entry.getValue(), AbstractSchema.class);\n+            propertiesList.put(key, abstractSchema);\n+        }\n+        return new ObjectSchema(Type.OBJECT, description, additionalProperties, propertiesList);\n+    }\n+\n+    private AbstractSchema getArraySchema(JsonDeserializationContext jsonDeserializationContext, JsonObject jsonObj) {\n+        JsonElement items = jsonObj.get(\"items\").getAsJsonObject();\n+        AbstractSchema abstractSchema = jsonDeserializationContext.deserialize(items, AbstractSchema.class);\n+        return new ArraySchema(Type.ARRAY, abstractSchema);\n+    }\n+\n+    private StringSchema getStringSchema(JsonObject jsonObj) {\n+        JsonElement patternProperty = jsonObj.get(\"pattern\");\n+        String pattern = patternProperty != null ? patternProperty.getAsString() : null;\n+        return new StringSchema(Type.STRING, pattern);\n+    }\n+\n+    private NumericSchema getNumericSchema(JsonObject jsonObj, Type type) {\n+        JsonElement minimumProperty = jsonObj.get(\"minimum\");\n+        Double minimum = minimumProperty != null ? minimumProperty.getAsDouble() : null;\n+        JsonElement maximumProperty = jsonObj.get(\"maximum\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjkxODU2OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToyODowNVrOH2-ipA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDozODowMVrOH3KVfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwOTgyOA==", "bodyText": "Trying to get as double without checking the value first can lead to runtime errors, such as ClassCastExceptions, NumberFormatExceptions, etc. So we need to do the validations first, and throw proper errors.\nDo we have any negative test cases for the schema?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527409828", "createdAt": "2020-11-20T05:28:05Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.schema;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Responsible for Deserializing abstract Schema nodes accordingly.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaDeserializer implements JsonDeserializer<AbstractSchema> {\n+\n+    @Override\n+    public AbstractSchema deserialize(JsonElement jsonElement, java.lang.reflect.Type refType,\n+                                      JsonDeserializationContext jsonDeserializationContext)\n+            throws JsonParseException {\n+        JsonObject jsonObj = jsonElement.getAsJsonObject();\n+        String type = jsonObj.get(\"type\").getAsString();\n+        switch (type) {\n+            case \"object\":\n+                return getObjectSchema(jsonDeserializationContext, jsonObj);\n+            case \"array\":\n+                return getArraySchema(jsonDeserializationContext, jsonObj);\n+            case \"integer\":\n+                return getNumericSchema(jsonObj, Type.INTEGER);\n+            case \"number\":\n+                return getNumericSchema(jsonObj, Type.NUMBER);\n+            case \"string\":\n+                return getStringSchema(jsonObj);\n+            case \"boolean\":\n+                return new BooleanSchema(Type.BOOLEAN);\n+            default:\n+                throw new JsonParseException(\"type \" + type + \" is not supported type\");\n+        }\n+    }\n+\n+    private ObjectSchema getObjectSchema(JsonDeserializationContext jsonDeserializationContext, JsonObject jsonObj) {\n+        JsonElement descriptionProperty = jsonObj.get(\"description\");\n+        String description = descriptionProperty != null ? descriptionProperty.getAsString() : null;\n+        JsonElement additionalProperty = jsonObj.get(\"additionalProperties\");\n+        boolean additionalProperties = additionalProperty == null || additionalProperty.getAsBoolean();\n+        JsonObject properties = jsonObj.get(\"properties\").getAsJsonObject();\n+        Set<Map.Entry<String, JsonElement>> entries = properties.entrySet();\n+        Map<String, AbstractSchema> propertiesList = new HashMap<>();\n+        for (Map.Entry<String, JsonElement> entry : entries) {\n+            String key = entry.getKey();\n+            AbstractSchema\n+                    abstractSchema = jsonDeserializationContext.deserialize(entry.getValue(), AbstractSchema.class);\n+            propertiesList.put(key, abstractSchema);\n+        }\n+        return new ObjectSchema(Type.OBJECT, description, additionalProperties, propertiesList);\n+    }\n+\n+    private AbstractSchema getArraySchema(JsonDeserializationContext jsonDeserializationContext, JsonObject jsonObj) {\n+        JsonElement items = jsonObj.get(\"items\").getAsJsonObject();\n+        AbstractSchema abstractSchema = jsonDeserializationContext.deserialize(items, AbstractSchema.class);\n+        return new ArraySchema(Type.ARRAY, abstractSchema);\n+    }\n+\n+    private StringSchema getStringSchema(JsonObject jsonObj) {\n+        JsonElement patternProperty = jsonObj.get(\"pattern\");\n+        String pattern = patternProperty != null ? patternProperty.getAsString() : null;\n+        return new StringSchema(Type.STRING, pattern);\n+    }\n+\n+    private NumericSchema getNumericSchema(JsonObject jsonObj, Type type) {\n+        JsonElement minimumProperty = jsonObj.get(\"minimum\");\n+        Double minimum = minimumProperty != null ? minimumProperty.getAsDouble() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1OTM0NA==", "bodyText": "Ack. As the initial implementation I wasn't concerned with the schema validations. Anyways I've implemented validations for basic data types for now and test cases for them. We need to implement validations for required and optional fields as well. I will create a issue for this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527559344", "createdAt": "2020-11-20T09:25:42Z", "author": {"login": "xlight05"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.schema;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Responsible for Deserializing abstract Schema nodes accordingly.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaDeserializer implements JsonDeserializer<AbstractSchema> {\n+\n+    @Override\n+    public AbstractSchema deserialize(JsonElement jsonElement, java.lang.reflect.Type refType,\n+                                      JsonDeserializationContext jsonDeserializationContext)\n+            throws JsonParseException {\n+        JsonObject jsonObj = jsonElement.getAsJsonObject();\n+        String type = jsonObj.get(\"type\").getAsString();\n+        switch (type) {\n+            case \"object\":\n+                return getObjectSchema(jsonDeserializationContext, jsonObj);\n+            case \"array\":\n+                return getArraySchema(jsonDeserializationContext, jsonObj);\n+            case \"integer\":\n+                return getNumericSchema(jsonObj, Type.INTEGER);\n+            case \"number\":\n+                return getNumericSchema(jsonObj, Type.NUMBER);\n+            case \"string\":\n+                return getStringSchema(jsonObj);\n+            case \"boolean\":\n+                return new BooleanSchema(Type.BOOLEAN);\n+            default:\n+                throw new JsonParseException(\"type \" + type + \" is not supported type\");\n+        }\n+    }\n+\n+    private ObjectSchema getObjectSchema(JsonDeserializationContext jsonDeserializationContext, JsonObject jsonObj) {\n+        JsonElement descriptionProperty = jsonObj.get(\"description\");\n+        String description = descriptionProperty != null ? descriptionProperty.getAsString() : null;\n+        JsonElement additionalProperty = jsonObj.get(\"additionalProperties\");\n+        boolean additionalProperties = additionalProperty == null || additionalProperty.getAsBoolean();\n+        JsonObject properties = jsonObj.get(\"properties\").getAsJsonObject();\n+        Set<Map.Entry<String, JsonElement>> entries = properties.entrySet();\n+        Map<String, AbstractSchema> propertiesList = new HashMap<>();\n+        for (Map.Entry<String, JsonElement> entry : entries) {\n+            String key = entry.getKey();\n+            AbstractSchema\n+                    abstractSchema = jsonDeserializationContext.deserialize(entry.getValue(), AbstractSchema.class);\n+            propertiesList.put(key, abstractSchema);\n+        }\n+        return new ObjectSchema(Type.OBJECT, description, additionalProperties, propertiesList);\n+    }\n+\n+    private AbstractSchema getArraySchema(JsonDeserializationContext jsonDeserializationContext, JsonObject jsonObj) {\n+        JsonElement items = jsonObj.get(\"items\").getAsJsonObject();\n+        AbstractSchema abstractSchema = jsonDeserializationContext.deserialize(items, AbstractSchema.class);\n+        return new ArraySchema(Type.ARRAY, abstractSchema);\n+    }\n+\n+    private StringSchema getStringSchema(JsonObject jsonObj) {\n+        JsonElement patternProperty = jsonObj.get(\"pattern\");\n+        String pattern = patternProperty != null ? patternProperty.getAsString() : null;\n+        return new StringSchema(Type.STRING, pattern);\n+    }\n+\n+    private NumericSchema getNumericSchema(JsonObject jsonObj, Type type) {\n+        JsonElement minimumProperty = jsonObj.get(\"minimum\");\n+        Double minimum = minimumProperty != null ? minimumProperty.getAsDouble() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwOTgyOA=="}, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMzA2OQ==", "bodyText": "#27039", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527603069", "createdAt": "2020-11-20T10:38:01Z", "author": {"login": "xlight05"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.schema;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Responsible for Deserializing abstract Schema nodes accordingly.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaDeserializer implements JsonDeserializer<AbstractSchema> {\n+\n+    @Override\n+    public AbstractSchema deserialize(JsonElement jsonElement, java.lang.reflect.Type refType,\n+                                      JsonDeserializationContext jsonDeserializationContext)\n+            throws JsonParseException {\n+        JsonObject jsonObj = jsonElement.getAsJsonObject();\n+        String type = jsonObj.get(\"type\").getAsString();\n+        switch (type) {\n+            case \"object\":\n+                return getObjectSchema(jsonDeserializationContext, jsonObj);\n+            case \"array\":\n+                return getArraySchema(jsonDeserializationContext, jsonObj);\n+            case \"integer\":\n+                return getNumericSchema(jsonObj, Type.INTEGER);\n+            case \"number\":\n+                return getNumericSchema(jsonObj, Type.NUMBER);\n+            case \"string\":\n+                return getStringSchema(jsonObj);\n+            case \"boolean\":\n+                return new BooleanSchema(Type.BOOLEAN);\n+            default:\n+                throw new JsonParseException(\"type \" + type + \" is not supported type\");\n+        }\n+    }\n+\n+    private ObjectSchema getObjectSchema(JsonDeserializationContext jsonDeserializationContext, JsonObject jsonObj) {\n+        JsonElement descriptionProperty = jsonObj.get(\"description\");\n+        String description = descriptionProperty != null ? descriptionProperty.getAsString() : null;\n+        JsonElement additionalProperty = jsonObj.get(\"additionalProperties\");\n+        boolean additionalProperties = additionalProperty == null || additionalProperty.getAsBoolean();\n+        JsonObject properties = jsonObj.get(\"properties\").getAsJsonObject();\n+        Set<Map.Entry<String, JsonElement>> entries = properties.entrySet();\n+        Map<String, AbstractSchema> propertiesList = new HashMap<>();\n+        for (Map.Entry<String, JsonElement> entry : entries) {\n+            String key = entry.getKey();\n+            AbstractSchema\n+                    abstractSchema = jsonDeserializationContext.deserialize(entry.getValue(), AbstractSchema.class);\n+            propertiesList.put(key, abstractSchema);\n+        }\n+        return new ObjectSchema(Type.OBJECT, description, additionalProperties, propertiesList);\n+    }\n+\n+    private AbstractSchema getArraySchema(JsonDeserializationContext jsonDeserializationContext, JsonObject jsonObj) {\n+        JsonElement items = jsonObj.get(\"items\").getAsJsonObject();\n+        AbstractSchema abstractSchema = jsonDeserializationContext.deserialize(items, AbstractSchema.class);\n+        return new ArraySchema(Type.ARRAY, abstractSchema);\n+    }\n+\n+    private StringSchema getStringSchema(JsonObject jsonObj) {\n+        JsonElement patternProperty = jsonObj.get(\"pattern\");\n+        String pattern = patternProperty != null ? patternProperty.getAsString() : null;\n+        return new StringSchema(Type.STRING, pattern);\n+    }\n+\n+    private NumericSchema getNumericSchema(JsonObject jsonObj, Type type) {\n+        JsonElement minimumProperty = jsonObj.get(\"minimum\");\n+        Double minimum = minimumProperty != null ? minimumProperty.getAsDouble() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwOTgyOA=="}, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjkyNTAxOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToyOToyN1rOH2-nNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDowMjozNVrOH3JDpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMDk5Ng==", "bodyText": "Let's remove the get prefix from all methods.\nThis also should return a list.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527410996", "createdAt": "2020-11-20T05:29:27Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -169,19 +206,23 @@ public Toml getTable(String key) {\n      */\n     public List<Toml> getTables(String key) {\n         TopLevelNode tableNode = rootNode.children().get(key);\n+        if (tableNode == null || tableNode.kind() != TomlType.TABLE_ARRAY) {\n+            return null;\n+        }\n+        TomlTableArrayNode tomlTableArrayNode = (TomlTableArrayNode) tableNode;\n+        List<TomlTableNode> childs = tomlTableArrayNode.children();\n         List<Toml> tomlList = new ArrayList<>();\n-        if (tableNode.kind() == TomlType.TABLE_ARRAY) {\n-            TomlTableArrayNode tomlTableArrayNode = (TomlTableArrayNode) tableNode;\n-            List<TomlTableNode> childs = tomlTableArrayNode.children();\n-            for (TomlTableNode child : childs) {\n-                tomlList.add(new Toml(child));\n-            }\n-            return tomlList;\n+        for (TomlTableNode child : childs) {\n+            tomlList.add(new Toml(child));\n         }\n         return tomlList;\n     }\n \n-    public List<TomlDiagnostic> getDiagnostics() {\n+    public Set<Diagnostic> getDiagnostics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2Mjk4MA==", "bodyText": "get prefix should exist for data retrieval methods such as get(), getTable() , getTables() for consistency right?\nFixed rootNode() and diagnostics().", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527562980", "createdAt": "2020-11-20T09:31:35Z", "author": {"login": "xlight05"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -169,19 +206,23 @@ public Toml getTable(String key) {\n      */\n     public List<Toml> getTables(String key) {\n         TopLevelNode tableNode = rootNode.children().get(key);\n+        if (tableNode == null || tableNode.kind() != TomlType.TABLE_ARRAY) {\n+            return null;\n+        }\n+        TomlTableArrayNode tomlTableArrayNode = (TomlTableArrayNode) tableNode;\n+        List<TomlTableNode> childs = tomlTableArrayNode.children();\n         List<Toml> tomlList = new ArrayList<>();\n-        if (tableNode.kind() == TomlType.TABLE_ARRAY) {\n-            TomlTableArrayNode tomlTableArrayNode = (TomlTableArrayNode) tableNode;\n-            List<TomlTableNode> childs = tomlTableArrayNode.children();\n-            for (TomlTableNode child : childs) {\n-                tomlList.add(new Toml(child));\n-            }\n-            return tomlList;\n+        for (TomlTableNode child : childs) {\n+            tomlList.add(new Toml(child));\n         }\n         return tomlList;\n     }\n \n-    public List<TomlDiagnostic> getDiagnostics() {\n+    public Set<Diagnostic> getDiagnostics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMDk5Ng=="}, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4MjExOQ==", "bodyText": "I see. ack.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527582119", "createdAt": "2020-11-20T10:02:35Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -169,19 +206,23 @@ public Toml getTable(String key) {\n      */\n     public List<Toml> getTables(String key) {\n         TopLevelNode tableNode = rootNode.children().get(key);\n+        if (tableNode == null || tableNode.kind() != TomlType.TABLE_ARRAY) {\n+            return null;\n+        }\n+        TomlTableArrayNode tomlTableArrayNode = (TomlTableArrayNode) tableNode;\n+        List<TomlTableNode> childs = tomlTableArrayNode.children();\n         List<Toml> tomlList = new ArrayList<>();\n-        if (tableNode.kind() == TomlType.TABLE_ARRAY) {\n-            TomlTableArrayNode tomlTableArrayNode = (TomlTableArrayNode) tableNode;\n-            List<TomlTableNode> childs = tomlTableArrayNode.children();\n-            for (TomlTableNode child : childs) {\n-                tomlList.add(new Toml(child));\n-            }\n-            return tomlList;\n+        for (TomlTableNode child : childs) {\n+            tomlList.add(new Toml(child));\n         }\n         return tomlList;\n     }\n \n-    public List<TomlDiagnostic> getDiagnostics() {\n+    public Set<Diagnostic> getDiagnostics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMDk5Ng=="}, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjkzNTMwOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTozMTozMFrOH2-uqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTozMTo1NFrOH2-wKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMjkwNQ==", "bodyText": "rootSchema -> schema", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527412905", "createdAt": "2020-11-20T05:31:30Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -82,45 +104,60 @@ public static Toml read(Path path) throws IOException {\n      * @throws IOException if file is not accessible\n      */\n     public static Toml read(InputStream inputStream) throws IOException {\n-        return read(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n+       return read(new String(inputStream.readAllBytes(), StandardCharsets.UTF_8), null);\n     }\n \n     /**\n-     * Read TOML File using Reader.\n+     * Read TOML File using InputStream and validate against a json schema.\n      *\n-     * @param reader reader of the TOML file\n+     * @param inputStream InputStream of the TOML file\n+     * @param rootSchema Root schema of the validator\n      * @return TOML Object\n      * @throws IOException if file is not accessible\n      */\n-    public static Toml read(Reader reader) throws IOException {\n-        BufferedReader bufferedReader = new BufferedReader(reader);\n-        StringBuilder w = new StringBuilder();\n-        for (String line = bufferedReader.readLine(); line != null; line = bufferedReader.readLine()) {\n-            w.append(line).append('\\n');\n-        }\n-        return read(w.toString());\n+    public static Toml read(InputStream inputStream, Schema rootSchema) throws IOException {\n+        return read(new String(inputStream.readAllBytes(), StandardCharsets.UTF_8), null, rootSchema);\n     }\n \n     /**\n      * Parse TOML file using TOML String.\n      *\n      * @param content String representation of the TOML file content.\n+     * @param filePath path of the TOML file\n      * @return TOML Object\n      */\n-    public static Toml read(String content) {\n+    public static Toml read(String content, String filePath) {\n         TextDocument textDocument = TextDocuments.from(content);\n-        SyntaxTree syntaxTree = SyntaxTree.from(textDocument);\n-        List<TomlDiagnostic> tomlDiagnostics = reportSyntaxDiagnostics(syntaxTree);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument, filePath);\n         TomlTransformer nodeTransformer = new TomlTransformer();\n         TomlTableNode\n                 transformedTable = (TomlTableNode) nodeTransformer.transform((DocumentNode) syntaxTree.rootNode());\n-        transformedTable.setSyntacticalDiagnostics(tomlDiagnostics);\n-        tomlDiagnostics.addAll(transformedTable.collectSemanticDiagnostics());\n+        transformedTable.addSyntaxDiagnostics(reportSyntaxDiagnostics(syntaxTree));\n         return new Toml(transformedTable);\n     }\n \n-    private static List<TomlDiagnostic> reportSyntaxDiagnostics(SyntaxTree tree) {\n-        List<TomlDiagnostic> diagnostics = new ArrayList<>();\n+    /**\n+     * Parse TOML file using TOML String and validate against a json schema.\n+     *\n+     * @param content String representation of the TOML file content.\n+     * @param filePath path of the TOML file\n+     * @return TOML Object\n+     */\n+    public static Toml read(String content, String filePath, Schema rootSchema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMzI5MQ==", "bodyText": "Third parameter is missing in the doc comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527413291", "createdAt": "2020-11-20T05:31:54Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -82,45 +104,60 @@ public static Toml read(Path path) throws IOException {\n      * @throws IOException if file is not accessible\n      */\n     public static Toml read(InputStream inputStream) throws IOException {\n-        return read(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n+       return read(new String(inputStream.readAllBytes(), StandardCharsets.UTF_8), null);\n     }\n \n     /**\n-     * Read TOML File using Reader.\n+     * Read TOML File using InputStream and validate against a json schema.\n      *\n-     * @param reader reader of the TOML file\n+     * @param inputStream InputStream of the TOML file\n+     * @param rootSchema Root schema of the validator\n      * @return TOML Object\n      * @throws IOException if file is not accessible\n      */\n-    public static Toml read(Reader reader) throws IOException {\n-        BufferedReader bufferedReader = new BufferedReader(reader);\n-        StringBuilder w = new StringBuilder();\n-        for (String line = bufferedReader.readLine(); line != null; line = bufferedReader.readLine()) {\n-            w.append(line).append('\\n');\n-        }\n-        return read(w.toString());\n+    public static Toml read(InputStream inputStream, Schema rootSchema) throws IOException {\n+        return read(new String(inputStream.readAllBytes(), StandardCharsets.UTF_8), null, rootSchema);\n     }\n \n     /**\n      * Parse TOML file using TOML String.\n      *\n      * @param content String representation of the TOML file content.\n+     * @param filePath path of the TOML file\n      * @return TOML Object\n      */\n-    public static Toml read(String content) {\n+    public static Toml read(String content, String filePath) {\n         TextDocument textDocument = TextDocuments.from(content);\n-        SyntaxTree syntaxTree = SyntaxTree.from(textDocument);\n-        List<TomlDiagnostic> tomlDiagnostics = reportSyntaxDiagnostics(syntaxTree);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument, filePath);\n         TomlTransformer nodeTransformer = new TomlTransformer();\n         TomlTableNode\n                 transformedTable = (TomlTableNode) nodeTransformer.transform((DocumentNode) syntaxTree.rootNode());\n-        transformedTable.setSyntacticalDiagnostics(tomlDiagnostics);\n-        tomlDiagnostics.addAll(transformedTable.collectSemanticDiagnostics());\n+        transformedTable.addSyntaxDiagnostics(reportSyntaxDiagnostics(syntaxTree));\n         return new Toml(transformedTable);\n     }\n \n-    private static List<TomlDiagnostic> reportSyntaxDiagnostics(SyntaxTree tree) {\n-        List<TomlDiagnostic> diagnostics = new ArrayList<>();\n+    /**\n+     * Parse TOML file using TOML String and validate against a json schema.\n+     *\n+     * @param content String representation of the TOML file content.\n+     * @param filePath path of the TOML file\n+     * @return TOML Object\n+     */\n+    public static Toml read(String content, String filePath, Schema rootSchema) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMjkwNQ=="}, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjk0MTExOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTozMjo0NFrOH2-y2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTozMjo0NFrOH2-y2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMzk3OA==", "bodyText": "rootSchema -> schema", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527413978", "createdAt": "2020-11-20T05:32:44Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -82,45 +104,60 @@ public static Toml read(Path path) throws IOException {\n      * @throws IOException if file is not accessible\n      */\n     public static Toml read(InputStream inputStream) throws IOException {\n-        return read(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n+       return read(new String(inputStream.readAllBytes(), StandardCharsets.UTF_8), null);\n     }\n \n     /**\n-     * Read TOML File using Reader.\n+     * Read TOML File using InputStream and validate against a json schema.\n      *\n-     * @param reader reader of the TOML file\n+     * @param inputStream InputStream of the TOML file\n+     * @param rootSchema Root schema of the validator\n      * @return TOML Object\n      * @throws IOException if file is not accessible\n      */\n-    public static Toml read(Reader reader) throws IOException {\n-        BufferedReader bufferedReader = new BufferedReader(reader);\n-        StringBuilder w = new StringBuilder();\n-        for (String line = bufferedReader.readLine(); line != null; line = bufferedReader.readLine()) {\n-            w.append(line).append('\\n');\n-        }\n-        return read(w.toString());\n+    public static Toml read(InputStream inputStream, Schema rootSchema) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjk0NTI4OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTozMzo0M1rOH2-2Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTozMzo0M1rOH2-2Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxNDc5NA==", "bodyText": "keep a newline after a block (if-else, while, etc)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527414794", "createdAt": "2020-11-20T05:33:43Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/api/Toml.java", "diffHunk": "@@ -169,19 +206,23 @@ public Toml getTable(String key) {\n      */\n     public List<Toml> getTables(String key) {\n         TopLevelNode tableNode = rootNode.children().get(key);\n+        if (tableNode == null || tableNode.kind() != TomlType.TABLE_ARRAY) {\n+            return null;\n+        }\n+        TomlTableArrayNode tomlTableArrayNode = (TomlTableArrayNode) tableNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cdb11e327e94a5d61713ea806ea31a91833ec3a"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODE4MDI4OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo1Njo1MVrOH3K9VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo1Njo1MVrOH3K9VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxMzI2OQ==", "bodyText": "If we are not changing the states, no need to cache it either", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527613269", "createdAt": "2020-11-20T10:56:51Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/SchemaValidator.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator;\n+\n+import io.ballerina.toml.semantic.ast.TomlBooleanValueNode;\n+import io.ballerina.toml.semantic.ast.TomlDoubleValueNodeNode;\n+import io.ballerina.toml.semantic.ast.TomlKeyValueNode;\n+import io.ballerina.toml.semantic.ast.TomlLongValueNode;\n+import io.ballerina.toml.semantic.ast.TomlNode;\n+import io.ballerina.toml.semantic.ast.TomlNodeVisitor;\n+import io.ballerina.toml.semantic.ast.TomlStringValueNode;\n+import io.ballerina.toml.semantic.ast.TomlTableArrayNode;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlValueNode;\n+import io.ballerina.toml.semantic.ast.TopLevelNode;\n+import io.ballerina.toml.semantic.diagnostics.TomlDiagnostic;\n+import io.ballerina.toml.semantic.diagnostics.TomlNodeLocation;\n+import io.ballerina.toml.validator.schema.AbstractSchema;\n+import io.ballerina.toml.validator.schema.ArraySchema;\n+import io.ballerina.toml.validator.schema.NumericSchema;\n+import io.ballerina.toml.validator.schema.ObjectSchema;\n+import io.ballerina.toml.validator.schema.Schema;\n+import io.ballerina.toml.validator.schema.StringSchema;\n+import io.ballerina.toml.validator.schema.Type;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Visitor to validate toml object against rules in json schema.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaValidator extends TomlNodeVisitor {\n+\n+    private AbstractSchema schema;\n+    private String key;\n+\n+    public SchemaValidator(Schema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void visit(TomlTableNode tomlTableNode) {\n+        if (schema.type() != Type.OBJECT) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlTableNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                    DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found object\", this.key,\n+                            schema.type()));\n+            tomlTableNode.addDiagnostic(diagnostic);\n+            return;\n+        }\n+        ObjectSchema objectSchema = (ObjectSchema) schema;\n+        Map<String, AbstractSchema> properties = objectSchema.properties();\n+        Map<String, TopLevelNode> tableEntries = tomlTableNode.entries();\n+        for (Map.Entry<String, TopLevelNode> tableEntry : tableEntries.entrySet()) {\n+            String key = tableEntry.getKey();\n+            TopLevelNode value = tableEntry.getValue();\n+            AbstractSchema schema = properties.get(key);\n+            if (schema != null) {\n+                visitNode(value, schema, key);\n+                continue;\n+            }\n+            if (!objectSchema.hasAdditionalProperties()) {\n+                DiagnosticInfo diagnosticInfo = new DiagnosticInfo(\"TVE0001\", \"warn.unexpected.property\",\n+                        DiagnosticSeverity.WARNING);\n+                TomlDiagnostic diagnostic = new TomlDiagnostic(value.location(), diagnosticInfo,\n+                        \"Unexpected Property \\\"\" + key + \"\\\"\");\n+                tomlTableNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlTableArrayNode tomlTableArrayNode) {\n+        if (schema.type() != Type.ARRAY) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlTableArrayNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR, String.format(\"Key \\\"%s\\\" expects %s . Found array\", this.key,\n+                                    schema.type()));\n+            tomlTableArrayNode.addDiagnostic(diagnostic);\n+            return;\n+        }\n+        ArraySchema arraySchema = (ArraySchema) schema;\n+        AbstractSchema memberSchema = arraySchema.items();\n+        List<TomlTableNode> children = tomlTableArrayNode.children();\n+        for (TomlTableNode child : children) {\n+            visitNode(child, memberSchema);\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlKeyValueNode keyValue) {\n+        TomlValueNode value = keyValue.value();\n+        visitNode(value);\n+    }\n+\n+    @Override\n+    public void visit(TomlValueNode tomlValue) {\n+        visitNode(tomlValue);\n+    }\n+\n+    @Override\n+    public void visit(TomlStringValueNode tomlStringValueNode) {\n+        if (schema.type() != Type.STRING) {\n+            TomlDiagnostic diagnostic =\n+                    getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0002\", \"error.invalid.type\",\n+                            DiagnosticSeverity.ERROR,\n+                            String.format(\"Key \\\"%s\\\" expects %s . Found string\", this.key, schema.type()));\n+            tomlStringValueNode.addDiagnostic(diagnostic);\n+            return;\n+        }\n+        StringSchema stringSchema = (StringSchema) this.schema;\n+        if (stringSchema.pattern().isPresent()) {\n+            String pattern = stringSchema.pattern().get();\n+            if (!Pattern.compile(pattern).matcher(tomlStringValueNode.getValue()).matches()) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(tomlStringValueNode.location(), \"TVE0003\",\n+                        \"error.regex.mismatch\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value does not match the Regex provided in Schema %s\", this.key,\n+                                pattern));\n+                tomlStringValueNode.addDiagnostic(diagnostic);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(TomlDoubleValueNodeNode tomlDoubleValueNodeNode) {\n+        if (schema.type() != Type.NUMBER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlDoubleValueNodeNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found number\", this.key, schema.type()));\n+            tomlDoubleValueNodeNode.addDiagnostic(diagnostic);\n+            return;\n+        }\n+        List<Diagnostic> diagnostics =\n+                validateMinMaxValues((NumericSchema) schema, tomlDoubleValueNodeNode.getValue(),\n+                        tomlDoubleValueNodeNode.location());\n+        tomlDoubleValueNodeNode.addDiagnostics(diagnostics);\n+    }\n+\n+    @Override\n+    public void visit(TomlLongValueNode tomlLongValueNode) {\n+        if (schema.type() != Type.INTEGER) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlLongValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found integer\", this.key, schema.type()));\n+            tomlLongValueNode.addDiagnostic(diagnostic);\n+            return;\n+        }\n+        List<Diagnostic> diagnostics =\n+                validateMinMaxValues((NumericSchema) schema, Double.valueOf(tomlLongValueNode.getValue()),\n+                        tomlLongValueNode.location());\n+        for (Diagnostic diagnostic : diagnostics) {\n+            tomlLongValueNode.addDiagnostic(diagnostic);\n+        }\n+    }\n+\n+    private List<Diagnostic> validateMinMaxValues(NumericSchema numericSchema, Double value,\n+                                                  TomlNodeLocation location) {\n+        List<Diagnostic> diagnostics = new ArrayList<>();\n+        if (numericSchema.maximum().isPresent()) {\n+            Double max = numericSchema.maximum().get();\n+            if (value >= max) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0005\", \"error\" +\n+                                \".maximum.value.exceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be higher than %f\", this.key,\n+                                max));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        if (numericSchema.minimum().isPresent()) {\n+            Double min = numericSchema.minimum().get();\n+            if (value <= min) {\n+                TomlDiagnostic diagnostic = getTomlDiagnostic(location, \"TVE0004\",\n+                        \"error.minimum.value.deceed\", DiagnosticSeverity.ERROR,\n+                        String.format(\"Key \\\"%s\\\" value can't be lower than %f\", this.key,\n+                                min));\n+                diagnostics.add(diagnostic);\n+            }\n+        }\n+        return diagnostics;\n+    }\n+\n+    @Override\n+    public void visit(TomlBooleanValueNode tomlBooleanValueNode) {\n+        if (schema.type() != Type.BOOLEAN) {\n+            TomlDiagnostic diagnostic = getTomlDiagnostic(tomlBooleanValueNode.location(), \"TVE0002\",\n+                    \"error.invalid.type\", DiagnosticSeverity.ERROR,\n+                    String.format(\"Key \\\"%s\\\" expects %s . Found boolean\", this.key, schema.type()));\n+            tomlBooleanValueNode.addDiagnostic(diagnostic);\n+        }\n+    }\n+\n+    private void visitNode(TomlNode node) {\n+        AbstractSchema previousSchema = this.schema;\n+        String previousKey = this.key;\n+        node.accept(this);\n+        this.schema = previousSchema;\n+        this.key = previousKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028b7c3f37457fa99dce57a0bacedf5476eb650a"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODE4NDk0OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo1ODoyM1rOH3LAHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo1ODoyM1rOH3LAHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxMzk4MA==", "bodyText": "all the constants should be private since they are not used anywhere else", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26717#discussion_r527613980", "createdAt": "2020-11-20T10:58:23Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/validator/schema/SchemaDeserializer.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.toml.validator.schema;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Responsible for Deserializing abstract Schema nodes accordingly.\n+ *\n+ * @since 2.0.0\n+ */\n+public class SchemaDeserializer implements JsonDeserializer<AbstractSchema> {\n+\n+    public static final String TYPE = \"type\";\n+    public static final String OBJECT = \"object\";\n+    public static final String ARRAY = \"array\";\n+    public static final String INTEGER = \"integer\";\n+    public static final String NUMBER = \"number\";\n+    public static final String STRING = \"string\";\n+    public static final String BOOLEAN = \"boolean\";\n+    public static final String DESCRIPTION = \"description\";\n+    public static final String ADDITIONAL_PROPERTIES = \"additionalProperties\";\n+    public static final String PROPERTIES = \"properties\";\n+    public static final String ITEMS = \"items\";\n+    public static final String PATTERN = \"pattern\";\n+    public static final String MINIMUM = \"minimum\";\n+    public static final String MAXIMUM = \"maximum\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028b7c3f37457fa99dce57a0bacedf5476eb650a"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3177, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}