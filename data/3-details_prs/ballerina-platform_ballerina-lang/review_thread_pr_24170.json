{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Njg3NzA5", "number": 24170, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTowNjo1NlrOEFqSsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyNDo1OFrOEFqpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzcxMjUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTowNjo1NlrOGj_ERg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0NjoxMFrOGkATqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4NjYzMA==", "bodyText": "Isn't the type an intersection type if the type node is an intersection type node?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440386630", "createdAt": "2020-06-15T19:06:56Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1552,6 +1564,81 @@ private void defineMembers(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkg\n         }\n     }\n \n+    private void validateReadOnlyIntersectionTypeDefinitions(List<BLangTypeDefinition> typeDefNodes) {\n+        List<BType> loggedTypes = new ArrayList<>();\n+\n+        for (BLangTypeDefinition typeDefNode : typeDefNodes) {\n+            BLangType typeNode = typeDefNode.typeNode;\n+            NodeKind kind = typeNode.getKind();\n+            if (kind == NodeKind.INTERSECTION_TYPE_NODE) {\n+                BType currentType = typeNode.type;\n+\n+                if (currentType.tag != TypeTags.INTERSECTION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51324607a0ab2cc5dd874787aa71fe9366a7c74"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNjk1NQ==", "bodyText": "This can be symTable.noType if a member type could not be resolved.\ne.g., where Foo is not defined\ntype MyType Foo & readonly;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440406955", "createdAt": "2020-06-15T19:46:10Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1552,6 +1564,81 @@ private void defineMembers(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkg\n         }\n     }\n \n+    private void validateReadOnlyIntersectionTypeDefinitions(List<BLangTypeDefinition> typeDefNodes) {\n+        List<BType> loggedTypes = new ArrayList<>();\n+\n+        for (BLangTypeDefinition typeDefNode : typeDefNodes) {\n+            BLangType typeNode = typeDefNode.typeNode;\n+            NodeKind kind = typeNode.getKind();\n+            if (kind == NodeKind.INTERSECTION_TYPE_NODE) {\n+                BType currentType = typeNode.type;\n+\n+                if (currentType.tag != TypeTags.INTERSECTION) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4NjYzMA=="}, "originalCommit": {"oid": "a51324607a0ab2cc5dd874787aa71fe9366a7c74"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzc0Nzc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToxODowOVrOGj_acQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo0MjoxN1rOGk1YxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5MjMwNQ==", "bodyText": "If the purpose of the loggedTypes list is to keep track of the already checked types, a Set would be a better option from a performance POV right? And the above can even be written as,\nif (!loggedTypes.add(effectiveType)) {\n    continue;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440392305", "createdAt": "2020-06-15T19:18:09Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1552,6 +1564,81 @@ private void defineMembers(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkg\n         }\n     }\n \n+    private void validateReadOnlyIntersectionTypeDefinitions(List<BLangTypeDefinition> typeDefNodes) {\n+        List<BType> loggedTypes = new ArrayList<>();\n+\n+        for (BLangTypeDefinition typeDefNode : typeDefNodes) {\n+            BLangType typeNode = typeDefNode.typeNode;\n+            NodeKind kind = typeNode.getKind();\n+            if (kind == NodeKind.INTERSECTION_TYPE_NODE) {\n+                BType currentType = typeNode.type;\n+\n+                if (currentType.tag != TypeTags.INTERSECTION) {\n+                    continue;\n+                }\n+\n+                BIntersectionType intersectionType = (BIntersectionType) currentType;\n+\n+                BType effectiveType = intersectionType.effectiveType;\n+                if (loggedTypes.contains(effectiveType)) {\n+                    continue;\n+                }\n+\n+                loggedTypes.add(effectiveType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51324607a0ab2cc5dd874787aa71fe9366a7c74"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzI0Mg==", "bodyText": "+1, will send a separate PR to fix this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440407242", "createdAt": "2020-06-15T19:46:45Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1552,6 +1564,81 @@ private void defineMembers(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkg\n         }\n     }\n \n+    private void validateReadOnlyIntersectionTypeDefinitions(List<BLangTypeDefinition> typeDefNodes) {\n+        List<BType> loggedTypes = new ArrayList<>();\n+\n+        for (BLangTypeDefinition typeDefNode : typeDefNodes) {\n+            BLangType typeNode = typeDefNode.typeNode;\n+            NodeKind kind = typeNode.getKind();\n+            if (kind == NodeKind.INTERSECTION_TYPE_NODE) {\n+                BType currentType = typeNode.type;\n+\n+                if (currentType.tag != TypeTags.INTERSECTION) {\n+                    continue;\n+                }\n+\n+                BIntersectionType intersectionType = (BIntersectionType) currentType;\n+\n+                BType effectiveType = intersectionType.effectiveType;\n+                if (loggedTypes.contains(effectiveType)) {\n+                    continue;\n+                }\n+\n+                loggedTypes.add(effectiveType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5MjMwNQ=="}, "originalCommit": {"oid": "a51324607a0ab2cc5dd874787aa71fe9366a7c74"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NjYxMw==", "bodyText": "Fixed in d964ea0.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r441276613", "createdAt": "2020-06-17T04:42:17Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1552,6 +1564,81 @@ private void defineMembers(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkg\n         }\n     }\n \n+    private void validateReadOnlyIntersectionTypeDefinitions(List<BLangTypeDefinition> typeDefNodes) {\n+        List<BType> loggedTypes = new ArrayList<>();\n+\n+        for (BLangTypeDefinition typeDefNode : typeDefNodes) {\n+            BLangType typeNode = typeDefNode.typeNode;\n+            NodeKind kind = typeNode.getKind();\n+            if (kind == NodeKind.INTERSECTION_TYPE_NODE) {\n+                BType currentType = typeNode.type;\n+\n+                if (currentType.tag != TypeTags.INTERSECTION) {\n+                    continue;\n+                }\n+\n+                BIntersectionType intersectionType = (BIntersectionType) currentType;\n+\n+                BType effectiveType = intersectionType.effectiveType;\n+                if (loggedTypes.contains(effectiveType)) {\n+                    continue;\n+                }\n+\n+                loggedTypes.add(effectiveType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5MjMwNQ=="}, "originalCommit": {"oid": "a51324607a0ab2cc5dd874787aa71fe9366a7c74"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzc2OTYxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyNDo1OFrOGj_oTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0OTo0M1rOGkAacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NTg1Mg==", "bodyText": "When can these types be noType?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440395852", "createdAt": "2020-06-15T19:24:58Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1588,11 +1588,19 @@ private BType computeIntersectionType(BLangIntersectionTypeNode intersectionType\n \n         BLangType bLangTypeOne = constituentTypeNodes.get(0);\n         BType typeOne = resolveTypeNode(bLangTypeOne, env);\n+\n+        if (typeOne == symTable.noType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51324607a0ab2cc5dd874787aa71fe9366a7c74"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwODY4OA==", "bodyText": "If the member type definition is after intersection type definition, this can happen. It is handled later on via unresolved types.\ntype MyType Foo & readonly;\n\ntype Foo record {\n    int i;\n};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440408688", "createdAt": "2020-06-15T19:49:43Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1588,11 +1588,19 @@ private BType computeIntersectionType(BLangIntersectionTypeNode intersectionType\n \n         BLangType bLangTypeOne = constituentTypeNodes.get(0);\n         BType typeOne = resolveTypeNode(bLangTypeOne, env);\n+\n+        if (typeOne == symTable.noType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NTg1Mg=="}, "originalCommit": {"oid": "a51324607a0ab2cc5dd874787aa71fe9366a7c74"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3311, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}