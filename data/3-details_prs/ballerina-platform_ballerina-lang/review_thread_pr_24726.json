{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NzM1MDU2", "number": 24726, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNToyOTozOFrOEU2dgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1NTozOVrOEXeGnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjk5MjY0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNToyOTozOFrOG7RpPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNToyOTozOFrOG7RpPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwODI1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        return nodeType;\n          \n          \n            \n                    }\n          \n          \n            \n                    }\n          \n          \n            \n                    return nodeType;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r464808254", "createdAt": "2020-08-04T05:29:38Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -431,6 +431,17 @@ public void visit(BLangTypeDefinition astTypeDefinition) {\n         }\n     }\n \n+    private BType getDefinedType(BLangTypeDefinition astTypeDefinition) {\n+        BType nodeType = astTypeDefinition.typeNode.type;\n+        // Consider: type DE distinct E;\n+        // For distinct types, the type defined by typeDefStmt (DE) is different from type used to define it (E).\n+        if (nodeType.tag == TypeTags.ERROR) {\n+            return astTypeDefinition.symbol.type;\n+        } else {\n+            return nodeType;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzAyNTIwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNTo0NTo1OFrOG7R8GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNTo0NTo1OFrOG7R8GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgxMzA4MQ==", "bodyText": "Can't we assert these in ballerina itself?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r464813081", "createdAt": "2020-08-04T05:45:58Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java", "diffHunk": "@@ -66,6 +66,12 @@ public void testDistinctFooError() {\n         Assert.assertEquals(errors[0].stringValue(), \"error message {\\\"detailField\\\":true}\");\n     }\n \n+    @Test\n+    public void testFunctionCallInDetailArgExpr() {\n+        BValue[] errors = BRunUtil.invoke(distinctErrorTestResult, \"testFunctionCallInDetailArgExpr\");\n+        Assert.assertEquals(errors[0].stringValue(), \"Concurrent graph modification {code:\\\"1234\\\", details:{}}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzA3MzE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNjowODo0MlrOG7SYug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNjowODo0MlrOG7SYug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgyMDQxMA==", "bodyText": "Should we extract typeDef.typeNode out to a variable?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r464820410", "createdAt": "2020-08-04T06:08:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1525,19 +1525,22 @@ private void addTopLevelNode(BLangPackage pkgNode, TopLevelNode node) {\n \n     private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n         for (BLangTypeDefinition typeDef : typeDefNodes) {\n-            if (typeDef.typeNode.getKind() != NodeKind.ERROR_TYPE) {\n-                continue;\n+            if (typeDef.typeNode.getKind() == NodeKind.ERROR_TYPE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzA4OTc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNjoxNjoyOFrOG7Si8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNToyNDowOVrOG9M46Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgyMzAyNw==", "bodyText": "Shouldn't we use a type env here also? If so can we refactor these two blocks to avoid repeating the same logic?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r464823027", "createdAt": "2020-08-04T06:16:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1525,19 +1525,22 @@ private void addTopLevelNode(BLangPackage pkgNode, TopLevelNode node) {\n \n     private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n         for (BLangTypeDefinition typeDef : typeDefNodes) {\n-            if (typeDef.typeNode.getKind() != NodeKind.ERROR_TYPE) {\n-                continue;\n+            if (typeDef.typeNode.getKind() == NodeKind.ERROR_TYPE) {\n+                BLangErrorType errorTypeNode = (BLangErrorType) typeDef.typeNode;\n+                SymbolEnv typeDefEnv = SymbolEnv.createTypeEnv(errorTypeNode, typeDef.symbol.scope, pkgEnv);\n+\n+                BType detailType = Optional.ofNullable(errorTypeNode.detailType)\n+                        .map(bLangType -> symResolver.resolveTypeNode(bLangType, typeDefEnv))\n+                        .orElse(symTable.detailType);\n+\n+                ((BErrorType) typeDef.symbol.type).detailType = detailType;\n+            } else if (typeDef.typeNode.type != null && typeDef.typeNode.type.tag == TypeTags.ERROR) {\n+                BType detailType = ((BErrorType) typeDef.typeNode.type).detailType;\n+                if (detailType == symTable.noType) {\n+                    BErrorType type = (BErrorType) symResolver.resolveTypeNode(typeDef.typeNode, pkgEnv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyNzQ5Nw==", "bodyText": "Fixed the type-env, not quite sure how to fold those 2 branches", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r466827497", "createdAt": "2020-08-07T05:24:09Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1525,19 +1525,22 @@ private void addTopLevelNode(BLangPackage pkgNode, TopLevelNode node) {\n \n     private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n         for (BLangTypeDefinition typeDef : typeDefNodes) {\n-            if (typeDef.typeNode.getKind() != NodeKind.ERROR_TYPE) {\n-                continue;\n+            if (typeDef.typeNode.getKind() == NodeKind.ERROR_TYPE) {\n+                BLangErrorType errorTypeNode = (BLangErrorType) typeDef.typeNode;\n+                SymbolEnv typeDefEnv = SymbolEnv.createTypeEnv(errorTypeNode, typeDef.symbol.scope, pkgEnv);\n+\n+                BType detailType = Optional.ofNullable(errorTypeNode.detailType)\n+                        .map(bLangType -> symResolver.resolveTypeNode(bLangType, typeDefEnv))\n+                        .orElse(symTable.detailType);\n+\n+                ((BErrorType) typeDef.symbol.type).detailType = detailType;\n+            } else if (typeDef.typeNode.type != null && typeDef.typeNode.type.tag == TypeTags.ERROR) {\n+                BType detailType = ((BErrorType) typeDef.typeNode.type).detailType;\n+                if (detailType == symTable.noType) {\n+                    BErrorType type = (BErrorType) symResolver.resolveTypeNode(typeDef.typeNode, pkgEnv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgyMzAyNw=="}, "originalCommit": {"oid": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDQxOTE1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/error/distinct_error_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDozMDo1NlrOG_RaFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDozMDo1NlrOG_RaFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5ODY3OQ==", "bodyText": "Missing a new line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r468998679", "createdAt": "2020-08-12T04:30:56Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/error/distinct_error_test.bal", "diffHunk": "@@ -8,3 +8,31 @@ function testFooError() returns Foo {\n \n     return foo;\n }\n+\n+public type GraphAPIError distinct error<GraphAPIErrorDetails>;\n+public type GraphAPIErrorDetails record {|\n+    string code;\n+    map<anydata> details;\n+|};\n+\n+public function testFunctionCallInDetailArgExpr() {\n+    json codeJson = \"1234\";\n+    map<anydata> details = {};\n+    var x = GraphAPIError(\"Concurrent graph modification\", code = codeJson.toString(), details = details);\n+    assertEquality(x.toString(), \"error Concurrent graph modification code=1234 details=\");\n+}\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertEquality(any|error actual, any|error expected) {\n+    if expected is anydata && actual is anydata && expected == actual {\n+        return;\n+    }\n+\n+    if expected === actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expected.toString() + \"', found '\" + actual.toString () + \"'\");\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997e5414369d240e2f02820a429a98d0d5ee2ddb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDQ1NDI4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1Mjo1MFrOG_RumA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMzoxNDozNFrOHRCjXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMzkyOA==", "bodyText": "Can the detail type here be null like for normal errors (what's handled in L1550-L1552)? If that is the case should we not set symTable.detailType?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469003928", "createdAt": "2020-08-12T04:52:50Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1542,19 +1542,24 @@ private void addTopLevelNode(BLangPackage pkgNode, TopLevelNode node) {\n \n     private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n         for (BLangTypeDefinition typeDef : typeDefNodes) {\n-            if (typeDef.typeNode.getKind() != NodeKind.ERROR_TYPE) {\n-                continue;\n+            BLangType typeNode = typeDef.typeNode;\n+            if (typeNode.getKind() == NodeKind.ERROR_TYPE) {\n+                SymbolEnv typeDefEnv = SymbolEnv.createTypeEnv(typeNode, typeDef.symbol.scope, pkgEnv);\n+                BLangErrorType errorTypeNode = (BLangErrorType) typeNode;\n+\n+                BType detailType = Optional.ofNullable(errorTypeNode.detailType)\n+                        .map(bLangType -> symResolver.resolveTypeNode(bLangType, typeDefEnv))\n+                        .orElse(symTable.detailType);\n+\n+                ((BErrorType) typeDef.symbol.type).detailType = detailType;\n+            } else if (typeNode.type != null && typeNode.type.tag == TypeTags.ERROR) {\n+                SymbolEnv typeDefEnv = SymbolEnv.createTypeEnv(typeNode, typeDef.symbol.scope, pkgEnv);\n+                BType detailType = ((BErrorType) typeNode.type).detailType;\n+                if (detailType == symTable.noType) {\n+                    BErrorType type = (BErrorType) symResolver.resolveTypeNode(typeNode, typeDefEnv);\n+                    ((BErrorType) typeDef.symbol.type).detailType = type.detailType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997e5414369d240e2f02820a429a98d0d5ee2ddb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYyOTY2Mw==", "bodyText": "Also, is it possible for detail type to be symTable.noType when we get to L1576? Wouldn't we have set symTable.detailType?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r487629663", "createdAt": "2020-09-14T03:14:34Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1542,19 +1542,24 @@ private void addTopLevelNode(BLangPackage pkgNode, TopLevelNode node) {\n \n     private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n         for (BLangTypeDefinition typeDef : typeDefNodes) {\n-            if (typeDef.typeNode.getKind() != NodeKind.ERROR_TYPE) {\n-                continue;\n+            BLangType typeNode = typeDef.typeNode;\n+            if (typeNode.getKind() == NodeKind.ERROR_TYPE) {\n+                SymbolEnv typeDefEnv = SymbolEnv.createTypeEnv(typeNode, typeDef.symbol.scope, pkgEnv);\n+                BLangErrorType errorTypeNode = (BLangErrorType) typeNode;\n+\n+                BType detailType = Optional.ofNullable(errorTypeNode.detailType)\n+                        .map(bLangType -> symResolver.resolveTypeNode(bLangType, typeDefEnv))\n+                        .orElse(symTable.detailType);\n+\n+                ((BErrorType) typeDef.symbol.type).detailType = detailType;\n+            } else if (typeNode.type != null && typeNode.type.tag == TypeTags.ERROR) {\n+                SymbolEnv typeDefEnv = SymbolEnv.createTypeEnv(typeNode, typeDef.symbol.scope, pkgEnv);\n+                BType detailType = ((BErrorType) typeNode.type).detailType;\n+                if (detailType == symTable.noType) {\n+                    BErrorType type = (BErrorType) symResolver.resolveTypeNode(typeNode, typeDefEnv);\n+                    ((BErrorType) typeDef.symbol.type).detailType = type.detailType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMzkyOA=="}, "originalCommit": {"oid": "997e5414369d240e2f02820a429a98d0d5ee2ddb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDQ1NTYzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/types/ErrorTypeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1Mzo1MVrOG_RvdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1Mzo1MVrOG_RvdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDE0OQ==", "bodyText": "Shall we assert this in b7a itself?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469004149", "createdAt": "2020-08-12T04:53:51Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/types/ErrorTypeTest.java", "diffHunk": "@@ -106,13 +106,22 @@ public void testPerformInvalidCastWithDistinctErrorType() {\n                 \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: 'OurProccessingError' cannot be cast to \" +\n                         \"'errors:OrderProcessingError'\\\"}\");\n     }\n+\n+    @Test\n+    public void testErrorDetailDefinedAfterErrorDef() {\n+        BValue[] returns = BRunUtil.invoke(result, \"testErrorDetailDefinedAfterErrorDef\");\n+        Assert.assertEquals(returns[0].stringValue(), \"New error {code:\\\"ABCD\\\"}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997e5414369d240e2f02820a429a98d0d5ee2ddb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDQ1NzMyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_project/src/errors/errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1NDo0OFrOG_RwcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1NDo0OFrOG_RwcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDQwMQ==", "bodyText": "Extra line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469004401", "createdAt": "2020-08-12T04:54:48Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_project/src/errors/errors.bal", "diffHunk": "@@ -13,3 +13,12 @@ public type ApplicationError error<ApplicationErrorData>;\n public type OrderCreationError distinct ApplicationError;\n public type OrderProcessingError distinct ApplicationError;\n public type OrderCreationError2 distinct OrderCreationError;\n+\n+public type NewPostDefinedError distinct PostDefinedError;\n+public type PostDefinedError error<ErrorData>;\n+\n+\n+public type ErrorData record {|\n+    string code;\n+|};\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997e5414369d240e2f02820a429a98d0d5ee2ddb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDQ1NzUxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_project/src/errors/errors.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1NDo1NFrOG_Rwjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1NDo1NFrOG_Rwjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDQzMA==", "bodyText": "Extra line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469004430", "createdAt": "2020-08-12T04:54:54Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_project/src/errors/errors.bal", "diffHunk": "@@ -13,3 +13,12 @@ public type ApplicationError error<ApplicationErrorData>;\n public type OrderCreationError distinct ApplicationError;\n public type OrderProcessingError distinct ApplicationError;\n public type OrderCreationError2 distinct OrderCreationError;\n+\n+public type NewPostDefinedError distinct PostDefinedError;\n+public type PostDefinedError error<ErrorData>;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997e5414369d240e2f02820a429a98d0d5ee2ddb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDQ1OTE2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/error/distinct_error_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDo1NTozOVrOG_Rxbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTozNToxMlrOG_SZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDY1NQ==", "bodyText": "Instead of using the toString() representation, shall we assert the message, code, and details maps separately?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469004655", "createdAt": "2020-08-12T04:55:39Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/error/distinct_error_test.bal", "diffHunk": "@@ -8,3 +8,31 @@ function testFooError() returns Foo {\n \n     return foo;\n }\n+\n+public type GraphAPIError distinct error<GraphAPIErrorDetails>;\n+public type GraphAPIErrorDetails record {|\n+    string code;\n+    map<anydata> details;\n+|};\n+\n+public function testFunctionCallInDetailArgExpr() {\n+    json codeJson = \"1234\";\n+    map<anydata> details = {};\n+    var x = GraphAPIError(\"Concurrent graph modification\", code = codeJson.toString(), details = details);\n+    assertEquality(x.toString(), \"error Concurrent graph modification code=1234 details=\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997e5414369d240e2f02820a429a98d0d5ee2ddb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxNDk4OA==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469014988", "createdAt": "2020-08-12T05:35:12Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/error/distinct_error_test.bal", "diffHunk": "@@ -8,3 +8,31 @@ function testFooError() returns Foo {\n \n     return foo;\n }\n+\n+public type GraphAPIError distinct error<GraphAPIErrorDetails>;\n+public type GraphAPIErrorDetails record {|\n+    string code;\n+    map<anydata> details;\n+|};\n+\n+public function testFunctionCallInDetailArgExpr() {\n+    json codeJson = \"1234\";\n+    map<anydata> details = {};\n+    var x = GraphAPIError(\"Concurrent graph modification\", code = codeJson.toString(), details = details);\n+    assertEquality(x.toString(), \"error Concurrent graph modification code=1234 details=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDY1NQ=="}, "originalCommit": {"oid": "997e5414369d240e2f02820a429a98d0d5ee2ddb"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 474, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}