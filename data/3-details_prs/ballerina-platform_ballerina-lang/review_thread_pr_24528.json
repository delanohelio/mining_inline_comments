{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjUzNjQw", "number": 24528, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDoyMTo0NVrOELHlQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMzoyMToyMFrOELhwVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDk0MDE5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDoyMTo0NVrOGsjQdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyMDowNFrOGtRhgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2ODE4MQ==", "bodyText": "shall we go with fieldMatchPatterns to be consistent with the spec?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r449368181", "createdAt": "2020-07-03T04:21:45Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -3888,6 +3888,50 @@\n                     \"type\": \"SimpleNameReferenceNode\"\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"MappingMatchPatternNode\",\n+            \"base\": \"Node\",\n+            \"kind\": \"MAPPING_MATCH_PATTERN\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"openBraceToken\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"mappingMatchPatternListNode\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1996fb5a8f7a74a6afa976ccbefa357a20a293"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNjIwOA==", "bodyText": "changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r450126208", "createdAt": "2020-07-06T10:20:04Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -3888,6 +3888,50 @@\n                     \"type\": \"SimpleNameReferenceNode\"\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"MappingMatchPatternNode\",\n+            \"base\": \"Node\",\n+            \"kind\": \"MAPPING_MATCH_PATTERN\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"openBraceToken\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"mappingMatchPatternListNode\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2ODE4MQ=="}, "originalCommit": {"oid": "7d1996fb5a8f7a74a6afa976ccbefa357a20a293"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTA3MjAyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTo1MDoyMFrOGskdiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyMDoxMFrOGtRhsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NzkxMw==", "bodyText": "should the type be FieldMatchPatternNode?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r449387913", "createdAt": "2020-07-03T05:50:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -3888,6 +3888,50 @@\n                     \"type\": \"SimpleNameReferenceNode\"\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"MappingMatchPatternNode\",\n+            \"base\": \"Node\",\n+            \"kind\": \"MAPPING_MATCH_PATTERN\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"openBraceToken\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"mappingMatchPatternListNode\",\n+                    \"type\": \"Node\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1996fb5a8f7a74a6afa976ccbefa357a20a293"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNjI1OA==", "bodyText": "changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r450126258", "createdAt": "2020-07-06T10:20:10Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -3888,6 +3888,50 @@\n                     \"type\": \"SimpleNameReferenceNode\"\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"MappingMatchPatternNode\",\n+            \"base\": \"Node\",\n+            \"kind\": \"MAPPING_MATCH_PATTERN\",\n+            \"attributes\": [\n+                {\n+                    \"name\": \"openBraceToken\",\n+                    \"type\": \"Token\"\n+                },\n+                {\n+                    \"name\": \"mappingMatchPatternListNode\",\n+                    \"type\": \"Node\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NzkxMw=="}, "originalCommit": {"oid": "7d1996fb5a8f7a74a6afa976ccbefa357a20a293"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTIyMDYxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMzoxNDoyNFrOGtHnjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyMDoxN1rOGtRh5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MzkxNg==", "bodyText": "add <br/> for line breaks.. otherwise the IDE preview will look cluttered.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r449963916", "createdAt": "2020-07-06T03:14:24Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12619,6 +12623,103 @@ private STNode parseListMatchPatternMemberRhs(SyntaxKind nextTokenKind) {\n         }\n     }\n \n+    /**\n+     * Parse mapping match pattern.\n+     * <p>\n+     *     mapping-match-pattern := { field-match-patterns }\n+     *     field-match-patterns :=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb756f9cbc10390a30cb812cd4abed8121e76de"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNjMxMA==", "bodyText": "changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r450126310", "createdAt": "2020-07-06T10:20:17Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12619,6 +12623,103 @@ private STNode parseListMatchPatternMemberRhs(SyntaxKind nextTokenKind) {\n         }\n     }\n \n+    /**\n+     * Parse mapping match pattern.\n+     * <p>\n+     *     mapping-match-pattern := { field-match-patterns }\n+     *     field-match-patterns :=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MzkxNg=="}, "originalCommit": {"oid": "feb756f9cbc10390a30cb812cd4abed8121e76de"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTIyODM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMzoyMToyMFrOGtHsNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyMDo0MVrOGtRi0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2NTExMQ==", "bodyText": "I think we should first parse the match-pattern (it could be a field-match-pattern or rest-match-pattern), and then check whether its a rest-pattern or not.\nReason is, if theres a junk token before ellipsis, above condition fail and it will try to parse it as a field-match-pattern.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r449965111", "createdAt": "2020-07-06T03:21:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12619,6 +12623,103 @@ private STNode parseListMatchPatternMemberRhs(SyntaxKind nextTokenKind) {\n         }\n     }\n \n+    /**\n+     * Parse mapping match pattern.\n+     * <p>\n+     *     mapping-match-pattern := { field-match-patterns }\n+     *     field-match-patterns :=\n+     *    field-match-pattern (, field-match-pattern)* [, rest-match-pattern]\n+     *    | [ rest-match-pattern ]\n+     *      field-match-pattern := field-name : match-pattern\n+     *      rest-match-pattern := ... var variable-name\n+     * </p>\n+     *\n+     * @return Parsed Node.\n+     */\n+    private STNode parseMappingMatchPattern() {\n+        startContext(ParserRuleContext.MAPPING_MATCH_PATTERN);\n+        STNode openBraceToken = parseOpenBrace();\n+        List<STNode> mappingMatchPatternList = new ArrayList<>();\n+        STNode restMatchPattern = null;\n+\n+        while (!isEndOfMappingMatchPattern()) {\n+            STToken nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                restMatchPattern = parseRestMatchPattern();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb756f9cbc10390a30cb812cd4abed8121e76de"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2NTMzMg==", "bodyText": "Also, once the rest pattern is found, we should continue to parse match-patterns (do not break the loop), but add them as invalid nodes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r449965332", "createdAt": "2020-07-06T03:22:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12619,6 +12623,103 @@ private STNode parseListMatchPatternMemberRhs(SyntaxKind nextTokenKind) {\n         }\n     }\n \n+    /**\n+     * Parse mapping match pattern.\n+     * <p>\n+     *     mapping-match-pattern := { field-match-patterns }\n+     *     field-match-patterns :=\n+     *    field-match-pattern (, field-match-pattern)* [, rest-match-pattern]\n+     *    | [ rest-match-pattern ]\n+     *      field-match-pattern := field-name : match-pattern\n+     *      rest-match-pattern := ... var variable-name\n+     * </p>\n+     *\n+     * @return Parsed Node.\n+     */\n+    private STNode parseMappingMatchPattern() {\n+        startContext(ParserRuleContext.MAPPING_MATCH_PATTERN);\n+        STNode openBraceToken = parseOpenBrace();\n+        List<STNode> mappingMatchPatternList = new ArrayList<>();\n+        STNode restMatchPattern = null;\n+\n+        while (!isEndOfMappingMatchPattern()) {\n+            STToken nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                restMatchPattern = parseRestMatchPattern();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2NTExMQ=="}, "originalCommit": {"oid": "feb756f9cbc10390a30cb812cd4abed8121e76de"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NjAwMA==", "bodyText": "Thanks for mentioning it. I will change.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r449986000", "createdAt": "2020-07-06T05:08:36Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12619,6 +12623,103 @@ private STNode parseListMatchPatternMemberRhs(SyntaxKind nextTokenKind) {\n         }\n     }\n \n+    /**\n+     * Parse mapping match pattern.\n+     * <p>\n+     *     mapping-match-pattern := { field-match-patterns }\n+     *     field-match-patterns :=\n+     *    field-match-pattern (, field-match-pattern)* [, rest-match-pattern]\n+     *    | [ rest-match-pattern ]\n+     *      field-match-pattern := field-name : match-pattern\n+     *      rest-match-pattern := ... var variable-name\n+     * </p>\n+     *\n+     * @return Parsed Node.\n+     */\n+    private STNode parseMappingMatchPattern() {\n+        startContext(ParserRuleContext.MAPPING_MATCH_PATTERN);\n+        STNode openBraceToken = parseOpenBrace();\n+        List<STNode> mappingMatchPatternList = new ArrayList<>();\n+        STNode restMatchPattern = null;\n+\n+        while (!isEndOfMappingMatchPattern()) {\n+            STToken nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                restMatchPattern = parseRestMatchPattern();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2NTExMQ=="}, "originalCommit": {"oid": "feb756f9cbc10390a30cb812cd4abed8121e76de"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNjU0Ng==", "bodyText": "changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24528#discussion_r450126546", "createdAt": "2020-07-06T10:20:41Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -12619,6 +12623,103 @@ private STNode parseListMatchPatternMemberRhs(SyntaxKind nextTokenKind) {\n         }\n     }\n \n+    /**\n+     * Parse mapping match pattern.\n+     * <p>\n+     *     mapping-match-pattern := { field-match-patterns }\n+     *     field-match-patterns :=\n+     *    field-match-pattern (, field-match-pattern)* [, rest-match-pattern]\n+     *    | [ rest-match-pattern ]\n+     *      field-match-pattern := field-name : match-pattern\n+     *      rest-match-pattern := ... var variable-name\n+     * </p>\n+     *\n+     * @return Parsed Node.\n+     */\n+    private STNode parseMappingMatchPattern() {\n+        startContext(ParserRuleContext.MAPPING_MATCH_PATTERN);\n+        STNode openBraceToken = parseOpenBrace();\n+        List<STNode> mappingMatchPatternList = new ArrayList<>();\n+        STNode restMatchPattern = null;\n+\n+        while (!isEndOfMappingMatchPattern()) {\n+            STToken nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ELLIPSIS_TOKEN) {\n+                restMatchPattern = parseRestMatchPattern();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2NTExMQ=="}, "originalCommit": {"oid": "feb756f9cbc10390a30cb812cd4abed8121e76de"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3200, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}