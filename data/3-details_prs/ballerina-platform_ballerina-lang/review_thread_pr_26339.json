{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyODEyODAw", "number": 26339, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxMzo0NFrOEtTEqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowMToxOFrOEtcw_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTMzODY3OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxMzo0NFrOHhAmIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo0Njo0MFrOHhNILA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NDgxOQ==", "bodyText": "Don't we need a newline after the workers?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504374819", "createdAt": "2020-10-14T03:13:44Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -389,6 +389,13 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDE0MA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580140", "createdAt": "2020-10-14T10:46:40Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -389,6 +389,13 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NDgxOQ=="}, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM0MjA0OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxNTozOFrOHhAoGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo1MDozMVrOHhNQOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTMyMw==", "bodyText": "Last child in all nodes (i.e: in all  the transform methods), should take the trailing WS/NL from the global variable.\nYou can refer to the existing methods..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504375323", "createdAt": "2020-10-14T03:15:38Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MjIwMg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504582202", "createdAt": "2020-10-14T10:50:31Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTMyMw=="}, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM2NDYzOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoyNzo1MFrOHhA1Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo0Njo1OFrOHhNIyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODY2Mw==", "bodyText": "Shouldn't there be a newline after each annotation? please refer to the other places on how the annotations are formatted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504378663", "createdAt": "2020-10-14T03:27:50Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDI5OA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580298", "createdAt": "2020-10-14T10:46:58Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODY2Mw=="}, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM2NjYyOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoyOTowN1rOHhA2aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo1MDo1NlrOHhNRCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODk4NQ==", "bodyText": "Need a WS after the return type-desc", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504378985", "createdAt": "2020-10-14T03:29:07Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MjQxMQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504582411", "createdAt": "2020-10-14T10:50:56Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODk4NQ=="}, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM3MDE4OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzozMDo1M1rOHhA4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo0NzoxMFrOHhNJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTUwMA==", "bodyText": "This is in the wrong order. Close bracket is visited before the array-length.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504379500", "createdAt": "2020-10-14T03:30:53Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDM4NA==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580384", "createdAt": "2020-10-14T10:47:10Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTUwMA=="}, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM3MDc1OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzozMToyMVrOHhA4yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo1MDowOFrOHhNPcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTU5NA==", "bodyText": "since isPresent() check is done, you can directly call arrayLength().get()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504379594", "createdAt": "2020-10-14T03:31:21Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MjAwMg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504582002", "createdAt": "2020-10-14T10:50:08Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTU5NA=="}, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM3NDc4OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzozMzo0NlrOHhA7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo0NzoyN1rOHhNJqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDIxOA==", "bodyText": "Last child in all nodes (i.e: in all the transform methods), should take the trailing WS/NL from the global variable.\nLets fix that in all places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504380218", "createdAt": "2020-10-14T03:33:46Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDUyMA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580520", "createdAt": "2020-10-14T10:47:27Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDIxOA=="}, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM3NzgyOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzozNToyN1rOHhA9AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo0Nzo0MVrOHhNKLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDY3Mw==", "bodyText": "use get() instead of orElse(null)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504380673", "createdAt": "2020-10-14T03:35:27Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), 0, 0);\n+\n+        return xMLElementNode.modify()\n+                .withStartTag(startTagNode)\n+                .withContent(content)\n+                .withEndTag(endTagNode)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLStartTagNode transform(XMLStartTagNode xMLStartTagNode) {\n+        Token ltToken = formatToken(xMLStartTagNode.ltToken(), 0, 0);\n+        int nameTrailingWS = xMLStartTagNode.attributes().isEmpty() ? 0 : 1;\n+        XMLNameNode name = formatNode(xMLStartTagNode.name(), nameTrailingWS, 0);\n+        NodeList<XMLAttributeNode> attributes = formatNodeList(xMLStartTagNode.attributes(), 1, 0, 0, 0);\n+        Token getToken = formatToken(xMLStartTagNode.getToken(), 0, 0);\n+\n+        return xMLStartTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withName(name)\n+                .withAttributes(attributes)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLEndTagNode transform(XMLEndTagNode xMLEndTagNode) {\n+        Token ltToken = formatToken(xMLEndTagNode.ltToken(), 0, 0);\n+        Token slashToken = formatToken(xMLEndTagNode.slashToken(), 0, 0);\n+        XMLNameNode name = formatNode(xMLEndTagNode.name(), 0,0);\n+        Token getToken = formatToken(xMLEndTagNode.getToken(), 0,0);\n+\n+        return xMLEndTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withSlashToken(slashToken)\n+                .withName(name)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XmlTypeDescriptorNode transform(XmlTypeDescriptorNode xmlTypeDescriptorNode) {\n+        Token xmlKeywordToken = formatToken(xmlTypeDescriptorNode.xmlKeywordToken(), 1, 0);\n+        if (xmlTypeDescriptorNode.xmlTypeParamsNode().isPresent()) {\n+            TypeParameterNode xmlTypeParamsNode = formatNode(xmlTypeDescriptorNode.xmlTypeParamsNode().orElse(null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDY1NQ==", "bodyText": "Completed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580655", "createdAt": "2020-10-14T10:47:41Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), 0, 0);\n+\n+        return xMLElementNode.modify()\n+                .withStartTag(startTagNode)\n+                .withContent(content)\n+                .withEndTag(endTagNode)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLStartTagNode transform(XMLStartTagNode xMLStartTagNode) {\n+        Token ltToken = formatToken(xMLStartTagNode.ltToken(), 0, 0);\n+        int nameTrailingWS = xMLStartTagNode.attributes().isEmpty() ? 0 : 1;\n+        XMLNameNode name = formatNode(xMLStartTagNode.name(), nameTrailingWS, 0);\n+        NodeList<XMLAttributeNode> attributes = formatNodeList(xMLStartTagNode.attributes(), 1, 0, 0, 0);\n+        Token getToken = formatToken(xMLStartTagNode.getToken(), 0, 0);\n+\n+        return xMLStartTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withName(name)\n+                .withAttributes(attributes)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLEndTagNode transform(XMLEndTagNode xMLEndTagNode) {\n+        Token ltToken = formatToken(xMLEndTagNode.ltToken(), 0, 0);\n+        Token slashToken = formatToken(xMLEndTagNode.slashToken(), 0, 0);\n+        XMLNameNode name = formatNode(xMLEndTagNode.name(), 0,0);\n+        Token getToken = formatToken(xMLEndTagNode.getToken(), 0,0);\n+\n+        return xMLEndTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withSlashToken(slashToken)\n+                .withName(name)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XmlTypeDescriptorNode transform(XmlTypeDescriptorNode xmlTypeDescriptorNode) {\n+        Token xmlKeywordToken = formatToken(xmlTypeDescriptorNode.xmlKeywordToken(), 1, 0);\n+        if (xmlTypeDescriptorNode.xmlTypeParamsNode().isPresent()) {\n+            TypeParameterNode xmlTypeParamsNode = formatNode(xmlTypeDescriptorNode.xmlTypeParamsNode().orElse(null),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDY3Mw=="}, "originalCommit": {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDc4NzU4OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMToyMToyNlrOHhOQRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzowNzoxOVrOHhSFOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw==", "bodyText": "Shall we keep a single trailing newline here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504598597", "createdAt": "2020-10-14T11:21:26Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMTY4Ng==", "bodyText": "It was suggested by @SupunS to keep a newline between workers.\n#26339 (comment)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504601686", "createdAt": "2020-10-14T11:27:39Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMjg5Mw==", "bodyText": "I think he must have meant a single newline, let's get this clarified from @SupunS.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504602893", "createdAt": "2020-10-14T11:29:45Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxNTUwMA==", "bodyText": "I was initially thinking of a single newline.\nBut on a second thought, I think we should go by the same rules as for the statements. That is, a minimum of a single newline, and a maximum of two newlines. WDYT?\nbtw, have we implemented the transform(NamedWorkerDeclarator namedWorkerDeclarator) method? We will have the same concern there as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504615500", "createdAt": "2020-10-14T11:53:33Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxOTU0NQ==", "bodyText": "We should implement the transform(NamedWorkerDeclarator namedWorkerDeclarator) method in the new formatting tree modifier as well.\nShould we go with a single newline for worker blocks?\nOtherwise there will be an extra newline at the end of the last worker block as suggested by @IrushiL", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504619545", "createdAt": "2020-10-14T12:00:43Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyODM0OA==", "bodyText": "@sanjana Let's go in the same approach as in statements. It handles those cases as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504628348", "createdAt": "2020-10-14T12:16:44Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzNjQwOA==", "bodyText": "@SupunS Yeah, it's better to preserve an empty new line if the user has explicitly kept new lines.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504636408", "createdAt": "2020-10-14T12:30:07Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2MTMwNQ==", "bodyText": "okay, I've fixed it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504661305", "createdAt": "2020-10-14T13:07:19Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDkyNjcwOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowMToxOFrOHhPjYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzoxNTowM1rOHhSa5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxOTg3NQ==", "bodyText": "Can we simplify this logic to something like [1]?\n[1] \n  \n    \n      ballerina-lang/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java\n    \n    \n         Line 348\n      in\n      bdaa37b\n    \n    \n    \n    \n\n        \n          \n           Token closePara;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504619875", "createdAt": "2020-10-14T12:01:18Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -3315,6 +3277,136 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 1, 0, 1);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 1, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), this.trailingWS, this.trailingNL);\n+\n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().get(), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, this.trailingNL);\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), this.trailingWS, this.trailingNL);\n+\n+        return xMLElementNode.modify()\n+                .withStartTag(startTagNode)\n+                .withContent(content)\n+                .withEndTag(endTagNode)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLStartTagNode transform(XMLStartTagNode xMLStartTagNode) {\n+        Token ltToken = formatToken(xMLStartTagNode.ltToken(), 0, 0);\n+        int nameTrailingWS = xMLStartTagNode.attributes().isEmpty() ? 0 : 1;\n+        XMLNameNode name = formatNode(xMLStartTagNode.name(), nameTrailingWS, 0);\n+        NodeList<XMLAttributeNode> attributes = formatNodeList(xMLStartTagNode.attributes(), 1, 0, 0, 0);\n+        Token getToken = formatToken(xMLStartTagNode.getToken(), this.trailingWS, this.trailingNL);\n+\n+        return xMLStartTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withName(name)\n+                .withAttributes(attributes)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLEndTagNode transform(XMLEndTagNode xMLEndTagNode) {\n+        Token ltToken = formatToken(xMLEndTagNode.ltToken(), 0, 0);\n+        Token slashToken = formatToken(xMLEndTagNode.slashToken(), 0, 0);\n+        XMLNameNode name = formatNode(xMLEndTagNode.name(), 0,0);\n+        Token getToken = formatToken(xMLEndTagNode.getToken(), this.trailingWS,this.trailingNL);\n+\n+        return xMLEndTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withSlashToken(slashToken)\n+                .withName(name)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XmlTypeDescriptorNode transform(XmlTypeDescriptorNode xmlTypeDescriptorNode) {\n+        int trailingWS = xmlTypeDescriptorNode.xmlTypeParamsNode().isEmpty() ? this.trailingWS : 0;\n+        int trailingNL = xmlTypeDescriptorNode.xmlTypeParamsNode().isEmpty() ? this.trailingNL : 0;\n+        Token xmlKeywordToken = formatToken(xmlTypeDescriptorNode.xmlKeywordToken(), trailingWS, trailingNL);\n+        if (xmlTypeDescriptorNode.xmlTypeParamsNode().isPresent()) {\n+            TypeParameterNode xmlTypeParamsNode = formatNode(xmlTypeDescriptorNode.xmlTypeParamsNode().get(),\n+                    this.trailingWS, this.trailingNL);\n+            xmlTypeDescriptorNode = xmlTypeDescriptorNode.modify()\n+                    .withXmlTypeParamsNode(xmlTypeParamsNode)\n+                    .apply();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2Njg1Mw==", "bodyText": "Done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504666853", "createdAt": "2020-10-14T13:15:03Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -3315,6 +3277,136 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 1, 0, 1);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 1, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), this.trailingWS, this.trailingNL);\n+\n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().get(), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, this.trailingNL);\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), this.trailingWS, this.trailingNL);\n+\n+        return xMLElementNode.modify()\n+                .withStartTag(startTagNode)\n+                .withContent(content)\n+                .withEndTag(endTagNode)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLStartTagNode transform(XMLStartTagNode xMLStartTagNode) {\n+        Token ltToken = formatToken(xMLStartTagNode.ltToken(), 0, 0);\n+        int nameTrailingWS = xMLStartTagNode.attributes().isEmpty() ? 0 : 1;\n+        XMLNameNode name = formatNode(xMLStartTagNode.name(), nameTrailingWS, 0);\n+        NodeList<XMLAttributeNode> attributes = formatNodeList(xMLStartTagNode.attributes(), 1, 0, 0, 0);\n+        Token getToken = formatToken(xMLStartTagNode.getToken(), this.trailingWS, this.trailingNL);\n+\n+        return xMLStartTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withName(name)\n+                .withAttributes(attributes)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLEndTagNode transform(XMLEndTagNode xMLEndTagNode) {\n+        Token ltToken = formatToken(xMLEndTagNode.ltToken(), 0, 0);\n+        Token slashToken = formatToken(xMLEndTagNode.slashToken(), 0, 0);\n+        XMLNameNode name = formatNode(xMLEndTagNode.name(), 0,0);\n+        Token getToken = formatToken(xMLEndTagNode.getToken(), this.trailingWS,this.trailingNL);\n+\n+        return xMLEndTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withSlashToken(slashToken)\n+                .withName(name)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XmlTypeDescriptorNode transform(XmlTypeDescriptorNode xmlTypeDescriptorNode) {\n+        int trailingWS = xmlTypeDescriptorNode.xmlTypeParamsNode().isEmpty() ? this.trailingWS : 0;\n+        int trailingNL = xmlTypeDescriptorNode.xmlTypeParamsNode().isEmpty() ? this.trailingNL : 0;\n+        Token xmlKeywordToken = formatToken(xmlTypeDescriptorNode.xmlKeywordToken(), trailingWS, trailingNL);\n+        if (xmlTypeDescriptorNode.xmlTypeParamsNode().isPresent()) {\n+            TypeParameterNode xmlTypeParamsNode = formatNode(xmlTypeDescriptorNode.xmlTypeParamsNode().get(),\n+                    this.trailingWS, this.trailingNL);\n+            xmlTypeDescriptorNode = xmlTypeDescriptorNode.modify()\n+                    .withXmlTypeParamsNode(xmlTypeParamsNode)\n+                    .apply();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxOTg3NQ=="}, "originalCommit": {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6"}, "originalPosition": 199}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4727, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}