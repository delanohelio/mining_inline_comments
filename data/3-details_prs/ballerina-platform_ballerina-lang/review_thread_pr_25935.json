{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MjE2NjIx", "number": 25935, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowMDowMVrOEoH4uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToxNDoxMVrOEv8Fww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTA3NzA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowMDowMVrOHZCCFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMTo0NzozMFrOHfGX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwOTc1MA==", "bodyText": "What is the purpose of enabling the desugared field?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r496009750", "createdAt": "2020-09-28T15:00:01Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5033,6 +5039,19 @@ public void visit(BLangXMLElementAccess xmlElementAccess) {\n         result = rewriteExpr(invocationNode);\n     }\n \n+    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n+        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n+        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = fieldAccessExpr.type;\n+        typedescExpr.type = typedescType;\n+        requiredArgs.add(typedescExpr);\n+        fieldAccessExpr.desugared = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3MjMwOQ==", "bodyText": "I did this to stop desugaring fieldAccessExpr repeatedly(this happen due to use of fieldAccessExpr as a parameter to the requiredType function ). Anyway, I removed this function with the new changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502372309", "createdAt": "2020-10-09T11:47:30Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5033,6 +5039,19 @@ public void visit(BLangXMLElementAccess xmlElementAccess) {\n         result = rewriteExpr(invocationNode);\n     }\n \n+    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n+        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n+        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = fieldAccessExpr.type;\n+        typedescExpr.type = typedescType;\n+        requiredArgs.add(typedescExpr);\n+        fieldAccessExpr.desugared = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwOTc1MA=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTA4NzA4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowMToxN1rOHZCIGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMTozOToxOFrOHfGI_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxMTI5MQ==", "bodyText": "Instead of rewriting in L:3770, shall we rewrite before return?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r496011291", "createdAt": "2020-09-28T15:01:17Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5033,6 +5039,19 @@ public void visit(BLangXMLElementAccess xmlElementAccess) {\n         result = rewriteExpr(invocationNode);\n     }\n \n+    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n+        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n+        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = fieldAccessExpr.type;\n+        typedescExpr.type = typedescType;\n+        requiredArgs.add(typedescExpr);\n+        fieldAccessExpr.desugared = true;\n+        BLangInvocation invocationNode = createLangLibInvocationNode(VALUE_REQUIRE_TYPE, fieldAccessExpr,\n+                requiredArgs, null, fieldAccessExpr.pos);\n+        return invocationNode;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2ODUwOA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502368508", "createdAt": "2020-10-09T11:39:18Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5033,6 +5039,19 @@ public void visit(BLangXMLElementAccess xmlElementAccess) {\n         result = rewriteExpr(invocationNode);\n     }\n \n+    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n+        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n+        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = fieldAccessExpr.type;\n+        typedescExpr.type = typedescType;\n+        requiredArgs.add(typedescExpr);\n+        fieldAccessExpr.desugared = true;\n+        BLangInvocation invocationNode = createLangLibInvocationNode(VALUE_REQUIRE_TYPE, fieldAccessExpr,\n+                requiredArgs, null, fieldAccessExpr.pos);\n+        return invocationNode;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxMTI5MQ=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTE0ODc1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowOToyNVrOHZCstQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNzowMVrOHd1KNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAyMDY2MQ==", "bodyText": "Shall we replace the streams?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r496020661", "createdAt": "2020-09-28T15:09:25Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n+                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);\n+                BUnionType expectType = BUnionType.create(null, new LinkedHashSet<>(expectedTypes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MTcxOQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501041719", "createdAt": "2020-10-07T14:07:01Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n+                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);\n+                BUnionType expectType = BUnionType.create(null, new LinkedHashSet<>(expectedTypes));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAyMDY2MQ=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzgxNDIwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjoxNjo0OVrOHcaXbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNjo0M1rOHd1JUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NDE1OQ==", "bodyText": "Local variable invocationNode is redundant and we can return directly", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499554159", "createdAt": "2020-10-05T12:16:49Z", "author": {"login": "anupama-pathirage"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5033,6 +5039,19 @@ public void visit(BLangXMLElementAccess xmlElementAccess) {\n         result = rewriteExpr(invocationNode);\n     }\n \n+    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n+        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n+        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = fieldAccessExpr.type;\n+        typedescExpr.type = typedescType;\n+        requiredArgs.add(typedescExpr);\n+        fieldAccessExpr.desugared = true;\n+        BLangInvocation invocationNode = createLangLibInvocationNode(VALUE_REQUIRE_TYPE, fieldAccessExpr,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MTQ4OQ==", "bodyText": "Removed the invocationNode variable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501041489", "createdAt": "2020-10-07T14:06:43Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5033,6 +5039,19 @@ public void visit(BLangXMLElementAccess xmlElementAccess) {\n         result = rewriteExpr(invocationNode);\n     }\n \n+    private BLangInvocation generateRequireTypeLangLibFunction(BLangAccessExpression fieldAccessExpr) {\n+        ArrayList<BLangExpression> requiredArgs = new ArrayList<>();\n+        BType typedescType = new BTypedescType(fieldAccessExpr.type, null);\n+        BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+        typedescExpr.resolvedType = fieldAccessExpr.type;\n+        typedescExpr.type = typedescType;\n+        requiredArgs.add(typedescExpr);\n+        fieldAccessExpr.desugared = true;\n+        BLangInvocation invocationNode = createLangLibInvocationNode(VALUE_REQUIRE_TYPE, fieldAccessExpr,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NDE1OQ=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzgyNzAwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjoyMDo1MFrOHcafjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNjowMVrOHd1HSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NjIzNw==", "bodyText": "Instead of instanceof check, can we use checkedExpr.expr.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499556237", "createdAt": "2020-10-05T12:20:50Z", "author": {"login": "anupama-pathirage"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4456,6 +4461,9 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n         boolean firstVisit = checkedExpr.expr.type == null;\n         BType exprExpType;\n+        if (checkedExpr.expr instanceof BLangFieldBasedAccess && checkedExpr.getKind() == NodeKind.CHECK_EXPR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MDk2OA==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501040968", "createdAt": "2020-10-07T14:06:01Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4456,6 +4461,9 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n         boolean firstVisit = checkedExpr.expr.type == null;\n         BType exprExpType;\n+        if (checkedExpr.expr instanceof BLangFieldBasedAccess && checkedExpr.getKind() == NodeKind.CHECK_EXPR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NjIzNw=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzgyOTY3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjoyMTo0OFrOHcahVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNToyNlrOHd1Fjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NjY5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);\n          \n          \n            \n                            boolean isConvertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499556694", "createdAt": "2020-10-05T12:21:48Z", "author": {"login": "anupama-pathirage"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n+                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MDUyNg==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501040526", "createdAt": "2020-10-07T14:05:26Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n+                boolean isCovertible = expectedTypes.stream().allMatch(this::isNonStructureJsonType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1NjY5NA=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzg0MzE4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjoyNTozOVrOHcapxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNToxMVrOHd1E4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1ODg1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # basic simple types are ()|int|float|decimal|string.\n          \n          \n            \n            # The basic simple types are ()|int|float|decimal|string.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499558855", "createdAt": "2020-10-05T12:25:39Z", "author": {"login": "anupama-pathirage"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -200,3 +200,10 @@ public isolated function fromJsonStringWithType(string str, typedesc<anydata> t)\n # - otherwise, the merge fails\n # If the merge fails, then `j1` is unchanged.\n public isolated function mergeJson(json j1, json j2) returns json|error = external;\n+\n+# Converts a field in map<json> to a user-specified basic simple type.\n+# basic simple types are ()|int|float|decimal|string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MDM1Mg==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501040352", "createdAt": "2020-10-07T14:05:11Z", "author": {"login": "chiranSachintha"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -200,3 +200,10 @@ public isolated function fromJsonStringWithType(string str, typedesc<anydata> t)\n # - otherwise, the merge fails\n # If the merge fails, then `j1` is unchanged.\n public isolated function mergeJson(json j1, json j2) returns json|error = external;\n+\n+# Converts a field in map<json> to a user-specified basic simple type.\n+# basic simple types are ()|int|float|decimal|string.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1ODg1NQ=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODExOTE1OnYy", "diffSide": "RIGHT", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzozNDozM1rOHcdUDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNDo1N1rOHd1EMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMjQ0Ng==", "bodyText": "IINM, we are using @since 2.0.0. @hasithaa ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499602446", "createdAt": "2020-10-05T13:34:33Z", "author": {"login": "anupama-pathirage"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NjY5Mw==", "bodyText": "We seem to have used several versions such as 2.0.0, 2.0.0-Preview1, slp1, and Swan Lake. I also used 2.0.0 before the name was finalized but then switched to Swan Lake.\nSince the artifacts use 2.0.0 we should probably use the same here? What about with future versions though?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500396693", "createdAt": "2020-10-06T15:34:58Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMjQ0Ng=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MDE3Ng==", "bodyText": "Changed to 2.0.0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501040176", "createdAt": "2020-10-07T14:04:57Z", "author": {"login": "chiranSachintha"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMjQ0Ng=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE0NjUzOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0MDo1OVrOHcdlWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNDozNFrOHd1C-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNjg3NA==", "bodyText": "Shall we properly format the json as it will improve the readability?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499606874", "createdAt": "2020-10-05T13:40:59Z", "author": {"login": "anupama-pathirage"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -1050,3 +1050,181 @@ function assert(anydata actual, anydata expected) {\n         panic e;\n     }\n }\n+\n+///////////////////////// Tests for `requireType()` ///////////////////////////\n+\n+json  p = {name: \"Chiran\", age: 24, email: \"chirans\", height: 178.5, weight: 72.5, property: (), address: [125.0/3, \"xyz street\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAzOTg2NQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501039865", "createdAt": "2020-10-07T14:04:34Z", "author": {"login": "chiranSachintha"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -1050,3 +1050,181 @@ function assert(anydata actual, anydata expected) {\n         panic e;\n     }\n }\n+\n+///////////////////////// Tests for `requireType()` ///////////////////////////\n+\n+json  p = {name: \"Chiran\", age: 24, email: \"chirans\", height: 178.5, weight: 72.5, property: (), address: [125.0/3, \"xyz street\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNjg3NA=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE2NTc2OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0NTozNVrOHcdxfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNDoyMVrOHd1CXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwOTk4MQ==", "bodyText": "It seems code is not properly formatted. Remove the  space after >", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r499609981", "createdAt": "2020-10-05T13:45:35Z", "author": {"login": "anupama-pathirage"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -1050,3 +1050,181 @@ function assert(anydata actual, anydata expected) {\n         panic e;\n     }\n }\n+\n+///////////////////////// Tests for `requireType()` ///////////////////////////\n+\n+json  p = {name: \"Chiran\", age: 24, email: \"chirans\", height: 178.5, weight: 72.5, property: (), address: [125.0/3, \"xyz street\",\n+{province: \"southern\", Country: \"Sri Lanka\"}, 81000], married: false, bloodType: {group: \"O\", RHD: \"+\"}};\n+\n+function testRequireTypeWithInt() returns int|error {\n+    int age = check p.age;\n+    return age;\n+}\n+\n+function testRequireTypeWithInt2() returns int|error {\n+    int height = check p.height;\n+    return height;\n+}\n+\n+function testRequireTypeWithInt3() returns int|error {\n+    int married = check p.married;\n+    return married;\n+}\n+\n+function testRequireTypeWithDecimal() returns decimal|error {\n+    decimal height = check p.height;\n+    return height;\n+}\n+\n+function testRequireTypeWithDecimal2() returns decimal|error {\n+    decimal age = check p.age;\n+    return age;\n+}\n+\n+function testRequireTypeWithNil() returns ()|error {\n+    () property = check p.property;\n+    return property;\n+}\n+\n+function testRequireTypeWithString() returns string|error {\n+    string name = check p.name;\n+    return name;\n+}\n+\n+function testRequireTypeWithFloat() returns float|error {\n+    float weight = check p.weight;\n+    return weight;\n+}\n+\n+function testRequireTypeWithUnion1() returns float|int|error {\n+    float|int weight = check p.weight;\n+    return weight;\n+}\n+\n+function testRequireTypeWithUnion2() returns float|string|error {\n+    float|string name = check p.name;\n+    return name;\n+}\n+\n+function testRequireTypeWithJson1() returns json|error {\n+    json age = check p.age;\n+    return age;\n+}\n+\n+function testRequireTypeWithJson2() returns json|error {\n+    json height = check p.height;\n+    return height;\n+}\n+\n+function testRequireTypeWithJson3() returns json|error {\n+    json bloodType = check p.bloodType;\n+    return bloodType;\n+}\n+\n+function testRequireTypeWithJson4() returns json|error {\n+    json address = check p.address;\n+    return address;\n+}\n+\n+function testRequireTypeWithJson5() returns json|error {\n+    json weight = check p.weight;\n+    return weight;\n+}\n+\n+function testRequireTypeWithJson6() returns json|error {\n+    json isMarried = check p.married;\n+    return isMarried;\n+}\n+\n+function testRequireTypeWithCast1() returns boolean|error {\n+    boolean isMarried = <boolean> check p.married;\n+    return isMarried;\n+}\n+\n+function testRequireTypeWithCast2() returns json[]|error {\n+    json[] address = <json[]> check p.address;\n+    return address;\n+}\n+\n+function testRequireTypeWithCast3() returns map<json>|error {\n+    map<json> bloodType = <map<json>> check p.bloodType;\n+    return bloodType;\n+}\n+\n+function testRequireType() {\n+    decimal h = 178.5;\n+    float h1 = 178.5;\n+    decimal w = 72.5;\n+    json name = \"Chiran\";\n+    json w1 = 72.5;\n+    float|int w2 = 72.5;\n+    float|string name2 = \"Chiran\";\n+    assert(<int> testRequireTypeWithInt(), 24);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAzOTcxMQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501039711", "createdAt": "2020-10-07T14:04:21Z", "author": {"login": "chiranSachintha"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -1050,3 +1050,181 @@ function assert(anydata actual, anydata expected) {\n         panic e;\n     }\n }\n+\n+///////////////////////// Tests for `requireType()` ///////////////////////////\n+\n+json  p = {name: \"Chiran\", age: 24, email: \"chirans\", height: 178.5, weight: 72.5, property: (), address: [125.0/3, \"xyz street\",\n+{province: \"southern\", Country: \"Sri Lanka\"}, 81000], married: false, bloodType: {group: \"O\", RHD: \"+\"}};\n+\n+function testRequireTypeWithInt() returns int|error {\n+    int age = check p.age;\n+    return age;\n+}\n+\n+function testRequireTypeWithInt2() returns int|error {\n+    int height = check p.height;\n+    return height;\n+}\n+\n+function testRequireTypeWithInt3() returns int|error {\n+    int married = check p.married;\n+    return married;\n+}\n+\n+function testRequireTypeWithDecimal() returns decimal|error {\n+    decimal height = check p.height;\n+    return height;\n+}\n+\n+function testRequireTypeWithDecimal2() returns decimal|error {\n+    decimal age = check p.age;\n+    return age;\n+}\n+\n+function testRequireTypeWithNil() returns ()|error {\n+    () property = check p.property;\n+    return property;\n+}\n+\n+function testRequireTypeWithString() returns string|error {\n+    string name = check p.name;\n+    return name;\n+}\n+\n+function testRequireTypeWithFloat() returns float|error {\n+    float weight = check p.weight;\n+    return weight;\n+}\n+\n+function testRequireTypeWithUnion1() returns float|int|error {\n+    float|int weight = check p.weight;\n+    return weight;\n+}\n+\n+function testRequireTypeWithUnion2() returns float|string|error {\n+    float|string name = check p.name;\n+    return name;\n+}\n+\n+function testRequireTypeWithJson1() returns json|error {\n+    json age = check p.age;\n+    return age;\n+}\n+\n+function testRequireTypeWithJson2() returns json|error {\n+    json height = check p.height;\n+    return height;\n+}\n+\n+function testRequireTypeWithJson3() returns json|error {\n+    json bloodType = check p.bloodType;\n+    return bloodType;\n+}\n+\n+function testRequireTypeWithJson4() returns json|error {\n+    json address = check p.address;\n+    return address;\n+}\n+\n+function testRequireTypeWithJson5() returns json|error {\n+    json weight = check p.weight;\n+    return weight;\n+}\n+\n+function testRequireTypeWithJson6() returns json|error {\n+    json isMarried = check p.married;\n+    return isMarried;\n+}\n+\n+function testRequireTypeWithCast1() returns boolean|error {\n+    boolean isMarried = <boolean> check p.married;\n+    return isMarried;\n+}\n+\n+function testRequireTypeWithCast2() returns json[]|error {\n+    json[] address = <json[]> check p.address;\n+    return address;\n+}\n+\n+function testRequireTypeWithCast3() returns map<json>|error {\n+    map<json> bloodType = <map<json>> check p.bloodType;\n+    return bloodType;\n+}\n+\n+function testRequireType() {\n+    decimal h = 178.5;\n+    float h1 = 178.5;\n+    decimal w = 72.5;\n+    json name = \"Chiran\";\n+    json w1 = 72.5;\n+    float|int w2 = 72.5;\n+    float|string name2 = \"Chiran\";\n+    assert(<int> testRequireTypeWithInt(), 24);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwOTk4MQ=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQwNzg3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyOTozMlrOHdQLSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMTozODo1OVrOHfGIew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTc4Ng==", "bodyText": "Instead of doing this here, can we not let field access be type-checked normally, and instead do these checks and set the final type in visitCheckAndCheckPanicExpr?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500435786", "createdAt": "2020-10-06T16:29:32Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNjYzMQ==", "bodyText": "That way we may be able to remove the isWithCheckExpr field too. Doesn't feel right to be adding that info to BLangFieldBasedAccess anyway.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500436631", "createdAt": "2020-10-06T16:30:46Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTc4Ng=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2ODM3OQ==", "bodyText": "Changed the logic related to this. (removed the isWithCheckExpr flag)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502368379", "createdAt": "2020-10-09T11:38:59Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTc4Ng=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQxODg4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozMjowOVrOHdQSLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozOTo1MVrOHhWeBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzU0OA==", "bodyText": "While this is the use-case for which we need this method, this isn't the only usage, right? Shall we introduce docs describing the function in a generic manner?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500437548", "createdAt": "2020-10-06T16:32:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -200,3 +200,10 @@ public isolated function fromJsonStringWithType(string str, typedesc<anydata> t)\n # - otherwise, the merge fails\n # If the merge fails, then `j1` is unchanged.\n public isolated function mergeJson(json j1, json j2) returns json|error = external;\n+\n+# Converts a field in map<json> to a user-specified basic simple type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3NjU1OA==", "bodyText": "Once the spec is updated, we have to use the spec documentation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r503776558", "createdAt": "2020-10-13T08:47:48Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -200,3 +200,10 @@ public isolated function fromJsonStringWithType(string str, typedesc<anydata> t)\n # - otherwise, the merge fails\n # If the merge fails, then `j1` is unchanged.\n public isolated function mergeJson(json j1, json j2) returns json|error = external;\n+\n+# Converts a field in map<json> to a user-specified basic simple type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzU0OA=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4MTEzOA==", "bodyText": "One option is to go without a doc until the spec is ready.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r503781138", "createdAt": "2020-10-13T08:54:39Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -200,3 +200,10 @@ public isolated function fromJsonStringWithType(string str, typedesc<anydata> t)\n # - otherwise, the merge fails\n # If the merge fails, then `j1` is unchanged.\n public isolated function mergeJson(json j1, json j2) returns json|error = external;\n+\n+# Converts a field in map<json> to a user-specified basic simple type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzU0OA=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMzE5MA==", "bodyText": "Created issue for this(#26355).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504733190", "createdAt": "2020-10-14T14:39:51Z", "author": {"login": "chiranSachintha"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -200,3 +200,10 @@ public isolated function fromJsonStringWithType(string str, typedesc<anydata> t)\n # - otherwise, the merge fails\n # If the merge fails, then `j1` is unchanged.\n public isolated function mergeJson(json j1, json j2) returns json|error = external;\n+\n+# Converts a field in map<json> to a user-specified basic simple type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzU0OA=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQyMjk5OnYy", "diffSide": "RIGHT", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozMzoxMVrOHdQU0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMTozNzozMFrOHfGF5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzODIyNw==", "bodyText": "We can use org.ballerinalang.jvm.TypeChecker#getType and then check the type tag instead of the instanceof check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500438227", "createdAt": "2020-10-06T16:33:11Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n+        functionName = \"requireType\",\n+        args = {@Argument(name = \"v\", type = TypeKind.UNION), @Argument(name = \"type\", type = TypeKind.TYPEDESC)},\n+        returnType = {@ReturnType(type = TypeKind.UNION), @ReturnType(type = TypeKind.ERROR)},\n+        isPublic = false\n+)\n+\n+public class RequireType {\n+    public static Object requireType(Strand strand, Object value, TypedescValue type) {\n+        if (value instanceof ErrorValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2NzcxOQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502367719", "createdAt": "2020-10-09T11:37:30Z", "author": {"login": "chiranSachintha"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n+        functionName = \"requireType\",\n+        args = {@Argument(name = \"v\", type = TypeKind.UNION), @Argument(name = \"type\", type = TypeKind.TYPEDESC)},\n+        returnType = {@ReturnType(type = TypeKind.UNION), @ReturnType(type = TypeKind.ERROR)},\n+        isPublic = false\n+)\n+\n+public class RequireType {\n+    public static Object requireType(Strand strand, Object value, TypedescValue type) {\n+        if (value instanceof ErrorValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzODIyNw=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQyMzg0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozMzoyNlrOHdQVZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNzoyN1rOHdtIDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzODM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BType describingType = type.getDescribingType();\n          \n          \n            \n                    return convert(describingType, value);\n          \n          \n            \n                    return convert(type.getDescribingType(), value);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500438372", "createdAt": "2020-10-06T16:33:26Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n+        functionName = \"requireType\",\n+        args = {@Argument(name = \"v\", type = TypeKind.UNION), @Argument(name = \"type\", type = TypeKind.TYPEDESC)},\n+        returnType = {@ReturnType(type = TypeKind.UNION), @ReturnType(type = TypeKind.ERROR)},\n+        isPublic = false\n+)\n+\n+public class RequireType {\n+    public static Object requireType(Strand strand, Object value, TypedescValue type) {\n+        if (value instanceof ErrorValue) {\n+            return value;\n+        }\n+        BType describingType = type.getDescribingType();\n+        return convert(describingType, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxMDA5NA==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500910094", "createdAt": "2020-10-07T10:37:27Z", "author": {"login": "chiranSachintha"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.util.BLangCompilerConstants.VALUE_VERSION;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since Swan Lake\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.value\", version = VALUE_VERSION,\n+        functionName = \"requireType\",\n+        args = {@Argument(name = \"v\", type = TypeKind.UNION), @Argument(name = \"type\", type = TypeKind.TYPEDESC)},\n+        returnType = {@ReturnType(type = TypeKind.UNION), @ReturnType(type = TypeKind.ERROR)},\n+        isPublic = false\n+)\n+\n+public class RequireType {\n+    public static Object requireType(Strand strand, Object value, TypedescValue type) {\n+        if (value instanceof ErrorValue) {\n+            return value;\n+        }\n+        BType describingType = type.getDescribingType();\n+        return convert(describingType, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzODM3Mg=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQzNzc1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozNjo1MFrOHdQeHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMTozNzoxMFrOHfGFVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYwNQ==", "bodyText": "Need to check int and string subtypes and boolean too, right?\nI think we can replace the method call with org.wso2.ballerinalang.compiler.semantics.analyzer.Types#isSimpleBasicType\ntypes.isSimpleBasicType(type) || type.tag == TypeTags.JSON;\n\nAlso returning true when expType.tag == TypeTags.JSON where the method name is isNonStructureJsonType doesn't seem right to me.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500440605", "createdAt": "2020-10-06T16:36:50Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -442,6 +442,11 @@ private void checkXMLNamespacePrefixes(List<BLangXMLElementFilter> filters) {\n         }\n     }\n \n+    private boolean isNonStructureJsonType(BType expType) {\n+        return expType.tag == TypeTags.INT || expType.tag == TypeTags.FLOAT || expType.tag == TypeTags.DECIMAL\n+                || expType.tag == TypeTags.NIL || expType.tag == TypeTags.STRING || expType.tag == TypeTags.JSON;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwOTkyMg==", "bodyText": "Remove the isNonStructureJsonType and use isSimpleBasicType function as mention.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500909922", "createdAt": "2020-10-07T10:37:08Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -442,6 +442,11 @@ private void checkXMLNamespacePrefixes(List<BLangXMLElementFilter> filters) {\n         }\n     }\n \n+    private boolean isNonStructureJsonType(BType expType) {\n+        return expType.tag == TypeTags.INT || expType.tag == TypeTags.FLOAT || expType.tag == TypeTags.DECIMAL\n+                || expType.tag == TypeTags.NIL || expType.tag == TypeTags.STRING || expType.tag == TypeTags.JSON;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYwNQ=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzOTE5NA==", "bodyText": "@MaryamZi According to spec-issue JSON cannot convert to boolean. Shall I create a new function for that or use isSimpleBasicType function as\n(expectedType.tag != TypeTags.BOOLEAN && types.isSimpleBasicType(expectedType.tag)) || expectedType.tag == TypeTags.JSON", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r501139194", "createdAt": "2020-10-07T16:14:05Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -442,6 +442,11 @@ private void checkXMLNamespacePrefixes(List<BLangXMLElementFilter> filters) {\n         }\n     }\n \n+    private boolean isNonStructureJsonType(BType expType) {\n+        return expType.tag == TypeTags.INT || expType.tag == TypeTags.FLOAT || expType.tag == TypeTags.DECIMAL\n+                || expType.tag == TypeTags.NIL || expType.tag == TypeTags.STRING || expType.tag == TypeTags.JSON;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYwNQ=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2NzU3Mg==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502367572", "createdAt": "2020-10-09T11:37:10Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -442,6 +442,11 @@ private void checkXMLNamespacePrefixes(List<BLangXMLElementFilter> filters) {\n         }\n     }\n \n+    private boolean isNonStructureJsonType(BType expType) {\n+        return expType.tag == TypeTags.INT || expType.tag == TypeTags.FLOAT || expType.tag == TypeTags.DECIMAL\n+                || expType.tag == TypeTags.NIL || expType.tag == TypeTags.STRING || expType.tag == TypeTags.JSON;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYwNQ=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQzOTgwOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibNegativeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozNzoyNlrOHdQffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozMzo0MFrOHds_zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDk1OQ==", "bodyText": "Do we need these comments?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500440959", "createdAt": "2020-10-06T16:37:26Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibNegativeTest.java", "diffHunk": "@@ -39,9 +39,18 @@ public void setup() {\n     }\n \n     @Test\n-    public void testTypeParamNegative() {\n+    public void testLangLibNegative() {\n         int err = 0;\n+        //testTypeParamNegative", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwNzk4MA==", "bodyText": "Removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500907980", "createdAt": "2020-10-07T10:33:40Z", "author": {"login": "chiranSachintha"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibNegativeTest.java", "diffHunk": "@@ -39,9 +39,18 @@ public void setup() {\n     }\n \n     @Test\n-    public void testTypeParamNegative() {\n+    public void testLangLibNegative() {\n         int err = 0;\n+        //testTypeParamNegative", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDk1OQ=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ2MzY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0MzoxOFrOHdQubA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozMjo0OVrOHds-Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NDc4MA==", "bodyText": "Don't we have to ignore all error types? If so we need to check by tag.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n          \n          \n            \n                                    .filter(type -> type.tag != TypeTags.ERROR).collect(Collectors.toList());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500444780", "createdAt": "2020-10-06T16:43:18Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NTQxMQ==", "bodyText": "Even if we were only checking for symTable.errorType, we can just do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());\n          \n          \n            \n                                    .filter(type -> symTable.errorType != type).collect(Collectors.toList());\n          \n      \n    \n    \n  \n\ninstead of equals().", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500445411", "createdAt": "2020-10-06T16:44:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NDc4MA=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwNzU3MA==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r500907570", "createdAt": "2020-10-07T10:32:49Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6112,7 +6120,25 @@ private BType checkFieldAccessExpr(BLangFieldBasedAccess fieldAccessExpr, BType\n             if (fieldAccessExpr.fieldKind == FieldKind.WITH_NS) {\n                 resolveXMLNamespace((BLangFieldBasedAccess.BLangNSPrefixedFieldBasedAccess) fieldAccessExpr);\n             }\n-            BType laxFieldAccessType = getLaxFieldAccessType(varRefType);\n+\n+            BType laxFieldAccessType;\n+            if (fieldAccessExpr.isWithCheckExpr && fieldAccessExpr.expectedType.tag != TypeTags.NONE) {\n+                BUnionType unionType = (BUnionType) fieldAccessExpr.expectedType;\n+                // Filter out the list of types which are not equivalent with the error type.\n+                List<BType> expectedTypes = unionType.getMemberTypes().stream()\n+                        .filter(type -> !symTable.errorType.equals(type)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NDc4MA=="}, "originalCommit": {"oid": "23b5bcbcbd0c8a04c1d83d663fcfcc4f2bdd5acd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzA4NDQzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjo1OTo1NFrOHfR2Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo0Mzo0OFrOHfYFmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MDI4Nw==", "bodyText": "In this method, checkedExpr.expr and checkedExpr.getKind() used several times, Shall we extract both as separate variables.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502560287", "createdAt": "2020-10-09T16:59:54Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4508,6 +4514,26 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             exprExpType = BUnionType.create(null, expType, symTable.errorType);\n         }\n \n+        if (checkedExpr.expr.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR &&\n+                checkedExpr.getKind() == NodeKind.CHECK_EXPR && types.isUnionOfSimpleBasicTypes(expType)) {\n+            ArrayList<BLangExpression> argExprs = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f31417eb4a69bd128ebf2bec42eb16a5496e1e0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2MjU1Mg==", "bodyText": "Done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502662552", "createdAt": "2020-10-09T20:43:48Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4508,6 +4514,26 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             exprExpType = BUnionType.create(null, expType, symTable.errorType);\n         }\n \n+        if (checkedExpr.expr.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR &&\n+                checkedExpr.getKind() == NodeKind.CHECK_EXPR && types.isUnionOfSimpleBasicTypes(expType)) {\n+            ArrayList<BLangExpression> argExprs = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MDI4Nw=="}, "originalCommit": {"oid": "3f31417eb4a69bd128ebf2bec42eb16a5496e1e0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI0NjQ3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjo0MTozOFrOHfckfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzowNDoxMlrOHhR8Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNTk5Ng==", "bodyText": "Can we extract check and checkpanic extracted to variables? It seems check has been used couple of places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502735996", "createdAt": "2020-10-10T02:41:38Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4500,14 +4506,35 @@ private void handleInputClauseVariables(BLangInputClause bLangInputClause, Symbo\n \n     private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1OTAzOQ==", "bodyText": "@nadeeshaan Did you mean to separate check and checkpanic variables into two separate variables?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504659039", "createdAt": "2020-10-14T13:04:12Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4500,14 +4506,35 @@ private void handleInputClauseVariables(BLangInputClause bLangInputClause, Symbo\n \n     private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNTk5Ng=="}, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI0OTI2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjo0NToyN1rOHfcl2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo1OToxNVrOHhRvJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjM0NQ==", "bodyText": "Can we rename exprExpType to something meaningful? This is somewhat confusing", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502736345", "createdAt": "2020-10-10T02:45:27Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4500,14 +4506,35 @@ private void handleInputClauseVariables(BLangInputClause bLangInputClause, Symbo\n \n     private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n-        boolean firstVisit = checkedExpr.expr.type == null;\n+        BLangExpression exprWithCheckingKeyword = checkedExpr.expr;\n+        boolean firstVisit = exprWithCheckingKeyword.type == null;\n         BType exprExpType;\n         if (expType == symTable.noType) {\n             exprExpType = symTable.noType;\n         } else {\n             exprExpType = BUnionType.create(null, expType, symTable.errorType);\n         }\n \n+        if (exprWithCheckingKeyword.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR &&\n+                operatorType.equals(\"check\") && types.isUnionOfSimpleBasicTypes(expType)) {\n+            ArrayList<BLangExpression> argExprs = new ArrayList<>();\n+            BType typedescType = new BTypedescType(expType, null);\n+            BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+            typedescExpr.resolvedType = expType;\n+            typedescExpr.type = typedescType;\n+            argExprs.add(exprWithCheckingKeyword);\n+            argExprs.add(typedescExpr);\n+            BLangInvocation invocation = ASTBuilderUtil.createLangLibInvocationNode(FUNCTION_NAME_REQUIRE_TYPE,\n+                    argExprs, exprWithCheckingKeyword, checkedExpr.pos);\n+            BInvokableSymbol invokableSymbol = (BInvokableSymbol) symResolver.lookupLangLibMethod(exprExpType,\n+                    names.fromString(invocation.name.value));\n+            BInvokableType bInvokableType = (BInvokableType) invokableSymbol.type;\n+            bInvokableType.retType = exprExpType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NTY1Mg==", "bodyText": "Changed as typeOfExprWithCheckingKeyword", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504655652", "createdAt": "2020-10-14T12:59:15Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4500,14 +4506,35 @@ private void handleInputClauseVariables(BLangInputClause bLangInputClause, Symbo\n \n     private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         String operatorType = checkedExpr.getKind() == NodeKind.CHECK_EXPR ? \"check\" : \"checkpanic\";\n-        boolean firstVisit = checkedExpr.expr.type == null;\n+        BLangExpression exprWithCheckingKeyword = checkedExpr.expr;\n+        boolean firstVisit = exprWithCheckingKeyword.type == null;\n         BType exprExpType;\n         if (expType == symTable.noType) {\n             exprExpType = symTable.noType;\n         } else {\n             exprExpType = BUnionType.create(null, expType, symTable.errorType);\n         }\n \n+        if (exprWithCheckingKeyword.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR &&\n+                operatorType.equals(\"check\") && types.isUnionOfSimpleBasicTypes(expType)) {\n+            ArrayList<BLangExpression> argExprs = new ArrayList<>();\n+            BType typedescType = new BTypedescType(expType, null);\n+            BLangTypedescExpr typedescExpr = new BLangTypedescExpr();\n+            typedescExpr.resolvedType = expType;\n+            typedescExpr.type = typedescType;\n+            argExprs.add(exprWithCheckingKeyword);\n+            argExprs.add(typedescExpr);\n+            BLangInvocation invocation = ASTBuilderUtil.createLangLibInvocationNode(FUNCTION_NAME_REQUIRE_TYPE,\n+                    argExprs, exprWithCheckingKeyword, checkedExpr.pos);\n+            BInvokableSymbol invokableSymbol = (BInvokableSymbol) symResolver.lookupLangLibMethod(exprExpType,\n+                    names.fromString(invocation.name.value));\n+            BInvokableType bInvokableType = (BInvokableType) invokableSymbol.type;\n+            bInvokableType.retType = exprExpType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjM0NQ=="}, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI1MTIyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjo0ODo0MlrOHfcmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo1ODozNlrOHhRteQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjU4Nw==", "bodyText": "Do we need a switch case here? We can stick to a simple, single if check and a default return", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502736587", "createdAt": "2020-10-10T02:48:42Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -3588,4 +3588,19 @@ public boolean isOrderedType(BType type) {\n                 return isSimpleBasicType(type.tag);\n         }\n     }\n+\n+    public boolean isUnionOfSimpleBasicTypes(BType type) {\n+        switch (type.tag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NTIyNQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504655225", "createdAt": "2020-10-14T12:58:36Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -3588,4 +3588,19 @@ public boolean isOrderedType(BType type) {\n                 return isSimpleBasicType(type.tag);\n         }\n     }\n+\n+    public boolean isUnionOfSimpleBasicTypes(BType type) {\n+        switch (type.tag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjU4Nw=="}, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI1MzcyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjo1MTo1NlrOHfcn7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo1ODoyMlrOHhRsxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjg3OQ==", "bodyText": "remove extra new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r502736879", "createdAt": "2020-10-10T02:51:56Z", "author": {"login": "nadeeshaan"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since 2.0.0\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NTA0Ng==", "bodyText": "Removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504655046", "createdAt": "2020-10-14T12:58:22Z", "author": {"login": "chiranSachintha"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/RequireType.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.TypedescValue;\n+\n+/**\n+ * Extern function lang.values:requireType.\n+ *\n+ * @since 2.0.0\n+ */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNjg3OQ=="}, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTQ5MzQyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODo0MzozMlrOHgb5yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo1ODowOVrOHhRsNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3MzY0MA==", "bodyText": "In the proposal, the function name is ensureType \nballerina-platform/ballerina-spec#487 (comment)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r503773640", "createdAt": "2020-10-13T08:43:32Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -228,3 +228,13 @@ public isolated function mergeJson(json j1, json j2) returns json|error = @java:\n     'class: \"org.ballerinalang.langlib.value.MergeJson\",\n     name: \"mergeJson\"\n } external;\n+\n+# Converts a field in map<json> to a user-specified basic simple type.\n+# The basic simple types are ()|int|float|decimal|string|boolean.\n+# + v - field value of map<json> or json value\n+# + t - basic simple type to convert to\n+# + return - value belonging to `t`, or error if this cannot be done\n+public isolated function requireType(any|error v, typedesc<any> t) returns any|error =  @java:Method {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NDkwMQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r504654901", "createdAt": "2020-10-14T12:58:09Z", "author": {"login": "chiranSachintha"}, "path": "langlib/lang.value/src/main/ballerina/src/lang.value/value.bal", "diffHunk": "@@ -228,3 +228,13 @@ public isolated function mergeJson(json j1, json j2) returns json|error = @java:\n     'class: \"org.ballerinalang.langlib.value.MergeJson\",\n     name: \"mergeJson\"\n } external;\n+\n+# Converts a field in map<json> to a user-specified basic simple type.\n+# The basic simple types are ()|int|float|decimal|string|boolean.\n+# + v - field value of map<json> or json value\n+# + t - basic simple type to convert to\n+# + return - value belonging to `t`, or error if this cannot be done\n+public isolated function requireType(any|error v, typedesc<any> t) returns any|error =  @java:Method {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3MzY0MA=="}, "originalCommit": {"oid": "feaeb0f0e883c426fc9fd105e9f3145ec58ee4c0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzAzMDQzOnYy", "diffSide": "RIGHT", "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/EnsureType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToxNDoxMVrOHlNQ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToxNDoxMVrOHlNQ0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NjY1Nw==", "bodyText": "The return error is {ballerina}TypeCastError which is incorrect IMO. Shall we use EnsureTypeError instead ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25935#discussion_r508776657", "createdAt": "2020-10-20T19:14:11Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.value/src/main/java/org/ballerinalang/langlib/value/EnsureType.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langlib.value;\n+\n+import io.ballerina.runtime.TypeChecker;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.api.types.Type;\n+import io.ballerina.runtime.values.ErrorValue;\n+import io.ballerina.runtime.values.TypedescValue;\n+\n+/**\n+ * Extern function lang.values:ensureType.\n+ *\n+ * @since 2.0.0\n+ */\n+public class EnsureType {\n+    public static Object ensureType(Object value, TypedescValue type) {\n+        if (TypeChecker.getType(value).getTag() == TypeTags.ERROR_TAG) {\n+            return value;\n+        }\n+        return convert(type.getDescribingType(), value);\n+    }\n+\n+    public static Object convert(Type convertType, Object inputValue) {\n+        try {\n+             return TypeChecker.checkCast(inputValue, convertType);\n+        } catch (ErrorValue e) {\n+            return e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10933c8ebe53b9fd0f786aa54347e413c4fcc16e"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4977, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}