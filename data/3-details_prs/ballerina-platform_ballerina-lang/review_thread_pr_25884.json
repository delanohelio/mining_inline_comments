{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NjM3NzYx", "number": 25884, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo1ODozN1rOEkm7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo0MDowOFrOEk1ipg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODIxOTg3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/negative/method_resolve_error.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo1ODozN1rOHTpfuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo1ODozN1rOHTpfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2NDg1Ng==", "bodyText": "2019?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490364856", "createdAt": "2020-09-17T15:58:37Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/negative/method_resolve_error.bal", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a44bd5aafff24bce8fb1ff8b125785b1a40a5b3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODIyMDQyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/static_method_tests.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo1ODo0NFrOHTpgBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjoxNTozMlrOHTqfrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2NDkzNA==", "bodyText": "2019?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490364934", "createdAt": "2020-09-17T15:58:44Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/static_method_tests.bal", "diffHunk": "@@ -1,6 +1,23 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a44bd5aafff24bce8fb1ff8b125785b1a40a5b3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM4MTIzMA==", "bodyText": "File was therre", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490381230", "createdAt": "2020-09-17T16:15:32Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/static_method_tests.bal", "diffHunk": "@@ -1,6 +1,23 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2NDkzNA=="}, "originalCommit": {"oid": "9a44bd5aafff24bce8fb1ff8b125785b1a40a5b3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODIyMDk4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/instance_method_tests.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo1ODo1M1rOHTpgYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjoxNzo0MVrOHTqrdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2NTAyNw==", "bodyText": "2019?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490365027", "createdAt": "2020-09-17T15:58:53Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/instance_method_tests.bal", "diffHunk": "@@ -1,4 +1,21 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a44bd5aafff24bce8fb1ff8b125785b1a40a5b3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM4NDI0NA==", "bodyText": "The file was created in 2019, added the license header when I modified it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490384244", "createdAt": "2020-09-17T16:17:41Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/instance_method_tests.bal", "diffHunk": "@@ -1,4 +1,21 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2NTAyNw=="}, "originalCommit": {"oid": "9a44bd5aafff24bce8fb1ff8b125785b1a40a5b3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDQ4NDgxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNTo0MjowM1rOHT-1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNTo0NzozMVrOHT-69g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNDM4Mw==", "bodyText": "do we have to check for static here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490714383", "createdAt": "2020-09-18T05:42:03Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "diffHunk": "@@ -138,29 +137,30 @@ JMethod resolve(JMethodRequest jMethodRequest) {\n                 .collect(Collectors.toList());\n     }\n \n-    private List<JMethod> resolveByParamCount(List<JMethod> jMethods, int expectedCount, BType receiverType) {\n-        return jMethods.stream().filter(jMethod -> {\n-            int count = jMethod.getParamTypes().length;\n-            if (count == expectedCount) {\n+    private List<JMethod> resolveByParamCount(List<JMethod> jMethods, JMethodRequest jMethodRequest) {\n+        return jMethods.stream()\n+                .filter(jMethod -> hasEqualParamCounts(jMethodRequest, jMethod))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean hasEqualParamCounts(JMethodRequest jMethodRequest, JMethod jMethod) {\n+        int expectedCount = getBFuncParamCount(jMethodRequest, jMethod);\n+        int count = jMethod.getParamTypes().length;\n+        if (count == expectedCount) {\n+            return true;\n+        } else if (count == expectedCount + 1) {\n+            // This is for object interop functions when self is passed as a parameter\n+            if (jMethodRequest.receiverType != null) {\n+                jMethod.setReceiverType(jMethodRequest.receiverType);\n                 return true;\n-            } else {\n-                boolean hasOneExtraParam = count == expectedCount + 1;\n-                if (hasOneExtraParam) {\n-                    boolean hasReceiver = receiverType != null;\n-                    if (hasReceiver) {\n-                        jMethod.setReceiverType(receiverType);\n-                        return true;\n-                    } else if (jMethod.isBalEnvAcceptingMethod()) {\n-                        return true;\n-                    }\n-                }\n+            } else if (jMethod.isStatic()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271e240d2b8a619f2a7fc01d614afe512efa56a3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNTg5NA==", "bodyText": "Yes, haven't tested BalEnv with instance methods yet. Will need a small change to make it work.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490715894", "createdAt": "2020-09-18T05:47:31Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "diffHunk": "@@ -138,29 +137,30 @@ JMethod resolve(JMethodRequest jMethodRequest) {\n                 .collect(Collectors.toList());\n     }\n \n-    private List<JMethod> resolveByParamCount(List<JMethod> jMethods, int expectedCount, BType receiverType) {\n-        return jMethods.stream().filter(jMethod -> {\n-            int count = jMethod.getParamTypes().length;\n-            if (count == expectedCount) {\n+    private List<JMethod> resolveByParamCount(List<JMethod> jMethods, JMethodRequest jMethodRequest) {\n+        return jMethods.stream()\n+                .filter(jMethod -> hasEqualParamCounts(jMethodRequest, jMethod))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean hasEqualParamCounts(JMethodRequest jMethodRequest, JMethod jMethod) {\n+        int expectedCount = getBFuncParamCount(jMethodRequest, jMethod);\n+        int count = jMethod.getParamTypes().length;\n+        if (count == expectedCount) {\n+            return true;\n+        } else if (count == expectedCount + 1) {\n+            // This is for object interop functions when self is passed as a parameter\n+            if (jMethodRequest.receiverType != null) {\n+                jMethod.setReceiverType(jMethodRequest.receiverType);\n                 return true;\n-            } else {\n-                boolean hasOneExtraParam = count == expectedCount + 1;\n-                if (hasOneExtraParam) {\n-                    boolean hasReceiver = receiverType != null;\n-                    if (hasReceiver) {\n-                        jMethod.setReceiverType(receiverType);\n-                        return true;\n-                    } else if (jMethod.isBalEnvAcceptingMethod()) {\n-                        return true;\n-                    }\n-                }\n+            } else if (jMethod.isStatic()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNDM4Mw=="}, "originalCommit": {"oid": "271e240d2b8a619f2a7fc01d614afe512efa56a3"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYxNDE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo0MDowOFrOHT__rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzowMDo1NFrOHUAiag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzQ4Nw==", "bodyText": "Shall we include the message \"more than one method found\" or something related here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490733487", "createdAt": "2020-09-18T06:40:08Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "diffHunk": "@@ -184,18 +184,22 @@ private JMethod resolve(JMethodRequest jMethodRequest, List<JMethod> jMethods) {\n     }\n \n     private Optional<JMethod> findCovariantReturnTypeMethod(List<JMethod> jMethods) {\n-\n         for (int i = 0; i < jMethods.size(); i++) {\n-            for (int k = i; k < jMethods.size(); k++) {\n-                if (i == k) {\n-                    continue;\n-                }\n-\n+            for (int k = i + 1; k < jMethods.size(); k++) {\n                 JMethod ithMethod = jMethods.get(i);\n                 JMethod kthMethod = jMethods.get(k);\n \n                 if (ithMethod.getReturnType().isAssignableFrom(kthMethod.getReturnType()) ||\n                         kthMethod.getReturnType().isAssignableFrom(ithMethod.getReturnType())) {\n+                    if (ithMethod.getParamTypes().length != kthMethod.getParamTypes().length) {\n+                        // This occurs when there are static methods and instance methods and the static method\n+                        // has one more parameter than the instance method. Also this occurs when an interop\n+                        // method in an object maps to instance methods of which one accepting self and another\n+                        // that doesn't.\n+                        throw new JInteropException(OVERLOADED_METHODS,\n+                                                    \"Please specify the parameterTypes for each parameter in \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271e240d2b8a619f2a7fc01d614afe512efa56a3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNDA2Mw==", "bodyText": "I thought the overloaded methods error code gives that idea.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490734063", "createdAt": "2020-09-18T06:41:27Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "diffHunk": "@@ -184,18 +184,22 @@ private JMethod resolve(JMethodRequest jMethodRequest, List<JMethod> jMethods) {\n     }\n \n     private Optional<JMethod> findCovariantReturnTypeMethod(List<JMethod> jMethods) {\n-\n         for (int i = 0; i < jMethods.size(); i++) {\n-            for (int k = i; k < jMethods.size(); k++) {\n-                if (i == k) {\n-                    continue;\n-                }\n-\n+            for (int k = i + 1; k < jMethods.size(); k++) {\n                 JMethod ithMethod = jMethods.get(i);\n                 JMethod kthMethod = jMethods.get(k);\n \n                 if (ithMethod.getReturnType().isAssignableFrom(kthMethod.getReturnType()) ||\n                         kthMethod.getReturnType().isAssignableFrom(ithMethod.getReturnType())) {\n+                    if (ithMethod.getParamTypes().length != kthMethod.getParamTypes().length) {\n+                        // This occurs when there are static methods and instance methods and the static method\n+                        // has one more parameter than the instance method. Also this occurs when an interop\n+                        // method in an object maps to instance methods of which one accepting self and another\n+                        // that doesn't.\n+                        throw new JInteropException(OVERLOADED_METHODS,\n+                                                    \"Please specify the parameterTypes for each parameter in \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzQ4Nw=="}, "originalCommit": {"oid": "271e240d2b8a619f2a7fc01d614afe512efa56a3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0MjM3OA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25884#discussion_r490742378", "createdAt": "2020-09-18T07:00:54Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "diffHunk": "@@ -184,18 +184,22 @@ private JMethod resolve(JMethodRequest jMethodRequest, List<JMethod> jMethods) {\n     }\n \n     private Optional<JMethod> findCovariantReturnTypeMethod(List<JMethod> jMethods) {\n-\n         for (int i = 0; i < jMethods.size(); i++) {\n-            for (int k = i; k < jMethods.size(); k++) {\n-                if (i == k) {\n-                    continue;\n-                }\n-\n+            for (int k = i + 1; k < jMethods.size(); k++) {\n                 JMethod ithMethod = jMethods.get(i);\n                 JMethod kthMethod = jMethods.get(k);\n \n                 if (ithMethod.getReturnType().isAssignableFrom(kthMethod.getReturnType()) ||\n                         kthMethod.getReturnType().isAssignableFrom(ithMethod.getReturnType())) {\n+                    if (ithMethod.getParamTypes().length != kthMethod.getParamTypes().length) {\n+                        // This occurs when there are static methods and instance methods and the static method\n+                        // has one more parameter than the instance method. Also this occurs when an interop\n+                        // method in an object maps to instance methods of which one accepting self and another\n+                        // that doesn't.\n+                        throw new JInteropException(OVERLOADED_METHODS,\n+                                                    \"Please specify the parameterTypes for each parameter in \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzQ4Nw=="}, "originalCommit": {"oid": "271e240d2b8a619f2a7fc01d614afe512efa56a3"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4961, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}