{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMjUwNDA5", "number": 22534, "title": "Fix API docs in runtime-api module", "bodyText": "Purpose\nFix API docs in ballerina/runtime module.\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-09T07:12:49Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534", "merged": true, "mergeCommit": {"oid": "b7e0d2e12725f5f344265e42485c3d08ad6ba093"}, "closed": true, "closedAt": "2020-04-15T07:02:44Z", "author": {"login": "ldclakmal"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV3E8MAH2gAyNDAxMjUwNDA5OmE0MDlkYmM1ZGRmYmIxOTE4OTM3NjcwMDBhNjUyMmJkYWQwMzQ5ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXyjqmgFqTM5MzUwMjk4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a409dbc5ddfbb191893767000a6522bdad0349ef", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a409dbc5ddfbb191893767000a6522bdad0349ef", "committedDate": "2020-04-09T07:08:40Z", "message": "Update api-docs of runtime-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b13cb90d86a714c3fdacf9160c055ff8547ebd82", "committedDate": "2020-04-09T07:08:53Z", "message": "Update module.md of runtime-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTQ3NjM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#pullrequestreview-390547635", "createdAt": "2020-04-09T07:22:35Z", "commit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyMjozNVrOGDMl8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyNToyNlrOGDMrYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNTIzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n          \n          \n            \n            The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and an attribute map to hold context information.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406005232", "createdAt": "2020-04-09T07:22:35Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNTM0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following code snippet shows how to access the `runtime:InvocationContext` and set data.\n          \n          \n            \n            The following code snippet shows how to access the `runtime:InvocationContext` and the set of data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406005348", "createdAt": "2020-04-09T07:22:48Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and set data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNTQ0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Set claims.\n          \n          \n            \n                // Set the claims.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406005441", "createdAt": "2020-04-09T07:22:58Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and set data.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n+    // Set claims.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNTYwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Set auth scheme.\n          \n          \n            \n                // Set the auth scheme.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406005601", "createdAt": "2020-04-09T07:23:20Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and set data.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n+    // Set claims.\n+    map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n+    principal.claims = claims;\n \n-    // Retrieve data from the invocation context.\n-    runtime:InvocationContext invocationContext1 = runtime:getInvocationContext();\n-    runtime:Principal? principal1 = invocationContext1[\"principal\"];\n-    if (principal1 is runtime:Principal) {\n-        // Retrieve user name.\n-        string? userName = principal1[\"username\"];\n-        io:println(userName);\n-\n-        // Retrieve claims.\n-        map<any>? retrievedClaims = principal1[\"claims\"];\n-        io:println(retrievedClaims);\n-\n-        // Retrieve scopes.\n-        string[]? retrievedScopes = principal1[\"scopes\"];\n-        io:println(retrievedScopes);\n-    }\n-\n-    runtime:AuthenticationContext? authContext1 = \n-                            invocationContext1[\"authenticationContext\"];\n-    if (authContext1 is runtime:AuthenticationContext) {\n-        // Retrieve auth scheme.\n-        string? authScheme = authContext1[\"scheme\"];\n-        io:println(authScheme);\n-\n-        // Retrieve auth token.\n-        string? token = authContext1[\"authToken\"];\n-        io:println(token);\n-    }\n+    // Set scopes.\n+    string[] scopes = [\"email\", \"profile\"];\n+    principal.scopes = scopes;\n }\n-```\n \n-The following sample shows how to halt the current `worker` for a given time period.\n-```ballerina\n-import ballerina/runtime;\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Set auth scheme.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNTY4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Set auth token.\n          \n          \n            \n                // Set the auth token.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406005681", "createdAt": "2020-04-09T07:23:28Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and set data.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n+    // Set claims.\n+    map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n+    principal.claims = claims;\n \n-    // Retrieve data from the invocation context.\n-    runtime:InvocationContext invocationContext1 = runtime:getInvocationContext();\n-    runtime:Principal? principal1 = invocationContext1[\"principal\"];\n-    if (principal1 is runtime:Principal) {\n-        // Retrieve user name.\n-        string? userName = principal1[\"username\"];\n-        io:println(userName);\n-\n-        // Retrieve claims.\n-        map<any>? retrievedClaims = principal1[\"claims\"];\n-        io:println(retrievedClaims);\n-\n-        // Retrieve scopes.\n-        string[]? retrievedScopes = principal1[\"scopes\"];\n-        io:println(retrievedScopes);\n-    }\n-\n-    runtime:AuthenticationContext? authContext1 = \n-                            invocationContext1[\"authenticationContext\"];\n-    if (authContext1 is runtime:AuthenticationContext) {\n-        // Retrieve auth scheme.\n-        string? authScheme = authContext1[\"scheme\"];\n-        io:println(authScheme);\n-\n-        // Retrieve auth token.\n-        string? token = authContext1[\"authToken\"];\n-        io:println(token);\n-    }\n+    // Set scopes.\n+    string[] scopes = [\"email\", \"profile\"];\n+    principal.scopes = scopes;\n }\n-```\n \n-The following sample shows how to halt the current `worker` for a given time period.\n-```ballerina\n-import ballerina/runtime;\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Set auth scheme.\n+    authContext.scheme = \"jwt\";\n \n-// Sleep the current worker for 5 seconds.\n-runtime:sleep(5000);\n+    // Set auth token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNTgxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Retrieve user name.\n          \n          \n            \n                // Retrieve the user name.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406005817", "createdAt": "2020-04-09T07:23:42Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and set data.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n+    // Set claims.\n+    map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n+    principal.claims = claims;\n \n-    // Retrieve data from the invocation context.\n-    runtime:InvocationContext invocationContext1 = runtime:getInvocationContext();\n-    runtime:Principal? principal1 = invocationContext1[\"principal\"];\n-    if (principal1 is runtime:Principal) {\n-        // Retrieve user name.\n-        string? userName = principal1[\"username\"];\n-        io:println(userName);\n-\n-        // Retrieve claims.\n-        map<any>? retrievedClaims = principal1[\"claims\"];\n-        io:println(retrievedClaims);\n-\n-        // Retrieve scopes.\n-        string[]? retrievedScopes = principal1[\"scopes\"];\n-        io:println(retrievedScopes);\n-    }\n-\n-    runtime:AuthenticationContext? authContext1 = \n-                            invocationContext1[\"authenticationContext\"];\n-    if (authContext1 is runtime:AuthenticationContext) {\n-        // Retrieve auth scheme.\n-        string? authScheme = authContext1[\"scheme\"];\n-        io:println(authScheme);\n-\n-        // Retrieve auth token.\n-        string? token = authContext1[\"authToken\"];\n-        io:println(token);\n-    }\n+    // Set scopes.\n+    string[] scopes = [\"email\", \"profile\"];\n+    principal.scopes = scopes;\n }\n-```\n \n-The following sample shows how to halt the current `worker` for a given time period.\n-```ballerina\n-import ballerina/runtime;\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Set auth scheme.\n+    authContext.scheme = \"jwt\";\n \n-// Sleep the current worker for 5 seconds.\n-runtime:sleep(5000);\n+    // Set auth token.\n+    authContext.authToken = \"abc.pqr.xyz\";\n+}\n ```\n \n-The following sample shows how to access properties from the runtime. \n+The following code snippet shows how to access the `runtime:InvocationContext` and get the data.\n ```ballerina\n-import ballerina/runtime;\n-\n-// Retrieve the property \u2018ballerina version\u2019 from the runtime.\n-runtime:getProperty(\"ballerina.version\");\n-```\n-\n-### CallStack Element\n-\n-The runtime module includes a utility method to retrieve the current call stack and the particular call stack frame for\n- an error. \n-\n-The following sample shows how to access the call stack and how to trap an error.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-    // Print the current call stack.\n-    io:println(runtime:getCallStack());\n-    var errorMessage = trap getError();\n-    if (errorMessage is error) {\n-        io:println(errorMessage.reason());\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Retrieve user name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNTg3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Retrieve claims.\n          \n          \n            \n                // Retrieve the claims.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406005872", "createdAt": "2020-04-09T07:23:48Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and set data.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n+    // Set claims.\n+    map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n+    principal.claims = claims;\n \n-    // Retrieve data from the invocation context.\n-    runtime:InvocationContext invocationContext1 = runtime:getInvocationContext();\n-    runtime:Principal? principal1 = invocationContext1[\"principal\"];\n-    if (principal1 is runtime:Principal) {\n-        // Retrieve user name.\n-        string? userName = principal1[\"username\"];\n-        io:println(userName);\n-\n-        // Retrieve claims.\n-        map<any>? retrievedClaims = principal1[\"claims\"];\n-        io:println(retrievedClaims);\n-\n-        // Retrieve scopes.\n-        string[]? retrievedScopes = principal1[\"scopes\"];\n-        io:println(retrievedScopes);\n-    }\n-\n-    runtime:AuthenticationContext? authContext1 = \n-                            invocationContext1[\"authenticationContext\"];\n-    if (authContext1 is runtime:AuthenticationContext) {\n-        // Retrieve auth scheme.\n-        string? authScheme = authContext1[\"scheme\"];\n-        io:println(authScheme);\n-\n-        // Retrieve auth token.\n-        string? token = authContext1[\"authToken\"];\n-        io:println(token);\n-    }\n+    // Set scopes.\n+    string[] scopes = [\"email\", \"profile\"];\n+    principal.scopes = scopes;\n }\n-```\n \n-The following sample shows how to halt the current `worker` for a given time period.\n-```ballerina\n-import ballerina/runtime;\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Set auth scheme.\n+    authContext.scheme = \"jwt\";\n \n-// Sleep the current worker for 5 seconds.\n-runtime:sleep(5000);\n+    // Set auth token.\n+    authContext.authToken = \"abc.pqr.xyz\";\n+}\n ```\n \n-The following sample shows how to access properties from the runtime. \n+The following code snippet shows how to access the `runtime:InvocationContext` and get the data.\n ```ballerina\n-import ballerina/runtime;\n-\n-// Retrieve the property \u2018ballerina version\u2019 from the runtime.\n-runtime:getProperty(\"ballerina.version\");\n-```\n-\n-### CallStack Element\n-\n-The runtime module includes a utility method to retrieve the current call stack and the particular call stack frame for\n- an error. \n-\n-The following sample shows how to access the call stack and how to trap an error.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-    // Print the current call stack.\n-    io:println(runtime:getCallStack());\n-    var errorMessage = trap getError();\n-    if (errorMessage is error) {\n-        io:println(errorMessage.reason());\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Retrieve user name.\n+    string? userName = principal[\"username\"];\n+    io:println(userName);\n+\n+    // Retrieve claims.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNTkyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Retrieve scopes.\n          \n          \n            \n                // Retrieve the scopes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406005926", "createdAt": "2020-04-09T07:23:55Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and set data.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n+    // Set claims.\n+    map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n+    principal.claims = claims;\n \n-    // Retrieve data from the invocation context.\n-    runtime:InvocationContext invocationContext1 = runtime:getInvocationContext();\n-    runtime:Principal? principal1 = invocationContext1[\"principal\"];\n-    if (principal1 is runtime:Principal) {\n-        // Retrieve user name.\n-        string? userName = principal1[\"username\"];\n-        io:println(userName);\n-\n-        // Retrieve claims.\n-        map<any>? retrievedClaims = principal1[\"claims\"];\n-        io:println(retrievedClaims);\n-\n-        // Retrieve scopes.\n-        string[]? retrievedScopes = principal1[\"scopes\"];\n-        io:println(retrievedScopes);\n-    }\n-\n-    runtime:AuthenticationContext? authContext1 = \n-                            invocationContext1[\"authenticationContext\"];\n-    if (authContext1 is runtime:AuthenticationContext) {\n-        // Retrieve auth scheme.\n-        string? authScheme = authContext1[\"scheme\"];\n-        io:println(authScheme);\n-\n-        // Retrieve auth token.\n-        string? token = authContext1[\"authToken\"];\n-        io:println(token);\n-    }\n+    // Set scopes.\n+    string[] scopes = [\"email\", \"profile\"];\n+    principal.scopes = scopes;\n }\n-```\n \n-The following sample shows how to halt the current `worker` for a given time period.\n-```ballerina\n-import ballerina/runtime;\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Set auth scheme.\n+    authContext.scheme = \"jwt\";\n \n-// Sleep the current worker for 5 seconds.\n-runtime:sleep(5000);\n+    // Set auth token.\n+    authContext.authToken = \"abc.pqr.xyz\";\n+}\n ```\n \n-The following sample shows how to access properties from the runtime. \n+The following code snippet shows how to access the `runtime:InvocationContext` and get the data.\n ```ballerina\n-import ballerina/runtime;\n-\n-// Retrieve the property \u2018ballerina version\u2019 from the runtime.\n-runtime:getProperty(\"ballerina.version\");\n-```\n-\n-### CallStack Element\n-\n-The runtime module includes a utility method to retrieve the current call stack and the particular call stack frame for\n- an error. \n-\n-The following sample shows how to access the call stack and how to trap an error.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-    // Print the current call stack.\n-    io:println(runtime:getCallStack());\n-    var errorMessage = trap getError();\n-    if (errorMessage is error) {\n-        io:println(errorMessage.reason());\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Retrieve user name.\n+    string? userName = principal[\"username\"];\n+    io:println(userName);\n+\n+    // Retrieve claims.\n+    map<any>? claims = principal[\"claims\"];\n+    io:println(claims);\n+\n+    // Retrieve scopes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjAwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Retrieve auth scheme.\n          \n          \n            \n                // Retrieve the auth scheme.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406006003", "createdAt": "2020-04-09T07:24:03Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and set data.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n+    // Set claims.\n+    map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n+    principal.claims = claims;\n \n-    // Retrieve data from the invocation context.\n-    runtime:InvocationContext invocationContext1 = runtime:getInvocationContext();\n-    runtime:Principal? principal1 = invocationContext1[\"principal\"];\n-    if (principal1 is runtime:Principal) {\n-        // Retrieve user name.\n-        string? userName = principal1[\"username\"];\n-        io:println(userName);\n-\n-        // Retrieve claims.\n-        map<any>? retrievedClaims = principal1[\"claims\"];\n-        io:println(retrievedClaims);\n-\n-        // Retrieve scopes.\n-        string[]? retrievedScopes = principal1[\"scopes\"];\n-        io:println(retrievedScopes);\n-    }\n-\n-    runtime:AuthenticationContext? authContext1 = \n-                            invocationContext1[\"authenticationContext\"];\n-    if (authContext1 is runtime:AuthenticationContext) {\n-        // Retrieve auth scheme.\n-        string? authScheme = authContext1[\"scheme\"];\n-        io:println(authScheme);\n-\n-        // Retrieve auth token.\n-        string? token = authContext1[\"authToken\"];\n-        io:println(token);\n-    }\n+    // Set scopes.\n+    string[] scopes = [\"email\", \"profile\"];\n+    principal.scopes = scopes;\n }\n-```\n \n-The following sample shows how to halt the current `worker` for a given time period.\n-```ballerina\n-import ballerina/runtime;\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Set auth scheme.\n+    authContext.scheme = \"jwt\";\n \n-// Sleep the current worker for 5 seconds.\n-runtime:sleep(5000);\n+    // Set auth token.\n+    authContext.authToken = \"abc.pqr.xyz\";\n+}\n ```\n \n-The following sample shows how to access properties from the runtime. \n+The following code snippet shows how to access the `runtime:InvocationContext` and get the data.\n ```ballerina\n-import ballerina/runtime;\n-\n-// Retrieve the property \u2018ballerina version\u2019 from the runtime.\n-runtime:getProperty(\"ballerina.version\");\n-```\n-\n-### CallStack Element\n-\n-The runtime module includes a utility method to retrieve the current call stack and the particular call stack frame for\n- an error. \n-\n-The following sample shows how to access the call stack and how to trap an error.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-    // Print the current call stack.\n-    io:println(runtime:getCallStack());\n-    var errorMessage = trap getError();\n-    if (errorMessage is error) {\n-        io:println(errorMessage.reason());\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Retrieve user name.\n+    string? userName = principal[\"username\"];\n+    io:println(userName);\n+\n+    // Retrieve claims.\n+    map<any>? claims = principal[\"claims\"];\n+    io:println(claims);\n+\n+    // Retrieve scopes.\n+    string[]? scopes = principal[\"scopes\"];\n+    io:println(scopes);\n }\n \n-function getError() {\n-    panicWithError();\n-}\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Retrieve auth scheme.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjA1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Retrieve auth token.\n          \n          \n            \n                // Retrieve the auth token.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406006055", "createdAt": "2020-04-09T07:24:10Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and a attribute map to hold context information\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and set data.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n+    // Set claims.\n+    map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n+    principal.claims = claims;\n \n-    // Retrieve data from the invocation context.\n-    runtime:InvocationContext invocationContext1 = runtime:getInvocationContext();\n-    runtime:Principal? principal1 = invocationContext1[\"principal\"];\n-    if (principal1 is runtime:Principal) {\n-        // Retrieve user name.\n-        string? userName = principal1[\"username\"];\n-        io:println(userName);\n-\n-        // Retrieve claims.\n-        map<any>? retrievedClaims = principal1[\"claims\"];\n-        io:println(retrievedClaims);\n-\n-        // Retrieve scopes.\n-        string[]? retrievedScopes = principal1[\"scopes\"];\n-        io:println(retrievedScopes);\n-    }\n-\n-    runtime:AuthenticationContext? authContext1 = \n-                            invocationContext1[\"authenticationContext\"];\n-    if (authContext1 is runtime:AuthenticationContext) {\n-        // Retrieve auth scheme.\n-        string? authScheme = authContext1[\"scheme\"];\n-        io:println(authScheme);\n-\n-        // Retrieve auth token.\n-        string? token = authContext1[\"authToken\"];\n-        io:println(token);\n-    }\n+    // Set scopes.\n+    string[] scopes = [\"email\", \"profile\"];\n+    principal.scopes = scopes;\n }\n-```\n \n-The following sample shows how to halt the current `worker` for a given time period.\n-```ballerina\n-import ballerina/runtime;\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Set auth scheme.\n+    authContext.scheme = \"jwt\";\n \n-// Sleep the current worker for 5 seconds.\n-runtime:sleep(5000);\n+    // Set auth token.\n+    authContext.authToken = \"abc.pqr.xyz\";\n+}\n ```\n \n-The following sample shows how to access properties from the runtime. \n+The following code snippet shows how to access the `runtime:InvocationContext` and get the data.\n ```ballerina\n-import ballerina/runtime;\n-\n-// Retrieve the property \u2018ballerina version\u2019 from the runtime.\n-runtime:getProperty(\"ballerina.version\");\n-```\n-\n-### CallStack Element\n-\n-The runtime module includes a utility method to retrieve the current call stack and the particular call stack frame for\n- an error. \n-\n-The following sample shows how to access the call stack and how to trap an error.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-    // Print the current call stack.\n-    io:println(runtime:getCallStack());\n-    var errorMessage = trap getError();\n-    if (errorMessage is error) {\n-        io:println(errorMessage.reason());\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Retrieve user name.\n+    string? userName = principal[\"username\"];\n+    io:println(userName);\n+\n+    // Retrieve claims.\n+    map<any>? claims = principal[\"claims\"];\n+    io:println(claims);\n+\n+    // Retrieve scopes.\n+    string[]? scopes = principal[\"scopes\"];\n+    io:println(scopes);\n }\n \n-function getError() {\n-    panicWithError();\n-}\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Retrieve auth scheme.\n+    string? authScheme = authContext[\"scheme\"];\n+    io:println(authScheme);\n \n-function panicWithError() {\n-    // Create an error with a reason.\n-    error e = error(\"error occurred\");\n-    panic e;\n+    // Retrieve auth token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjEzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents a data holder of current call stack element.\n          \n          \n            \n            # Represents a data holder of the current call stack element.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406006135", "createdAt": "2020-04-09T07:24:21Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/errors.bal", "diffHunk": "@@ -16,7 +16,7 @@\n \n import ballerina/java;\n \n-# Representation of `CallStackElement`\n+# Represents a data holder of current call stack element.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + id - Unique id generated when initiating the invocation context\n          \n          \n            \n            # + id - Unique ID generated when initiating the invocation context", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406006252", "createdAt": "2020-04-09T07:24:38Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/invocation-context.bal", "diffHunk": "@@ -16,44 +16,47 @@\n \n import ballerina/java;\n \n-# Represents the InvocationContext.\n+# Represents the `runtime:InvocationContext`.\n #\n-# + id - Unique id generated when initiating the invocation context.\n-# + principal - User principal instance.\n-# + authenticationContext - Authentication context instance.\n-# + attributes - Context attributes.\n+# + id - Unique id generated when initiating the invocation context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjMzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the `runtime:AuthenticationContext`, populated with authenticated information.\n          \n          \n            \n            # Represents the `runtime:AuthenticationContext` populated with authenticated information.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406006334", "createdAt": "2020-04-09T07:24:48Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/invocation-context.bal", "diffHunk": "@@ -16,44 +16,47 @@\n \n import ballerina/java;\n \n-# Represents the InvocationContext.\n+# Represents the `runtime:InvocationContext`.\n #\n-# + id - Unique id generated when initiating the invocation context.\n-# + principal - User principal instance.\n-# + authenticationContext - Authentication context instance.\n-# + attributes - Context attributes.\n+# + id - Unique id generated when initiating the invocation context\n+# + principal - User principal instance\n+# + authenticationContext - Authentication context instance\n+# + attributes - Map of context attributes\n public type InvocationContext record {|\n     string id;\n     Principal principal?;\n     AuthenticationContext authenticationContext?;\n     map<any> attributes;\n |};\n \n-# Represents the AuthenticationContext, populated with authenticated information.\n+# Represents the `runtime:AuthenticationContext`, populated with authenticated information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjQwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the `runtime:Principal`, populated with authenticated user information.\n          \n          \n            \n            # Represents the `runtime:Principal` populated with authenticated user information.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406006407", "createdAt": "2020-04-09T07:24:59Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/invocation-context.bal", "diffHunk": "@@ -16,44 +16,47 @@\n \n import ballerina/java;\n \n-# Represents the InvocationContext.\n+# Represents the `runtime:InvocationContext`.\n #\n-# + id - Unique id generated when initiating the invocation context.\n-# + principal - User principal instance.\n-# + authenticationContext - Authentication context instance.\n-# + attributes - Context attributes.\n+# + id - Unique id generated when initiating the invocation context\n+# + principal - User principal instance\n+# + authenticationContext - Authentication context instance\n+# + attributes - Map of context attributes\n public type InvocationContext record {|\n     string id;\n     Principal principal?;\n     AuthenticationContext authenticationContext?;\n     map<any> attributes;\n |};\n \n-# Represents the AuthenticationContext, populated with authenticated information.\n+# Represents the `runtime:AuthenticationContext`, populated with authenticated information.\n #\n-# + scheme - Authentication token type. e.g: JWT etc.\n-# + authToken - Relevant token for the schema.\n+# + scheme - Authentication scheme\n+# + authToken - Token for the provided `scheme`\n public type AuthenticationContext record {\n     string scheme?;\n     string authToken?;\n };\n \n-# Represents the Principal, populated with authenticated user information.\n+# Represents the `runtime:Principal`, populated with authenticated user information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjQ0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + userId - User Id of the authenticated user\n          \n          \n            \n            # + userId - User ID of the authenticated user", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406006449", "createdAt": "2020-04-09T07:25:05Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/invocation-context.bal", "diffHunk": "@@ -16,44 +16,47 @@\n \n import ballerina/java;\n \n-# Represents the InvocationContext.\n+# Represents the `runtime:InvocationContext`.\n #\n-# + id - Unique id generated when initiating the invocation context.\n-# + principal - User principal instance.\n-# + authenticationContext - Authentication context instance.\n-# + attributes - Context attributes.\n+# + id - Unique id generated when initiating the invocation context\n+# + principal - User principal instance\n+# + authenticationContext - Authentication context instance\n+# + attributes - Map of context attributes\n public type InvocationContext record {|\n     string id;\n     Principal principal?;\n     AuthenticationContext authenticationContext?;\n     map<any> attributes;\n |};\n \n-# Represents the AuthenticationContext, populated with authenticated information.\n+# Represents the `runtime:AuthenticationContext`, populated with authenticated information.\n #\n-# + scheme - Authentication token type. e.g: JWT etc.\n-# + authToken - Relevant token for the schema.\n+# + scheme - Authentication scheme\n+# + authToken - Token for the provided `scheme`\n public type AuthenticationContext record {\n     string scheme?;\n     string authToken?;\n };\n \n-# Represents the Principal, populated with authenticated user information.\n+# Represents the `runtime:Principal`, populated with authenticated user information.\n #\n-# + userId - User Id of the authenticated user.\n-# + username - Username of the authenticated user.\n-# + claims - Claims of the authenticated user.\n-# + scopes - Authenticated user scopes.\n+# + userId - User Id of the authenticated user", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjYyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Creates a return the `runtime:InvocationContext` instance.\n          \n          \n            \n            # Returns the `runtime:InvocationContext` instance.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r406006625", "createdAt": "2020-04-09T07:25:26Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/invocation-context.bal", "diffHunk": "@@ -16,44 +16,47 @@\n \n import ballerina/java;\n \n-# Represents the InvocationContext.\n+# Represents the `runtime:InvocationContext`.\n #\n-# + id - Unique id generated when initiating the invocation context.\n-# + principal - User principal instance.\n-# + authenticationContext - Authentication context instance.\n-# + attributes - Context attributes.\n+# + id - Unique id generated when initiating the invocation context\n+# + principal - User principal instance\n+# + authenticationContext - Authentication context instance\n+# + attributes - Map of context attributes\n public type InvocationContext record {|\n     string id;\n     Principal principal?;\n     AuthenticationContext authenticationContext?;\n     map<any> attributes;\n |};\n \n-# Represents the AuthenticationContext, populated with authenticated information.\n+# Represents the `runtime:AuthenticationContext`, populated with authenticated information.\n #\n-# + scheme - Authentication token type. e.g: JWT etc.\n-# + authToken - Relevant token for the schema.\n+# + scheme - Authentication scheme\n+# + authToken - Token for the provided `scheme`\n public type AuthenticationContext record {\n     string scheme?;\n     string authToken?;\n };\n \n-# Represents the Principal, populated with authenticated user information.\n+# Represents the `runtime:Principal`, populated with authenticated user information.\n #\n-# + userId - User Id of the authenticated user.\n-# + username - Username of the authenticated user.\n-# + claims - Claims of the authenticated user.\n-# + scopes - Authenticated user scopes.\n+# + userId - User Id of the authenticated user\n+# + username - Username of the authenticated user\n+# + claims - Claims of the authenticated user\n+# + scopes - Scopes of the authenticated user\n public type Principal record {\n     string userId?;\n     string username?;\n     map<any> claims?;\n     string[] scopes?;\n };\n \n-# Creates a InvocationContext instance.\n+# Creates a return the `runtime:InvocationContext` instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb90d86a714c3fdacf9160c055ff8547ebd82"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c89cace7b3aff859b058b32e9192587c9c7b205", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c89cace7b3aff859b058b32e9192587c9c7b205", "committedDate": "2020-04-09T08:34:38Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjk1NzQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#pullrequestreview-392695741", "createdAt": "2020-04-14T08:09:00Z", "commit": {"oid": "9c89cace7b3aff859b058b32e9192587c9c7b205"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODowOTowMFrOGFDA3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODowOTowMFrOGFDA3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NTQzOA==", "bodyText": "Shall we remove io:println from the docs. add only one related to the module", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r407945438", "createdAt": "2020-04-14T08:09:00Z", "author": {"login": "daneshk"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,65 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and an attribute map to hold context information.\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and the set of data.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n+    // Set the claims.\n+    map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n+    principal.claims = claims;\n \n-    // Retrieve data from the invocation context.\n-    runtime:InvocationContext invocationContext1 = runtime:getInvocationContext();\n-    runtime:Principal? principal1 = invocationContext1[\"principal\"];\n-    if (principal1 is runtime:Principal) {\n-        // Retrieve user name.\n-        string? userName = principal1[\"username\"];\n-        io:println(userName);\n-\n-        // Retrieve claims.\n-        map<any>? retrievedClaims = principal1[\"claims\"];\n-        io:println(retrievedClaims);\n-\n-        // Retrieve scopes.\n-        string[]? retrievedScopes = principal1[\"scopes\"];\n-        io:println(retrievedScopes);\n-    }\n-\n-    runtime:AuthenticationContext? authContext1 = \n-                            invocationContext1[\"authenticationContext\"];\n-    if (authContext1 is runtime:AuthenticationContext) {\n-        // Retrieve auth scheme.\n-        string? authScheme = authContext1[\"scheme\"];\n-        io:println(authScheme);\n-\n-        // Retrieve auth token.\n-        string? token = authContext1[\"authToken\"];\n-        io:println(token);\n-    }\n+    // Set scopes.\n+    string[] scopes = [\"email\", \"profile\"];\n+    principal.scopes = scopes;\n }\n-```\n \n-The following sample shows how to halt the current `worker` for a given time period.\n-```ballerina\n-import ballerina/runtime;\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Set the auth scheme.\n+    authContext.scheme = \"jwt\";\n \n-// Sleep the current worker for 5 seconds.\n-runtime:sleep(5000);\n+    // Set the auth token.\n+    authContext.authToken = \"abc.pqr.xyz\";\n+}\n ```\n \n-The following sample shows how to access properties from the runtime. \n+The following code snippet shows how to access the `runtime:InvocationContext` and get the data.\n ```ballerina\n-import ballerina/runtime;\n-\n-// Retrieve the property \u2018ballerina version\u2019 from the runtime.\n-runtime:getProperty(\"ballerina.version\");\n-```\n-\n-### CallStack Element\n-\n-The runtime module includes a utility method to retrieve the current call stack and the particular call stack frame for\n- an error. \n-\n-The following sample shows how to access the call stack and how to trap an error.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-    // Print the current call stack.\n-    io:println(runtime:getCallStack());\n-    var errorMessage = trap getError();\n-    if (errorMessage is error) {\n-        io:println(errorMessage.reason());\n-    }\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Retrieve the user name.\n+    string? userName = principal[\"username\"];\n+    io:println(userName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c89cace7b3aff859b058b32e9192587c9c7b205"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzM2Nzc3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#pullrequestreview-392736777", "createdAt": "2020-04-14T09:03:11Z", "commit": {"oid": "9c89cace7b3aff859b058b32e9192587c9c7b205"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMzoxMVrOGFFE7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMzoxMVrOGFFE7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3OTI0Ng==", "bodyText": "Shall we add code snippet of this function", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r407979246", "createdAt": "2020-04-14T09:03:11Z", "author": {"login": "daneshk"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/errors.bal", "diffHunk": "@@ -29,9 +29,9 @@ public type CallStackElement record {|\n     int lineNumber;\n |};\n \n-# Retrieves the Call Stack\n+# Retrieves the array of `runtime:CallStackElement` instances.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c89cace7b3aff859b058b32e9192587c9c7b205"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba874a5eec5ea9827e2778a1fc28087e9160ffc6", "committedDate": "2020-04-15T04:19:59Z", "message": "Address review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDkyNDI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#pullrequestreview-393492428", "createdAt": "2020-04-15T06:39:56Z", "commit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjozOTo1NlrOGFrvoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo0Mjo1MVrOGFr0Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMjc2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides functions to interact with the runtime, the invocation context and to manage errors.\n          \n          \n            \n            This module provides functions to interact with the runtime, the invocation context, and to manage errors.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r408612769", "createdAt": "2020-04-15T06:39:56Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,40 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzIyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and an attribute map to hold context information.\n          \n          \n            \n            The Invocation Context is a data holder, which is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance, which includes user details, a `runtime:AuthenticationContext`, which has the authentication-related details if available, and an attribute map to hold context information.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r408613221", "createdAt": "2020-04-15T06:41:02Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,40 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and an attribute map to hold context information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzM1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following code snippet shows how to access the `runtime:InvocationContext` and the set data for `runtime:Principal` and `runtime:AuthenticationContext`.\n          \n          \n            \n            The following code snippet shows how to access the `runtime:InvocationContext` and the set of data for the `runtime:Principal` and `runtime:AuthenticationContext`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r408613352", "createdAt": "2020-04-15T06:41:19Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,40 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and an attribute map to hold context information.\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and the set data for `runtime:Principal` and `runtime:AuthenticationContext`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzQ1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following code snippet shows how to access the `runtime:InvocationContext` and get the data from `runtime:Principal` and `runtime:AuthenticationContext`,\n          \n          \n            \n            The following code snippet shows how to access the `runtime:InvocationContext` and get the data from the `runtime:Principal` and `runtime:AuthenticationContext`,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r408613451", "createdAt": "2020-04-15T06:41:37Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,122 +1,40 @@\n-## Module overview\n-\n This module provides functions to interact with the runtime, the invocation context and to manage errors.\n \n-## Samples\n-\n ### Invocation Context\n \n-The Invocation Context is a data holder that is created per request and preserved for a single request-response flow\n-. It comprises of a unique ID, a `Principal` instance that includes user details, attribute map to hold context\n- information and an `AuthenticationContext` instance that has the authentication related details if available.\n+The Invocation Context is a data holder that is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance that includes user details, an `runtime:AuthenticationContext` instance that has the authentication related details if available, and an attribute map to hold context information.\n \n-The following sample shows how to access the Invocation Context, set data to it and access the same.\n+The following code snippet shows how to access the `runtime:InvocationContext` and the set data for `runtime:Principal` and `runtime:AuthenticationContext`.\n ```ballerina\n-import ballerina/io;\n-import ballerina/runtime;\n-\n-public function main() {\n-\n-    // Set data to the Invocation Context.\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    runtime:Principal? principal = invocationContext[\"principal\"];\n-    if (principal is runtime:Principal) {\n-        // Set the username as \u2018tom\u2019.\n-        principal[\"username\"] = \"tom\";\n-\n-        // Set claims.\n-        map<any> claims = { email: \"tom@ballerina.com\", org: \"wso2\" };\n-        principal.claims = claims;\n-\n-        // Set scopes.\n-        string[] scopes = [\"email\", \"profile\"];\n-        principal.scopes = scopes;\n-    }\n-\n-    runtime:AuthenticationContext? authContext = \n-                            invocationContext[\"authenticationContext\"];\n-    if (authContext is runtime:AuthenticationContext) {\n-        // Set auth scheme.\n-        authContext.scheme = \"jwt\";\n+runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n \n-        // Set auth token.\n-        authContext.authToken = \"abc.pqr.xyz\";\n-    }\n-\n-    // Retrieve data from the invocation context.\n-    runtime:InvocationContext invocationContext1 = runtime:getInvocationContext();\n-    runtime:Principal? principal1 = invocationContext1[\"principal\"];\n-    if (principal1 is runtime:Principal) {\n-        // Retrieve user name.\n-        string? userName = principal1[\"username\"];\n-        io:println(userName);\n-\n-        // Retrieve claims.\n-        map<any>? retrievedClaims = principal1[\"claims\"];\n-        io:println(retrievedClaims);\n-\n-        // Retrieve scopes.\n-        string[]? retrievedScopes = principal1[\"scopes\"];\n-        io:println(retrievedScopes);\n-    }\n-\n-    runtime:AuthenticationContext? authContext1 = \n-                            invocationContext1[\"authenticationContext\"];\n-    if (authContext1 is runtime:AuthenticationContext) {\n-        // Retrieve auth scheme.\n-        string? authScheme = authContext1[\"scheme\"];\n-        io:println(authScheme);\n-\n-        // Retrieve auth token.\n-        string? token = authContext1[\"authToken\"];\n-        io:println(token);\n-    }\n+runtime:Principal? principal = invocationContext[\"principal\"];\n+if (principal is runtime:Principal) {\n+    // Set the username as \u2018tom\u2019.\n+    principal[\"username\"] = \"tom\";\n }\n-```\n \n-The following sample shows how to halt the current `worker` for a given time period.\n-```ballerina\n-import ballerina/runtime;\n-\n-// Sleep the current worker for 5 seconds.\n-runtime:sleep(5000);\n+runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n+if (authContext is runtime:AuthenticationContext) {\n+    // Set the auth scheme.\n+    authContext.scheme = \"jwt\";\n+}\n ```\n \n-The following sample shows how to access properties from the runtime. \n+The following code snippet shows how to access the `runtime:InvocationContext` and get the data from `runtime:Principal` and `runtime:AuthenticationContext`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzY2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the `runtime:AuthenticationContext` populated with authenticated information.\n          \n          \n            \n            # Represents the `runtime:AuthenticationContext` populated with the authenticated information.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r408613665", "createdAt": "2020-04-15T06:42:07Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/invocation-context.bal", "diffHunk": "@@ -16,44 +16,47 @@\n \n import ballerina/java;\n \n-# Represents the InvocationContext.\n+# Represents the `runtime:InvocationContext`.\n #\n-# + id - Unique id generated when initiating the invocation context.\n-# + principal - User principal instance.\n-# + authenticationContext - Authentication context instance.\n-# + attributes - Context attributes.\n+# + id - Unique ID generated when initiating the invocation context\n+# + principal - User principal instance\n+# + authenticationContext - Authentication context instance\n+# + attributes - Map of context attributes\n public type InvocationContext record {|\n     string id;\n     Principal principal?;\n     AuthenticationContext authenticationContext?;\n     map<any> attributes;\n |};\n \n-# Represents the AuthenticationContext, populated with authenticated information.\n+# Represents the `runtime:AuthenticationContext` populated with authenticated information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzczNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the `runtime:Principal` populated with authenticated user information.\n          \n          \n            \n            # Represents the `runtime:Principal` populated with the authenticated user information.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r408613735", "createdAt": "2020-04-15T06:42:18Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/invocation-context.bal", "diffHunk": "@@ -16,44 +16,47 @@\n \n import ballerina/java;\n \n-# Represents the InvocationContext.\n+# Represents the `runtime:InvocationContext`.\n #\n-# + id - Unique id generated when initiating the invocation context.\n-# + principal - User principal instance.\n-# + authenticationContext - Authentication context instance.\n-# + attributes - Context attributes.\n+# + id - Unique ID generated when initiating the invocation context\n+# + principal - User principal instance\n+# + authenticationContext - Authentication context instance\n+# + attributes - Map of context attributes\n public type InvocationContext record {|\n     string id;\n     Principal principal?;\n     AuthenticationContext authenticationContext?;\n     map<any> attributes;\n |};\n \n-# Represents the AuthenticationContext, populated with authenticated information.\n+# Represents the `runtime:AuthenticationContext` populated with authenticated information.\n #\n-# + scheme - Authentication token type. e.g: JWT etc.\n-# + authToken - Relevant token for the schema.\n+# + scheme - Authentication scheme\n+# + authToken - Token for the provided `scheme`\n public type AuthenticationContext record {\n     string scheme?;\n     string authToken?;\n };\n \n-# Represents the Principal, populated with authenticated user information.\n+# Represents the `runtime:Principal` populated with authenticated user information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzg0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `runtime:InvocationContext` instance\n          \n          \n            \n            # + return - The `runtime:InvocationContext` instance", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r408613846", "createdAt": "2020-04-15T06:42:32Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/invocation-context.bal", "diffHunk": "@@ -16,44 +16,47 @@\n \n import ballerina/java;\n \n-# Represents the InvocationContext.\n+# Represents the `runtime:InvocationContext`.\n #\n-# + id - Unique id generated when initiating the invocation context.\n-# + principal - User principal instance.\n-# + authenticationContext - Authentication context instance.\n-# + attributes - Context attributes.\n+# + id - Unique ID generated when initiating the invocation context\n+# + principal - User principal instance\n+# + authenticationContext - Authentication context instance\n+# + attributes - Map of context attributes\n public type InvocationContext record {|\n     string id;\n     Principal principal?;\n     AuthenticationContext authenticationContext?;\n     map<any> attributes;\n |};\n \n-# Represents the AuthenticationContext, populated with authenticated information.\n+# Represents the `runtime:AuthenticationContext` populated with authenticated information.\n #\n-# + scheme - Authentication token type. e.g: JWT etc.\n-# + authToken - Relevant token for the schema.\n+# + scheme - Authentication scheme\n+# + authToken - Token for the provided `scheme`\n public type AuthenticationContext record {\n     string scheme?;\n     string authToken?;\n };\n \n-# Represents the Principal, populated with authenticated user information.\n+# Represents the `runtime:Principal` populated with authenticated user information.\n #\n-# + userId - User Id of the authenticated user.\n-# + username - Username of the authenticated user.\n-# + claims - Claims of the authenticated user.\n-# + scopes - Authenticated user scopes.\n+# + userId - User ID of the authenticated user\n+# + username - Username of the authenticated user\n+# + claims - Claims of the authenticated user\n+# + scopes - Scopes of the authenticated user\n public type Principal record {\n     string userId?;\n     string username?;\n     map<any> claims?;\n     string[] scopes?;\n };\n \n-# Creates a InvocationContext instance.\n+# Returns the `runtime:InvocationContext` instance.\n+# ```ballerina\n+# runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+# ```\n #\n-# + return - InvocationContext instance\n+# + return - `runtime:InvocationContext` instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzk1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Value of the property if the property exists, an empty string otherwise\n          \n          \n            \n            # + return - Value of the property if the property exists or else an empty string otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#discussion_r408613959", "createdAt": "2020-04-15T06:42:51Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/runtime.bal", "diffHunk": "@@ -17,15 +17,19 @@\n import ballerina/java;\n \n # Halts the current worker for a predefined amount of time.\n+# ```ballerina\n+# runtime:sleep(1000);\n+# ```\n #\n # + millis - Amount of time to sleep in milliseconds\n public function sleep(int millis) = @java:Method {\n     class: \"org.ballerinalang.stdlib.runtime.nativeimpl.Sleep\"\n } external;\n \n-\n-// Todo - Remove\n-# Returns the value associated with the specified property name.\n+# Returns the system property value associated with the specified property name.\n+# ```ballerina\n+# string userHome = runtime:getProperty(\"user.home\");\n+# ```\n #\n # + name - Name of the property\n # + return - Value of the property if the property exists, an empty string otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba874a5eec5ea9827e2778a1fc28087e9160ffc6"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3b693d700809f07eeaa042b5fff987fd246bfa6", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3b693d700809f07eeaa042b5fff987fd246bfa6", "committedDate": "2020-04-15T06:45:09Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTAyOTg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22534#pullrequestreview-393502985", "createdAt": "2020-04-15T07:00:33Z", "commit": {"oid": "a3b693d700809f07eeaa042b5fff987fd246bfa6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3807, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}