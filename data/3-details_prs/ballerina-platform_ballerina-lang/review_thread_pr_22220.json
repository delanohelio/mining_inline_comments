{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDMxNzA2", "number": 22220, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODo0OTowMVrODri1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTowMTowMFrODs8l2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTg2MTQwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODo0OTowMVrOF78lgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODo1MzoxOVrOF78vOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQwMjk0NQ==", "bodyText": "Not formatted correctly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398402945", "createdAt": "2020-03-26T08:49:01Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -546,6 +546,8 @@ private STToken processIdentifierOrKeyword() {\n                 return getSyntaxToken(SyntaxKind.ELSE_KEYWORD);\n             case LexerTerminals.WHILE:\n                 return getSyntaxToken(SyntaxKind.WHILE_KEYWORD);\n+\t\t\tcase LexerTerminals.PANIC:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfdf3002812d45422cd42acb6d20e60cc23a66fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQwNTQzNQ==", "bodyText": "sorry, my editor used tabs,so it looked fine in mine, I ll fix this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398405435", "createdAt": "2020-03-26T08:53:19Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -546,6 +546,8 @@ private STToken processIdentifierOrKeyword() {\n                 return getSyntaxToken(SyntaxKind.ELSE_KEYWORD);\n             case LexerTerminals.WHILE:\n                 return getSyntaxToken(SyntaxKind.WHILE_KEYWORD);\n+\t\t\tcase LexerTerminals.PANIC:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQwMjk0NQ=="}, "originalCommit": {"oid": "bfdf3002812d45422cd42acb6d20e60cc23a66fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTg2MjMwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODo0OToxM1rOF78mEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo0MDo0MFrOF7-iOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQwMzA4OQ==", "bodyText": "Not formatted correctly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398403089", "createdAt": "2020-03-26T08:49:13Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -158,6 +158,8 @@ public STNode resumeParsing(ParserRuleContext context, STNode... parsedNodes) {\n                 return parseElseBody();\n             case WHILE_KEYWORD:\n                 return parseWhileKeyword();\n+\t\t\tcase PANIC_KEYWORD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfdf3002812d45422cd42acb6d20e60cc23a66fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQwMzI3Mw==", "bodyText": "Please check for other files.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398403273", "createdAt": "2020-03-26T08:49:35Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -158,6 +158,8 @@ public STNode resumeParsing(ParserRuleContext context, STNode... parsedNodes) {\n                 return parseElseBody();\n             case WHILE_KEYWORD:\n                 return parseWhileKeyword();\n+\t\t\tcase PANIC_KEYWORD:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQwMzA4OQ=="}, "originalCommit": {"oid": "bfdf3002812d45422cd42acb6d20e60cc23a66fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQzNDg3NQ==", "bodyText": "will do :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398434875", "createdAt": "2020-03-26T09:40:40Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -158,6 +158,8 @@ public STNode resumeParsing(ParserRuleContext context, STNode... parsedNodes) {\n                 return parseElseBody();\n             case WHILE_KEYWORD:\n                 return parseWhileKeyword();\n+\t\t\tcase PANIC_KEYWORD:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQwMzA4OQ=="}, "originalCommit": {"oid": "bfdf3002812d45422cd42acb6d20e60cc23a66fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTkyNzIyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTowNzowMVrOF79Pmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTowNzowMVrOF79Pmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxMzcyMg==", "bodyText": "Not properly formatted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398413722", "createdAt": "2020-03-26T09:07:01Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2833,6 +2837,35 @@ private STNode parseWhileKeyword() {\n         }\n     }\n \n+\t/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f8515cd322cc48fb05bf4eef8103004c2e8e04"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTkyODgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTowNzoyOVrOF79Qrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTowNzoyOVrOF79Qrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxMzk5OQ==", "bodyText": "Shall we add all the new changes at the bottom? Applicable to all places?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398413999", "createdAt": "2020-03-26T09:07:29Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2833,6 +2837,35 @@ private STNode parseWhileKeyword() {\n         }\n     }\n \n+\t/**\n+     * Parse panic statement.\n+     * <code>panic-stmt := panic expression ;</code>\n+     * \n+     * @return Panic statement\n+     */\n+    private STNode parsePanicStatement() {\n+        startContext(ParserRuleContext.PANIC_KEYWORD);\n+        STNode panicKeyword = parsePanicKeyword();\n+        STNode expression = parseExpression();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createPanicStatement(panicKeyword, expression, semicolon);\n+    }\n+\n+    /**\n+     * Parse while-keyword.\n+     * \n+     * @return While-keyword node\n+     */\n+    private STNode parsePanicKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.PANIC_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.PANIC_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f8515cd322cc48fb05bf4eef8103004c2e8e04"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTkzMTA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTowODowOVrOF79SKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTowODowOVrOF79SKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxNDM3Nw==", "bodyText": "Shall we add the new changes at the bottom of the block/group, as a practice?\nApplicable for other files as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398414377", "createdAt": "2020-03-26T09:08:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -546,6 +546,8 @@ private STToken processIdentifierOrKeyword() {\n                 return getSyntaxToken(SyntaxKind.ELSE_KEYWORD);\n             case LexerTerminals.WHILE:\n                 return getSyntaxToken(SyntaxKind.WHILE_KEYWORD);\n+            case LexerTerminals.PANIC:\n+                return getSyntaxToken(SyntaxKind.PANIC_KEYWORD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f8515cd322cc48fb05bf4eef8103004c2e8e04"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTkzODczOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STPanicStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToxMDoyNFrOF79XTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToxMDoyNFrOF79XTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxNTY5Mg==", "bodyText": "Shall we create the public node as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398415692", "createdAt": "2020-03-26T09:10:24Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STPanicStatement.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+\n+public class STPanicStatement extends STStatement {\n+\n+    public final STNode panicKeyword;\n+    public final STNode expression;\n+    public final STNode semicolonToken;\n+\n+    STPanicStatement(STNode panicKeyword,\n+                     STNode expression,\n+                     STNode semicolonToken) {\n+        super(SyntaxKind.PANIC_KEYWORD);\n+        this.panicKeyword = panicKeyword;\n+        this.expression = expression;\n+        this.semicolonToken = semicolonToken;\n+\n+        this.bucketCount = 3;\n+        this.childBuckets = new STNode[this.bucketCount];\n+        this.addChildNode(panicKeyword, 0);\n+        this.addChildNode(expression, 1);\n+        this.addChildNode(semicolonToken, 2);\n+    }\n+\n+    @Override\n+    public Node createFacade(int position, NonTerminalNode parent) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f8515cd322cc48fb05bf4eef8103004c2e8e04"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTk0MDY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToxMDo1MlrOF79YZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToxMDo1MlrOF79YZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxNTk3NQ==", "bodyText": "Incorrect indentation. Use 4-spaces for indentation.\nPlease fix in all places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398415975", "createdAt": "2020-03-26T09:10:52Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "diffHunk": "@@ -48,6 +48,7 @@\n     WHILE_KEYWORD(207, \"while\"),\n     CHECK_KEYWORD(208, \"check\"),\n     CHECKPANIC_KEYWORD(209, \"checkpanic\"),\n+\tPANIC_KEYWORD(210, \"panic\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f8515cd322cc48fb05bf4eef8103004c2e8e04"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTk4NjI4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToyMjowOVrOF79z6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTowMjoxNlrOF8BnXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMzAxNg==", "bodyText": "This parser context used here seems not correct.\nPlease have a look at parseCallStatementWithCheck() and/or parseAssignmentStmt() for an example.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398423016", "createdAt": "2020-03-26T09:22:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2833,6 +2837,35 @@ private STNode parseWhileKeyword() {\n         }\n     }\n \n+\t/**\n+     * Parse panic statement.\n+     * <code>panic-stmt := panic expression ;</code>\n+     * \n+     * @return Panic statement\n+     */\n+    private STNode parsePanicStatement() {\n+        startContext(ParserRuleContext.PANIC_KEYWORD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea49530ae3dba1ea3ee6ca692a2895e745b8fde3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4NTM0Mg==", "bodyText": "thanks for pointing this out, I will look in to that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r398485342", "createdAt": "2020-03-26T11:02:16Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2833,6 +2837,35 @@ private STNode parseWhileKeyword() {\n         }\n     }\n \n+\t/**\n+     * Parse panic statement.\n+     * <code>panic-stmt := panic expression ;</code>\n+     * \n+     * @return Panic statement\n+     */\n+    private STNode parsePanicStatement() {\n+        startContext(ParserRuleContext.PANIC_KEYWORD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMzAxNg=="}, "originalCommit": {"oid": "ea49530ae3dba1ea3ee6ca692a2895e745b8fde3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDM2MDU0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/PanicStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzozNTowN1rOF9c-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjo1MjoyMVrOF9oMkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4MjMyMQ==", "bodyText": "shouldn't this be createToken(0);?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r399982321", "createdAt": "2020-03-30T07:35:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/PanicStatement.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class PanicStatement extends Statement {\n+    private Node panicKeyword;\n+    private Node expression;\n+    private Token semicolonToken;\n+\n+    public PanicStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Node panicKeyword() {\n+        if (panicKeyword != null) {\n+            return panicKeyword;\n+        }\n+\n+        panicKeyword = node.childInBucket(0).createFacade(getChildPosition(0), this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba9c993d0f1e124811152f1d42d04e4b39a5fa2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2NjAzMw==", "bodyText": "yes, I ll fix that", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r400166033", "createdAt": "2020-03-30T12:52:21Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/PanicStatement.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class PanicStatement extends Statement {\n+    private Node panicKeyword;\n+    private Node expression;\n+    private Token semicolonToken;\n+\n+    public PanicStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Node panicKeyword() {\n+        if (panicKeyword != null) {\n+            return panicKeyword;\n+        }\n+\n+        panicKeyword = node.childInBucket(0).createFacade(getChildPosition(0), this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4MjMyMQ=="}, "originalCommit": {"oid": "3ba9c993d0f1e124811152f1d42d04e4b39a5fa2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDM2MjI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/PanicStatementTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzozNTozOVrOF9dABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjo1MjozNVrOF9oNKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4MjU5OQ==", "bodyText": "Incorrect doc comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r399982599", "createdAt": "2020-03-30T07:35:39Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/PanicStatementTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing variable declaration statements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba9c993d0f1e124811152f1d42d04e4b39a5fa2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2NjE4Nw==", "bodyText": "I ll change that as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r400166187", "createdAt": "2020-03-30T12:52:35Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/PanicStatementTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing variable declaration statements.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4MjU5OQ=="}, "originalCommit": {"oid": "3ba9c993d0f1e124811152f1d42d04e4b39a5fa2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDQzNjg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzo1NjoyM1rOF9droQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjo1MzoyMFrOF9oO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5Mzc2MQ==", "bodyText": "Incorrect doc comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r399993761", "createdAt": "2020-03-30T07:56:23Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2833,6 +2837,35 @@ private STNode parseWhileKeyword() {\n         }\n     }\n \n+    /**\n+     * Parse panic statement.\n+     * <code>panic-stmt := panic expression ;</code>\n+     * \n+     * @return Panic statement\n+     */\n+    private STNode parsePanicStatement() {\n+        startContext(ParserRuleContext.PANIC_STMT);\n+        STNode panicKeyword = parsePanicKeyword();\n+        STNode expression = parseExpression();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createPanicStatement(panicKeyword, expression, semicolon);\n+    }\n+\n+    /**\n+     * Parse while-keyword.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba9c993d0f1e124811152f1d42d04e4b39a5fa2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2NjY1NA==", "bodyText": "I ll change the comments", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r400166654", "createdAt": "2020-03-30T12:53:20Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2833,6 +2837,35 @@ private STNode parseWhileKeyword() {\n         }\n     }\n \n+    /**\n+     * Parse panic statement.\n+     * <code>panic-stmt := panic expression ;</code>\n+     * \n+     * @return Panic statement\n+     */\n+    private STNode parsePanicStatement() {\n+        startContext(ParserRuleContext.PANIC_STMT);\n+        STNode panicKeyword = parsePanicKeyword();\n+        STNode expression = parseExpression();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createPanicStatement(panicKeyword, expression, semicolon);\n+    }\n+\n+    /**\n+     * Parse while-keyword.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5Mzc2MQ=="}, "originalCommit": {"oid": "3ba9c993d0f1e124811152f1d42d04e4b39a5fa2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDU2NjY3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/PanicStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTowMTowMFrOF-FZDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTowMTowMFrOF-FZDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0NDM2Nw==", "bodyText": "Additional semicolon", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22220#discussion_r400644367", "createdAt": "2020-03-31T05:01:00Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/PanicStatement.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class PanicStatement extends Statement {\n+    private Token panicKeyword;\n+    private Node expression;\n+    private Token semicolonToken;\n+\n+    public PanicStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Token panicKeyword() {\n+        if (panicKeyword != null) {\n+            return panicKeyword;\n+        }\n+\n+        panicKeyword = createToken(0);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c442f834db5cd40398a958eb3ed5705bd9d5dd2f"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4569, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}