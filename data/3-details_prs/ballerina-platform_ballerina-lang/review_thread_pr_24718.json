{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NjQ4MDIz", "number": 24718, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDowNDozMlrOEOhDzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoyMjoxNlrOEOhQBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjU3MTY0OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDowNDozMlrOGxtbAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDowNDozMlrOGxtbAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3NzYwMg==", "bodyText": "Can we name the options as --tests", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24718#discussion_r454777602", "createdAt": "2020-07-15T04:04:32Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "diffHunk": "@@ -149,6 +149,9 @@ public TestCommand(Path userDir, PrintStream outStream, PrintStream errStream, b\n     @CommandLine.Option(names = \"--home-cache\", description = \"Custom home cache\")\n     private String homeCache;\n \n+    @CommandLine.Option(names = \"--functions\", split = \",\", description = \"Test functions to be executed\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58a19c3c7708cc23868d33bb79e5e90ca0bed29"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjU3Nzc3OnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDowNzoyNlrOGxteRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDowNzoyNlrOGxteRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3ODQzOQ==", "bodyText": "Can we give a more specific response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24718#discussion_r454778439", "createdAt": "2020-07-15T04:07:26Z", "author": {"login": "hevayo"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class containing tests related to selective function tests.\n+ */\n+public class SelectedFunctionTest extends BaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        projectPath = basicTestsProjectPath.toString();\n+    }\n+\n+    @Test\n+    public void testSingleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"1 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testDependentFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc2\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testMultipleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc,testFunc2\",\n+                \"beforeEachAfterEach\"}, null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testNonExistingFunctionExecution() throws BallerinaTestException {\n+        String msg = \"No tests found\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58a19c3c7708cc23868d33bb79e5e90ca0bed29"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjU3ODI1OnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDowNzo0NVrOGxtegw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTozNDoyMlrOGx2L6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3ODQ5OQ==", "bodyText": "What is the error code of this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24718#discussion_r454778499", "createdAt": "2020-07-15T04:07:45Z", "author": {"login": "hevayo"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class containing tests related to selective function tests.\n+ */\n+public class SelectedFunctionTest extends BaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        projectPath = basicTestsProjectPath.toString();\n+    }\n+\n+    @Test\n+    public void testSingleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"1 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testDependentFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc2\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testMultipleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc,testFunc2\",\n+                \"beforeEachAfterEach\"}, null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testNonExistingFunctionExecution() throws BallerinaTestException {\n+        String msg = \"No tests found\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"nonExistingFunc\", \"--all\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58a19c3c7708cc23868d33bb79e5e90ca0bed29"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwNTcyMQ==", "bodyText": "There's no error code as such. If the provided text is not found within the timeout period, an error message as \"Timeout expired waiting for matching log\" will be given. Does that answer your question?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24718#discussion_r454905721", "createdAt": "2020-07-15T09:07:58Z", "author": {"login": "Dilhasha"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class containing tests related to selective function tests.\n+ */\n+public class SelectedFunctionTest extends BaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        projectPath = basicTestsProjectPath.toString();\n+    }\n+\n+    @Test\n+    public void testSingleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"1 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testDependentFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc2\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testMultipleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc,testFunc2\",\n+                \"beforeEachAfterEach\"}, null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testNonExistingFunctionExecution() throws BallerinaTestException {\n+        String msg = \"No tests found\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"nonExistingFunc\", \"--all\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3ODQ5OQ=="}, "originalCommit": {"oid": "a58a19c3c7708cc23868d33bb79e5e90ca0bed29"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxMDM0NA==", "bodyText": "AFAIU, @hevayo is asking about the exit code of the command. According to the current implementation, the exit code is 0, when no tests found to execute. Ideally this should be 1.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24718#discussion_r454910344", "createdAt": "2020-07-15T09:15:44Z", "author": {"login": "azinneera"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class containing tests related to selective function tests.\n+ */\n+public class SelectedFunctionTest extends BaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        projectPath = basicTestsProjectPath.toString();\n+    }\n+\n+    @Test\n+    public void testSingleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"1 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testDependentFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc2\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testMultipleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc,testFunc2\",\n+                \"beforeEachAfterEach\"}, null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testNonExistingFunctionExecution() throws BallerinaTestException {\n+        String msg = \"No tests found\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"nonExistingFunc\", \"--all\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3ODQ5OQ=="}, "originalCommit": {"oid": "a58a19c3c7708cc23868d33bb79e5e90ca0bed29"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyMTE5NA==", "bodyText": "Yeh sorry I was referring to exit code", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24718#discussion_r454921194", "createdAt": "2020-07-15T09:34:22Z", "author": {"login": "hevayo"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class containing tests related to selective function tests.\n+ */\n+public class SelectedFunctionTest extends BaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        projectPath = basicTestsProjectPath.toString();\n+    }\n+\n+    @Test\n+    public void testSingleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"1 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testDependentFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc2\", \"beforeEachAfterEach\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testMultipleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"testFunc,testFunc2\",\n+                \"beforeEachAfterEach\"}, null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testNonExistingFunctionExecution() throws BallerinaTestException {\n+        String msg = \"No tests found\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--functions\", \"nonExistingFunc\", \"--all\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3ODQ5OQ=="}, "originalCommit": {"oid": "a58a19c3c7708cc23868d33bb79e5e90ca0bed29"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjU3OTc1OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDowODo1OFrOGxtfgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDowODo1OFrOGxtfgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3ODc1NQ==", "bodyText": "Wouldnt it be better to name the option as --tests", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24718#discussion_r454778755", "createdAt": "2020-07-15T04:08:58Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "diffHunk": "@@ -149,6 +149,9 @@ public TestCommand(Path userDir, PrintStream outStream, PrintStream errStream, b\n     @CommandLine.Option(names = \"--home-cache\", description = \"Custom home cache\")\n     private String homeCache;\n \n+    @CommandLine.Option(names = \"--functions\", split = \",\", description = \"Test functions to be executed\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58a19c3c7708cc23868d33bb79e5e90ca0bed29"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjYwMjk0OnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoyMjoxNlrOGxtsoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoyMjoxNlrOGxtsoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjExMg==", "bodyText": "Shall we add test cases to check the behavior to test the following:\n\nwhen trying to run a disabled test case\nwhen trying to run a test case which depends on a disabled tests case", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24718#discussion_r454782112", "createdAt": "2020-07-15T04:22:16Z", "author": {"login": "azinneera"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class containing tests related to selective function tests.\n+ */\n+public class SelectedFunctionTest extends BaseTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58a19c3c7708cc23868d33bb79e5e90ca0bed29"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 469, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}