{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2OTU4NTMx", "number": 24952, "title": "Add support for Quoted Identifiers", "bodyText": "Purpose\n\n$subject\n\nFixes #18720 , #18158 , #19478 , #24951\nApproach\n\nAdded logic in Ballerina lexer to support unicode and special characters\n\nSamples\n\n\nRemarks\n\nOpenAPI to bal conversion needs to be supported #25015\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-07-27T07:19:26Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952", "merged": true, "mergeCommit": {"oid": "42aad19cdef1d6facb2f2e3102a356852c62a096"}, "closed": true, "closedAt": "2020-08-13T00:22:09Z", "author": {"login": "HindujaB"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc48om7ABqjM1ODg0MTUzMjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-O4WAAFqTQ2NjEyNjczNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40d3b68b25b99dc6e3dbc002400bf2bc7c012e03", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40d3b68b25b99dc6e3dbc002400bf2bc7c012e03", "committedDate": "2020-07-27T06:34:12Z", "message": "Add and improve tests"}, "afterCommit": {"oid": "be54c492801109571e8d7784737fee1369748467", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be54c492801109571e8d7784737fee1369748467", "committedDate": "2020-07-27T07:23:57Z", "message": "Add EOF line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NjYwMTE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-455660116", "createdAt": "2020-07-27T10:25:40Z", "commit": {"oid": "be54c492801109571e8d7784737fee1369748467"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyNTo0MFrOG3cp-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyNTo0MFrOG3cp-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NDM2MQ==", "bodyText": "Incorrect year?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460794361", "createdAt": "2020-07-27T10:25:40Z", "author": {"login": "anupama-pathirage"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/identifier/IdentifierLiteralTestCase.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be54c492801109571e8d7784737fee1369748467"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NjczMjA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-455673209", "createdAt": "2020-07-27T10:47:53Z", "commit": {"oid": "be54c492801109571e8d7784737fee1369748467"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0Nzo1M1rOG3dU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0Nzo1M1rOG3dU_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNTM3NA==", "bodyText": "Can we simplify the above two return statements?\ni.e. return !isUnicodePrivateUseChar(c) && !isUnicodePatternWhiteSpaceChar(c);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460805374", "createdAt": "2020-07-27T10:47:53Z", "author": {"login": "anupama-pathirage"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -1075,8 +1075,57 @@ private boolean isIdentifierInitialChar(int c) {\n             return true;\n         }\n \n-        // TODO: if (UnicodeIdentifierChar) return false;\n-        return false;\n+        return isUnicodeIdentifierChar(c);\n+    }\n+\n+    /**\n+     * <p>\n+     * Check whether a given char is a unicode identifier char.\n+     * </p>\n+     * <code> UnicodeIdentifierChar := ^ ( AsciiChar | UnicodeNonIdentifierChar ) </code>\n+     *\n+     * @param c character to check\n+     * @return <code>true</code>, if the character is a unicode identifier char. <code>false</code> otherwise.\n+     */\n+    private boolean isUnicodeIdentifierChar(int c) {\n+        //check Ascii char range\n+        if (0x0000 <= c && c <= 0x007F) {\n+            return false;\n+        }\n+\n+        //check unicode private use char\n+        if (isUnicodePrivateUseChar(c) || isUnicodePatternWhiteSpaceChar(c)) {\n+            return false;\n+        }\n+\n+        //TODO: if (UnicodePatternSyntaxChar) return false\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be54c492801109571e8d7784737fee1369748467"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1Njc0MjY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-455674266", "createdAt": "2020-07-27T10:49:43Z", "commit": {"oid": "be54c492801109571e8d7784737fee1369748467"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0OTo0M1rOG3dYMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0OTo0M1rOG3dYMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNjE5NQ==", "bodyText": "Can simplify this to assertTrue", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460806195", "createdAt": "2020-07-27T10:49:43Z", "author": {"login": "anupama-pathirage"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/identifier/IdentifierLiteralTestCase.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.identifier;\n+\n+import org.ballerinalang.model.util.JsonParser;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.BaseTest;\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BServerInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.ballerinalang.test.context.Utils;\n+import org.ballerinalang.test.util.HttpClientRequest;\n+import org.ballerinalang.test.util.HttpResponse;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+/**\n+ * Test case for the ballerina supporting quoted identifiers.\n+ */\n+public class IdentifierLiteralTestCase extends BaseTest {\n+\n+    private static BServerInstance serverInstance;\n+    private static final String testFileLocation = Paths.get(\"src\", \"test\", \"resources\", \"identifier\")\n+            .toAbsolutePath().toString();\n+    private static final String identifierPositiveTestFileName = \"identifier_literal_positive.bal\";\n+    private static final String invalidILSpecialCharactersFileName = \"invalid_IL_special_char.bal\";\n+    private static final String invalidILEscapeCharactersFileName = \"invalid_IL_escape_char.bal\";\n+    private static final String invalidILUnicodeCharactersFileName = \"invalid_IL_unicode_char.bal\";\n+    private static final String testProjectEntryPoint = \"TestProject\";\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void setup() throws BallerinaTestException {\n+        int[] requiredPorts = new int[]{9090};\n+        Utils.checkPortsAvailability(requiredPorts);\n+        String balFilePath =\n+                new File(testFileLocation + File.separator + \"identifier_literal_service.bal\").getAbsolutePath();\n+        serverInstance = new BServerInstance(balServer);\n+        serverInstance.startServer(balFilePath, requiredPorts);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    private void cleanup() throws Exception {\n+        serverInstance.removeAllLeechers();\n+        serverInstance.shutdownServer();\n+    }\n+\n+    @Test(description = \"Tests quoted identifier literal with allowed characters\")\n+    public void testILpositive() throws BallerinaTestException {\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String[] args = new String[]{identifierPositiveTestFileName};\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", args, new HashMap<>(), testFileLocation, true);\n+        String[] logLines = output.split(\"\\n\");\n+\n+        assertEquals(logLines.length, 3);\n+        assertEquals(logLines[0], \"Compiling source\");\n+        assertEquals(logLines[1], \"\\tidentifier_literal_positive.bal\");\n+        assertEquals(logLines[2], \"Running executables\");\n+    }\n+\n+    @Test(description = \"Tests quoted identifier literal containing invalid special characters\")\n+    public void testInvalidILSpecialChar() throws BallerinaTestException {\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String[] args = new String[]{invalidILSpecialCharactersFileName};\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", args, new HashMap<>(), testFileLocation, true);\n+        String[] logLines = output.split(\"\\n\");\n+        String expectedError = \"Compiling source\\n\" +\n+                \"\\tinvalid_IL_special_char.bal\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:14: missing semicolon token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:14: missing type desc\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:33: missing equal token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:38: missing plus token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:38: missing double quote\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:19:1: missing semicolon token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:19:15: missing double quote\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:20:1: missing semicolon token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:5: no new variables on left side\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:14: invalid intersection type \" +\n+                \"'$missingNode$0 & *%_var = ': no intersection\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:33: undefined symbol 'value'\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:19:12: underscore is not allowed here\";\n+        assertErrorLines(logLines, expectedError);\n+    }\n+\n+    @Test(description = \"Tests quoted identifier literal containing invalid escape characters\")\n+    public void testInvalidILEscapeChar() throws BallerinaTestException {\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String[] args = new String[]{invalidILEscapeCharactersFileName};\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", args, new HashMap<>(), testFileLocation, true);\n+        String[] logLines = output.split(\"\\n\");\n+        String expectedError = \"Compiling source\\n\" +\n+                \"\\tinvalid_IL_escape_char.bal\\n\" +\n+                \"error: .::invalid_IL_escape_char.bal:19:12: undefined symbol ''\";\n+\n+        assertErrorLines(logLines, expectedError);\n+    }\n+\n+    @Test(description = \"Tests quoted identifier literal containing invalid unicode characters\")\n+    public void testInvalidILUnicodeChar() throws BallerinaTestException {\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String[] args = new String[]{invalidILUnicodeCharactersFileName};\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", args, new HashMap<>(), testFileLocation, true);\n+        String[] logLines = output.split(\"\\n\");\n+        String expectedError = \"Compiling source\\n\" +\n+                \"\\tinvalid_IL_unicode_char.bal\\n\" +\n+                \"error: .::invalid_IL_unicode_char.bal:18:28: invalid token 'whiteSpace'\\n\" +\n+                \"error: .::invalid_IL_unicode_char.bal:19:17: missing plus token\\n\" +\n+                \"error: .::invalid_IL_unicode_char.bal:19:12: undefined symbol ''\\n\" +\n+                \"error: .::invalid_IL_unicode_char.bal:19:17: undefined symbol 'whiteSpace'\";\n+\n+        assertErrorLines(logLines, expectedError);\n+    }\n+\n+    @Test(description = \"Test using identifier literals in service and resource names\")\n+    public void testUsingIdentifierLiteralsInServiceAndResourceNames() throws IOException {\n+        HttpResponse response = HttpClientRequest.doGet(serverInstance.getServiceURLHttp(9090, \"identifierLiteral\" +\n+                \"/resource1\"));\n+        Assert.assertNotNull(response);\n+        Assert.assertEquals(response.getResponseCode(), 200, \"Response code mismatched\");\n+\n+        BValue bJson = JsonParser.parse(response.getData());\n+        Assert.assertTrue(bJson instanceof BMap);\n+        Assert.assertEquals(((BMap<String, BValue>) bJson).get(\"key\").stringValue(), \"keyVal\");\n+        Assert.assertEquals(((BMap<String, BValue>) bJson).get(\"value\").stringValue(), \"valueOfTheString\");\n+    }\n+\n+    @Test(description = \"Test identifier literals in payload\")\n+    public void testIdentifierLiteralsInPayload() throws IOException {\n+\n+        Map<String, String> headers = new HashMap<>();\n+        HttpResponse response = HttpClientRequest.doGet(serverInstance.getServiceURLHttp(9090, \"identifierLiteral\" +\n+                \"/resource2\"), headers);\n+        Assert.assertNotNull(response);\n+        Assert.assertEquals(response.getResponseCode(), 200, \"Response code mismatched\");\n+        Assert.assertEquals(response.getData(), \"hello\");\n+    }\n+\n+    @Test(description = \"Test accessing variable in other packages defined with identifier literal\")\n+    public void testAccessingVarsInOtherPackage() throws BallerinaTestException {\n+        Path projectPath = Paths.get(testFileLocation, \"TestProject\")\n+                .toAbsolutePath();\n+        String runLog = \"Values returned successfully\";\n+        LogLeecher runLeecher = new LogLeecher(runLog);\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        bMainInstance.runMain(projectPath.toString(), \"pkg.main\", new LogLeecher[]{runLeecher});\n+        Assert.assertEquals(runLeecher.isTextFound(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be54c492801109571e8d7784737fee1369748467"}, "originalPosition": 173}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1Njc0NDA1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-455674405", "createdAt": "2020-07-27T10:49:58Z", "commit": {"oid": "be54c492801109571e8d7784737fee1369748467"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0OTo1OVrOG3dYsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0OTo1OVrOG3dYsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNjMyMA==", "bodyText": "Missing new line at the end.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460806320", "createdAt": "2020-07-27T10:49:59Z", "author": {"login": "anupama-pathirage"}, "path": "tests/jballerina-integration-test/src/test/resources/identifier/TestProject/Ballerina.toml", "diffHunk": "@@ -0,0 +1,3 @@\n+[project]\n+org-name = \"expression-literal\"\n+version = \"1.0.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be54c492801109571e8d7784737fee1369748467"}, "originalPosition": 3}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be54c492801109571e8d7784737fee1369748467", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be54c492801109571e8d7784737fee1369748467", "committedDate": "2020-07-27T07:23:57Z", "message": "Add EOF line"}, "afterCommit": {"oid": "1599989086728ff2ca02bc169848cacc4c41ea16", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1599989086728ff2ca02bc169848cacc4c41ea16", "committedDate": "2020-07-27T11:34:28Z", "message": "modify inverted check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NDc3NTI5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-456477529", "createdAt": "2020-07-28T09:50:48Z", "commit": {"oid": "1599989086728ff2ca02bc169848cacc4c41ea16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo1MDo0OFrOG4FR_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo1MDo0OFrOG4FR_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1OTk2Ng==", "bodyText": "Can remove escapeQuotedIdentifier() method as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r461459966", "createdAt": "2020-07-28T09:50:48Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3930,9 +3930,6 @@ private BLangIdentifier createIdentifier(DiagnosticPos pos, String value, Set<Wh\n         }\n \n         if (value.startsWith(IDENTIFIER_LITERAL_PREFIX)) {\n-            if (!escapeQuotedIdentifier(value).matches(\"^[0-9a-zA-Z.]*$\")) {\n-                dlog.error(pos, DiagnosticCode.IDENTIFIER_LITERAL_ONLY_SUPPORTS_ALPHANUMERICS);\n-            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1599989086728ff2ca02bc169848cacc4c41ea16"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1599989086728ff2ca02bc169848cacc4c41ea16", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1599989086728ff2ca02bc169848cacc4c41ea16", "committedDate": "2020-07-27T11:34:28Z", "message": "modify inverted check"}, "afterCommit": {"oid": "f3be13f5bfaeeff91d7c0b4b7a5bb4913bc14488", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f3be13f5bfaeeff91d7c0b4b7a5bb4913bc14488", "committedDate": "2020-07-28T10:12:40Z", "message": "Remove unnecessary methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3be13f5bfaeeff91d7c0b4b7a5bb4913bc14488", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f3be13f5bfaeeff91d7c0b4b7a5bb4913bc14488", "committedDate": "2020-07-28T10:12:40Z", "message": "Remove unnecessary methods"}, "afterCommit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61c71e2e1beb190ab854e1aba70df93337886124", "committedDate": "2020-07-29T09:53:33Z", "message": "Remove variable name passing null for Identifier literals"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDIyODMw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-459022830", "createdAt": "2020-07-31T09:01:02Z", "commit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowMTowM1rOG6BVYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowMTowM1rOG6BVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5MjQ1MQ==", "bodyText": "Add space between function definition and {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r463492451", "createdAt": "2020-07-31T09:01:03Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-integration-test/src/test/resources/identifier/identifier_literal_positive.bal", "diffHunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const ASSERTION_ERR_REASON = \"AssertionError\";\n+\n+//initialize final variables\n+final float 'const_IL_123 = 77.80;\n+final float '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_IL = 88.90;\n+final float '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0188\u020f\u0273\u0282\u0288_IL = 99.10;\n+\n+//initialize global variables\n+string 'global_var_123 = \"IL with global var\";\n+string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var = \"IL with special characters in global var\";\n+string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0120\u013f\u0150\u0392\u0202\u026d_var = \"IL with unicode characters in global var\";\n+\n+\n+function testFinalVariableIL(){\n+    assertEquality(77.80,'const_IL_123);\n+    assertEquality(88.90,'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_IL);\n+    assertEquality(99.10,'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0188\u020f\u0273\u0282\u0288_IL);\n+}\n+\n+function testGlobalVariableIL(){\n+    assertEquality(\"IL with global var\",'global_var_123 );\n+    assertEquality(\"IL with special characters in global var\",'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var);\n+    assertEquality(\"IL with unicode characters in global var\",'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0120\u013f\u0150\u0392\u0202\u026d_var);\n+}\n+\n+function testLocalVariableIL(){\n+    string 'local_var_123 = 'global_var_123;\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_local_var = '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var;\n+    string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u026c\u022d\u03c2\u03b1\u0286_var = \"IL with unicode characters in local var\";\n+    assertEquality(\"IL with global var\",'local_var_123 );\n+    assertEquality(\"IL with special characters in global var\",'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_local_var);\n+    assertEquality(\"IL with unicode characters in local var\",'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u026c\u022d\u03c2\u03b1\u0286_var);\n+}\n+\n+type Person record {\n+    string '1st_name;\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name;\n+    int '\u0226\u0262\u03ad;\n+};\n+\n+function useILWithinStruct(){\n+    Person person = {'1st_name: \"Tom\", '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name:\"Hank\", '\u0226\u0262\u03ad: 50};\n+    assertEquality(\"Tom\",person.'1st_name);\n+    assertEquality(\"Hank\",person.'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name);\n+    assertEquality(50,person.'\u0226\u0262\u03ad);\n+}\n+\n+function useILInStructVar() {\n+    Person '\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\< =\n+    {'1st_name: \"Harry\", '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name:\"Potter\", '\u0226\u0262\u03ad: 22};\n+\n+    assertEquality(\"Harry\",'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'1st_name);\n+    assertEquality(\"Potter\",'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name);\n+    assertEquality(22,'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'\u0226\u0262\u03ad);\n+}\n+\n+type '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_Person record {\n+    string name;\n+};\n+\n+function useILInStructName(){\n+    '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_Person person = {name: \"Jack\"};\n+\n+    assertEquality(\"Jack\",person.name);\n+}\n+\n+function '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_IL_function(string val) returns (string) {\n+    string s = \" with IL function name\";\n+    return val + s;\n+}\n+\n+function testFunctionNameWithIL(){\n+     assertEquality(\"test with IL function name\", '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_IL_function(\"test\"));\n+}\n+\n+function passILValuesToFunction() {\n+    string '1st_Name = \"Bill\";\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_last_name = \"Kary\";\n+    int '\u0226\u0262\u03ad = 40;\n+\n+    string expected = \"first name :Bill, last name :Kary, age :40\";\n+    assertEquality(expected,passILValuesAsParams('1st_Name, '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_last_name, '\u0226\u0262\u03ad));\n+}\n+\n+function passILValuesAsParams(string '1st_Arg, string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_arg2, int '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_arg3)\n+returns (string) {\n+    string result = \"first name :\" + '1st_Arg +\n+    \", last name :\" + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_arg2 +\n+    \", age :\" + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_arg3.toString();\n+    return result;\n+}\n+\n+public type '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_\u01ae\u03ad\u015e\u0162_Connector client object {\n+    boolean action2Invoked = false;\n+\n+    public function init(string param1, string param2, int param3) {\n+\n+    }\n+\n+    public remote function action1() returns (string) {\n+        string 'sample_String_1 = \"this \";\n+        string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var = \"is \";\n+        string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var = \"action 1\";\n+        return 'sample_String_1 + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var ;\n+    }\n+\n+    public remote function '\\u2324_\\\"\\{\\ \\|\\\\\\!\\[\\#\\$\\;_\u01ae\u03ad\u015e\u0162_Action() returns (string){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDIzMzEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-459023313", "createdAt": "2020-07-31T09:01:47Z", "commit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowMTo0OFrOG6BW2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowMTo0OFrOG6BW2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5MjgyNw==", "bodyText": "remove brackets for returning one arg", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r463492827", "createdAt": "2020-07-31T09:01:48Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-integration-test/src/test/resources/identifier/identifier_literal_positive.bal", "diffHunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const ASSERTION_ERR_REASON = \"AssertionError\";\n+\n+//initialize final variables\n+final float 'const_IL_123 = 77.80;\n+final float '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_IL = 88.90;\n+final float '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0188\u020f\u0273\u0282\u0288_IL = 99.10;\n+\n+//initialize global variables\n+string 'global_var_123 = \"IL with global var\";\n+string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var = \"IL with special characters in global var\";\n+string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0120\u013f\u0150\u0392\u0202\u026d_var = \"IL with unicode characters in global var\";\n+\n+\n+function testFinalVariableIL(){\n+    assertEquality(77.80,'const_IL_123);\n+    assertEquality(88.90,'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_IL);\n+    assertEquality(99.10,'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0188\u020f\u0273\u0282\u0288_IL);\n+}\n+\n+function testGlobalVariableIL(){\n+    assertEquality(\"IL with global var\",'global_var_123 );\n+    assertEquality(\"IL with special characters in global var\",'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var);\n+    assertEquality(\"IL with unicode characters in global var\",'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0120\u013f\u0150\u0392\u0202\u026d_var);\n+}\n+\n+function testLocalVariableIL(){\n+    string 'local_var_123 = 'global_var_123;\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_local_var = '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var;\n+    string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u026c\u022d\u03c2\u03b1\u0286_var = \"IL with unicode characters in local var\";\n+    assertEquality(\"IL with global var\",'local_var_123 );\n+    assertEquality(\"IL with special characters in global var\",'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_local_var);\n+    assertEquality(\"IL with unicode characters in local var\",'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u026c\u022d\u03c2\u03b1\u0286_var);\n+}\n+\n+type Person record {\n+    string '1st_name;\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name;\n+    int '\u0226\u0262\u03ad;\n+};\n+\n+function useILWithinStruct(){\n+    Person person = {'1st_name: \"Tom\", '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name:\"Hank\", '\u0226\u0262\u03ad: 50};\n+    assertEquality(\"Tom\",person.'1st_name);\n+    assertEquality(\"Hank\",person.'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name);\n+    assertEquality(50,person.'\u0226\u0262\u03ad);\n+}\n+\n+function useILInStructVar() {\n+    Person '\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\< =\n+    {'1st_name: \"Harry\", '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name:\"Potter\", '\u0226\u0262\u03ad: 22};\n+\n+    assertEquality(\"Harry\",'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'1st_name);\n+    assertEquality(\"Potter\",'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name);\n+    assertEquality(22,'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'\u0226\u0262\u03ad);\n+}\n+\n+type '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_Person record {\n+    string name;\n+};\n+\n+function useILInStructName(){\n+    '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_Person person = {name: \"Jack\"};\n+\n+    assertEquality(\"Jack\",person.name);\n+}\n+\n+function '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_IL_function(string val) returns (string) {\n+    string s = \" with IL function name\";\n+    return val + s;\n+}\n+\n+function testFunctionNameWithIL(){\n+     assertEquality(\"test with IL function name\", '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_IL_function(\"test\"));\n+}\n+\n+function passILValuesToFunction() {\n+    string '1st_Name = \"Bill\";\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_last_name = \"Kary\";\n+    int '\u0226\u0262\u03ad = 40;\n+\n+    string expected = \"first name :Bill, last name :Kary, age :40\";\n+    assertEquality(expected,passILValuesAsParams('1st_Name, '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_last_name, '\u0226\u0262\u03ad));\n+}\n+\n+function passILValuesAsParams(string '1st_Arg, string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_arg2, int '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_arg3)\n+returns (string) {\n+    string result = \"first name :\" + '1st_Arg +\n+    \", last name :\" + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_arg2 +\n+    \", age :\" + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_arg3.toString();\n+    return result;\n+}\n+\n+public type '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_\u01ae\u03ad\u015e\u0162_Connector client object {\n+    boolean action2Invoked = false;\n+\n+    public function init(string param1, string param2, int param3) {\n+\n+    }\n+\n+    public remote function action1() returns (string) {\n+        string 'sample_String_1 = \"this \";\n+        string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var = \"is \";\n+        string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var = \"action 1\";\n+        return 'sample_String_1 + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var ;\n+    }\n+\n+    public remote function '\\u2324_\\\"\\{\\ \\|\\\\\\!\\[\\#\\$\\;_\u01ae\u03ad\u015e\u0162_Action() returns (string){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDIzOTI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-459023925", "createdAt": "2020-07-31T09:02:51Z", "commit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowMjo1MVrOG6BYtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowMjo1MVrOG6BYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5MzMwMw==", "bodyText": "no space before ;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r463493303", "createdAt": "2020-07-31T09:02:51Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-integration-test/src/test/resources/identifier/identifier_literal_positive.bal", "diffHunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const ASSERTION_ERR_REASON = \"AssertionError\";\n+\n+//initialize final variables\n+final float 'const_IL_123 = 77.80;\n+final float '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_IL = 88.90;\n+final float '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0188\u020f\u0273\u0282\u0288_IL = 99.10;\n+\n+//initialize global variables\n+string 'global_var_123 = \"IL with global var\";\n+string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var = \"IL with special characters in global var\";\n+string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0120\u013f\u0150\u0392\u0202\u026d_var = \"IL with unicode characters in global var\";\n+\n+\n+function testFinalVariableIL(){\n+    assertEquality(77.80,'const_IL_123);\n+    assertEquality(88.90,'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_IL);\n+    assertEquality(99.10,'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0188\u020f\u0273\u0282\u0288_IL);\n+}\n+\n+function testGlobalVariableIL(){\n+    assertEquality(\"IL with global var\",'global_var_123 );\n+    assertEquality(\"IL with special characters in global var\",'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var);\n+    assertEquality(\"IL with unicode characters in global var\",'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0120\u013f\u0150\u0392\u0202\u026d_var);\n+}\n+\n+function testLocalVariableIL(){\n+    string 'local_var_123 = 'global_var_123;\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_local_var = '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var;\n+    string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u026c\u022d\u03c2\u03b1\u0286_var = \"IL with unicode characters in local var\";\n+    assertEquality(\"IL with global var\",'local_var_123 );\n+    assertEquality(\"IL with special characters in global var\",'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_local_var);\n+    assertEquality(\"IL with unicode characters in local var\",'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u026c\u022d\u03c2\u03b1\u0286_var);\n+}\n+\n+type Person record {\n+    string '1st_name;\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name;\n+    int '\u0226\u0262\u03ad;\n+};\n+\n+function useILWithinStruct(){\n+    Person person = {'1st_name: \"Tom\", '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name:\"Hank\", '\u0226\u0262\u03ad: 50};\n+    assertEquality(\"Tom\",person.'1st_name);\n+    assertEquality(\"Hank\",person.'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name);\n+    assertEquality(50,person.'\u0226\u0262\u03ad);\n+}\n+\n+function useILInStructVar() {\n+    Person '\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\< =\n+    {'1st_name: \"Harry\", '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name:\"Potter\", '\u0226\u0262\u03ad: 22};\n+\n+    assertEquality(\"Harry\",'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'1st_name);\n+    assertEquality(\"Potter\",'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name);\n+    assertEquality(22,'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'\u0226\u0262\u03ad);\n+}\n+\n+type '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_Person record {\n+    string name;\n+};\n+\n+function useILInStructName(){\n+    '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_Person person = {name: \"Jack\"};\n+\n+    assertEquality(\"Jack\",person.name);\n+}\n+\n+function '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_IL_function(string val) returns (string) {\n+    string s = \" with IL function name\";\n+    return val + s;\n+}\n+\n+function testFunctionNameWithIL(){\n+     assertEquality(\"test with IL function name\", '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_IL_function(\"test\"));\n+}\n+\n+function passILValuesToFunction() {\n+    string '1st_Name = \"Bill\";\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_last_name = \"Kary\";\n+    int '\u0226\u0262\u03ad = 40;\n+\n+    string expected = \"first name :Bill, last name :Kary, age :40\";\n+    assertEquality(expected,passILValuesAsParams('1st_Name, '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_last_name, '\u0226\u0262\u03ad));\n+}\n+\n+function passILValuesAsParams(string '1st_Arg, string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_arg2, int '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_arg3)\n+returns (string) {\n+    string result = \"first name :\" + '1st_Arg +\n+    \", last name :\" + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_arg2 +\n+    \", age :\" + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_arg3.toString();\n+    return result;\n+}\n+\n+public type '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_\u01ae\u03ad\u015e\u0162_Connector client object {\n+    boolean action2Invoked = false;\n+\n+    public function init(string param1, string param2, int param3) {\n+\n+    }\n+\n+    public remote function action1() returns (string) {\n+        string 'sample_String_1 = \"this \";\n+        string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var = \"is \";\n+        string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var = \"action 1\";\n+        return 'sample_String_1 + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var ;\n+    }\n+\n+    public remote function '\\u2324_\\\"\\{\\ \\|\\\\\\!\\[\\#\\$\\;_\u01ae\u03ad\u015e\u0162_Action() returns (string){\n+        string 'sample_String_2 = \"this \";\n+        string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var2 = \"is \";\n+        string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var2 = \"action 2\";\n+        return 'sample_String_2 + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var2 + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var2 ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDI1MTM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-459025135", "createdAt": "2020-07-31T09:04:59Z", "commit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowNDo1OVrOG6BcjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowNDo1OVrOG6BcjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NDI4NQ==", "bodyText": "add test for worker interaction", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r463494285", "createdAt": "2020-07-31T09:04:59Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-integration-test/src/test/resources/identifier/identifier_literal_positive.bal", "diffHunk": "@@ -0,0 +1,183 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const ASSERTION_ERR_REASON = \"AssertionError\";\n+\n+//initialize final variables\n+final float 'const_IL_123 = 77.80;\n+final float '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_IL = 88.90;\n+final float '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0188\u020f\u0273\u0282\u0288_IL = 99.10;\n+\n+//initialize global variables\n+string 'global_var_123 = \"IL with global var\";\n+string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var = \"IL with special characters in global var\";\n+string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0120\u013f\u0150\u0392\u0202\u026d_var = \"IL with unicode characters in global var\";\n+\n+\n+function testFinalVariableIL(){\n+    assertEquality(77.80,'const_IL_123);\n+    assertEquality(88.90,'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_IL);\n+    assertEquality(99.10,'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0188\u020f\u0273\u0282\u0288_IL);\n+}\n+\n+function testGlobalVariableIL(){\n+    assertEquality(\"IL with global var\",'global_var_123 );\n+    assertEquality(\"IL with special characters in global var\",'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var);\n+    assertEquality(\"IL with unicode characters in global var\",'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u0120\u013f\u0150\u0392\u0202\u026d_var);\n+}\n+\n+function testLocalVariableIL(){\n+    string 'local_var_123 = 'global_var_123;\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_local_var = '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_global_var;\n+    string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u026c\u022d\u03c2\u03b1\u0286_var = \"IL with unicode characters in local var\";\n+    assertEquality(\"IL with global var\",'local_var_123 );\n+    assertEquality(\"IL with special characters in global var\",'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_local_var);\n+    assertEquality(\"IL with unicode characters in local var\",'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_\u026c\u022d\u03c2\u03b1\u0286_var);\n+}\n+\n+type Person record {\n+    string '1st_name;\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name;\n+    int '\u0226\u0262\u03ad;\n+};\n+\n+function useILWithinStruct(){\n+    Person person = {'1st_name: \"Tom\", '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name:\"Hank\", '\u0226\u0262\u03ad: 50};\n+    assertEquality(\"Tom\",person.'1st_name);\n+    assertEquality(\"Hank\",person.'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name);\n+    assertEquality(50,person.'\u0226\u0262\u03ad);\n+}\n+\n+function useILInStructVar() {\n+    Person '\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\< =\n+    {'1st_name: \"Harry\", '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name:\"Potter\", '\u0226\u0262\u03ad: 22};\n+\n+    assertEquality(\"Harry\",'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'1st_name);\n+    assertEquality(\"Potter\",'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\/\\{\\\"\\:\\<\\>\\u2324_last_name);\n+    assertEquality(22,'\u01ae\u03ad\u015e\u0162_Person_\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<.'\u0226\u0262\u03ad);\n+}\n+\n+type '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_Person record {\n+    string name;\n+};\n+\n+function useILInStructName(){\n+    '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_Person person = {name: \"Jack\"};\n+\n+    assertEquality(\"Jack\",person.name);\n+}\n+\n+function '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_IL_function(string val) returns (string) {\n+    string s = \" with IL function name\";\n+    return val + s;\n+}\n+\n+function testFunctionNameWithIL(){\n+     assertEquality(\"test with IL function name\", '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_123_\u01ae\u03ad\u015e\u0162_IL_function(\"test\"));\n+}\n+\n+function passILValuesToFunction() {\n+    string '1st_Name = \"Bill\";\n+    string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_last_name = \"Kary\";\n+    int '\u0226\u0262\u03ad = 40;\n+\n+    string expected = \"first name :Bill, last name :Kary, age :40\";\n+    assertEquality(expected,passILValuesAsParams('1st_Name, '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_last_name, '\u0226\u0262\u03ad));\n+}\n+\n+function passILValuesAsParams(string '1st_Arg, string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_arg2, int '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_arg3)\n+returns (string) {\n+    string result = \"first name :\" + '1st_Arg +\n+    \", last name :\" + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_arg2 +\n+    \", age :\" + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_arg3.toString();\n+    return result;\n+}\n+\n+public type '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_\u01ae\u03ad\u015e\u0162_Connector client object {\n+    boolean action2Invoked = false;\n+\n+    public function init(string param1, string param2, int param3) {\n+\n+    }\n+\n+    public remote function action1() returns (string) {\n+        string 'sample_String_1 = \"this \";\n+        string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var = \"is \";\n+        string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var = \"action 1\";\n+        return 'sample_String_1 + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var ;\n+    }\n+\n+    public remote function '\\u2324_\\\"\\{\\ \\|\\\\\\!\\[\\#\\$\\;_\u01ae\u03ad\u015e\u0162_Action() returns (string){\n+        string 'sample_String_2 = \"this \";\n+        string '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var2 = \"is \";\n+        string '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var2 = \"action 2\";\n+        return 'sample_String_2 + '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_var2 + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_var2 ;\n+    }\n+};\n+\n+function testConnectorNameWithIL(){\n+    '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_\u01ae\u03ad\u015e\u0162_Connector testConnector = new(\"MyParam1\", \"MyParam2\", 5);\n+    string value = testConnector->action1();\n+    assertEquality(\"this is action 1\", value);\n+}\n+\n+function testConnectorActionWithIL(){\n+    '\\\\\\|\\ \\!\\#\\$\\.\\[\\;\\{\\\"\\:\\<\\>\\u2324_\u01ae\u03ad\u015e\u0162_Connector testConnector = new(\"MyParam1\", \"MyParam2\", 5);\n+    string value = testConnector->'\\u2324_\\\"\\{\\ \\|\\\\\\!\\[\\#\\$\\;_\u01ae\u03ad\u015e\u0162_Action();\n+    assertEquality(\"this is action 2\", value);\n+}\n+\n+function useILAsArrayIndex() {\n+    float[] '\\u2324\\ \\!\\$\\.\\[\\;\\:\\<_\u01ae\u03ad\u015e\u0162_Array = [234.0, 8834.834, 88.0];\n+    int '\\u2324\\ \\!\\$\\.\\[\\;\\:\\<_\u01ae\u03ad\u015e\u0162_Array_index = 1;\n+    float value = '\\u2324\\ \\!\\$\\.\\[\\;\\:\\<_\u01ae\u03ad\u015e\u0162_Array ['\\u2324\\ \\!\\$\\.\\[\\;\\:\\<_\u01ae\u03ad\u015e\u0162_Array_index];\n+    assertEquality(8834.834, value);\n+}\n+\n+function useILAsWorkerName(){\n+     worker '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_\u01ae\u03ad\u015e\u0162_Worker returns (string) {\n+         string 'var1_\\!\\$\\.\\[\\;\\:\\<_\u01ae\u03ad\u015e\u0162 = \"sample result\";\n+         return \"this is a \" + 'var1_\\!\\$\\.\\[\\;\\:\\<_\u01ae\u03ad\u015e\u0162;\n+     }\n+     string result  = wait '\\u2324\\ 1\\!\\$\\.\\[\\;\\:\\<_\u01ae\u03ad\u015e\u0162_Worker;\n+     assertEquality(\"this is a sample result\", result);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDI3Mjk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-459027296", "createdAt": "2020-07-31T09:08:40Z", "commit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowODo0MFrOG6BjRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowODo0MFrOG6BjRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NjAwNA==", "bodyText": "check without giving paths", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r463496004", "createdAt": "2020-07-31T09:08:40Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-integration-test/src/test/resources/identifier/identifier_literal_service.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+\n+listener http:Listener testEP = new(9090);\n+\n+@http:ServiceConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61c71e2e1beb190ab854e1aba70df93337886124", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61c71e2e1beb190ab854e1aba70df93337886124", "committedDate": "2020-07-29T09:53:33Z", "message": "Remove variable name passing null for Identifier literals"}, "afterCommit": {"oid": "cc295336df4fcd92872988e6e853a993dd233e4f", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc295336df4fcd92872988e6e853a993dd233e4f", "committedDate": "2020-08-04T14:07:33Z", "message": "Add parser tests and fix checkstyle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80da0dce784c13700947461129632591df2f5af5", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/80da0dce784c13700947461129632591df2f5af5", "committedDate": "2020-08-12T11:35:26Z", "message": "Add support for unicode IL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b02890d5e72671c4900e932d5a9fb7a1f904442b", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b02890d5e72671c4900e932d5a9fb7a1f904442b", "committedDate": "2020-08-12T11:35:26Z", "message": "Add and improve tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7fd052fbdc8b80d267e6e117ce3bd62b45e409a", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7fd052fbdc8b80d267e6e117ce3bd62b45e409a", "committedDate": "2020-08-12T11:35:26Z", "message": "Add EOF line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5f55d126f618a3f3967b6ed2903ad18dd64d602", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5f55d126f618a3f3967b6ed2903ad18dd64d602", "committedDate": "2020-08-12T11:35:26Z", "message": "Fix Character max value error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "802f153bddfa3bc86d5e0c5f8e01cce1ba369c09", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/802f153bddfa3bc86d5e0c5f8e01cce1ba369c09", "committedDate": "2020-08-12T11:35:26Z", "message": "modify inverted check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12bf2785a2e1dbcaa7a1c2f41881ad3567abbd84", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/12bf2785a2e1dbcaa7a1c2f41881ad3567abbd84", "committedDate": "2020-08-12T11:35:26Z", "message": "Remove unnecessary methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "160169b9df8bdc27fd955d505ffa8933b81350f5", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/160169b9df8bdc27fd955d505ffa8933b81350f5", "committedDate": "2020-08-12T11:35:26Z", "message": "Remove variable name passing null for Identifier literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89399ec0c76d9f4b487cb8090af5648eef91aaa0", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89399ec0c76d9f4b487cb8090af5648eef91aaa0", "committedDate": "2020-08-12T11:35:26Z", "message": "Add parser tests and fix checkstyle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba6e68b1f247e5673ad6e7112c4cf3e689f7da0e", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba6e68b1f247e5673ad6e7112c4cf3e689f7da0e", "committedDate": "2020-08-12T11:35:26Z", "message": "Fix worker interaction, unicode codepoints"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3137a79815d4fff8af3a3bdc6edd13c2a78fa2df", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3137a79815d4fff8af3a3bdc6edd13c2a78fa2df", "committedDate": "2020-08-12T11:31:20Z", "message": "Merge remote-tracking branch 'hindu-ssh/fix-#18720' into fix-#18720\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n#\tcompiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/IdentifierLiteralTest.java\n#\ttests/jballerina-integration-test/src/test/java/org/ballerinalang/test/identifier/IdentifierLiteralTestCase.java\n#\ttests/jballerina-integration-test/src/test/resources/identifier/TestProject/src/pkg.main/identifier-literal-pkg.bal\n#\ttests/jballerina-integration-test/src/test/resources/identifier/TestProject/src/pkg.variable/variable-def.bal\n#\ttests/jballerina-integration-test/src/test/resources/identifier/identifier_literal_positive.bal\n#\ttests/jballerina-integration-test/src/test/resources/identifier/identifier_literal_service.bal"}, "afterCommit": {"oid": "ba6e68b1f247e5673ad6e7112c4cf3e689f7da0e", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba6e68b1f247e5673ad6e7112c4cf3e689f7da0e", "committedDate": "2020-08-12T11:35:26Z", "message": "Fix worker interaction, unicode codepoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f6e25e8ca58963af86710fc36ecc83b38fac5b0", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f6e25e8ca58963af86710fc36ecc83b38fac5b0", "committedDate": "2020-08-12T11:51:01Z", "message": "Add EOF lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "491041c48d42c85786e040b8d34feae929a4d3b5", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/491041c48d42c85786e040b8d34feae929a4d3b5", "committedDate": "2020-08-12T12:31:43Z", "message": "Modify parser tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTQxNTA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-465941506", "createdAt": "2020-08-12T13:56:46Z", "commit": {"oid": "491041c48d42c85786e040b8d34feae929a4d3b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTI2NzM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#pullrequestreview-466126734", "createdAt": "2020-08-12T17:29:36Z", "commit": {"oid": "491041c48d42c85786e040b8d34feae929a4d3b5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3718, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}