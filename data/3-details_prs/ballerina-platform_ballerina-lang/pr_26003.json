{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNzM3Nzgw", "number": 26003, "title": "Capture dependencies of global variables", "bodyText": "Purpose\n\nATM we lock the reference only when we use a ballerina lock statement. Hence, when we optimize ballerina locks, we miss the information regarding shared references to a single value.\nThis PR will fix the bug\n\nFixes #25216\nApproach\n\nIn the Dataflow analysis phase, capture the dependencies of global variables.\nIf any dependencies found, irrespective of whether a code branch will use or modify the reference, we use that info in the optimisation phase.\n\nSamples\nint[] values = [];\nint[] numbers = values;\n\npublic function main() {\n    process();\n    io:println(\"final array size - \", values.length());\n}\n\nfunction process() {\n    @strand {thread: \"any\"}\n    worker w1 {\n        foreach var i in 1 ... 1000 {\n            lock {\n\t\t        values[values.length()] = 1;\n            }\n        }\n    }\n\n    @strand {thread: \"any\"}\n    worker w2 {\n        foreach var i in 1 ... 1000 {\n            lock {\n\t\t        values[values.length()] = 1;\n            }\n        }\n    }\n    var result = wait {w1, w2, w3, w4};\n}\n\nRemarks\n\nN/A\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-09-22T07:08:03Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003", "merged": true, "mergeCommit": {"oid": "ad562132eecd00eb1ef3d4e7b188d0125541db1e"}, "closed": true, "closedAt": "2020-10-20T16:57:48Z", "author": {"login": "dulvinw"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLSbjFgH2gAyNDkwNzM3NzgwOjIxMzBjYmU1OTk2ZGJjMjZjMjVkY2YzNTJmYzM2ZWE2Y2Q3M2E2MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUbx47gFqTUxMjk0NTY4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2130cbe5996dbc26c25dcf352fc36ea6cd73a609", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2130cbe5996dbc26c25dcf352fc36ea6cd73a609", "committedDate": "2020-09-22T06:58:47Z", "message": "Capture dependencies of global variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07650f3b5904e3460cd4800b2df0eea7590ce339", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07650f3b5904e3460cd4800b2df0eea7590ce339", "committedDate": "2020-09-23T05:55:30Z", "message": "Improve tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a50429c7a3c075fb732de443ec938c14eff98766", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a50429c7a3c075fb732de443ec938c14eff98766", "committedDate": "2020-09-22T06:58:09Z", "message": "Capture dependencies of global variables"}, "afterCommit": {"oid": "07650f3b5904e3460cd4800b2df0eea7590ce339", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07650f3b5904e3460cd4800b2df0eea7590ce339", "committedDate": "2020-09-23T05:55:30Z", "message": "Improve tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf", "committedDate": "2020-10-06T06:22:19Z", "message": "Refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e002f32fd7147935f823510ec36c44012c58d7a", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e002f32fd7147935f823510ec36c44012c58d7a", "committedDate": "2020-09-28T08:48:34Z", "message": "Refactor"}, "afterCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf", "committedDate": "2020-10-06T06:22:19Z", "message": "Refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNTQ4ODkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#pullrequestreview-503548891", "createdAt": "2020-10-07T06:06:04Z", "commit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjowNjowNVrOHdj0Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTo1MzoxNFrOHdvkig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NzU0Ng==", "bodyText": "Can ignore the return values, right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BValue[] returns = BRunUtil.invoke(parallelCompileResult, \"testLocksWhenGlobalVariablesReferToSameValue\");\n          \n          \n            \n                    BRunUtil.invoke(parallelCompileResult, \"testLocksWhenGlobalVariablesReferToSameValue\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500757546", "createdAt": "2020-10-07T06:06:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/lock/LocksInMainTest.java", "diffHunk": "@@ -279,8 +279,23 @@ public void testParallelRunWithRecursiveInvocationDependencies() {\n     @Test(description = \"Test for parallel run when invocations are imported and contains global var dependencies\")\n     public void testParallelRunWithImportInvocationDependencies() {\n         CompileResult importInvocationDependencies = BCompileUtil.compile(\"test-src/lock/locks-in-imports-test\",\n-                \"mod1\", true);\n+                                                                          \"mod1\", true);\n \n         BRunUtil.invoke(importInvocationDependencies, \"testLockWIthInvokableChainsAccessingGlobal\");\n     }\n+\n+    @Test(description = \"Test for locks on global references\")\n+    public void testLocksWhenGlobalVariablesReferToSameValue() {\n+        BValue[] returns = BRunUtil.invoke(parallelCompileResult, \"testLocksWhenGlobalVariablesReferToSameValue\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1Nzg4Ng==", "bodyText": "What about calling this\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public boolean addAllLockVariable(Set<BVarSymbol> variables) {\n          \n          \n            \n                    public boolean addLockVariables(Set<BVarSymbol> variables) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500757886", "createdAt": "2020-10-07T06:07:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangLock.java", "diffHunk": "@@ -108,6 +108,10 @@ public String toString() {\n         public boolean addLockVariable(BVarSymbol variable) {\n             return lockVariables.add(variable);\n         }\n+\n+        public boolean addAllLockVariable(Set<BVarSymbol> variables) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2Njk0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Hold global variable dependencies identified from DataflowAnalyzer\n          \n          \n            \n                // Hold global variable dependencies identified in DataflowAnalyzer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500766947", "createdAt": "2020-10-07T06:31:21Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangPackage.java", "diffHunk": "@@ -72,6 +74,9 @@\n     public Queue<BLangLambdaFunction> lambdaFunctions = new ArrayDeque<>();\n     public List<BLangClassDefinition> classDefinitions;\n \n+    // Hold global variable dependencies identified from DataflowAnalyzer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTUwMA==", "bodyText": "Formatting seems off.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500829500", "createdAt": "2020-10-07T08:26:57Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/lock/parallel-run-lock.bal", "diffHunk": "@@ -194,3 +194,138 @@ function testLockWIthInvokableRecursiveAccessGlobal() {\n         panic error(\"Invalid Value\");\n     }\n }\n+\n+int[] values = [];\n+int[] numbers = values;\n+\n+function testLocksWhenGlobalVariablesReferToSameValue() {\n+    @strand {thread: \"any\"}\n+    worker w1 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        values[values.length()] = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzMTE2MQ==", "bodyText": "Is this check and message correct?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500831161", "createdAt": "2020-10-07T08:29:33Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/lock/parallel-run-lock.bal", "diffHunk": "@@ -194,3 +194,138 @@ function testLockWIthInvokableRecursiveAccessGlobal() {\n         panic error(\"Invalid Value\");\n     }\n }\n+\n+int[] values = [];\n+int[] numbers = values;\n+\n+function testLocksWhenGlobalVariablesReferToSameValue() {\n+    @strand {thread: \"any\"}\n+    worker w1 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        values[values.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w2 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        values[values.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w3 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        values[values.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w4 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        numbers[numbers.length()] = 1;\n+            }\n+        }\n+    }\n+    var result = wait {w1, w2, w3, w4};\n+\n+    int length = numbers.length();\n+    if ( length != 4000) {\n+        panic error(\"Expected 4000, but found \" + length.toString());\n+    }\n+\n+}\n+\n+int[] ref = [];\n+int[] toBeUpdateRef = ref;\n+function testForGlobalRefUpdateInsideWorker() {\n+    ref.removeAll();\n+    toBeUpdateRef.removeAll();\n+\n+    @strand {thread: \"any\"}\n+    worker w1 {\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                ref[ref.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w2 {\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                ref[ref.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w3 {\n+        toBeUpdateRef = [];\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                toBeUpdateRef[toBeUpdateRef.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    runtime:sleep(250);\n+    if (toBeUpdateRef.length() == 100 && ref.length() == 200) {\n+        panic error(\"Invalid value 1000 recieved in \\\"testForGlobalRefUpdateInsideWorker\\\"\");\n+    }\n+}\n+\n+int[] refConditional = [];\n+int[] toBeUpdateRefConditional = refConditional;\n+function testForGlobalRefUpdateInsideConditional() {\n+    boolean updateRef = true;\n+\n+    @strand {thread: \"any\"}\n+    worker w1 {\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                refConditional[refConditional.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w2 {\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                refConditional[refConditional.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w3 {\n+        if (updateRef) {\n+            toBeUpdateRefConditional = [];\n+        }\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                toBeUpdateRefConditional[toBeUpdateRefConditional.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    runtime:sleep(250);\n+    if (toBeUpdateRefConditional.length() == 100 && refConditional.length() == 200) {\n+        panic error(\"Invalid value 1000 recieved in \\\"testForGlobalRefUpdateInsideConditional\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzNTMwMQ==", "bodyText": "Can we access this via env.enclPkg when visiting BLangSimpleVarRef instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500835301", "createdAt": "2020-10-07T08:35:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -393,6 +396,7 @@ public BLangPackage perform(BLangPackage pkgNode) {\n         // Initialize the annotation map\n         annotationDesugar.initializeAnnotationMap(pkgNode);\n         SymbolEnv env = this.symTable.pkgEnvMap.get(pkgNode.symbol);\n+        this.globalVariablesDependsOn = pkgNode.globalVariableDependsOn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MDE1NA==", "bodyText": "Can't we just call this globalVariableDependencies?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500950154", "createdAt": "2020-10-07T11:53:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangPackage.java", "diffHunk": "@@ -72,6 +74,9 @@\n     public Queue<BLangLambdaFunction> lambdaFunctions = new ArrayDeque<>();\n     public List<BLangClassDefinition> classDefinitions;\n \n+    // Hold global variable dependencies identified from DataflowAnalyzer\n+    public Map<BSymbol, Set<BVarSymbol>> globalVariableDependsOn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c89cfe3ce527ce25d7b082eb30ff9895d82773cd", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c89cfe3ce527ce25d7b082eb30ff9895d82773cd", "committedDate": "2020-10-20T04:53:33Z", "message": "Add review suggestions\n\nNo functional changes. Improved code formatting along with review suggestions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyOTQ1Njg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#pullrequestreview-512945689", "createdAt": "2020-10-20T16:57:39Z", "commit": {"oid": "c89cfe3ce527ce25d7b082eb30ff9895d82773cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4640, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}