{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MjkzNTI0", "number": 24691, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1MTo1OVrOEOq5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0MDowM1rOEOsJOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODE4NDEzOnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1MTo1OVrOGx8ofA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjowMToyMFrOGybPDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNjgxMg==", "bodyText": "can this headers be null?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24691#discussion_r455026812", "createdAt": "2020-07-15T12:51:59Z", "author": {"login": "chamil321"}, "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketUtil.java", "diffHunk": "@@ -502,12 +500,31 @@ public static void populateClientConnectorConfig(MapValue<BString, Object> clien\n                 clientEndpointConfig.getBooleanValue(WebSocketConstants.COMPRESSION_ENABLED_CONFIG));\n     }\n \n-    private static Map<String, String> getCustomHeaders(MapValue<BString, Object> headers) {\n+    private static void populateCustomHeaders(MapValue<BString, Object> clientEndpointConfig,\n+                                              WebSocketClientConnectorConfig clientConnectorConfig) {\n         Map<String, String> customHeaders = new HashMap<>();\n-        headers.entrySet().forEach(\n-                entry -> customHeaders.put(entry.getKey().getValue(), headers.get(entry.getKey()).toString())\n-        );\n-        return customHeaders;\n+        @SuppressWarnings(WebSocketConstants.UNCHECKED)\n+        MapValue<BString, Object> headers = (MapValue<BString, Object>) clientEndpointConfig.getMapValue(\n+                WebSocketConstants.CLIENT_CUSTOM_HEADERS_CONFIG);\n+        if (!headers.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1b034c996bbfbe135ad4178aa813a05a5e950b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyODIwNQ==", "bodyText": "Yes, It can be null as it gets from the WebSocket config", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24691#discussion_r455528205", "createdAt": "2020-07-16T06:01:20Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/websocket/WebSocketUtil.java", "diffHunk": "@@ -502,12 +500,31 @@ public static void populateClientConnectorConfig(MapValue<BString, Object> clien\n                 clientEndpointConfig.getBooleanValue(WebSocketConstants.COMPRESSION_ENABLED_CONFIG));\n     }\n \n-    private static Map<String, String> getCustomHeaders(MapValue<BString, Object> headers) {\n+    private static void populateCustomHeaders(MapValue<BString, Object> clientEndpointConfig,\n+                                              WebSocketClientConnectorConfig clientConnectorConfig) {\n         Map<String, String> customHeaders = new HashMap<>();\n-        headers.entrySet().forEach(\n-                entry -> customHeaders.put(entry.getKey().getValue(), headers.get(entry.getKey()).toString())\n-        );\n-        return customHeaders;\n+        @SuppressWarnings(WebSocketConstants.UNCHECKED)\n+        MapValue<BString, Object> headers = (MapValue<BString, Object>) clientEndpointConfig.getMapValue(\n+                WebSocketConstants.CLIENT_CUSTOM_HEADERS_CONFIG);\n+        if (!headers.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNjgxMg=="}, "originalCommit": {"oid": "ca1b034c996bbfbe135ad4178aa813a05a5e950b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODIzMDczOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/websocket/src/wsservices/37_cookie_client.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzowNDoxMVrOGx9FPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTo0NjozN1rOGya87Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNDE3Mw==", "bodyText": "Why do we need to access payload here as we use getCookies() API to access cookies?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24691#discussion_r455034173", "createdAt": "2020-07-15T13:04:11Z", "author": {"login": "chamil321"}, "path": "tests/jballerina-integration-test/src/test/resources/websocket/src/wsservices/37_cookie_client.bal", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+\n+http:ClientConfiguration clientEPConfig = {\n+    cookieConfig: {\n+        enabled: true\n+    }\n+};\n+\n+@http:WebSocketServiceConfig {\n+}\n+service on new http:Listener(21037) {\n+\n+    resource function onOpen(http:WebSocketCaller wsEp) {\n+        http:Client httpClient = new(\"http://localhost:21036/cookie-demo\", clientEPConfig);\n+\n+        http:Request request = new;\n+\n+        json jsonPart = {\n+            name: \"John\",\n+            password: \"p@ssw0rd\"\n+        };\n+        request.setJsonPayload(jsonPart);\n+\n+        var loginResp = httpClient->post(\"/login\", request);\n+\n+        if (loginResp is http:Response) {\n+            string|error loginMessage = loginResp.getTextPayload();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1b034c996bbfbe135ad4178aa813a05a5e950b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyMzU2NQ==", "bodyText": "If the server accepts the login request, it will set the string payload in the response. So here, we check whether getting that string in the payload or not", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24691#discussion_r455523565", "createdAt": "2020-07-16T05:46:37Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "tests/jballerina-integration-test/src/test/resources/websocket/src/wsservices/37_cookie_client.bal", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+\n+http:ClientConfiguration clientEPConfig = {\n+    cookieConfig: {\n+        enabled: true\n+    }\n+};\n+\n+@http:WebSocketServiceConfig {\n+}\n+service on new http:Listener(21037) {\n+\n+    resource function onOpen(http:WebSocketCaller wsEp) {\n+        http:Client httpClient = new(\"http://localhost:21036/cookie-demo\", clientEPConfig);\n+\n+        http:Request request = new;\n+\n+        json jsonPart = {\n+            name: \"John\",\n+            password: \"p@ssw0rd\"\n+        };\n+        request.setJsonPayload(jsonPart);\n+\n+        var loginResp = httpClient->post(\"/login\", request);\n+\n+        if (loginResp is http:Response) {\n+            string|error loginMessage = loginResp.getTextPayload();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNDE3Mw=="}, "originalCommit": {"oid": "ca1b034c996bbfbe135ad4178aa813a05a5e950b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODIzODYwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/websocket/src/wsservices/38_incorrect_cookie.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzowNjowNVrOGx9J7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTo0NjozOVrOGya88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNTM3Mg==", "bodyText": "Here also, do we need the payload?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24691#discussion_r455035372", "createdAt": "2020-07-15T13:06:05Z", "author": {"login": "chamil321"}, "path": "tests/jballerina-integration-test/src/test/resources/websocket/src/wsservices/38_incorrect_cookie.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+\n+http:ClientConfiguration clientConfig = {\n+    cookieConfig: {\n+        enabled: true\n+    }\n+};\n+\n+@http:WebSocketServiceConfig {\n+}\n+service on new http:Listener(21038) {\n+\n+    resource function onOpen(http:WebSocketCaller wsEp) {\n+        http:Client httpClient = new(\"http://localhost:21036/cookie-demo\", clientConfig);\n+\n+        http:Request request = new;\n+\n+        json jsonPart = {\n+            name: \"John\",\n+            password: \"p@ssw0rd\"\n+        };\n+        request.setJsonPayload(jsonPart);\n+\n+        var loginResp = httpClient->post(\"/login\", request);\n+\n+        if (loginResp is http:Response) {\n+            string|error loginMessage = loginResp.getTextPayload();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1b034c996bbfbe135ad4178aa813a05a5e950b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyMzU3MA==", "bodyText": "If the server accepts the login request, it will set the string payload in the response. So here, we check whether getting that string in the payload or not", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24691#discussion_r455523570", "createdAt": "2020-07-16T05:46:39Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "tests/jballerina-integration-test/src/test/resources/websocket/src/wsservices/38_incorrect_cookie.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+\n+http:ClientConfiguration clientConfig = {\n+    cookieConfig: {\n+        enabled: true\n+    }\n+};\n+\n+@http:WebSocketServiceConfig {\n+}\n+service on new http:Listener(21038) {\n+\n+    resource function onOpen(http:WebSocketCaller wsEp) {\n+        http:Client httpClient = new(\"http://localhost:21036/cookie-demo\", clientConfig);\n+\n+        http:Request request = new;\n+\n+        json jsonPart = {\n+            name: \"John\",\n+            password: \"p@ssw0rd\"\n+        };\n+        request.setJsonPayload(jsonPart);\n+\n+        var loginResp = httpClient->post(\"/login\", request);\n+\n+        if (loginResp is http:Response) {\n+            string|error loginMessage = loginResp.getTextPayload();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNTM3Mg=="}, "originalCommit": {"oid": "ca1b034c996bbfbe135ad4178aa813a05a5e950b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODM4Nzc4OnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/websocket/websocket_client.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0MDowM1rOGx-m3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTo0ODozMFrOGya--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1OTE2Nw==", "bodyText": "Shall we make the cookies  an array of Cookie rather than having it as a  map<string>", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24691#discussion_r455059167", "createdAt": "2020-07-15T13:40:03Z", "author": {"login": "chamil321"}, "path": "stdlib/http/src/main/ballerina/src/http/websocket/websocket_client.bal", "diffHunk": "@@ -201,7 +223,7 @@ public type WebSocketClientConfiguration record {|\n     int maxFrameSize = 0;\n     boolean webSocketCompressionEnabled = true;\n     int handShakeTimeoutInSeconds = 300;\n-    WebSocketRetryConfig retryConfig?;\n+    map<string> cookies?;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca1b034c996bbfbe135ad4178aa813a05a5e950b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyNDA4OA==", "bodyText": "Fixed in  #24770", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24691#discussion_r455524088", "createdAt": "2020-07-16T05:48:30Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/http/src/main/ballerina/src/http/websocket/websocket_client.bal", "diffHunk": "@@ -201,7 +223,7 @@ public type WebSocketClientConfiguration record {|\n     int maxFrameSize = 0;\n     boolean webSocketCompressionEnabled = true;\n     int handShakeTimeoutInSeconds = 300;\n-    WebSocketRetryConfig retryConfig?;\n+    map<string> cookies?;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1OTE2Nw=="}, "originalCommit": {"oid": "ca1b034c996bbfbe135ad4178aa813a05a5e950b"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3252, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}