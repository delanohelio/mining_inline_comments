{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNjAzNzQ5", "number": 23473, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOTowMzoxOVrOEE_MEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyNjoyMlrOEGMqsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjY1MDQyOnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOTowMzoxOVrOGi8stQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwOToyNTowMFrOGi9U8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5OTI1Mw==", "bodyText": "@daneshk please help review if this change is okay.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439299253", "createdAt": "2020-06-12T09:03:19Z", "author": {"login": "KRVPerera"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -59,7 +59,7 @@ public annotation GrpcResourceConfig ResourceConfig on resource function;\n # + descMap - Service dependent descriptor map, which should be set at the compile time\n public type ServiceDescriptorData record {|\n     string descriptor = \"\";\n-    map<any> descMap = {};\n+    map<anydata> descMap = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399aa1df81e6123697253922092c62d730ef4956"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMwOTU1NQ==", "bodyText": "yes, it's okay", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439309555", "createdAt": "2020-06-12T09:25:00Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -59,7 +59,7 @@ public annotation GrpcResourceConfig ResourceConfig on resource function;\n # + descMap - Service dependent descriptor map, which should be set at the compile time\n public type ServiceDescriptorData record {|\n     string descriptor = \"\";\n-    map<any> descMap = {};\n+    map<anydata> descMap = {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5OTI1Mw=="}, "originalCommit": {"oid": "399aa1df81e6123697253922092c62d730ef4956"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDgwNzczOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNDoxMzowMVrOGjisHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNDoxMzowMVrOGjisHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkyMTY5Mw==", "bodyText": "@aashikam Would you please check changes on rabbitmq_commons.bal", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439921693", "createdAt": "2020-06-15T04:13:01Z", "author": {"login": "KRVPerera"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -68,7 +68,7 @@ public type QueueConfiguration record {|\n     boolean durable = false;\n     boolean exclusive = false;\n     boolean autoDelete = true;\n-    map<any>? arguments = ();\n+    map<anydata>? arguments = ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a6c99f873cd33594041c39f7325da39f1fd950"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDg4MDc5OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/annotations/AnnotationAttachmentsCompletionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTowODo1N1rOGjjXFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTowODo1N1rOGjjXFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzMjY5NA==", "bodyText": "Tracking issue: #24131", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439932694", "createdAt": "2020-06-15T05:08:57Z", "author": {"login": "KRVPerera"}, "path": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/annotations/AnnotationAttachmentsCompletionTest.java", "diffHunk": "@@ -47,12 +47,12 @@ public void loadAnnotationCache() {\n //                {\"annotationAccessExpression4.json\", \"annotation\"},\n                 {\"annotationAccessExpression5.json\", \"annotation\"},\n                 {\"annotationAccessExpression6.json\", \"annotation\"},\n-                {\"annotationBodyCompletion1.json\", \"annotation\"},\n-                {\"annotationBodyCompletion2.json\", \"annotation\"},\n+//                {\"annotationBodyCompletion1.json\", \"annotation\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDkwNjM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyNjowMlrOGjjmVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyNjowMlrOGjjmVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNjU5Nw==", "bodyText": "Shouldn't we pass (BLangInvocation) expr itself to isCompileTimeAnnotationValue and add a case there to check the return type?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439936597", "createdAt": "2020-06-15T05:26:02Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -608,11 +608,12 @@ public void visit(BLangAnnotationAttachment astAnnotAttach) {\n     }\n \n     private boolean isCompileTimeAnnotationValue(BLangExpression expr) {\n-        // TODO Compile time literal constants\n         switch (expr.getKind()) {\n             case LITERAL:\n             case NUMERIC_LITERAL:\n                 return true;\n+            case INVOCATION:\n+                return isCompileTimeAnnotationValue(((BLangInvocation) expr).expr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDkwOTk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyODoyNFrOGjjoeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTowODozOVrOGkLaqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng==", "bodyText": "Isn't this method only called for constants? What kind of invocations do we get here for? I assume the return type has to be a constant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439937146", "createdAt": "2020-06-15T05:28:24Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -668,6 +669,8 @@ private BIRAnnotationValue createAnnotationValue(BLangExpression expr) {\n                 return createAnnotationValue(((BLangTypeConversionExpr) expr).expr);\n             case STATEMENT_EXPRESSION:\n                 return createAnnotationRecordValue((BLangStatementExpression) expr);\n+            case INVOCATION:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzODQzNQ==", "bodyText": "Here also, I'm not sure if working with ((BLangInvocation) expr).expr is the correct approach.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439938435", "createdAt": "2020-06-15T05:33:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -668,6 +669,8 @@ private BIRAnnotationValue createAnnotationValue(BLangExpression expr) {\n                 return createAnnotationValue(((BLangTypeConversionExpr) expr).expr);\n             case STATEMENT_EXPRESSION:\n                 return createAnnotationRecordValue((BLangStatementExpression) expr);\n+            case INVOCATION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MTE4Mg==", "bodyText": "This happens due to desugar changes invocation is cloneReadOnly", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439951182", "createdAt": "2020-06-15T06:18:40Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -668,6 +669,8 @@ private BIRAnnotationValue createAnnotationValue(BLangExpression expr) {\n                 return createAnnotationValue(((BLangTypeConversionExpr) expr).expr);\n             case STATEMENT_EXPRESSION:\n                 return createAnnotationRecordValue((BLangStatementExpression) expr);\n+            case INVOCATION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2Njg2Nw==", "bodyText": "I am trying to go through to actual expression we wrap by cloneReadOnly. I think it is safe to say that INVOCATION is not supported.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439966867", "createdAt": "2020-06-15T07:00:49Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -668,6 +669,8 @@ private BIRAnnotationValue createAnnotationValue(BLangExpression expr) {\n                 return createAnnotationValue(((BLangTypeConversionExpr) expr).expr);\n             case STATEMENT_EXPRESSION:\n                 return createAnnotationRecordValue((BLangStatementExpression) expr);\n+            case INVOCATION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNDY4Mg==", "bodyText": "I think here and in isCompileTimeAnnotationValue we should specifically check if the invocation name is cloneReadOnly and do what you've done only if that is the case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440404682", "createdAt": "2020-06-15T19:41:51Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -668,6 +669,8 @@ private BIRAnnotationValue createAnnotationValue(BLangExpression expr) {\n                 return createAnnotationValue(((BLangTypeConversionExpr) expr).expr);\n             case STATEMENT_EXPRESSION:\n                 return createAnnotationRecordValue((BLangStatementExpression) expr);\n+            case INVOCATION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3NDkxMg==", "bodyText": "Shall we track this by an issue.. ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440574912", "createdAt": "2020-06-16T04:10:07Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -668,6 +669,8 @@ private BIRAnnotationValue createAnnotationValue(BLangExpression expr) {\n                 return createAnnotationValue(((BLangTypeConversionExpr) expr).expr);\n             case STATEMENT_EXPRESSION:\n                 return createAnnotationRecordValue((BLangStatementExpression) expr);\n+            case INVOCATION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4ODk3MA==", "bodyText": "Fixing here\n#24179", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440588970", "createdAt": "2020-06-16T05:08:39Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -668,6 +669,8 @@ private BIRAnnotationValue createAnnotationValue(BLangExpression expr) {\n                 return createAnnotationValue(((BLangTypeConversionExpr) expr).expr);\n             case STATEMENT_EXPRESSION:\n                 return createAnnotationRecordValue((BLangStatementExpression) expr);\n+            case INVOCATION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDkxNjU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTozMjo1OVrOGjjshA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTozMjo1OVrOGjjshA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzODE4MA==", "bodyText": "Instead, should we do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (elementType.tag == TypeTags.MAP || elementType.tag == TypeTags.RECORD) {\n          \n          \n            \n                                return types.isAssignable(elementType, symTable.anydataOrReadOnlyMapType);\n          \n          \n            \n                            }\n          \n          \n            \n                            return false;\n          \n          \n            \n                            return isValidAnnotationType(elementType);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439938180", "createdAt": "2020-06-15T05:32:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1329,17 +1329,15 @@ private boolean isValidAnnotationType(BType type) {\n         }\n \n         switch (type.tag) {\n-            case TypeTags.RECORD:\n-//                BRecordType recordType = (BRecordType) type;\n-//                return recordType.fields.stream().allMatch(field -> types.isAnydata(field.type)) &&\n-//                        (recordType.sealed || types.isAnydata(recordType.restFieldType));\n             case TypeTags.MAP:\n-//                return types.isAnydata(((BMapType) type).constraint);\n-                return true;\n+            case TypeTags.RECORD:\n+                return types.isAssignable(type, symTable.anydataOrReadOnlyMapType);\n             case TypeTags.ARRAY:\n                 BType elementType = ((BArrayType) type).eType;\n-                return (elementType.tag == TypeTags.MAP || elementType.tag == TypeTags.RECORD) &&\n-                        isValidAnnotationType(elementType);\n+                if (elementType.tag == TypeTags.MAP || elementType.tag == TypeTags.RECORD) {\n+                    return types.isAssignable(elementType, symTable.anydataOrReadOnlyMapType);\n+                }\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk0NjQ3OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1MDo1MFrOGjj-iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyOTo1MlrOGjkuZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0Mjc5Mw==", "bodyText": "Thinking out loud, as to what approach we should follow by default.\nI think we should make InboundBasicAuthProvider a readonly object instead. Reasons being the type definition will mandate only valid possibly immutable types are allowed for fields, and developers won't introduce non-readonly fields by mistake.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439942793", "createdAt": "2020-06-15T05:50:50Z", "author": {"login": "MaryamZi"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -36,12 +36,12 @@ public type InboundBasicAuthProvider object {\n \n     *InboundAuthProvider;\n \n-    public BasicAuthConfig basicAuthConfig;\n+    public readonly BasicAuthConfig basicAuthConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NTA0NA==", "bodyText": "Yes, readonly object is better and cleaner. Will push changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439955044", "createdAt": "2020-06-15T06:29:52Z", "author": {"login": "KRVPerera"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -36,12 +36,12 @@ public type InboundBasicAuthProvider object {\n \n     *InboundAuthProvider;\n \n-    public BasicAuthConfig basicAuthConfig;\n+    public readonly BasicAuthConfig basicAuthConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0Mjc5Mw=="}, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk1NDg3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationRuntimeTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1NTo1M1rOGjkDyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyNToxMVrOGk2EQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDEzOQ==", "bodyText": "We can assert these also in Ballerina itself, we can maybe change these later.\nSee \n  \n    \n      ballerina-lang/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal\n    \n    \n         Line 149\n      in\n      02b2ec6\n    \n    \n    \n    \n\n        \n          \n           var fn = function() {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439944139", "createdAt": "2020-06-15T05:55:53Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationRuntimeTest.java", "diffHunk": "@@ -174,4 +179,25 @@ public void testAnnotAvailabilty() {\n         Assert.assertEquals(mapValue.get(StringUtils.fromString(\"q\")).toString(), \"hello\");\n         Assert.assertEquals(mapValue.get(StringUtils.fromString(\"r\")).toString(), \"world\");\n     }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +\n+                  \"of record field: modification not allowed on readonly value.*\")\n+    public void testRecordTypeAnnotationReadonlyValueEdit() {\n+        BRunUtil.invoke(resultAccessNegative, \"testRecordTypeAnnotationReadonlyValueEdit\");\n+    }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +\n+                  \"of record field: modification not allowed on readonly value.*\")\n+    public void testAnnotationOnObjectTypeReadonlyValueEdit() {\n+        BRunUtil.invoke(resultAccessNegative, \"testAnnotationOnObjectTypeReadonlyValueEdit\");\n+    }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NTUxMg==", "bodyText": "shall we do this later after error ctor changes as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439955512", "createdAt": "2020-06-15T06:31:02Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationRuntimeTest.java", "diffHunk": "@@ -174,4 +179,25 @@ public void testAnnotAvailabilty() {\n         Assert.assertEquals(mapValue.get(StringUtils.fromString(\"q\")).toString(), \"hello\");\n         Assert.assertEquals(mapValue.get(StringUtils.fromString(\"r\")).toString(), \"world\");\n     }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +\n+                  \"of record field: modification not allowed on readonly value.*\")\n+    public void testRecordTypeAnnotationReadonlyValueEdit() {\n+        BRunUtil.invoke(resultAccessNegative, \"testRecordTypeAnnotationReadonlyValueEdit\");\n+    }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +\n+                  \"of record field: modification not allowed on readonly value.*\")\n+    public void testAnnotationOnObjectTypeReadonlyValueEdit() {\n+        BRunUtil.invoke(resultAccessNegative, \"testAnnotationOnObjectTypeReadonlyValueEdit\");\n+    }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDEzOQ=="}, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4Nzc0NQ==", "bodyText": "Please create an issue for this too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r441287745", "createdAt": "2020-06-17T05:25:11Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationRuntimeTest.java", "diffHunk": "@@ -174,4 +179,25 @@ public void testAnnotAvailabilty() {\n         Assert.assertEquals(mapValue.get(StringUtils.fromString(\"q\")).toString(), \"hello\");\n         Assert.assertEquals(mapValue.get(StringUtils.fromString(\"r\")).toString(), \"world\");\n     }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +\n+                  \"of record field: modification not allowed on readonly value.*\")\n+    public void testRecordTypeAnnotationReadonlyValueEdit() {\n+        BRunUtil.invoke(resultAccessNegative, \"testRecordTypeAnnotationReadonlyValueEdit\");\n+    }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +\n+                  \"of record field: modification not allowed on readonly value.*\")\n+    public void testAnnotationOnObjectTypeReadonlyValueEdit() {\n+        BRunUtil.invoke(resultAccessNegative, \"testAnnotationOnObjectTypeReadonlyValueEdit\");\n+    }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDEzOQ=="}, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk1NzYwOnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1NzozMVrOGjkFlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo1NzozMVrOGjkFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDU5OA==", "bodyText": "Shall we stick to either T & readonly or readonly & T uniformly?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439944598", "createdAt": "2020-06-15T05:57:31Z", "author": {"login": "MaryamZi"}, "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -29,7 +29,7 @@ public type BasicAuthHandler object {\n     # Initializes the `BasicAuthHandler` object.\n     #\n     # + authProvider - The `auth:InboundAuthProvider` instance or the `auth:OutboundAuthProvider` instance\n-    public function init(auth:InboundAuthProvider|auth:OutboundAuthProvider authProvider) {\n+    public function init(readonly & (auth:InboundAuthProvider|auth:OutboundAuthProvider) authProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzkyNjUwOnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/annotation.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoxNDoxOFrOGkBKMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoxNDoxOFrOGkBKMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMDkxNA==", "bodyText": "We don't need to add readonly for anydata fields right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440420914", "createdAt": "2020-06-15T20:14:18Z", "author": {"login": "MaryamZi"}, "path": "stdlib/http/src/main/ballerina/src/http/annotation.bal", "diffHunk": "@@ -137,9 +137,9 @@ public type WebSocketUpgradeConfig record {|\n # be successfully authorized. An array consisting of arrays is used to indicate that at least one scope from the sub-arrays \n # should be successfully authorized.\n public type ServiceAuth record {|\n-    boolean enabled = true;\n-    InboundAuthHandlers authHandlers?;\n-    Scopes scopes?;\n+    readonly boolean enabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09ea9c1667a463ec95ef6588a4462827e61c6743"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg4MjU4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/IconAnnotationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1Mzo1NFrOGkKVkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1Mzo1NFrOGkKVkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MTI4MA==", "bodyText": "Updated new test cases. Need a helper function later to get the exact expression value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440571280", "createdAt": "2020-06-16T03:53:54Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/IconAnnotationTest.java", "diffHunk": "@@ -51,19 +55,22 @@ public void setup() {\n     public void testIconOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(annot.expr.toString(), \" {path: /fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n+                \"/fooIconPath.icon}\");\n     }\n \n     @Test\n     public void testIconOnObjectAndMemberFunction() {\n         TypeDefinition objType = result.getAST().getTypeDefinitions().get(0);\n         List<? extends AnnotationAttachmentNode> objAnnot = objType.getAnnotationAttachments();\n         Assert.assertEquals(objAnnot.size(), 1);\n-        Assert.assertEquals(objAnnot.get(0).getExpression().toString(), \" {path: /barIconPath.icon}\");\n+        Assert.assertEquals(objAnnot.get(0).getExpression().toString(), \" {path: /barIconPath.icon}.cloneReadOnly()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184e8887b8b035991aa84750ec3a9e123bac78be"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTAxMzcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNToxODo1NlrOGkLlUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTo0Njo0MVrOGk2dQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MTY5OA==", "bodyText": "Shall we create an issue to track fixing std lib deviations and add back the object validation to annotations?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440591698", "createdAt": "2020-06-16T05:18:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1360,22 +1363,81 @@ private boolean isValidAnnotationType(BType type) {\n         }\n \n         switch (type.tag) {\n+            case TypeTags.MAP:\n+                BType constraintType = ((BMapType) type).constraint;\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(constraintType);\n             case TypeTags.RECORD:\n-//                BRecordType recordType = (BRecordType) type;\n-//                return recordType.fields.stream().allMatch(field -> types.isAnydata(field.type)) &&\n-//                        (recordType.sealed || types.isAnydata(recordType.restFieldType));\n+                BRecordType recordType = (BRecordType) type;\n+                for (BField field : recordType.fields.values()) {\n+                    if (!isAnyDataOrReadOnlyTypeSkippingObjectType(field.type)) {\n+                        return false;\n+                    }\n+                }\n+\n+                BType recordRestType = recordType.restFieldType;\n+                if (recordRestType == null || recordRestType == symTable.noType) {\n+                    return true;\n+                }\n+\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(recordRestType);\n+            case TypeTags.ARRAY:\n+                return isValidAnnotationType(((BArrayType) type).eType);\n+        }\n+\n+        return types.isAssignable(type, symTable.trueType);\n+    }\n+\n+    private boolean isAnyDataOrReadOnlyTypeSkippingObjectType(BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184e8887b8b035991aa84750ec3a9e123bac78be"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MTIxNQ==", "bodyText": "Issue #24217", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440961215", "createdAt": "2020-06-16T15:53:59Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1360,22 +1363,81 @@ private boolean isValidAnnotationType(BType type) {\n         }\n \n         switch (type.tag) {\n+            case TypeTags.MAP:\n+                BType constraintType = ((BMapType) type).constraint;\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(constraintType);\n             case TypeTags.RECORD:\n-//                BRecordType recordType = (BRecordType) type;\n-//                return recordType.fields.stream().allMatch(field -> types.isAnydata(field.type)) &&\n-//                        (recordType.sealed || types.isAnydata(recordType.restFieldType));\n+                BRecordType recordType = (BRecordType) type;\n+                for (BField field : recordType.fields.values()) {\n+                    if (!isAnyDataOrReadOnlyTypeSkippingObjectType(field.type)) {\n+                        return false;\n+                    }\n+                }\n+\n+                BType recordRestType = recordType.restFieldType;\n+                if (recordRestType == null || recordRestType == symTable.noType) {\n+                    return true;\n+                }\n+\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(recordRestType);\n+            case TypeTags.ARRAY:\n+                return isValidAnnotationType(((BArrayType) type).eType);\n+        }\n+\n+        return types.isAssignable(type, symTable.trueType);\n+    }\n+\n+    private boolean isAnyDataOrReadOnlyTypeSkippingObjectType(BType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MTY5OA=="}, "originalCommit": {"oid": "184e8887b8b035991aa84750ec3a9e123bac78be"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NDE0NQ==", "bodyText": "Created an issue to do language changes after StandardLib changes: #24246", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r441294145", "createdAt": "2020-06-17T05:46:41Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1360,22 +1363,81 @@ private boolean isValidAnnotationType(BType type) {\n         }\n \n         switch (type.tag) {\n+            case TypeTags.MAP:\n+                BType constraintType = ((BMapType) type).constraint;\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(constraintType);\n             case TypeTags.RECORD:\n-//                BRecordType recordType = (BRecordType) type;\n-//                return recordType.fields.stream().allMatch(field -> types.isAnydata(field.type)) &&\n-//                        (recordType.sealed || types.isAnydata(recordType.restFieldType));\n+                BRecordType recordType = (BRecordType) type;\n+                for (BField field : recordType.fields.values()) {\n+                    if (!isAnyDataOrReadOnlyTypeSkippingObjectType(field.type)) {\n+                        return false;\n+                    }\n+                }\n+\n+                BType recordRestType = recordType.restFieldType;\n+                if (recordRestType == null || recordRestType == symTable.noType) {\n+                    return true;\n+                }\n+\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(recordRestType);\n+            case TypeTags.ARRAY:\n+                return isValidAnnotationType(((BArrayType) type).eType);\n+        }\n+\n+        return types.isAssignable(type, symTable.trueType);\n+    }\n+\n+    private boolean isAnyDataOrReadOnlyTypeSkippingObjectType(BType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MTY5OA=="}, "originalCommit": {"oid": "184e8887b8b035991aa84750ec3a9e123bac78be"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTAzNDc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTozMDo1OFrOGkLyeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0MDowMlrOGkPAWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NTA2NQ==", "bodyText": "We need to keep the part of the original check where we first check if the member type is a map or a record (https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java#L1372) or we will be allowing an array of true also.\nWe should ideally have a negative test for the same.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440595065", "createdAt": "2020-06-16T05:30:58Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1360,22 +1363,81 @@ private boolean isValidAnnotationType(BType type) {\n         }\n \n         switch (type.tag) {\n+            case TypeTags.MAP:\n+                BType constraintType = ((BMapType) type).constraint;\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(constraintType);\n             case TypeTags.RECORD:\n-//                BRecordType recordType = (BRecordType) type;\n-//                return recordType.fields.stream().allMatch(field -> types.isAnydata(field.type)) &&\n-//                        (recordType.sealed || types.isAnydata(recordType.restFieldType));\n+                BRecordType recordType = (BRecordType) type;\n+                for (BField field : recordType.fields.values()) {\n+                    if (!isAnyDataOrReadOnlyTypeSkippingObjectType(field.type)) {\n+                        return false;\n+                    }\n+                }\n+\n+                BType recordRestType = recordType.restFieldType;\n+                if (recordRestType == null || recordRestType == symTable.noType) {\n+                    return true;\n+                }\n+\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(recordRestType);\n+            case TypeTags.ARRAY:\n+                return isValidAnnotationType(((BArrayType) type).eType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184e8887b8b035991aa84750ec3a9e123bac78be"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0Nzc2OQ==", "bodyText": "Fixed : 0d31fb6", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440647769", "createdAt": "2020-06-16T07:40:02Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1360,22 +1363,81 @@ private boolean isValidAnnotationType(BType type) {\n         }\n \n         switch (type.tag) {\n+            case TypeTags.MAP:\n+                BType constraintType = ((BMapType) type).constraint;\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(constraintType);\n             case TypeTags.RECORD:\n-//                BRecordType recordType = (BRecordType) type;\n-//                return recordType.fields.stream().allMatch(field -> types.isAnydata(field.type)) &&\n-//                        (recordType.sealed || types.isAnydata(recordType.restFieldType));\n+                BRecordType recordType = (BRecordType) type;\n+                for (BField field : recordType.fields.values()) {\n+                    if (!isAnyDataOrReadOnlyTypeSkippingObjectType(field.type)) {\n+                        return false;\n+                    }\n+                }\n+\n+                BType recordRestType = recordType.restFieldType;\n+                if (recordRestType == null || recordRestType == symTable.noType) {\n+                    return true;\n+                }\n+\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(recordRestType);\n+            case TypeTags.ARRAY:\n+                return isValidAnnotationType(((BArrayType) type).eType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NTA2NQ=="}, "originalCommit": {"oid": "184e8887b8b035991aa84750ec3a9e123bac78be"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTMzNzkxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TypedescValueImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyMjozNVrOGk2BXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyMjozNVrOGk2BXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NzAwNQ==", "bodyText": "Please create an issue to track verifying these changes with @irshadnilam's changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r441287005", "createdAt": "2020-06-17T05:22:35Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TypedescValueImpl.java", "diffHunk": "@@ -107,6 +107,11 @@ public Object copy(Map<Object, Object> refs) {\n         return this;\n     }\n \n+    @Override\n+    public void freezeDirect() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5342dcdc002525b51852ed31769b91ecfe2aa658"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTM0NDQ4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationRuntimeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyNjoyMlrOGk2FfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyNjoyMlrOGk2FfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4ODA2MQ==", "bodyText": "Can go on one line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r441288061", "createdAt": "2020-06-17T05:26:22Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationRuntimeTest.java", "diffHunk": "@@ -66,6 +68,9 @@ public void setup() {\n \n         resultFour = BCompileUtil.compile(\"test-src/annotations/annot_availability.bal\");\n         Assert.assertEquals(resultFour.getErrorCount(), 0);\n+\n+        resultAccessNegative = BCompileUtil.compile(\"test-src/annotations/annotation_access_negative\" +\n+                                                                          \".bal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5342dcdc002525b51852ed31769b91ecfe2aa658"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3597, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}