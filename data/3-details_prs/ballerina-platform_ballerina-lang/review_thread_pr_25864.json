{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDMyNDM4", "number": 25864, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzoyNjowNVrOEkiR4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzoyNjowNVrOEkiR4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzQ1ODI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzoyNjowNVrOHTiCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyNzowNlrOHToIkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0Mjc0Mw==", "bodyText": "do we need a else block? i.e: when the qualifier is neither a visibility qualifier nor REMOTE_KEYWORD", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25864#discussion_r490242743", "createdAt": "2020-09-17T13:26:05Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1021,15 +1021,19 @@ private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcS\n         STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n         List<STNode> validatedQualifierList = new ArrayList<>();\n         // qualifiers are only allowed in the following cases for func type desc.\n-        // isolated and transactional qualifiers allowed.\n-        // public or private qualifier allowed in object field.\n+        // isolated and transactional qualifiers are allowed.\n+        // public, private and remote qualifiers are allowed in object field.\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n             if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD || qualifier.kind == SyntaxKind.TRANSACTIONAL_KEYWORD) {\n                 validatedQualifierList.add(qualifier);\n-            } else if (isObjectMember && isVisibilityQualifier(qualifier)) {\n-                // public or private qualifier allowed in object field.\n-                visibilityQualifier = qualifier;\n+            } else if (isObjectMember) {\n+                if (isVisibilityQualifier(qualifier)) {\n+                    // public or private qualifier allowed in object field.\n+                    visibilityQualifier = qualifier;\n+                } else if (qualifier.kind == SyntaxKind.REMOTE_KEYWORD) {\n+                    validatedQualifierList.add(qualifier);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316234f309feb33eecc3e8920d5519ecb6fe839a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0MjU0NA==", "bodyText": "oops!", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25864#discussion_r490342544", "createdAt": "2020-09-17T15:27:06Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1021,15 +1021,19 @@ private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcS\n         STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n         List<STNode> validatedQualifierList = new ArrayList<>();\n         // qualifiers are only allowed in the following cases for func type desc.\n-        // isolated and transactional qualifiers allowed.\n-        // public or private qualifier allowed in object field.\n+        // isolated and transactional qualifiers are allowed.\n+        // public, private and remote qualifiers are allowed in object field.\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n             if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD || qualifier.kind == SyntaxKind.TRANSACTIONAL_KEYWORD) {\n                 validatedQualifierList.add(qualifier);\n-            } else if (isObjectMember && isVisibilityQualifier(qualifier)) {\n-                // public or private qualifier allowed in object field.\n-                visibilityQualifier = qualifier;\n+            } else if (isObjectMember) {\n+                if (isVisibilityQualifier(qualifier)) {\n+                    // public or private qualifier allowed in object field.\n+                    visibilityQualifier = qualifier;\n+                } else if (qualifier.kind == SyntaxKind.REMOTE_KEYWORD) {\n+                    validatedQualifierList.add(qualifier);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0Mjc0Mw=="}, "originalCommit": {"oid": "316234f309feb33eecc3e8920d5519ecb6fe839a"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4953, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}