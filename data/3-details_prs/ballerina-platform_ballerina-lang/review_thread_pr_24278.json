{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTk5MjE0", "number": 24278, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMToyMlrOEGeryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowODozOFrOEGe04A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjI5NjQyOnYy", "diffSide": "RIGHT", "path": "tests/ballerina-test-utils/src/main/java/org/ballerinalang/test/context/BMainInstance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMToyMlrOGlTcDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo0MTo1NlrOGlrilg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2ODk3NQ==", "bodyText": "terminateProcess(Process process, String[] cmdArgs) method can be further simplified using its overloaded method as follows.\nprivate void terminateProcess(Process process, String[] cmdArgs) {\n        // Extracts the debug port from the command arguments.\n        String port = \"\";\n        for (int i = 0; i < cmdArgs.length; i++) {\n            if (cmdArgs[i].equals(\"--debug\")) {\n                port = cmdArgs[i + 1];\n                terminateProcess(process, port);\n                break;\n            }\n        }\n    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24278#discussion_r441768975", "createdAt": "2020-06-17T19:01:22Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/ballerina-test-utils/src/main/java/org/ballerinalang/test/context/BMainInstance.java", "diffHunk": "@@ -413,12 +441,7 @@ private boolean isLeechingDone(ServerLogReader infoReader, ServerLogReader error\n      * @param cmdArgs ballerina command args.\n      */\n     private void terminateProcess(Process process, String[] cmdArgs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6575b8101cde5c933350879f052a653fa2e997d8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2Mzg2Mg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24278#discussion_r442163862", "createdAt": "2020-06-18T11:41:56Z", "author": {"login": "praveennadarajah"}, "path": "tests/ballerina-test-utils/src/main/java/org/ballerinalang/test/context/BMainInstance.java", "diffHunk": "@@ -413,12 +441,7 @@ private boolean isLeechingDone(ServerLogReader infoReader, ServerLogReader error\n      * @param cmdArgs ballerina command args.\n      */\n     private void terminateProcess(Process process, String[] cmdArgs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2ODk3NQ=="}, "originalCommit": {"oid": "6575b8101cde5c933350879f052a653fa2e997d8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjMxOTY4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/build/MultiModuleBuildDebugTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowODozOFrOGlTrCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo0MjoxNVrOGlrjJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3MjgxMA==", "bodyText": "AFAIR, we have already covered this test scenario the the remote debug tests suite. Shall we remove this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24278#discussion_r441772810", "createdAt": "2020-06-17T19:08:38Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/build/MultiModuleBuildDebugTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.adapter.build;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.DebugAdapterBaseTestCase;\n+import org.ballerinalang.debugger.test.utils.BallerinaTestDebugPoint;\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+\n+/**\n+ * Test class for multi module related debug scenarios for build command.\n+ */\n+public class MultiModuleBuildDebugTest extends DebugAdapterBaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+    private int port;\n+    private Process process;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        testProjectName = \"breakpoint-tests\";\n+        testModuleName = \"foo\";\n+        projectPath = testProjectBaseDir + File.separator + testProjectName;\n+\n+        testModuleFileName = \"tests\" + File.separator + \"main_test.bal\";\n+        testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;\n+        testEntryFilePath = Paths.get(testProjectPath, \"src\", testModuleName, testModuleFileName).toString();\n+    }\n+\n+    @Test\n+    public void testSuspendOnBallerinaModuleBuild() throws BallerinaTestException {\n+        port = findFreePort();\n+        String msg = \"Listening for transport dt_socket at address: \" + port;\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        process = balClient.debugMain(\"build\", new String[]{\"--debug\", String.valueOf(port), testModuleName},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath, 20,\n+                true);\n+        clientLeecher.waitForText(20000);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6575b8101cde5c933350879f052a653fa2e997d8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2NDAwNA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24278#discussion_r442164004", "createdAt": "2020-06-18T11:42:15Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/build/MultiModuleBuildDebugTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.adapter.build;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.DebugAdapterBaseTestCase;\n+import org.ballerinalang.debugger.test.utils.BallerinaTestDebugPoint;\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+\n+/**\n+ * Test class for multi module related debug scenarios for build command.\n+ */\n+public class MultiModuleBuildDebugTest extends DebugAdapterBaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+    private int port;\n+    private Process process;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        testProjectName = \"breakpoint-tests\";\n+        testModuleName = \"foo\";\n+        projectPath = testProjectBaseDir + File.separator + testProjectName;\n+\n+        testModuleFileName = \"tests\" + File.separator + \"main_test.bal\";\n+        testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;\n+        testEntryFilePath = Paths.get(testProjectPath, \"src\", testModuleName, testModuleFileName).toString();\n+    }\n+\n+    @Test\n+    public void testSuspendOnBallerinaModuleBuild() throws BallerinaTestException {\n+        port = findFreePort();\n+        String msg = \"Listening for transport dt_socket at address: \" + port;\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        process = balClient.debugMain(\"build\", new String[]{\"--debug\", String.valueOf(port), testModuleName},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath, 20,\n+                true);\n+        clientLeecher.waitForText(20000);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3MjgxMA=="}, "originalCommit": {"oid": "6575b8101cde5c933350879f052a653fa2e997d8"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3341, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}