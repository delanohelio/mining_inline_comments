{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODE4NjEw", "number": 21430, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDowNDo1M1rODk-0zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowMjoxNlrODluRdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTA0NjUzOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDowNDo1M1rOFxm-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNDowNDozMVrOFyFzaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MzA2OA==", "bodyText": "Shall we write the tests in Ballerina itself?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21430#discussion_r387563068", "createdAt": "2020-03-04T10:04:53Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -247,6 +247,23 @@ public void testIndexOf() {\n         assertNull(returns[1]);\n     }\n \n+    @Test\n+    public void testLastIndexOf() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testLastIndexOf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3344dfe9975e5cab5ecdcd78b71086081cd4ccf8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA2ODIwMw==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21430#discussion_r388068203", "createdAt": "2020-03-05T04:04:31Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -247,6 +247,23 @@ public void testIndexOf() {\n         assertNull(returns[1]);\n     }\n \n+    @Test\n+    public void testLastIndexOf() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testLastIndexOf\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MzA2OA=="}, "originalCommit": {"oid": "3344dfe9975e5cab5ecdcd78b71086081cd4ccf8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDQ2OTQ1OnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/LastIndexOf.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjo1MjoyNVrOFyIIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjo1MjoyNVrOFyIIWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEwNjMzMA==", "bodyText": "Do we need this null check? We should never be getting null values for string values here. If we do get, then it's a bug in either the runtime or the compiler.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21430#discussion_r388106330", "createdAt": "2020-03-05T06:52:25Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/LastIndexOf.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.util.exceptions.BLangExceptionHelper;\n+import org.ballerinalang.jvm.util.exceptions.RuntimeErrors;\n+import org.ballerinalang.langlib.string.utils.StringUtils;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.jvm.util.BLangConstants.STRING_LANG_LIB;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.INDEX_OUT_OF_RANGE_ERROR_IDENTIFIER;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.getModulePrefixedReason;\n+\n+/**\n+ * Extern function ballerina.model.strings:lastIndexOf.\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\",\n+        functionName = \"lastIndexOf\",\n+        args = {@Argument(name = \"s\", type = TypeKind.STRING),\n+                @Argument(name = \"substring\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.UNION)},\n+        isPublic = true\n+)\n+public class LastIndexOf {\n+    public static Object lastIndexOf(Strand strand, String value, String subString, long startIndex) {\n+        StringUtils.checkForNull(value, subString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b023c4d132b93fb9a761fe9ce3095aa13ffbb48e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODgyMDM3OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowMjoxNlrOFyxdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowMjoxNlrOFyxdOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MzQxOA==", "bodyText": "We should check or instead of and right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21430#discussion_r388783418", "createdAt": "2020-03-06T09:02:16Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "diffHunk": "@@ -150,6 +150,35 @@ function testIndexOf() returns [int?, int?] {\n     return [i1, i2];\n }\n \n+function testLastIndexOf() {\n+    anydata[] array = [10, 10, 10, \"foo\", \"foo\", \"foo\", 12.34, 12.34, true, true, <map<string>>{\"k\":\"Bar\"},\n+                       <map<string>>{\"k\":\"Bar\"}, [12, true], [12, true]];\n+    map<string> m1 = {\"k\":\"Bar\"};\n+    map<string> m2 = {\"k\":\"Foo\"};\n+    anydata[] arr1 = [12, true];\n+    anydata[] arr2 = [12, false];\n+\n+    int? i1 = array.lastIndexOf(10);\n+    int? i2 = array.lastIndexOf(\"foo\");\n+    int? i3 = array.lastIndexOf(12.34);\n+    int? i4 = array.lastIndexOf(true);\n+    int? i5 = array.lastIndexOf(m1);\n+    int? i6 = array.lastIndexOf(arr1);\n+\n+    int? i7 = array.lastIndexOf(11);\n+    int? i8 = array.lastIndexOf(\"Bar\");\n+    int? i9 = array.lastIndexOf(12.33);\n+    int? i10 = array.lastIndexOf(false);\n+    int? i11 = array.lastIndexOf(m2);\n+    int? i12 = array.lastIndexOf(arr2);\n+\n+    if (<int>i1 != 2 && <int>i2 != 5 && <int>i3 != 7 && <int>i4 != 9 && <int>i5 != 11 && <int>i6 != 13 &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b023c4d132b93fb9a761fe9ce3095aa13ffbb48e"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1086, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}