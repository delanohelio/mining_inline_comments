{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MTU2MjY3", "number": 22458, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyMDo0OFrODuX9Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozNzowOFrODuYWyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTUzNTkwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyMDo0OFrOGAVKJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyMDo0OFrOGAVKJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5OTg0Nw==", "bodyText": "Parameters can have only assignment-op", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22458#discussion_r402999847", "createdAt": "2020-04-03T13:20:48Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1578,19 +1587,19 @@ private ParserRuleContext getNextRuleForVarName(int nextLookahead) {\n                 // Currently processing a required param, but now switch\n                 // to a defaultable param\n                 switchContext(ParserRuleContext.DEFAULTABLE_PARAM);\n-                return ParserRuleContext.ASSIGN_OP;\n+                return compoundOrNot(nextToken);\n             }\n         } else if (parentCtx == ParserRuleContext.DEFAULTABLE_PARAM) {\n             if (isEndOfParametersList(nextToken)) {\n                 return ParserRuleContext.CLOSE_PARENTHESIS;\n             } else {\n-                return ParserRuleContext.ASSIGN_OP;\n+                return compoundOrNot(nextToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad18e8b0dc6dc730229729e40ca1e16e1989f58"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTU0NDAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyMjo1NVrOGAVPJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyMjo1NVrOGAVPJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMTEyNw==", "bodyText": "Once we fix the above comment, this method will be used at only one place.\nSo we can write this logic then and there", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22458#discussion_r403001127", "createdAt": "2020-04-03T13:22:55Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1603,6 +1612,33 @@ private ParserRuleContext getNextRuleForVarName(int nextLookahead) {\n         }\n     }\n \n+    /**\n+     * Check whether the given token kind is a compound binary operator.\n+     * \n+     * @param kind STToken kind\n+     * @return <code>true</code> if the token kind refers to a binary operator. <code>false</code> otherwise\n+     */\n+    private boolean isCompoundBinaryOperator(SyntaxKind kind) {\n+        switch (kind) {\n+            case PLUS_TOKEN:\n+            case MINUS_TOKEN:\n+            case SLASH_TOKEN:\n+            case ASTERISK_TOKEN:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    //return whether we choose a assignment op or a compund binary one\n+    private ParserRuleContext compoundOrNot(STToken token) {\n+        if (isCompoundBinaryOperator(token.kind)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad18e8b0dc6dc730229729e40ca1e16e1989f58"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTU3MTU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyOToyMFrOGAVgIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyOToyMFrOGAVgIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNTQ3Mg==", "bodyText": "should be /**", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22458#discussion_r403005472", "createdAt": "2020-04-03T13:29:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3782,7 +3806,7 @@ private STNode parseStringLiteral() {\n         }\n     }\n \n-    /**\n+    /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad18e8b0dc6dc730229729e40ca1e16e1989f58"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTU4MDEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozMTozNFrOGAVllA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozMTozNFrOGAVllA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNjg2OA==", "bodyText": "unwanted comment?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22458#discussion_r403006868", "createdAt": "2020-04-03T13:31:34Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1160,6 +1163,8 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n             case IMPORT_DECL:\n             case RETURN_STMT:\n             case COMPUTED_FIELD_NAME:\n+            case COMPOUND_ASSIGNMENT_STMT:\n+                // case EXPRESSION:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad18e8b0dc6dc730229729e40ca1e16e1989f58"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTU4OTY3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozNDowMFrOGAVrhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozNDowMFrOGAVrhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwODM4OQ==", "bodyText": "Seems this is not used?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22458#discussion_r403008389", "createdAt": "2020-04-03T13:34:00Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -164,6 +164,9 @@\n     private static final ParserRuleContext[] SPECIFIC_FIELD_RHS =\n             { ParserRuleContext.COLON, ParserRuleContext.COMMA, ParserRuleContext.CLOSE_PARENTHESIS };\n \n+    private static final ParserRuleContext[] COMPOUND_ASSIGNMENT_STATEMENT =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad18e8b0dc6dc730229729e40ca1e16e1989f58"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTYwMTM3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/CompoundAssignmentOperator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozNzowOFrOGAVzCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzozNTozMlrOGBLJ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMDMxNA==", "bodyText": "Do we need this node? Can the two fields private Token binaryOperator and private Token equalsToken  be embedded to the CompoundAssignmentStatement node itself?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22458#discussion_r403010314", "createdAt": "2020-04-03T13:37:08Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/CompoundAssignmentOperator.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class CompoundAssignmentOperator extends Statement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad18e8b0dc6dc730229729e40ca1e16e1989f58"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2NjU3Mg==", "bodyText": "I put it as a node, since in the grammar it is specified separately", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22458#discussion_r403866572", "createdAt": "2020-04-06T06:57:31Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/CompoundAssignmentOperator.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class CompoundAssignmentOperator extends Statement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMDMxNA=="}, "originalCommit": {"oid": "dad18e8b0dc6dc730229729e40ca1e16e1989f58"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg3MTk5Nw==", "bodyText": "yea, but we can merge the two right, since CompoundAssignmentOperator is not re-used?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22458#discussion_r403871997", "createdAt": "2020-04-06T07:09:52Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/CompoundAssignmentOperator.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class CompoundAssignmentOperator extends Statement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMDMxNA=="}, "originalCommit": {"oid": "dad18e8b0dc6dc730229729e40ca1e16e1989f58"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4NDUzMA==", "bodyText": "alright, I ll merge the two :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22458#discussion_r403884530", "createdAt": "2020-04-06T07:35:32Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/CompoundAssignmentOperator.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class CompoundAssignmentOperator extends Statement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMDMxNA=="}, "originalCommit": {"oid": "dad18e8b0dc6dc730229729e40ca1e16e1989f58"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4528, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}