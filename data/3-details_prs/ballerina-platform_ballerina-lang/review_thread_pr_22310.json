{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NTU1MzMx", "number": 22310, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Mjo1MFrODsw6JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDoxODowOVrODs5mUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY1MjUzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/docerina/FieldLevelDocsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Mjo1MFrOF9zEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjozOTowOFrOF-HRcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NDE4MQ==", "bodyText": "@pramodya1994 Do we need to declare these variable if its only used once?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22310#discussion_r400344181", "createdAt": "2020-03-30T16:52:50Z", "author": {"login": "keizer619"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/docerina/FieldLevelDocsTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.docerina;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.DefaultableVarible;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.generator.model.Record;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test class to check record/object field-level documentation in docerina.\n+ */\n+public class FieldLevelDocsTest {\n+\n+    private Module testModule;\n+    // record with module-level documentation\n+    private Record addressRecord;\n+    // record with field-level documentation\n+    private Record personRecord;\n+    // record with both module-level & field-level documentation\n+    private Record apartmentRecord;\n+    // Object with module-level documentation\n+    private Object studentObj;\n+    // Object with field-level documentation\n+    private Object teacherObj;\n+\n+    private static final String PARAGRAPH_OPEN_TAG = \"<p>\";\n+    private static final String PARAGRAPH_CLOSE_TAG = \"</p>\";\n+    private static final String NEW_LINE = \"\\n\";\n+    private static final String PARAGRAPH_CLOSE_WITH_NEW_LINE = PARAGRAPH_CLOSE_TAG + NEW_LINE;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot = \"test-src/docerina/fieldLevelDocsProject\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"testModule\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocsFromBLangPackages(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);\n+        List<ModuleDoc> moduleDocList = new ArrayList<>(docsMap.values());\n+        moduleDocList.sort(Comparator.comparing(pkg -> pkg.bLangPackage.packageID.toString()));\n+        Map<String, List<Path>> resources = new HashMap<>();\n+\n+        Project project = BallerinaDocGenerator.getDocsGenModel(moduleDocList, resources);\n+        testModule = project.modules.get(0);\n+\n+        List<Record> records = testModule.records;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da4d3c83c92bf3677c6146b22a64c8d05dffaf"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3NTE4NQ==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22310#discussion_r400675185", "createdAt": "2020-03-31T06:39:08Z", "author": {"login": "pramodya1994"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/docerina/FieldLevelDocsTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.docerina;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.DefaultableVarible;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.generator.model.Record;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test class to check record/object field-level documentation in docerina.\n+ */\n+public class FieldLevelDocsTest {\n+\n+    private Module testModule;\n+    // record with module-level documentation\n+    private Record addressRecord;\n+    // record with field-level documentation\n+    private Record personRecord;\n+    // record with both module-level & field-level documentation\n+    private Record apartmentRecord;\n+    // Object with module-level documentation\n+    private Object studentObj;\n+    // Object with field-level documentation\n+    private Object teacherObj;\n+\n+    private static final String PARAGRAPH_OPEN_TAG = \"<p>\";\n+    private static final String PARAGRAPH_CLOSE_TAG = \"</p>\";\n+    private static final String NEW_LINE = \"\\n\";\n+    private static final String PARAGRAPH_CLOSE_WITH_NEW_LINE = PARAGRAPH_CLOSE_TAG + NEW_LINE;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot = \"test-src/docerina/fieldLevelDocsProject\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"testModule\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocsFromBLangPackages(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);\n+        List<ModuleDoc> moduleDocList = new ArrayList<>(docsMap.values());\n+        moduleDocList.sort(Comparator.comparing(pkg -> pkg.bLangPackage.packageID.toString()));\n+        Map<String, List<Path>> resources = new HashMap<>();\n+\n+        Project project = BallerinaDocGenerator.getDocsGenModel(moduleDocList, resources);\n+        testModule = project.modules.get(0);\n+\n+        List<Record> records = testModule.records;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NDE4MQ=="}, "originalCommit": {"oid": "a8da4d3c83c92bf3677c6146b22a64c8d05dffaf"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjcwNTczOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/docerina/FieldLevelDocsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNjoxN1rOF9zmQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjozOTozNVrOF-HSIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjgzMg==", "bodyText": "@pramodya1994 is above path works on windows?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22310#discussion_r400352832", "createdAt": "2020-03-30T17:06:17Z", "author": {"login": "keizer619"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/docerina/FieldLevelDocsTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.docerina;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.DefaultableVarible;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.generator.model.Record;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test class to check record/object field-level documentation in docerina.\n+ */\n+public class FieldLevelDocsTest {\n+\n+    private Module testModule;\n+    // record with module-level documentation\n+    private Record addressRecord;\n+    // record with field-level documentation\n+    private Record personRecord;\n+    // record with both module-level & field-level documentation\n+    private Record apartmentRecord;\n+    // Object with module-level documentation\n+    private Object studentObj;\n+    // Object with field-level documentation\n+    private Object teacherObj;\n+\n+    private static final String PARAGRAPH_OPEN_TAG = \"<p>\";\n+    private static final String PARAGRAPH_CLOSE_TAG = \"</p>\";\n+    private static final String NEW_LINE = \"\\n\";\n+    private static final String PARAGRAPH_CLOSE_WITH_NEW_LINE = PARAGRAPH_CLOSE_TAG + NEW_LINE;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot = \"test-src/docerina/fieldLevelDocsProject\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"testModule\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocsFromBLangPackages(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da4d3c83c92bf3677c6146b22a64c8d05dffaf"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3NTM2MQ==", "bodyText": "Corrected", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22310#discussion_r400675361", "createdAt": "2020-03-31T06:39:35Z", "author": {"login": "pramodya1994"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/docerina/FieldLevelDocsTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.docerina;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.DefaultableVarible;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.generator.model.Record;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test class to check record/object field-level documentation in docerina.\n+ */\n+public class FieldLevelDocsTest {\n+\n+    private Module testModule;\n+    // record with module-level documentation\n+    private Record addressRecord;\n+    // record with field-level documentation\n+    private Record personRecord;\n+    // record with both module-level & field-level documentation\n+    private Record apartmentRecord;\n+    // Object with module-level documentation\n+    private Object studentObj;\n+    // Object with field-level documentation\n+    private Object teacherObj;\n+\n+    private static final String PARAGRAPH_OPEN_TAG = \"<p>\";\n+    private static final String PARAGRAPH_CLOSE_TAG = \"</p>\";\n+    private static final String NEW_LINE = \"\\n\";\n+    private static final String PARAGRAPH_CLOSE_WITH_NEW_LINE = PARAGRAPH_CLOSE_TAG + NEW_LINE;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot = \"test-src/docerina/fieldLevelDocsProject\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"testModule\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocsFromBLangPackages(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjgzMg=="}, "originalCommit": {"oid": "a8da4d3c83c92bf3677c6146b22a64c8d05dffaf"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA3NjMzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/docerina/fieldLevelDocsProject/src/testModule/test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDoxODowOVrOF-A29Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjozOTo0OFrOF-HSeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3MDEwMQ==", "bodyText": "Shall we have some test cases with md at field level", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22310#discussion_r400570101", "createdAt": "2020-03-31T00:18:09Z", "author": {"login": "hevayo"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/docerina/fieldLevelDocsProject/src/testModule/test.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public const string LKA = \"LKA\";\n+public const string LK = \"LK\";\n+public const string USA = \"USA\";\n+\n+public type CountryCode LK|LKA|USA;\n+\n+# Address record\n+#\n+# + street - street of the address\n+# + city - city of the address\n+# + countryCode - country code of the address\n+public type Address record {|\n+    string street;\n+    string city;\n+    CountryCode countryCode;\n+|};\n+\n+# Person record\n+public type Person record {|\n+    # name of the person\n+    string name;\n+    # age of the person\n+    int age;\n+    # country code of the person\n+    CountryCode countryCode;\n+|};\n+\n+# Apartment record\n+#\n+# + number - number of the apartment\n+# + street - street of the apartment\n+# + countryCode - country code of the apartment\n+public type Apartment record {|\n+    # apartment no\n+    int number;\n+    # apartment street\n+    string street;\n+    # apartment country-code\n+    CountryCode countryCode;\n+|};\n+\n+# Student object\n+#\n+# + name - student name\n+# + age - student age\n+public type Student object {\n+    public string name = \"Saman\";\n+    public int age = 15;\n+};\n+\n+# Teacher object\n+public type Teacher object {\n+    # Teacher name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da4d3c83c92bf3677c6146b22a64c8d05dffaf"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3NTQ0OQ==", "bodyText": "Added a test case", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22310#discussion_r400675449", "createdAt": "2020-03-31T06:39:48Z", "author": {"login": "pramodya1994"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/docerina/fieldLevelDocsProject/src/testModule/test.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public const string LKA = \"LKA\";\n+public const string LK = \"LK\";\n+public const string USA = \"USA\";\n+\n+public type CountryCode LK|LKA|USA;\n+\n+# Address record\n+#\n+# + street - street of the address\n+# + city - city of the address\n+# + countryCode - country code of the address\n+public type Address record {|\n+    string street;\n+    string city;\n+    CountryCode countryCode;\n+|};\n+\n+# Person record\n+public type Person record {|\n+    # name of the person\n+    string name;\n+    # age of the person\n+    int age;\n+    # country code of the person\n+    CountryCode countryCode;\n+|};\n+\n+# Apartment record\n+#\n+# + number - number of the apartment\n+# + street - street of the apartment\n+# + countryCode - country code of the apartment\n+public type Apartment record {|\n+    # apartment no\n+    int number;\n+    # apartment street\n+    string street;\n+    # apartment country-code\n+    CountryCode countryCode;\n+|};\n+\n+# Student object\n+#\n+# + name - student name\n+# + age - student age\n+public type Student object {\n+    public string name = \"Saman\";\n+    public int age = 15;\n+};\n+\n+# Teacher object\n+public type Teacher object {\n+    # Teacher name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3MDEwMQ=="}, "originalCommit": {"oid": "a8da4d3c83c92bf3677c6146b22a64c8d05dffaf"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4438, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}