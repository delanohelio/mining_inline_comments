{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNzk1ODc0", "number": 22568, "title": "Improve API Docs in RabbitMQ module", "bodyText": "Purpose\nImprove API Docs in RabbitMQ module\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-10T07:35:42Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568", "merged": true, "mergeCommit": {"oid": "0ca474f479f1656ede963c31d3b4b7629c05e2f0"}, "closed": true, "closedAt": "2020-04-15T15:52:34Z", "author": {"login": "daneshk"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWL1_wgH2gAyNDAxNzk1ODc0OjRiYjA4MmI5ZTYyYzhlZWZiMGI5MmI4ZDAxZWIzNjM5NDEzYzI1YTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX6ExngFqTM5MzkwMzg2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4bb082b9e62c8eefb0b92b8d01eb3639413c25a5", "committedDate": "2020-04-10T07:20:21Z", "message": "Improve API Docs in RabbitMQ module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzEyNDg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#pullrequestreview-391312489", "createdAt": "2020-04-10T07:44:26Z", "commit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "state": "COMMENTED", "comments": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo0NDoyNlrOGDzo2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo1NzoxMVrOGDz52A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NDk1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The core APIs are `rabbitmq:Connection`, `rabbitmq:Channel`, and `rabbitmq:Message` representing an AMQP 0-9-1 Connection, a Channel, and a Ballerina RabbitMQ Message respectively. The following code connects to a RabbitMQ node using the given parameters (host name, port number, etc.): \n          \n          \n            \n            The core APIs are the `rabbitmq:Connection`, `rabbitmq:Channel`, and `rabbitmq:Message` representing an AMQP 0-9-1 Connection, a Channel, and a Ballerina RabbitMQ Message respectively. The following code connects to a RabbitMQ node using the given parameters (host name, port number, etc.):", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406644954", "createdAt": "2020-04-10T07:44:26Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/Module.md", "diffHunk": "@@ -11,7 +9,7 @@ Key sections include:\n \n ### Connecting to RabbitMQ\n \n-The core APIs are `Connection`, `Channel`, and `Message` representing an AMQP 0-9-1 Connection, a Channel, and a Ballerina RabbitMQ Message respectively. The following code connects to a RabbitMQ node using the given parameters (host name, port number, etc.): \n+The core APIs are `rabbitmq:Connection`, `rabbitmq:Channel`, and `rabbitmq:Message` representing an AMQP 0-9-1 Connection, a Channel, and a Ballerina RabbitMQ Message respectively. The following code connects to a RabbitMQ node using the given parameters (host name, port number, etc.): ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NTM0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Ballerina interface to provide AMQP Channel related functionality.\n          \n          \n            \n            # The Ballerina interface to provide AMQP Channel related functionality.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406645342", "createdAt": "2020-04-10T07:45:39Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -16,26 +16,29 @@\n \n import ballerina/java;\n \n-# Ballerina interface to provide AMQP `Channel` related functionality.\n+# Ballerina interface to provide AMQP Channel related functionality.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NTgwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + properties - Other properties for the message (routing headers, etc)\n          \n          \n            \n            # + properties - Other properties for the message (routing headers, etc.)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406645808", "createdAt": "2020-04-10T07:46:54Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NTg4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Deletes the queue with the given name although it is in use or has messages on it.\n          \n          \n            \n            # Deletes the queue with the given name although it is in use or has messages in it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406645883", "createdAt": "2020-04-10T07:47:08Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages on it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjA0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n          \n          \n            \n            # Retrieves a message synchronously from the given queue providing direct access to the messages in the queue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646048", "createdAt": "2020-04-10T07:47:40Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages on it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjE0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Message` object containing the retrieved message data or else A `rabbitmq:Error` if an\n          \n          \n            \n            # + return - A `rabbitmq:Message` object containing the retrieved message data or else a`rabbitmq:Error` if an", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646146", "createdAt": "2020-04-10T07:47:56Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages on it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n+# ```ballerina\n+# rabbitmq:Message|rabbitmq:Error getResult = newChannel->basicGet(\"MyQueue\", rabbitmq:AUTO_ACK);\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + ackMode - Type of acknowledgement mode\n+# + return - A `rabbitmq:Message` object containing the retrieved message data or else A `rabbitmq:Error` if an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjIwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves the connection which carries this channel.\n          \n          \n            \n            # Retrieves the connection, which carries this channel.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646203", "createdAt": "2020-04-10T07:48:08Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages on it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n+# ```ballerina\n+# rabbitmq:Message|rabbitmq:Error getResult = newChannel->basicGet(\"MyQueue\", rabbitmq:AUTO_ACK);\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + ackMode - Type of acknowledgement mode\n+# + return - A `rabbitmq:Message` object containing the retrieved message data or else A `rabbitmq:Error` if an\n+#            I/O error is encountered\n     public remote function basicGet(string queueName, AcknowledgementMode ackMode) returns Message | Error {\n         boolean autoAck = ackMode is AUTO_ACK;\n         return nativeBasicGet(java:fromString(queueName), autoAck, self.amqpChannel);\n     }\n \n-    # Retrieve the Connection which carries this channel.\n-    #\n-    # + return - RabbitMQ Connection object or error if an I/O problem is encountered.\n+# Retrieves the connection which carries this channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjI2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Connection` object or else A `rabbitmq:Error` if an I/O error is encountered\n          \n          \n            \n            # + return - A `rabbitmq:Connection` object or else a `rabbitmq:Error` if an I/O error is encountered", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646264", "createdAt": "2020-04-10T07:48:18Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages on it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n+# ```ballerina\n+# rabbitmq:Message|rabbitmq:Error getResult = newChannel->basicGet(\"MyQueue\", rabbitmq:AUTO_ACK);\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + ackMode - Type of acknowledgement mode\n+# + return - A `rabbitmq:Message` object containing the retrieved message data or else A `rabbitmq:Error` if an\n+#            I/O error is encountered\n     public remote function basicGet(string queueName, AcknowledgementMode ackMode) returns Message | Error {\n         boolean autoAck = ackMode is AUTO_ACK;\n         return nativeBasicGet(java:fromString(queueName), autoAck, self.amqpChannel);\n     }\n \n-    # Retrieve the Connection which carries this channel.\n-    #\n-    # + return - RabbitMQ Connection object or error if an I/O problem is encountered.\n+# Retrieves the connection which carries this channel.\n+# ```ballerina\n+# rabbitmq:Connection|rabbitmq:Error connResult = newChannel.getConnection();\n+# ```\n+#\n+# + return - A `rabbitmq:Connection` object or else A `rabbitmq:Error` if an I/O error is encountered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjU2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n          \n          \n            \n            # + closeCode - The close code (for information, go to the \"Reply Codes\" section in the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646568", "createdAt": "2020-04-10T07:49:06Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages on it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n+# ```ballerina\n+# rabbitmq:Message|rabbitmq:Error getResult = newChannel->basicGet(\"MyQueue\", rabbitmq:AUTO_ACK);\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + ackMode - Type of acknowledgement mode\n+# + return - A `rabbitmq:Message` object containing the retrieved message data or else A `rabbitmq:Error` if an\n+#            I/O error is encountered\n     public remote function basicGet(string queueName, AcknowledgementMode ackMode) returns Message | Error {\n         boolean autoAck = ackMode is AUTO_ACK;\n         return nativeBasicGet(java:fromString(queueName), autoAck, self.amqpChannel);\n     }\n \n-    # Retrieve the Connection which carries this channel.\n-    #\n-    # + return - RabbitMQ Connection object or error if an I/O problem is encountered.\n+# Retrieves the connection which carries this channel.\n+# ```ballerina\n+# rabbitmq:Connection|rabbitmq:Error connResult = newChannel.getConnection();\n+# ```\n+#\n+# + return - A `rabbitmq:Connection` object or else A `rabbitmq:Error` if an I/O error is encountered\n     public function getConnection() returns Connection | Error {\n         return nativeGetConnection(self.amqpChannel);\n     }\n \n-    # Closes the RabbitMQ `Channel`.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the channel.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Channel`.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newChannel.close();\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjcxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # to complete. Any encountered exceptions in the close operations are silently discarded.\n          \n          \n            \n            # to complete. Any encountered exceptions in the close operations are discarded silently.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646712", "createdAt": "2020-04-10T07:49:31Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages on it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n+# ```ballerina\n+# rabbitmq:Message|rabbitmq:Error getResult = newChannel->basicGet(\"MyQueue\", rabbitmq:AUTO_ACK);\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + ackMode - Type of acknowledgement mode\n+# + return - A `rabbitmq:Message` object containing the retrieved message data or else A `rabbitmq:Error` if an\n+#            I/O error is encountered\n     public remote function basicGet(string queueName, AcknowledgementMode ackMode) returns Message | Error {\n         boolean autoAck = ackMode is AUTO_ACK;\n         return nativeBasicGet(java:fromString(queueName), autoAck, self.amqpChannel);\n     }\n \n-    # Retrieve the Connection which carries this channel.\n-    #\n-    # + return - RabbitMQ Connection object or error if an I/O problem is encountered.\n+# Retrieves the connection which carries this channel.\n+# ```ballerina\n+# rabbitmq:Connection|rabbitmq:Error connResult = newChannel.getConnection();\n+# ```\n+#\n+# + return - A `rabbitmq:Connection` object or else A `rabbitmq:Error` if an I/O error is encountered\n     public function getConnection() returns Connection | Error {\n         return nativeGetConnection(self.amqpChannel);\n     }\n \n-    # Closes the RabbitMQ `Channel`.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the channel.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Channel`.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newChannel.close();\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the channel\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public function close(int? closeCode = (), string? closeMessage = ()) returns Error? {\n         return nativeChannelClose(closeCode, closeMessage, self.amqpChannel);\n     }\n \n-    # Aborts the RabbitMQ `Channel`. Forces the `Channel` to close and waits for all the close operations\n-    # to complete. Any encountered exceptions in the close operations are silently discarded.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the channel.\n-    # + return - An error if an I/O problem is encountered.\n+# Aborts the RabbitMQ `rabbitmq:Channel`. Forces the `rabbitmq:Channel` to close and waits for all the close operations\n+# to complete. Any encountered exceptions in the close operations are silently discarded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0Njc0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n          \n          \n            \n            # + closeCode - The close code (for information, go to the \"Reply Codes\" section in the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646746", "createdAt": "2020-04-10T07:49:38Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages on it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n+# ```ballerina\n+# rabbitmq:Message|rabbitmq:Error getResult = newChannel->basicGet(\"MyQueue\", rabbitmq:AUTO_ACK);\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + ackMode - Type of acknowledgement mode\n+# + return - A `rabbitmq:Message` object containing the retrieved message data or else A `rabbitmq:Error` if an\n+#            I/O error is encountered\n     public remote function basicGet(string queueName, AcknowledgementMode ackMode) returns Message | Error {\n         boolean autoAck = ackMode is AUTO_ACK;\n         return nativeBasicGet(java:fromString(queueName), autoAck, self.amqpChannel);\n     }\n \n-    # Retrieve the Connection which carries this channel.\n-    #\n-    # + return - RabbitMQ Connection object or error if an I/O problem is encountered.\n+# Retrieves the connection which carries this channel.\n+# ```ballerina\n+# rabbitmq:Connection|rabbitmq:Error connResult = newChannel.getConnection();\n+# ```\n+#\n+# + return - A `rabbitmq:Connection` object or else A `rabbitmq:Error` if an I/O error is encountered\n     public function getConnection() returns Connection | Error {\n         return nativeGetConnection(self.amqpChannel);\n     }\n \n-    # Closes the RabbitMQ `Channel`.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the channel.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Channel`.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newChannel.close();\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the channel\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public function close(int? closeCode = (), string? closeMessage = ()) returns Error? {\n         return nativeChannelClose(closeCode, closeMessage, self.amqpChannel);\n     }\n \n-    # Aborts the RabbitMQ `Channel`. Forces the `Channel` to close and waits for all the close operations\n-    # to complete. Any encountered exceptions in the close operations are silently discarded.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the channel.\n-    # + return - An error if an I/O problem is encountered.\n+# Aborts the RabbitMQ `rabbitmq:Channel`. Forces the `rabbitmq:Channel` to close and waits for all the close operations\n+# to complete. Any encountered exceptions in the close operations are silently discarded.\n+# ```ballerina\n+# rabbitmq:Error? abortResult = newChannel.abortChannel(320, \"Channel Aborted\");\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Closes the `rabbitmq:Connection` and all it's `rabbitmq:Channel`s.\n          \n          \n            \n            # Closes the `rabbitmq:Connection` and all its `rabbitmq:Channel`s.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646825", "createdAt": "2020-04-10T07:49:54Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/connection.bal", "diffHunk": "@@ -21,43 +21,52 @@ public type Connection object {\n \n     handle amqpConnection;\n \n-    # Initializes a Ballerina RabbitMQ `Connection` object.\n+    # Initializes a Ballerina RabbitMQ Connection object.\n     #\n-    # + connectionConfiguration - Holds connection parameters required to initialize the `Connection`.\n+    # + connectionConfiguration - Configurations required to initialize the `rabbitmq:Connection`\n     public function __init(ConnectionConfiguration connectionConfiguration) {\n         self.amqpConnection = createConnection(connectionConfiguration);\n     }\n \n-    # Closes the RabbitMQ `Connection` and all it's `Channel`s.\n-    # It waits with a provided timeout for all the close operations to complete.\n-    # When timeout is reached the socket is forced to close.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Connection` and all it's `rabbitmq:Channel`s.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0Njg4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # When timeout is reached the socket is forced to close.\n          \n          \n            \n            # When the timeout is reached, the socket is forced to close.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646888", "createdAt": "2020-04-10T07:50:09Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/connection.bal", "diffHunk": "@@ -21,43 +21,52 @@ public type Connection object {\n \n     handle amqpConnection;\n \n-    # Initializes a Ballerina RabbitMQ `Connection` object.\n+    # Initializes a Ballerina RabbitMQ Connection object.\n     #\n-    # + connectionConfiguration - Holds connection parameters required to initialize the `Connection`.\n+    # + connectionConfiguration - Configurations required to initialize the `rabbitmq:Connection`\n     public function __init(ConnectionConfiguration connectionConfiguration) {\n         self.amqpConnection = createConnection(connectionConfiguration);\n     }\n \n-    # Closes the RabbitMQ `Connection` and all it's `Channel`s.\n-    # It waits with a provided timeout for all the close operations to complete.\n-    # When timeout is reached the socket is forced to close.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Connection` and all it's `rabbitmq:Channel`s.\n+# It waits with a provided timeout for all the close operations to complete.\n+# When timeout is reached the socket is forced to close.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjkzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n          \n          \n            \n            # + closeCode - The close code (for information, go to the \"Reply Codes\" section in the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406646931", "createdAt": "2020-04-10T07:50:17Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/connection.bal", "diffHunk": "@@ -21,43 +21,52 @@ public type Connection object {\n \n     handle amqpConnection;\n \n-    # Initializes a Ballerina RabbitMQ `Connection` object.\n+    # Initializes a Ballerina RabbitMQ Connection object.\n     #\n-    # + connectionConfiguration - Holds connection parameters required to initialize the `Connection`.\n+    # + connectionConfiguration - Configurations required to initialize the `rabbitmq:Connection`\n     public function __init(ConnectionConfiguration connectionConfiguration) {\n         self.amqpConnection = createConnection(connectionConfiguration);\n     }\n \n-    # Closes the RabbitMQ `Connection` and all it's `Channel`s.\n-    # It waits with a provided timeout for all the close operations to complete.\n-    # When timeout is reached the socket is forced to close.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Connection` and all it's `rabbitmq:Channel`s.\n+# It waits with a provided timeout for all the close operations to complete.\n+# When timeout is reached the socket is forced to close.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newConnection.close();\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzA3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Forces the `rabbitmq:Connection` to close and waits for all the close operations to complete. When timeout is reached\n          \n          \n            \n            # Forces the `rabbitmq:Connection` to close and waits for all the close operations to complete. When the timeout is reached,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406647075", "createdAt": "2020-04-10T07:50:43Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/connection.bal", "diffHunk": "@@ -21,43 +21,52 @@ public type Connection object {\n \n     handle amqpConnection;\n \n-    # Initializes a Ballerina RabbitMQ `Connection` object.\n+    # Initializes a Ballerina RabbitMQ Connection object.\n     #\n-    # + connectionConfiguration - Holds connection parameters required to initialize the `Connection`.\n+    # + connectionConfiguration - Configurations required to initialize the `rabbitmq:Connection`\n     public function __init(ConnectionConfiguration connectionConfiguration) {\n         self.amqpConnection = createConnection(connectionConfiguration);\n     }\n \n-    # Closes the RabbitMQ `Connection` and all it's `Channel`s.\n-    # It waits with a provided timeout for all the close operations to complete.\n-    # When timeout is reached the socket is forced to close.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Connection` and all it's `rabbitmq:Channel`s.\n+# It waits with a provided timeout for all the close operations to complete.\n+# When timeout is reached the socket is forced to close.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newConnection.close();\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the connection\n+# + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n+#                     Use -1 for infinity\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public function close(int? closeCode = (), string? closeMessage = (), int? timeoutInMillis = ()) returns Error? {\n         return handleCloseConnection(closeCode, closeMessage, timeoutInMillis, self.amqpConnection);\n     }\n \n-    # Aborts the RabbitMQ `Connection` and all its `Channel`s.\n-    # Forces the `Connection` to close and waits for all the close operations to complete. When timeout is reached\n-    # the socket is forced to close. Any encountered exceptions in the close operations are silently discarded.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n+# Aborts the `rabbitmq:Connection` and all its `rabbitmq:Channel`s.\n+# Forces the `rabbitmq:Connection` to close and waits for all the close operations to complete. When timeout is reached", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzE2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # the socket is forced to close. Any encountered exceptions in the close operations are silently discarded.\n          \n          \n            \n            # the socket is forced to close. Any encountered exceptions in the close operations are discarded silently.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406647160", "createdAt": "2020-04-10T07:50:57Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/connection.bal", "diffHunk": "@@ -21,43 +21,52 @@ public type Connection object {\n \n     handle amqpConnection;\n \n-    # Initializes a Ballerina RabbitMQ `Connection` object.\n+    # Initializes a Ballerina RabbitMQ Connection object.\n     #\n-    # + connectionConfiguration - Holds connection parameters required to initialize the `Connection`.\n+    # + connectionConfiguration - Configurations required to initialize the `rabbitmq:Connection`\n     public function __init(ConnectionConfiguration connectionConfiguration) {\n         self.amqpConnection = createConnection(connectionConfiguration);\n     }\n \n-    # Closes the RabbitMQ `Connection` and all it's `Channel`s.\n-    # It waits with a provided timeout for all the close operations to complete.\n-    # When timeout is reached the socket is forced to close.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Connection` and all it's `rabbitmq:Channel`s.\n+# It waits with a provided timeout for all the close operations to complete.\n+# When timeout is reached the socket is forced to close.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newConnection.close();\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the connection\n+# + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n+#                     Use -1 for infinity\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public function close(int? closeCode = (), string? closeMessage = (), int? timeoutInMillis = ()) returns Error? {\n         return handleCloseConnection(closeCode, closeMessage, timeoutInMillis, self.amqpConnection);\n     }\n \n-    # Aborts the RabbitMQ `Connection` and all its `Channel`s.\n-    # Forces the `Connection` to close and waits for all the close operations to complete. When timeout is reached\n-    # the socket is forced to close. Any encountered exceptions in the close operations are silently discarded.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n+# Aborts the `rabbitmq:Connection` and all its `rabbitmq:Channel`s.\n+# Forces the `rabbitmq:Connection` to close and waits for all the close operations to complete. When timeout is reached\n+# the socket is forced to close. Any encountered exceptions in the close operations are silently discarded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzIwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n          \n          \n            \n            # + closeCode - The close code (for information, go to the \"Reply Codes\" section in the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406647209", "createdAt": "2020-04-10T07:51:05Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/connection.bal", "diffHunk": "@@ -21,43 +21,52 @@ public type Connection object {\n \n     handle amqpConnection;\n \n-    # Initializes a Ballerina RabbitMQ `Connection` object.\n+    # Initializes a Ballerina RabbitMQ Connection object.\n     #\n-    # + connectionConfiguration - Holds connection parameters required to initialize the `Connection`.\n+    # + connectionConfiguration - Configurations required to initialize the `rabbitmq:Connection`\n     public function __init(ConnectionConfiguration connectionConfiguration) {\n         self.amqpConnection = createConnection(connectionConfiguration);\n     }\n \n-    # Closes the RabbitMQ `Connection` and all it's `Channel`s.\n-    # It waits with a provided timeout for all the close operations to complete.\n-    # When timeout is reached the socket is forced to close.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Connection` and all it's `rabbitmq:Channel`s.\n+# It waits with a provided timeout for all the close operations to complete.\n+# When timeout is reached the socket is forced to close.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newConnection.close();\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the connection\n+# + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n+#                     Use -1 for infinity\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public function close(int? closeCode = (), string? closeMessage = (), int? timeoutInMillis = ()) returns Error? {\n         return handleCloseConnection(closeCode, closeMessage, timeoutInMillis, self.amqpConnection);\n     }\n \n-    # Aborts the RabbitMQ `Connection` and all its `Channel`s.\n-    # Forces the `Connection` to close and waits for all the close operations to complete. When timeout is reached\n-    # the socket is forced to close. Any encountered exceptions in the close operations are silently discarded.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n+# Aborts the `rabbitmq:Connection` and all its `rabbitmq:Channel`s.\n+# Forces the `rabbitmq:Connection` to close and waits for all the close operations to complete. When timeout is reached\n+# the socket is forced to close. Any encountered exceptions in the close operations are silently discarded.\n+# ```ballerina\n+# connection.abortConnection(320, \"Channel Aborted\");\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzI3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Checks whether `close` was already called\n          \n          \n            \n            # Checks whether `close` was already called.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406647278", "createdAt": "2020-04-10T07:51:18Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/connection.bal", "diffHunk": "@@ -21,43 +21,52 @@ public type Connection object {\n \n     handle amqpConnection;\n \n-    # Initializes a Ballerina RabbitMQ `Connection` object.\n+    # Initializes a Ballerina RabbitMQ Connection object.\n     #\n-    # + connectionConfiguration - Holds connection parameters required to initialize the `Connection`.\n+    # + connectionConfiguration - Configurations required to initialize the `rabbitmq:Connection`\n     public function __init(ConnectionConfiguration connectionConfiguration) {\n         self.amqpConnection = createConnection(connectionConfiguration);\n     }\n \n-    # Closes the RabbitMQ `Connection` and all it's `Channel`s.\n-    # It waits with a provided timeout for all the close operations to complete.\n-    # When timeout is reached the socket is forced to close.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Connection` and all it's `rabbitmq:Channel`s.\n+# It waits with a provided timeout for all the close operations to complete.\n+# When timeout is reached the socket is forced to close.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newConnection.close();\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the connection\n+# + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n+#                     Use -1 for infinity\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public function close(int? closeCode = (), string? closeMessage = (), int? timeoutInMillis = ()) returns Error? {\n         return handleCloseConnection(closeCode, closeMessage, timeoutInMillis, self.amqpConnection);\n     }\n \n-    # Aborts the RabbitMQ `Connection` and all its `Channel`s.\n-    # Forces the `Connection` to close and waits for all the close operations to complete. When timeout is reached\n-    # the socket is forced to close. Any encountered exceptions in the close operations are silently discarded.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n+# Aborts the `rabbitmq:Connection` and all its `rabbitmq:Channel`s.\n+# Forces the `rabbitmq:Connection` to close and waits for all the close operations to complete. When timeout is reached\n+# the socket is forced to close. Any encountered exceptions in the close operations are silently discarded.\n+# ```ballerina\n+# connection.abortConnection(320, \"Channel Aborted\");\n+# ```\n+#\n+# + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the connection\n+# + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n+#                       Use -1 for infinity\n     public function abortConnection(int? closeCode = (), string? closeMessage = (), int? timeoutInMillis = ()) {\n         handleAbortConnection(closeCode, closeMessage, timeoutInMillis, self.amqpConnection);\n     }\n \n-    # Checks whether `close` was already called.\n-    #\n-    # + return - The value `true` if the `Connection` is already closed and `false` otherwise.\n+# Checks whether `close` was already called", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzQ1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + prefetchSize - Maximum amount of content (measured in octets) that the server will deliver, 0 if unlimited\n          \n          \n            \n                # + prefetchSize - Maximum amount of content (measured in octets) that the server will deliver and 0 if unlimited", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406647458", "createdAt": "2020-04-10T07:51:53Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -25,14 +25,14 @@ public type Listener object {\n \n     private Channel amqpChannel;\n \n-    # Initializes a Listener object with the given `Connection` object or connection parameters.\n-    # Creates a `Connection` object if only the connection configuration is given. Sets global QoS settings,\n-    # which will be applied to the entire `Channel`.\n+    # Initializes a Listener object with the given `rabbitmq:Connection` object or connection configurations.\n+    # Creates a `rabbitmq:Connection` object if only the connection configuration is given. Sets global QoS settings,\n+    # which will be applied to the entire `rabbitmq:Channel`.\n     #\n-    # + connectionOrConnectionConfig - Holds a Ballerina RabbitMQ `Connection` object or the connection parameters.\n+    # + connectionOrConnectionConfig - A `rabbitmq:Connection` object or the connection configurations.\n     # + prefetchCount - Maximum number of messages that the server will deliver, 0 if unlimited.\n-    #                      Unless explicitly given, this value is 10 by default.\n-    # + prefetchSize - Maximum amount of content (measured in octets) that the server will deliver, 0 if unlimited.\n+    #                   Unless explicitly given, this value is 10 by default.\n+    # + prefetchSize - Maximum amount of content (measured in octets) that the server will deliver, 0 if unlimited", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzU1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieve the `rabbitmq:Channel` which initializes this `rabbitmq:Listener`.\n          \n          \n            \n                # Retrieve the `rabbitmq:Channel`, which initializes this `rabbitmq:Listener`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406647553", "createdAt": "2020-04-10T07:52:15Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -43,48 +43,48 @@ public type Listener object {\n         }\n     }\n \n-    # Attaches the service to the `Listener` endpoint.\n+    # Attaches the service to the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + name - Name of the service.\n-    # + return - Nil or error upon failure to register service.\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - () or else a `rabbitmq:Error` upon failure to register service\n     public function __attach(service s, string? name = ()) returns error? {\n         return registerListener(self, s);\n     }\n \n     # Starts the consuming messages on all attached services.\n     #\n-    # + return - Nil or error upon failure to start.\n+    # + return - () or else a `rabbitmq:Error` upon failure to start\n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    # Stops consuming messages and detaches the service from the `Listener` endpoint.\n+    # Stops consuming messages and detaches the service from the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + return - Nil or error upon failure to detach service.\n+    # + s - Type descriptor of the service\n+    # + return - () or else  a `rabbitmq:Error` upon failure to detach service\n     public function __detach(service s) returns error? {\n         return detach(self, s);\n     }\n \n     # Stops consuming messages through all consumer services by terminating the connection and all its channels.\n     #\n-    # + return - Nil or error upon failure to close the `ChannelListener`\n+    # + return - () or else  a `rabbitmq:Error` upon failure to close the ChannelListener\n     public function __gracefulStop() returns error? {\n         return stop(self);\n     }\n \n     # Stops consuming messages through all consumer services and terminate the connection\n     # with the server.\n     #\n-    # + return - Nil or error upon failure to close ChannelListener.\n+    # + return - () or else  a `rabbitmq:Error` upon failure to close ChannelListener.\n     public function __immediateStop() returns error? {\n         return abortConnection(self);\n     }\n \n-    # Retrieve the `Channel` which initializes this `Listener`.\n+    # Retrieve the `rabbitmq:Channel` which initializes this `rabbitmq:Listener`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzczNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + prefetchCount - Maximum number of messages that the server will deliver, 0 if unlimited.\n          \n          \n            \n            # + prefetchCount - Maximum number of messages that the server will deliver and 0 if unlimited.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406647734", "createdAt": "2020-04-10T07:52:51Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -94,21 +94,21 @@ public type Listener object {\n     }\n };\n \n-# Represents the list of parameters required to create a subscription.\n+# Configurations required to create a subscription.\n #\n-# + queueConfig - Specifies configuration details about the queue to be subscribed to.\n-# + ackMode - Type of acknowledgement mode.\n+# + queueConfig - Configurations of the queue to be subscribed\n+# + ackMode - Type of acknowledgement mode\n # + prefetchCount - Maximum number of messages that the server will deliver, 0 if unlimited.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzkwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + prefetchSize - Maximum amount of content (measured in octets) that the server will deliver, 0 if unlimited\n          \n          \n            \n            # + prefetchSize - Maximum amount of content (measured in octets) that the server will deliver and 0 if unlimited", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406647901", "createdAt": "2020-04-10T07:53:19Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -94,21 +94,21 @@ public type Listener object {\n     }\n };\n \n-# Represents the list of parameters required to create a subscription.\n+# Configurations required to create a subscription.\n #\n-# + queueConfig - Specifies configuration details about the queue to be subscribed to.\n-# + ackMode - Type of acknowledgement mode.\n+# + queueConfig - Configurations of the queue to be subscribed\n+# + ackMode - Type of acknowledgement mode\n # + prefetchCount - Maximum number of messages that the server will deliver, 0 if unlimited.\n-#                      Unless explicitly given, this value is 10 by default.\n-# + prefetchSize - Maximum amount of content (measured in octets) that the server will deliver, 0 if unlimited.\n+#                   Unless explicitly given, this value is 10 by default.\n+# + prefetchSize - Maximum amount of content (measured in octets) that the server will deliver, 0 if unlimited", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0Nzk4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + multiple - `true` to acknowledge all messages up to and including the message called on;\n          \n          \n            \n            # + multiple - `true` to acknowledge all messages up to and including the message called on and", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406647984", "createdAt": "2020-04-10T07:53:35Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -25,23 +25,29 @@ public type Message client object {\n    private boolean ackStatus = false;\n    private boolean autoAck = true;\n \n-   # Acknowledge one or several received messages.\n-   #\n-   # + multiple - `true` to acknowledge all messages up to and including the message called on,\n-   #                `false` to acknowledge just the message called on.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Acknowledges one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? ackResult = message->basicAck(true);\n+# ```\n+#\n+# + multiple - `true` to acknowledge all messages up to and including the message called on;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0ODEwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + multiple - `true` to reject all messages up to and including the message called on;\n          \n          \n            \n            # + multiple - `true` to reject all messages up to and including the message called on and", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406648109", "createdAt": "2020-04-10T07:53:53Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -25,23 +25,29 @@ public type Message client object {\n    private boolean ackStatus = false;\n    private boolean autoAck = true;\n \n-   # Acknowledge one or several received messages.\n-   #\n-   # + multiple - `true` to acknowledge all messages up to and including the message called on,\n-   #                `false` to acknowledge just the message called on.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Acknowledges one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? ackResult = message->basicAck(true);\n+# ```\n+#\n+# + multiple - `true` to acknowledge all messages up to and including the message called on;\n+#              `false` to acknowledge just the message called on\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n    public remote function basicAck(boolean multiple = false) returns Error? {\n         var result = nativeBasicAck(self.amqpChannel, self.deliveryTag, multiple, self.autoAck, self.ackStatus);\n         self.ackStatus = true;\n         return result;\n    }\n \n-   # Reject one or several received messages.\n-   #\n-   # + multiple - `true` to reject all messages up to and including the message called on;\n-   #                `false` to reject just the message called on.\n-   # + requeue - `true` if the rejected message(s) should be re-queued rather than discarded/dead-lettered.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Rejects one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? nackResult = message->basicNack(true, requeue = false);\n+# ```\n+#\n+# + multiple - `true` to reject all messages up to and including the message called on;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0ODI2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Message data as float value or else a `rabbitmq:Error` if an error is encountered\n          \n          \n            \n            # + return - Message data as a float value or else a `rabbitmq:Error` if an error is encountered", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406648261", "createdAt": "2020-04-10T07:54:22Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -92,37 +107,52 @@ public type Message client object {\n         }\n    }\n \n-    # Retrieves the float content of the RabbitMQ message.\n-    #\n-    # + return - float containing message data or error if an error is encountered.\n-    public function getFloatContent() returns @tainted float | Error {\n+# Retrieves the float content of the RabbitMQ message.\n+# ```ballerina\n+# float|rabbitmq:Error msgContent = message.getFloatContent();\n+# ```\n+#\n+# + return - Message data as float value or else a `rabbitmq:Error` if an error is encountered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0ODMxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Message data as int value or else a `rabbitmq:Error` if an error is encountered\n          \n          \n            \n            # + return - Message data as an int value or else a `rabbitmq:Error` if an error is encountered", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406648317", "createdAt": "2020-04-10T07:54:33Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -92,37 +107,52 @@ public type Message client object {\n         }\n    }\n \n-    # Retrieves the float content of the RabbitMQ message.\n-    #\n-    # + return - float containing message data or error if an error is encountered.\n-    public function getFloatContent() returns @tainted float | Error {\n+# Retrieves the float content of the RabbitMQ message.\n+# ```ballerina\n+# float|rabbitmq:Error msgContent = message.getFloatContent();\n+# ```\n+#\n+# + return - Message data as float value or else a `rabbitmq:Error` if an error is encountered\n+   public function getFloatContent() returns @tainted float | Error {\n         return  nativeGetFloatContent(self.messageContent);\n-    }\n+   }\n \n-   # Retrieves the int content of the RabbitMQ message.\n-   #\n-   # + return - int containing message data or error if an error is encountered.\n+# Retrieves the int content of the RabbitMQ message.\n+# ```ballerina\n+# int|rabbitmq:Error msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as int value or else a `rabbitmq:Error` if an error is encountered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0ODQ1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Message data as byte array\n          \n          \n            \n            # + return - Message data as a byte array", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406648453", "createdAt": "2020-04-10T07:54:53Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -92,37 +107,52 @@ public type Message client object {\n         }\n    }\n \n-    # Retrieves the float content of the RabbitMQ message.\n-    #\n-    # + return - float containing message data or error if an error is encountered.\n-    public function getFloatContent() returns @tainted float | Error {\n+# Retrieves the float content of the RabbitMQ message.\n+# ```ballerina\n+# float|rabbitmq:Error msgContent = message.getFloatContent();\n+# ```\n+#\n+# + return - Message data as float value or else a `rabbitmq:Error` if an error is encountered\n+   public function getFloatContent() returns @tainted float | Error {\n         return  nativeGetFloatContent(self.messageContent);\n-    }\n+   }\n \n-   # Retrieves the int content of the RabbitMQ message.\n-   #\n-   # + return - int containing message data or error if an error is encountered.\n+# Retrieves the int content of the RabbitMQ message.\n+# ```ballerina\n+# int|rabbitmq:Error msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as int value or else a `rabbitmq:Error` if an error is encountered\n    public function getIntContent() returns @tainted int | Error {\n        return nativeGetIntContent(self.messageContent);\n    }\n \n-   # Retrieves the byte array content of the RabbitMQ message.\n-   #\n-   # + return - byte array containing message data or error if an error is encountered.\n+# Retrieves the byte array content of the RabbitMQ message.\n+# ```ballerina\n+# byte[] msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as byte array", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0ODUxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves the json content of the RabbitMQ message.\n          \n          \n            \n            # Retrieves the JSON content of the RabbitMQ message.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406648510", "createdAt": "2020-04-10T07:55:01Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -92,37 +107,52 @@ public type Message client object {\n         }\n    }\n \n-    # Retrieves the float content of the RabbitMQ message.\n-    #\n-    # + return - float containing message data or error if an error is encountered.\n-    public function getFloatContent() returns @tainted float | Error {\n+# Retrieves the float content of the RabbitMQ message.\n+# ```ballerina\n+# float|rabbitmq:Error msgContent = message.getFloatContent();\n+# ```\n+#\n+# + return - Message data as float value or else a `rabbitmq:Error` if an error is encountered\n+   public function getFloatContent() returns @tainted float | Error {\n         return  nativeGetFloatContent(self.messageContent);\n-    }\n+   }\n \n-   # Retrieves the int content of the RabbitMQ message.\n-   #\n-   # + return - int containing message data or error if an error is encountered.\n+# Retrieves the int content of the RabbitMQ message.\n+# ```ballerina\n+# int|rabbitmq:Error msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as int value or else a `rabbitmq:Error` if an error is encountered\n    public function getIntContent() returns @tainted int | Error {\n        return nativeGetIntContent(self.messageContent);\n    }\n \n-   # Retrieves the byte array content of the RabbitMQ message.\n-   #\n-   # + return - byte array containing message data or error if an error is encountered.\n+# Retrieves the byte array content of the RabbitMQ message.\n+# ```ballerina\n+# byte[] msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as byte array\n    public function getByteArrayContent() returns @tainted byte[] {\n         return self.messageContent;\n    }\n \n-   # Retrieves the json content of the RabbitMQ message.\n-   #\n-   # + return - json containing message data or error if an error is encountered.\n+# Retrieves the json content of the RabbitMQ message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0ODU3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Message data as json value  or else a `rabbitmq:Error` if an error is encountered\n          \n          \n            \n            # + return - Message data as a JSON value  or else a `rabbitmq:Error` if an error is encountered", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406648579", "createdAt": "2020-04-10T07:55:10Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -92,37 +107,52 @@ public type Message client object {\n         }\n    }\n \n-    # Retrieves the float content of the RabbitMQ message.\n-    #\n-    # + return - float containing message data or error if an error is encountered.\n-    public function getFloatContent() returns @tainted float | Error {\n+# Retrieves the float content of the RabbitMQ message.\n+# ```ballerina\n+# float|rabbitmq:Error msgContent = message.getFloatContent();\n+# ```\n+#\n+# + return - Message data as float value or else a `rabbitmq:Error` if an error is encountered\n+   public function getFloatContent() returns @tainted float | Error {\n         return  nativeGetFloatContent(self.messageContent);\n-    }\n+   }\n \n-   # Retrieves the int content of the RabbitMQ message.\n-   #\n-   # + return - int containing message data or error if an error is encountered.\n+# Retrieves the int content of the RabbitMQ message.\n+# ```ballerina\n+# int|rabbitmq:Error msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as int value or else a `rabbitmq:Error` if an error is encountered\n    public function getIntContent() returns @tainted int | Error {\n        return nativeGetIntContent(self.messageContent);\n    }\n \n-   # Retrieves the byte array content of the RabbitMQ message.\n-   #\n-   # + return - byte array containing message data or error if an error is encountered.\n+# Retrieves the byte array content of the RabbitMQ message.\n+# ```ballerina\n+# byte[] msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as byte array\n    public function getByteArrayContent() returns @tainted byte[] {\n         return self.messageContent;\n    }\n \n-   # Retrieves the json content of the RabbitMQ message.\n-   #\n-   # + return - json containing message data or error if an error is encountered.\n+# Retrieves the json content of the RabbitMQ message.\n+# ```ballerina\n+# json|rabbitmq:Error msgContent = message.getJSONContent();\n+# ```\n+#\n+# + return - Message data as json value  or else a `rabbitmq:Error` if an error is encountered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0ODY2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves the xml content of the RabbitMQ message.\n          \n          \n            \n            # Retrieves the XML content of the RabbitMQ message.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406648666", "createdAt": "2020-04-10T07:55:20Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -92,37 +107,52 @@ public type Message client object {\n         }\n    }\n \n-    # Retrieves the float content of the RabbitMQ message.\n-    #\n-    # + return - float containing message data or error if an error is encountered.\n-    public function getFloatContent() returns @tainted float | Error {\n+# Retrieves the float content of the RabbitMQ message.\n+# ```ballerina\n+# float|rabbitmq:Error msgContent = message.getFloatContent();\n+# ```\n+#\n+# + return - Message data as float value or else a `rabbitmq:Error` if an error is encountered\n+   public function getFloatContent() returns @tainted float | Error {\n         return  nativeGetFloatContent(self.messageContent);\n-    }\n+   }\n \n-   # Retrieves the int content of the RabbitMQ message.\n-   #\n-   # + return - int containing message data or error if an error is encountered.\n+# Retrieves the int content of the RabbitMQ message.\n+# ```ballerina\n+# int|rabbitmq:Error msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as int value or else a `rabbitmq:Error` if an error is encountered\n    public function getIntContent() returns @tainted int | Error {\n        return nativeGetIntContent(self.messageContent);\n    }\n \n-   # Retrieves the byte array content of the RabbitMQ message.\n-   #\n-   # + return - byte array containing message data or error if an error is encountered.\n+# Retrieves the byte array content of the RabbitMQ message.\n+# ```ballerina\n+# byte[] msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as byte array\n    public function getByteArrayContent() returns @tainted byte[] {\n         return self.messageContent;\n    }\n \n-   # Retrieves the json content of the RabbitMQ message.\n-   #\n-   # + return - json containing message data or error if an error is encountered.\n+# Retrieves the json content of the RabbitMQ message.\n+# ```ballerina\n+# json|rabbitmq:Error msgContent = message.getJSONContent();\n+# ```\n+#\n+# + return - Message data as json value  or else a `rabbitmq:Error` if an error is encountered\n    public function getJSONContent() returns @tainted json | Error {\n         return nativeGetJSONContent(self.messageContent);\n    }\n \n-   # Retrieves the xml content of the RabbitMQ message.\n-   #\n-   # + return - xml containing message data or error if an error is encountered.\n+# Retrieves the xml content of the RabbitMQ message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0ODcyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Message data as xml value or else a `rabbitmq:Error` if an error is encountered\n          \n          \n            \n            # + return - Message data as an XML value or else a `rabbitmq:Error` if an error is encountered", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406648725", "createdAt": "2020-04-10T07:55:30Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -92,37 +107,52 @@ public type Message client object {\n         }\n    }\n \n-    # Retrieves the float content of the RabbitMQ message.\n-    #\n-    # + return - float containing message data or error if an error is encountered.\n-    public function getFloatContent() returns @tainted float | Error {\n+# Retrieves the float content of the RabbitMQ message.\n+# ```ballerina\n+# float|rabbitmq:Error msgContent = message.getFloatContent();\n+# ```\n+#\n+# + return - Message data as float value or else a `rabbitmq:Error` if an error is encountered\n+   public function getFloatContent() returns @tainted float | Error {\n         return  nativeGetFloatContent(self.messageContent);\n-    }\n+   }\n \n-   # Retrieves the int content of the RabbitMQ message.\n-   #\n-   # + return - int containing message data or error if an error is encountered.\n+# Retrieves the int content of the RabbitMQ message.\n+# ```ballerina\n+# int|rabbitmq:Error msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as int value or else a `rabbitmq:Error` if an error is encountered\n    public function getIntContent() returns @tainted int | Error {\n        return nativeGetIntContent(self.messageContent);\n    }\n \n-   # Retrieves the byte array content of the RabbitMQ message.\n-   #\n-   # + return - byte array containing message data or error if an error is encountered.\n+# Retrieves the byte array content of the RabbitMQ message.\n+# ```ballerina\n+# byte[] msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as byte array\n    public function getByteArrayContent() returns @tainted byte[] {\n         return self.messageContent;\n    }\n \n-   # Retrieves the json content of the RabbitMQ message.\n-   #\n-   # + return - json containing message data or error if an error is encountered.\n+# Retrieves the json content of the RabbitMQ message.\n+# ```ballerina\n+# json|rabbitmq:Error msgContent = message.getJSONContent();\n+# ```\n+#\n+# + return - Message data as json value  or else a `rabbitmq:Error` if an error is encountered\n    public function getJSONContent() returns @tainted json | Error {\n         return nativeGetJSONContent(self.messageContent);\n    }\n \n-   # Retrieves the xml content of the RabbitMQ message.\n-   #\n-   # + return - xml containing message data or error if an error is encountered.\n+# Retrieves the xml content of the RabbitMQ message.\n+# ```ballerina\n+# xml|rabbitmq:Error msgContent = message.getXMLContent();\n+# ```\n+#\n+# + return - Message data as xml value or else a `rabbitmq:Error` if an error is encountered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0ODk4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite\n          \n          \n            \n            # + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds and zero for infinite", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406648988", "createdAt": "2020-04-10T07:56:15Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -86,18 +86,18 @@ public type ExchangeConfiguration record {|\n     map<any>? arguments = ();\n |};\n \n-# Holds the parameters used to create a RabbitMQ `Connection`.\n+# Configurations used to create a `rabbitmq:Connection`.\n #\n-# + host - The host used for establishing the connection.\n-# + port - The port used for establishing the connection.\n-# + username - The username used for establishing the connection.\n-# + password - The password used for establishing the connection.\n-# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite.\n-# + handshakeTimeoutMillis -  The AMQP 0-9-1 protocol handshake timeout in milliseconds.\n+# + host - The host used for establishing the connection\n+# + port - The port used for establishing the connection\n+# + username - The username used for establishing the connection\n+# + password - The password used for establishing the connection\n+# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0OTA4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + shutdownTimeoutInMillis - Shutdown timeout in milliseconds; zero for infinite; default 10000. If consumers exceed\n          \n          \n            \n            # + shutdownTimeoutInMillis - Shutdown timeout in milliseconds, zero for infinite, and default is 10000. If consumers exceed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406649083", "createdAt": "2020-04-10T07:56:36Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -86,18 +86,18 @@ public type ExchangeConfiguration record {|\n     map<any>? arguments = ();\n |};\n \n-# Holds the parameters used to create a RabbitMQ `Connection`.\n+# Configurations used to create a `rabbitmq:Connection`.\n #\n-# + host - The host used for establishing the connection.\n-# + port - The port used for establishing the connection.\n-# + username - The username used for establishing the connection.\n-# + password - The password used for establishing the connection.\n-# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite.\n-# + handshakeTimeoutMillis -  The AMQP 0-9-1 protocol handshake timeout in milliseconds.\n+# + host - The host used for establishing the connection\n+# + port - The port used for establishing the connection\n+# + username - The username used for establishing the connection\n+# + password - The password used for establishing the connection\n+# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite\n+# + handshakeTimeoutMillis -  The AMQP 0-9-1 protocol handshake timeout in milliseconds\n # + shutdownTimeoutInMillis - Shutdown timeout in milliseconds; zero for infinite; default 10000. If consumers exceed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0OTE1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                     this timeout then any remaining queued deliveries (and other Consumer callbacks) will be lost\n          \n          \n            \n            #                     this timeout, then any remaining queued deliveries (and other Consumer callbacks) will be lost", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406649151", "createdAt": "2020-04-10T07:56:46Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -86,18 +86,18 @@ public type ExchangeConfiguration record {|\n     map<any>? arguments = ();\n |};\n \n-# Holds the parameters used to create a RabbitMQ `Connection`.\n+# Configurations used to create a `rabbitmq:Connection`.\n #\n-# + host - The host used for establishing the connection.\n-# + port - The port used for establishing the connection.\n-# + username - The username used for establishing the connection.\n-# + password - The password used for establishing the connection.\n-# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite.\n-# + handshakeTimeoutMillis -  The AMQP 0-9-1 protocol handshake timeout in milliseconds.\n+# + host - The host used for establishing the connection\n+# + port - The port used for establishing the connection\n+# + username - The username used for establishing the connection\n+# + password - The password used for establishing the connection\n+# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite\n+# + handshakeTimeoutMillis -  The AMQP 0-9-1 protocol handshake timeout in milliseconds\n # + shutdownTimeoutInMillis - Shutdown timeout in milliseconds; zero for infinite; default 10000. If consumers exceed\n-#                     this timeout then any remaining queued deliveries (and other Consumer callbacks) will be lost.\n-# + heartbeatInSeconds - The initially requested heartbeat timeout in seconds; zero for none.\n-# + secureSocket - Configurations for facilitating secure connections.\n+#                     this timeout then any remaining queued deliveries (and other Consumer callbacks) will be lost", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0OTIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + heartbeatInSeconds - The initially requested heartbeat timeout in seconds; zero for none\n          \n          \n            \n            # + heartbeatInSeconds - The initially-requested heartbeat timeout in seconds and zero for none", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406649206", "createdAt": "2020-04-10T07:56:57Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -86,18 +86,18 @@ public type ExchangeConfiguration record {|\n     map<any>? arguments = ();\n |};\n \n-# Holds the parameters used to create a RabbitMQ `Connection`.\n+# Configurations used to create a `rabbitmq:Connection`.\n #\n-# + host - The host used for establishing the connection.\n-# + port - The port used for establishing the connection.\n-# + username - The username used for establishing the connection.\n-# + password - The password used for establishing the connection.\n-# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite.\n-# + handshakeTimeoutMillis -  The AMQP 0-9-1 protocol handshake timeout in milliseconds.\n+# + host - The host used for establishing the connection\n+# + port - The port used for establishing the connection\n+# + username - The username used for establishing the connection\n+# + password - The password used for establishing the connection\n+# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite\n+# + handshakeTimeoutMillis -  The AMQP 0-9-1 protocol handshake timeout in milliseconds\n # + shutdownTimeoutInMillis - Shutdown timeout in milliseconds; zero for infinite; default 10000. If consumers exceed\n-#                     this timeout then any remaining queued deliveries (and other Consumer callbacks) will be lost.\n-# + heartbeatInSeconds - The initially requested heartbeat timeout in seconds; zero for none.\n-# + secureSocket - Configurations for facilitating secure connections.\n+#                     this timeout then any remaining queued deliveries (and other Consumer callbacks) will be lost\n+# + heartbeatInSeconds - The initially requested heartbeat timeout in seconds; zero for none", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0OTMwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + verifyHostname - True, if hostname verification should be enabled\n          \n          \n            \n            # + verifyHostname - True if hostname verification should be enabled", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r406649304", "createdAt": "2020-04-10T07:57:11Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -110,12 +110,12 @@ public type ConnectionConfiguration record {|\n     SecureSocket? secureSocket = ();\n |};\n \n-# Provides configurations for facilitating secure connections.\n+# Configurations for facilitating secure connections.\n #\n-# + trustStore - Configurations associated with the TrustStore.\n-# + keyStore - Configurations associated with the KeyStore.\n-# + tlsVersion - TLS version.\n-# + verifyHostname - True, if hostname verification should be enabled.\n+# + trustStore - Configurations associated with the TrustStore\n+# + keyStore - Configurations associated with the KeyStore\n+# + tlsVersion - TLS version\n+# + verifyHostname - True, if hostname verification should be enabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb082b9e62c8eefb0b92b8d01eb3639413c25a5"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0ce64fc3c7c18305cd64233e2caad98f6ab20373", "committedDate": "2020-04-10T12:24:38Z", "message": "Apply suggestions from code review\r\n\r\nFix review suggestions\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODY1NjAy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#pullrequestreview-393865602", "createdAt": "2020-04-15T15:05:00Z", "commit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowNTowMVrOGF-LyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxOToxOVrOGF-2Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNDg4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [RabbitMQ](https://www.rabbitmq.com/) is one of the most popular open-source enterprise messaging systems modelled on the Advanced Message Queuing Protocol (AMQP) standard. This guide covers the Ballerina RabbitMQ module and its public API. This module contains the functionality to support messaging with RabbitMQ broker (AMQP 0-9-1). It assumes that the most recent version of Ballerina is used and is built on top of the basics.\n          \n          \n            \n            [RabbitMQ](https://www.rabbitmq.com/) is one of the most popular open-source enterprise messaging systems modelled on the Advanced Message Queuing Protocol (AMQP) standard. This guide covers the Ballerina RabbitMQ module and its public API. This module contains the functionality to support messaging with the RabbitMQ broker (AMQP 0-9-1). It assumes that the most recent version of Ballerina is used and is built on top of the basics.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408914889", "createdAt": "2020-04-15T15:05:01Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/Module.md", "diffHunk": "@@ -1,5 +1,3 @@\n-## Module overview\n-\n [RabbitMQ](https://www.rabbitmq.com/) is one of the most popular open-source enterprise messaging systems modelled on the Advanced Message Queuing Protocol (AMQP) standard. This guide covers the Ballerina RabbitMQ module and its public API. This module contains the functionality to support messaging with RabbitMQ broker (AMQP 0-9-1). It assumes that the most recent version of Ballerina is used and is built on top of the basics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNTYyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It is possible to encrypt the communication between the Ballerina client and the broker by using TLS-enabled connections. Client and server authentication (peer verification) is also supported. To enable the TLS support in the RabbitMQ broker, the node has to be [configured](https://www.rabbitmq.com/ssl.html#enabling-tls) to know the location of the Certificate Authority bundle, the server's certificate file, and the server's key. A TLS listener should also be configured to know what port to listen to for TLS-enabled client connections.\n          \n          \n            \n            It is possible to encrypt the communication between the Ballerina client and the broker by using TLS-enabled connections. Client and server authentication (peer verification) is also supported. To enable the TLS support in the RabbitMQ broker, the node has to be [configured](https://www.rabbitmq.com/ssl.html#enabling-tls) to know the location of the Certificate Authority bundle, the server's certificate file, and the server's key. A TLS listener should also be configured to know which port to listen for TLS-enabled client connections.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408915628", "createdAt": "2020-04-15T15:05:59Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/Module.md", "diffHunk": "@@ -20,19 +18,19 @@ The core APIs are `Connection`, `Channel`, and `Message` representing an AMQP 0-\n                                             password: \u201cguest\u201d });\n ```\n \n-The `Connection` created above can then be used to open a `Channel`.\n+The `rabbitmq:Connection` created above can then be used to open a `rabbitmq:Channel`.\n \n ```ballerina\n    rabbitmq:Channel newChannel = new(connection);\n ```\n \n-The `Channel` can now be used to send and receive messages as described in the subsequent sections. \n+The `rabbitmq:Channel` can now be used to send and receive messages as described in the subsequent sections. \n \n #### Enabling TLS\n \n It is possible to encrypt the communication between the Ballerina client and the broker by using TLS-enabled connections. Client and server authentication (peer verification) is also supported. To enable the TLS support in the RabbitMQ broker, the node has to be [configured](https://www.rabbitmq.com/ssl.html#enabling-tls) to know the location of the Certificate Authority bundle, the server's certificate file, and the server's key. A TLS listener should also be configured to know what port to listen to for TLS-enabled client connections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNjc2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Next, the above function calls bind the queue to the exchange with the given routing key. \n          \n          \n            \n            Next, the above function is called to bind the queue to the exchange with the given routing key.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408916760", "createdAt": "2020-04-15T15:07:38Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/Module.md", "diffHunk": "@@ -87,26 +75,17 @@ This sample code will declare,\n Next, the above function calls bind the queue to the exchange with the given routing key. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNzk4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Multiple consumer services can be bound to one Ballerina RabbitMQ `rabbitmq:Listener`. The queue, which the service is listening to is configured in the `rabbitmq:ServiceConfig` annotation of the service. \n          \n          \n            \n            Multiple consumer services can be bound to one Ballerina RabbitMQ `rabbitmq:Listener`. The queue to which the service is listening is configured in the `rabbitmq:ServiceConfig` annotation of the service.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408917981", "createdAt": "2020-04-15T15:09:10Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/Module.md", "diffHunk": "@@ -117,42 +96,39 @@ This sample code will declare,\n \n - Delete a queue:\n ```ballerina\n-   newChannel->queueDelete(\"MyQueue\");\n+   rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n ```\n - Delete a queue only if it is empty:\n ```ballerina\n-   newChannel->queueDelete(\"MyQueue\", false, true);\n+   rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\", false, true);\n ```\n - Delete a queue only if it is unused (does not have any consumers):\n ```ballerina\n-   newChannel->queueDelete(\"MyQueue\", true, false);\n+   rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\", true, false);\n ```\n - Delete an exchange:\n ```ballerina\n-   newChannel->exchangeDelete(\"MyExchange\");\n+   rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n ```\n - Purge a queue (delete all of its messages):\n ```ballerina\n-   newChannel->queuePurge(\"MyQueue\");\n+   rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n ```\n \n ### Publishing messages\n \n To publish a message to an exchange, use the `basicPublish()` function as follows:\n \n ```ballerina\n-   var sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n-   if (sendResult is error) {\n-        io:println(\"An error occurred while sending the message to MyQueue using newChannel.\");\n-   }\n+   rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n ``` \n Setting other properties of the message such as routing headers can be done by using the `BasicProperties` record with the appropriate values. \n \n ### Consuming messages using consumer services\n \n-The most efficient way to receive messages is to set up a subscription using a Ballerina RabbitMQ `Listener` and any number of consumer services. The messages will then be delivered automatically as they arrive rather than having to be explicitly requested. \n+The most efficient way to receive messages is to set up a subscription using a Ballerina RabbitMQ `rabbitmq:Listener` and any number of consumer services. The messages will then be delivered automatically as they arrive rather than having to be explicitly requested. \n \n-Multiple consumer services can be bound to one Ballerina RabbitMQ `Listener`. The queue, which the service is listening to is configured in the `ServiceConfig` annotation of the service. \n+Multiple consumer services can be bound to one Ballerina RabbitMQ `rabbitmq:Listener`. The queue, which the service is listening to is configured in the `rabbitmq:ServiceConfig` annotation of the service. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxODIwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            >**Note:** The default thread pool size used in Ballerina is number of processors available * 2. You can configure the thread pool size by using the `BALLERINA_MAX_POOL_SIZE` environment variable.\n          \n          \n            \n            >**Note:** The default thread pool size used in Ballerina is the number of processors available * 2. You can configure the thread pool size by using the `BALLERINA_MAX_POOL_SIZE` environment variable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408918202", "createdAt": "2020-04-15T15:09:27Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/Module.md", "diffHunk": "@@ -186,3 +157,11 @@ The negatively-acknowledged (rejected) messages can be re-queued.\n \n \n >**Note:** The default thread pool size used in Ballerina is number of processors available * 2. You can configure the thread pool size by using the `BALLERINA_MAX_POOL_SIZE` environment variable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxODkwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Declares a non-exclusive, auto-delete, non-durable queue, or queue with the given configurations.\n          \n          \n            \n            # Declares a non-exclusive, auto-delete, or non-durable queue with the given configurations.\n          \n      \n    \n    \n  \n\nNot clear are all these queues?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408918906", "createdAt": "2020-04-15T15:10:21Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -16,26 +16,29 @@\n \n import ballerina/java;\n \n-# Ballerina interface to provide AMQP `Channel` related functionality.\n+# The Ballerina interface to provide AMQP Channel related functionality.\n public type Channel client object {\n \n     handle amqpChannel;\n \n-    # Initializes a Ballerina `Channel` object with the given `Connection` object or connection parameters.\n-    # Creates a `Connection` object if only the connection configuration is given.\n+    # Initializes a `rabbitmq:Channel` object with the given `rabbitmq:Connection` object or connection configuration.\n+    # Creates a `rabbitmq:Connection` object if only the connection configuration is given.\n     #\n-    # + connectionOrConnectionConfig - Holds a Ballerina RabbitMQ `Connection` object or the connection parameters.\n+    # + connectionOrConnectionConfig - A `rabbitmq:Connection` object or a connection configuration\n     public function __init(ConnectionConfiguration|Connection connectionOrConnectionConfig) {\n         Connection connection = (connectionOrConnectionConfig is Connection) ?\n                                 connectionOrConnectionConfig : new Connection(connectionOrConnectionConfig);\n         self.amqpChannel = createChannel(connection.amqpConnection);\n     }\n \n-    # Actively declare a non-exclusive, auto-delete, non-durable queue, or queue with the given configurations.\n-    #\n-    # + queueConfig - Holds the parameters required to declare a queue.\n-    # + return - The name of the queue if autogenerated or nil if the queue was successfully\n-    #               generated with the given parameters. An error is returned if an I/O error is encountered.\n+# Declares a non-exclusive, auto-delete, non-durable queue, or queue with the given configurations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxOTA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The name of the queue if autogenerated or else () if the queue was successfully\n          \n          \n            \n            # + return - The name of the queue if autogenerated, `()` if the queue was successfully", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408919062", "createdAt": "2020-04-15T15:10:34Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -16,26 +16,29 @@\n \n import ballerina/java;\n \n-# Ballerina interface to provide AMQP `Channel` related functionality.\n+# The Ballerina interface to provide AMQP Channel related functionality.\n public type Channel client object {\n \n     handle amqpChannel;\n \n-    # Initializes a Ballerina `Channel` object with the given `Connection` object or connection parameters.\n-    # Creates a `Connection` object if only the connection configuration is given.\n+    # Initializes a `rabbitmq:Channel` object with the given `rabbitmq:Connection` object or connection configuration.\n+    # Creates a `rabbitmq:Connection` object if only the connection configuration is given.\n     #\n-    # + connectionOrConnectionConfig - Holds a Ballerina RabbitMQ `Connection` object or the connection parameters.\n+    # + connectionOrConnectionConfig - A `rabbitmq:Connection` object or a connection configuration\n     public function __init(ConnectionConfiguration|Connection connectionOrConnectionConfig) {\n         Connection connection = (connectionOrConnectionConfig is Connection) ?\n                                 connectionOrConnectionConfig : new Connection(connectionOrConnectionConfig);\n         self.amqpChannel = createChannel(connection.amqpConnection);\n     }\n \n-    # Actively declare a non-exclusive, auto-delete, non-durable queue, or queue with the given configurations.\n-    #\n-    # + queueConfig - Holds the parameters required to declare a queue.\n-    # + return - The name of the queue if autogenerated or nil if the queue was successfully\n-    #               generated with the given parameters. An error is returned if an I/O error is encountered.\n+# Declares a non-exclusive, auto-delete, non-durable queue, or queue with the given configurations.\n+# ```ballerina\n+# string|rabbitmq:Error? queueResult = newChannel->queueDeclare();\n+# ```\n+#\n+# + queueConfig - Configurations required to declare a queue\n+# + return - The name of the queue if autogenerated or else () if the queue was successfully", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxOTU3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            generated with the given parameters. A `rabbitmq:Error` is returned if an I/O error is encountered\n          \n          \n            \n            #            generated with the given parameters, or else a `rabbitmq:Error` if an I/O error is encountered", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408919573", "createdAt": "2020-04-15T15:11:14Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -16,26 +16,29 @@\n \n import ballerina/java;\n \n-# Ballerina interface to provide AMQP `Channel` related functionality.\n+# The Ballerina interface to provide AMQP Channel related functionality.\n public type Channel client object {\n \n     handle amqpChannel;\n \n-    # Initializes a Ballerina `Channel` object with the given `Connection` object or connection parameters.\n-    # Creates a `Connection` object if only the connection configuration is given.\n+    # Initializes a `rabbitmq:Channel` object with the given `rabbitmq:Connection` object or connection configuration.\n+    # Creates a `rabbitmq:Connection` object if only the connection configuration is given.\n     #\n-    # + connectionOrConnectionConfig - Holds a Ballerina RabbitMQ `Connection` object or the connection parameters.\n+    # + connectionOrConnectionConfig - A `rabbitmq:Connection` object or a connection configuration\n     public function __init(ConnectionConfiguration|Connection connectionOrConnectionConfig) {\n         Connection connection = (connectionOrConnectionConfig is Connection) ?\n                                 connectionOrConnectionConfig : new Connection(connectionOrConnectionConfig);\n         self.amqpChannel = createChannel(connection.amqpConnection);\n     }\n \n-    # Actively declare a non-exclusive, auto-delete, non-durable queue, or queue with the given configurations.\n-    #\n-    # + queueConfig - Holds the parameters required to declare a queue.\n-    # + return - The name of the queue if autogenerated or nil if the queue was successfully\n-    #               generated with the given parameters. An error is returned if an I/O error is encountered.\n+# Declares a non-exclusive, auto-delete, non-durable queue, or queue with the given configurations.\n+# ```ballerina\n+# string|rabbitmq:Error? queueResult = newChannel->queueDeclare();\n+# ```\n+#\n+# + queueConfig - Configurations required to declare a queue\n+# + return - The name of the queue if autogenerated or else () if the queue was successfully\n+#            generated with the given parameters. A `rabbitmq:Error` is returned if an I/O error is encountered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDA5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408920094", "createdAt": "2020-04-15T15:11:57Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDI3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408920276", "createdAt": "2020-04-15T15:12:10Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408920497", "createdAt": "2020-04-15T15:12:27Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDkwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n          \n          \n            \n            # If the `ifUnused` or `ifEmpty` parameters are given, the queue is checked before deleting.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408920900", "createdAt": "2020-04-15T15:12:56Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTg4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + ifUnused - True if the queue should be deleted only if not in use\n          \n          \n            \n            # + ifUnused - True if the queue should be deleted only if it's not in use", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408921884", "createdAt": "2020-04-15T15:14:11Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTk2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + ifEmpty - True if the queue should be deleted only if empty\n          \n          \n            \n            # + ifEmpty - True if the queue should be deleted only if it's empty", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408921960", "createdAt": "2020-04-15T15:14:19Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMjA2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408922064", "createdAt": "2020-04-15T15:14:29Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMjM4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408922388", "createdAt": "2020-04-15T15:14:54Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMjQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Purges the contents of the given queue.\n          \n          \n            \n            # Purges the content of the given queue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408922497", "createdAt": "2020-04-15T15:15:03Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMjYyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408922620", "createdAt": "2020-04-15T15:15:13Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMjc3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + ackMode - Type of acknowledgement mode\n          \n          \n            \n            # + ackMode - Type of the acknowledgement mode", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408922779", "createdAt": "2020-04-15T15:15:26Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue providing direct access to the messages in the queue.\n+# ```ballerina\n+# rabbitmq:Message|rabbitmq:Error getResult = newChannel->basicGet(\"MyQueue\", rabbitmq:AUTO_ACK);\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + ackMode - Type of acknowledgement mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMzE2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408923163", "createdAt": "2020-04-15T15:15:57Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue providing direct access to the messages in the queue.\n+# ```ballerina\n+# rabbitmq:Message|rabbitmq:Error getResult = newChannel->basicGet(\"MyQueue\", rabbitmq:AUTO_ACK);\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + ackMode - Type of acknowledgement mode\n+# + return - A `rabbitmq:Message` object containing the retrieved message data or else a`rabbitmq:Error` if an\n+#            I/O error is encountered\n     public remote function basicGet(string queueName, AcknowledgementMode ackMode) returns Message | Error {\n         boolean autoAck = ackMode is AUTO_ACK;\n         return nativeBasicGet(java:fromString(queueName), autoAck, self.amqpChannel);\n     }\n \n-    # Retrieve the Connection which carries this channel.\n-    #\n-    # + return - RabbitMQ Connection object or error if an I/O problem is encountered.\n+# Retrieves the connection, which carries this channel.\n+# ```ballerina\n+# rabbitmq:Connection|rabbitmq:Error connResult = newChannel.getConnection();\n+# ```\n+#\n+# + return - A `rabbitmq:Connection` object or else a `rabbitmq:Error` if an I/O error is encountered\n     public function getConnection() returns Connection | Error {\n         return nativeGetConnection(self.amqpChannel);\n     }\n \n-    # Closes the RabbitMQ `Channel`.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the channel.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Channel`.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newChannel.close();\n+# ```\n+#\n+# + closeCode - The close code (for information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the channel\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMzQxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408923410", "createdAt": "2020-04-15T15:16:15Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/channel.bal", "diffHunk": "@@ -45,103 +48,137 @@ public type Channel client object {\n         }\n     }\n \n-    # Actively declare a non-auto-delete, non-durable exchange with no extra arguments,\n-    # If the arguments are specified, then the exchange is declared accordingly.\n-    #\n-    # + exchangeConfig - Holds parameters required to declare an exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Declares a non-auto-delete, non-durable exchange with no extra arguments.\n+# If the arguments are specified, then the exchange is declared accordingly.\n+# ```ballerina\n+# rabbitmq:Error? exchangeResult = newChannel->exchangeDeclare({\n+#                                               exchangeName: \"MyExchange\",\n+#                                               exchangeType: rabbitmq:DIRECT_EXCHANGE,\n+#                                               durable: true,\n+#                                               autoDelete: true });\n+# ```\n+#\n+# + exchangeConfig - Configurations required to declare an exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDeclare(ExchangeConfiguration exchangeConfig) returns Error? {\n         return nativeExchangeDeclare(exchangeConfig, self.amqpChannel);\n     }\n \n-    # Binds a queue to an exchange with the given binding key.\n-    #\n-    # + queueName - Name of the queue.\n-    # + exchangeName - Name of the exchange.\n-    # + bindingKey - Binding key used to bind the queue to the exchange.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Binds a queue to an exchange with the given binding key.\n+# ```ballerina\n+# rabbitmq:Error? bindResult = newChannel.queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n+# ```\n+#\n+# + queueName - Name of the queue\n+# + exchangeName - Name of the exchange\n+# + bindingKey - Binding key used to bind the queue to the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueBind(string queueName, string exchangeName, string bindingKey) returns Error? {\n          return nativeQueueBind(java:fromString(queueName), java:fromString(exchangeName),\n                     java:fromString(bindingKey), self.amqpChannel);\n     }\n \n-    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n-    # protocol error, which closes the channel.\n-    #\n-    # + messageContent - The message body.\n-    # + routingKey - The routing key.\n-    # + exchangeName - The name of the exchange to which the message is published.\n-    # + properties - Other properties for the message - routing headers etc.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Publishes a message. Publishing to a non-existent exchange will result in a channel-level\n+# protocol error, which closes the channel.\n+# ```ballerina\n+# rabbitmq:Error? sendResult = newChannel->basicPublish(\"Hello from Ballerina\", \"MyQueue\");\n+# ```\n+#\n+# + messageContent - The message body\n+# + routingKey - The routing key\n+# + exchangeName - The name of the exchange to which the message is published\n+# + properties - Other properties for the message (routing headers, etc.)\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function basicPublish(@untainted MessageContent messageContent, string routingKey,\n                         string exchangeName = \"\", public BasicProperties? properties = ()) returns Error? {\n         return nativeBasicPublish(messageContent, java:fromString(routingKey),\n          java:fromString(exchangeName), properties, self.amqpChannel);\n     }\n \n-    # Deletes the queue with the given name although it is in use or has messages on it.\n-    # If the parameters ifUnused or ifEmpty is given, the queue is checked before deleting.\n-    #\n-    # + queueName - Name of the queue to be deleted.\n-    # + ifUnused - True if the queue should be deleted only if not in use.\n-    # + ifEmpty - True if the queue should be deleted only if empty.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Deletes the queue with the given name although it is in use or has messages in it.\n+# If the parameters `ifUnused` or `ifEmpty` is given, the queue is checked before deleting.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->queueDelete(\"MyQueue\");\n+# ```\n+#\n+# + queueName - Name of the queue to be deleted\n+# + ifUnused - True if the queue should be deleted only if not in use\n+# + ifEmpty - True if the queue should be deleted only if empty\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queueDelete(string queueName, boolean ifUnused = false, boolean ifEmpty = false)\n                         returns Error? {\n         return nativeQueueDelete(java:fromString(queueName), ifUnused, ifEmpty, self.amqpChannel);\n     }\n \n-    # Deletes the exchange with the given name.\n-    #\n-    # + exchangeName - The name of the exchange.\n-    # + return - An I/O error if an error is encountered or nil otherwise.\n+# Deletes the exchange with the given name.\n+# ```ballerina\n+# rabbitmq:Error? deleteResult = newChannel->exchangeDelete(\"MyExchange\");\n+# ```\n+#\n+# + exchangeName - The name of the exchange\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function exchangeDelete(string exchangeName) returns Error? {\n         return nativeExchangeDelete(java:fromString(exchangeName), self.amqpChannel);\n     }\n \n-    # Purges the contents of the given queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + return - An error if an I/O error is encountered or nil if successful.\n+# Purges the contents of the given queue.\n+# ```ballerina\n+# rabbitmq:Error? purgeResult = newChannel->queuePurge(\"MyQueue\");\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public remote function queuePurge(string queueName) returns Error? {\n         return nativeQueuePurge(java:fromString(queueName), self.amqpChannel);\n     }\n \n-    # Retrieves a message synchronously from the given queue, providing direct access to the messages in the queue.\n-    #\n-    # + queueName - The name of the queue.\n-    # + ackMode - Type of acknowledgement mode.\n-    # + return - `Message` object containing the retrieved message data or an `Error` if an\n-    #               I/O problem is encountered.\n+# Retrieves a message synchronously from the given queue providing direct access to the messages in the queue.\n+# ```ballerina\n+# rabbitmq:Message|rabbitmq:Error getResult = newChannel->basicGet(\"MyQueue\", rabbitmq:AUTO_ACK);\n+# ```\n+#\n+# + queueName - The name of the queue\n+# + ackMode - Type of acknowledgement mode\n+# + return - A `rabbitmq:Message` object containing the retrieved message data or else a`rabbitmq:Error` if an\n+#            I/O error is encountered\n     public remote function basicGet(string queueName, AcknowledgementMode ackMode) returns Message | Error {\n         boolean autoAck = ackMode is AUTO_ACK;\n         return nativeBasicGet(java:fromString(queueName), autoAck, self.amqpChannel);\n     }\n \n-    # Retrieve the Connection which carries this channel.\n-    #\n-    # + return - RabbitMQ Connection object or error if an I/O problem is encountered.\n+# Retrieves the connection, which carries this channel.\n+# ```ballerina\n+# rabbitmq:Connection|rabbitmq:Error connResult = newChannel.getConnection();\n+# ```\n+#\n+# + return - A `rabbitmq:Connection` object or else a `rabbitmq:Error` if an I/O error is encountered\n     public function getConnection() returns Connection | Error {\n         return nativeGetConnection(self.amqpChannel);\n     }\n \n-    # Closes the RabbitMQ `Channel`.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the channel.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Channel`.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newChannel.close();\n+# ```\n+#\n+# + closeCode - The close code (for information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the channel\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n     public function close(int? closeCode = (), string? closeMessage = ()) returns Error? {\n         return nativeChannelClose(closeCode, closeMessage, self.amqpChannel);\n     }\n \n-    # Aborts the RabbitMQ `Channel`. Forces the `Channel` to close and waits for all the close operations\n-    # to complete. Any encountered exceptions in the close operations are silently discarded.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the channel.\n-    # + return - An error if an I/O problem is encountered.\n+# Aborts the RabbitMQ `rabbitmq:Channel`. Forces the `rabbitmq:Channel` to close and waits for all the close operations\n+# to complete. Any encountered exceptions in the close operations are discarded silently.\n+# ```ballerina\n+# rabbitmq:Error? abortResult = newChannel.abortChannel(320, \"Channel Aborted\");\n+# ```\n+#\n+# + closeCode - The close code (for information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the channel\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMzc0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408923742", "createdAt": "2020-04-15T15:16:42Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/connection.bal", "diffHunk": "@@ -21,43 +21,52 @@ public type Connection object {\n \n     handle amqpConnection;\n \n-    # Initializes a Ballerina RabbitMQ `Connection` object.\n+    # Initializes a Ballerina RabbitMQ Connection object.\n     #\n-    # + connectionConfiguration - Holds connection parameters required to initialize the `Connection`.\n+    # + connectionConfiguration - Configurations required to initialize the `rabbitmq:Connection`\n     public function __init(ConnectionConfiguration connectionConfiguration) {\n         self.amqpConnection = createConnection(connectionConfiguration);\n     }\n \n-    # Closes the RabbitMQ `Connection` and all it's `Channel`s.\n-    # It waits with a provided timeout for all the close operations to complete.\n-    # When timeout is reached the socket is forced to close.\n-    #\n-    # + closeCode - The close code (For information, go to the \"Reply Codes\" section in the\n-    #               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf)).\n-    # + closeMessage - A message indicating the reason for closing the connection.\n-    # + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n-    #                       Use -1 for infinity.\n-    # + return - An error if an I/O problem is encountered.\n+# Closes the `rabbitmq:Connection` and all its `rabbitmq:Channel`s.\n+# It waits with a provided timeout for all the close operations to complete.\n+# When the timeout is reached, the socket is forced to close.\n+# ```ballerina\n+# rabbitmq:Error? closeResult = newConnection.close();\n+# ```\n+#\n+# + closeCode - The close code (for information, go to the \"Reply Codes\" section in the\n+#               [AMQP 0-9-1 specification] (#https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf))\n+# + closeMessage - A message indicating the reason for closing the connection\n+# + timeoutInMillis - Timeout (in milliseconds) for completing all the close-related operations.\n+#                     Use -1 for infinity\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDI5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Creates a `rabbitmq:Connection` object if only the connection configuration is given. Sets global QoS settings,\n          \n          \n            \n                # Creates a `rabbitmq:Connection` object if only the connection configuration is given. Sets the global QoS settings,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408924299", "createdAt": "2020-04-15T15:17:23Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -25,14 +25,14 @@ public type Listener object {\n \n     private Channel amqpChannel;\n \n-    # Initializes a Listener object with the given `Connection` object or connection parameters.\n-    # Creates a `Connection` object if only the connection configuration is given. Sets global QoS settings,\n-    # which will be applied to the entire `Channel`.\n+    # Initializes a Listener object with the given `rabbitmq:Connection` object or connection configurations.\n+    # Creates a `rabbitmq:Connection` object if only the connection configuration is given. Sets global QoS settings,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDU3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + prefetchCount - Maximum number of messages that the server will deliver, 0 if unlimited.\n          \n          \n            \n                # + prefetchCount - Maximum number of messages that the server will deliver. Give the value as 0 if unlimited.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408924574", "createdAt": "2020-04-15T15:17:47Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -25,14 +25,14 @@ public type Listener object {\n \n     private Channel amqpChannel;\n \n-    # Initializes a Listener object with the given `Connection` object or connection parameters.\n-    # Creates a `Connection` object if only the connection configuration is given. Sets global QoS settings,\n-    # which will be applied to the entire `Channel`.\n+    # Initializes a Listener object with the given `rabbitmq:Connection` object or connection configurations.\n+    # Creates a `rabbitmq:Connection` object if only the connection configuration is given. Sets global QoS settings,\n+    # which will be applied to the entire `rabbitmq:Channel`.\n     #\n-    # + connectionOrConnectionConfig - Holds a Ballerina RabbitMQ `Connection` object or the connection parameters.\n+    # + connectionOrConnectionConfig - A `rabbitmq:Connection` object or the connection configurations.\n     # + prefetchCount - Maximum number of messages that the server will deliver, 0 if unlimited.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDk0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () or else a `rabbitmq:Error` upon failure to register service\n          \n          \n            \n                # + return - `()` or else a `rabbitmq:Error` upon failure to register the service", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408924943", "createdAt": "2020-04-15T15:18:18Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -43,48 +43,48 @@ public type Listener object {\n         }\n     }\n \n-    # Attaches the service to the `Listener` endpoint.\n+    # Attaches the service to the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + name - Name of the service.\n-    # + return - Nil or error upon failure to register service.\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - () or else a `rabbitmq:Error` upon failure to register service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNTEyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Starts the consuming messages on all attached services.\n          \n          \n            \n                # Starts consuming the messages on all the attached services.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408925121", "createdAt": "2020-04-15T15:18:33Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -43,48 +43,48 @@ public type Listener object {\n         }\n     }\n \n-    # Attaches the service to the `Listener` endpoint.\n+    # Attaches the service to the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + name - Name of the service.\n-    # + return - Nil or error upon failure to register service.\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - () or else a `rabbitmq:Error` upon failure to register service\n     public function __attach(service s, string? name = ()) returns error? {\n         return registerListener(self, s);\n     }\n \n     # Starts the consuming messages on all attached services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNTIwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () or else a `rabbitmq:Error` upon failure to start\n          \n          \n            \n                # + return - `()` or else a `rabbitmq:Error` upon failure to start", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408925203", "createdAt": "2020-04-15T15:18:41Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -43,48 +43,48 @@ public type Listener object {\n         }\n     }\n \n-    # Attaches the service to the `Listener` endpoint.\n+    # Attaches the service to the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + name - Name of the service.\n-    # + return - Nil or error upon failure to register service.\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - () or else a `rabbitmq:Error` upon failure to register service\n     public function __attach(service s, string? name = ()) returns error? {\n         return registerListener(self, s);\n     }\n \n     # Starts the consuming messages on all attached services.\n     #\n-    # + return - Nil or error upon failure to start.\n+    # + return - () or else a `rabbitmq:Error` upon failure to start", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNTM4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () or else  a `rabbitmq:Error` upon failure to detach service\n          \n          \n            \n                # + return - `()` or else  a `rabbitmq:Error` upon failure to detach the service", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408925383", "createdAt": "2020-04-15T15:18:53Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -43,48 +43,48 @@ public type Listener object {\n         }\n     }\n \n-    # Attaches the service to the `Listener` endpoint.\n+    # Attaches the service to the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + name - Name of the service.\n-    # + return - Nil or error upon failure to register service.\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - () or else a `rabbitmq:Error` upon failure to register service\n     public function __attach(service s, string? name = ()) returns error? {\n         return registerListener(self, s);\n     }\n \n     # Starts the consuming messages on all attached services.\n     #\n-    # + return - Nil or error upon failure to start.\n+    # + return - () or else a `rabbitmq:Error` upon failure to start\n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    # Stops consuming messages and detaches the service from the `Listener` endpoint.\n+    # Stops consuming messages and detaches the service from the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + return - Nil or error upon failure to detach service.\n+    # + s - Type descriptor of the service\n+    # + return - () or else  a `rabbitmq:Error` upon failure to detach service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNTYwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () or else  a `rabbitmq:Error` upon failure to close the ChannelListener\n          \n          \n            \n                # + return - `()` or else  a `rabbitmq:Error` upon failure to close the `ChannelListener`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408925603", "createdAt": "2020-04-15T15:19:06Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -43,48 +43,48 @@ public type Listener object {\n         }\n     }\n \n-    # Attaches the service to the `Listener` endpoint.\n+    # Attaches the service to the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + name - Name of the service.\n-    # + return - Nil or error upon failure to register service.\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - () or else a `rabbitmq:Error` upon failure to register service\n     public function __attach(service s, string? name = ()) returns error? {\n         return registerListener(self, s);\n     }\n \n     # Starts the consuming messages on all attached services.\n     #\n-    # + return - Nil or error upon failure to start.\n+    # + return - () or else a `rabbitmq:Error` upon failure to start\n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    # Stops consuming messages and detaches the service from the `Listener` endpoint.\n+    # Stops consuming messages and detaches the service from the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + return - Nil or error upon failure to detach service.\n+    # + s - Type descriptor of the service\n+    # + return - () or else  a `rabbitmq:Error` upon failure to detach service\n     public function __detach(service s) returns error? {\n         return detach(self, s);\n     }\n \n     # Stops consuming messages through all consumer services by terminating the connection and all its channels.\n     #\n-    # + return - Nil or error upon failure to close the `ChannelListener`\n+    # + return - () or else  a `rabbitmq:Error` upon failure to close the ChannelListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNTc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Stops consuming messages through all consumer services and terminate the connection\n          \n          \n            \n                # Stops consuming messages through all the consumer services and terminates the connection", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408925794", "createdAt": "2020-04-15T15:19:19Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -43,48 +43,48 @@ public type Listener object {\n         }\n     }\n \n-    # Attaches the service to the `Listener` endpoint.\n+    # Attaches the service to the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + name - Name of the service.\n-    # + return - Nil or error upon failure to register service.\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - () or else a `rabbitmq:Error` upon failure to register service\n     public function __attach(service s, string? name = ()) returns error? {\n         return registerListener(self, s);\n     }\n \n     # Starts the consuming messages on all attached services.\n     #\n-    # + return - Nil or error upon failure to start.\n+    # + return - () or else a `rabbitmq:Error` upon failure to start\n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    # Stops consuming messages and detaches the service from the `Listener` endpoint.\n+    # Stops consuming messages and detaches the service from the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + return - Nil or error upon failure to detach service.\n+    # + s - Type descriptor of the service\n+    # + return - () or else  a `rabbitmq:Error` upon failure to detach service\n     public function __detach(service s) returns error? {\n         return detach(self, s);\n     }\n \n     # Stops consuming messages through all consumer services by terminating the connection and all its channels.\n     #\n-    # + return - Nil or error upon failure to close the `ChannelListener`\n+    # + return - () or else  a `rabbitmq:Error` upon failure to close the ChannelListener\n     public function __gracefulStop() returns error? {\n         return stop(self);\n     }\n \n     # Stops consuming messages through all consumer services and terminate the connection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a797714380f2cc9a763b0af25d8853e29be059bd", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a797714380f2cc9a763b0af25d8853e29be059bd", "committedDate": "2020-04-15T15:41:03Z", "message": "Apply suggestions from code review\r\n\r\nResolve review suggestions\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODk1Mzky", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#pullrequestreview-393895392", "createdAt": "2020-04-15T15:36:18Z", "commit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTozNjoxOVrOGF_pxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0MTo0MVrOGF_4vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzODk1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () or else  a `rabbitmq:Error` upon failure to close ChannelListener.\n          \n          \n            \n                # + return - `()` or else  a `rabbitmq:Error` upon failure to close ChannelListener.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408938951", "createdAt": "2020-04-15T15:36:19Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -43,48 +43,48 @@ public type Listener object {\n         }\n     }\n \n-    # Attaches the service to the `Listener` endpoint.\n+    # Attaches the service to the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + name - Name of the service.\n-    # + return - Nil or error upon failure to register service.\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - () or else a `rabbitmq:Error` upon failure to register service\n     public function __attach(service s, string? name = ()) returns error? {\n         return registerListener(self, s);\n     }\n \n     # Starts the consuming messages on all attached services.\n     #\n-    # + return - Nil or error upon failure to start.\n+    # + return - () or else a `rabbitmq:Error` upon failure to start\n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    # Stops consuming messages and detaches the service from the `Listener` endpoint.\n+    # Stops consuming messages and detaches the service from the `rabbitmq:Listener` endpoint.\n     #\n-    # + s - Type descriptor of the service to bind to.\n-    # + return - Nil or error upon failure to detach service.\n+    # + s - Type descriptor of the service\n+    # + return - () or else  a `rabbitmq:Error` upon failure to detach service\n     public function __detach(service s) returns error? {\n         return detach(self, s);\n     }\n \n     # Stops consuming messages through all consumer services by terminating the connection and all its channels.\n     #\n-    # + return - Nil or error upon failure to close the `ChannelListener`\n+    # + return - () or else  a `rabbitmq:Error` upon failure to close the ChannelListener\n     public function __gracefulStop() returns error? {\n         return stop(self);\n     }\n \n     # Stops consuming messages through all consumer services and terminate the connection\n     # with the server.\n     #\n-    # + return - Nil or error upon failure to close ChannelListener.\n+    # + return - () or else  a `rabbitmq:Error` upon failure to close ChannelListener.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzOTE1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + ackMode - Type of acknowledgement mode\n          \n          \n            \n            # + ackMode - Type of the acknowledgement mode", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408939159", "createdAt": "2020-04-15T15:36:36Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/listener.bal", "diffHunk": "@@ -94,21 +94,21 @@ public type Listener object {\n     }\n };\n \n-# Represents the list of parameters required to create a subscription.\n+# Configurations required to create a subscription.\n #\n-# + queueConfig - Specifies configuration details about the queue to be subscribed to.\n-# + ackMode - Type of acknowledgement mode.\n-# + prefetchCount - Maximum number of messages that the server will deliver, 0 if unlimited.\n-#                      Unless explicitly given, this value is 10 by default.\n-# + prefetchSize - Maximum amount of content (measured in octets) that the server will deliver, 0 if unlimited.\n+# + queueConfig - Configurations of the queue to be subscribed\n+# + ackMode - Type of acknowledgement mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzOTU0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + multiple - `true` to acknowledge all messages up to and including the message called on and\n          \n          \n            \n            # + multiple - `true` to acknowledge all messages up to and including the called on message and", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408939541", "createdAt": "2020-04-15T15:37:07Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -25,23 +25,29 @@ public type Message client object {\n    private boolean ackStatus = false;\n    private boolean autoAck = true;\n \n-   # Acknowledge one or several received messages.\n-   #\n-   # + multiple - `true` to acknowledge all messages up to and including the message called on,\n-   #                `false` to acknowledge just the message called on.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Acknowledges one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? ackResult = message->basicAck(true);\n+# ```\n+#\n+# + multiple - `true` to acknowledge all messages up to and including the message called on and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzOTY2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #              `false` to acknowledge just the message called on\n          \n          \n            \n            #              `false` to acknowledge just the called on message", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408939665", "createdAt": "2020-04-15T15:37:16Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -25,23 +25,29 @@ public type Message client object {\n    private boolean ackStatus = false;\n    private boolean autoAck = true;\n \n-   # Acknowledge one or several received messages.\n-   #\n-   # + multiple - `true` to acknowledge all messages up to and including the message called on,\n-   #                `false` to acknowledge just the message called on.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Acknowledges one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? ackResult = message->basicAck(true);\n+# ```\n+#\n+# + multiple - `true` to acknowledge all messages up to and including the message called on and\n+#              `false` to acknowledge just the message called on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MDM0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408940342", "createdAt": "2020-04-15T15:38:13Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -25,23 +25,29 @@ public type Message client object {\n    private boolean ackStatus = false;\n    private boolean autoAck = true;\n \n-   # Acknowledge one or several received messages.\n-   #\n-   # + multiple - `true` to acknowledge all messages up to and including the message called on,\n-   #                `false` to acknowledge just the message called on.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Acknowledges one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? ackResult = message->basicAck(true);\n+# ```\n+#\n+# + multiple - `true` to acknowledge all messages up to and including the message called on and\n+#              `false` to acknowledge just the message called on\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MDUzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + multiple - `true` to reject all messages up to and including the message called on and\n          \n          \n            \n            # + multiple - `true` to reject all messages up to and including the called on message and", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408940536", "createdAt": "2020-04-15T15:38:31Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -25,23 +25,29 @@ public type Message client object {\n    private boolean ackStatus = false;\n    private boolean autoAck = true;\n \n-   # Acknowledge one or several received messages.\n-   #\n-   # + multiple - `true` to acknowledge all messages up to and including the message called on,\n-   #                `false` to acknowledge just the message called on.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Acknowledges one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? ackResult = message->basicAck(true);\n+# ```\n+#\n+# + multiple - `true` to acknowledge all messages up to and including the message called on and\n+#              `false` to acknowledge just the message called on\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n    public remote function basicAck(boolean multiple = false) returns Error? {\n         var result = nativeBasicAck(self.amqpChannel, self.deliveryTag, multiple, self.autoAck, self.ackStatus);\n         self.ackStatus = true;\n         return result;\n    }\n \n-   # Reject one or several received messages.\n-   #\n-   # + multiple - `true` to reject all messages up to and including the message called on;\n-   #                `false` to reject just the message called on.\n-   # + requeue - `true` if the rejected message(s) should be re-queued rather than discarded/dead-lettered.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Rejects one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? nackResult = message->basicNack(true, requeue = false);\n+# ```\n+#\n+# + multiple - `true` to reject all messages up to and including the message called on and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MDY0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #              `false` to reject just the message called on\n          \n          \n            \n            #              `false` to reject just the called on message", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408940648", "createdAt": "2020-04-15T15:38:40Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -25,23 +25,29 @@ public type Message client object {\n    private boolean ackStatus = false;\n    private boolean autoAck = true;\n \n-   # Acknowledge one or several received messages.\n-   #\n-   # + multiple - `true` to acknowledge all messages up to and including the message called on,\n-   #                `false` to acknowledge just the message called on.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Acknowledges one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? ackResult = message->basicAck(true);\n+# ```\n+#\n+# + multiple - `true` to acknowledge all messages up to and including the message called on and\n+#              `false` to acknowledge just the message called on\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n    public remote function basicAck(boolean multiple = false) returns Error? {\n         var result = nativeBasicAck(self.amqpChannel, self.deliveryTag, multiple, self.autoAck, self.ackStatus);\n         self.ackStatus = true;\n         return result;\n    }\n \n-   # Reject one or several received messages.\n-   #\n-   # + multiple - `true` to reject all messages up to and including the message called on;\n-   #                `false` to reject just the message called on.\n-   # + requeue - `true` if the rejected message(s) should be re-queued rather than discarded/dead-lettered.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Rejects one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? nackResult = message->basicNack(true, requeue = false);\n+# ```\n+#\n+# + multiple - `true` to reject all messages up to and including the message called on and\n+#              `false` to reject just the message called on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MDc3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n          \n          \n            \n            # + return - A `rabbitmq:Error` if an I/O error is encountered or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408940778", "createdAt": "2020-04-15T15:38:50Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -25,23 +25,29 @@ public type Message client object {\n    private boolean ackStatus = false;\n    private boolean autoAck = true;\n \n-   # Acknowledge one or several received messages.\n-   #\n-   # + multiple - `true` to acknowledge all messages up to and including the message called on,\n-   #                `false` to acknowledge just the message called on.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Acknowledges one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? ackResult = message->basicAck(true);\n+# ```\n+#\n+# + multiple - `true` to acknowledge all messages up to and including the message called on and\n+#              `false` to acknowledge just the message called on\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()\n    public remote function basicAck(boolean multiple = false) returns Error? {\n         var result = nativeBasicAck(self.amqpChannel, self.deliveryTag, multiple, self.autoAck, self.ackStatus);\n         self.ackStatus = true;\n         return result;\n    }\n \n-   # Reject one or several received messages.\n-   #\n-   # + multiple - `true` to reject all messages up to and including the message called on;\n-   #                `false` to reject just the message called on.\n-   # + requeue - `true` if the rejected message(s) should be re-queued rather than discarded/dead-lettered.\n-   # + return - An error if an I/O error is encountered or nil if successful.\n+# Rejects one or several received messages.\n+# ```ballerina\n+# rabbitmq:Error? nackResult = message->basicNack(true, requeue = false);\n+# ```\n+#\n+# + multiple - `true` to reject all messages up to and including the message called on and\n+#              `false` to reject just the message called on\n+# + requeue - `true` if the rejected message(s) should be re-queued rather than discarded/dead-lettered\n+# + return - A `rabbitmq:Error` if an I/O error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MTI1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Message data as a JSON value  or else a `rabbitmq:Error` if an error is encountered\n          \n          \n            \n            # + return - Message data as a JSON value or else a `rabbitmq:Error` if an error is encountered", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408941258", "createdAt": "2020-04-15T15:39:30Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/message.bal", "diffHunk": "@@ -92,37 +107,52 @@ public type Message client object {\n         }\n    }\n \n-    # Retrieves the float content of the RabbitMQ message.\n-    #\n-    # + return - float containing message data or error if an error is encountered.\n-    public function getFloatContent() returns @tainted float | Error {\n+# Retrieves the float content of the RabbitMQ message.\n+# ```ballerina\n+# float|rabbitmq:Error msgContent = message.getFloatContent();\n+# ```\n+#\n+# + return - Message data as a float value or else a `rabbitmq:Error` if an error is encountered\n+   public function getFloatContent() returns @tainted float | Error {\n         return  nativeGetFloatContent(self.messageContent);\n-    }\n+   }\n \n-   # Retrieves the int content of the RabbitMQ message.\n-   #\n-   # + return - int containing message data or error if an error is encountered.\n+# Retrieves the int content of the RabbitMQ message.\n+# ```ballerina\n+# int|rabbitmq:Error msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as an int value or else a `rabbitmq:Error` if an error is encountered\n    public function getIntContent() returns @tainted int | Error {\n        return nativeGetIntContent(self.messageContent);\n    }\n \n-   # Retrieves the byte array content of the RabbitMQ message.\n-   #\n-   # + return - byte array containing message data or error if an error is encountered.\n+# Retrieves the byte array content of the RabbitMQ message.\n+# ```ballerina\n+# byte[] msgContent = message.getIntContent();\n+# ```\n+#\n+# + return - Message data as a byte array\n    public function getByteArrayContent() returns @tainted byte[] {\n         return self.messageContent;\n    }\n \n-   # Retrieves the json content of the RabbitMQ message.\n-   #\n-   # + return - json containing message data or error if an error is encountered.\n+# Retrieves the JSON content of the RabbitMQ message.\n+# ```ballerina\n+# json|rabbitmq:Error msgContent = message.getJSONContent();\n+# ```\n+#\n+# + return - Message data as a JSON value  or else a `rabbitmq:Error` if an error is encountered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MTgxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + exchangeType - The type of exchange\n          \n          \n            \n            # + exchangeType - The type of the exchange", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408941814", "createdAt": "2020-04-15T15:40:18Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -71,13 +71,13 @@ public type QueueConfiguration record {|\n     map<any>? arguments = ();\n |};\n \n-# Holds the parameters used to declare an exchange.\n+# Configurations used to declare an exchange.\n #\n-# + exchangeName - The name of the exchange.\n-# + exchangeType - The type of exchange.\n-# + durable - True if declaring a durable exchange (the exchange will survive a server restart).\n-# + autoDelete - True if we are declaring an autodelete exchange (server will delete it when it is no longer in use).\n-# + arguments - Other properties (construction arguments) for the queue.\n+# + exchangeName - The name of the exchange\n+# + exchangeType - The type of exchange", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MTk0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + durable - True if declaring a durable exchange (the exchange will survive a server restart)\n          \n          \n            \n            # + durable - True if declaring a durable exchange (the exchange will survive in a server restart)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408941942", "createdAt": "2020-04-15T15:40:28Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -71,13 +71,13 @@ public type QueueConfiguration record {|\n     map<any>? arguments = ();\n |};\n \n-# Holds the parameters used to declare an exchange.\n+# Configurations used to declare an exchange.\n #\n-# + exchangeName - The name of the exchange.\n-# + exchangeType - The type of exchange.\n-# + durable - True if declaring a durable exchange (the exchange will survive a server restart).\n-# + autoDelete - True if we are declaring an autodelete exchange (server will delete it when it is no longer in use).\n-# + arguments - Other properties (construction arguments) for the queue.\n+# + exchangeName - The name of the exchange\n+# + exchangeType - The type of exchange\n+# + durable - True if declaring a durable exchange (the exchange will survive a server restart)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MjM2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + autoDelete - True if we are declaring an autodelete exchange (server will delete it when it is no longer in use)\n          \n          \n            \n            # + autoDelete - True if an autodelete exchange is declared (the server will delete it when it is no longer in use)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408942368", "createdAt": "2020-04-15T15:41:03Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -71,13 +71,13 @@ public type QueueConfiguration record {|\n     map<any>? arguments = ();\n |};\n \n-# Holds the parameters used to declare an exchange.\n+# Configurations used to declare an exchange.\n #\n-# + exchangeName - The name of the exchange.\n-# + exchangeType - The type of exchange.\n-# + durable - True if declaring a durable exchange (the exchange will survive a server restart).\n-# + autoDelete - True if we are declaring an autodelete exchange (server will delete it when it is no longer in use).\n-# + arguments - Other properties (construction arguments) for the queue.\n+# + exchangeName - The name of the exchange\n+# + exchangeType - The type of exchange\n+# + durable - True if declaring a durable exchange (the exchange will survive a server restart)\n+# + autoDelete - True if we are declaring an autodelete exchange (server will delete it when it is no longer in use)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0Mjc4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + shutdownTimeoutInMillis - Shutdown timeout in milliseconds, zero for infinite, and default is 10000. If consumers exceed\n          \n          \n            \n            # + shutdownTimeoutInMillis - Shutdown timeout in milliseconds, zero for infinite, and the default value is 10000. If the consumers exceed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#discussion_r408942782", "createdAt": "2020-04-15T15:41:41Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/rabbitmq/src/main/ballerina/src/rabbitmq/rabbitmq_commons.bal", "diffHunk": "@@ -86,18 +86,18 @@ public type ExchangeConfiguration record {|\n     map<any>? arguments = ();\n |};\n \n-# Holds the parameters used to create a RabbitMQ `Connection`.\n+# Configurations used to create a `rabbitmq:Connection`.\n #\n-# + host - The host used for establishing the connection.\n-# + port - The port used for establishing the connection.\n-# + username - The username used for establishing the connection.\n-# + password - The password used for establishing the connection.\n-# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds; zero for infinite.\n-# + handshakeTimeoutMillis -  The AMQP 0-9-1 protocol handshake timeout in milliseconds.\n-# + shutdownTimeoutInMillis - Shutdown timeout in milliseconds; zero for infinite; default 10000. If consumers exceed\n-#                     this timeout then any remaining queued deliveries (and other Consumer callbacks) will be lost.\n-# + heartbeatInSeconds - The initially requested heartbeat timeout in seconds; zero for none.\n-# + secureSocket - Configurations for facilitating secure connections.\n+# + host - The host used for establishing the connection\n+# + port - The port used for establishing the connection\n+# + username - The username used for establishing the connection\n+# + password - The password used for establishing the connection\n+# + connectionTimeoutInMillis - Connection TCP establishment timeout in milliseconds and zero for infinite\n+# + handshakeTimeoutMillis -  The AMQP 0-9-1 protocol handshake timeout in milliseconds\n+# + shutdownTimeoutInMillis - Shutdown timeout in milliseconds, zero for infinite, and default is 10000. If consumers exceed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce64fc3c7c18305cd64233e2caad98f6ab20373"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4506227a563dd68f5d7a195edfc6645b3880f5f3", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4506227a563dd68f5d7a195edfc6645b3880f5f3", "committedDate": "2020-04-15T15:44:52Z", "message": "Apply suggestions from code review\r\n\r\nResolve review suggestions\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTAzODY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22568#pullrequestreview-393903866", "createdAt": "2020-04-15T15:46:03Z", "commit": {"oid": "4506227a563dd68f5d7a195edfc6645b3880f5f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3917, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}