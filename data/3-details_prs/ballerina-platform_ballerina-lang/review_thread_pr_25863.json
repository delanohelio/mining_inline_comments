{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDE4NjMz", "number": 25863, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyNjoyN1rOEqrsWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjo1MTo1NlrOEt-qMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTkxNTE1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyNjoyN1rOHdBwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzoyMVrOHe7WGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5OTU0MA==", "bodyText": "Shouldn't we set a clone of the source rest match pattern?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500199540", "createdAt": "2020-10-06T11:26:27Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "diffHunk": "@@ -732,6 +734,25 @@ public void visit(BLangVarBindingPatternMatchPattern source) {\n         clone.isLastPattern = source.isLastPattern;\n     }\n \n+    @Override\n+    public void visit(BLangListMatchPattern source) {\n+        BLangListMatchPattern clone = new BLangListMatchPattern();\n+        source.cloneRef = clone;\n+        clone.matchExpr = source.matchExpr;\n+        clone.setRestMatchPattern(source.getRestMatchPattern());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTY0MQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191641", "createdAt": "2020-10-09T05:07:21Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "diffHunk": "@@ -732,6 +734,25 @@ public void visit(BLangVarBindingPatternMatchPattern source) {\n         clone.isLastPattern = source.isLastPattern;\n     }\n \n+    @Override\n+    public void visit(BLangListMatchPattern source) {\n+        BLangListMatchPattern clone = new BLangListMatchPattern();\n+        source.cloneRef = clone;\n+        clone.matchExpr = source.matchExpr;\n+        clone.setRestMatchPattern(source.getRestMatchPattern());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5OTU0MA=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTkyMDgxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangListMatchPattern.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyODowMFrOHdBz2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzoxNlrOHe7WBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDQwOA==", "bodyText": "Shall we add a small description?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500200408", "createdAt": "2020-10-06T11:28:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangListMatchPattern.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.ListMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPattern;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTYyMQ==", "bodyText": "Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191621", "createdAt": "2020-10-09T05:07:16Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangListMatchPattern.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.ListMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPattern;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDQwOA=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTkyMTc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyODoxNlrOHdB0aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzoxNFrOHe7V-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDU1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              rest match pattern is not supported\n          \n          \n            \n              rest match pattern is not yet supported", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500200553", "createdAt": "2020-10-06T11:28:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -965,6 +965,12 @@ error.match.stmt.unreachable.pattern.available=\\\n error.match.pattern.not.supported=\\\n   unsupported match pattern\n \n+error.match.patterns.should.contain.same.set.of.variables=\\\n+  match patterns should contain same set of variables\n+\n+error.rest.match.pattern.not.supported=\\\n+  rest match pattern is not supported", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTYxMQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191611", "createdAt": "2020-10-09T05:07:14Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -965,6 +965,12 @@ error.match.stmt.unreachable.pattern.available=\\\n error.match.pattern.not.supported=\\\n   unsupported match pattern\n \n+error.match.patterns.should.contain.same.set.of.variables=\\\n+  match patterns should contain same set of variables\n+\n+error.rest.match.pattern.not.supported=\\\n+  rest match pattern is not supported", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDU1Mw=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTkyMjg0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyODozN1rOHdB1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzoxMlrOHe7V9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDczMw==", "bodyText": "const-pattern?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500200733", "createdAt": "2020-10-06T11:28:37Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the const-pattern.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTYwNA==", "bodyText": "This name is given by the spec.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191604", "createdAt": "2020-10-09T05:07:12Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the const-pattern.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDczMw=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTkyNTc1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyOTozMlrOHdB26Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzowOVrOHe7V7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTE5Mw==", "bodyText": "Can't we directly check\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int i = -1;\n          \n          \n            \n                    BAssertUtil.validateError(restMatchPatternResult, ++i, \"rest match pattern is not supported\", 19, 13);\n          \n          \n            \n                    BAssertUtil.validateError(restMatchPatternResult, 0, \"rest match pattern is not supported\", 19, 13);\n          \n      \n    \n    \n  \n\nfor now?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500201193", "createdAt": "2020-10-06T11:29:32Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the const-pattern.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = {\"disableOnOldParser\"})\n+public class MatchStmtListMatchPatternTest {\n+\n+    private CompileResult result, resultNegative, restMatchPatternResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern.bal\");\n+        restMatchPatternResult = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-with-rest\" +\n+                \"-match-pattern.bal\");\n+        resultNegative = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern1() {\n+        BRunUtil.invoke(result, \"testListMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern2() {\n+        BRunUtil.invoke(result, \"testListMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern3() {\n+        BRunUtil.invoke(result, \"testListMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern4() {\n+        BRunUtil.invoke(result, \"testListMatchPattern4\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern5() {\n+        BRunUtil.invoke(result, \"testListMatchPattern5\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern6() {\n+        BRunUtil.invoke(result, \"testListMatchPattern6\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern7() {\n+        BRunUtil.invoke(result, \"testListMatchPattern7\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern8() {\n+        BRunUtil.invoke(result, \"testListMatchPattern8\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern9() {\n+        BRunUtil.invoke(result, \"testListMatchPattern9\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern10() {\n+        BRunUtil.invoke(result, \"testListMatchPattern10\");\n+    }\n+\n+    @Test\n+    public void testListMatchPatter11() {\n+        BRunUtil.invoke(result, \"testListMatchPattern11\");\n+    }\n+\n+    @Test\n+    public void testRestMatchPattern() {\n+        Assert.assertEquals(restMatchPatternResult.getErrorCount(), 1);\n+\n+        int i = -1;\n+        BAssertUtil.validateError(restMatchPatternResult, ++i, \"rest match pattern is not supported\", 19, 13);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU5Nw==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191597", "createdAt": "2020-10-09T05:07:09Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the const-pattern.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = {\"disableOnOldParser\"})\n+public class MatchStmtListMatchPatternTest {\n+\n+    private CompileResult result, resultNegative, restMatchPatternResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern.bal\");\n+        restMatchPatternResult = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-with-rest\" +\n+                \"-match-pattern.bal\");\n+        resultNegative = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern1() {\n+        BRunUtil.invoke(result, \"testListMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern2() {\n+        BRunUtil.invoke(result, \"testListMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern3() {\n+        BRunUtil.invoke(result, \"testListMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern4() {\n+        BRunUtil.invoke(result, \"testListMatchPattern4\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern5() {\n+        BRunUtil.invoke(result, \"testListMatchPattern5\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern6() {\n+        BRunUtil.invoke(result, \"testListMatchPattern6\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern7() {\n+        BRunUtil.invoke(result, \"testListMatchPattern7\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern8() {\n+        BRunUtil.invoke(result, \"testListMatchPattern8\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern9() {\n+        BRunUtil.invoke(result, \"testListMatchPattern9\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern10() {\n+        BRunUtil.invoke(result, \"testListMatchPattern10\");\n+    }\n+\n+    @Test\n+    public void testListMatchPatter11() {\n+        BRunUtil.invoke(result, \"testListMatchPattern11\");\n+    }\n+\n+    @Test\n+    public void testRestMatchPattern() {\n+        Assert.assertEquals(restMatchPatternResult.getErrorCount(), 1);\n+\n+        int i = -1;\n+        BAssertUtil.validateError(restMatchPatternResult, ++i, \"rest match pattern is not supported\", 19, 13);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTE5Mw=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTkyNzQ2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyOTo1OFrOHdB38A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzowOFrOHe7V6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTQ1Ng==", "bodyText": "Shall we make these constants?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500201456", "createdAt": "2020-10-06T11:29:58Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the const-pattern.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = {\"disableOnOldParser\"})\n+public class MatchStmtListMatchPatternTest {\n+\n+    private CompileResult result, resultNegative, restMatchPatternResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern.bal\");\n+        restMatchPatternResult = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-with-rest\" +\n+                \"-match-pattern.bal\");\n+        resultNegative = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern1() {\n+        BRunUtil.invoke(result, \"testListMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern2() {\n+        BRunUtil.invoke(result, \"testListMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern3() {\n+        BRunUtil.invoke(result, \"testListMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern4() {\n+        BRunUtil.invoke(result, \"testListMatchPattern4\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern5() {\n+        BRunUtil.invoke(result, \"testListMatchPattern5\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern6() {\n+        BRunUtil.invoke(result, \"testListMatchPattern6\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern7() {\n+        BRunUtil.invoke(result, \"testListMatchPattern7\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern8() {\n+        BRunUtil.invoke(result, \"testListMatchPattern8\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern9() {\n+        BRunUtil.invoke(result, \"testListMatchPattern9\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern10() {\n+        BRunUtil.invoke(result, \"testListMatchPattern10\");\n+    }\n+\n+    @Test\n+    public void testListMatchPatter11() {\n+        BRunUtil.invoke(result, \"testListMatchPattern11\");\n+    }\n+\n+    @Test\n+    public void testRestMatchPattern() {\n+        Assert.assertEquals(restMatchPatternResult.getErrorCount(), 1);\n+\n+        int i = -1;\n+        BAssertUtil.validateError(restMatchPatternResult, ++i, \"rest match pattern is not supported\", 19, 13);\n+    }\n+\n+    @Test(description = \"invalid match patterns\")\n+    public void testListMatchPatternNegative() {\n+        Assert.assertEquals(resultNegative.getErrorCount(), 12);\n+\n+        int i = -1;\n+        String patternNotMatched = \"pattern will not be matched\";\n+        String unreachablePattern = \"unreachable pattern\";\n+        String unreachableCode = \"unreachable code\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU5Mg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191592", "createdAt": "2020-10-09T05:07:08Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the const-pattern.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = {\"disableOnOldParser\"})\n+public class MatchStmtListMatchPatternTest {\n+\n+    private CompileResult result, resultNegative, restMatchPatternResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern.bal\");\n+        restMatchPatternResult = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-with-rest\" +\n+                \"-match-pattern.bal\");\n+        resultNegative = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern1() {\n+        BRunUtil.invoke(result, \"testListMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern2() {\n+        BRunUtil.invoke(result, \"testListMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern3() {\n+        BRunUtil.invoke(result, \"testListMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern4() {\n+        BRunUtil.invoke(result, \"testListMatchPattern4\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern5() {\n+        BRunUtil.invoke(result, \"testListMatchPattern5\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern6() {\n+        BRunUtil.invoke(result, \"testListMatchPattern6\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern7() {\n+        BRunUtil.invoke(result, \"testListMatchPattern7\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern8() {\n+        BRunUtil.invoke(result, \"testListMatchPattern8\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern9() {\n+        BRunUtil.invoke(result, \"testListMatchPattern9\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern10() {\n+        BRunUtil.invoke(result, \"testListMatchPattern10\");\n+    }\n+\n+    @Test\n+    public void testListMatchPatter11() {\n+        BRunUtil.invoke(result, \"testListMatchPattern11\");\n+    }\n+\n+    @Test\n+    public void testRestMatchPattern() {\n+        Assert.assertEquals(restMatchPatternResult.getErrorCount(), 1);\n+\n+        int i = -1;\n+        BAssertUtil.validateError(restMatchPatternResult, ++i, \"rest match pattern is not supported\", 19, 13);\n+    }\n+\n+    @Test(description = \"invalid match patterns\")\n+    public void testListMatchPatternNegative() {\n+        Assert.assertEquals(resultNegative.getErrorCount(), 12);\n+\n+        int i = -1;\n+        String patternNotMatched = \"pattern will not be matched\";\n+        String unreachablePattern = \"unreachable pattern\";\n+        String unreachableCode = \"unreachable code\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTQ1Ng=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTkyODQ4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/list-match-pattern-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTozMDoxMVrOHdB4gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzowNlrOHe7V5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTYwMw==", "bodyText": "Missing the licence header?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500201603", "createdAt": "2020-10-06T11:30:11Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/list-match-pattern-negative.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+function testListMatchPatternNegative() returns string {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU4OQ==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191589", "createdAt": "2020-10-09T05:07:06Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/list-match-pattern-negative.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+function testListMatchPatternNegative() returns string {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTYwMw=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTk0OTcxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/list-match-pattern.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTozNjo0M1rOHdCF1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzowNVrOHe7V2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwNTAxMw==", "bodyText": "Do we have tests where the variables declared as var binding-pattern are used within the match-clause's block-stmt?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500205013", "createdAt": "2020-10-06T11:36:43Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/list-match-pattern.bal", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function listMatchPattern1(any v) returns string {\n+    match v {\n+        [1] => {\n+            return \"[1]\";\n+        }\n+        [1, 2] => {\n+            return \"[1, 2]\";\n+        }\n+        [1, 2, 3] => {\n+            return \"[1, 2, 3]\";\n+        }\n+        [1, \"s\"] => {\n+            return \"[1, 's']\";\n+        }\n+        [1, \"s\", 2] => {\n+            return \"[1, 's', 2]\";\n+        }\n+        [true, \"s\"] => {\n+            return \"[true, 's']\";\n+        }\n+        [true, false] => {\n+            return \"[true, false]\";\n+        }\n+        [true, 1, false] => {\n+            return \"[true, 1, false]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern1() {\n+        assertEquals(\"[1]\", listMatchPattern1([1]));\n+        assertEquals(\"[1, 2]\", listMatchPattern1([1, 2]));\n+        assertEquals(\"[1, 2, 3]\", listMatchPattern1([1, 2, 3]));\n+        assertEquals(\"[1, 's']\", listMatchPattern1([1, \"s\"]));\n+        assertEquals(\"[1, 's', 2]\", listMatchPattern1([1, \"s\", 2]));\n+        assertEquals(\"[true, 's']\", listMatchPattern1([true, \"s\"]));\n+        assertEquals(\"[true, false]\", listMatchPattern1([true, false]));\n+        assertEquals(\"[true, 1, false]\", listMatchPattern1([true, 1, false]));\n+        assertEquals(\"No match\", \"No match\");\n+}\n+\n+function listMatchPattern2(any v) returns string {\n+    match v {\n+        [[1]] => {\n+            return \"[[1]]\";\n+        }\n+        [1, [2]] => {\n+            return \"[1, [2]]\";\n+        }\n+        [[1], [2]] => {\n+             return \"[[1], [2]]\";\n+        }\n+        [1, [2, 3]] => {\n+            return \"[1, [2, 3]]\";\n+        }\n+        [[1, \"s\"]] => {\n+            return \"[[1, 's']]\";\n+        }\n+        [[[1, \"str\"], \"s\"], 2] => {\n+            return \"[[[1, 'str'], 's'], 2]\";\n+        }\n+        [[true, 2], \"s\"] => {\n+            return \"[[true, 2], 's']\";\n+        }\n+        [[true, false], [true, 2]] => {\n+            return \"[[true, false], [true, 2]]\";\n+        }\n+        [[true, \"s1\"], [1, 2, \"s2\"], [false, \"s3\"]] => {\n+            return \"[[true, 's1'], [1, 2, 's2'], [false, 's3']]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern2() {\n+    assertEquals(\"[[1]]\", listMatchPattern2([[1]]));\n+    assertEquals(\"[1, [2]]\", listMatchPattern2([1, [2]]));\n+    assertEquals(\"[[1], [2]]\", listMatchPattern2([[1], [2]]));\n+    assertEquals(\"[1, [2, 3]]\", listMatchPattern2([1, [2, 3]]));\n+    assertEquals(\"[[1, 's']]\", listMatchPattern2([[1, \"s\"]]));\n+    assertEquals(\"[[[1, 'str'], 's'], 2]\", listMatchPattern2([[[1, \"str\"], \"s\"], 2]));\n+    assertEquals(\"[[true, 2], 's']\", listMatchPattern2([[true, 2], \"s\"]));\n+    assertEquals(\"[[true, false], [true, 2]]\", listMatchPattern2([[true, false], [true, 2]]));\n+    assertEquals(\"[[true, 's1'], [1, 2, 's2'], [false, 's3']]\",\n+                            listMatchPattern2([[true, \"s1\"], [1, 2, \"s2\"], [false, \"s3\"]]));\n+    assertEquals(\"No match\", \"No match\");\n+}\n+\n+const CONST1 = \"Ballerina\";\n+const CONST2 = 200;\n+\n+function listMatchPattern3(any v) returns string {\n+    match v {\n+        [CONST1] => {\n+            return \"[CONST1]\";\n+        }\n+        [CONST1, CONST2] => {\n+            return \"[CONST1, CONST2]\";\n+        }\n+        [[CONST1, CONST2]] => {\n+            return \"[[CONST1, CONST2]]\";\n+        }\n+        [[CONST1], [CONST2]] => {\n+            return \"[[CONST1], [CONST2]]\";\n+        }\n+        [[CONST1], [CONST2], [CONST1, CONST2]] => {\n+            return \"[[CONST1], [CONST2], [CONST1, CONST2]]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern3() {\n+    assertEquals(\"[CONST1]\", listMatchPattern3([CONST1]));\n+    assertEquals(\"[CONST1]\", listMatchPattern3([\"Ballerina\"]));\n+    assertEquals(\"[CONST1, CONST2]\", listMatchPattern3([\"Ballerina\", 200]));\n+    assertEquals(\"[CONST1, CONST2]\", listMatchPattern3([CONST1, CONST2]));\n+    assertEquals(\"[[CONST1, CONST2]]\", listMatchPattern3([[CONST1, CONST2]]));\n+    assertEquals(\"[[CONST1, CONST2]]\", listMatchPattern3([[\"Ballerina\", 200]]));\n+    assertEquals(\"[[CONST1], [CONST2]]\", listMatchPattern3([[CONST1], [CONST2]]));\n+    assertEquals(\"[[CONST1], [CONST2]]\", listMatchPattern3([[\"Ballerina\"], [200]]));\n+    assertEquals(\"[[CONST1], [CONST2], [CONST1, CONST2]]\", listMatchPattern3([[CONST1], [CONST2], [CONST1, CONST2]]));\n+    assertEquals(\"[[CONST1], [CONST2], [CONST1, CONST2]]\",\n+                                                    listMatchPattern3([[\"Ballerina\"], [200], [\"Ballerina\", 200]]));\n+    assertEquals(\"No match\", \"No match\");\n+}\n+\n+function listMatchPattern4([int, string, CONST1] v) returns string {\n+    match v {\n+        [1, \"str\", CONST1] => {\n+            return \"[1, 'str', CONST1]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern4() {\n+    assertEquals(\"[1, 'str', CONST1]\", listMatchPattern4([1, \"str\", CONST1]));\n+    assertEquals(\"No match\", listMatchPattern4([2, \"str\", CONST1]));\n+}\n+\n+function listMatchPattern5([int, string, CONST1|CONST2] v) returns string {\n+    match v {\n+        [1, \"s\", CONST1] => {\n+            return \"[1, 's', CONST1]\";\n+        }\n+        [2, \"a\", CONST2] => {\n+            return \"[2, 'a', CONST2]\";\n+        }\n+        _ => {\n+            return \"No match\";\n+        }\n+    }\n+}\n+\n+function testListMatchPattern5() {\n+    assertEquals(\"[1, 's', CONST1]\", listMatchPattern5([1, \"s\", CONST1]));\n+    assertEquals(\"[2, 'a', CONST2]\", listMatchPattern5([2, \"a\", CONST2]));\n+    assertEquals(\"No match\", listMatchPattern5([3, \"a\", CONST2]));\n+}\n+\n+function listMatchPattern6(any v) returns string {\n+    match v {\n+        [var a] => {\n+            return \"[var a]\";\n+        }\n+        [var a, var b] => {\n+            return \"[var a, var b]\";\n+        }\n+        [var a, var b, var c] => {\n+            return \"[var a, var b, var c]\";\n+        }\n+    }\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern6() {\n+    assertEquals(\"[var a]\", listMatchPattern6([1]));\n+    assertEquals(\"[var a, var b]\", listMatchPattern6([1, \"str\"]));\n+    assertEquals(\"[var a, var b, var c]\", listMatchPattern6([1, \"str\", true]));\n+    assertEquals(\"No match\", listMatchPattern6(1));\n+}\n+\n+function listMatchPattern7(any v) returns string {\n+    match v {\n+        [var a, var b] if a is int => {\n+            return \"[var a, var b] if a is int\";\n+        }\n+        [var a, var b] if b is int => {\n+            return \"[var a, var b] if b is int\";\n+        }\n+    }\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern7() {\n+    assertEquals(\"[var a, var b] if a is int\", listMatchPattern7([1, 2]));\n+    assertEquals(\"[var a, var b] if b is int\", listMatchPattern7([\"str\", 2]));\n+    assertEquals(\"No match\", listMatchPattern7([1]));\n+}\n+\n+function listMatchPattern8(any v) returns string {\n+    match v {\n+        [1] | [1, 2] | [1, 2, 3] => {\n+            return \"match1\";\n+        }\n+        [1, \"s\"] | [1, \"s\", 2] => {\n+            return \"match2\";\n+        }\n+        [true, \"s\"] | [true, false] | [true, 1, false] => {\n+            return \"match3\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern8() {\n+        assertEquals(\"match1\", listMatchPattern8([1]));\n+        assertEquals(\"match1\", listMatchPattern8([1, 2]));\n+        assertEquals(\"match1\", listMatchPattern8([1, 2, 3]));\n+        assertEquals(\"match2\", listMatchPattern8([1, \"s\"]));\n+        assertEquals(\"match2\", listMatchPattern8([1, \"s\", 2]));\n+        assertEquals(\"match3\", listMatchPattern8([true, \"s\"]));\n+        assertEquals(\"match3\", listMatchPattern8([true, false]));\n+        assertEquals(\"match3\", listMatchPattern8([true, 1, false]));\n+        assertEquals(\"No match\", \"No match\");\n+}\n+\n+function listMatchPattern9(any v) returns string {\n+    match v {\n+        [CONST1] | [CONST1, CONST2] => {\n+            return \"match1\";\n+        }\n+        [[CONST1, CONST2]] | [[CONST1], [CONST2]] => {\n+            return \"match2\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern9() {\n+    assertEquals(\"match1\", listMatchPattern9([CONST1]));\n+    assertEquals(\"match1\", listMatchPattern9([\"Ballerina\"]));\n+    assertEquals(\"match1\", listMatchPattern9([\"Ballerina\", 200]));\n+    assertEquals(\"match1\", listMatchPattern9([CONST1, CONST2]));\n+    assertEquals(\"match2\", listMatchPattern9([[CONST1, CONST2]]));\n+    assertEquals(\"match2\", listMatchPattern9([[\"Ballerina\", 200]]));\n+    assertEquals(\"match2\", listMatchPattern9([[CONST1], [CONST2]]));\n+    assertEquals(\"match2\", listMatchPattern9([[\"Ballerina\"], [200]]));\n+    assertEquals(\"No match\", \"No match\");\n+}\n+\n+function listMatchPattern10(any v) returns string {\n+    match v {\n+        [var a, 5] | [var a, 7] => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU3OQ==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191579", "createdAt": "2020-10-09T05:07:05Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/list-match-pattern.bal", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function listMatchPattern1(any v) returns string {\n+    match v {\n+        [1] => {\n+            return \"[1]\";\n+        }\n+        [1, 2] => {\n+            return \"[1, 2]\";\n+        }\n+        [1, 2, 3] => {\n+            return \"[1, 2, 3]\";\n+        }\n+        [1, \"s\"] => {\n+            return \"[1, 's']\";\n+        }\n+        [1, \"s\", 2] => {\n+            return \"[1, 's', 2]\";\n+        }\n+        [true, \"s\"] => {\n+            return \"[true, 's']\";\n+        }\n+        [true, false] => {\n+            return \"[true, false]\";\n+        }\n+        [true, 1, false] => {\n+            return \"[true, 1, false]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern1() {\n+        assertEquals(\"[1]\", listMatchPattern1([1]));\n+        assertEquals(\"[1, 2]\", listMatchPattern1([1, 2]));\n+        assertEquals(\"[1, 2, 3]\", listMatchPattern1([1, 2, 3]));\n+        assertEquals(\"[1, 's']\", listMatchPattern1([1, \"s\"]));\n+        assertEquals(\"[1, 's', 2]\", listMatchPattern1([1, \"s\", 2]));\n+        assertEquals(\"[true, 's']\", listMatchPattern1([true, \"s\"]));\n+        assertEquals(\"[true, false]\", listMatchPattern1([true, false]));\n+        assertEquals(\"[true, 1, false]\", listMatchPattern1([true, 1, false]));\n+        assertEquals(\"No match\", \"No match\");\n+}\n+\n+function listMatchPattern2(any v) returns string {\n+    match v {\n+        [[1]] => {\n+            return \"[[1]]\";\n+        }\n+        [1, [2]] => {\n+            return \"[1, [2]]\";\n+        }\n+        [[1], [2]] => {\n+             return \"[[1], [2]]\";\n+        }\n+        [1, [2, 3]] => {\n+            return \"[1, [2, 3]]\";\n+        }\n+        [[1, \"s\"]] => {\n+            return \"[[1, 's']]\";\n+        }\n+        [[[1, \"str\"], \"s\"], 2] => {\n+            return \"[[[1, 'str'], 's'], 2]\";\n+        }\n+        [[true, 2], \"s\"] => {\n+            return \"[[true, 2], 's']\";\n+        }\n+        [[true, false], [true, 2]] => {\n+            return \"[[true, false], [true, 2]]\";\n+        }\n+        [[true, \"s1\"], [1, 2, \"s2\"], [false, \"s3\"]] => {\n+            return \"[[true, 's1'], [1, 2, 's2'], [false, 's3']]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern2() {\n+    assertEquals(\"[[1]]\", listMatchPattern2([[1]]));\n+    assertEquals(\"[1, [2]]\", listMatchPattern2([1, [2]]));\n+    assertEquals(\"[[1], [2]]\", listMatchPattern2([[1], [2]]));\n+    assertEquals(\"[1, [2, 3]]\", listMatchPattern2([1, [2, 3]]));\n+    assertEquals(\"[[1, 's']]\", listMatchPattern2([[1, \"s\"]]));\n+    assertEquals(\"[[[1, 'str'], 's'], 2]\", listMatchPattern2([[[1, \"str\"], \"s\"], 2]));\n+    assertEquals(\"[[true, 2], 's']\", listMatchPattern2([[true, 2], \"s\"]));\n+    assertEquals(\"[[true, false], [true, 2]]\", listMatchPattern2([[true, false], [true, 2]]));\n+    assertEquals(\"[[true, 's1'], [1, 2, 's2'], [false, 's3']]\",\n+                            listMatchPattern2([[true, \"s1\"], [1, 2, \"s2\"], [false, \"s3\"]]));\n+    assertEquals(\"No match\", \"No match\");\n+}\n+\n+const CONST1 = \"Ballerina\";\n+const CONST2 = 200;\n+\n+function listMatchPattern3(any v) returns string {\n+    match v {\n+        [CONST1] => {\n+            return \"[CONST1]\";\n+        }\n+        [CONST1, CONST2] => {\n+            return \"[CONST1, CONST2]\";\n+        }\n+        [[CONST1, CONST2]] => {\n+            return \"[[CONST1, CONST2]]\";\n+        }\n+        [[CONST1], [CONST2]] => {\n+            return \"[[CONST1], [CONST2]]\";\n+        }\n+        [[CONST1], [CONST2], [CONST1, CONST2]] => {\n+            return \"[[CONST1], [CONST2], [CONST1, CONST2]]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern3() {\n+    assertEquals(\"[CONST1]\", listMatchPattern3([CONST1]));\n+    assertEquals(\"[CONST1]\", listMatchPattern3([\"Ballerina\"]));\n+    assertEquals(\"[CONST1, CONST2]\", listMatchPattern3([\"Ballerina\", 200]));\n+    assertEquals(\"[CONST1, CONST2]\", listMatchPattern3([CONST1, CONST2]));\n+    assertEquals(\"[[CONST1, CONST2]]\", listMatchPattern3([[CONST1, CONST2]]));\n+    assertEquals(\"[[CONST1, CONST2]]\", listMatchPattern3([[\"Ballerina\", 200]]));\n+    assertEquals(\"[[CONST1], [CONST2]]\", listMatchPattern3([[CONST1], [CONST2]]));\n+    assertEquals(\"[[CONST1], [CONST2]]\", listMatchPattern3([[\"Ballerina\"], [200]]));\n+    assertEquals(\"[[CONST1], [CONST2], [CONST1, CONST2]]\", listMatchPattern3([[CONST1], [CONST2], [CONST1, CONST2]]));\n+    assertEquals(\"[[CONST1], [CONST2], [CONST1, CONST2]]\",\n+                                                    listMatchPattern3([[\"Ballerina\"], [200], [\"Ballerina\", 200]]));\n+    assertEquals(\"No match\", \"No match\");\n+}\n+\n+function listMatchPattern4([int, string, CONST1] v) returns string {\n+    match v {\n+        [1, \"str\", CONST1] => {\n+            return \"[1, 'str', CONST1]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern4() {\n+    assertEquals(\"[1, 'str', CONST1]\", listMatchPattern4([1, \"str\", CONST1]));\n+    assertEquals(\"No match\", listMatchPattern4([2, \"str\", CONST1]));\n+}\n+\n+function listMatchPattern5([int, string, CONST1|CONST2] v) returns string {\n+    match v {\n+        [1, \"s\", CONST1] => {\n+            return \"[1, 's', CONST1]\";\n+        }\n+        [2, \"a\", CONST2] => {\n+            return \"[2, 'a', CONST2]\";\n+        }\n+        _ => {\n+            return \"No match\";\n+        }\n+    }\n+}\n+\n+function testListMatchPattern5() {\n+    assertEquals(\"[1, 's', CONST1]\", listMatchPattern5([1, \"s\", CONST1]));\n+    assertEquals(\"[2, 'a', CONST2]\", listMatchPattern5([2, \"a\", CONST2]));\n+    assertEquals(\"No match\", listMatchPattern5([3, \"a\", CONST2]));\n+}\n+\n+function listMatchPattern6(any v) returns string {\n+    match v {\n+        [var a] => {\n+            return \"[var a]\";\n+        }\n+        [var a, var b] => {\n+            return \"[var a, var b]\";\n+        }\n+        [var a, var b, var c] => {\n+            return \"[var a, var b, var c]\";\n+        }\n+    }\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern6() {\n+    assertEquals(\"[var a]\", listMatchPattern6([1]));\n+    assertEquals(\"[var a, var b]\", listMatchPattern6([1, \"str\"]));\n+    assertEquals(\"[var a, var b, var c]\", listMatchPattern6([1, \"str\", true]));\n+    assertEquals(\"No match\", listMatchPattern6(1));\n+}\n+\n+function listMatchPattern7(any v) returns string {\n+    match v {\n+        [var a, var b] if a is int => {\n+            return \"[var a, var b] if a is int\";\n+        }\n+        [var a, var b] if b is int => {\n+            return \"[var a, var b] if b is int\";\n+        }\n+    }\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern7() {\n+    assertEquals(\"[var a, var b] if a is int\", listMatchPattern7([1, 2]));\n+    assertEquals(\"[var a, var b] if b is int\", listMatchPattern7([\"str\", 2]));\n+    assertEquals(\"No match\", listMatchPattern7([1]));\n+}\n+\n+function listMatchPattern8(any v) returns string {\n+    match v {\n+        [1] | [1, 2] | [1, 2, 3] => {\n+            return \"match1\";\n+        }\n+        [1, \"s\"] | [1, \"s\", 2] => {\n+            return \"match2\";\n+        }\n+        [true, \"s\"] | [true, false] | [true, 1, false] => {\n+            return \"match3\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern8() {\n+        assertEquals(\"match1\", listMatchPattern8([1]));\n+        assertEquals(\"match1\", listMatchPattern8([1, 2]));\n+        assertEquals(\"match1\", listMatchPattern8([1, 2, 3]));\n+        assertEquals(\"match2\", listMatchPattern8([1, \"s\"]));\n+        assertEquals(\"match2\", listMatchPattern8([1, \"s\", 2]));\n+        assertEquals(\"match3\", listMatchPattern8([true, \"s\"]));\n+        assertEquals(\"match3\", listMatchPattern8([true, false]));\n+        assertEquals(\"match3\", listMatchPattern8([true, 1, false]));\n+        assertEquals(\"No match\", \"No match\");\n+}\n+\n+function listMatchPattern9(any v) returns string {\n+    match v {\n+        [CONST1] | [CONST1, CONST2] => {\n+            return \"match1\";\n+        }\n+        [[CONST1, CONST2]] | [[CONST1], [CONST2]] => {\n+            return \"match2\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern9() {\n+    assertEquals(\"match1\", listMatchPattern9([CONST1]));\n+    assertEquals(\"match1\", listMatchPattern9([\"Ballerina\"]));\n+    assertEquals(\"match1\", listMatchPattern9([\"Ballerina\", 200]));\n+    assertEquals(\"match1\", listMatchPattern9([CONST1, CONST2]));\n+    assertEquals(\"match2\", listMatchPattern9([[CONST1, CONST2]]));\n+    assertEquals(\"match2\", listMatchPattern9([[\"Ballerina\", 200]]));\n+    assertEquals(\"match2\", listMatchPattern9([[CONST1], [CONST2]]));\n+    assertEquals(\"match2\", listMatchPattern9([[\"Ballerina\"], [200]]));\n+    assertEquals(\"No match\", \"No match\");\n+}\n+\n+function listMatchPattern10(any v) returns string {\n+    match v {\n+        [var a, 5] | [var a, 7] => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwNTAxMw=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTk1NzUxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTozOTowMFrOHdCKmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzowMlrOHe7V1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwNjIzNQ==", "bodyText": "How about something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              match patterns should contain same set of variables\n          \n          \n            \n              all match patterns should contain the same set of variables", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500206235", "createdAt": "2020-10-06T11:39:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -965,6 +965,12 @@ error.match.stmt.unreachable.pattern.available=\\\n error.match.pattern.not.supported=\\\n   unsupported match pattern\n \n+error.match.patterns.should.contain.same.set.of.variables=\\\n+  match patterns should contain same set of variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU3Mg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191572", "createdAt": "2020-10-09T05:07:02Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -965,6 +965,12 @@ error.match.stmt.unreachable.pattern.available=\\\n error.match.pattern.not.supported=\\\n   unsupported match pattern\n \n+error.match.patterns.should.contain.same.set.of.variables=\\\n+  match patterns should contain same set of variables", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwNjIzNQ=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjA3NzU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangListMatchPattern.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjoxMjoyOVrOHdDT0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNzowMFrOHe7VzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIyNDk3Ng==", "bodyText": "Do we need declaredVars here? Aren't these declared vars always part of a var binding-pattern as a match-pattern? If so we can access that from matchPatterns right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500224976", "createdAt": "2020-10-06T12:12:29Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangListMatchPattern.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.ListMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPattern;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangListMatchPattern extends BLangMatchPattern implements ListMatchPatternNode {\n+    public List<BLangMatchPattern> matchPatterns = new ArrayList<>();\n+    public BLangRestMatchPattern restMatchPattern;\n+    public Map<String, BVarSymbol> declaredVars = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU2NQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191565", "createdAt": "2020-10-09T05:07:00Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangListMatchPattern.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.ListMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPattern;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangListMatchPattern extends BLangMatchPattern implements ListMatchPatternNode {\n+    public List<BLangMatchPattern> matchPatterns = new ArrayList<>();\n+    public BLangRestMatchPattern restMatchPattern;\n+    public Map<String, BVarSymbol> declaredVars = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIyNDk3Ng=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc2NTYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyODoyOVrOHdJ6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDoyMzoxN1rOHgU5lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzI0Mw==", "bodyText": "I'm not sure if just these two checks will be enough. Shouldn't we consider intersections?\nShouldn't the following be allowed?\npublic function main() {\n    [any, any] m = [1, 2];\n    int|error a;\n    int|error b;\n\n    match m {\n        [a, b] => {\n            \n        }\n    }\n}\nCurrently fails with\n$ ballerina run zxa.bal Compiling source\n        zxa.bal\nerror: .::zxa.bal:7:9: pattern will not be matched", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500333243", "createdAt": "2020-10-06T14:28:29Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -285,6 +286,18 @@ public boolean isSubTypeOfList(BType type) {\n         return ((BUnionType) type).getMemberTypes().stream().allMatch(this::isSubTypeOfList);\n     }\n \n+    public BType resolvePatternTypeFromMatchExpr(BType matchExprType, BType listMatchPatternType,\n+                                                 BLangListMatchPattern listMatchPattern) {\n+\n+        if (isAssignable(listMatchPatternType, matchExprType)) {\n+            return listMatchPatternType;\n+        }\n+        if (isAssignable(matchExprType, listMatchPatternType)) {\n+            return matchExprType;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzkwOQ==", "bodyText": "Can't we use org.wso2.ballerinalang.compiler.semantics.analyzer.Types#getTypeIntersection if that is the case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500333909", "createdAt": "2020-10-06T14:29:08Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -285,6 +286,18 @@ public boolean isSubTypeOfList(BType type) {\n         return ((BUnionType) type).getMemberTypes().stream().allMatch(this::isSubTypeOfList);\n     }\n \n+    public BType resolvePatternTypeFromMatchExpr(BType matchExprType, BType listMatchPatternType,\n+                                                 BLangListMatchPattern listMatchPattern) {\n+\n+        if (isAssignable(listMatchPatternType, matchExprType)) {\n+            return listMatchPatternType;\n+        }\n+        if (isAssignable(matchExprType, listMatchPatternType)) {\n+            return matchExprType;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzI0Mw=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTQ5Nw==", "bodyText": "Added getTypeIntersection function. Above example is not supported according to spec, because the var ref should be declared a module-level const. Anyway, the error message is incorrect and it is fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191497", "createdAt": "2020-10-09T05:06:44Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -285,6 +286,18 @@ public boolean isSubTypeOfList(BType type) {\n         return ((BUnionType) type).getMemberTypes().stream().allMatch(this::isSubTypeOfList);\n     }\n \n+    public BType resolvePatternTypeFromMatchExpr(BType matchExprType, BType listMatchPatternType,\n+                                                 BLangListMatchPattern listMatchPattern) {\n+\n+        if (isAssignable(listMatchPatternType, matchExprType)) {\n+            return listMatchPatternType;\n+        }\n+        if (isAssignable(matchExprType, listMatchPatternType)) {\n+            return matchExprType;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzI0Mw=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODkwMA==", "bodyText": "Ah, yes. Tested with the current changes and the errors also seem to be correct.\nerror: .::xyz.bal:7:10: variable 'a' should be declared as constant\nerror: .::xyz.bal:7:13: variable 'b' should be declared as constant", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r503658900", "createdAt": "2020-10-13T04:23:17Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -285,6 +286,18 @@ public boolean isSubTypeOfList(BType type) {\n         return ((BUnionType) type).getMemberTypes().stream().allMatch(this::isSubTypeOfList);\n     }\n \n+    public BType resolvePatternTypeFromMatchExpr(BType matchExprType, BType listMatchPatternType,\n+                                                 BLangListMatchPattern listMatchPattern) {\n+\n+        if (isAssignable(listMatchPatternType, matchExprType)) {\n+            return listMatchPatternType;\n+        }\n+        if (isAssignable(matchExprType, listMatchPatternType)) {\n+            return matchExprType;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzI0Mw=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc3NTA5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyOTo1OFrOHdKAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNjo0N1rOHe7VmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNDc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            BLangConstPattern constPattern = (BLangConstPattern) matchPattern;\n          \n          \n            \n                            return constPattern.type;\n          \n          \n            \n                            return ((BLangConstPattern) matchPattern).type;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500334754", "createdAt": "2020-10-06T14:29:58Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2360,11 +2413,51 @@ public void visit(BLangMatchStaticBindingPatternClause patternClause) {\n         analyzeStmt(patternClause.body, this.env);\n     }\n \n-    @Override\n-    public void visit(BLangCaptureBindingPattern captureBindingPattern) {\n-        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPattern.getIdentifier().getValue()),\n-                env.enclPkg.packageID, symTable.anyType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+    private void defineSymbolForCaptureBindingPattern(BLangCaptureBindingPattern captureBindingPattern,\n+                                                      BType identifierType) {\n+\n+        String captureBindingPatternIdentifier = captureBindingPattern.getIdentifier().getValue();\n+\n+        if (this.declaredVarsInMatchPattern.containsKey(captureBindingPatternIdentifier)) {\n+            dlog.error(captureBindingPattern.pos, DiagnosticCode.REDECLARED_SYMBOL, captureBindingPatternIdentifier);\n+            return;\n+        }\n+\n+        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPatternIdentifier),\n+                env.enclPkg.packageID, identifierType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+\n+        declaredVarsInMatchPattern.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+\n+        if (this.declaredVarsInMatchClause.containsKey(captureBindingPatternIdentifier)) {\n+            return;\n+        }\n         symbolEnter.defineSymbol(captureBindingPattern.pos, captureBindingPattern.symbol, env);\n+        declaredVarsInMatchClause.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+    }\n+\n+    private BType getMatchPatternType(BLangMatchPattern matchPattern) {\n+\n+        NodeKind matchPatternKind = matchPattern.getKind();\n+        switch (matchPatternKind) {\n+            case WILDCARD_MATCH_PATTERN:\n+                return symTable.anyType;\n+            case REST_MATCH_PATTERN:\n+            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n+                return symTable.anyOrErrorType;\n+            case CONST_MATCH_PATTERN:\n+                BLangConstPattern constPattern = (BLangConstPattern) matchPattern;\n+                return constPattern.type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTUxMw==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191513", "createdAt": "2020-10-09T05:06:47Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2360,11 +2413,51 @@ public void visit(BLangMatchStaticBindingPatternClause patternClause) {\n         analyzeStmt(patternClause.body, this.env);\n     }\n \n-    @Override\n-    public void visit(BLangCaptureBindingPattern captureBindingPattern) {\n-        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPattern.getIdentifier().getValue()),\n-                env.enclPkg.packageID, symTable.anyType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+    private void defineSymbolForCaptureBindingPattern(BLangCaptureBindingPattern captureBindingPattern,\n+                                                      BType identifierType) {\n+\n+        String captureBindingPatternIdentifier = captureBindingPattern.getIdentifier().getValue();\n+\n+        if (this.declaredVarsInMatchPattern.containsKey(captureBindingPatternIdentifier)) {\n+            dlog.error(captureBindingPattern.pos, DiagnosticCode.REDECLARED_SYMBOL, captureBindingPatternIdentifier);\n+            return;\n+        }\n+\n+        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPatternIdentifier),\n+                env.enclPkg.packageID, identifierType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+\n+        declaredVarsInMatchPattern.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+\n+        if (this.declaredVarsInMatchClause.containsKey(captureBindingPatternIdentifier)) {\n+            return;\n+        }\n         symbolEnter.defineSymbol(captureBindingPattern.pos, captureBindingPattern.symbol, env);\n+        declaredVarsInMatchClause.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+    }\n+\n+    private BType getMatchPatternType(BLangMatchPattern matchPattern) {\n+\n+        NodeKind matchPatternKind = matchPattern.getKind();\n+        switch (matchPatternKind) {\n+            case WILDCARD_MATCH_PATTERN:\n+                return symTable.anyType;\n+            case REST_MATCH_PATTERN:\n+            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n+                return symTable.anyOrErrorType;\n+            case CONST_MATCH_PATTERN:\n+                BLangConstPattern constPattern = (BLangConstPattern) matchPattern;\n+                return constPattern.type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNDc1NA=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc3NzA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozMDoxOFrOHdKB0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNjo1MFrOHe7Vqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNTA1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                BType memberMatchPatternType = getMatchPatternType(memberMatchPattern);\n          \n          \n            \n                                results.add(memberMatchPatternType);\n          \n          \n            \n                                results.add(getMatchPatternType(memberMatchPattern));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500335056", "createdAt": "2020-10-06T14:30:18Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2360,11 +2413,51 @@ public void visit(BLangMatchStaticBindingPatternClause patternClause) {\n         analyzeStmt(patternClause.body, this.env);\n     }\n \n-    @Override\n-    public void visit(BLangCaptureBindingPattern captureBindingPattern) {\n-        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPattern.getIdentifier().getValue()),\n-                env.enclPkg.packageID, symTable.anyType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+    private void defineSymbolForCaptureBindingPattern(BLangCaptureBindingPattern captureBindingPattern,\n+                                                      BType identifierType) {\n+\n+        String captureBindingPatternIdentifier = captureBindingPattern.getIdentifier().getValue();\n+\n+        if (this.declaredVarsInMatchPattern.containsKey(captureBindingPatternIdentifier)) {\n+            dlog.error(captureBindingPattern.pos, DiagnosticCode.REDECLARED_SYMBOL, captureBindingPatternIdentifier);\n+            return;\n+        }\n+\n+        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPatternIdentifier),\n+                env.enclPkg.packageID, identifierType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+\n+        declaredVarsInMatchPattern.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+\n+        if (this.declaredVarsInMatchClause.containsKey(captureBindingPatternIdentifier)) {\n+            return;\n+        }\n         symbolEnter.defineSymbol(captureBindingPattern.pos, captureBindingPattern.symbol, env);\n+        declaredVarsInMatchClause.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+    }\n+\n+    private BType getMatchPatternType(BLangMatchPattern matchPattern) {\n+\n+        NodeKind matchPatternKind = matchPattern.getKind();\n+        switch (matchPatternKind) {\n+            case WILDCARD_MATCH_PATTERN:\n+                return symTable.anyType;\n+            case REST_MATCH_PATTERN:\n+            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n+                return symTable.anyOrErrorType;\n+            case CONST_MATCH_PATTERN:\n+                BLangConstPattern constPattern = (BLangConstPattern) matchPattern;\n+                return constPattern.type;\n+            case LIST_MATCH_PATTERN:\n+                List<BType> results = new ArrayList<>();\n+\n+                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n+                for (BLangMatchPattern memberMatchPattern : listMatchPattern.matchPatterns) {\n+                    BType memberMatchPatternType = getMatchPatternType(memberMatchPattern);\n+                    results.add(memberMatchPatternType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTUzMA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191530", "createdAt": "2020-10-09T05:06:50Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2360,11 +2413,51 @@ public void visit(BLangMatchStaticBindingPatternClause patternClause) {\n         analyzeStmt(patternClause.body, this.env);\n     }\n \n-    @Override\n-    public void visit(BLangCaptureBindingPattern captureBindingPattern) {\n-        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPattern.getIdentifier().getValue()),\n-                env.enclPkg.packageID, symTable.anyType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+    private void defineSymbolForCaptureBindingPattern(BLangCaptureBindingPattern captureBindingPattern,\n+                                                      BType identifierType) {\n+\n+        String captureBindingPatternIdentifier = captureBindingPattern.getIdentifier().getValue();\n+\n+        if (this.declaredVarsInMatchPattern.containsKey(captureBindingPatternIdentifier)) {\n+            dlog.error(captureBindingPattern.pos, DiagnosticCode.REDECLARED_SYMBOL, captureBindingPatternIdentifier);\n+            return;\n+        }\n+\n+        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPatternIdentifier),\n+                env.enclPkg.packageID, identifierType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+\n+        declaredVarsInMatchPattern.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+\n+        if (this.declaredVarsInMatchClause.containsKey(captureBindingPatternIdentifier)) {\n+            return;\n+        }\n         symbolEnter.defineSymbol(captureBindingPattern.pos, captureBindingPattern.symbol, env);\n+        declaredVarsInMatchClause.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+    }\n+\n+    private BType getMatchPatternType(BLangMatchPattern matchPattern) {\n+\n+        NodeKind matchPatternKind = matchPattern.getKind();\n+        switch (matchPatternKind) {\n+            case WILDCARD_MATCH_PATTERN:\n+                return symTable.anyType;\n+            case REST_MATCH_PATTERN:\n+            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n+                return symTable.anyOrErrorType;\n+            case CONST_MATCH_PATTERN:\n+                BLangConstPattern constPattern = (BLangConstPattern) matchPattern;\n+                return constPattern.type;\n+            case LIST_MATCH_PATTERN:\n+                List<BType> results = new ArrayList<>();\n+\n+                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n+                for (BLangMatchPattern memberMatchPattern : listMatchPattern.matchPatterns) {\n+                    BType memberMatchPatternType = getMatchPatternType(memberMatchPattern);\n+                    results.add(memberMatchPatternType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNTA1Ng=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjg0NDY2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/list-match-pattern.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDo0MTozMlrOHdKr0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNTowNjo1NFrOHe7Vtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0NTgxMA==", "bodyText": "Indentation seems off. Please check other functions too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500345810", "createdAt": "2020-10-06T14:41:32Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/list-match-pattern.bal", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function listMatchPattern1(any v) returns string {\n+    match v {\n+        [1] => {\n+            return \"[1]\";\n+        }\n+        [1, 2] => {\n+            return \"[1, 2]\";\n+        }\n+        [1, 2, 3] => {\n+            return \"[1, 2, 3]\";\n+        }\n+        [1, \"s\"] => {\n+            return \"[1, 's']\";\n+        }\n+        [1, \"s\", 2] => {\n+            return \"[1, 's', 2]\";\n+        }\n+        [true, \"s\"] => {\n+            return \"[true, 's']\";\n+        }\n+        [true, false] => {\n+            return \"[true, false]\";\n+        }\n+        [true, 1, false] => {\n+            return \"[true, 1, false]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern1() {\n+        assertEquals(\"[1]\", listMatchPattern1([1]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU0Mg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191542", "createdAt": "2020-10-09T05:06:54Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/list-match-pattern.bal", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function listMatchPattern1(any v) returns string {\n+    match v {\n+        [1] => {\n+            return \"[1]\";\n+        }\n+        [1, 2] => {\n+            return \"[1, 2]\";\n+        }\n+        [1, 2, 3] => {\n+            return \"[1, 2, 3]\";\n+        }\n+        [1, \"s\"] => {\n+            return \"[1, 's']\";\n+        }\n+        [1, \"s\", 2] => {\n+            return \"[1, 's', 2]\";\n+        }\n+        [true, \"s\"] => {\n+            return \"[true, 's']\";\n+        }\n+        [true, false] => {\n+            return \"[true, false]\";\n+        }\n+        [true, 1, false] => {\n+            return \"[true, 1, false]\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testListMatchPattern1() {\n+        assertEquals(\"[1]\", listMatchPattern1([1]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0NTgxMA=="}, "originalCommit": {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjQ3OTg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/ListMatchPatternNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjo1MTo1NlrOHiGNiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzo0NDo0OVrOHiIkUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxNTQwMQ==", "bodyText": "Let's use 2.0.0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r505515401", "createdAt": "2020-10-15T12:51:56Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/ListMatchPatternNode.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.matchpatterns;\n+\n+import java.util.List;\n+\n+/**\n+ * The interface with the APIs to implement the list-match-pattern.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d7a29863790a7d4dfc492a8b495379074801f22"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU1NDAwMg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r505554002", "createdAt": "2020-10-15T13:44:49Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/ListMatchPatternNode.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.matchpatterns;\n+\n+import java.util.List;\n+\n+/**\n+ * The interface with the APIs to implement the list-match-pattern.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxNTQwMQ=="}, "originalCommit": {"oid": "4d7a29863790a7d4dfc492a8b495379074801f22"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4951, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}