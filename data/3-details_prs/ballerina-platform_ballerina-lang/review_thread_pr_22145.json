{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyOTMzOTIz", "number": 22145, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODo0MDoxM1rODrHGVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODo0Mzo0OFrODrHLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTMxNjY5OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODo0MDoxM1rOF7QvMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDozMjoxNlrOF7d70w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NDUyOA==", "bodyText": "Shall we revisit this function names? It bit difficult to get the idea that what this does by looking at the code?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397684528", "createdAt": "2020-03-25T08:40:13Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -270,210 +271,246 @@ public type Producer client object {\n function sendStringValues(Producer producer, handle value, handle topic, anydata? key, int? partition, int? timestamp,\n     string keySerializerType) returns ProducerError? {\n     if (key is ()) {\n-        return producerSendString(producer, value, topic, partition, timestamp);\n+        return sendString(producer, value, topic, partition, timestamp);\n     }\n     if (keySerializerType == SER_STRING) {\n         if (key is string) {\n             handle keyHandle = java:fromString(key);\n-            return producerSendStringString(producer, value, topic, keyHandle, partition, timestamp);\n+            return sendStringString(producer, value, topic, keyHandle, partition, timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3NTA4Nw==", "bodyText": "The convention used is send<value type><key type>. This is mentioned in a comment in line no. 554. Is there a better way to name them, without making them too long ?\nAn option is to name them as send<value type>Value<key type>Key(). But this makes names too long, IMHO. For an example;\npublic function sendByteArrayValueByteArrayKey()\nIf this is okay, I will update the names as per this convention. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397875087", "createdAt": "2020-03-25T13:59:17Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -270,210 +271,246 @@ public type Producer client object {\n function sendStringValues(Producer producer, handle value, handle topic, anydata? key, int? partition, int? timestamp,\n     string keySerializerType) returns ProducerError? {\n     if (key is ()) {\n-        return producerSendString(producer, value, topic, partition, timestamp);\n+        return sendString(producer, value, topic, partition, timestamp);\n     }\n     if (keySerializerType == SER_STRING) {\n         if (key is string) {\n             handle keyHandle = java:fromString(key);\n-            return producerSendStringString(producer, value, topic, keyHandle, partition, timestamp);\n+            return sendStringString(producer, value, topic, keyHandle, partition, timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NDUyOA=="}, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5OTg3Nw==", "bodyText": "IMO,  one of the most important factor is the readability of the code. We should able to read this even in the non-IDE situation. My suggestion is to go further and change to something like\nsendByteArrayValueAndByteArrayKey() if possible.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397899877", "createdAt": "2020-03-25T14:31:13Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -270,210 +271,246 @@ public type Producer client object {\n function sendStringValues(Producer producer, handle value, handle topic, anydata? key, int? partition, int? timestamp,\n     string keySerializerType) returns ProducerError? {\n     if (key is ()) {\n-        return producerSendString(producer, value, topic, partition, timestamp);\n+        return sendString(producer, value, topic, partition, timestamp);\n     }\n     if (keySerializerType == SER_STRING) {\n         if (key is string) {\n             handle keyHandle = java:fromString(key);\n-            return producerSendStringString(producer, value, topic, keyHandle, partition, timestamp);\n+            return sendStringString(producer, value, topic, keyHandle, partition, timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NDUyOA=="}, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwMDc1NQ==", "bodyText": "Agreed. will update.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397900755", "createdAt": "2020-03-25T14:32:16Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -270,210 +271,246 @@ public type Producer client object {\n function sendStringValues(Producer producer, handle value, handle topic, anydata? key, int? partition, int? timestamp,\n     string keySerializerType) returns ProducerError? {\n     if (key is ()) {\n-        return producerSendString(producer, value, topic, partition, timestamp);\n+        return sendString(producer, value, topic, partition, timestamp);\n     }\n     if (keySerializerType == SER_STRING) {\n         if (key is string) {\n             handle keyHandle = java:fromString(key);\n-            return producerSendStringString(producer, value, topic, keyHandle, partition, timestamp);\n+            return sendStringString(producer, value, topic, keyHandle, partition, timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NDUyOA=="}, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTMyODg0OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/AvroUtils.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODo0Mzo0OFrOF7Q2lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxOTo0N1rOF7gRAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjQyMQ==", "bodyText": "Shall we try to return ErrorValue here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397686421", "createdAt": "2020-03-25T08:43:48Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/AvroUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.utils;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+import org.ballerinalang.jvm.util.exceptions.BLangRuntimeException;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.util.List;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getAvroGenericRecord;\n+\n+/**\n+ * Utility functions to handle kafka avro operations.\n+ */\n+public class AvroUtils {\n+    /*\n+     * This is separated from the other classes since we don't pack avro dependencies  with the distribution.\n+     */\n+    private AvroUtils(){}\n+\n+    protected static void populateBallerinaGenericAvroRecord(MapValue<String, Object> genericAvroRecord,\n+                                                             GenericRecord record) {\n+        List<Schema.Field> fields = record.getSchema().getFields();\n+        for (Schema.Field field : fields) {\n+            if (record.get(field.name()) instanceof Utf8) {\n+                genericAvroRecord.put(field.name(), record.get(field.name()).toString());\n+            } else if (record.get(field.name()) instanceof GenericRecord) {\n+                populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) record.get(field.name()));\n+            } else {\n+                genericAvroRecord.put(field.name(), record.get(field.name()));\n+            }\n+        }\n+    }\n+\n+    protected static MapValue<String, Object> handleAvroConsumer(Object value) {\n+        if (value instanceof GenericRecord) {\n+            MapValue<String, Object> genericAvroRecord = getAvroGenericRecord();\n+            populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) value);\n+            return genericAvroRecord;\n+        } else {\n+            throw new BLangRuntimeException(\"Invalid type - expected: AvroGenericRecord\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3NzE5OQ==", "bodyText": "This method is to just populate the consumer record. Ideally, this line of code shouldn't be reached. Also, this is called inside a resource invocation. Hence, I think throwing this is appropriate.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397877199", "createdAt": "2020-03-25T14:02:00Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/AvroUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.utils;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+import org.ballerinalang.jvm.util.exceptions.BLangRuntimeException;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.util.List;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getAvroGenericRecord;\n+\n+/**\n+ * Utility functions to handle kafka avro operations.\n+ */\n+public class AvroUtils {\n+    /*\n+     * This is separated from the other classes since we don't pack avro dependencies  with the distribution.\n+     */\n+    private AvroUtils(){}\n+\n+    protected static void populateBallerinaGenericAvroRecord(MapValue<String, Object> genericAvroRecord,\n+                                                             GenericRecord record) {\n+        List<Schema.Field> fields = record.getSchema().getFields();\n+        for (Schema.Field field : fields) {\n+            if (record.get(field.name()) instanceof Utf8) {\n+                genericAvroRecord.put(field.name(), record.get(field.name()).toString());\n+            } else if (record.get(field.name()) instanceof GenericRecord) {\n+                populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) record.get(field.name()));\n+            } else {\n+                genericAvroRecord.put(field.name(), record.get(field.name()));\n+            }\n+        }\n+    }\n+\n+    protected static MapValue<String, Object> handleAvroConsumer(Object value) {\n+        if (value instanceof GenericRecord) {\n+            MapValue<String, Object> genericAvroRecord = getAvroGenericRecord();\n+            populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) value);\n+            return genericAvroRecord;\n+        } else {\n+            throw new BLangRuntimeException(\"Invalid type - expected: AvroGenericRecord\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjQyMQ=="}, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NDk0Nw==", "bodyText": "Both are extending from RuntimeException. But behaviour is different.  What is the behaviour getting if this throws this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397884947", "createdAt": "2020-03-25T14:12:30Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/AvroUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.utils;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+import org.ballerinalang.jvm.util.exceptions.BLangRuntimeException;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.util.List;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getAvroGenericRecord;\n+\n+/**\n+ * Utility functions to handle kafka avro operations.\n+ */\n+public class AvroUtils {\n+    /*\n+     * This is separated from the other classes since we don't pack avro dependencies  with the distribution.\n+     */\n+    private AvroUtils(){}\n+\n+    protected static void populateBallerinaGenericAvroRecord(MapValue<String, Object> genericAvroRecord,\n+                                                             GenericRecord record) {\n+        List<Schema.Field> fields = record.getSchema().getFields();\n+        for (Schema.Field field : fields) {\n+            if (record.get(field.name()) instanceof Utf8) {\n+                genericAvroRecord.put(field.name(), record.get(field.name()).toString());\n+            } else if (record.get(field.name()) instanceof GenericRecord) {\n+                populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) record.get(field.name()));\n+            } else {\n+                genericAvroRecord.put(field.name(), record.get(field.name()));\n+            }\n+        }\n+    }\n+\n+    protected static MapValue<String, Object> handleAvroConsumer(Object value) {\n+        if (value instanceof GenericRecord) {\n+            MapValue<String, Object> genericAvroRecord = getAvroGenericRecord();\n+            populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) value);\n+            return genericAvroRecord;\n+        } else {\n+            throw new BLangRuntimeException(\"Invalid type - expected: AvroGenericRecord\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjQyMQ=="}, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4Njg5Mg==", "bodyText": "This method is called from both the poll() function and the resource. If this line is hit when the poll is called, this will panic. If this is hit through the resource, this will log the error, and will continue.\nBut as I said, ideally, this wouldn't be reached until a user provides an incorrect configuration.\nI will change this to ErrorValue anyways.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397886892", "createdAt": "2020-03-25T14:15:05Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/AvroUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.utils;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+import org.ballerinalang.jvm.util.exceptions.BLangRuntimeException;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.util.List;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getAvroGenericRecord;\n+\n+/**\n+ * Utility functions to handle kafka avro operations.\n+ */\n+public class AvroUtils {\n+    /*\n+     * This is separated from the other classes since we don't pack avro dependencies  with the distribution.\n+     */\n+    private AvroUtils(){}\n+\n+    protected static void populateBallerinaGenericAvroRecord(MapValue<String, Object> genericAvroRecord,\n+                                                             GenericRecord record) {\n+        List<Schema.Field> fields = record.getSchema().getFields();\n+        for (Schema.Field field : fields) {\n+            if (record.get(field.name()) instanceof Utf8) {\n+                genericAvroRecord.put(field.name(), record.get(field.name()).toString());\n+            } else if (record.get(field.name()) instanceof GenericRecord) {\n+                populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) record.get(field.name()));\n+            } else {\n+                genericAvroRecord.put(field.name(), record.get(field.name()));\n+            }\n+        }\n+    }\n+\n+    protected static MapValue<String, Object> handleAvroConsumer(Object value) {\n+        if (value instanceof GenericRecord) {\n+            MapValue<String, Object> genericAvroRecord = getAvroGenericRecord();\n+            populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) value);\n+            return genericAvroRecord;\n+        } else {\n+            throw new BLangRuntimeException(\"Invalid type - expected: AvroGenericRecord\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjQyMQ=="}, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMTg1OQ==", "bodyText": "Sometimes back there was a discussion about this throwing error whether it ErrorValue or BRuntime*. I couldn't remember now. @hasithaa @pubudu91 Any comment about what to use here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397931859", "createdAt": "2020-03-25T15:10:54Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/AvroUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.utils;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+import org.ballerinalang.jvm.util.exceptions.BLangRuntimeException;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.util.List;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getAvroGenericRecord;\n+\n+/**\n+ * Utility functions to handle kafka avro operations.\n+ */\n+public class AvroUtils {\n+    /*\n+     * This is separated from the other classes since we don't pack avro dependencies  with the distribution.\n+     */\n+    private AvroUtils(){}\n+\n+    protected static void populateBallerinaGenericAvroRecord(MapValue<String, Object> genericAvroRecord,\n+                                                             GenericRecord record) {\n+        List<Schema.Field> fields = record.getSchema().getFields();\n+        for (Schema.Field field : fields) {\n+            if (record.get(field.name()) instanceof Utf8) {\n+                genericAvroRecord.put(field.name(), record.get(field.name()).toString());\n+            } else if (record.get(field.name()) instanceof GenericRecord) {\n+                populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) record.get(field.name()));\n+            } else {\n+                genericAvroRecord.put(field.name(), record.get(field.name()));\n+            }\n+        }\n+    }\n+\n+    protected static MapValue<String, Object> handleAvroConsumer(Object value) {\n+        if (value instanceof GenericRecord) {\n+            MapValue<String, Object> genericAvroRecord = getAvroGenericRecord();\n+            populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) value);\n+            return genericAvroRecord;\n+        } else {\n+            throw new BLangRuntimeException(\"Invalid type - expected: AvroGenericRecord\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjQyMQ=="}, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzODk0NQ==", "bodyText": "Updated", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22145#discussion_r397938945", "createdAt": "2020-03-25T15:19:47Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/AvroUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.utils;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+import org.ballerinalang.jvm.util.exceptions.BLangRuntimeException;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.util.List;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getAvroGenericRecord;\n+\n+/**\n+ * Utility functions to handle kafka avro operations.\n+ */\n+public class AvroUtils {\n+    /*\n+     * This is separated from the other classes since we don't pack avro dependencies  with the distribution.\n+     */\n+    private AvroUtils(){}\n+\n+    protected static void populateBallerinaGenericAvroRecord(MapValue<String, Object> genericAvroRecord,\n+                                                             GenericRecord record) {\n+        List<Schema.Field> fields = record.getSchema().getFields();\n+        for (Schema.Field field : fields) {\n+            if (record.get(field.name()) instanceof Utf8) {\n+                genericAvroRecord.put(field.name(), record.get(field.name()).toString());\n+            } else if (record.get(field.name()) instanceof GenericRecord) {\n+                populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) record.get(field.name()));\n+            } else {\n+                genericAvroRecord.put(field.name(), record.get(field.name()));\n+            }\n+        }\n+    }\n+\n+    protected static MapValue<String, Object> handleAvroConsumer(Object value) {\n+        if (value instanceof GenericRecord) {\n+            MapValue<String, Object> genericAvroRecord = getAvroGenericRecord();\n+            populateBallerinaGenericAvroRecord(genericAvroRecord, (GenericRecord) value);\n+            return genericAvroRecord;\n+        } else {\n+            throw new BLangRuntimeException(\"Invalid type - expected: AvroGenericRecord\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjQyMQ=="}, "originalCommit": {"oid": "491168770e91ce92b6fa170d4d6721785321559e"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 676, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}