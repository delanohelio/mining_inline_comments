{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjkxMTU2", "number": 26825, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNDozOFrOE3zQhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo1NjoxN1rOFOHRdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQ2OTUwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNDozOFrOHxW78A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNDozOFrOHxW78A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODA2NA==", "bodyText": "Extra new line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521518064", "createdAt": "2020-11-11T17:24:38Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    int i = 0;\n+    string[] strs = [];\n+    foreach string|xml e in x1 {\n+        if e is string {\n+            strs[i] = e;\n+            i += 1;\n+        }\n+    }\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQ3MDk0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNTowMlrOHxW82Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNTowMlrOHxW82Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODI5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function testXMLLiteralWithEscapeSequence(){\n          \n          \n            \n            function testXMLLiteralWithEscapeSequence() {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521518297", "createdAt": "2020-11-11T17:25:02Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQ3MjE2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNToyMFrOHxW9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDo0MzoyN1rOH3KhEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODQ3OQ==", "bodyText": "Don't we have to assert anything?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521518479", "createdAt": "2020-11-11T17:25:20Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    int i = 0;\n+    string[] strs = [];\n+    foreach string|xml e in x1 {\n+        if e is string {\n+            strs[i] = e;\n+            i += 1;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgyNjgwNg==", "bodyText": "since we changed the iterator return type to xml fom xml|string this tests if we get the below error.\n\nincompatible types: 'xml' will not be matched to 'string'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r522826806", "createdAt": "2020-11-13T09:25:02Z", "author": {"login": "suleka96"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    int i = 0;\n+    string[] strs = [];\n+    foreach string|xml e in x1 {\n+        if e is string {\n+            strs[i] = e;\n+            i += 1;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODQ3OQ=="}, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwNjAzNA==", "bodyText": "Sorry, missed that this was a negative test. In the long term though, this will become outdated once we allow the type test with intersections. Let's leave this as is until then.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527606034", "createdAt": "2020-11-20T10:43:27Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    int i = 0;\n+    string[] strs = [];\n+    foreach string|xml e in x1 {\n+        if e is string {\n+            strs[i] = e;\n+            i += 1;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODQ3OQ=="}, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQ3NDE5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNTo1OFrOHxW-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNTo1OFrOHxW-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODgxOQ==", "bodyText": "Instead of using i we should be able to do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        strs[i] = e;\n          \n          \n            \n                        i += 1;\n          \n          \n            \n                        strs.push(e);\n          \n      \n    \n    \n  \n\nright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521518819", "createdAt": "2020-11-11T17:25:58Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    int i = 0;\n+    string[] strs = [];\n+    foreach string|xml e in x1 {\n+        if e is string {\n+            strs[i] = e;\n+            i += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQ3NjU3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNjozOVrOHxXAZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNjozOVrOHxXAZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxOTIwNg==", "bodyText": "Shall we fix the indentation here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521519206", "createdAt": "2020-11-11T17:26:39Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -40,11 +40,9 @@ function foreachTest() returns [int, string][] {\n \n     int i = 0;\n     foreach var x in bookstore/<book> {\n-        if x is xml {\n             titles[count] = [i, (x/<title>/*).toString()];\n             count +=1;\n             i +=1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTcxNjM5OnYy", "diffSide": "RIGHT", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODoyOTowOVrOHxZT0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODoyOTowOVrOHxZT0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1Njk0Nw==", "bodyText": "Can't we keep the else logic as is and make this an else if?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521556947", "createdAt": "2020-11-11T18:29:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java", "diffHunk": "@@ -51,6 +53,14 @@ public static BXml concat(Object... arrayValue) {\n                 backingArray.add(xmlText);\n                 lastItem = xmlText;\n             } else {\n+                if (refValue instanceof BXmlSequence) {\n+                    List<BXml> sequenceChildren = ((BXmlSequence) refValue).getChildrenList();\n+                    for (int j = 0; j < sequenceChildren.size(); j++) {\n+                        backingArray.add(sequenceChildren.get(j));\n+                    }\n+                    lastItem = (BXml) refValue;\n+                    continue;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTcyMjAxOnYy", "diffSide": "RIGHT", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODozMDo0NlrOHxZXSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODozMDo0NlrOHxZXSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NzgzNQ==", "bodyText": "Have we added tests for this fix?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521557835", "createdAt": "2020-11-11T18:30:46Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java", "diffHunk": "@@ -51,6 +53,14 @@ public static BXml concat(Object... arrayValue) {\n                 backingArray.add(xmlText);\n                 lastItem = xmlText;\n             } else {\n+                if (refValue instanceof BXmlSequence) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTcyNzIxOnYy", "diffSide": "RIGHT", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODozMjoxOVrOHxZakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODozMjoxOVrOHxZakg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1ODY3NA==", "bodyText": "Can't we just do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                List<BXml> sequenceChildren = ((BXmlSequence) refValue).getChildrenList();\n          \n          \n            \n                                for (int j = 0; j < sequenceChildren.size(); j++) {\n          \n          \n            \n                                    backingArray.add(sequenceChildren.get(j));\n          \n          \n            \n                                }\n          \n          \n            \n                                backingArray.addAll(((BXmlSequence) refValue).getChildrenList());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521558674", "createdAt": "2020-11-11T18:32:19Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java", "diffHunk": "@@ -51,6 +53,14 @@ public static BXml concat(Object... arrayValue) {\n                 backingArray.add(xmlText);\n                 lastItem = xmlText;\n             } else {\n+                if (refValue instanceof BXmlSequence) {\n+                    List<BXml> sequenceChildren = ((BXmlSequence) refValue).getChildrenList();\n+                    for (int j = 0; j < sequenceChildren.size(); j++) {\n+                        backingArray.add(sequenceChildren.get(j));\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTY2MzMzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/XmlText.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoyMToxMFrOH3Y_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo0MDowNVrOIJ_eTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0MzE4Ng==", "bodyText": "Can't we just do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return that;\n          \n          \n            \n                                return this;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527843186", "createdAt": "2020-11-20T17:21:10Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/XmlText.java", "diffHunk": "@@ -113,7 +114,7 @@ public boolean hasNext() {\n             public Object next() {\n                 if (!read) {\n                     this.read = true;\n-                    return data;\n+                    return that;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNTAyMQ==", "bodyText": "Not really sure why but when using this the program crashes with a bad sad error for examples like:\nxml bitOfText = xml `bit of text\\u2702\\u2705`;\n\nfunction xmlCharItemIter() returns string {\n    string result = \"\";\n    int i = 0;\n    foreach xml elem in bitOfText {\n        string str = io:sprintf(\"%s\\n\", elem);\n        result += str;\n        i += 1;\n    }\n    return result;\n}\n\n\nclass io.ballerina.runtime.internal.values.XmlText$1 cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.XmlText$1 and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app')", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r545805021", "createdAt": "2020-12-18T12:38:25Z", "author": {"login": "suleka96"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/XmlText.java", "diffHunk": "@@ -113,7 +114,7 @@ public boolean hasNext() {\n             public Object next() {\n                 if (!read) {\n                     this.read = true;\n-                    return data;\n+                    return that;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0MzE4Ng=="}, "originalCommit": {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0ODA0Nw==", "bodyText": "Ah, missed that we were returning here from a method of the in-line initialization of new IteratorValue().", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547348047", "createdAt": "2020-12-22T15:40:05Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/XmlText.java", "diffHunk": "@@ -113,7 +114,7 @@ public boolean hasNext() {\n             public Object next() {\n                 if (!read) {\n                     this.read = true;\n-                    return data;\n+                    return that;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0MzE4Ng=="}, "originalCommit": {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTY5NjgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoyNjo0N1rOH3ZSbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozMzowMFrOH3ZmmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODA0Nw==", "bodyText": "I think there's a deviation here too.\nThe spec says for xml<T> the iteration value type is T.\nSo the following should work, right?\npublic function main() {\n    xml<'xml:Element> el = xml `<foo>foo</foo><bar/>`;\n\n    foreach 'xml:Element item in el {\n        \n    }\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527848047", "createdAt": "2020-11-20T17:26:47Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1433,7 +1433,7 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n                 varType = inferRecordFieldType(recordType);\n                 break;\n             case TypeTags.XML:\n-                varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n+                varType = symTable.xmlType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1MTU2Mw==", "bodyText": "Similarly, the lang.xml:iterator() also needs to change.\nThe following doesn't work either.\npublic function main() {\n    xml<'xml:Element> el = xml `<foo>foo</foo><bar/>`;\n\n    record {| 'xml:Element value; |}? nextResult = el.iterator().next();\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527851563", "createdAt": "2020-11-20T17:31:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1433,7 +1433,7 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n                 varType = inferRecordFieldType(recordType);\n                 break;\n             case TypeTags.XML:\n-                varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n+                varType = symTable.xmlType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODA0Nw=="}, "originalCommit": {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1MzIwOQ==", "bodyText": "Maybe we can merge this PR first and then fix the xml<T> scenario.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527853209", "createdAt": "2020-11-20T17:33:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1433,7 +1433,7 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n                 varType = inferRecordFieldType(recordType);\n                 break;\n             case TypeTags.XML:\n-                varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n+                varType = symTable.xmlType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODA0Nw=="}, "originalCommit": {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTc0MTgwOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozNDo0MFrOH3ZsFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozNDo0MFrOH3ZsFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1NDYxMw==", "bodyText": "Shall we also assert here that the original catalog does not change?\nBefore calling concat we can create a clone, and then check == for that clone and catalog after calling clone.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527854613", "createdAt": "2020-11-20T17:34:40Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -62,6 +62,25 @@ function testConcat() returns xml {\n     return 'xml:concat(x, <xml> testFromString(), \"hello from String\");\n }\n \n+function testConcatWithXMLSequence() {\n+    string a = \"string one\";\n+    string b = \"string two\";\n+\n+    xml c = 'xml:concat(catalog, a, b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTc1Njk5OnYy", "diffSide": "RIGHT", "path": "tests/ballerina-spec-conformance-tests/src/S05_values_types_variables/tests/iterable_types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozNzoxM1rOH3Z0Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozNzoxM1rOH3Z0Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1Njc0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        result += x[\"title\"].getTextValue();\n          \n          \n            \n                    result += x[\"title\"].getTextValue();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527856743", "createdAt": "2020-11-20T17:37:13Z", "author": {"login": "MaryamZi"}, "path": "tests/ballerina-spec-conformance-tests/src/S05_values_types_variables/tests/iterable_types.bal", "diffHunk": "@@ -110,9 +110,7 @@ function testIterableTypeXML() {\n                         </bookstore>`;\n     string result = \"\";\n     foreach var x in bookstore[\"book\"] {\n-        if x is xml {\n             result += x[\"title\"].getTextValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTc1OTU0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozNzo0MFrOH3Z1zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozNzo0MFrOH3Z1zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1NzEwMQ==", "bodyText": "Missing a new line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527857101", "createdAt": "2020-11-20T17:37:40Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +71,13 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence() {\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    string[] strs = [];\n+    foreach xml e in x1 {\n+        if e is string {\n+            strs.push(e);\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM3OTA4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMToxOVrOIJ-0MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMToxOVrOIJ-0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNzI2NQ==", "bodyText": "Extra new lines.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547337265", "createdAt": "2020-12-22T15:21:19Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -170,9 +170,15 @@\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n-    public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n-            .createIteratorNextReturnType(\n-                    new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n+\n+    public static final RecordType XML_ITR_NEXT_RETURN_ELEMENT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_ELEMENT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_TEXT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_TEXT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_XML_TYPE = IteratorUtils.createIteratorNextReturnType\n+            (new BUnionType(Arrays.asList(TYPE_ELEMENT, TYPE_COMMENT, TYPE_PROCESSING_INSTRUCTION, TYPE_TEXT)));\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTQ2OTc4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration_negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo0NTowMVrOIJ_pBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo0NTowMVrOIJ_pBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MDc4OA==", "bodyText": "Shall we rewrite the tests without this import? We try to avoid standard library imports in language tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547350788", "createdAt": "2020-12-22T15:45:01Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration_negative.bal", "diffHunk": "@@ -1,3 +1,5 @@\n+import ballerina/io;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTQ4NzM2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo0OTo0MFrOIJ_zLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo0OTo0MFrOIJ_zLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MzM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    count +=1;\n          \n          \n            \n                    i +=1;\n          \n          \n            \n                    count += 1;\n          \n          \n            \n                    i += 1;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547353388", "createdAt": "2020-12-22T15:49:40Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -40,11 +40,9 @@ function foreachTest() returns [int, string][] {\n \n     int i = 0;\n     foreach var x in bookstore/<book> {\n-        if x is xml {\n-            titles[count] = [i, (x/<title>/*).toString()];\n-            count +=1;\n-            i +=1;\n-        }\n+        titles[count] = [i, (x/<title>/*).toString()];\n+        count +=1;\n+        i +=1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTc5MzMwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoxODo1NFrOIKCqzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoxODo1NFrOIKCqzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMDM5Ng==", "bodyText": "These tests are bound to break once we fix #26340, right?\nInstead shall we rewrite these tests similar to\npublic function main() {\n    xml el = xml `<foo>foo</foo>`;\n    xml<'xml:Element> seq = <xml<'xml:Element>> el.concat(xml `<bar/>`);\n\n\n    foreach 'xml:Element x in seq {\n        \n    }\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547400396", "createdAt": "2020-12-22T17:18:54Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -142,10 +140,103 @@ function xmlSequenceIter() returns string {\n \n function xmlCharItemIter() returns string {\n     string result = \"\";\n-\n-    foreach xml|string elem in bitOfText {\n+    int i = 0;\n+    foreach xml elem in bitOfText {\n         string str = io:sprintf(\"%s\\n\", elem);\n         result += str;\n+        i += 1;\n     }\n     return result;\n }\n+\n+function xmlTypeParamElementIter() {\n+    xml<'xml:Element> el1 = xml `<foo>foo</foo><bar/>`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTc5NTY5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoxOTo0MVrOIKCsRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoxOTo0MVrOIKCsRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMDc3NQ==", "bodyText": "I think we can call these tests testXmlElementSequenceIteration, testXmlElementSequenceIteration, etc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547400775", "createdAt": "2020-12-22T17:19:41Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -142,10 +140,103 @@ function xmlSequenceIter() returns string {\n \n function xmlCharItemIter() returns string {\n     string result = \"\";\n-\n-    foreach xml|string elem in bitOfText {\n+    int i = 0;\n+    foreach xml elem in bitOfText {\n         string str = io:sprintf(\"%s\\n\", elem);\n         result += str;\n+        i += 1;\n     }\n     return result;\n }\n+\n+function xmlTypeParamElementIter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTgxMTcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoyNTowM1rOIKC2Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoyNTowM1rOIKC2Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMzI4Mg==", "bodyText": "We can check (!TypeTags.isXMLTypeTag(actualType.tag)) and return early here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547403282", "createdAt": "2020-12-22T17:25:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -294,6 +295,29 @@ private void findTypeParam(Location loc, BType expType, BType actualType, Symbol\n         }\n         // Bound type is a structure. Visit recursively to find bound type.\n         switch (expType.tag) {\n+            case TypeTags.XML:\n+                if (TypeTags.isXMLTypeTag(actualType.tag)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTgxMzc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoyNTo0M1rOIKC3PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoyNTo0M1rOIKC3PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMzU4MQ==", "bodyText": "Do we need to break in these cases? We can directly return, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547403581", "createdAt": "2020-12-22T17:25:43Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -294,6 +295,29 @@ private void findTypeParam(Location loc, BType expType, BType actualType, Symbol\n         }\n         // Bound type is a structure. Visit recursively to find bound type.\n         switch (expType.tag) {\n+            case TypeTags.XML:\n+                if (TypeTags.isXMLTypeTag(actualType.tag)) {\n+                    switch (actualType.tag) {\n+                        case TypeTags.XML:\n+                            BType constraint = ((BXMLType) actualType).constraint;\n+                            while (constraint.tag == TypeTags.XML) {\n+                                actualType = constraint;\n+                                constraint = ((BXMLType) actualType).constraint;\n+                            }\n+                            findTypeParam(loc, ((BXMLType) expType).constraint, constraint, env,\n+                                    resolvedTypes, result);\n+                            break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTgxNTQ1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoyNjoxM1rOIKC4PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzoyNjoxM1rOIKC4PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMzgzNg==", "bodyText": "Can't we directly do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            actualType = constraint;\n          \n          \n            \n                                            constraint = ((BXMLType) actualType).constraint;\n          \n          \n            \n                                            constraint = ((BXMLType) constraint).constraint;\n          \n      \n    \n    \n  \n\ninstead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547403836", "createdAt": "2020-12-22T17:26:13Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -294,6 +295,29 @@ private void findTypeParam(Location loc, BType expType, BType actualType, Symbol\n         }\n         // Bound type is a structure. Visit recursively to find bound type.\n         switch (expType.tag) {\n+            case TypeTags.XML:\n+                if (TypeTags.isXMLTypeTag(actualType.tag)) {\n+                    switch (actualType.tag) {\n+                        case TypeTags.XML:\n+                            BType constraint = ((BXMLType) actualType).constraint;\n+                            while (constraint.tag == TypeTags.XML) {\n+                                actualType = constraint;\n+                                constraint = ((BXMLType) actualType).constraint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTgzNjQ0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.xml/src/main/ballerina/xml.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzozMjo0MVrOIKDEwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzozMjo0MVrOIKDEwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNzA0Mg==", "bodyText": "Shall we add some tests in LangLibXMLTest for the direct invocation of lang.xml:iterator() too?\n    xml x = xml `<!--first-->`;\n    xml<'xml:Comment> seq = <xml<'xml:Comment>> x.concat(xml `<!--second-->`);\n\n    object {\n        public isolated function next() returns record {| 'xml:Comment value; |}?;\n    } iter = seq.iterator();\n\n    // tests based on `iter.next()`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547407042", "createdAt": "2020-12-22T17:32:41Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.xml/src/main/ballerina/xml.bal", "diffHunk": "@@ -77,7 +77,7 @@ type XmlType xml;\n # + return - iterator object\n # Each item is represented by an xml singleton.\n public isolated function iterator(xml<ItemType> x) returns object {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTg5ODQyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo1MjoyMFrOIKDp6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDozMjowOVrOIPewMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg==", "bodyText": "How come we don't need to do this for processing instruction and comment sequences?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547416552", "createdAt": "2020-12-22T17:52:20Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -170,9 +170,15 @@\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n-    public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n-            .createIteratorNextReturnType(\n-                    new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n+\n+    public static final RecordType XML_ITR_NEXT_RETURN_ELEMENT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_ELEMENT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_TEXT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_TEXT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MTY4OA==", "bodyText": "They are not iterable so I didn't not create iteration return types or write type param logic for them.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547541688", "createdAt": "2020-12-22T22:40:49Z", "author": {"login": "suleka96"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -170,9 +170,15 @@\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n-    public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n-            .createIteratorNextReturnType(\n-                    new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n+\n+    public static final RecordType XML_ITR_NEXT_RETURN_ELEMENT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_ELEMENT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_TEXT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_TEXT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNjE2MQ==", "bodyText": "They are not iterable so I didn't not create iteration return types or write type param logic for them.\n\nxml:Element also isn't iterable, right? But there's a XML_ITR_NEXT_RETURN_ELEMENT_TYPE?\nThese are the record value types for iterator next right?\nWe can iterate xml, xml<T>, and xml:Text.\nSo I assume we will need record values with all of the following field types\n\nxml:Element|xml:Text|xml:ProcessingInstruction|xml:Comment\nxml:Element\nxml:Text\nxml:ProcessingInstruction\nxml:Comment\nand other combinations of unions of these (e.g., xml:Comment|xml:Element for xml<xml:Comment|xml:Element>).\n\nThus my question re: why we don't need the others. How do we handle the union case btw?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547626161", "createdAt": "2020-12-23T03:57:38Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -170,9 +170,15 @@\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n-    public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n-            .createIteratorNextReturnType(\n-                    new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n+\n+    public static final RecordType XML_ITR_NEXT_RETURN_ELEMENT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_ELEMENT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_TEXT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_TEXT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4MjE2OA==", "bodyText": "xmlxml:Text and xmlxml:ProcessingInstruction are not iterable in the sense it returns null from next\nfor examples like:\nxml d = xml `<!--first-->`;\n        xml<'xml:Element|'xml:Comment> seq4 = <xml<'xml:Element|'xml:Comment>> d.concat(xml `<foo>fu</foo>`);\n\n         int i =0;\n         foreach 'xml:Element|'xml:Comment item in seq4 {\n             concatIntString(i, item.toString());\n             i += 1;\n         }\n\n         record {| 'xml:Element|'xml:Comment value; |}? nextEle = seq4.iterator().next();\n\n         panic error(\"out for loop: \"+ output + \"\\n out record: \"+ nextEle.toString());\n\nthe current implementation returns:\nerror: out for loop: 0:<!--first--> 1:<foo>fu</foo> \n out record: {\"value\":`<!--first-->`}\n\nThis is the expected output right?\nThe BXml type for this is :\n\nxmllang.xml:Element|lang.xml:Comment|lang.xml:ProcessingInstruction|lang.xml:Text\n\nI'm switching from the  BXml type.\nXML_ITR_NEXT_RETURN_ELEMENT_TYPE is to handle examples like:\nxml xdata = xml `<p:person xmlns:p=\"foo\" xmlns:q=\"bar\">\n                <p:name>bob</p:name>\n                <p:address>\n                    <p:city>NY</p:city>\n                    <q:country>US</q:country>\n                </p:address>\n                <q:ID>1131313</q:ID>\n            </p:person>`;\n\nwho's BXml type is lang.xml:Element", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547882168", "createdAt": "2020-12-23T10:14:16Z", "author": {"login": "suleka96"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -170,9 +170,15 @@\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n-    public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n-            .createIteratorNextReturnType(\n-                    new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n+\n+    public static final RecordType XML_ITR_NEXT_RETURN_ELEMENT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_ELEMENT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_TEXT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_TEXT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMjE1MA==", "bodyText": "xmlxml:Text and xmlxml:ProcessingInstruction are not iterable in the sense it returns null from next\n\nIINM\n\nxml<'xml:Text> is the same as 'xml:Text and iteration will always return one value which is the 'xml:Text itself\nIterating xml<'xml:ProcessingInstruction> will return 0 or more 'xml:ProcessingInstructions\n\nI'm not sure I get what you mean by next returning null.\n\nfor examples like:\nxml d = xml `<!--first-->`;\n        xml<'xml:Element|'xml:Comment> seq4 = <xml<'xml:Element|'xml:Comment>> d.concat(xml `<foo>fu</foo>`);\n\n         int i =0;\n         foreach 'xml:Element|'xml:Comment item in seq4 {\n             concatIntString(i, item.toString());\n             i += 1;\n         }\n\n         record {| 'xml:Element|'xml:Comment value; |}? nextEle = seq4.iterator().next();\n\n         panic error(\"out for loop: \"+ output + \"\\n out record: \"+ nextEle.toString());\n\nthe current implementation returns:\nerror: out for loop: 0:<!--first--> 1:<foo>fu</foo> \n out record: {\"value\":`<!--first-->`}\n\nThis is the expected output right?\nThe BXml type for this is :\n\nxmllang.xml:Element|lang.xml:Comment|lang.xml:ProcessingInstruction|lang.xml:Text\n\n\nThe output is correct, but shouldn't the iteration value type here be 'xml:Element|'xml:Comment since we're iterating over xml<'xml:Element|'xml:Comment>?\n\nI'm switching from the BXml type.\nXML_ITR_NEXT_RETURN_ELEMENT_TYPE is to handle examples like:\nxml xdata = xml `<p:person xmlns:p=\"foo\" xmlns:q=\"bar\">\n                <p:name>bob</p:name>\n                <p:address>\n                    <p:city>NY</p:city>\n                    <q:country>US</q:country>\n                </p:address>\n                <q:ID>1131313</q:ID>\n            </p:person>`;\n\nwho's BXml type is lang.xml:Element\n\n[Edited] Doesn't a similar case apply for comments and processing instructions too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r548022150", "createdAt": "2020-12-23T15:47:50Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -170,9 +170,15 @@\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n-    public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n-            .createIteratorNextReturnType(\n-                    new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n+\n+    public static final RecordType XML_ITR_NEXT_RETURN_ELEMENT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_ELEMENT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_TEXT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_TEXT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMzQxMQ==", "bodyText": "As we discussed xml<xml:Comment> and xml<xml:ProcessingInstruction> is now iterable. Also regarding unions, we are unable to write a xml union sequence with lang capabilities at the moment. However, after discussing with @rdhananjaya,  instead of switching from 'BXml' types it is now switched from the 'xml value type' so a union case won't exist now.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r553103411", "createdAt": "2021-01-07T04:32:09Z", "author": {"login": "suleka96"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -170,9 +170,15 @@\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n-    public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n-            .createIteratorNextReturnType(\n-                    new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n+\n+    public static final RecordType XML_ITR_NEXT_RETURN_ELEMENT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_ELEMENT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_TEXT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_TEXT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}, "originalCommit": {"oid": "3694538b81c4711e0a996154dc82440423996f8f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5OTc4NTE5OnYy", "diffSide": "RIGHT", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Next.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNjozMjowMlrOISJ8yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTozOTo0OVrOISrgyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwODI5OA==", "bodyText": "With this approach, the type of the value field returned on iterator next becomes the current value type, right? I don't think that is correct. The next value ideally shouldn't change between next invocations of the same iterator.\npublic function main() {\n    'xml:Text x1 = xml `foo`;\n    xml<'xml:Element|'xml:Text> x2 = <xml<'xml:Element|'xml:Text>> x1.concat(xml `<bar/>`);\n\n    var iterator = x2.iterator();\n    record {| 'xml:Element|'xml:Text value; |}? next = iterator.next();\n\n    boolean b1 = <any> next is record {| 'xml:Element|'xml:Text value; |}; // true\n    boolean b2 = next is record {| 'xml:Element value; |}; // false\n    boolean b3 = next is record {| 'xml:Text value; |}; // true - should be false!\n\n    record {| 'xml:Element|'xml:Text value; |}? nextNext = iterator.next();\n\n    boolean b4 = <any> nextNext is record {| 'xml:Element|'xml:Text value; |}; // true\n    boolean b5 = nextNext is record {| 'xml:Element value; |}; // true - should be false!\n    boolean b6 = nextNext is record {| 'xml:Text value; |}; // false\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r555908298", "createdAt": "2021-01-12T16:32:02Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Next.java", "diffHunk": "@@ -49,10 +50,21 @@ public static Object next(BObject m) {\n \n         if (xmlIterator.hasNext()) {\n             Object xmlValue = xmlIterator.next();\n-            return ValueCreator.createRecordValue(ValueCreator.createMapValue(PredefinedTypes.XML_ITR_NEXT_RETURN_TYPE),\n-                                                  xmlValue);\n+            switch (((BXml) xmlValue).getType().getTag()) {\n+                case TypeTags.XML_ELEMENT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                                    (PredefinedTypes.XML_ITR_NEXT_RETURN_ELEMENT_TYPE), xmlValue);\n+                case TypeTags.XML_TEXT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_TEXT_TYPE), xmlValue);\n+                case TypeTags.XML_COMMENT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_COMMENT_TYPE), xmlValue);\n+                case TypeTags.XML_PI_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_PI_TYPE), xmlValue);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47d8d294df9bbfd9a4fc102063b26b63266aa02"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwODY1OQ==", "bodyText": "We probably need something like io.ballerina.runtime.api.values.BMap#getIteratorNextReturnType for XML. Can you create an issue for this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r555908659", "createdAt": "2021-01-12T16:32:28Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Next.java", "diffHunk": "@@ -49,10 +50,21 @@ public static Object next(BObject m) {\n \n         if (xmlIterator.hasNext()) {\n             Object xmlValue = xmlIterator.next();\n-            return ValueCreator.createRecordValue(ValueCreator.createMapValue(PredefinedTypes.XML_ITR_NEXT_RETURN_TYPE),\n-                                                  xmlValue);\n+            switch (((BXml) xmlValue).getType().getTag()) {\n+                case TypeTags.XML_ELEMENT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                                    (PredefinedTypes.XML_ITR_NEXT_RETURN_ELEMENT_TYPE), xmlValue);\n+                case TypeTags.XML_TEXT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_TEXT_TYPE), xmlValue);\n+                case TypeTags.XML_COMMENT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_COMMENT_TYPE), xmlValue);\n+                case TypeTags.XML_PI_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_PI_TYPE), xmlValue);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwODI5OA=="}, "originalCommit": {"oid": "e47d8d294df9bbfd9a4fc102063b26b63266aa02"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1ODE4Ng==", "bodyText": "#27849", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556458186", "createdAt": "2021-01-13T11:39:49Z", "author": {"login": "suleka96"}, "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Next.java", "diffHunk": "@@ -49,10 +50,21 @@ public static Object next(BObject m) {\n \n         if (xmlIterator.hasNext()) {\n             Object xmlValue = xmlIterator.next();\n-            return ValueCreator.createRecordValue(ValueCreator.createMapValue(PredefinedTypes.XML_ITR_NEXT_RETURN_TYPE),\n-                                                  xmlValue);\n+            switch (((BXml) xmlValue).getType().getTag()) {\n+                case TypeTags.XML_ELEMENT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                                    (PredefinedTypes.XML_ITR_NEXT_RETURN_ELEMENT_TYPE), xmlValue);\n+                case TypeTags.XML_TEXT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_TEXT_TYPE), xmlValue);\n+                case TypeTags.XML_COMMENT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_COMMENT_TYPE), xmlValue);\n+                case TypeTags.XML_PI_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_PI_TYPE), xmlValue);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwODI5OA=="}, "originalCommit": {"oid": "e47d8d294df9bbfd9a4fc102063b26b63266aa02"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5OTk4NTU3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/XmlComment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoxNTo1N1rOISL34g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNzoyMjowMFrOISiYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkzOTgxMA==", "bodyText": "Using XmlComment.this may work instead of introducing the new variable that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r555939810", "createdAt": "2021-01-12T17:15:57Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/XmlComment.java", "diffHunk": "@@ -45,6 +46,28 @@ public XmlComment(String data, boolean readonly) {\n         this.type = readonly ? PredefinedTypes.TYPE_READONLY_COMMENT : PredefinedTypes.TYPE_COMMENT;\n     }\n \n+    @Override\n+    public IteratorValue getIterator() {\n+        XmlComment that = this;\n+        return new IteratorValue() {\n+            boolean read = false;\n+            @Override\n+            public boolean hasNext() {\n+                return !read;\n+            }\n+\n+            @Override\n+            public Object next() {\n+                if (!read) {\n+                    this.read = true;\n+                    return that;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47d8d294df9bbfd9a4fc102063b26b63266aa02"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMwODU3Mg==", "bodyText": "Seems like we'll have to use \"that\" here as well. It gives the same error as when testing with XmlText.\norg.ballerinalang.core.util.exceptions.BLangRuntimeException: error: java.lang.ClassCastException {\"message\":\"class io.ballerina.runtime.internal.values.XmlComment$1 cannot be cast to class io.ballerina.runtime.api.values.BXml (io.ballerina.runtime.internal.values.XmlComment$1 and io.ballerina.runtime.api.values.BXml are in unnamed module of loader 'app')\"}\n        at ballerina.lang.xml.0_8_0:externNext(internal.bal:35)\n           ballerina.lang.xml.0_8_0.XMLIterator:next(internal.bal:31)\n           xml_iteration:testXmlCommentSequenceIteration(xml_iteration.bal:195)\n        at org.ballerinalang.test.BRunUtil.invoke(BRunUtil.java:440)\n        at org.ballerinalang.test.BRunUtil.invokeFunction(BRunUtil.java:1198)\n        at org.ballerinalang.test.BRunUtil.invoke(BRunUtil.java:188)\n        at org.ballerinalang.test.BRunUtil.invoke(BRunUtil.java:1241)\n        at org.ballerinalang.test.types.xml.XMLIterationTest.testXMLTypesForeachOp(XMLIterationTest.java:148)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556308572", "createdAt": "2021-01-13T07:22:00Z", "author": {"login": "suleka96"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/XmlComment.java", "diffHunk": "@@ -45,6 +46,28 @@ public XmlComment(String data, boolean readonly) {\n         this.type = readonly ? PredefinedTypes.TYPE_READONLY_COMMENT : PredefinedTypes.TYPE_COMMENT;\n     }\n \n+    @Override\n+    public IteratorValue getIterator() {\n+        XmlComment that = this;\n+        return new IteratorValue() {\n+            boolean read = false;\n+            @Override\n+            public boolean hasNext() {\n+                return !read;\n+            }\n+\n+            @Override\n+            public Object next() {\n+                if (!read) {\n+                    this.read = true;\n+                    return that;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkzOTgxMA=="}, "originalCommit": {"oid": "e47d8d294df9bbfd9a4fc102063b26b63266aa02"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDAzMTQ1OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyNjo0MlrOISMUNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMToyOTowMVrOISrKYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NzA2MQ==", "bodyText": "Shouldn't the following result in a compilation error?\npublic function main() {\n    'xml:Comment x = xml `<!-- foo -->`;\n    var iterator = x.iterator();\n}\nPlease check for the other non-text types too.\nThis seems to fail on slp8 too, let's create an issue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r555947061", "createdAt": "2021-01-12T17:26:42Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -382,6 +397,53 @@ function testElementChildrenNS() {\n     assert(toNoNs.toString(), \"<to>Irshad</to><to>Irshad</to>\");\n }\n \n+function testXMLIteratorInvocation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47d8d294df9bbfd9a4fc102063b26b63266aa02"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1MjQ1MQ==", "bodyText": "#27848", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556452451", "createdAt": "2021-01-13T11:29:01Z", "author": {"login": "suleka96"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -382,6 +397,53 @@ function testElementChildrenNS() {\n     assert(toNoNs.toString(), \"<to>Irshad</to><to>Irshad</to>\");\n }\n \n+function testXMLIteratorInvocation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NzA2MQ=="}, "originalCommit": {"oid": "e47d8d294df9bbfd9a4fc102063b26b63266aa02"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMzM2NDI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTozNTozMFrOISrXnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMzoxNzowOVrOISuyIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1NTgzNw==", "bodyText": "Do we need to add the type also when type.tag == TypeTags.XML is true?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556455837", "createdAt": "2021-01-13T11:35:30Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -492,6 +517,12 @@ private void findTypeParamInUnion(Location loc, BType expType, BUnionType actual\n             if (type.tag == TypeTags.MAP) {\n                 members.add(((BMapType) type).constraint);\n             }\n+            if (TypeTags.isXMLTypeTag(type.tag)) {\n+                if (type.tag == TypeTags.XML) {\n+                    members.add(((BXMLType) type).constraint);\n+                }\n+                members.add(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a118602c10fce6b632a92f1562a1f42db2eaee"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjUxMTc3Ng==", "bodyText": "Tracked in issue: #27851", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556511776", "createdAt": "2021-01-13T13:17:09Z", "author": {"login": "suleka96"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -492,6 +517,12 @@ private void findTypeParamInUnion(Location loc, BType expType, BUnionType actual\n             if (type.tag == TypeTags.MAP) {\n                 members.add(((BMapType) type).constraint);\n             }\n+            if (TypeTags.isXMLTypeTag(type.tag)) {\n+                if (type.tag == TypeTags.XML) {\n+                    members.add(((BXMLType) type).constraint);\n+                }\n+                members.add(type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1NTgzNw=="}, "originalCommit": {"oid": "d9a118602c10fce6b632a92f1562a1f42db2eaee"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMzM3ODI4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTozOToyM1rOISrgAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTozOToyM1rOISrgAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1Nzk4NA==", "bodyText": "Is this variable name accurate?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556457984", "createdAt": "2021-01-13T11:39:23Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1494,7 +1494,55 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n                 varType = inferRecordFieldType(recordType);\n                 break;\n             case TypeTags.XML:\n-                varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n+                BType constraint = ((BXMLType) collectionType).constraint;\n+                while (constraint.tag == TypeTags.XML) {\n+                    collectionType = constraint;\n+                    constraint = ((BXMLType) collectionType).constraint;\n+                }\n+                switch (constraint.tag) {\n+                    case TypeTags.XML_ELEMENT:\n+                        varType = symTable.xmlElementType;\n+                        break;\n+                    case TypeTags.XML_COMMENT:\n+                        varType = symTable.xmlCommentType;\n+                        break;\n+                    case TypeTags.XML_TEXT:\n+                        varType = symTable.xmlTextType;\n+                        break;\n+                    case TypeTags.XML_PI:\n+                        varType = symTable.xmlPIType;\n+                        break;\n+                    default:\n+                        Set<BType> collectionTypes = getEffectiveMemberTypes((BUnionType) constraint);\n+                        Set<BType> builtinXMLConstraintTypes = getEffectiveMemberTypes\n+                                ((BUnionType) ((BXMLType) symTable.xmlType).constraint);\n+                        if (collectionTypes.size() == 4 && builtinXMLConstraintTypes.equals(collectionTypes)) {\n+                            varType = symTable.xmlType;\n+                        } else {\n+                            LinkedHashSet<BType> collectionTypesInSymTable = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a118602c10fce6b632a92f1562a1f42db2eaee"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMzM4MzgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo0MTowN1rOISrjZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo0MTowN1rOISrjZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1ODg1NA==", "bodyText": "Why can't we directly use constraint as the var type here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556458854", "createdAt": "2021-01-13T11:41:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1494,7 +1494,55 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n                 varType = inferRecordFieldType(recordType);\n                 break;\n             case TypeTags.XML:\n-                varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n+                BType constraint = ((BXMLType) collectionType).constraint;\n+                while (constraint.tag == TypeTags.XML) {\n+                    collectionType = constraint;\n+                    constraint = ((BXMLType) collectionType).constraint;\n+                }\n+                switch (constraint.tag) {\n+                    case TypeTags.XML_ELEMENT:\n+                        varType = symTable.xmlElementType;\n+                        break;\n+                    case TypeTags.XML_COMMENT:\n+                        varType = symTable.xmlCommentType;\n+                        break;\n+                    case TypeTags.XML_TEXT:\n+                        varType = symTable.xmlTextType;\n+                        break;\n+                    case TypeTags.XML_PI:\n+                        varType = symTable.xmlPIType;\n+                        break;\n+                    default:\n+                        Set<BType> collectionTypes = getEffectiveMemberTypes((BUnionType) constraint);\n+                        Set<BType> builtinXMLConstraintTypes = getEffectiveMemberTypes\n+                                ((BUnionType) ((BXMLType) symTable.xmlType).constraint);\n+                        if (collectionTypes.size() == 4 && builtinXMLConstraintTypes.equals(collectionTypes)) {\n+                            varType = symTable.xmlType;\n+                        } else {\n+                            LinkedHashSet<BType> collectionTypesInSymTable = new LinkedHashSet<>();\n+                            for (BType subType : collectionTypes) {\n+                                switch (subType.tag) {\n+                                    case TypeTags.XML_ELEMENT:\n+                                        collectionTypesInSymTable.add(symTable.xmlElementType);\n+                                        break;\n+                                    case TypeTags.XML_COMMENT:\n+                                        collectionTypesInSymTable.add(symTable.xmlCommentType);\n+                                        break;\n+                                    case TypeTags.XML_TEXT:\n+                                        collectionTypesInSymTable.add(symTable.xmlTextType);\n+                                        break;\n+                                    case TypeTags.XML_PI:\n+                                        collectionTypesInSymTable.add(symTable.xmlPIType);\n+                                        break;\n+                                }\n+\n+                            }\n+                            varType = BUnionType.create(null, collectionTypesInSymTable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a118602c10fce6b632a92f1562a1f42db2eaee"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMzQxMzI5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo0OTozN1rOISr1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo0OTozN1rOISr1VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ2MzQ0NQ==", "bodyText": "We should ideally test iterating the entire sequence. Including () being returned after everything has been iterated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556463445", "createdAt": "2021-01-13T11:49:37Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -382,6 +397,53 @@ function testElementChildrenNS() {\n     assert(toNoNs.toString(), \"<to>Irshad</to><to>Irshad</to>\");\n }\n \n+function testXMLIteratorInvocation() {\n+    xml a = xml `<!--first-->`;\n+    xml<'xml:Comment> seq1 = <xml<'xml:Comment>> a.concat(xml `<!--second-->`);\n+\n+    object {\n+        public isolated function next() returns record {| 'xml:Comment value; |}?;\n+    } iter1 = seq1.iterator();\n+\n+    assert((iter1.next()).toString(), \"{\\\"value\\\":`<!--first-->`}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a118602c10fce6b632a92f1562a1f42db2eaee"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMzQyMzc4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/xml/XMLIterationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo1MzowMFrOISr78Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo1MzowMFrOISr78Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ2NTEzNw==", "bodyText": "Ideally, this error shouldn't be logged. The actual error is the next one, 'xml:Element' is not an iterable collection.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556465137", "createdAt": "2021-01-13T11:53:00Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/xml/XMLIterationTest.java", "diffHunk": "@@ -54,14 +54,64 @@ public void setup() {\n \n     @Test\n     public void testNegative() {\n-        Assert.assertEquals(negative.getErrorCount(), 2);\n+        Assert.assertEquals(negative.getErrorCount(), 17);\n         int index = 0;\n         BAssertUtil.validateError(negative, index++,\n-                                  \"invalid tuple binding pattern: expected a tuple type, but found '(xml|string)'\",\n-                                  11, 17);\n+                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'xml'\",\n+                                  13, 17);\n         BAssertUtil.validateError(negative, index++, \"incompatible types: expected \" +\n                 \"'function ((xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text)) returns ()',\" +\n-                \" found 'function ([int,xml,string]) returns ()'\", 16, 19);\n+                \" found 'function ([int,xml,string]) returns ()'\", 18, 19);\n+        BAssertUtil.validateError(negative, index++,\n+                \"incompatible types: expected 'other', found 'xml:Element'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a118602c10fce6b632a92f1562a1f42db2eaee"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMzQzMjcwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo1NTozMFrOISsBPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo1NTozMFrOISsBPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ2NjQ5NQ==", "bodyText": "Why do we need a module level variable? Why can't we use local variables and pass them as arguments to concatString?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556466495", "createdAt": "2021-01-13T11:55:30Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -103,6 +100,7 @@ function chainedIterableOps() returns xml {\n xml theXml = xml `<book>the book</book>`;\n xml bitOfText = xml `bit of text\\u2702\\u2705`;\n xml compositeXml = theXml + bitOfText;\n+string output = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a118602c10fce6b632a92f1562a1f42db2eaee"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMzQzNTQwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration_negative.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo1NjoxN1rOISsC2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo1NjoxN1rOISsC2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ2NjkwNw==", "bodyText": "Same comment as above re: using local variables instead.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556466907", "createdAt": "2021-01-13T11:56:17Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration_negative.bal", "diffHunk": "@@ -7,6 +7,8 @@ xml xdata = xml `<p:person xmlns:p=\"foo\" xmlns:q=\"bar\">\n                     <q:ID>1131313</q:ID>\n                   </p:person>`;\n \n+string result = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a118602c10fce6b632a92f1562a1f42db2eaee"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3127, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}