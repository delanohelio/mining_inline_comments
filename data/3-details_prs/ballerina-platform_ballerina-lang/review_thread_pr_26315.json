{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDg2NzAy", "number": 26315, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMTo0MTo0OVrOEsmJ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzozMTo0MlrOEsojMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTk3OTA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMTo0MTo0OVrOHf7KOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoyMzo0MlrOHf8dkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIzNzE3OQ==", "bodyText": "Can we return an Optional<BSymbol> omitting the null check. Later in L113; we can use  a ternary for the return of SymbolFactory.getBCompiledSymbol(...) or Optional.empty(). As a further improvement we can return optional Symbol from the SymbolFactory.getBCompiledSymbol(...) as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26315#discussion_r503237179", "createdAt": "2020-10-12T11:41:49Z", "author": {"login": "rasika"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -107,23 +103,14 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n     @Override\n     public Optional<Symbol> symbol(String srcFile, LinePosition position) {\n         BLangCompilationUnit compilationUnit = getCompilationUnit(srcFile);\n-        NodeResolver nodeResolver = new NodeResolver();\n-        BLangNode node = nodeResolver.lookup(compilationUnit, position);\n-\n-        if (node instanceof IdentifiableNode) {\n-            BSymbol symbol = (BSymbol) ((IdentifiableNode) node).getSymbol();\n-            return Optional.ofNullable(SymbolFactory.getBCompiledSymbol(symbol, symbol.name.value));\n-        } else if (node != null && (node.getKind() == USER_DEFINED_TYPE\n-                || node.getKind() == NodeKind.UNION_TYPE_NODE\n-                || node.getKind() == NodeKind.INTERSECTION_TYPE_NODE\n-                || node.getKind() == NodeKind.VALUE_TYPE\n-                || node.getKind() == NodeKind.BUILT_IN_REF_TYPE\n-                || node.getKind() == NodeKind.CONSTRAINED_TYPE)) {\n-            return Optional.ofNullable(\n-                    SymbolFactory.createTypeDefinition(node.type.tsymbol, node.type.tsymbol.name.value));\n+        SymbolFinder symbolFinder = new SymbolFinder();\n+        BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d23f68cf7c965ad98d51c483a2ff98585e0d0d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1ODUxNA==", "bodyText": "Not different from doing a null check right? And SymbolFactory.getBCompiledSymbol() should always be returning a Symbol, provided a valid BSymbol. Will update it to validate the BSymbol. Any filtering should be done before calling the factory method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26315#discussion_r503258514", "createdAt": "2020-10-12T12:23:42Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -107,23 +103,14 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n     @Override\n     public Optional<Symbol> symbol(String srcFile, LinePosition position) {\n         BLangCompilationUnit compilationUnit = getCompilationUnit(srcFile);\n-        NodeResolver nodeResolver = new NodeResolver();\n-        BLangNode node = nodeResolver.lookup(compilationUnit, position);\n-\n-        if (node instanceof IdentifiableNode) {\n-            BSymbol symbol = (BSymbol) ((IdentifiableNode) node).getSymbol();\n-            return Optional.ofNullable(SymbolFactory.getBCompiledSymbol(symbol, symbol.name.value));\n-        } else if (node != null && (node.getKind() == USER_DEFINED_TYPE\n-                || node.getKind() == NodeKind.UNION_TYPE_NODE\n-                || node.getKind() == NodeKind.INTERSECTION_TYPE_NODE\n-                || node.getKind() == NodeKind.VALUE_TYPE\n-                || node.getKind() == NodeKind.BUILT_IN_REF_TYPE\n-                || node.getKind() == NodeKind.CONSTRAINED_TYPE)) {\n-            return Optional.ofNullable(\n-                    SymbolFactory.createTypeDefinition(node.type.tsymbol, node.type.tsymbol.name.value));\n+        SymbolFinder symbolFinder = new SymbolFinder();\n+        BSymbol symbolAtCursor = symbolFinder.lookup(compilationUnit, position);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIzNzE3OQ=="}, "originalCommit": {"oid": "22d23f68cf7c965ad98d51c483a2ff98585e0d0d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjM3MTcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/SymbolFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzozMTo0MlrOHf-34g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTozNDozOFrOHgKyIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5ODAxOA==", "bodyText": "Error message tells invalid kind, instead we show the class name. Shall we modify either the message or the input arg", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26315#discussion_r503298018", "createdAt": "2020-10-12T13:31:42Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/SymbolFactory.java", "diffHunk": "@@ -92,7 +92,11 @@ public static Symbol getBCompiledSymbol(BSymbol symbol, String name) {\n             return createTypeDefinition((BTypeSymbol) symbol, name);\n         }\n \n-        return null;\n+        if (symbol == null) {\n+            throw new IllegalArgumentException(\"Symbol is 'null'\");\n+        }\n+\n+        throw new IllegalArgumentException(\"Unsupported symbol kind: \" + symbol.getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8857023fa9ede8e74ef2326f14cc6e7c577581"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5MzE1Mw==", "bodyText": "Changed kind -> type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26315#discussion_r503493153", "createdAt": "2020-10-12T19:34:38Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/SymbolFactory.java", "diffHunk": "@@ -92,7 +92,11 @@ public static Symbol getBCompiledSymbol(BSymbol symbol, String name) {\n             return createTypeDefinition((BTypeSymbol) symbol, name);\n         }\n \n-        return null;\n+        if (symbol == null) {\n+            throw new IllegalArgumentException(\"Symbol is 'null'\");\n+        }\n+\n+        throw new IllegalArgumentException(\"Unsupported symbol kind: \" + symbol.getClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5ODAxOA=="}, "originalCommit": {"oid": "fa8857023fa9ede8e74ef2326f14cc6e7c577581"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4938, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}