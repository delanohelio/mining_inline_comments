{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjAxMDA5", "number": 20989, "title": "Fix grpc map field serialization issue and optional field deserialization issue(master)", "bodyText": "Purpose\nFix grpc map field serialization issue and an optional field deserialization issue\nResolves: #20888\nResolves: #20987\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-02-11T11:16:48Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989", "merged": true, "mergeCommit": {"oid": "521a14392a7f045b6e6a9cc4381330b1017bf2a7"}, "closed": true, "closedAt": "2020-02-17T07:29:20Z", "author": {"login": "daneshk"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDPlGKgH2gAyMzczNjAxMDA5OjE3MWViOWQ5ZWYzMzU1Y2ZlOGExYWRjYjBmNjk1OTAyYTg0OWIzZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFIJb3gFqTM1OTUyODU4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "171eb9d9ef3355cfe8a1adcb0f695902a849b3f3", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/171eb9d9ef3355cfe8a1adcb0f695902a849b3f3", "committedDate": "2020-02-11T10:56:57Z", "message": "Fix grpc map field serialization issue\nand optional field deserialization issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTkyNDgx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#pullrequestreview-356592481", "createdAt": "2020-02-11T11:45:04Z", "commit": {"oid": "171eb9d9ef3355cfe8a1adcb0f695902a849b3f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo0NTowNFrOFoF_wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo0NTowNFrOFoF_wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4NTYwMA==", "bodyText": "Shall we stick to the 120 max line width? Check all the places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r377585600", "createdAt": "2020-02-11T11:45:04Z", "author": {"login": "anupama-pathirage"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/clients/19_grpc_map_field_client.bal", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/grpc;\n+import ballerina/io;\n+\n+NegotiatorBlockingClient blockingEp = new(\"http://localhost:9109\");\n+\n+public function main (string... args) {\n+    io:println(\"starting negotiator client\");\n+    io:println(testMapFields());\n+    io:println(testOptionalFields());\n+}\n+\n+public function testMapFields() returns string {\n+    MetricsPublishRequest request = {id: \"xxxxx\", metrics: [{timestamp:1580966325916,\n+    name:\"ballerina/http/Caller_3XX_requests_total_count\",value:0.0,tags:[{key:\"action\", value:\"respond\"}]}]};\n+    grpc:Headers|error publishMetrics = blockingEp->publishMetrics(request);\n+    if (publishMetrics is error) {\n+        return io:sprintf(\"Metrics publish failed: %s - %s\", publishMetrics.reason(), <string> publishMetrics.detail()[\"message\"]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171eb9d9ef3355cfe8a1adcb0f695902a849b3f3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTk0MzMz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#pullrequestreview-356594333", "createdAt": "2020-02-11T11:48:28Z", "commit": {"oid": "171eb9d9ef3355cfe8a1adcb0f695902a849b3f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo0ODoyOFrOFoGFZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo0ODoyOFrOFoGFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4NzA0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                record {| string key; string value; |}[] tags = [];\n          \n          \n            \n                record {|string key; string value;|}[] tags = [];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r377587045", "createdAt": "2020-02-11T11:48:28Z", "author": {"login": "anupama-pathirage"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/grpcservices/19_grpc_map_service.bal", "diffHunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/grpc;\n+import ballerina/io;\n+import ballerina/log;\n+\n+listener grpc:Listener negotiatorep = new (9109);\n+\n+@grpc:ServiceDescriptor {\n+    descriptor: ROOT_DESCRIPTOR_19,\n+    descMap: getDescriptorMap19()\n+}\n+service Negotiator on negotiatorep {\n+\n+    resource function handshake(grpc:Caller caller, HandshakeRequest value) {\n+        log:printInfo(io:sprintf(\"Handshake request: %s\", value.toString()));\n+\n+        if (value.jsonStr != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"jsonStr should be an empty string.\");\n+            return;\n+        }\n+        if (value.programHash != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"programHash should be an empty string.\");\n+            return;\n+        }\n+        if (value.userId != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"userId should be an empty string.\");\n+            return;\n+        }\n+        if (value.instanceId != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"instanceId should be an empty string.\");\n+            return;\n+        }\n+        if (value.applicationId != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"applicationId should be an empty string.\");\n+            return;\n+        }\n+        HandshakeResponse response = {id:\"123456\", protocols:[\"http\", \"https\"]};\n+        error? send = caller->send(response);\n+        if (send is error) {\n+            log:printError(\"Error while sending the response.\", send);\n+        } else {\n+            error? complete = caller->complete();\n+        }\n+    }\n+\n+    resource function publishMetrics(grpc:Caller caller, MetricsPublishRequest value) {\n+        log:printInfo(io:sprintf(\"publishMetrics request: %s\", value.toString()));\n+\n+        if (value.metrics.length() < 0) {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"metrics cannot be an empty array.\");\n+            return;\n+        }\n+        foreach var metric in value.metrics {\n+             log:printInfo(io:sprintf(\"metric value: %s\", metric.toString()));\n+             if (metric.tags.length() < 0) {\n+                 error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"tags cannot be an empty array.\");\n+                 return;\n+             }\n+        }\n+        error? complete = caller->complete();\n+    }\n+\n+    resource function publishTraces(grpc:Caller caller, TracesPublishRequest value) {\n+        log:printInfo(io:sprintf(\"publishTraces request: %s\", value.toString()));\n+        error? complete = caller->complete();\n+        io:println(complete);\n+    }\n+}\n+\n+public type Empty record {|\n+|};\n+\n+public type HandshakeResponse record {|\n+    string id = \"\";\n+    string[] protocols = [];\n+|};\n+\n+public type MetricsPublishRequest record {|\n+    string id = \"\";\n+    Metric[] metrics = [];\n+|};\n+\n+public type Metric record {|\n+    int timestamp = 0;\n+    string name = \"\";\n+    float value = 0.0;\n+    record {| string key; string value; |}[] tags = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171eb9d9ef3355cfe8a1adcb0f695902a849b3f3"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7643f94d85669726cfa1c3cd367d10941ed0261c", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7643f94d85669726cfa1c3cd367d10941ed0261c", "committedDate": "2020-02-12T07:24:48Z", "message": "Reformat ballerina service and client code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTcyMTM5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#pullrequestreview-358172139", "createdAt": "2020-02-13T12:19:36Z", "commit": {"oid": "7643f94d85669726cfa1c3cd367d10941ed0261c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjoxOTozNlrOFpRtqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjoxOTozNlrOFpRtqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNjE1NA==", "bodyText": "What is the special reason to notify the error to callback and return error subsequently?\nIf the exception has occurred before the non-blocking call, then call back should not be called ideally. We can simply unblock strand[1] and return error. Problem is if we notify the callback when the non-blocking task is not processed, that can cause strand state issues.\n[1] https://github.com/ballerina-platform/ballerina-lang/blob/master/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java#L122", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r378826154", "createdAt": "2020-02-13T12:19:36Z", "author": {"login": "chamil321"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/nativeimpl/client/FunctionUtils.java", "diffHunk": "@@ -248,18 +248,22 @@ public static Object externBlockingExecute(ObjectValue clientEndpoint, String me\n                 requestMsg.setHeaders(headers);\n             }\n             BlockingStub blockingStub = (BlockingStub) connectionStub;\n+            DataContext dataContext = null;\n             try {\n                 MethodDescriptor.MethodType methodType = getMethodType(methodDescriptor);\n                 if (methodType.equals(MethodDescriptor.MethodType.UNARY)) {\n \n-                    DataContext dataContext = new DataContext(Scheduler.getStrand(),\n+                    dataContext = new DataContext(Scheduler.getStrand(),\n                             new NonBlockingCallback(Scheduler.getStrand()));\n                     blockingStub.executeUnary(requestMsg, methodDescriptors.get(methodName), dataContext);\n                 } else {\n                     return notifyErrorReply(INTERNAL, \"Error while executing the client call. Method type \" +\n                             methodType.name() + \" not supported\");\n                 }\n             } catch (Exception e) {\n+                if (dataContext != null) {\n+                    dataContext.getCallback().notifyFailure(MessageUtils.getConnectorError(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7643f94d85669726cfa1c3cd367d10941ed0261c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25dc2415754273375f38c7f520185d2622af5300", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25dc2415754273375f38c7f520185d2622af5300", "committedDate": "2020-02-17T05:00:07Z", "message": "Add code review suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NTI4NTgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#pullrequestreview-359528583", "createdAt": "2020-02-17T07:25:15Z", "commit": {"oid": "25dc2415754273375f38c7f520185d2622af5300"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4238, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}