{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3ODg2Njgw", "number": 24411, "title": "Handle the parsed node in compiler front end", "bodyText": "Purpose\n$subject. This enables the resilient parsing.\nFixes #24240\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-06-22T11:48:42Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411", "merged": true, "mergeCommit": {"oid": "b62194932e4463e552152d90fac8f666febf75ae"}, "closed": true, "closedAt": "2020-07-03T03:28:34Z", "author": {"login": "KavinduZoysa"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct08WDgBqjM0Njk2MDgyMzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxK333gFqTQ0MjEyNTM3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2be79d38a625607a417756dfbbbc94e3f28dbf6d", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2be79d38a625607a417756dfbbbc94e3f28dbf6d", "committedDate": "2020-06-22T10:38:57Z", "message": "Add new tests"}, "afterCommit": {"oid": "047d4b8b3132e0e6a030cd5d9866240309be5acc", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/047d4b8b3132e0e6a030cd5d9866240309be5acc", "committedDate": "2020-06-22T18:12:58Z", "message": "Add new tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NDQ4MzEw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#pullrequestreview-435448310", "createdAt": "2020-06-23T05:20:07Z", "commit": {"oid": "047d4b8b3132e0e6a030cd5d9866240309be5acc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNToyMDowN1rOGnZoOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNTozNToyMFrOGnZ6zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2NzU0NQ==", "bodyText": "shall we use TreeBuilder.createIdentifierNode(); instead of createIdentifier(null, \"\")?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443967545", "createdAt": "2020-06-23T05:20:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4033,6 +4033,11 @@ private BLangType createBuiltInTypeNode(Node type) {\n             BuiltinSimpleNameReferenceNode simpleNameRef = (BuiltinSimpleNameReferenceNode) type;\n             if (simpleNameRef.kind() == SyntaxKind.VAR_TYPE_DESC) {\n                 return null;\n+            } else if (simpleNameRef.name().isMissing()) {\n+                String name = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n+                BLangIdentifier identifier = createIdentifier(getPosition(simpleNameRef.name()), name);\n+                BLangIdentifier pkgAlias = createIdentifier(null, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047d4b8b3132e0e6a030cd5d9866240309be5acc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2OTQ4OQ==", "bodyText": "still need @Test(groups = { \"brokenOnNewParser\" })?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443969489", "createdAt": "2020-06-23T05:25:43Z", "author": {"login": "SupunS"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/globalvar/GlobalVarNegativeTest.java", "diffHunk": "@@ -33,11 +33,13 @@\n     public void testGlobalVarNegatives() {\n         CompileResult resultNegative = BCompileUtil.compile(\n                 \"test-src/statements/variabledef/global_variable_negative.bal\");\n-        Assert.assertEquals(resultNegative.getErrorCount(), 4);\n-        BAssertUtil.validateError(resultNegative, 0, \"invalid token 'int'\", 27, 8);\n-        BAssertUtil.validateError(resultNegative, 1, \"invalid token 'int'\", 29, 8);\n-        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 46);\n-        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 59);\n+        Assert.assertEquals(resultNegative.getErrorCount(), 6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047d4b8b3132e0e6a030cd5d9866240309be5acc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDAyNw==", "bodyText": "I think we should continue, only if its the new parser.\nIf the old parser is in use, we should terminate like before", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443970027", "createdAt": "2020-06-23T05:27:19Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/PackageLoader.java", "diffHunk": "@@ -378,9 +378,6 @@ public BLangPackage loadEntryPackage(PackageID pkgId, PackageID enclPackageId, P\n         }\n \n         BLangPackage packageNode = parse(pkgId, (PackageSource) pkgEntity);\n-        if (packageNode.diagCollector.hasErrors()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047d4b8b3132e0e6a030cd5d9866240309be5acc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDY5OQ==", "bodyText": "should this be ff.bar() or f.bar()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443970699", "createdAt": "2020-06-23T05:29:13Z", "author": {"login": "SupunS"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/resilient-parser.bal", "diffHunk": "@@ -0,0 +1,45 @@\n+public function (int a, int b) {\n+    int x1 = 2;\n+}\n+\n+public function foo1(int) {\n+    int x1 = 3;\n+}\n+\n+public function foo2(int a, = \"hello\") {\n+    int x1 = 3;\n+}\n+\n+public function foo2(int a =) {\n+    int x1 = 3;\n+    int x1 = 3;\n+}\n+\n+public function foo3(int a) {\n+    return a;\n+}\n+\n+public function foo4(int a) returns {\n+}\n+\n+public function foo5(int a, = \"hello\", int b =) {\n+    int x1 = 3;\n+    int[] arr = [10, 20,];\n+    arr[1 = 20;\n+    int x = arr[1;\n+    ar[2] = 40;\n+    int y = arr1];\n+}\n+\n+type Foo object {\n+    int x;\n+\n+    function bar () returns int {\n+        return 2;\n+    }\n+};\n+\n+public function foo6() {\n+    Foo f  new;\n+    int x = ff.bar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047d4b8b3132e0e6a030cd5d9866240309be5acc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MjMwMA==", "bodyText": "Shall we add some more tests like:\n\nImport with missing pieces (missing prefix, missing org-name, missing module-name etc..)\nObject/record type definitions, with missing object/record name\nNamespace decl with missing pieces\nService decl with missing pieces\n\nSimilarly, can add tests for all module level decls with missing parts: https://ballerina.io/ballerina-spec/spec.html#module_level", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443972300", "createdAt": "2020-06-23T05:35:20Z", "author": {"login": "SupunS"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/resilient-parser.bal", "diffHunk": "@@ -0,0 +1,45 @@\n+public function (int a, int b) {\n+    int x1 = 2;\n+}\n+\n+public function foo1(int) {\n+    int x1 = 3;\n+}\n+\n+public function foo2(int a, = \"hello\") {\n+    int x1 = 3;\n+}\n+\n+public function foo2(int a =) {\n+    int x1 = 3;\n+    int x1 = 3;\n+}\n+\n+public function foo3(int a) {\n+    return a;\n+}\n+\n+public function foo4(int a) returns {\n+}\n+\n+public function foo5(int a, = \"hello\", int b =) {\n+    int x1 = 3;\n+    int[] arr = [10, 20,];\n+    arr[1 = 20;\n+    int x = arr[1;\n+    ar[2] = 40;\n+    int y = arr1];\n+}\n+\n+type Foo object {\n+    int x;\n+\n+    function bar () returns int {\n+        return 2;\n+    }\n+};\n+\n+public function foo6() {\n+    Foo f  new;\n+    int x = ff.bar();\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047d4b8b3132e0e6a030cd5d9866240309be5acc"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2cdbdf07b8ef374b802cd4a399487507ccb771a", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2cdbdf07b8ef374b802cd4a399487507ccb771a", "committedDate": "2020-06-24T07:06:35Z", "message": "Fix the suggestions"}, "afterCommit": {"oid": "5b6a1a4e1db170c7f5fdc3c1646ae7f0b149364a", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b6a1a4e1db170c7f5fdc3c1646ae7f0b149364a", "committedDate": "2020-06-28T15:49:00Z", "message": "Add new tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b6a1a4e1db170c7f5fdc3c1646ae7f0b149364a", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b6a1a4e1db170c7f5fdc3c1646ae7f0b149364a", "committedDate": "2020-06-28T15:49:00Z", "message": "Add new tests"}, "afterCommit": {"oid": "11d03fdf9326a711fc443797991df5055452c399", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11d03fdf9326a711fc443797991df5055452c399", "committedDate": "2020-06-28T16:45:47Z", "message": "Add new tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11d03fdf9326a711fc443797991df5055452c399", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11d03fdf9326a711fc443797991df5055452c399", "committedDate": "2020-06-28T16:45:47Z", "message": "Add new tests"}, "afterCommit": {"oid": "b77b167b34279fe0f3015a4aea55a68a94dce78f", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b77b167b34279fe0f3015a4aea55a68a94dce78f", "committedDate": "2020-06-30T04:24:05Z", "message": "Add new tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab79234575643b5ccbe4c80bc330a7e09ed3a76a", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ab79234575643b5ccbe4c80bc330a7e09ed3a76a", "committedDate": "2020-07-01T04:12:17Z", "message": "Pass the errors to compilerDriver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57baa064590dcc2e3ba561ead5ed2d0dea06a968", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/57baa064590dcc2e3ba561ead5ed2d0dea06a968", "committedDate": "2020-07-01T04:12:17Z", "message": "Fix failure tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb7789ed230b18fc6a14d4fdffac1e15dc3a729f", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb7789ed230b18fc6a14d4fdffac1e15dc3a729f", "committedDate": "2020-07-01T04:12:17Z", "message": "Add new tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50c58d7426a7b48e5fb6dbf4aa79625251f2f9a5", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50c58d7426a7b48e5fb6dbf4aa79625251f2f9a5", "committedDate": "2020-07-01T04:12:17Z", "message": "Fix the suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "263a629c73ab0098d79ed72f977126b03a60c21c", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/263a629c73ab0098d79ed72f977126b03a60c21c", "committedDate": "2020-07-01T04:12:17Z", "message": "Add new tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b77b167b34279fe0f3015a4aea55a68a94dce78f", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b77b167b34279fe0f3015a4aea55a68a94dce78f", "committedDate": "2020-06-30T04:24:05Z", "message": "Add new tests"}, "afterCommit": {"oid": "263a629c73ab0098d79ed72f977126b03a60c21c", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/263a629c73ab0098d79ed72f977126b03a60c21c", "committedDate": "2020-07-01T04:12:17Z", "message": "Add new tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTI1Mzc4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#pullrequestreview-442125378", "createdAt": "2020-07-03T03:28:27Z", "commit": {"oid": "263a629c73ab0098d79ed72f977126b03a60c21c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4206, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}