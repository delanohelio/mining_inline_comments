{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTY1Njkx", "number": 26692, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzowOToxN1rOE396eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDoyODowMVrOFCPpVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTIxNTI4OnYy", "diffSide": "RIGHT", "path": "observelib/observe/src/main/java/org/ballerinalang/observe/nativeimpl/AddTagToMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzowOToxOFrOHxng4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzowOToxOFrOHxng4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4OTY2NQ==", "bodyText": "U can directly add the property here without maintaining a separate isCustomTagsAvailable variable", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r521789665", "createdAt": "2020-11-12T03:09:18Z", "author": {"login": "nadundesilva"}, "path": "observelib/observe/src/main/java/org/ballerinalang/observe/nativeimpl/AddTagToMetrics.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.ballerinalang.observe.nativeimpl;\n+\n+import io.ballerina.runtime.api.Environment;\n+import io.ballerina.runtime.api.creators.ErrorCreator;\n+import io.ballerina.runtime.api.utils.StringUtils;\n+import io.ballerina.runtime.api.values.BString;\n+import io.ballerina.runtime.observability.ObserveUtils;\n+import io.ballerina.runtime.observability.ObserverContext;\n+import io.ballerina.runtime.observability.metrics.BallerinaMetricsObserver;\n+import io.ballerina.runtime.observability.metrics.Tag;\n+\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This function add tags to System Metrics.\n+ * Custom tag is not included in the 'in progress-requests'\n+ */\n+public class AddTagToMetrics {\n+\n+    public static Object addTagToMetrics(Environment env, BString tagKey, BString tagValue) {\n+\n+        ObserverContext observerContext = ObserveUtils.getObserverContextOfCurrentFrame(env);\n+        boolean isCustomTagsAvailable = true;\n+        if (observerContext != null) {\n+            Map<String, Tag> customTags =\n+                    (Map<String, Tag>) observerContext.getProperty(BallerinaMetricsObserver.PROPERTY_CUSTOM_TAGS);\n+            if (customTags == null) {\n+                customTags = new HashMap<>();\n+                isCustomTagsAvailable = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbe233128859456e48d18b0bb66d24fbdc5d36e4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg0ODAzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/metrics/BallerinaMetricsObserver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowMDowMFrOH291yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowMDowMFrOH291yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5ODM0Ng==", "bodyText": "Let's remove this additional line here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r527398346", "createdAt": "2020-11-20T05:00:00Z", "author": {"login": "nadundesilva"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/metrics/BallerinaMetricsObserver.java", "diffHunk": "@@ -22,15 +22,23 @@\n \n import java.io.PrintStream;\n import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n \n+import static io.ballerina.runtime.observability.ObservabilityConstants.PROPERTY_KEY_HTTP_STATUS_CODE;\n+import static io.ballerina.runtime.observability.ObservabilityConstants.STATUS_CODE_GROUP_SUFFIX;\n+import static io.ballerina.runtime.observability.ObservabilityConstants.TAG_KEY_HTTP_STATUS_CODE_GROUP;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ceec95479dfd2bbf79ef4c39221209927debbf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg3NjY4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/metrics/MetricsTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxNToyOVrOH2-F-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxNToyOVrOH2-F-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMjQ5MA==", "bodyText": "We should rename the param and rephrase the description. endObservationTags is actually the additional tags added after start here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r527402490", "createdAt": "2020-11-20T05:15:29Z", "author": {"login": "nadundesilva"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/metrics/MetricsTestCase.java", "diffHunk": "@@ -125,21 +125,41 @@ private Metrics filterByTag(Metrics metrics, String key, String value) {\n     /**\n      * Test the metrics generated for a particular function invocation.\n      *\n-     * @param allMetrics All the metrics collected from Metrics Registry\n+     * @param allMetrics         All the metrics collected from Metrics Registry\n      * @param invocationPosition The invocation position of the function invocation\n-     * @param invocationCount The number of times the function should have been called\n-     * @param additionalTags Additional tags that should be present in the metrics\n+     * @param invocationCount    The number of times the function should have been called\n+     * @param additionalTags     Additional tags that should be present in the metrics\n+     */\n+    private void testFunctionMetrics(Metrics allMetrics, String invocationPosition, long invocationCount,\n+                                     Tag... additionalTags) {\n+\n+        testFunctionMetrics(allMetrics, invocationPosition, invocationCount, additionalTags, null);\n+    }\n+\n+    /**\n+     * Test the metrics generated for a particular function invocation for a given start and end tag set.\n+     *\n+     * @param allMetrics           All the metrics collected from Metrics Registry\n+     * @param invocationPosition   The invocation position of the function invocation\n+     * @param invocationCount      The number of times the function should have been called\n+     * @param startObservationTags tags at the observation start which should be present in the metrics\n+     * @param endObservationTags   tags at the observation end which should be present in the metrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ceec95479dfd2bbf79ef4c39221209927debbf"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg3NzgxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/metrics/MetricsTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxNjoyM1rOH2-GtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxNjoyM1rOH2-GtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMjY3Nw==", "bodyText": "Minor alignment issue here in the javadoc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r527402677", "createdAt": "2020-11-20T05:16:23Z", "author": {"login": "nadundesilva"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/metrics/MetricsTestCase.java", "diffHunk": "@@ -175,25 +195,28 @@ private void testFunctionCounters(long invocationCount, Metrics functionMetrics,\n     }\n \n     /**\n-     * Test the gauge metrics generated for a particular function invocation.\n+     * Test the gauge metrics generated for a particular function invocation for given start and end tag set.\n      *\n      * @param invocationCount The number of times the function should have been called\n      * @param functionMetrics All the metrics generated for the function invocation\n-     * @param tags Tags that should be present in metrics\n+     * @param startTags            Tags that should be present in metrics at observation start\n+     * @param endTags            Tags that should be present in metrics at observation end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ceec95479dfd2bbf79ef4c39221209927debbf"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg4NTU5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/observability/metrics_tests/03_addTagToMetrics_function.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToyMDo1MVrOH2-LIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToyMDo1MVrOH2-LIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMzgxMA==", "bodyText": "Shall we rename this file to 03_custom_metric_tags.bal ? (The convention for file names here is \"snake_case\")", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r527403810", "createdAt": "2020-11-20T05:20:51Z", "author": {"login": "nadundesilva"}, "path": "tests/jballerina-integration-test/src/test/resources/observability/metrics_tests/03_addTagToMetrics_function.bal", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ceec95479dfd2bbf79ef4c39221209927debbf"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg4OTIzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/observability/metrics_tests/03_addTagToMetrics_function.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToyMjoxMVrOH2-NZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToyMjoxMVrOH2-NZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwNDM4OQ==", "bodyText": "Minor alignment and spacing issues here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r527404389", "createdAt": "2020-11-20T05:22:11Z", "author": {"login": "nadundesilva"}, "path": "tests/jballerina-integration-test/src/test/resources/observability/metrics_tests/03_addTagToMetrics_function.bal", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/testobserve;\n+import ballerina/observe;\n+\n+service testServiceTwo on new testobserve:Listener(10092) {\n+    # Resource function for test custom tags\n+    resource function testAddTagToMetrics(testobserve:Caller caller) {\n+         // Add a custom tag to span, this should not be included in system metrics\n+         var res =  observe:addTagToSpan(\"tracing\", \"Tracing Value\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ceec95479dfd2bbf79ef4c39221209927debbf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjAzNTAyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/metrics/BallerinaMetricsObserver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzo0NDowMFrOIAUvkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzo0NDowMFrOIAUvkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMDc3MA==", "bodyText": "Can't we remove this now ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r537210770", "createdAt": "2020-12-07T03:44:00Z", "author": {"login": "nadundesilva"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/metrics/BallerinaMetricsObserver.java", "diffHunk": "@@ -22,15 +22,22 @@\n \n import java.io.PrintStream;\n import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n \n+import static io.ballerina.runtime.observability.ObservabilityConstants.PROPERTY_KEY_HTTP_STATUS_CODE;\n+import static io.ballerina.runtime.observability.ObservabilityConstants.STATUS_CODE_GROUP_SUFFIX;\n+import static io.ballerina.runtime.observability.ObservabilityConstants.TAG_KEY_HTTP_STATUS_CODE_GROUP;\n+\n /**\n  * Observe the runtime and collect measurements.\n  */\n public class BallerinaMetricsObserver implements BallerinaObserver {\n \n     private static final String PROPERTY_START_TIME = \"_observation_start_time_\";\n     private static final String PROPERTY_IN_PROGRESS_COUNTER = \"_observation_in_progress_counter_\";\n+    public static final String PROPERTY_CUSTOM_TAGS = \"_custom_metric_tags_\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d55d638a2ccad127b1c5da0e781864b97965459"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjA0MTY1OnYy", "diffSide": "RIGHT", "path": "observelib/observe/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzo0NzowM1rOIAUy7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNDowMjo1MFrOIAVDSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMTYzMQ==", "bodyText": "Do we need this ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r537211631", "createdAt": "2020-12-07T03:47:03Z", "author": {"login": "nadundesilva"}, "path": "observelib/observe/src/main/java/module-info.java", "diffHunk": "@@ -3,4 +3,5 @@\n     requires io.ballerina.runtime;\n     requires opentracing.api;\n     requires io.ballerina.config;\n+    requires slf4j.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d55d638a2ccad127b1c5da0e781864b97965459"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxNTgxNw==", "bodyText": "This for logging the span not found error", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r537215817", "createdAt": "2020-12-07T04:02:50Z", "author": {"login": "LakshanKarunathilake"}, "path": "observelib/observe/src/main/java/module-info.java", "diffHunk": "@@ -3,4 +3,5 @@\n     requires io.ballerina.runtime;\n     requires opentracing.api;\n     requires io.ballerina.config;\n+    requires slf4j.api;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMTYzMQ=="}, "originalCommit": {"oid": "9d55d638a2ccad127b1c5da0e781864b97965459"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODk3ODE0OnYy", "diffSide": "RIGHT", "path": "observelib/observe/src/main/java/org/ballerinalang/observe/nativeimpl/OpenTracerBallerinaWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDoyODowMVrOIBSPOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDoyODowMVrOIBSPOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIxODI5Nw==", "bodyText": "please extract this to a variable", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26692#discussion_r538218297", "createdAt": "2020-12-08T10:28:01Z", "author": {"login": "manuranga"}, "path": "observelib/observe/src/main/java/org/ballerinalang/observe/nativeimpl/OpenTracerBallerinaWrapper.java", "diffHunk": "@@ -149,29 +155,41 @@ public boolean finishSpan(Environment env, long spanId) {\n     /**\n      * Method to add tags to an existing span.\n      *\n-     * @param env current environment\n-     * @param tagKey the key of the tag\n+     * @param env      current environment\n+     * @param tagKey   the key of the tag\n      * @param tagValue the value of the tag\n-     * @param spanId id of the Span\n-     * @return boolean to indicate if tag was added to the span\n+     * @param spanId   id of the Span\n+     * @return Object to indicate if tag was added to the span\n      */\n-    public boolean addTag(Environment env, String tagKey, String tagValue, long spanId) {\n+    public Object addTag(Environment env, String tagKey, String tagValue, long spanId) {\n+\n         if (!enabled) {\n-            return false;\n+            return null;\n         }\n+\n+        final BSpan span;\n         if (spanId == -1) {\n             ObserverContext observer = ObserveUtils.getObserverContextOfCurrentFrame(env);\n-            if (observer != null) {\n-                observer.addTag(tagKey, tagValue);\n-                return true;\n+            if (observer == null) {\n+                return ErrorCreator.createError(\n+                        StringUtils.fromString(\n+                                (\"Span already finished. Can not add tag {\" + tagKey + \":\" + tagValue + \"}\")));\n             }\n-        }\n-        ObserverContext observerContext = observerContextMap.get(spanId);\n-        if (observerContext != null) {\n-            observerContext.addTag(tagKey, tagValue);\n-            return true;\n+            span = (BSpan) observer.getProperty(TraceConstants.KEY_SPAN);\n         } else {\n-            return false;\n+            ObserverContext observerContext = observerContextMap.get(spanId);\n+            if (observerContext == null) {\n+                log.info(\"Could not find the trace for given span id. Can not add tag {\" + tagKey + \":\" + tagValue +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5efa7a8c2c912e8d5335800b98cc5bf75ae1d58"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4703, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}