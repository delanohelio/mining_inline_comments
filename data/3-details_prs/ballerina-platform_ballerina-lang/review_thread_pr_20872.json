{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTE4OTIz", "number": 20872, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTowNzowOVrODdkIdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzozNTowN1rODfCctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzI3Mjg1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTowNzowOVrOFmPY5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTowNzowOVrOFmPY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MjM0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            expType.tsymbol.name,expType.tsymbol.pkgID, null, expType.tsymbol.scope.owner);\n          \n          \n            \n                            expType.tsymbol.name, expType.tsymbol.pkgID, null, expType.tsymbol.scope.owner);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375642341", "createdAt": "2020-02-06T05:07:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -606,9 +608,8 @@ private BInvokableType getMatchingFunctionBoundType(BInvokableType expType, Symb\n \n     private BType getMatchingObjectBoundType(BObjectType expType, SymbolEnv env, HashSet<BType> resolvedTypes) {\n \n-        BObjectTypeSymbol actObjectSymbol = (BObjectTypeSymbol) Symbols.createObjectSymbol(0, expType.tsymbol.name,\n-                                                                                           expType.tsymbol.pkgID, null,\n-                                                                                           expType.tsymbol.scope.owner);\n+        BObjectTypeSymbol actObjectSymbol = (BObjectTypeSymbol) Symbols.createObjectSymbol(expType.tsymbol.flags,\n+                expType.tsymbol.name,expType.tsymbol.pkgID, null, expType.tsymbol.scope.owner);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ae256169aa20f5657f9e10299f59c417b2cea2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzI3NDMwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTowODoyNFrOFmPZ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNjo0ODozOFrOFmQu6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MjU4MQ==", "bodyText": "Do we need a separate variable for this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375642581", "createdAt": "2020-02-06T05:08:24Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -626,11 +627,14 @@ private BType getMatchingObjectBoundType(BObjectType expType, SymbolEnv env, Has\n             BInvokableType matchType = getMatchingFunctionBoundType(expFunc.type, env, resolvedTypes);\n             BInvokableSymbol invokableSymbol = new BInvokableSymbol(expFunc.symbol.tag, expFunc.symbol.flags,\n                     expFunc.symbol.name, env.enclPkg.packageID, matchType, env.scope.owner);\n+            invokableSymbol.retType = invokableSymbol.getType().retType;\n             matchType.tsymbol = Symbols.createTypeSymbol(SymTag.FUNCTION_TYPE, invokableSymbol.flags, Names.EMPTY,\n                                                          env.enclPkg.symbol.pkgID, invokableSymbol.type,\n                                                          env.scope.owner);\n             actObjectSymbol.attachedFuncs.add(new BAttachedFunction(expFunc.funcName, invokableSymbol, matchType));\n-            actObjectSymbol.methodScope.define(expFunc.funcName, invokableSymbol);\n+            String funcName = Symbols.getAttachedFuncSymbolName(actObjectSymbol.type.tsymbol.name.value,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ae256169aa20f5657f9e10299f59c417b2cea2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY2NDM2MQ==", "bodyText": "seems bit lengthy... otherwise can put in the same line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375664361", "createdAt": "2020-02-06T06:48:38Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -626,11 +627,14 @@ private BType getMatchingObjectBoundType(BObjectType expType, SymbolEnv env, Has\n             BInvokableType matchType = getMatchingFunctionBoundType(expFunc.type, env, resolvedTypes);\n             BInvokableSymbol invokableSymbol = new BInvokableSymbol(expFunc.symbol.tag, expFunc.symbol.flags,\n                     expFunc.symbol.name, env.enclPkg.packageID, matchType, env.scope.owner);\n+            invokableSymbol.retType = invokableSymbol.getType().retType;\n             matchType.tsymbol = Symbols.createTypeSymbol(SymTag.FUNCTION_TYPE, invokableSymbol.flags, Names.EMPTY,\n                                                          env.enclPkg.symbol.pkgID, invokableSymbol.type,\n                                                          env.scope.owner);\n             actObjectSymbol.attachedFuncs.add(new BAttachedFunction(expFunc.funcName, invokableSymbol, matchType));\n-            actObjectSymbol.methodScope.define(expFunc.funcName, invokableSymbol);\n+            String funcName = Symbols.getAttachedFuncSymbolName(actObjectSymbol.type.tsymbol.name.value,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MjU4MQ=="}, "originalCommit": {"oid": "88ae256169aa20f5657f9e10299f59c417b2cea2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzYyOTU3OnYy", "diffSide": "RIGHT", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODozMTo0MFrOFmSuMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTowNjowOFrOFmTpUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5Njk0NQ==", "bodyText": "get(String fieldName) seems to be deprecated?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375696945", "createdAt": "2020-02-06T08:31:40Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "diffHunk": "@@ -49,16 +59,34 @@\n     //TODO: refactor hard coded values\n     public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue arrIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n-\n+        ArrayValue arr = (ArrayValue) m.get(\"m\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c92148f661c951af959ac38c1f3a2d4102b0e17"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxMjA4MA==", "bodyText": "will fix it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375712080", "createdAt": "2020-02-06T09:06:08Z", "author": {"login": "gimantha"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "diffHunk": "@@ -49,16 +59,34 @@\n     //TODO: refactor hard coded values\n     public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue arrIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n-\n+        ArrayValue arr = (ArrayValue) m.get(\"m\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5Njk0NQ=="}, "originalCommit": {"oid": "5c92148f661c951af959ac38c1f3a2d4102b0e17"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzY1NjcyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODo0MjozNVrOFmS-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODo0MjozNVrOFmS-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcwMTIzNw==", "bodyText": "IIUC, the last parameter typeFlags indicates if the record is anydata, pure (and although irrelevant here, if nillable) right? Since this method can be called with any array/tuple, I guess we have to iterate through the member type(s) and figure out the flags here?\nMay have to update wherever applicable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375701237", "createdAt": "2020-02-06T08:42:35Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "diffHunk": "@@ -49,16 +59,34 @@\n     //TODO: refactor hard coded values\n     public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue arrIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n-\n+        ArrayValue arr = (ArrayValue) m.get(\"m\");\n         if (arrIterator == null) {\n-            arrIterator = ((ArrayValue) m.get(\"m\")).getIterator();\n+            arrIterator = arr.getIterator();\n             m.addNativeData(\"&iterator&\", arrIterator);\n         }\n \n         if (arrIterator.hasNext()) {\n             Object element =  arrIterator.next();\n-            BFunctionType nextFuncType = m.getType().getAttachedFunctions()[0].type;\n-            BRecordType recordType = (BRecordType) ((BUnionType) nextFuncType.retType).getMemberTypes().get(0);\n+            Map<String, BField> fields = new HashMap<>();\n+            if (arr.getType().getTag() == TypeTags.ARRAY_TAG) {\n+                fields.put(\"value\", new BField(arr.getElementType(), \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+            } else {\n+                BTupleType tupleType = (BTupleType) arr.getType();\n+                LinkedHashSet<BType> types = new LinkedHashSet<>(tupleType.getTupleTypes());\n+                if (tupleType.getRestType() != null) {\n+                    types.add(tupleType.getRestType());\n+                }\n+                BType unionType;\n+                if (types.size() == 1) {\n+                    unionType = types.iterator().next();\n+                } else {\n+                    unionType = new BUnionType(new ArrayList<>(types));\n+                }\n+                fields.put(\"value\", new BField(unionType, \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+            }\n+\n+            BRecordType recordType = new BRecordType(\"$$returnType$$\", null, 0, fields,\n+                    null, true, TypeFlags.PURETYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c92148f661c951af959ac38c1f3a2d4102b0e17"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzY2MjQ2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Next.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODo0NDo0MlrOFmTCow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODo0NDo0MlrOFmTCow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcwMjE3OQ==", "bodyText": "import?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r375702179", "createdAt": "2020-02-06T08:44:42Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Next.java", "diffHunk": "@@ -20,9 +20,8 @@\n \n import org.ballerinalang.jvm.BallerinaValues;\n import org.ballerinalang.jvm.scheduling.Strand;\n-import org.ballerinalang.jvm.types.BFunctionType;\n-import org.ballerinalang.jvm.types.BRecordType;\n-import org.ballerinalang.jvm.types.BUnionType;\n+import org.ballerinalang.jvm.types.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c92148f661c951af959ac38c1f3a2d4102b0e17"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjg3ODU1OnYy", "diffSide": "RIGHT", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Next.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDoxOToyNFrOFmx65w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNToyNjozM1rOFmyoGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwODEwMw==", "bodyText": "Should we use https://github.com/ballerina-platform/ballerina-lang/blob/master/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/StringUtils.java#L112 instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376208103", "createdAt": "2020-02-07T04:19:24Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Next.java", "diffHunk": "@@ -50,14 +57,17 @@ public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue xmlIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n \n         if (xmlIterator == null) {\n-            xmlIterator = ((XMLValue) m.get(\"m\")).getIterator();\n+            xmlIterator = ((XMLValue) m.get(new BmpStringValue(\"m\"))).getIterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29481aa0e2555d725418ea3151bad7ce275aaa5e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxOTY3NA==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376219674", "createdAt": "2020-02-07T05:26:33Z", "author": {"login": "gimantha"}, "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Next.java", "diffHunk": "@@ -50,14 +57,17 @@ public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue xmlIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n \n         if (xmlIterator == null) {\n-            xmlIterator = ((XMLValue) m.get(\"m\")).getIterator();\n+            xmlIterator = ((XMLValue) m.get(new BmpStringValue(\"m\"))).getIterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwODEwMw=="}, "originalCommit": {"oid": "29481aa0e2555d725418ea3151bad7ce275aaa5e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjg5NjcxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/TypeFlags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDozNDozNlrOFmyFXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNToyNzowNVrOFmyocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDc4MA==", "bodyText": "Still not sure if this belongs here. IMO, we rarely create a type at runtime. Since the type creation logic is iterator specific, shall we move this somewhere else? We can maybe combine both methods then to have a single method that does both checks.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376210780", "createdAt": "2020-02-07T04:34:36Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/TypeFlags.java", "diffHunk": "@@ -53,4 +53,18 @@ public static int addToMask(int mask, int... flags) {\n         }\n         return mask;\n     }\n+\n+    public static int getAnydataTypeFlag(BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29481aa0e2555d725418ea3151bad7ce275aaa5e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxOTc2Mw==", "bodyText": "Added a new jvm class IteratorUtils and added thos two methods", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376219763", "createdAt": "2020-02-07T05:27:05Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/TypeFlags.java", "diffHunk": "@@ -53,4 +53,18 @@ public static int addToMask(int mask, int... flags) {\n         }\n         return mask;\n     }\n+\n+    public static int getAnydataTypeFlag(BType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDc4MA=="}, "originalCommit": {"oid": "29481aa0e2555d725418ea3151bad7ce275aaa5e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjkwMDI5OnYy", "diffSide": "RIGHT", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDozNzozM1rOFmyHag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNToyODowN1rOFmypMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMTMwNg==", "bodyText": "With this approach, every time next() is called all these checks are done and a new type is created right? Can't we refactor this logic to maybe have the type be part of the iterator or at least add it as native data?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376211306", "createdAt": "2020-02-07T04:37:33Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "diffHunk": "@@ -49,16 +60,35 @@\n     //TODO: refactor hard coded values\n     public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue arrIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n-\n+        ArrayValue arr = (ArrayValue) m.get(new BmpStringValue(\"m\"));\n         if (arrIterator == null) {\n-            arrIterator = ((ArrayValue) m.get(\"m\")).getIterator();\n+            arrIterator = arr.getIterator();\n             m.addNativeData(\"&iterator&\", arrIterator);\n         }\n \n         if (arrIterator.hasNext()) {\n             Object element =  arrIterator.next();\n-            BFunctionType nextFuncType = m.getType().getAttachedFunctions()[0].type;\n-            BRecordType recordType = (BRecordType) ((BUnionType) nextFuncType.retType).getMemberTypes().get(0);\n+            Map<String, BField> fields = new HashMap<>();\n+            BType type;\n+            int typeFlags = 0;\n+            if (arr.getType().getTag() == TypeTags.ARRAY_TAG) {\n+                type = arr.getElementType();\n+            } else {\n+                BTupleType tupleType = (BTupleType) arr.getType();\n+                LinkedHashSet<BType> types = new LinkedHashSet<>(tupleType.getTupleTypes());\n+                if (tupleType.getRestType() != null) {\n+                    types.add(tupleType.getRestType());\n+                }\n+                if (types.size() == 1) {\n+                    type = types.iterator().next();\n+                } else {\n+                    type = new BUnionType(new ArrayList<>(types));\n+                }\n+            }\n+\n+            fields.put(\"value\", new BField(type, \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+            BRecordType recordType = new BRecordType(\"$$returnType$$\", null, 0, fields, null, true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29481aa0e2555d725418ea3151bad7ce275aaa5e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxOTk1NA==", "bodyText": "Can we make the type be part of the iterator, because the type is always a typeParam?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376219954", "createdAt": "2020-02-07T05:28:07Z", "author": {"login": "gimantha"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Next.java", "diffHunk": "@@ -49,16 +60,35 @@\n     //TODO: refactor hard coded values\n     public static Object next(Strand strand, ObjectValue m) {\n         IteratorValue arrIterator = (IteratorValue) m.getNativeData(\"&iterator&\");\n-\n+        ArrayValue arr = (ArrayValue) m.get(new BmpStringValue(\"m\"));\n         if (arrIterator == null) {\n-            arrIterator = ((ArrayValue) m.get(\"m\")).getIterator();\n+            arrIterator = arr.getIterator();\n             m.addNativeData(\"&iterator&\", arrIterator);\n         }\n \n         if (arrIterator.hasNext()) {\n             Object element =  arrIterator.next();\n-            BFunctionType nextFuncType = m.getType().getAttachedFunctions()[0].type;\n-            BRecordType recordType = (BRecordType) ((BUnionType) nextFuncType.retType).getMemberTypes().get(0);\n+            Map<String, BField> fields = new HashMap<>();\n+            BType type;\n+            int typeFlags = 0;\n+            if (arr.getType().getTag() == TypeTags.ARRAY_TAG) {\n+                type = arr.getElementType();\n+            } else {\n+                BTupleType tupleType = (BTupleType) arr.getType();\n+                LinkedHashSet<BType> types = new LinkedHashSet<>(tupleType.getTupleTypes());\n+                if (tupleType.getRestType() != null) {\n+                    types.add(tupleType.getRestType());\n+                }\n+                if (types.size() == 1) {\n+                    type = types.iterator().next();\n+                } else {\n+                    type = new BUnionType(new ArrayList<>(types));\n+                }\n+            }\n+\n+            fields.put(\"value\", new BField(type, \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+            BRecordType recordType = new BRecordType(\"$$returnType$$\", null, 0, fields, null, true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMTMwNg=="}, "originalCommit": {"oid": "29481aa0e2555d725418ea3151bad7ce275aaa5e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTMxNTc5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNDo0ODo0MFrOFnaKAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNDo0ODo0MFrOFnaKAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2NzMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 1.2\n          \n          \n            \n             * @since 1.2.0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376867329", "createdAt": "2020-02-10T04:48:40Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTMxOTgwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNDo1MjowN1rOFnaMPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjowNzo1N1rOFna_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2NzkwMQ==", "bodyText": "Since we have a separate class now, shall we combine these and move the masking logic also here to a single method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376867901", "createdAt": "2020-02-10T04:52:07Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2\n+ */\n+public class IteratorUtils {\n+    public static int getAnydataTypeFlag(BType type) {\n+        if (type.isAnydata()) {\n+            return TypeFlags.ANYDATA;\n+        }\n+        return 0;\n+    }\n+\n+    public static int getPureTypeTypeFlag(BType type) {\n+        if (type.isPureType()) {\n+            return TypeFlags.PURETYPE;\n+        }\n+        return 0;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MDk1NA==", "bodyText": "moved to a single method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376880954", "createdAt": "2020-02-10T06:07:57Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2\n+ */\n+public class IteratorUtils {\n+    public static int getAnydataTypeFlag(BType type) {\n+        if (type.isAnydata()) {\n+            return TypeFlags.ANYDATA;\n+        }\n+        return 0;\n+    }\n+\n+    public static int getPureTypeTypeFlag(BType type) {\n+        if (type.isPureType()) {\n+            return TypeFlags.PURETYPE;\n+        }\n+        return 0;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2NzkwMQ=="}, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTMyMDU5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNDo1Mjo1N1rOFnaMtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjoxMjowOFrOFnbCnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODAyMQ==", "bodyText": "Why are we setting 0 for type flags here? XML and string are both anydata and pure?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376868021", "createdAt": "2020-02-10T04:52:57Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "diffHunk": "@@ -62,6 +63,11 @@\n     public static BType typePureType = new BUnionType(Arrays.asList(typeAnydata, typeError));\n     public static BType typeAllType = new BUnionType(Arrays.asList(typeAny, typeError));\n     public static BType typeHandle = new BHandleType(TypeConstants.HANDLE_TNAME, new BPackage(null, null, null));\n+    public static BRecordType stringItrNextReturnType = new BRecordType(TypeConstants.ITERATOR_NEXT_RETURN_TYPE,\n+            new BPackage(null, null, null), 0, true, TypeFlags.asMask(TypeFlags.ANYDATA,\n+            TypeFlags.PURETYPE));\n+    public static BRecordType xmlItrNextReturnType = new BRecordType(TypeConstants.ITERATOR_NEXT_RETURN_TYPE,\n+            new BPackage(null, null, null), 0, true, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MTgyMQ==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376881821", "createdAt": "2020-02-10T06:12:08Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "diffHunk": "@@ -62,6 +63,11 @@\n     public static BType typePureType = new BUnionType(Arrays.asList(typeAnydata, typeError));\n     public static BType typeAllType = new BUnionType(Arrays.asList(typeAny, typeError));\n     public static BType typeHandle = new BHandleType(TypeConstants.HANDLE_TNAME, new BPackage(null, null, null));\n+    public static BRecordType stringItrNextReturnType = new BRecordType(TypeConstants.ITERATOR_NEXT_RETURN_TYPE,\n+            new BPackage(null, null, null), 0, true, TypeFlags.asMask(TypeFlags.ANYDATA,\n+            TypeFlags.PURETYPE));\n+    public static BRecordType xmlItrNextReturnType = new BRecordType(TypeConstants.ITERATOR_NEXT_RETURN_TYPE,\n+            new BPackage(null, null, null), 0, true, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODAyMQ=="}, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTMyMTc1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNDo1NDoxOFrOFnaNYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjoxOToyNlrOFnbIbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODE5Mw==", "bodyText": "Can be combined?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376868193", "createdAt": "2020-02-10T04:54:18Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "diffHunk": "@@ -149,4 +160,11 @@ public static BType fromString(String typeName) {\n         }\n         return getTypeFromName(typeName);\n     }\n+\n+    private static Map<String, BField> createIteratorValueField(BType fieldType) {\n+        HashMap<String, BField> valueFields = new HashMap<>();\n+        valueFields.put(\"value\", new BField(fieldType, \"value\",\n+                Flags.PUBLIC + Flags.REQUIRED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MzMxMA==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376883310", "createdAt": "2020-02-10T06:19:26Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "diffHunk": "@@ -149,4 +160,11 @@ public static BType fromString(String typeName) {\n         }\n         return getTypeFromName(typeName);\n     }\n+\n+    private static Map<String, BField> createIteratorValueField(BType fieldType) {\n+        HashMap<String, BField> valueFields = new HashMap<>();\n+        valueFields.put(\"value\", new BField(fieldType, \"value\",\n+                Flags.PUBLIC + Flags.REQUIRED));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODE5Mw=="}, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTMyMjEwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNDo1NDo0N1rOFnaNlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjoxOTowMlrOFnbIJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODI0Ng==", "bodyText": "Shouldn't this be in IteratorUtils?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376868246", "createdAt": "2020-02-10T04:54:47Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "diffHunk": "@@ -149,4 +160,11 @@ public static BType fromString(String typeName) {\n         }\n         return getTypeFromName(typeName);\n     }\n+\n+    private static Map<String, BField> createIteratorValueField(BType fieldType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MzIzNg==", "bodyText": "moved", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376883236", "createdAt": "2020-02-10T06:19:02Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTypes.java", "diffHunk": "@@ -149,4 +160,11 @@ public static BType fromString(String typeName) {\n         }\n         return getTypeFromName(typeName);\n     }\n+\n+    private static Map<String, BField> createIteratorValueField(BType fieldType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODI0Ng=="}, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTMyMzExOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/AbstractArrayValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNDo1NTo0OVrOFnaOKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNjoyODoyOFrOFnbPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODM5NQ==", "bodyText": "Can't we use the constant for \"$$returnType$$\" here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376868395", "createdAt": "2020-02-10T04:55:49Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/AbstractArrayValue.java", "diffHunk": "@@ -309,6 +321,37 @@ public void setLength(long length) {\n         size = newLength;\n     }\n \n+    protected void initializeIteratorNextReturnType() {\n+        Map<String, BField> fields = new HashMap<>();\n+        BType type;\n+        if (getType().getTag() == TypeTags.ARRAY_TAG) {\n+            type = getElementType();\n+        } else {\n+            BTupleType tupleType = (BTupleType) getType();\n+            LinkedHashSet<BType> types = new LinkedHashSet<>(tupleType.getTupleTypes());\n+            if (tupleType.getRestType() != null) {\n+                types.add(tupleType.getRestType());\n+            }\n+            if (types.size() == 1) {\n+                type = types.iterator().next();\n+            } else {\n+                type = new BUnionType(new ArrayList<>(types));\n+            }\n+        }\n+\n+        fields.put(\"value\", new BField(type, \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+        iteratorNextReturnType = new BRecordType(\"$$returnType$$\", null, 0, fields, null, true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NTE3Mw==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376885173", "createdAt": "2020-02-10T06:28:28Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/AbstractArrayValue.java", "diffHunk": "@@ -309,6 +321,37 @@ public void setLength(long length) {\n         size = newLength;\n     }\n \n+    protected void initializeIteratorNextReturnType() {\n+        Map<String, BField> fields = new HashMap<>();\n+        BType type;\n+        if (getType().getTag() == TypeTags.ARRAY_TAG) {\n+            type = getElementType();\n+        } else {\n+            BTupleType tupleType = (BTupleType) getType();\n+            LinkedHashSet<BType> types = new LinkedHashSet<>(tupleType.getTupleTypes());\n+            if (tupleType.getRestType() != null) {\n+                types.add(tupleType.getRestType());\n+            }\n+            if (types.size() == 1) {\n+                type = types.iterator().next();\n+            } else {\n+                type = new BUnionType(new ArrayList<>(types));\n+            }\n+        }\n+\n+        fields.put(\"value\", new BField(type, \"value\", Flags.PUBLIC + Flags.REQUIRED));\n+        iteratorNextReturnType = new BRecordType(\"$$returnType$$\", null, 0, fields, null, true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2ODM5NQ=="}, "originalCommit": {"oid": "378c6a6931b550136c50897bdf784ff5482d2aa4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTY0NjIzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODoyMjoyNVrOFndLUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo0MjoyMlrOFndqTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNjgxNg==", "bodyText": "Something that's anydata is always pure right? I guess we can combine this as\n        if (isAnydata) {\n            return TypeFlags.asMask(TypeFlags.PURETYPE, TypeFlags.ANYDATA);\n        }\nWe can then remove the isPureType and isAnydata variables too, since we won't be reusing them?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376916816", "createdAt": "2020-02-10T08:22:25Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeConstants;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+import org.ballerinalang.jvm.util.Flags;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2.0\n+ */\n+public class IteratorUtils {\n+\n+    public static int getTypeFlags(BType type) {\n+        boolean isPureType = type.isPureType();\n+        boolean isAnydata = type.isAnydata();\n+\n+        if (isPureType && isAnydata) {\n+            return TypeFlags.asMask(TypeFlags.PURETYPE, TypeFlags.ANYDATA);\n+        }\n+\n+        if (isAnydata) {\n+            return TypeFlags.ANYDATA;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c84ab5d0411de06d21af2686ba0814dbd3e20b5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNDc0OA==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376924748", "createdAt": "2020-02-10T08:42:22Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeConstants;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+import org.ballerinalang.jvm.util.Flags;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2.0\n+ */\n+public class IteratorUtils {\n+\n+    public static int getTypeFlags(BType type) {\n+        boolean isPureType = type.isPureType();\n+        boolean isAnydata = type.isAnydata();\n+\n+        if (isPureType && isAnydata) {\n+            return TypeFlags.asMask(TypeFlags.PURETYPE, TypeFlags.ANYDATA);\n+        }\n+\n+        if (isAnydata) {\n+            return TypeFlags.ANYDATA;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNjgxNg=="}, "originalCommit": {"oid": "5c84ab5d0411de06d21af2686ba0814dbd3e20b5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTY0OTg0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODoyMzo0M1rOFndNdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo0MjozMFrOFndqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNzM2NA==", "bodyText": "Shall we add documentation for this method, since this is an iterator specific scenario? (e.g., for an ordinary scenario we would have to check the nillable flag too)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376917364", "createdAt": "2020-02-10T08:23:43Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeConstants;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+import org.ballerinalang.jvm.util.Flags;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2.0\n+ */\n+public class IteratorUtils {\n+\n+    public static int getTypeFlags(BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c84ab5d0411de06d21af2686ba0814dbd3e20b5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNDgxNw==", "bodyText": "sure.. added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r376924817", "createdAt": "2020-02-10T08:42:30Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeConstants;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+import org.ballerinalang.jvm.util.Flags;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2.0\n+ */\n+public class IteratorUtils {\n+\n+    public static int getTypeFlags(BType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNzM2NA=="}, "originalCommit": {"oid": "5c84ab5d0411de06d21af2686ba0814dbd3e20b5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODcyNTY1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzozNTowN1rOFogz4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzozNTowN1rOFogz4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyNDkzMA==", "bodyText": "the function name is a generic one and doesn't explain what it does.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20872#discussion_r378024930", "createdAt": "2020-02-12T03:35:07Z", "author": {"login": "hasithaa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IteratorUtils.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeConstants;\n+import org.ballerinalang.jvm.types.TypeFlags;\n+import org.ballerinalang.jvm.util.Flags;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class contains all the utility methods related to iterators.\n+ *\n+ * @since 1.2.0\n+ */\n+public class IteratorUtils {\n+\n+    /**\n+     * Returns the pure type and anydata type flags if they are available, otherwise 0. This is only used to check if\n+     * the record type returned fro the next function of an iterator, is a pure type or anydata.\n+     * @param type The type being checked\n+     * @return The type flags\n+     */\n+    public static int getTypeFlags(BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d819cc2d7445760ccc1325dead3ccade6721fc8"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1273, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}