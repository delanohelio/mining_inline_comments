{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MzM3MzYy", "number": 25763, "title": "Add isolated support to function type and anon func exper", "bodyText": "Purpose\n$Subject\nFixes #25563\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-09-14T05:24:45Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763", "merged": true, "mergeCommit": {"oid": "b8be4a0bbef12b68a62f815f78075d634eca0407"}, "closed": true, "closedAt": "2020-09-14T21:27:27Z", "author": {"login": "rdulmina"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGbBjjgH2gAyNDg2MzM3MzYyOjNiM2E2MWRhMTNiOGJhNjU4NTNiOTEzNTc3ZDkwNzA4Nzc2ZjEyNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIzQkSgFqTQ4Nzc3MTIxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3b3a61da13b8ba65853b913577d90708776f124f", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b3a61da13b8ba65853b913577d90708776f124f", "committedDate": "2020-09-07T04:09:55Z", "message": "Merge branch 'add-isolated-funcs' of https://github.com/MaryamZi/ballerina into add-isolated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b0d0d954624f69dac966811030c840949706fbf", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8b0d0d954624f69dac966811030c840949706fbf", "committedDate": "2020-09-09T03:44:30Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into add-isolated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2423ebc4271be6a91297657d43c94ccb4226049d", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2423ebc4271be6a91297657d43c94ccb4226049d", "committedDate": "2020-09-09T09:31:21Z", "message": "Parser changes for func type and anon func.\nParsing logic isolate support for function type desc and anonymous function expression."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d6936547bfa4d15fcdf474316171b030cc1291b", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d6936547bfa4d15fcdf474316171b030cc1291b", "committedDate": "2020-09-09T09:33:09Z", "message": "Error handler changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3ae85945ae94b5a054d0ac87b2ccfa824a52614", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3ae85945ae94b5a054d0ac87b2ccfa824a52614", "committedDate": "2020-09-09T10:07:12Z", "message": "Fix checkstyle issue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b93f060624ef2b632d483655ec292da4dfe0e523", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b93f060624ef2b632d483655ec292da4dfe0e523", "committedDate": "2020-09-09T10:37:18Z", "message": "Fix wrong use of context in error handler."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "664809b07e832b379af795d04b556b237f295f92", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/664809b07e832b379af795d04b556b237f295f92", "committedDate": "2020-09-09T10:55:50Z", "message": "Update assert files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eee697a8dd621810815f94e4702033a121cc26a", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3eee697a8dd621810815f94e4702033a121cc26a", "committedDate": "2020-09-10T05:50:07Z", "message": "Add test cases\nAdd test cases for isolated function type and isolated anon func expr."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd33bc54879ca2ee974411f1219a224011cd7f6d", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd33bc54879ca2ee974411f1219a224011cd7f6d", "committedDate": "2020-09-10T05:51:14Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into add-isolated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e957b3cb8b44ab9f1a1e9b5d40c9662485f1773", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e957b3cb8b44ab9f1a1e9b5d40c9662485f1773", "committedDate": "2020-09-10T09:05:40Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into add-isolated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d2fc6402a664c6605bc48bb4a848a31d4013232", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d2fc6402a664c6605bc48bb4a848a31d4013232", "committedDate": "2020-09-10T09:20:49Z", "message": "Merge branch 'add-isolated-funcs' of https://github.com/MaryamZi/ballerina into add-isolated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc4925a4645ffc7cb5227c7fc2179fa12628b3cf", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc4925a4645ffc7cb5227c7fc2179fa12628b3cf", "committedDate": "2020-09-10T09:46:18Z", "message": "Merge branch 'add-isolated-funcs' of https://github.com/MaryamZi/ballerina into add-isolated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c12928d4903e49a1c0c84a24ed09057b0004ce4", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c12928d4903e49a1c0c84a24ed09057b0004ce4", "committedDate": "2020-09-11T06:16:05Z", "message": "Remove isolated implicit anon functions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d52972d313f0d9273f28ab7f3bff7e8b7bbf7e", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59d52972d313f0d9273f28ab7f3bff7e8b7bbf7e", "committedDate": "2020-09-11T06:29:00Z", "message": "Update assert files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d1e6f72e5c795280c2854cefe6f3f58a0c26c8f", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d1e6f72e5c795280c2854cefe6f3f58a0c26c8f", "committedDate": "2020-09-11T06:32:19Z", "message": "Refactor code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20f1a4b065ec9e856dbb1cede3772fe5cd82509c", "committedDate": "2020-09-14T05:14:44Z", "message": "Merge branch 'add-isolated-funcs' of https://github.com/MaryamZi/ballerina into add-isolated\nResolve conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDQwNzcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#pullrequestreview-487440773", "createdAt": "2020-09-14T06:13:45Z", "commit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxMzo0NVrOHRFKow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxNTo1NVrOHRFNfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MjQ4Mw==", "bodyText": "Seems this block is repeated in 3 places. Shall we extract it to a separate method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487672483", "createdAt": "2020-09-14T06:13:45Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8828,34 +8839,61 @@ private STNode parseKeyTypeConstraint(STNode keyKeywordToken) {\n     /**\n      * Parse function type descriptor.\n      * <p>\n-     * <code>function-type-descriptor := function function-signature</code>\n+     * <code>function-type-descriptor := [isolated] function function-signature</code>\n      *\n      * @return Function type descriptor node\n      */\n     private STNode parseFunctionTypeDesc() {\n         startContext(ParserRuleContext.FUNC_TYPE_DESC);\n+        List<STNode> qualifiers = new ArrayList<>();\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case ISOLATED_KEYWORD:\n+                qualifiers.add(consume());\n+                break;\n+            case FUNCTION_KEYWORD:\n+                break;\n+            default:\n+                recover(peek(), ParserRuleContext.FUNC_TYPE_DESC_START);\n+                return parseFunctionTypeDesc();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MjUzMw==", "bodyText": "extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487672533", "createdAt": "2020-09-14T06:13:56Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type\n         STNodeList qualifierList = (STNodeList) qualifiers;\n         STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n-        // qualifiers are not allowed except for object filed\n+        List<STNode> validatedQualifierList = new ArrayList<>();\n+        // qualifiers are only allowed in the following cases for func type desc.\n+        // isolated qualifier allowed.\n+        // public or private qualifier allowed in object field.\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n+            if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD) {\n+                validatedQualifierList.add(qualifier);\n+            } else if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n                 visibilityQualifier = qualifier;\n             } else {\n-                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                functionKeyword = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(functionKeyword, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MzIxMw==", "bodyText": "Can end the context in parseReturnTypeDescRhs and come here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487673213", "createdAt": "2020-09-14T06:15:55Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDM5NzQ2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#pullrequestreview-487439746", "createdAt": "2020-09-14T06:11:11Z", "commit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxMToxMVrOHRFHVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxNzo0MlrOHRFP3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MTYzOQ==", "bodyText": "I think we don't need this check. parseComplexTypeDescriptor does the same check indirectly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487671639", "createdAt": "2020-09-14T06:11:11Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type\n         STNodeList qualifierList = (STNodeList) qualifiers;\n         STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n-        // qualifiers are not allowed except for object filed\n+        List<STNode> validatedQualifierList = new ArrayList<>();\n+        // qualifiers are only allowed in the following cases for func type desc.\n+        // isolated qualifier allowed.\n+        // public or private qualifier allowed in object field.\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n+            if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD) {\n+                validatedQualifierList.add(qualifier);\n+            } else if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n                 visibilityQualifier = qualifier;\n             } else {\n-                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                functionKeyword = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(functionKeyword, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text());\n+\n             }\n         }\n \n+        qualifiers = STNodeFactory.createNodeList(validatedQualifierList);\n+        STNode typeDesc = STNodeFactory.createFunctionTypeDescriptorNode(qualifiers, functionKeyword,\n+                funcSignature);\n+\n+        // Check if it is a complex type desc starting with function type\n+        if (isValidTypeContinuationToken(peek())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MzgyMg==", "bodyText": "These two also can start with isolated keyword?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487673822", "createdAt": "2020-09-14T06:17:42Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2222,9 +2233,11 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n                 return ParserRuleContext.TOP_LEVEL_NODE;\n             case FUNC_DEF:\n             case FUNC_DEF_OR_FUNC_TYPE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c207e61428b9c496971b58137edb5a579541584", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3c207e61428b9c496971b58137edb5a579541584", "committedDate": "2020-09-14T07:12:44Z", "message": "Use parseFunctionQualifiers method to parse func type desc and anon funcs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36a88e589236f11599e1ed38694e0b7edf4ea1a9", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36a88e589236f11599e1ed38694e0b7edf4ea1a9", "committedDate": "2020-09-14T09:40:13Z", "message": "Remove unwanted if condition."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8be4a0bbef12b68a62f815f78075d634eca0407", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8be4a0bbef12b68a62f815f78075d634eca0407", "committedDate": "2020-09-14T11:08:11Z", "message": "Add isolated recovery support for top level functions and func type desc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzcxMjE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#pullrequestreview-487771219", "createdAt": "2020-09-14T13:31:53Z", "commit": {"oid": "b8be4a0bbef12b68a62f815f78075d634eca0407"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4732, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}