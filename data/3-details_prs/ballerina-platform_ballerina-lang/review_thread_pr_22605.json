{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMTEzMjk4", "number": 22605, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzo1OToxMlrODyU_8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMzoyOToyN1rOD41-Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDk5NDQzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/test/java/org/ballerinalang/toml/ManifestProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzo1OToxMlrOGGTr-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzo1OToxMlrOGGTr-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2NzE5NA==", "bodyText": "You can probably return the method without adding a flag and a if", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22605#discussion_r409267194", "createdAt": "2020-04-16T03:59:12Z", "author": {"login": "hevayo"}, "path": "compiler/ballerina-lang/src/test/java/org/ballerinalang/toml/ManifestProcessorTest.java", "diffHunk": "@@ -126,20 +129,52 @@ public void testLicenseDescription() throws TomlException {\n         Assert.assertEquals(manifest.getProject().getLicense().get(1), \"Apache-2.0\");\n     }\n \n-    @Test(description = \"One dependency added to the dependencies section has an effect\")\n-    public void testSingleDependencies() throws TomlException, IOException {\n-        Path tmpDir = Files.createTempDirectory(\"manifest-test-\");\n-        Path baloPath = tmpDir.resolve(\"string_utils.balo\");\n-        Files.createFile(baloPath);\n-        \n-        Manifest manifest = ManifestProcessor.parseTomlContentFromString(this.validProjectBlock + \"[dependencies] \\n \" +\n-                \"string-utils = {path = \\\"\" + baloPath + \"\\\", version = \\\"1.1.5\\\"} \\n\");\n-        Assert.assertEquals(manifest.getDependencies().get(0).getModuleID(), \"string-utils\");\n-        Assert.assertEquals(manifest.getDependencies().get(0).getMetadata().getVersion(), \"1.1.5\");\n-        Assert.assertEquals(manifest.getDependencies().get(0).getMetadata().getPath().toString(), baloPath.toString());\n-        \n-        Files.delete(baloPath);\n-        Files.delete(tmpDir);\n+    @Test(description = \"One dependency added to the dependencies section has an effect except on Windows\")\n+    public void testSingleDependenciesLinux() throws TomlException, IOException {\n+        if (OS.contains(\"win\")) {\n+            flag = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035fcef0e1df7f571aa0d294099151aca14db863"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDk5NDkzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/test/java/org/ballerinalang/toml/ManifestProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzo1OTozOVrOGGTsUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzo1OTozOVrOGGTsUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2NzI4MA==", "bodyText": "Same as above you can return the function", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22605#discussion_r409267280", "createdAt": "2020-04-16T03:59:39Z", "author": {"login": "hevayo"}, "path": "compiler/ballerina-lang/src/test/java/org/ballerinalang/toml/ManifestProcessorTest.java", "diffHunk": "@@ -126,20 +129,52 @@ public void testLicenseDescription() throws TomlException {\n         Assert.assertEquals(manifest.getProject().getLicense().get(1), \"Apache-2.0\");\n     }\n \n-    @Test(description = \"One dependency added to the dependencies section has an effect\")\n-    public void testSingleDependencies() throws TomlException, IOException {\n-        Path tmpDir = Files.createTempDirectory(\"manifest-test-\");\n-        Path baloPath = tmpDir.resolve(\"string_utils.balo\");\n-        Files.createFile(baloPath);\n-        \n-        Manifest manifest = ManifestProcessor.parseTomlContentFromString(this.validProjectBlock + \"[dependencies] \\n \" +\n-                \"string-utils = {path = \\\"\" + baloPath + \"\\\", version = \\\"1.1.5\\\"} \\n\");\n-        Assert.assertEquals(manifest.getDependencies().get(0).getModuleID(), \"string-utils\");\n-        Assert.assertEquals(manifest.getDependencies().get(0).getMetadata().getVersion(), \"1.1.5\");\n-        Assert.assertEquals(manifest.getDependencies().get(0).getMetadata().getPath().toString(), baloPath.toString());\n-        \n-        Files.delete(baloPath);\n-        Files.delete(tmpDir);\n+    @Test(description = \"One dependency added to the dependencies section has an effect except on Windows\")\n+    public void testSingleDependenciesLinux() throws TomlException, IOException {\n+        if (OS.contains(\"win\")) {\n+            flag = false;\n+        }\n+        if (flag) {\n+            Path tmpDir = Files.createTempDirectory(\"manifest-test-\");\n+            Path baloPath = tmpDir.resolve(\"string_utils.balo\");\n+            Files.createFile(baloPath);\n+\n+            // Set tomlData replaced with proper path\n+            String tomlData = this.validProjectBlock + \"[dependencies] \\n string-utils = { path = \\\"\"\n+                    + baloPath + \"\\\", version = \\\"1.1.5\\\" } \\n \";\n+            Manifest manifest = ManifestProcessor.parseTomlContentFromString(tomlData);\n+            Assert.assertEquals(manifest.getDependencies().get(0).getModuleID(), \"string-utils\");\n+            Assert.assertEquals(manifest.getDependencies().get(0).getMetadata().getVersion(), \"1.1.5\");\n+            Assert.assertEquals(manifest.getDependencies().get(0).getMetadata().getPath().toString(),\n+                    baloPath.toString());\n+\n+            Files.delete(baloPath);\n+            Files.delete(tmpDir);\n+        }\n+    }\n+\n+    @Test(description = \"One dependency added to the dependencies section has an effect only on Windows\")\n+    public void testSingleDependenciesWindows() throws TomlException, IOException {\n+        if (!OS.contains(\"win\")) {\n+            flag = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035fcef0e1df7f571aa0d294099151aca14db863"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAwNzQ3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/test/java/org/ballerinalang/toml/ManifestProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowNzoxMlrOGGTziQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowNzoxMlrOGGTziQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTEyOQ==", "bodyText": "We can have same test for both windows and linux since we use resolve to get the path of the balo and skip the test if it is windows.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22605#discussion_r409269129", "createdAt": "2020-04-16T04:07:12Z", "author": {"login": "hevayo"}, "path": "compiler/ballerina-lang/src/test/java/org/ballerinalang/toml/ManifestProcessorTest.java", "diffHunk": "@@ -149,21 +184,53 @@ public void testSingleEmptyDependencies() throws TomlException {\n         Assert.assertEquals(manifest.getDependencies().get(0).getModuleID(), \"string-utils\");\n     }\n \n-    @Test(description = \"Multiple dependencies added to the dependencies section has an effect\")\n-    public void testMultipleDependencies() throws TomlException, IOException {\n-        Path tmpDir = Files.createTempDirectory(\"manifest-test-\");\n-        Path baloPath = tmpDir.resolve(\"string_utils.balo\");\n-        Files.createFile(baloPath);\n-        \n-        Manifest manifest = ManifestProcessor.parseTomlContentFromString(this.validProjectBlock + \"[dependencies] \\n \" +\n-                \"string-utils = { path = \\\"\" + baloPath + \"\\\", version = \\\"1.0.5\\\" } \\n \" +\n-                \"jquery = { version = \\\"2.2.3\\\" } \\n\");\n-        Assert.assertEquals(manifest.getDependencies().get(0).getModuleID(), \"string-utils\");\n-        Assert.assertEquals(manifest.getDependencies().get(0).getMetadata().getVersion(), \"1.0.5\");\n-        Assert.assertEquals(manifest.getDependencies().get(1).getModuleID(), \"jquery\");\n-        Assert.assertEquals(manifest.getDependencies().get(1).getMetadata().getVersion(), \"2.2.3\");\n-    \n-        Files.delete(baloPath);\n-        Files.delete(tmpDir);\n+    @Test(description = \"Multiple dependencies added to the dependencies section has an effect except on Windows\")\n+    public void testMultipleDependenciesLinux() throws TomlException, IOException {\n+        if (OS.contains(\"win\")) {\n+            flag = false;\n+        }\n+        if (flag) {\n+            Path tmpDir = Files.createTempDirectory(\"manifest-test-\");\n+            Path baloPath = tmpDir.resolve(\"string_utils.balo\");\n+            Files.createFile(baloPath);\n+\n+            String tomlData = this.validProjectBlock + \"[dependencies] \\n string-utils = { path = \\\"\"\n+                    + baloPath + \"\\\", version = \\\"1.0.5\\\" } \\n \"\n+                    + \"jquery = { version = \\\"2.2.3\\\" } \\n\";\n+\n+            Manifest manifest = ManifestProcessor.parseTomlContentFromString(tomlData);\n+            Assert.assertEquals(manifest.getDependencies().get(0).getModuleID(), \"string-utils\");\n+            Assert.assertEquals(manifest.getDependencies().get(0).getMetadata().getVersion(), \"1.0.5\");\n+            Assert.assertEquals(manifest.getDependencies().get(1).getModuleID(), \"jquery\");\n+            Assert.assertEquals(manifest.getDependencies().get(1).getMetadata().getVersion(), \"2.2.3\");\n+\n+            Files.delete(baloPath);\n+            Files.delete(tmpDir);\n+        }\n+    }\n+\n+    @Test(description = \"Multiple dependencies added to the dependencies section has an effect only on Windows\")\n+    public void testMultipleDependenciesWindows() throws TomlException, IOException {\n+        if (!OS.contains(\"win\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035fcef0e1df7f571aa0d294099151aca14db863"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTMxMTY3OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/writer/BaloFileWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMzoyOToyN1rOGPyATA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzo1OTo1MFrOGP2HDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIwMTEwMA==", "bodyText": "Can we move this logic in to the model instead of having it at the balo writer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22605#discussion_r419201100", "createdAt": "2020-05-04T03:29:27Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/writer/BaloFileWriter.java", "diffHunk": "@@ -310,6 +312,11 @@ private void addPlatformLibs(Path root, Path projectDirectory, String moduleName\n                     .map(lib -> Paths.get(lib.getPath())).collect(Collectors.toList());\n \n             for (Path lib : libs) {\n+                if (os.contains(\"win\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63731e9b000c49b609418a2210db1c5dbd107aae"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2ODM2Ng==", "bodyText": "yes, moved to model", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22605#discussion_r419268366", "createdAt": "2020-05-04T07:59:50Z", "author": {"login": "parkavi11"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/writer/BaloFileWriter.java", "diffHunk": "@@ -310,6 +312,11 @@ private void addPlatformLibs(Path root, Path projectDirectory, String moduleName\n                     .map(lib -> Paths.get(lib.getPath())).collect(Collectors.toList());\n \n             for (Path lib : libs) {\n+                if (os.contains(\"win\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIwMTEwMA=="}, "originalCommit": {"oid": "63731e9b000c49b609418a2210db1c5dbd107aae"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4385, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}