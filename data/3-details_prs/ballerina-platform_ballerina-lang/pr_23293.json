{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjI2OTUw", "number": 23293, "title": "Enable builtinoperations, typeof and unary unit tests", "bodyText": "Purpose\n$subject\nFixes #23292\nFixes #23328\nFixes #23351\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-15T14:32:13Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293", "merged": true, "mergeCommit": {"oid": "55b84b36fbbf6828549c84eee808426f3be3d695"}, "closed": true, "closedAt": "2020-05-19T13:12:30Z", "author": {"login": "KavinduZoysa"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciOBzigFqTQxMzE3Nzc0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABci0QQyAFqTQxNDQyOTQ4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTc3NzQ2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#pullrequestreview-413177746", "createdAt": "2020-05-17T16:25:00Z", "commit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjoyNTowMVrOGWiBUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjozOToxMVrOGWiGsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI0OQ==", "bodyText": "Can't use a while loop?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279249", "createdAt": "2020-05-17T16:25:01Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {\n+                sizes.add(UNSEALED_ARRAY_INDICATOR);\n+            } else {\n+                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n+                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                    sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n+                } else {\n+                    // TODO : should handle the const-reference-expr\n+                }\n+            }\n+            if (indexedExpressionNode.containerExpression().kind() != SyntaxKind.INDEXED_EXPRESSION) {\n+                break;\n+            }\n+            indexedExpressionNode = (IndexedExpressionNode) indexedExpressionNode.containerExpression();\n+            dimensions++;\n+        } while (true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTI5Mw==", "bodyText": "indexedExpressionNode.keyExpression() is called multiple times. extract it to a variable", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279293", "createdAt": "2020-05-17T16:25:26Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTQ4Mw==", "bodyText": "else, throw an exception. Then its easy to debug, if something goes wrong.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279483", "createdAt": "2020-05-17T16:27:34Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1045,6 +1231,22 @@ private void populateFuncSignature(BLangFunction bLFunction, FunctionSignatureNo\n         }\n     }\n \n+    private BLangXMLQName createStartEndXMLTag(XMLNameNode xmlNameNode, DiagnosticPos pos) {\n+        BLangXMLQName xmlName = (BLangXMLQName) TreeBuilder.createXMLQNameNode();\n+        if (xmlNameNode.kind() == SyntaxKind.XML_QUALIFIED_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).name()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).name().toString());\n+            xmlName.prefix = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).prefix()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).prefix().toString());\n+        } else if (xmlNameNode.kind() == SyntaxKind.XML_SIMPLE_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLSimpleNameNode) xmlNameNode).name()),\n+                    ((XMLSimpleNameNode) xmlNameNode).name().text());\n+            xmlName.prefix = createIdentifier(null, \"\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTUzNg==", "bodyText": "Consider using a switch-case", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279536", "createdAt": "2020-05-17T16:27:59Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1045,6 +1231,22 @@ private void populateFuncSignature(BLangFunction bLFunction, FunctionSignatureNo\n         }\n     }\n \n+    private BLangXMLQName createStartEndXMLTag(XMLNameNode xmlNameNode, DiagnosticPos pos) {\n+        BLangXMLQName xmlName = (BLangXMLQName) TreeBuilder.createXMLQNameNode();\n+        if (xmlNameNode.kind() == SyntaxKind.XML_QUALIFIED_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).name()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).name().toString());\n+            xmlName.prefix = createIdentifier(getPosition(((XMLQualifiedNameNode) xmlNameNode).prefix()),\n+                    ((XMLQualifiedNameNode) xmlNameNode).prefix().toString());\n+        } else if (xmlNameNode.kind() == SyntaxKind.XML_SIMPLE_NAME) {\n+            xmlName.localname = createIdentifier(getPosition(((XMLSimpleNameNode) xmlNameNode).name()),\n+                    ((XMLSimpleNameNode) xmlNameNode).name().text());\n+            xmlName.prefix = createIdentifier(null, \"\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTQ4Mw=="}, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTk2NA==", "bodyText": "Good to break this in to two statements, for readability.\nThere are several other places as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426279964", "createdAt": "2020-05-17T16:32:19Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1014,6 +1085,121 @@ public BLangNode transform(SimpleNameReferenceNode simpleNameRefNode) {\n         return createTypeNode(simpleNameRefNode.name());\n     }\n \n+    @Override\n+    public BLangNode transform(TupleTypeDescriptorNode typeDescriptorNode) {\n+        BLangTupleTypeNode tupleTypeNode = (BLangTupleTypeNode) TreeBuilder.createTupleTypeNode();\n+        if (typeDescriptorNode.restTypeDesc() != null) {\n+            tupleTypeNode.restParamType = createTypeNode(typeDescriptorNode.restTypeDesc());\n+        }\n+        for (int i = 0; i < typeDescriptorNode.memberTypeDesc().size(); i++) {\n+            if (typeDescriptorNode.memberTypeDesc().get(i).kind() == SyntaxKind.COMMA_TOKEN) {\n+                continue;\n+            }\n+            tupleTypeNode.memberTypeNodes.add(createTypeNode(typeDescriptorNode.memberTypeDesc().get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDI2MQ==", "bodyText": "Looks like this methods creates a ArrayType. 'BLangArray' is not intuitive.\nCan we simply say createBLangArrayType?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426280261", "createdAt": "2020-05-17T16:35:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MDYyNw==", "bodyText": "consider extracting this to a variable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#discussion_r426280627", "createdAt": "2020-05-17T16:39:11Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1274,11 +1476,51 @@ private BLangType createTypeNode(Node type) {\n             bLUserDefinedType.pos = getPosition(type);\n \n             return bLUserDefinedType;\n+        } else if (type.kind() == SyntaxKind.INDEXED_EXPRESSION) {\n+            return createBLangArrayFromIndexedExpressionNode((IndexedExpressionNode) type);\n         } else {\n             return (BLangType) type.apply(this);\n         }\n     }\n \n+    private BLangArrayType createBLangArrayFromIndexedExpressionNode(IndexedExpressionNode indexedExpressionNode) {\n+        int dimensions = 1;\n+        List<Integer> sizes = new ArrayList<>();\n+        do {\n+            if (indexedExpressionNode.keyExpression() == null) {\n+                sizes.add(UNSEALED_ARRAY_INDICATOR);\n+            } else {\n+                if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.DECIMAL_INTEGER_LITERAL) {\n+                    sizes.add(Integer.parseInt(indexedExpressionNode.keyExpression().toString()));\n+                } else if (indexedExpressionNode.keyExpression().kind() == SyntaxKind.ASTERISK_TOKEN) {\n+                    sizes.add(OPEN_SEALED_ARRAY_INDICATOR);\n+                } else {\n+                    // TODO : should handle the const-reference-expr\n+                }\n+            }\n+            if (indexedExpressionNode.containerExpression().kind() != SyntaxKind.INDEXED_EXPRESSION) {\n+                break;\n+            }\n+            indexedExpressionNode = (IndexedExpressionNode) indexedExpressionNode.containerExpression();\n+            dimensions++;\n+        } while (true);\n+\n+        return createArrayTypeNode(\n+                createTypeNode(indexedExpressionNode.containerExpression()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba24a0ea52e786b0df64a07775ef39bda7990de"}, "originalPosition": 346}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a25ea0b6735bacf23db44ef05f13252ff865098", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a25ea0b6735bacf23db44ef05f13252ff865098", "committedDate": "2020-05-18T06:11:26Z", "message": "Update parser tests"}, "afterCommit": {"oid": "6434f672d134e918e61f95049b6151c957ed9f13", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6434f672d134e918e61f95049b6151c957ed9f13", "committedDate": "2020-05-18T06:33:32Z", "message": "Update parser tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6434f672d134e918e61f95049b6151c957ed9f13", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6434f672d134e918e61f95049b6151c957ed9f13", "committedDate": "2020-05-18T06:33:32Z", "message": "Update parser tests"}, "afterCommit": {"oid": "b900a541f3158520a8f76b71e3b47a1c970db8b9", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b900a541f3158520a8f76b71e3b47a1c970db8b9", "committedDate": "2020-05-18T08:00:06Z", "message": "Update parser tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b900a541f3158520a8f76b71e3b47a1c970db8b9", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b900a541f3158520a8f76b71e3b47a1c970db8b9", "committedDate": "2020-05-18T08:00:06Z", "message": "Update parser tests"}, "afterCommit": {"oid": "713ee0a31718394b54c25688f50c821879c17382", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/713ee0a31718394b54c25688f50c821879c17382", "committedDate": "2020-05-19T06:35:07Z", "message": "Enable unaryoperations and typeof tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "713ee0a31718394b54c25688f50c821879c17382", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/713ee0a31718394b54c25688f50c821879c17382", "committedDate": "2020-05-19T06:35:07Z", "message": "Enable unaryoperations and typeof tests"}, "afterCommit": {"oid": "520d6caef07b9ec7e8896dcd108b4c20c954a17b", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/520d6caef07b9ec7e8896dcd108b4c20c954a17b", "committedDate": "2020-05-19T06:40:54Z", "message": "Enable unaryoperations and typeof tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "520d6caef07b9ec7e8896dcd108b4c20c954a17b", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/520d6caef07b9ec7e8896dcd108b4c20c954a17b", "committedDate": "2020-05-19T06:40:54Z", "message": "Enable unaryoperations and typeof tests"}, "afterCommit": {"oid": "3f42ad62ebf25c0e70b496e1871b3a540b0d70b9", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f42ad62ebf25c0e70b496e1871b3a540b0d70b9", "committedDate": "2020-05-19T07:23:51Z", "message": "Enable unaryoperations and typeof tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d67f6b15fa97341998e0234630ad239ebc3a659b", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d67f6b15fa97341998e0234630ad239ebc3a659b", "committedDate": "2020-05-19T09:15:48Z", "message": "Enable builtinOperation tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7f1e97901ea6c8999073b56da5bd134e3cf1cde", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7f1e97901ea6c8999073b56da5bd134e3cf1cde", "committedDate": "2020-05-19T09:21:41Z", "message": "Add more transformers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a338e0e71a2253aea17d96e8ea5129e132a4184", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a338e0e71a2253aea17d96e8ea5129e132a4184", "committedDate": "2020-05-19T09:25:36Z", "message": "Update parser tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c18d620eb43ccc5628de90223603154455a9b50f", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c18d620eb43ccc5628de90223603154455a9b50f", "committedDate": "2020-05-19T09:35:11Z", "message": "Enable unaryoperations and typeof tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f42ad62ebf25c0e70b496e1871b3a540b0d70b9", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f42ad62ebf25c0e70b496e1871b3a540b0d70b9", "committedDate": "2020-05-19T07:23:51Z", "message": "Enable unaryoperations and typeof tests"}, "afterCommit": {"oid": "c18d620eb43ccc5628de90223603154455a9b50f", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c18d620eb43ccc5628de90223603154455a9b50f", "committedDate": "2020-05-19T09:35:11Z", "message": "Enable unaryoperations and typeof tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NDI5NDg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23293#pullrequestreview-414429489", "createdAt": "2020-05-19T13:12:20Z", "commit": {"oid": "c18d620eb43ccc5628de90223603154455a9b50f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3323, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}