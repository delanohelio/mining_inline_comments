{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTg1NDg5", "number": 22188, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowMDoyNVrODsDcYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1NTowM1rODtAo-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTIwMzU1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowMDoyNVrOF8wDyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxMzo0M1rOF8y92w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0NjI4Mw==", "bodyText": "Can we remove this from the code after fixing it in every place?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r399246283", "createdAt": "2020-03-27T13:00:25Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -36,7 +36,9 @@\n     REDECLARED_BUILTIN_SYMBOL(\"redeclared.builtin.symbol\"),\n     UNDEFINED_SYMBOL(\"undefined.symbol\"),\n     UNDEFINED_FUNCTION(\"undefined.function\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5MzkxNQ==", "bodyText": "We cannot remove that one because it is still used to identify the function invocations as shown below.\npublic function foo() returns string {\n    return \"\";\n}\n\npublic function main() {\n    Foo(); // Compile error : undefined function 'Foo'\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r399293915", "createdAt": "2020-03-27T14:13:43Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -36,7 +36,9 @@\n     REDECLARED_BUILTIN_SYMBOL(\"redeclared.builtin.symbol\"),\n     UNDEFINED_SYMBOL(\"undefined.symbol\"),\n     UNDEFINED_FUNCTION(\"undefined.function\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0NjI4Mw=="}, "originalCommit": {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDY1MTUzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/UndefinedFunctionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1MjoxNFrOF9ftYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDo1MDo1OVrOF-FPBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNjk3Nw==", "bodyText": "Incorrect version.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400026977", "createdAt": "2020-03-30T08:52:14Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/UndefinedFunctionsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * TestCases for Arrow Expressions used in Iterable Functions.\n+ *\n+ * @since 1.2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0MTc5OA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400641798", "createdAt": "2020-03-31T04:50:59Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/UndefinedFunctionsTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * TestCases for Arrow Expressions used in Iterable Functions.\n+ *\n+ * @since 1.2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNjk3Nw=="}, "originalCommit": {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDY1Mjg5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/undefined-functions.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1MjozNlrOF9fuNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDo1MToyNVrOF-FPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzE5MA==", "bodyText": "Extra new lines.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400027190", "createdAt": "2020-03-30T08:52:36Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/undefined-functions.bal", "diffHunk": "@@ -0,0 +1,30 @@\n+string str = \"This is a test string\";\n+\n+int index = str.index(\"T\"); // Compile error\n+string s = str.add(\"extra string\"); // Compiler error\n+\n+function testFunction1() {\n+    [int, string, float, map<string>] tup = [10, \"Foo\", 12.34, {\"k\":\"Bar\"}];\n+    int result = 0;\n+    tup.forEach(function (string|int|map<string>|float x) {\n+        if (x is int) {\n+            result += 10;\n+        } else if (x is string) {\n+            result += x.length();\n+        } else if (x is float) {\n+            result += <int>x;\n+        } else {\n+            result += x[\"k\"].length(); // Compile error\n+        }\n+    });\n+\n+    map<string> addrMap = {\n+            line1: \"No. 20\",\n+            line2: \"Palm Grove\",\n+            city: \"Colombo 03\"\n+    };\n+    addrMap.delete(\"city\"); // Compile error\n+}\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0MTg4Ng==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400641886", "createdAt": "2020-03-31T04:51:25Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/undefined-functions.bal", "diffHunk": "@@ -0,0 +1,30 @@\n+string str = \"This is a test string\";\n+\n+int index = str.index(\"T\"); // Compile error\n+string s = str.add(\"extra string\"); // Compiler error\n+\n+function testFunction1() {\n+    [int, string, float, map<string>] tup = [10, \"Foo\", 12.34, {\"k\":\"Bar\"}];\n+    int result = 0;\n+    tup.forEach(function (string|int|map<string>|float x) {\n+        if (x is int) {\n+            result += 10;\n+        } else if (x is string) {\n+            result += x.length();\n+        } else if (x is float) {\n+            result += <int>x;\n+        } else {\n+            result += x[\"k\"].length(); // Compile error\n+        }\n+    });\n+\n+    map<string> addrMap = {\n+            line1: \"No. 20\",\n+            line2: \"Palm Grove\",\n+            city: \"Colombo 03\"\n+    };\n+    addrMap.delete(\"city\"); // Compile error\n+}\n+\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzE5MA=="}, "originalCommit": {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDcxMzY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowNzo0MlrOF9gTSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDo1MTo0N1rOF-FP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNjY4Mg==", "bodyText": "Do we need this? Shouldn't we use type (L1774) instead of invocationExprType in the places it has been used?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400036682", "createdAt": "2020-03-30T09:07:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1764,18 +1761,28 @@ public void visit(BLangLetExpression letExpression) {\n     private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         boolean langLibMethodExists = checkLangLibMethodInvocationExpr(iExpr, varRefType);\n         if (!langLibMethodExists) {\n-            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n+            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n         }\n     }\n \n     private boolean checkFieldFunctionPointer(BLangInvocation iExpr) {\n-        BType type = checkExpr(iExpr.expr, this.env);\n+        BLangExpression invocationExpr = iExpr.expr;\n+        BType invocationExprType = invocationExpr.type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0MjAwMg==", "bodyText": "Correct. Changed it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400642002", "createdAt": "2020-03-31T04:51:47Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1764,18 +1761,28 @@ public void visit(BLangLetExpression letExpression) {\n     private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         boolean langLibMethodExists = checkLangLibMethodInvocationExpr(iExpr, varRefType);\n         if (!langLibMethodExists) {\n-            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n+            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n         }\n     }\n \n     private boolean checkFieldFunctionPointer(BLangInvocation iExpr) {\n-        BType type = checkExpr(iExpr.expr, this.env);\n+        BLangExpression invocationExpr = iExpr.expr;\n+        BType invocationExprType = invocationExpr.type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNjY4Mg=="}, "originalCommit": {"oid": "eccb79dff0738307176848dd97d98d56cf15c9cc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTIzMDAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1NTowM1rOF-LwZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozMDoyOVrOF-NGhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0ODY0Ng==", "bodyText": "Instead of using this.env, shall we pass the relevant env to the function?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400748646", "createdAt": "2020-03-31T08:55:03Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1764,18 +1761,26 @@ public void visit(BLangLetExpression letExpression) {\n     private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         boolean langLibMethodExists = checkLangLibMethodInvocationExpr(iExpr, varRefType);\n         if (!langLibMethodExists) {\n-            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n+            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n         }\n     }\n \n     private boolean checkFieldFunctionPointer(BLangInvocation iExpr) {\n-        BType type = checkExpr(iExpr.expr, this.env);\n+        BLangExpression invocationExpr = iExpr.expr;\n+        BLangIdentifier invocationIdentifier = iExpr.name;\n+\n+        BType type = checkExpr(invocationExpr, this.env);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ff095ce7fa4d53c9d68572fc50697a27722a62"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MDY5Mg==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22188#discussion_r400770692", "createdAt": "2020-03-31T09:30:29Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1764,18 +1761,26 @@ public void visit(BLangLetExpression letExpression) {\n     private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         boolean langLibMethodExists = checkLangLibMethodInvocationExpr(iExpr, varRefType);\n         if (!langLibMethodExists) {\n-            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n+            dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n         }\n     }\n \n     private boolean checkFieldFunctionPointer(BLangInvocation iExpr) {\n-        BType type = checkExpr(iExpr.expr, this.env);\n+        BLangExpression invocationExpr = iExpr.expr;\n+        BLangIdentifier invocationIdentifier = iExpr.name;\n+\n+        BType type = checkExpr(invocationExpr, this.env);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0ODY0Ng=="}, "originalCommit": {"oid": "c4ff095ce7fa4d53c9d68572fc50697a27722a62"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4549, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}