{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MTI1Njcw", "number": 25539, "title": "Implementing an encoding scheme for quoted identifiers", "bodyText": "Purpose\n\nThis is to implement an encoding scheme to modify the jvm reserved characters used in the user defines identifiers (quoted identifiers)\n\nFixes #19478 also fixes #18158\nApproach\n\nThe following is the structure of the encoding\n\nUser defined identifier  ->  Encoded identifier\n---------------------------------------------------------------\n'temp_\\u{2324}_var  ->  temp_\u2324_var\n'variable\\$\\(_test_$0036_\\#\\%_$$init$  ->  variable$0036(_test_$#0036_#%_$$init$\n //note that \"$$init$\" part cannot be defined by user, it indicates a generated  post-fix. \nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-08-31T07:42:21Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539", "merged": true, "mergeCommit": {"oid": "68ee6b5f2cb734a393717ad1333246f13743a214"}, "closed": true, "closedAt": "2020-09-16T15:02:46Z", "author": {"login": "HindujaB"}, "timelineItems": {"totalCount": 58, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFhZYlgBqjM3Mjg3NDE0MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJduHJAFqTQ4OTcxNzk1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a0002fcae8a34c36813b87618f6d389fc946c9b", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a0002fcae8a34c36813b87618f6d389fc946c9b", "committedDate": "2020-08-31T07:12:38Z", "message": "Implement encoding scheme for identifiers"}, "afterCommit": {"oid": "6f1f3e4bea25214ddf3465b4cbbd9c1ab7c540ac", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f1f3e4bea25214ddf3465b4cbbd9c1ab7c540ac", "committedDate": "2020-09-04T08:05:05Z", "message": "Implement support for member access"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55f93a66e4237ddc85823d81a3b270066867ae19", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/55f93a66e4237ddc85823d81a3b270066867ae19", "committedDate": "2020-09-04T20:13:48Z", "message": "Merge branch 'master' into fix-#18720"}, "afterCommit": {"oid": "c0071260fb65c37fef50a740d59d4846f675a1e8", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0071260fb65c37fef50a740d59d4846f675a1e8", "committedDate": "2020-09-05T14:20:07Z", "message": "Fix unit test failure"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0071260fb65c37fef50a740d59d4846f675a1e8", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0071260fb65c37fef50a740d59d4846f675a1e8", "committedDate": "2020-09-05T14:20:07Z", "message": "Fix unit test failure"}, "afterCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1a824916017ccd21adc4e6028b5c2795860ad76", "committedDate": "2020-09-07T06:54:35Z", "message": "Fix testerina failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODI4MTEw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-483828110", "createdAt": "2020-09-08T06:28:46Z", "commit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjoyODo0NlrOHOOdaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjoyODo0NlrOHOOdaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3OTAxOQ==", "bodyText": "extra new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484679019", "createdAt": "2020-09-08T06:28:46Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +248,79 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODU1Mjcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-483855273", "createdAt": "2020-09-08T07:15:42Z", "commit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNTo0MlrOHOPxUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNTo0MlrOHOPxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwMDQ5Nw==", "bodyText": "move $_init to a constant", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484700497", "createdAt": "2020-09-08T07:15:42Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/services/JVMEmbeddedExecutor.java", "diffHunk": "@@ -96,7 +96,7 @@ private void runStartOnSchedule(String moduleName, String moduleVersion, Schedul\n             throws RuntimeException {\n         try {\n             Class<?> initClazz = Class.forName(\"ballerina.\" + moduleName + \".\" +\n-                                                       moduleVersion.replace(\".\", \"_\") + \".___init\");\n+                                                       moduleVersion.replace(\".\", \"_\") + \".$_init\");\n             final Method initMethod = initClazz.getDeclaredMethod(\"$moduleStart\", Strand.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODY4MjI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-483868227", "createdAt": "2020-09-08T07:34:17Z", "commit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzozNDoxN1rOHOQZ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzozNDoxN1rOHOQZ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxMDkxMQ==", "bodyText": "write the logic using StringBuilder", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484710911", "createdAt": "2020-09-08T07:34:17Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +110,20 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    public static String decodeTypeName(String typeName) {\n+        if (typeName == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODc2NTk0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-483876594", "createdAt": "2020-09-08T07:46:02Z", "commit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzo0NjowMlrOHOQ0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzo0NjowMlrOHOQ0Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNzU4Mg==", "bodyText": "Analyse the reason of replacing (readonly  type -at master)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484717582", "createdAt": "2020-09-08T07:46:02Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -131,20 +132,24 @@ static void createFunctionPointer(MethodVisitor mv, String className, String lam\n     }\n \n     /**\n-     * Cleanup type name by replacing '$' with '_'.\n+     * Cleanup type name by replacing '/ ' with '_' for readonly types.\n      *\n      * @param name name to be replaced and cleaned\n      * @return cleaned name\n      */\n-    static String cleanupTypeName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODc4MzM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-483878335", "createdAt": "2020-09-08T07:48:31Z", "commit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzo0ODozMVrOHOQ5TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzo0ODozMVrOHOQ5TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxODkyNQ==", "bodyText": "rename rewriteCallterminator()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484718925", "createdAt": "2020-09-08T07:48:31Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -131,20 +132,24 @@ static void createFunctionPointer(MethodVisitor mv, String className, String lam\n     }\n \n     /**\n-     * Cleanup type name by replacing '$' with '_'.\n+     * Cleanup type name by replacing '/ ' with '_' for readonly types.\n      *\n      * @param name name to be replaced and cleaned\n      * @return cleaned name\n      */\n-    static String cleanupTypeName(String name) {\n-        return name.replaceAll(\"[/$ .]\", \"_\");\n+    static String cleanupReadOnlyTypeName(String name) {\n+        return name.contains(\"readonly\") ? name.replaceAll(\"[/ .]\", \"_\") : name;\n     }\n \n     static String cleanupPathSeparators(String name) {\n         name = cleanupBalExt(name);\n         return name.replace(WINDOWS_PATH_SEPERATOR, JAVA_PACKAGE_SEPERATOR);\n     }\n \n+    static String rewriteInsName(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1a824916017ccd21adc4e6028b5c2795860ad76", "committedDate": "2020-09-07T06:54:35Z", "message": "Fix testerina failures"}, "afterCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e8b4366de6012ac5077f968983eb78755dd4b53", "committedDate": "2020-09-08T21:04:02Z", "message": "Fix encode implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NjkwOTIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-484690921", "createdAt": "2020-09-09T06:18:28Z", "commit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjoxODoyOFrOHO4O7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjoxODoyOFrOHO4O7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2MzQzOQ==", "bodyText": "add todo saying remove after adding $ to all generated names in front-end\ncreate an issue and link it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485363439", "createdAt": "2020-09-09T06:18:28Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -257,7 +262,8 @@ static String getStrandMetadataVarName(String parentFunction) {\n     }\n \n     public static String cleanupFunctionName(String functionName) {\n-        return functionName.replaceAll(\"[\\\\.:/<>]\", \"_\");\n+        return functionName.matches(\"(.*)[\\\\.:/<>](.*)\") ? \"$\" + functionName.replaceAll(\"[\\\\.:/<>]\", \"_\") :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzEzMDUw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-484713050", "createdAt": "2020-09-09T06:59:52Z", "commit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo1OTo1MlrOHO5XNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo1OTo1MlrOHO5XNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MTk0MA==", "bodyText": "check for issues with read-only identifiers with special characters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485381940", "createdAt": "2020-09-09T06:59:52Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -1513,7 +1513,7 @@ private static void loadUserDefinedType(MethodVisitor mv, BType bType) {\n      */\n     private static String getTypeFieldName(String typeName) {\n \n-        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupTypeName(typeName));\n+        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupReadOnlyTypeName(typeName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzIwMjYx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-484720261", "createdAt": "2020-09-09T07:11:56Z", "commit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxMTo1N1rOHO5s5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxMTo1N1rOHO5s5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NzQ5NQ==", "bodyText": "check if we need encoding for these identifiers if we don't use the encoded identifiers", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485387495", "createdAt": "2020-09-09T07:11:57Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -1287,7 +1290,7 @@ private void createRecordGetKeysMethod(ClassWriter cw, Map<String, BField> field\n             Label ifNotPresent = new Label();\n \n             // If its an optional field, generate if-condition to check the presense of the field.\n-            String fieldName = optionalField.name.value;\n+            String fieldName = IdentifierEncoder.decodeIdentifiers(optionalField.name.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzQ5OTI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-484749926", "createdAt": "2020-09-09T07:54:19Z", "commit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1NDoxOVrOHO7Jng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1NDoxOVrOHO7Jng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxMTIzMA==", "bodyText": "change the other part into else {...}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485411230", "createdAt": "2020-09-09T07:54:19Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+                continue;\n+            }\n+            sb.append(identifier.charAt(index));\n+            index++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzUzODUx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-484753851", "createdAt": "2020-09-09T07:59:18Z", "commit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1OToxOFrOHO7VTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1OToxOFrOHO7VTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxNDIyMg==", "bodyText": "change logic where check $#xxxx inside loops", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485414222", "createdAt": "2020-09-09T07:59:18Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+                continue;\n+            }\n+            sb.append(identifier.charAt(index));\n+            index++;\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {\n+        if (encodedName == null) {\n+            return encodedName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < encodedName.length()) {\n+            if (encodedName.charAt(index) == '$' && index + 4 < encodedName.length()) {\n+                String unicodePoint = encodedName.substring(index + 1, index + 5);\n+                if (containsOnlyDigits(unicodePoint)) {\n+                    sb.append((char) Integer.parseInt(unicodePoint));\n+                    index += 5;\n+                    continue;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzY0Njg4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-484764688", "createdAt": "2020-09-09T08:13:27Z", "commit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxMzoyN1rOHO71rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxMzoyN1rOHO71rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMjUxMQ==", "bodyText": "get line 94 inside else", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485422511", "createdAt": "2020-09-09T08:13:27Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+                continue;\n+            }\n+            sb.append(identifier.charAt(index));\n+            index++;\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {\n+        if (encodedName == null) {\n+            return encodedName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < encodedName.length()) {\n+            if (encodedName.charAt(index) == '$' && index + 4 < encodedName.length()) {\n+                String unicodePoint = encodedName.substring(index + 1, index + 5);\n+                if (containsOnlyDigits(unicodePoint)) {\n+                    sb.append((char) Integer.parseInt(unicodePoint));\n+                    index += 5;\n+                    continue;\n+                }\n+            }\n+            sb.append(encodedName.charAt(index));\n+            index++;\n+        }\n+        return sb.toString().replaceAll(\"(\\\\$#)(\\\\d{4})\", \"\\\\$$2\");\n+    }\n+\n+    private static boolean containsOnlyDigits(String digitString) {\n+        for (int i = 0; i < digitString.length(); i++) {\n+            if (!Character.isDigit(digitString.charAt(i))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static String escapeSpecialCharacters(String identifier) {\n+        String specialCharSet = \"([$&+,:;=\\\\?@#|/' \\\\[\\\\}\\\\]<\\\\>.\\\"^*{}~`()%!-])\";\n+        return identifier.replaceAll(\"(?<!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*\" + specialCharSet, \"\\\\\\\\$1\");\n+    }\n+\n+    public static String encodeIdentifier(String identifier) {\n+        if (identifier == null) {\n+            return identifier;\n+        }\n+        identifier = identifier.replaceAll(ENCODING_PATTERN, \"\\\\$#$1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53"}, "originalPosition": 94}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e8b4366de6012ac5077f968983eb78755dd4b53", "committedDate": "2020-09-08T21:04:02Z", "message": "Fix encode implementation"}, "afterCommit": {"oid": "4b29217b1f468908b0e3c45da39290cad7094280", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b29217b1f468908b0e3c45da39290cad7094280", "committedDate": "2020-09-11T08:37:29Z", "message": "Fix encode implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b29217b1f468908b0e3c45da39290cad7094280", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b29217b1f468908b0e3c45da39290cad7094280", "committedDate": "2020-09-11T08:37:29Z", "message": "Fix encode implementation"}, "afterCommit": {"oid": "7b9c230698bd4eb127f8908d5c605f79e32630f0", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b9c230698bd4eb127f8908d5c605f79e32630f0", "committedDate": "2020-09-11T13:36:11Z", "message": "Fix immutable type name conflict"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b9c230698bd4eb127f8908d5c605f79e32630f0", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b9c230698bd4eb127f8908d5c605f79e32630f0", "committedDate": "2020-09-11T13:36:11Z", "message": "Fix immutable type name conflict"}, "afterCommit": {"oid": "898554a4f3be8d1c874011d5f60bec743c76bd96", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/898554a4f3be8d1c874011d5f60bec743c76bd96", "committedDate": "2020-09-12T12:16:14Z", "message": "Clean up repeating tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a74eda0ca2fb9680ce9954719ba395d0d359194", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a74eda0ca2fb9680ce9954719ba395d0d359194", "committedDate": "2020-09-12T12:22:11Z", "message": "Clean up integration test"}, "afterCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50272b641bd37d692c733118d70ccc346ea32087", "committedDate": "2020-09-13T04:56:18Z", "message": "Modify ToString() unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzI2OTU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-487726955", "createdAt": "2020-09-14T12:59:25Z", "commit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo1OToyNVrOHRSkaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo1OToyNVrOHRSkaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjA3Mw==", "bodyText": "is this failing with your changes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487892073", "createdAt": "2020-09-14T12:59:25Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/literals/IdentifierLiteralPackageTest.java", "diffHunk": "@@ -32,7 +32,7 @@\n /**\n  * Identifier literal test cases with package.\n  */\n-@Test(groups = { \"disableOnOldParser\" })\n+@Test(groups = { \"disableOnOldParser\", \"brokenOnNewParser\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzI4NDU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-487728457", "createdAt": "2020-09-14T13:01:16Z", "commit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMToxNlrOHRSpSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMToxNlrOHRSpSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzMyMw==", "bodyText": "Lets add a method description of what this method does and why it is needed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487893323", "createdAt": "2020-09-14T13:01:16Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,50 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    public static String decodeTypeName(String typeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzI5MjE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-487729219", "createdAt": "2020-09-14T13:02:09Z", "commit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjoxMFrOHRSrlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjoxMFrOHRSrlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzkwOQ==", "bodyText": "shall we inverse the if ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487893909", "createdAt": "2020-09-14T13:02:10Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +246,78 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+    }\n+\n+    private static void encodeTypeDefIdentifiers(List<BIRTypeDefinition> typeDefs) {\n+        for (BIRTypeDefinition typeDefinition : typeDefs) {\n+            typeDefinition.name.value = encodeIdentifier(typeDefinition.name.value);\n+            encodeFunctionIdentifiers(typeDefinition.attachedFuncs);\n+            BType bType = typeDefinition.type;\n+            if (bType.tag == TypeTags.OBJECT) {\n+                BObjectType objectType = (BObjectType) bType;\n+                BObjectTypeSymbol objectTypeSymbol = (BObjectTypeSymbol) bType.tsymbol;\n+                if (objectTypeSymbol.attachedFuncs != null) {\n+                    encodeAttachedFunctionIdentifiers(objectTypeSymbol.attachedFuncs);\n+                }\n+                for (BField field : objectType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+            if (bType.tag == TypeTags.RECORD) {\n+                BRecordType recordType = (BRecordType) bType;\n+                for (BField field : recordType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void encodeFunctionIdentifiers(List<BIRFunction> functions) {\n+        for (BIRFunction function : functions) {\n+            function.name.value = encodeIdentifier(function.name.value);\n+            for (BIRNode.BIRVariableDcl localVar : function.localVars) {\n+                if (localVar.metaVarName != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzI5NDAy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-487729402", "createdAt": "2020-09-14T13:02:22Z", "commit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjoyM1rOHRSsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjoyM1rOHRSsDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDAzMA==", "bodyText": "same here, shall we inverse the if ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487894030", "createdAt": "2020-09-14T13:02:23Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +246,78 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+    }\n+\n+    private static void encodeTypeDefIdentifiers(List<BIRTypeDefinition> typeDefs) {\n+        for (BIRTypeDefinition typeDefinition : typeDefs) {\n+            typeDefinition.name.value = encodeIdentifier(typeDefinition.name.value);\n+            encodeFunctionIdentifiers(typeDefinition.attachedFuncs);\n+            BType bType = typeDefinition.type;\n+            if (bType.tag == TypeTags.OBJECT) {\n+                BObjectType objectType = (BObjectType) bType;\n+                BObjectTypeSymbol objectTypeSymbol = (BObjectTypeSymbol) bType.tsymbol;\n+                if (objectTypeSymbol.attachedFuncs != null) {\n+                    encodeAttachedFunctionIdentifiers(objectTypeSymbol.attachedFuncs);\n+                }\n+                for (BField field : objectType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+            if (bType.tag == TypeTags.RECORD) {\n+                BRecordType recordType = (BRecordType) bType;\n+                for (BField field : recordType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void encodeFunctionIdentifiers(List<BIRFunction> functions) {\n+        for (BIRFunction function : functions) {\n+            function.name.value = encodeIdentifier(function.name.value);\n+            for (BIRNode.BIRVariableDcl localVar : function.localVars) {\n+                if (localVar.metaVarName != null) {\n+                    localVar.metaVarName = encodeIdentifier(localVar.metaVarName);\n+                }\n+            }\n+            for (BIRNode.BIRParameter parameter : function.requiredParams) {\n+                if (parameter.name != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzI5NTA0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-487729504", "createdAt": "2020-09-14T13:02:30Z", "commit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjozMVrOHRSsYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjozMVrOHRSsYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDExMw==", "bodyText": "shall we inverse the if ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487894113", "createdAt": "2020-09-14T13:02:31Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +246,78 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+    }\n+\n+    private static void encodeTypeDefIdentifiers(List<BIRTypeDefinition> typeDefs) {\n+        for (BIRTypeDefinition typeDefinition : typeDefs) {\n+            typeDefinition.name.value = encodeIdentifier(typeDefinition.name.value);\n+            encodeFunctionIdentifiers(typeDefinition.attachedFuncs);\n+            BType bType = typeDefinition.type;\n+            if (bType.tag == TypeTags.OBJECT) {\n+                BObjectType objectType = (BObjectType) bType;\n+                BObjectTypeSymbol objectTypeSymbol = (BObjectTypeSymbol) bType.tsymbol;\n+                if (objectTypeSymbol.attachedFuncs != null) {\n+                    encodeAttachedFunctionIdentifiers(objectTypeSymbol.attachedFuncs);\n+                }\n+                for (BField field : objectType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+            if (bType.tag == TypeTags.RECORD) {\n+                BRecordType recordType = (BRecordType) bType;\n+                for (BField field : recordType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void encodeFunctionIdentifiers(List<BIRFunction> functions) {\n+        for (BIRFunction function : functions) {\n+            function.name.value = encodeIdentifier(function.name.value);\n+            for (BIRNode.BIRVariableDcl localVar : function.localVars) {\n+                if (localVar.metaVarName != null) {\n+                    localVar.metaVarName = encodeIdentifier(localVar.metaVarName);\n+                }\n+            }\n+            for (BIRNode.BIRParameter parameter : function.requiredParams) {\n+                if (parameter.name != null) {\n+                    parameter.name.value = encodeIdentifier(parameter.name.value);\n+                }\n+            }\n+            encodeWorkerName(function);\n+        }\n+    }\n+\n+    private static void encodeWorkerName(BIRFunction function) {\n+        if (function.workerName != null) {\n+            function.workerName.value = encodeIdentifier(function.workerName.value);\n+        }\n+        for (BIRNode.ChannelDetails channel : function.workerChannels) {\n+            channel.name = encodeIdentifier(channel.name);\n+        }\n+    }\n+\n+    private static void encodeAttachedFunctionIdentifiers(List<BAttachedFunction> functions) {\n+        for (BAttachedFunction function : functions) {\n+            function.funcName.value = encodeIdentifier(function.funcName.value);\n+            function.symbol.name.value = encodeIdentifier(function.symbol.name.value);\n+            if (function.symbol.receiverSymbol != null) {\n+                function.symbol.receiverSymbol.name.value = encodeIdentifier(function.symbol.receiverSymbol.name.value);\n+            }\n+        }\n+    }\n+\n+    private static void encodeGlobalVariableIdentifiers(List<BIRNode.BIRGlobalVariableDcl> globalVars) {\n+        for (BIRNode.BIRGlobalVariableDcl globalVar : globalVars) {\n+            if (globalVar != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzI5ODc1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-487729875", "createdAt": "2020-09-14T13:02:57Z", "commit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjo1N1rOHRStfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjo1N1rOHRStfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDM5OQ==", "bodyText": "why this is in a new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487894399", "createdAt": "2020-09-14T13:02:57Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java", "diffHunk": "@@ -1205,7 +1207,8 @@ private void submitToScheduler(BIROperand lhsOp, String moduleClassName, BType a\n     }\n \n     static String getStrandMetadataVarName(String typeName, String parentFunction) {\n-        return STRAND_METADATA_VAR_PREFIX + JvmCodeGenUtil.cleanupTypeName(typeName) + \"$\" + parentFunction + \"$\";\n+        return STRAND_METADATA_VAR_PREFIX + typeName + \"$\" + parentFunction +\n+                \"$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50272b641bd37d692c733118d70ccc346ea32087", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50272b641bd37d692c733118d70ccc346ea32087", "committedDate": "2020-09-13T04:56:18Z", "message": "Modify ToString() unit test"}, "afterCommit": {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/19913f8be55c857a62e54d77bf2dd09d23c5146b", "committedDate": "2020-09-14T14:57:55Z", "message": "Add javadoc comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzIzNDk3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-488323497", "createdAt": "2020-09-15T04:53:40Z", "commit": {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1Mzo0MFrOHRwnxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1Mzo0MFrOHRwnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NDQ1Mg==", "bodyText": "There should be a new line in between the method desc and param desc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r488384452", "createdAt": "2020-09-15T04:53:40Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,55 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    /**\n+     * Decode the encoded Type name for runtime name calls.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzI1MDM4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-488325038", "createdAt": "2020-09-15T04:58:13Z", "commit": {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1ODoxM1rOHRwtMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1ODoxM1rOHRwtMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTg0Mg==", "bodyText": "why testorg/selectively_immutable became testorg_selectively_immutable ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r488385842", "createdAt": "2020-09-15T04:58:13Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/readonly/SelectivelyImmutableTypeBaloTest.java", "diffHunk": "@@ -57,33 +57,33 @@ public void testImmutableTypesNegative() {\n         int index = 0;\n \n         // Assignment and initialization.\n-        validateError(result, index++, \"incompatible types: expected '(testorg/selectively_immutable:1.0\" +\n-                \".0:MixedRecord & readonly)', found 'testorg/selectively_immutable:1.0.0:MixedRecord'\", 20, 38);\n+        validateError(result, index++, \"incompatible types: expected '(testorg_selectively_immutable:\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/19913f8be55c857a62e54d77bf2dd09d23c5146b", "committedDate": "2020-09-14T14:57:55Z", "message": "Add javadoc comment"}, "afterCommit": {"oid": "04e543786733e725441cd3e208af47c2cf3958d3", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04e543786733e725441cd3e208af47c2cf3958d3", "committedDate": "2020-09-15T11:25:21Z", "message": "Fix failing package unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04e543786733e725441cd3e208af47c2cf3958d3", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04e543786733e725441cd3e208af47c2cf3958d3", "committedDate": "2020-09-15T11:25:21Z", "message": "Fix failing package unit test"}, "afterCommit": {"oid": "0b775bc38e32b9067926134cd5f567b351f04227", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b775bc38e32b9067926134cd5f567b351f04227", "committedDate": "2020-09-16T02:33:45Z", "message": "Revert changes in immutabl type naming"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b775bc38e32b9067926134cd5f567b351f04227", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b775bc38e32b9067926134cd5f567b351f04227", "committedDate": "2020-09-16T02:33:45Z", "message": "Revert changes in immutabl type naming"}, "afterCommit": {"oid": "6747d57a3844e296f8bc36b19f611dc8277fa570", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6747d57a3844e296f8bc36b19f611dc8277fa570", "committedDate": "2020-09-16T02:34:55Z", "message": "Revert changes in immutable type naming"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjY1Mjk4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-489265298", "createdAt": "2020-09-16T04:34:58Z", "commit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDozNDo1OVrOHSftZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDo0ODozNVrOHSf6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTk0MA==", "bodyText": "we can bring this if into while loop condition", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489155940", "createdAt": "2020-09-16T04:34:59Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,56 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    /**\n+     * Decode the encoded Type name for runtime name calls.\n+     *\n+     * @param typeName Name of the defined type\n+     * @return decoded name String\n+     */\n+    public static String decodeTypeName(String typeName) {\n+        if (typeName == null) {\n+            return typeName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < typeName.length()) {\n+            if (typeName.charAt(index) == '$' && index + 4 < typeName.length()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODY2MA==", "bodyText": "This appears to be exactly the same code as decodeTypeName. Can't we reuse code? It is very very important to avoid duplication", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489158660", "createdAt": "2020-09-16T04:45:59Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+            } else {\n+                sb.append(identifier.charAt(index));\n+                index++;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTE3OQ==", "bodyText": "If this is a new file shall we change the year?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489159179", "createdAt": "2020-09-16T04:48:18Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-service.bal", "diffHunk": "@@ -1,3 +1,19 @@\n+// Copyright (c) 2017 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTIzNA==", "bodyText": "If this is a new file shall we change the year?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489159234", "createdAt": "2020-09-16T04:48:35Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-success.bal", "diffHunk": "@@ -1,130 +1,299 @@\n+// Copyright (c) 2017 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72845354a5fcd9e6c3e8a6bb8d55df8ad324845e", "committedDate": "2020-09-16T02:56:10Z", "message": "Cleanup code changes"}, "afterCommit": {"oid": "9fe92dac1e22e8bedfb51a6990f067840eab461c", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fe92dac1e22e8bedfb51a6990f067840eab461c", "committedDate": "2020-09-16T06:23:30Z", "message": "Move IdentifierEncoder to ballerina-runtime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a2af6d3f3dc96cedbbe947cc7937fe7fcb6acb9", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a2af6d3f3dc96cedbbe947cc7937fe7fcb6acb9", "committedDate": "2020-09-16T08:35:00Z", "message": "Implement encoding scheme for identifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d644228f2bc50948d2965596e6a765a0a29011c8", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d644228f2bc50948d2965596e6a765a0a29011c8", "committedDate": "2020-09-16T08:36:51Z", "message": "Revert \"Implement encoding scheme for identifiers\"\n\nThis reverts commit 760d227e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f14b19e68d09827caa31c51533da0b58b6ecc895", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f14b19e68d09827caa31c51533da0b58b6ecc895", "committedDate": "2020-09-16T08:38:25Z", "message": "Implement encoding scheme for identifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29e34ff5a7861a63308eddaa59b26a4380739fb6", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29e34ff5a7861a63308eddaa59b26a4380739fb6", "committedDate": "2020-09-16T08:41:15Z", "message": "Implement support for member access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cfd23a42b2b5d010b023a8ca0867c055b540933", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8cfd23a42b2b5d010b023a8ca0867c055b540933", "committedDate": "2020-09-16T08:41:15Z", "message": "Modify ToString method and unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd8f814f8032d53333111ec49db8a3b15e785d4c", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd8f814f8032d53333111ec49db8a3b15e785d4c", "committedDate": "2020-09-16T08:41:15Z", "message": "Fix unit test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75283cb209522147aaa4d3bf2c192afed127596", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e75283cb209522147aaa4d3bf2c192afed127596", "committedDate": "2020-09-16T08:41:15Z", "message": "Fix testerina failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c76e5ccc620d50e288ab926ef03b3735f83109cf", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c76e5ccc620d50e288ab926ef03b3735f83109cf", "committedDate": "2020-09-16T08:41:15Z", "message": "Fix encode implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3be056f14137bf52b6cfc8478a6b50d8cfc92b5", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3be056f14137bf52b6cfc8478a6b50d8cfc92b5", "committedDate": "2020-09-16T08:41:15Z", "message": "Fix immutable type name conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e4973322d845ffd70e58bccbc8ac9e3512403c5", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e4973322d845ffd70e58bccbc8ac9e3512403c5", "committedDate": "2020-09-16T08:41:15Z", "message": "Clean up repeating tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "580e6e1fc62a67e824e2ac9b40cd98834bb960f4", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/580e6e1fc62a67e824e2ac9b40cd98834bb960f4", "committedDate": "2020-09-16T08:41:15Z", "message": "Clean up integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf1731c9017f0a2bcd3c839af71ef424b2dc28c", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5cf1731c9017f0a2bcd3c839af71ef424b2dc28c", "committedDate": "2020-09-16T08:41:15Z", "message": "Modify ToString() unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db9249ff7b8242ec718e23ab9f27ebf6507df49", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0db9249ff7b8242ec718e23ab9f27ebf6507df49", "committedDate": "2020-09-16T08:41:15Z", "message": "Add javadoc comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfd60390f4e8e0c7c86bb3cdec0229cfdcf3765e", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfd60390f4e8e0c7c86bb3cdec0229cfdcf3765e", "committedDate": "2020-09-16T08:41:15Z", "message": "Fix failing package unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ec497e4e0f9090688b605f573d944b3a685833b", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ec497e4e0f9090688b605f573d944b3a685833b", "committedDate": "2020-09-16T08:41:15Z", "message": "Revert changes in immutable type naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26b5088182f50ed984053ad17a3d29ef24643b89", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26b5088182f50ed984053ad17a3d29ef24643b89", "committedDate": "2020-09-16T08:41:15Z", "message": "Cleanup code changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10662cbc385a6e6feee70edbbab0dc5fdf6ac150", "committedDate": "2020-09-16T08:42:49Z", "message": "Move IdentifierEncoder to ballerina-runtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9fe92dac1e22e8bedfb51a6990f067840eab461c", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fe92dac1e22e8bedfb51a6990f067840eab461c", "committedDate": "2020-09-16T06:23:30Z", "message": "Move IdentifierEncoder to ballerina-runtime"}, "afterCommit": {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10662cbc385a6e6feee70edbbab0dc5fdf6ac150", "committedDate": "2020-09-16T08:42:49Z", "message": "Move IdentifierEncoder to ballerina-runtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDU4MjEy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-489458212", "createdAt": "2020-09-16T09:48:15Z", "commit": {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDYzMTk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-489463195", "createdAt": "2020-09-16T09:54:38Z", "commit": {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDYzODE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-489463819", "createdAt": "2020-09-16T09:55:23Z", "commit": {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDg5MzY4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-489489368", "createdAt": "2020-09-16T10:29:14Z", "commit": {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoyOToxNFrOHSqjWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoyOToxNFrOHSqjWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzMzU5NQ==", "bodyText": "String.replaceAll has a performance impact as it is internally compiled like the below\nPattern.compile(regex).matcher(str).replaceAll(repl)\nSo to get some improvement on performance on this encode method, shall we use the below approach ?\nHave the Pattern.compile called once (may be as a class level constant) and then call the match on it within the encode method? That way, it only compiles once\nreferences - https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#replaceAll-java.lang.String-java.lang.String-\nSO - https://stackoverflow.com/questions/1466959/string-replaceall-vs-matcher-replaceall-performance-differences", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489333595", "createdAt": "2020-09-16T10:29:14Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+            } else {\n+                sb.append(identifier.charAt(index));\n+                index++;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String escapeSpecialCharacters(String identifier) {\n+        String specialCharSet = \"([$&+,:;=\\\\?@#|/' \\\\[\\\\}\\\\]<\\\\>.\\\"^*{}~`()%!-])\";\n+        return identifier.replaceAll(\"(?<!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*\" + specialCharSet, \"\\\\\\\\$1\");\n+    }\n+\n+    /**\n+     * Encode the identifiers to avoid using jvm reserved characters.\n+     *\n+     * @param identifier identifier string\n+     * @return encoded identifier\n+     */\n+    public static String encodeIdentifier(String identifier) {\n+        if (identifier == null) {\n+            return identifier;\n+        }\n+        if (identifier.contains(ESCAPE_PREFIX)) {\n+            identifier = encodeSpecialCharacters(identifier);\n+        } else {\n+            identifier = identifier.replaceAll(ENCODING_PATTERN, \"\\\\$#$1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e74a36c03c22ae04559ed977fa622bafbd69e43", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e74a36c03c22ae04559ed977fa622bafbd69e43", "committedDate": "2020-09-16T12:08:03Z", "message": "Move regex pattern compilation into static variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5Njk3ODE1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-489697815", "createdAt": "2020-09-16T14:40:43Z", "commit": {"oid": "9e74a36c03c22ae04559ed977fa622bafbd69e43"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzE3OTU2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#pullrequestreview-489717956", "createdAt": "2020-09-16T15:00:10Z", "commit": {"oid": "9e74a36c03c22ae04559ed977fa622bafbd69e43"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4778, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}