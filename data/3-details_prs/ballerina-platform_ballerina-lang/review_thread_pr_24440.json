{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTIwNjcw", "number": 24440, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDozMDo0OFrOELiTaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNToyM1rOEOvbsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTMxODE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDozMDo0OFrOGtIfYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowODoyOFrOGyCu8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ==", "bodyText": "We probably wouldn't need this change once we merge b0624bb.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449978209", "createdAt": "2020-07-06T04:30:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -585,14 +585,15 @@ private BType setLiteralValueAndGetType(BLangLiteral literalExpr, BType expType)\n                 types.isCharLiteralValue((String) literalValue)) {\n             return symTable.charStringType;\n         } else {\n-            if (this.expType.tag == TypeTags.FINITE) {\n-                boolean foundMember = types.isAssignableToFiniteType(this.expType, literalExpr);\n+            BType expected = getResolvedIntersectionType(this.expType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDc0OA==", "bodyText": "Shall we create an issue for this? You can assign it to me. \ud83d\ude04", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455090748", "createdAt": "2020-07-15T14:22:37Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -585,14 +585,15 @@ private BType setLiteralValueAndGetType(BLangLiteral literalExpr, BType expType)\n                 types.isCharLiteralValue((String) literalValue)) {\n             return symTable.charStringType;\n         } else {\n-            if (this.expType.tag == TypeTags.FINITE) {\n-                boolean foundMember = types.isAssignableToFiniteType(this.expType, literalExpr);\n+            BType expected = getResolvedIntersectionType(this.expType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjc2OQ==", "bodyText": "Ah sure.. will do", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455126769", "createdAt": "2020-07-15T15:08:28Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -585,14 +585,15 @@ private BType setLiteralValueAndGetType(BLangLiteral literalExpr, BType expType)\n                 types.isCharLiteralValue((String) literalValue)) {\n             return symTable.charStringType;\n         } else {\n-            if (this.expType.tag == TypeTags.FINITE) {\n-                boolean foundMember = types.isAssignableToFiniteType(this.expType, literalExpr);\n+            BType expected = getResolvedIntersectionType(this.expType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTM1MzE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo1NTo1NVrOGtIzPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo1NTo1NVrOGtIzPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MzI5NQ==", "bodyText": "Shall we also update the comment?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449983295", "createdAt": "2020-07-06T04:55:55Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTM4MzM5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNToxNjowOVrOGtJEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0NDoxM1rOGx-yjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA==", "bodyText": "What if the union has any and one or more compatible object types? In that case it should be an ambiguous type error right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449987738", "createdAt": "2020-07-06T05:16:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3829,22 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MzUwMA==", "bodyText": "Shouldn't a union of any and any other type (except error) simplify to just any (currently it doesn't it seems)? In which case it should just be considered a RawTemplate", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r453553500", "createdAt": "2020-07-13T10:30:07Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3829,22 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NTQ5NA==", "bodyText": "Shouldn't we handle this scenario for the time-being though?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r454595494", "createdAt": "2020-07-14T19:34:31Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3829,22 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MjE1OA==", "bodyText": "This behaviour is correct for the scenario right? Considering that any|Foo|Bar (where Foo and Bar are raw template types) is the same as any", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455062158", "createdAt": "2020-07-15T13:44:13Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3829,22 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTM4NjY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNToxNzo1NVrOGtJGfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoxODoxMlrOGx9p-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA==", "bodyText": "Btw, the following union as the CET should also work right?\ntype Foo abstract object {\n    public string[] strings;\n    public any[] insertions;\n};\n\npublic function main() {\n    string x = \"World\";\n    Foo|int f = `\"Hello ${x}`;\n}\nCurrently (slp1) fails\n$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:8:17: invalid literal for type '(Foo|int)': raw templates can only be assigned to abstract subtypes of 'ballerina/lang.object:1.0.0:RawTemplate'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449988220", "createdAt": "2020-07-06T05:17:55Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODU2NA==", "bodyText": "And the following union, where only one is compatible.\ntype Foo abstract object {\n    public string[] strings;\n    public int[] insertions;\n};\n\ntype Bar abstract object {\n    public string[] strings;\n    public string[] insertions;\n};\n\npublic function main() {\n    string x = \"World\";\n    Foo|Bar f = `\"Hello ${x}`;\n}\nFails with\n$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:13:17: invalid raw template assignment: '(Foo|Bar)' should be an abstract object", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449988564", "createdAt": "2020-07-06T05:19:17Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3MDM4Mg==", "bodyText": "Fixed the first case with ce3ad42. The second case is a bit tricky. Looks like the whole type checking logic for raw templates will have to be refactored to support it. I think for now better to defer this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r453470382", "createdAt": "2020-07-13T07:25:24Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NjE5MQ==", "bodyText": "Shall we create an issue for this then? And should we consider giving a different error for now, something along the lines of \"not yet supported\" maybe?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r454596191", "createdAt": "2020-07-14T19:35:51Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzODcyMQ==", "bodyText": "Even to give an error like that, I think we'll have to separately identify that particular case, which is the issue with the way currently it's type checked.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455038721", "createdAt": "2020-07-15T13:11:11Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MzU3Ng==", "bodyText": "Created #24766 to track this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455043576", "createdAt": "2020-07-15T13:18:12Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTM5NDA1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/rawtemplate/RawTemplateLiteralTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNToyMjoyMVrOGtJKsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNToyMjoyMVrOGtJKsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4OTI5Nw==", "bodyText": "Shall we test this also in Ballerina itself?\nFor example, https://github.com/ballerina-platform/ballerina-lang/blob/v2.0.0-Preview1/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal#L149.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449989297", "createdAt": "2020-07-06T05:22:21Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/rawtemplate/RawTemplateLiteralTest.java", "diffHunk": "@@ -118,6 +122,13 @@ public void testIndirectAssignmentToConcreteType() {\n         BRunUtil.invoke(result, \"testIndirectAssignmentToConcreteType\");\n     }\n \n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp =\n+                  \".*InvalidUpdate message=modification not allowed on readonly value.*\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI0MzYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangAnonymousModelHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozNTo1N1rOGuK4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozNTo1N1rOGuK4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NTkwNg==", "bodyText": "Wonder why doesn't anyone use getOrDefault method here.\nInteger nextValue = rawTemplateTypeCount.getOrDefault(packageID, 0);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r451065906", "createdAt": "2020-07-07T18:35:57Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangAnonymousModelHelper.java", "diffHunk": "@@ -106,6 +110,12 @@ public String getNextDistinctErrorId(PackageID packageID) {\n         return ANON_TYPE_ID + String.valueOf(nextValue);\n     }\n \n+    public String getNextRawTemplateTypeKey(PackageID packageID, Name rawTemplateTypeName) {\n+        Integer nextValue = Optional.ofNullable(rawTemplateTypeCount.get(packageID)).orElse(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODY3MzIzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/rawtemplate/raw_template_literal_test.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0MToyNVrOGyBayw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxODo0NlrOGyDKtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNTIyNw==", "bodyText": "Do we have tests that assert the strings and insertions? Asserting the typedesc doesn't quite validate behaviour IMO.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455105227", "createdAt": "2020-07-15T14:41:25Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/rawtemplate/raw_template_literal_test.bal", "diffHunk": "@@ -203,19 +203,20 @@ function testUseWithVar() {\n     var rt = `Hello ${name}!`;\n     typedesc<any> td = typeof rt;\n \n-    assert(\"typedesc $anonType$21 {\\n\\tstrings : string[],\\n\\tinsertions : (any|error)[]\\n}\", td.toString());\n+    assert(\"typedesc $rawTemplate$RawTemplate$12\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzMzg3OQ==", "bodyText": "Yeah, those are the normal tests. This one is just to test if a type was desugared for this properly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455133879", "createdAt": "2020-07-15T15:18:46Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/rawtemplate/raw_template_literal_test.bal", "diffHunk": "@@ -203,19 +203,20 @@ function testUseWithVar() {\n     var rt = `Hello ${name}!`;\n     typedesc<any> td = typeof rt;\n \n-    assert(\"typedesc $anonType$21 {\\n\\tstrings : string[],\\n\\tinsertions : (any|error)[]\\n}\", td.toString());\n+    assert(\"typedesc $rawTemplate$RawTemplate$12\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNTIyNw=="}, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODcwMTQ1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NzozNFrOGyBssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo1OTo1NFrOGyfCCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ==", "bodyText": "Should we call getEffectiveMemberTypes here instead of getMemberTypes ?\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 2336\n      in\n      1cbfd04\n    \n    \n    \n    \n\n        \n          \n           private Set<BType> getEffectiveMemberTypes(BUnionType unionType) { \n        \n    \n  \n\n\nThis is currently used in\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 2297\n      in\n      1cbfd04\n    \n    \n    \n    \n\n        \n          \n           private boolean isAssignableToUnionType(BType source, BType target, Set<TypePair> unresolvedTypes) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455109811", "createdAt": "2020-07-15T14:47:34Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3830,48 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {\n+            return ((BUnionType) type).getMemberTypes().contains(symTable.anyType);\n+        }\n+\n+        return false;\n+    }\n+\n+    private BType getCompatibleRawTemplateType(BType expType, DiagnosticPos pos) {\n+        if (expType.tag != TypeTags.UNION) {\n+            return expType;\n+        }\n+\n+        BUnionType unionType = (BUnionType) expType;\n+        List<BType> compatibleTypes = new ArrayList<>();\n+\n+        for (BType type : unionType.getMemberTypes()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDA4NA==", "bodyText": "I guess the isAssignable check will handle this for us.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455120084", "createdAt": "2020-07-15T14:58:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3830,48 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {\n+            return ((BUnionType) type).getMemberTypes().contains(symTable.anyType);\n+        }\n+\n+        return false;\n+    }\n+\n+    private BType getCompatibleRawTemplateType(BType expType, DiagnosticPos pos) {\n+        if (expType.tag != TypeTags.UNION) {\n+            return expType;\n+        }\n+\n+        BUnionType unionType = (BUnionType) expType;\n+        List<BType> compatibleTypes = new ArrayList<>();\n+\n+        for (BType type : unionType.getMemberTypes()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ=="}, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyOTMyMg==", "bodyText": "This is just to iterate through the union members to see if there are compatible raw template types. No need to call getEffectiveMemberTypes() for that right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455129322", "createdAt": "2020-07-15T15:12:18Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3830,48 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {\n+            return ((BUnionType) type).getMemberTypes().contains(symTable.anyType);\n+        }\n+\n+        return false;\n+    }\n+\n+    private BType getCompatibleRawTemplateType(BType expType, DiagnosticPos pos) {\n+        if (expType.tag != TypeTags.UNION) {\n+            return expType;\n+        }\n+\n+        BUnionType unionType = (BUnionType) expType;\n+        List<BType> compatibleTypes = new ArrayList<>();\n+\n+        for (BType type : unionType.getMemberTypes()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ=="}, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5MDQwOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455590409", "createdAt": "2020-07-16T07:59:54Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3830,48 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {\n+            return ((BUnionType) type).getMemberTypes().contains(symTable.anyType);\n+        }\n+\n+        return false;\n+    }\n+\n+    private BType getCompatibleRawTemplateType(BType expType, DiagnosticPos pos) {\n+        if (expType.tag != TypeTags.UNION) {\n+            return expType;\n+        }\n+\n+        BUnionType unionType = (BUnionType) expType;\n+        List<BType> compatibleTypes = new ArrayList<>();\n+\n+        for (BType type : unionType.getMemberTypes()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ=="}, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODgwODMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowODoyNFrOGyCuzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowODoyNFrOGyCuzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjczMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatiple.raw.template.types\"),\n          \n          \n            \n                MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatible.raw.template.types\"),", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455126733", "createdAt": "2020-07-15T15:08:24Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -553,6 +553,7 @@\n     INVALID_TYPEDESC_PARAM(\"invalid.typedesc.param\"),\n \n     INVALID_RAW_TEMPLATE_TYPE(\"invalid.raw.template.type\"),\n+    MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatiple.raw.template.types\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODkyNjU5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNToyM1rOGyD4zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNToyM1rOGyD4zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NTY3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            error.multiple.compatiple.raw.template.types=\\\n          \n          \n            \n            error.multiple.compatible.raw.template.types=\\", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455145677", "createdAt": "2020-07-15T15:35:23Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1395,6 +1395,9 @@ error.invalid.typedesc.param=\\\n error.invalid.raw.template.type=\\\n   invalid literal for type ''{1}'': raw templates can only be assigned to abstract subtypes of ''{0}''\n \n+error.multiple.compatiple.raw.template.types=\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3283, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}