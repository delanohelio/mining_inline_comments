{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMzkyNjQy", "number": 27315, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzo0ODo1OFrOFBlVOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDo0ODoxOVrOFK665Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjA0NTM2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/DeepReadOnlyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzo0ODo1OFrOIAU01g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzo0ODo1OFrOIAU01g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMjExOA==", "bodyText": "Missing the licence header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537212118", "createdAt": "2020-12-07T03:48:58Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/DeepReadOnlyTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.ballerinalang.test.types;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bfed047ef2d07b0402aff8a27f41d94f2077d3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjA3NzIzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BIntersectionType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNDowNDo1MFrOIAVFXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNToyMToyN1rOIBHkGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxNjM1MA==", "bodyText": "Intersection types are a bit different from the other types we are changing here. The effective type can be an independent/completely different type from the constituent types, so IMO we can expect the user to pass the correct type as the effective type. Creating that type would have ensured that we've recursively set the flag for it anyway, with these changes (e.g., if effective type is an array type, creating the BArrayType will set the flag recursively).\nWe're in the process of introducing other intersection types atm, so I think it will be consistent to expect the user to pass the properly created effective type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537216350", "createdAt": "2020-12-07T04:04:50Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BIntersectionType.java", "diffHunk": "@@ -50,7 +51,7 @@ public BIntersectionType(Module pkg, Type[] constituentTypes, Type effectiveType\n                              boolean readonly) {\n         super(null, pkg, Object.class);\n         this.constituentTypes = Arrays.asList(constituentTypes);\n-        this.effectiveType = effectiveType;\n+        this.effectiveType = readonly ? ReadOnlyUtils.getReadOnlyType(effectiveType) : effectiveType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bfed047ef2d07b0402aff8a27f41d94f2077d3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0MzQxNw==", "bodyText": "removed this change", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r538043417", "createdAt": "2020-12-08T05:21:27Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BIntersectionType.java", "diffHunk": "@@ -50,7 +51,7 @@ public BIntersectionType(Module pkg, Type[] constituentTypes, Type effectiveType\n                              boolean readonly) {\n         super(null, pkg, Object.class);\n         this.constituentTypes = Arrays.asList(constituentTypes);\n-        this.effectiveType = effectiveType;\n+        this.effectiveType = readonly ? ReadOnlyUtils.getReadOnlyType(effectiveType) : effectiveType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxNjM1MA=="}, "originalCommit": {"oid": "53bfed047ef2d07b0402aff8a27f41d94f2077d3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjE1NjUyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNDo0MDo0OVrOIAVtHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTo1NDo0N1rOIDFmqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyNjUyNQ==", "bodyText": "If we allow users to create BRecordTypes shouldn't we recursively set the READONLY flag to the field types and rest field type for consistency?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537226525", "createdAt": "2020-12-07T04:40:49Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java", "diffHunk": "@@ -76,10 +76,10 @@ public BRecordType(String typeName, Module pkg, long flags, boolean sealed, int\n     public BRecordType(String typeName, Module pkg, long flags, Map<String, Field> fields, Type restFieldType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bfed047ef2d07b0402aff8a27f41d94f2077d3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIzMzM5OA==", "bodyText": "Same applies for object types too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537233398", "createdAt": "2020-12-07T05:04:28Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java", "diffHunk": "@@ -76,10 +76,10 @@ public BRecordType(String typeName, Module pkg, long flags, boolean sealed, int\n     public BRecordType(String typeName, Module pkg, long flags, Map<String, Field> fields, Type restFieldType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyNjUyNQ=="}, "originalCommit": {"oid": "53bfed047ef2d07b0402aff8a27f41d94f2077d3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEwODQ1OA==", "bodyText": "I changed for the BRecordType. As for the object type we don't initialize the fields via the constructor.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r540108458", "createdAt": "2020-12-10T11:54:47Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java", "diffHunk": "@@ -76,10 +76,10 @@ public BRecordType(String typeName, Module pkg, long flags, boolean sealed, int\n     public BRecordType(String typeName, Module pkg, long flags, Map<String, Field> fields, Type restFieldType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIyNjUyNQ=="}, "originalCommit": {"oid": "53bfed047ef2d07b0402aff8a27f41d94f2077d3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjIwNzk0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BMapType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTowNDowMFrOIAWHZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNToyNToxNVrOIBHpiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIzMzI1Mg==", "bodyText": "IINM io.ballerina.runtime.internal.values.ReadOnlyUtils#setImmutableIntersectionType's assumes the type passed is definitely a type that can be immutable and the default case seems to be assuming the type is a union. But when creating a type at runtime, I guess there could be scenarios where the user passes an invalid type? We may need to handle those with a proper error and include tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r537233252", "createdAt": "2020-12-07T05:04:00Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BMapType.java", "diffHunk": "@@ -40,36 +41,32 @@\n @SuppressWarnings(\"unchecked\")\n public class BMapType extends BType implements MapType {\n \n-    private Type constraint;\n+    private final Type constraint;\n     private final boolean readonly;\n     private IntersectionType immutableType;\n \n+    public BMapType(Type constraint) {\n+        this(constraint, false);\n+    }\n+\n+    public BMapType(Type constraint, boolean readonly) {\n+        this(TypeConstants.MAP_TNAME, constraint, null, readonly);\n+    }\n+\n     /**\n      * Create a type from the given name.\n      *\n-     * @param typeName string name of the type.\n+     * @param typeName   string name of the type.\n      * @param constraint constraint type which particular map is bound to.\n-     * @param pkg package for the type.\n+     * @param pkg        package for the type.\n      */\n     public BMapType(String typeName, Type constraint, Module pkg) {\n-        super(typeName, pkg, MapValueImpl.class);\n-        this.constraint = constraint;\n-        this.readonly = false;\n+        this(typeName, constraint, pkg, false);\n     }\n \n     public BMapType(String typeName, Type constraint, Module pkg, boolean readonly) {\n         super(typeName, pkg, MapValueImpl.class);\n-        this.constraint = constraint;\n-        this.readonly = readonly;\n-    }\n-\n-    public BMapType(Type constraint) {\n-        this(constraint, false);\n-    }\n-\n-    public BMapType(Type constraint, boolean readonly) {\n-        super(TypeConstants.MAP_TNAME, null, MapValueImpl.class);\n-        this.constraint = constraint;\n+        this.constraint = readonly ? ReadOnlyUtils.getReadOnlyType(constraint) : constraint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bfed047ef2d07b0402aff8a27f41d94f2077d3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0NDgwOQ==", "bodyText": "Fixed this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r538044809", "createdAt": "2020-12-08T05:25:15Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BMapType.java", "diffHunk": "@@ -40,36 +41,32 @@\n @SuppressWarnings(\"unchecked\")\n public class BMapType extends BType implements MapType {\n \n-    private Type constraint;\n+    private final Type constraint;\n     private final boolean readonly;\n     private IntersectionType immutableType;\n \n+    public BMapType(Type constraint) {\n+        this(constraint, false);\n+    }\n+\n+    public BMapType(Type constraint, boolean readonly) {\n+        this(TypeConstants.MAP_TNAME, constraint, null, readonly);\n+    }\n+\n     /**\n      * Create a type from the given name.\n      *\n-     * @param typeName string name of the type.\n+     * @param typeName   string name of the type.\n      * @param constraint constraint type which particular map is bound to.\n-     * @param pkg package for the type.\n+     * @param pkg        package for the type.\n      */\n     public BMapType(String typeName, Type constraint, Module pkg) {\n-        super(typeName, pkg, MapValueImpl.class);\n-        this.constraint = constraint;\n-        this.readonly = false;\n+        this(typeName, constraint, pkg, false);\n     }\n \n     public BMapType(String typeName, Type constraint, Module pkg, boolean readonly) {\n         super(typeName, pkg, MapValueImpl.class);\n-        this.constraint = constraint;\n-        this.readonly = readonly;\n-    }\n-\n-    public BMapType(Type constraint) {\n-        this(constraint, false);\n-    }\n-\n-    public BMapType(Type constraint, boolean readonly) {\n-        super(TypeConstants.MAP_TNAME, null, MapValueImpl.class);\n-        this.constraint = constraint;\n+        this.constraint = readonly ? ReadOnlyUtils.getReadOnlyType(constraint) : constraint;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIzMzI1Mg=="}, "originalCommit": {"oid": "53bfed047ef2d07b0402aff8a27f41d94f2077d3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTgwMDYwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TableJsonDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDowODo1NFrOINy8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDowODo1NFrOINy8cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMzNzA3Mw==", "bodyText": "We can use internalKeyName in L213, L216, and L219, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r551337073", "createdAt": "2021-01-04T14:08:54Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TableJsonDataSource.java", "diffHunk": "@@ -201,22 +201,22 @@ private static Object getStructData(BMap data, BField[] structFields, int index,\n             MapValue<BString, Object> jsonData = new MapValueImpl<>(new BMapType(PredefinedTypes.TYPE_JSON));\n             boolean structError = true;\n             if (data != null) {\n-                Type internalType = structFields[index].type;\n+                Type internalType = structFields[index].getFieldType();\n                 if (internalType.getTag() == TypeTags.OBJECT_TYPE_TAG\n                         || internalType.getTag() == TypeTags.RECORD_TYPE_TAG) {\n                     BField[] internalStructFields =\n                             ((BStructureType) internalType).getFields().values().toArray(new BField[0]);\n                     for (int i = 0; i < internalStructFields.length; i++) {\n-                        BString internalKeyName = StringUtils.fromString(internalStructFields[i].name);\n+                        BString internalKeyName = StringUtils.fromString(internalStructFields[i].getFieldName());\n                         Object value = data.get(internalKeyName);\n                         if (value instanceof BigDecimal) {\n-                            jsonData.put(StringUtils.fromString(internalStructFields[i].name),\n+                            jsonData.put(StringUtils.fromString(internalStructFields[i].getFieldName()),\n                                          ((BigDecimal) value).doubleValue());\n                         } else if (value instanceof MapValueImpl) {\n-                            jsonData.put(StringUtils.fromString(internalStructFields[i].name),\n+                            jsonData.put(StringUtils.fromString(internalStructFields[i].getFieldName()),\n                                          getStructData((MapValueImpl) value, internalStructFields, i, internalKeyName));\n                         } else {\n-                            jsonData.put(StringUtils.fromString(internalStructFields[i].name), value);\n+                            jsonData.put(StringUtils.fromString(internalStructFields[i].getFieldName()), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b80d25d47fe6dd104dc35434c86f81a4d35c01ba"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTg3NjAyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyODoxNFrOINzoag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyODoxNFrOINzoag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0ODMzMA==", "bodyText": "Shall we introduce an if block and check if readonly only once?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r551348330", "createdAt": "2021-01-04T14:28:14Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BRecordType.java", "diffHunk": "@@ -75,11 +77,26 @@ public BRecordType(String typeName, Module pkg, long flags, boolean sealed, int\n      */\n     public BRecordType(String typeName, Module pkg, long flags, Map<String, Field> fields, Type restFieldType,\n                        boolean sealed, int typeFlags) {\n-        super(typeName, pkg, flags, MapValueImpl.class, fields);\n-        this.restFieldType = restFieldType;\n+        super(typeName, pkg, flags, MapValueImpl.class);\n         this.sealed = sealed;\n         this.typeFlags = typeFlags;\n         this.readonly = SymbolFlags.isFlagOn(flags, SymbolFlags.READONLY);\n+        this.restFieldType = restFieldType != null && readonly ? ReadOnlyUtils.getReadOnlyType(restFieldType) :\n+                restFieldType;\n+        this.fields = readonly ? getReadOnlyFields(fields) : fields;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b80d25d47fe6dd104dc35434c86f81a4d35c01ba"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTk1NDI5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BTupleType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDo0ODoxOVrOIN0XMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDo0ODoxOVrOIN0XMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MDMwNA==", "bodyText": "Same comment as above re: checking readonly twice.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27315#discussion_r551360304", "createdAt": "2021-01-04T14:48:19Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BTupleType.java", "diffHunk": "@@ -79,12 +77,20 @@ public BTupleType(List<Type> typeList, int typeFlags) {\n      */\n     public BTupleType(List<Type> typeList, Type restType, int typeFlags, boolean readonly) {\n         super(null, null, Object.class);\n-        this.tupleTypes = typeList;\n-        this.restType = restType;\n+        this.tupleTypes = readonly ? getReadOnlyTypes(typeList) : typeList;\n+        this.restType = readonly && restType != null ? ReadOnlyUtils.getReadOnlyType(restType) : restType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b80d25d47fe6dd104dc35434c86f81a4d35c01ba"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2836, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}