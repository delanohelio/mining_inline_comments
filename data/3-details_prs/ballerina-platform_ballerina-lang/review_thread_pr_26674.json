{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMDc0ODIx", "number": 26674, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOTo0NzoxOVrOEzOFPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOTo0NzoxOVrOEzOFPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTQzNTUwOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/AssignmentStatementNodeContext.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOTo0NzoxOVrOHqT9aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOTo1NzowN1rOHqUU-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyOTI1Nw==", "bodyText": "Can't we use SymbolKind.VARIABLE instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26674#discussion_r514129257", "createdAt": "2020-10-29T09:47:19Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/AssignmentStatementNodeContext.java", "diffHunk": "@@ -67,7 +68,8 @@ public AssignmentStatementNodeContext() {\n             (2) [module:]TypeName c = module:a<cursor>\n              */\n             QualifiedNameReferenceNode qNameRef = (QualifiedNameReferenceNode) node.expression();\n-            Predicate<Symbol> filter = symbol -> symbol.kind() == SymbolKind.VARIABLE;\n+            Predicate<Symbol> filter = symbol -> symbol instanceof VariableSymbol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a85030945c1166e90f3e4dc1b3d308d9d76d015"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzMTM0Mw==", "bodyText": "No, if we use the VARIABLE symbol kind, then it will not capture the constants as per the current model. In order to avoid having two check with constant and variable kinds, added the instance of check", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26674#discussion_r514131343", "createdAt": "2020-10-29T09:50:38Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/AssignmentStatementNodeContext.java", "diffHunk": "@@ -67,7 +68,8 @@ public AssignmentStatementNodeContext() {\n             (2) [module:]TypeName c = module:a<cursor>\n              */\n             QualifiedNameReferenceNode qNameRef = (QualifiedNameReferenceNode) node.expression();\n-            Predicate<Symbol> filter = symbol -> symbol.kind() == SymbolKind.VARIABLE;\n+            Predicate<Symbol> filter = symbol -> symbol instanceof VariableSymbol", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyOTI1Nw=="}, "originalCommit": {"oid": "0a85030945c1166e90f3e4dc1b3d308d9d76d015"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzNDAxNw==", "bodyText": "If the intention is to address both constants and variables I would still prefer two checks; since == comparison is far efficient  compared to instanceOf and for the better readability of allowing constants and variables.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26674#discussion_r514134017", "createdAt": "2020-10-29T09:55:03Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/AssignmentStatementNodeContext.java", "diffHunk": "@@ -67,7 +68,8 @@ public AssignmentStatementNodeContext() {\n             (2) [module:]TypeName c = module:a<cursor>\n              */\n             QualifiedNameReferenceNode qNameRef = (QualifiedNameReferenceNode) node.expression();\n-            Predicate<Symbol> filter = symbol -> symbol.kind() == SymbolKind.VARIABLE;\n+            Predicate<Symbol> filter = symbol -> symbol instanceof VariableSymbol", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyOTI1Nw=="}, "originalCommit": {"oid": "0a85030945c1166e90f3e4dc1b3d308d9d76d015"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzNTI4OA==", "bodyText": "Yes, agreed. This will be addressed along with the newly proposed model", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26674#discussion_r514135288", "createdAt": "2020-10-29T09:57:07Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/AssignmentStatementNodeContext.java", "diffHunk": "@@ -67,7 +68,8 @@ public AssignmentStatementNodeContext() {\n             (2) [module:]TypeName c = module:a<cursor>\n              */\n             QualifiedNameReferenceNode qNameRef = (QualifiedNameReferenceNode) node.expression();\n-            Predicate<Symbol> filter = symbol -> symbol.kind() == SymbolKind.VARIABLE;\n+            Predicate<Symbol> filter = symbol -> symbol instanceof VariableSymbol", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyOTI1Nw=="}, "originalCommit": {"oid": "0a85030945c1166e90f3e4dc1b3d308d9d76d015"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4685, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}