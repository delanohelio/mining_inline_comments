{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjMyNDI0", "number": 21297, "title": "Support object initialization for args with default values", "bodyText": "Purpose\nFixes #21186\nFixes #21258\nApproach\nThe error occurs because of an expression node referenced by two places. Therefore the expression node is cloned and assign to one place.\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-02-27T04:35:40Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21297", "merged": true, "mergeCommit": {"oid": "dbe831c418a5c75789b6d31c3d35bbb10e108366"}, "closed": true, "closedAt": "2020-03-05T07:54:39Z", "author": {"login": "KavinduZoysa"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIXvXrAH2gAyMzgwNjMyNDI0OjY4YTdkNDE4ZTdlMTNiYjdhNGYwOTQ4OTk3MTAwMGUwODc1ZTUwMzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKmveDAFqTM2OTM1Mzk1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "68a7d418e7e13bb7a4f09489971000e0875e5039", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/68a7d418e7e13bb7a4f09489971000e0875e5039", "committedDate": "2020-02-27T09:17:02Z", "message": "Support object initialization for args with default values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "988d99b42787d45ce4617f63e1bc76c2c2712aa8", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/988d99b42787d45ce4617f63e1bc76c2c2712aa8", "committedDate": "2020-02-27T09:17:02Z", "message": "Add unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2707a68bb4d009f5a3879a8efdaf9ebda394a66e", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2707a68bb4d009f5a3879a8efdaf9ebda394a66e", "committedDate": "2020-02-27T04:31:10Z", "message": "Add unit tests"}, "afterCommit": {"oid": "988d99b42787d45ce4617f63e1bc76c2c2712aa8", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/988d99b42787d45ce4617f63e1bc76c2c2712aa8", "committedDate": "2020-02-27T09:17:02Z", "message": "Add unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NjE1Mjk4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21297#pullrequestreview-365615298", "createdAt": "2020-02-27T11:43:55Z", "commit": {"oid": "988d99b42787d45ce4617f63e1bc76c2c2712aa8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MjI2ODQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21297#pullrequestreview-366226841", "createdAt": "2020-02-28T08:27:45Z", "commit": {"oid": "988d99b42787d45ce4617f63e1bc76c2c2712aa8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODoyNzo0NlrOFvs7NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODoyNzo0NlrOFvs7NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2MzQ0NA==", "bodyText": "Shall we add few test cases where __init function returns error value?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21297#discussion_r385563444", "createdAt": "2020-02-28T08:27:46Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/init/object-initializer.bal", "diffHunk": "@@ -398,3 +398,115 @@ function testInitInvocationWithCheckAndRestParams2() returns (boolean) {\n     var [s, marksBeforeChange, marksAfterChange] = testInitInvocationWithCheckAndRestParams(10, ...modules);\n     return !(s is error) && marksBeforeChange == 90 && marksAfterChange == 95;\n }\n+\n+type Student6 object {\n+    int id;\n+\n+    public function __init(int id = 1) {\n+        self.id = id;\n+    }\n+\n+    public function getId() returns int {\n+        return self.id;\n+    }\n+};\n+\n+function testInitInvocationWithDefaultParams1() returns (boolean) {\n+    Student6 student = new;\n+    return student.getId() == 1;\n+}\n+\n+type Student7 object {\n+    int? id;\n+\n+    public function __init(int? id = 1) {\n+        self.id = id;\n+    }\n+\n+    public function getId() returns int {\n+        if !(self.id is int) {\n+            error err = error(\"ID should be an integer\");\n+            panic err;\n+        }\n+        return <int> self.id;\n+    }\n+};\n+\n+function testInitInvocationWithDefaultParams2() returns (boolean) {\n+    Student7 student = new(4);\n+    return student.getId() == 4;\n+}\n+\n+public type ID int|string;\n+\n+type Student8 object {\n+    int id;\n+\n+    public function __init(ID i=1) {\n+        self.id = <int> i;\n+    }\n+\n+    public function getId() returns int {\n+        return self.id;\n+    }\n+};\n+\n+function testInitInvocationWithFiniteType() returns (boolean) {\n+    Student8 student = new(4);\n+    return student.getId() == 4;\n+}\n+\n+type AddError object {\n+    error er;\n+    function __init(error simpleError = error(\"SimpleErrorType\", message = \"Simple error occurred\")) {\n+        self.er = simpleError;\n+    }\n+\n+    public function getError() returns error|() {\n+        return self.er;\n+    }\n+};\n+\n+function testInitInvocationWithDefaultError() returns (boolean) {\n+    AddError newError = new;\n+    var e = newError.getError();\n+    if !(e is error) {\n+        error err = error(\"Returned value should be an error\");\n+        panic err;\n+    }\n+    return e is error;\n+}\n+\n+type Student9 object {\n+    int fullMarks;\n+\n+    public function __init(int firstMark = 80, int secondMark = firstMark) {\n+        self.fullMarks = firstMark + secondMark;\n+    }\n+\n+    public function getMarks() returns int {\n+        return self.fullMarks;\n+    }\n+};\n+\n+function testInitInvocationWithReferenceToDefaultValue1() returns (boolean) {\n+    Student9 student = new;\n+    return student.getMarks() == 160;\n+}\n+\n+type Calculate object {\n+    int sum;\n+\n+    public function __init(int a, int b, int c, int d = a + b + c*c) {\n+        self.sum = d;\n+    }\n+\n+    public function getSum() returns int {\n+        return self.sum;\n+    }\n+};\n+\n+function testInitInvocationWithReferenceToDefaultValue2() returns (boolean) {\n+    Calculate cal = new(2, 3, 4);\n+    return cal.getSum() == 21;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988d99b42787d45ce4617f63e1bc76c2c2712aa8"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544c187194591b65df92f9d12640a319401a8822", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/544c187194591b65df92f9d12640a319401a8822", "committedDate": "2020-02-28T09:19:09Z", "message": "Add test to check error return"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzUzOTU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21297#pullrequestreview-369353955", "createdAt": "2020-03-05T07:53:34Z", "commit": {"oid": "544c187194591b65df92f9d12640a319401a8822"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4034, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}