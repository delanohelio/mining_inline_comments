{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MzQ5OTEx", "number": 24629, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjowNzowOFrOENsclA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxMDozNlrOEOuxAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzk1MTU2OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjowNzowOFrOGwcjWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjowNzowOFrOGwcjWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1MjYzNQ==", "bodyText": "Shall we rename this function as follow and move this function to 'auth/invocation_context.bal' ?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public function setAuthInvocationContext(public string? scheme = (), public string? authToken = (),\n          \n          \n            \n            public function setInvocationContext(public string? scheme = (), public string? token = (),", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r453452635", "createdAt": "2020-07-13T06:07:08Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -72,41 +71,30 @@ public function extractUsernameAndPassword(string credential) returns [string, s\n     }\n }\n \n-# Sets the authentication-related values (scheme, auth token) to the authentication context of the invocation context.\n+# Sets the authentication-related values to the invocation context.\n # ```ballerina\n-# auth:setAuthenticationContext(\"jwt\", \"<credential>\");\n+# auth:setAuthInvocationContext(\"jwt\", \"<credential>\", \"<userID>\", <scopes>, <claims>);\n # ```\n #\n # + scheme - Auth scheme (`JWT`, `LDAP`, `OAuth2`, `Basic`, etc.)\n # + authToken - Auth token (credential)\n-public function setAuthenticationContext(string scheme, string authToken) {\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    invocationContext.authenticationContext = {\n-        scheme: scheme,\n-        authToken: authToken\n-    };\n-}\n-\n-# Sets the authentication-related values (user ID, username, scopes, claims) to the principal of the invocation context.\n-#\n-# + userId - User ID of the authenticated user\n-# + username - Username of the authenticated user\n-# + claims - Claims of the authenticated user\n-# + scopes - Authenticated user scopes\n-public function setPrincipal(public string? userId = (), public string? username = (), public string[]? scopes = (),\n-                             public map<any>? claims = ()) {\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    if (!(userId is ()) && userId != \"\") {\n-        invocationContext.principal.userId = userId;\n+public function setAuthInvocationContext(public string? scheme = (), public string? authToken = (),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426ea5467f3911ae23d4eba8dbbe204c043170fa"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzk3OTk0OnYy", "diffSide": "RIGHT", "path": "stdlib/oauth2/src/main/ballerina/src/oauth2/outbound_oauth2_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoyMTowN1rOGwc0Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoyMTowN1rOGwc0Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1NjkxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return prepareAuthError(\"Failed to generate OAuth2 token since OAuth2 provider config is not defined and auth token is not defined in the authentication context at invocation context.\");\n          \n          \n            \n                        return prepareAuthError(\"Failed to generate OAuth2 token since OAuth2 provider config is not defined and OAuth2 token is not defined at auth:InvocationContext.\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r453456915", "createdAt": "2020-07-13T06:21:07Z", "author": {"login": "ldclakmal"}, "path": "stdlib/oauth2/src/main/ballerina/src/oauth2/outbound_oauth2_provider.bal", "diffHunk": "@@ -91,12 +90,9 @@ public type OutboundOAuth2Provider object {\n     public function generateToken() returns @tainted (string|auth:Error) {\n         GrantTypeConfig? oauth2ProviderConfig = self.oauth2ProviderConfig;\n         if (oauth2ProviderConfig is ()) {\n-            runtime:AuthenticationContext? authContext = runtime:getInvocationContext()?.authenticationContext;\n-            if (authContext is runtime:AuthenticationContext) {\n-                string? authToken = authContext?.authToken;\n-                if (authToken is string) {\n-                    return authToken;\n-                }\n+            string? authToken = auth:getInvocationContext()?.token;\n+            if (authToken is string) {\n+                return authToken;\n             }\n             return prepareAuthError(\"Failed to generate OAuth2 token since OAuth2 provider config is not defined and auth token is not defined in the authentication context at invocation context.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426ea5467f3911ae23d4eba8dbbe204c043170fa"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzk4NDg4OnYy", "diffSide": "RIGHT", "path": "stdlib/runtime-api/src/main/java/org/ballerinalang/stdlib/runtime/nativeimpl/GetInvocationContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoyMzozNVrOGwc2_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoyMzozNVrOGwc2_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1NzY2Mg==", "bodyText": "Shall we update as follows, in order to consistent with AUTH_INVOCATION_CONTEXT_PROPERTY?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String INVOCATION_CONTEXT_PROPERTY = \"RuntimeInvocationContext\";\n          \n          \n            \n                private static final String RUNTIME_INVOCATION_CONTEXT_PROPERTY = \"RuntimeInvocationContext\";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r453457662", "createdAt": "2020-07-13T06:23:35Z", "author": {"login": "ldclakmal"}, "path": "stdlib/runtime-api/src/main/java/org/ballerinalang/stdlib/runtime/nativeimpl/GetInvocationContext.java", "diffHunk": "@@ -41,7 +41,7 @@\n         return getInvocationContextRecord(Scheduler.getStrand());\n     }\n \n-    private static final String INVOCATION_CONTEXT_PROPERTY = \"InvocationContext\";\n+    private static final String INVOCATION_CONTEXT_PROPERTY = \"RuntimeInvocationContext\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426ea5467f3911ae23d4eba8dbbe204c043170fa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTkxNzk4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1NTowN1rOGwu9Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1NTowN1rOGwu9Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NDE2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Invocation Context is a data holder, which is created per request and preserved for a single request-response flow. It comprises of auth related information such as authentication scheme, auth token and authenticated user's id, claims and scopes. \n          \n          \n            \n            The Invocation Context is a data holder, which is created per request and preserved for a single request-response flow. It comprises of auth-related information such as authentication scheme, auth token, and authenticated user's ID, claims, and scopes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r453754162", "createdAt": "2020-07-13T15:55:07Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "diffHunk": "@@ -1,5 +1,21 @@\n ## Module Overview\n \n-This module provides the default authentication provider configurations, which can be extended to create new authentication providers.\n+This module provides the default authentication provider configurations, which can be extended to create new authentication providers and functions to interact with the `auth:InvocationContext`.\n \n+#### Invocation Context\n+\n+The Invocation Context is a data holder, which is created per request and preserved for a single request-response flow. It comprises of auth related information such as authentication scheme, auth token and authenticated user's id, claims and scopes. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426ea5467f3911ae23d4eba8dbbe204c043170fa"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTkxOTMyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1NToyNVrOGwu98g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1NToyNVrOGwu98g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NDM1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Retrieve data from invocation context.\n          \n          \n            \n            Retrieve data from the invocation context.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r453754354", "createdAt": "2020-07-13T15:55:25Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "diffHunk": "@@ -1,5 +1,21 @@\n ## Module Overview\n \n-This module provides the default authentication provider configurations, which can be extended to create new authentication providers.\n+This module provides the default authentication provider configurations, which can be extended to create new authentication providers and functions to interact with the `auth:InvocationContext`.\n \n+#### Invocation Context\n+\n+The Invocation Context is a data holder, which is created per request and preserved for a single request-response flow. It comprises of auth related information such as authentication scheme, auth token and authenticated user's id, claims and scopes. \n+\n+The following code snippet shows how to access the `auth:InvocationContext` and how to set the data and retrieve them.\n+\n+Set data to the invocation context.\n+```ballerina\n+auth:InvocationContext invocationContext = auth:getInvocationContext();\n+invocationContext.token = \"eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\";\n+```\n+\n+Retrieve data from invocation context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426ea5467f3911ae23d4eba8dbbe204c043170fa"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTkzMTIyOnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1ODowNlrOGwvFTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1ODowNlrOGwvFTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NjIzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    string userId = auth:getInvocationContext()?.userId ?: \"\";    // this is already validated at `canProcess` function\n          \n          \n            \n                    string userId = auth:getInvocationContext()?.userId ?: \"\";    // This is already validated in the `canProcess` function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r453756236", "createdAt": "2020-07-13T15:58:06Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "diffHunk": "@@ -63,30 +59,23 @@ public type AuthzHandler object {\n         string resourceName = runtime:getInvocationContext().attributes[RESOURCE_NAME].toString();\n         string requestMethod = runtime:getInvocationContext().attributes[REQUEST_METHOD].toString();\n \n-        runtime:Principal? principal = runtime:getInvocationContext()?.principal;\n-        if (principal is runtime:Principal) {\n-            string username = principal?.username ?: \"\";    // this is already validated at `canProcess` function\n-            string[] userScopes = principal?.scopes ?: [];\n-            string authzCacheKey = generateAuthzCacheKey(username, userScopes, serviceName, resourceName,\n-                                   requestMethod);\n+        string userId = auth:getInvocationContext()?.userId ?: \"\";    // this is already validated at `canProcess` function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426ea5467f3911ae23d4eba8dbbe204c043170fa"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTkzMjEwOnYy", "diffSide": "RIGHT", "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1ODoxOVrOGwvF5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1ODoxOVrOGwvF5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NjM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides functions to interact with the ballerina runtime and the runtime invocation context.\n          \n          \n            \n            This module provides functions to interact with the Ballerina runtime and the runtime invocation context.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r453756388", "createdAt": "2020-07-13T15:58:19Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,42 +1,29 @@\n ## Module Overview\n \n-This module provides functions to interact with the runtime, the invocation context, and to manage errors.\n+This module provides functions to interact with the ballerina runtime and the runtime invocation context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426ea5467f3911ae23d4eba8dbbe204c043170fa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTkzMzk5OnYy", "diffSide": "RIGHT", "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1ODo0NVrOGwvHCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1ODo0NVrOGwvHCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NjY4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Following is the code snippet for pausing the current strand for 1000 milliseconds.\n          \n          \n            \n            The following is the code snippet for pausing the current strand for 1000 milliseconds.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r453756680", "createdAt": "2020-07-13T15:58:45Z", "author": {"login": "praneesha"}, "path": "stdlib/runtime-api/src/main/ballerina/src/runtime/Module.md", "diffHunk": "@@ -1,42 +1,29 @@\n ## Module Overview\n \n-This module provides functions to interact with the runtime, the invocation context, and to manage errors.\n+This module provides functions to interact with the ballerina runtime and the runtime invocation context.\n \n-### Invocation Context\n+#### Invocation Context\n \n-The Invocation Context is a data holder, which is created per request and preserved for a single request-response flow. It comprises of a unique ID, a `runtime:Principal` instance, which includes user details, a `runtime:AuthenticationContext`, which has the authentication-related details if available, and an attribute map to hold context information.\n+The Invocation Context is a data holder, which is created per request and preserved for a single request-response flow. It comprises of a unique ID and an attribute map to hold the context information.\n \n-The following code snippet shows how to access the `runtime:InvocationContext` and the set of data for the `runtime:Principal` and `runtime:AuthenticationContext`.\n+The following code snippet shows how to access the `runtime:InvocationContext` and how to set the data to the `attributes` map.\n ```ballerina\n runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-\n-runtime:Principal? principal = invocationContext[\"principal\"];\n-if (principal is runtime:Principal) {\n-    // Set the username as \u2018tom\u2019.\n-    principal[\"username\"] = \"tom\";\n-}\n-\n-runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n-if (authContext is runtime:AuthenticationContext) {\n-    // Set the auth scheme.\n-    authContext.scheme = \"jwt\";\n-}\n+invocationContext.attributes[\"SERVICE_NAME\"] = \"HelloService\";\n ```\n \n-The following code snippet shows how to access the `runtime:InvocationContext` and get the data from the `runtime:Principal` and `runtime:AuthenticationContext`,\n+The following code snippet shows how to access the `runtime:InvocationContext` and get the data from the `attributes` map.\n ```ballerina\n runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-runtime:Principal? principal = invocationContext[\"principal\"];\n-if (principal is runtime:Principal) {\n-    // Retrieve the user name.\n-    string? userName = principal[\"username\"];\n-}\n-\n-runtime:AuthenticationContext? authContext = invocationContext[\"authenticationContext\"];\n-if (authContext is runtime:AuthenticationContext) {\n-    // Retrieve the auth scheme.\n-    string? authScheme = authContext[\"scheme\"];\n-}\n+string serviceName = runtime:getInvocationContext().attributes[\"SERVICE_NAME\"].toString();\n+```\n+\n+#### Sleep the current strand\n+\n+Following is the code snippet for pausing the current strand for 1000 milliseconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426ea5467f3911ae23d4eba8dbbe204c043170fa"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODgxNzI4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxMDozNlrOGyC0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjo1Mzo0OFrOGyGyQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyODE5NQ==", "bodyText": "Shall we move this function to auth/invocation_context.bal? WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r455128195", "createdAt": "2020-07-15T15:10:36Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -72,41 +71,33 @@ public function extractUsernameAndPassword(string credential) returns [string, s\n     }\n }\n \n-# Sets the authentication-related values (scheme, auth token) to the authentication context of the invocation context.\n+# Sets the authentication-related values to the invocation context.\n # ```ballerina\n-# auth:setAuthenticationContext(\"jwt\", \"<credential>\");\n+# auth:setInvocationContext(\"jwt\", \"<credential>\", \"<userID>\", <scopes>, <claims>);\n # ```\n #\n # + scheme - Auth scheme (`JWT`, `LDAP`, `OAuth2`, `Basic`, etc.)\n-# + authToken - Auth token (credential)\n-public function setAuthenticationContext(string scheme, string authToken) {\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    invocationContext.authenticationContext = {\n-        scheme: scheme,\n-        authToken: authToken\n-    };\n-}\n-\n-# Sets the authentication-related values (user ID, username, scopes, claims) to the principal of the invocation context.\n-#\n+# + token - Auth token (credential)\n # + userId - User ID of the authenticated user\n-# + username - Username of the authenticated user\n-# + claims - Claims of the authenticated user\n # + scopes - Authenticated user scopes\n-public function setPrincipal(public string? userId = (), public string? username = (), public string[]? scopes = (),\n-                             public map<any>? claims = ()) {\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    if (!(userId is ()) && userId != \"\") {\n-        invocationContext.principal.userId = userId;\n+# + claims - Claims of the authenticated user\n+public function setInvocationContext(public string? scheme = (), public string? token = (),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8293c73b5bda46f3d4dea63eb8ab3c44517598"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE5MzE1Mg==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24629#discussion_r455193152", "createdAt": "2020-07-15T16:53:48Z", "author": {"login": "Bhashinee"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -72,41 +71,33 @@ public function extractUsernameAndPassword(string credential) returns [string, s\n     }\n }\n \n-# Sets the authentication-related values (scheme, auth token) to the authentication context of the invocation context.\n+# Sets the authentication-related values to the invocation context.\n # ```ballerina\n-# auth:setAuthenticationContext(\"jwt\", \"<credential>\");\n+# auth:setInvocationContext(\"jwt\", \"<credential>\", \"<userID>\", <scopes>, <claims>);\n # ```\n #\n # + scheme - Auth scheme (`JWT`, `LDAP`, `OAuth2`, `Basic`, etc.)\n-# + authToken - Auth token (credential)\n-public function setAuthenticationContext(string scheme, string authToken) {\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    invocationContext.authenticationContext = {\n-        scheme: scheme,\n-        authToken: authToken\n-    };\n-}\n-\n-# Sets the authentication-related values (user ID, username, scopes, claims) to the principal of the invocation context.\n-#\n+# + token - Auth token (credential)\n # + userId - User ID of the authenticated user\n-# + username - Username of the authenticated user\n-# + claims - Claims of the authenticated user\n # + scopes - Authenticated user scopes\n-public function setPrincipal(public string? userId = (), public string? username = (), public string[]? scopes = (),\n-                             public map<any>? claims = ()) {\n-    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-    if (!(userId is ()) && userId != \"\") {\n-        invocationContext.principal.userId = userId;\n+# + claims - Claims of the authenticated user\n+public function setInvocationContext(public string? scheme = (), public string? token = (),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyODE5NQ=="}, "originalCommit": {"oid": "bf8293c73b5bda46f3d4dea63eb8ab3c44517598"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3225, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}