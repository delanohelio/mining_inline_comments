{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMzM1MjA4", "number": 22165, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjozNDowN1rODrCt7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo0MTowN1rODrCyhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDU5ODg2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/incremental/IncrementalParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjozNDowN1rOF7KG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjozNDowN1rOF7KG6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NTkxNQ==", "bodyText": "Can we use the range here, since there will be lots of statements in future?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22165#discussion_r397575915", "createdAt": "2020-03-25T02:34:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/incremental/IncrementalParser.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.incremental;\n+\n+import io.ballerinalang.compiler.internal.parser.AbstractTokenReader;\n+import io.ballerinalang.compiler.internal.parser.BallerinaParser;\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n+\n+import java.util.function.Predicate;\n+\n+/**\n+ * An incremental parser for Ballerina.\n+ * <p>\n+ * Reuses nodes and tokens from the old tree.\n+ *\n+ * @since 1.3.0\n+ */\n+public class IncrementalParser extends BallerinaParser {\n+    private final UnmodifiedSubtreeSupplier subtreeSupplier;\n+\n+    public IncrementalParser(AbstractTokenReader tokenReader, UnmodifiedSubtreeSupplier subtreeSupplier) {\n+        super(tokenReader);\n+        this.subtreeSupplier = subtreeSupplier;\n+    }\n+\n+    protected STNode parseTopLevelNodeWithModifier(SyntaxKind tokenKind) {\n+        STNode modelLevelDecl = getIfReusable(subtreeSupplier.peek(), isModelLevelDeclaration);\n+        return modelLevelDecl != null ? modelLevelDecl : super.parseTopLevelNodeWithModifier(tokenKind);\n+    }\n+\n+    protected STNode parseFunctionBody(SyntaxKind tokenKind) {\n+        STNode funcBodyNode = getIfReusable(subtreeSupplier.peek(), isFunctionBody);\n+        return funcBodyNode != null ? funcBodyNode : super.parseFunctionBody(tokenKind);\n+    }\n+\n+    protected STNode parseStatement() {\n+        STNode stmtNode = getIfReusable(subtreeSupplier.peek(), isStatement);\n+        return stmtNode != null ? stmtNode : super.parseStatement();\n+    }\n+\n+    private STNode getIfReusable(STNode node, Predicate<SyntaxKind> predicate) {\n+        if (node != null && predicate.test(node.kind)) {\n+            this.subtreeSupplier.consume();\n+        }\n+        return node;\n+    }\n+\n+    private Predicate<SyntaxKind> isModelLevelDeclaration = kind -> kind == SyntaxKind.FUNCTION_DEFINITION ||\n+            kind == SyntaxKind.TYPE_DEFINITION;\n+\n+    private Predicate<SyntaxKind> isFunctionBody = kind ->\n+            kind == SyntaxKind.BLOCK_STATEMENT || // TODO I am not too sure about this.\n+                    kind == SyntaxKind.EXTERNAL_FUNCTION_BODY;\n+\n+    private Predicate<SyntaxKind> isStatement = kind -> kind == SyntaxKind.BLOCK_STATEMENT ||\n+            kind == SyntaxKind.IF_ELSE_STATEMENT ||\n+            kind == SyntaxKind.CALL_STATEMENT ||\n+            kind == SyntaxKind.LOCAL_VARIABLE_DECL ||\n+            kind == SyntaxKind.ASSIGNMENT_STATEMENT ||\n+            kind == SyntaxKind.WHILE_STATEMENT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3da8ed8703d44bf86b8c1179ee00576f20119cb"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDYxMDYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NonTerminalNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo0MTowN1rOF7KNrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo0MTowN1rOF7KNrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NzY0NQ==", "bodyText": "Ideally we would not need the internalToken == null check. If something is coming as null, then thats probably a bug in the parser.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22165#discussion_r397577645", "createdAt": "2020-03-25T02:41:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NonTerminalNode.java", "diffHunk": "@@ -85,12 +86,13 @@ protected int getChildPosition(int bucket) {\n \n     // Create a Token for the TextChange token in the given bucket\n     protected Token createToken(int bucket) {\n-        STNode internaltoken = this.node.childInBucket(bucket);\n-        if (internaltoken == null) {\n-            return null;\n+        STNode internalToken = this.node.childInBucket(bucket);\n+        if (internalToken == null || internalToken.kind == SyntaxKind.NONE) {\n+            // TODO Verify this change\n+            return new EmptyToken(internalToken, 0, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3da8ed8703d44bf86b8c1179ee00576f20119cb"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4533, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}