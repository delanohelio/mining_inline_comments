{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2ODA0NzE0", "number": 20740, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoyMjowNlrODdZQdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzo0Mjo0NVrODiOzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTQ5MTExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoyMjowNlrOFl-MMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNzo1MDoyMVrOFm0rYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MDU2Mw==", "bodyText": "Can we change this to private method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r375360563", "createdAt": "2020-02-05T16:22:06Z", "author": {"login": "anupama-pathirage"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -460,6 +468,14 @@ void addBuiltInReferenceType(DiagnosticPos pos, Set<Whitespace> ws, String typeN\n         addType(refType);\n     }\n \n+    void startErrorType() {\n+        this.isInErrorType++;\n+    }\n+\n+    void endErrorType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5312f3b5d20e3bd74e32ad46e1f7955a57d26d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc3OTI1NQ==", "bodyText": "This is called from the BLangParserListener. So cannot make it private", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r375779255", "createdAt": "2020-02-06T11:22:59Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -460,6 +468,14 @@ void addBuiltInReferenceType(DiagnosticPos pos, Set<Whitespace> ws, String typeN\n         addType(refType);\n     }\n \n+    void startErrorType() {\n+        this.isInErrorType++;\n+    }\n+\n+    void endErrorType() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MDU2Mw=="}, "originalCommit": {"oid": "de5312f3b5d20e3bd74e32ad46e1f7955a57d26d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwODAzNw==", "bodyText": "I don't see any usage of endErrorType() from the BLangParserListener. Only the startErrorType() is used there.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r376208037", "createdAt": "2020-02-07T04:18:52Z", "author": {"login": "anupama-pathirage"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -460,6 +468,14 @@ void addBuiltInReferenceType(DiagnosticPos pos, Set<Whitespace> ws, String typeN\n         addType(refType);\n     }\n \n+    void startErrorType() {\n+        this.isInErrorType++;\n+    }\n+\n+    void endErrorType() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MDU2Mw=="}, "originalCommit": {"oid": "de5312f3b5d20e3bd74e32ad46e1f7955a57d26d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI1MzI4MA==", "bodyText": "Sorry, my bad. Yes, you are correct, can make it private.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r376253280", "createdAt": "2020-02-07T07:50:21Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -460,6 +468,14 @@ void addBuiltInReferenceType(DiagnosticPos pos, Set<Whitespace> ws, String typeN\n         addType(refType);\n     }\n \n+    void startErrorType() {\n+        this.isInErrorType++;\n+    }\n+\n+    void endErrorType() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MDU2Mw=="}, "originalCommit": {"oid": "de5312f3b5d20e3bd74e32ad46e1f7955a57d26d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjIwMjQ2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzo0MDozMlrOFtXfIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzo0MDozMlrOFtXfIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNTA0Mw==", "bodyText": "Please create an issue for this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r383115043", "createdAt": "2020-02-24T07:40:32Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -408,12 +410,18 @@ private BLangRecordTypeNode populateRecordTypeNode(DiagnosticPos pos, Set<Whites\n         recordTypeNode.pos = pos;\n         recordTypeNode.addWS(ws);\n         recordTypeNode.isAnonymous = isAnonymous;\n+        recordTypeNode.isLocal = isInLocalDefinition();\n         this.varListStack.pop().forEach(variableNode -> {\n             recordTypeNode.addField((SimpleVariableNode) variableNode);\n         });\n         return recordTypeNode;\n     }\n \n+    private boolean isInLocalDefinition() {\n+        // TODO: When supporting local defs for errors, need to get rid of the second condition\n+        return !this.blockNodeStack.isEmpty() && this.isInErrorType <= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88ead47b42c40453cd0675c8bd0a14f86d01f3d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjIwNjEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzo0Mjo0NVrOFtXhQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNzo0Mjo0NVrOFtXhQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNTU4NQ==", "bodyText": "Add the reason field as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r383115585", "createdAt": "2020-02-24T07:42:45Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -719,9 +751,79 @@ public void visit(BLangRecordTypeNode recordTypeNode) {\n         // Add invocations for the initializers of each of the type referenced records. Here, the initializers of the\n         // referenced types are invoked on the current record type.\n \n+        if (recordTypeNode.isAnonymous && recordTypeNode.isLocal) {\n+            BLangUserDefinedType userDefinedType = desugarLocalAnonRecordTypeNode(recordTypeNode);\n+            TypeDefBuilderHelper.addTypeDefinition(recordTypeNode.type, recordTypeNode.type.tsymbol, recordTypeNode,\n+                                                   env);\n+            recordTypeNode.desugared = true;\n+            result = userDefinedType;\n+            return;\n+        }\n+\n         result = recordTypeNode;\n     }\n \n+    private BLangUserDefinedType desugarLocalAnonRecordTypeNode(BLangRecordTypeNode recordTypeNode) {\n+        return ASTBuilderUtil.createUserDefineTypeNode(recordTypeNode.symbol.name.value, recordTypeNode.type,\n+                                                       recordTypeNode.pos);\n+    }\n+\n+    @Override\n+    public void visit(BLangArrayType arrayType) {\n+        arrayType.elemtype = rewrite(arrayType.elemtype, env);\n+        result = arrayType;\n+    }\n+\n+    @Override\n+    public void visit(BLangConstrainedType constrainedType) {\n+        constrainedType.constraint = rewrite(constrainedType.constraint, env);\n+        result = constrainedType;\n+    }\n+\n+    @Override\n+    public void visit(BLangValueType valueType) {\n+        result = valueType;\n+    }\n+\n+    @Override\n+    public void visit(BLangUserDefinedType userDefinedType) {\n+        result = userDefinedType;\n+    }\n+\n+    @Override\n+    public void visit(BLangUnionTypeNode unionTypeNode) {\n+        List<BLangType> rewrittenMembers = new ArrayList<>();\n+        unionTypeNode.memberTypeNodes.forEach(typeNode -> rewrittenMembers.add(rewrite(typeNode, env)));\n+        unionTypeNode.memberTypeNodes = rewrittenMembers;\n+        result = unionTypeNode;\n+    }\n+\n+    @Override\n+    public void visit(BLangErrorType errorType) {\n+        errorType.detailType = rewrite(errorType.detailType, env);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88ead47b42c40453cd0675c8bd0a14f86d01f3d"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 566, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}