{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODk5MzM1", "number": 21440, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMDoxOFrODk65rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowMzo0NlrODoWHHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQwMzY1OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMDoxOFrOFxg3IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMDoxOFrOFxg3IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2Mjk0NQ==", "bodyText": "Extra new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r387462945", "createdAt": "2020-03-04T06:00:18Z", "author": {"login": "anupama-pathirage"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,15 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    int a = let b = 1 in b*2;\n+    io:println(\"a: \", a);\n+\n+    string greeting = string hello = \"hello \", string ballerina = \"ballerina\" in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    [int, int] v1 = [10, 20];\n+    int binding = let [int, int] [d1, d2] = v1, int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"binding: \", binding);\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQwNTQyOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMTowOVrOFxg4Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMTowOVrOFxg4Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MzE5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int a = let b = 1 in b*2;\n          \n          \n            \n                int a = let b = 1 in b * 2;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r387463194", "createdAt": "2020-03-04T06:01:09Z", "author": {"login": "anupama-pathirage"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,15 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    int a = let b = 1 in b*2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQwNjA1OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMTozMVrOFxg4eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMTozMVrOFxg4eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MzI5MA==", "bodyText": "Missing new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r387463290", "createdAt": "2020-03-04T06:01:31Z", "author": {"login": "anupama-pathirage"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let-expr binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQwNzEzOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMjoxMFrOFxg5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoxNzo0NVrOFxhI0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MzQ1MA==", "bodyText": "Why don't we have any comment for the example? That won't look good when rendering the BBE in b.io", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r387463450", "createdAt": "2020-03-04T06:02:10Z", "author": {"login": "anupama-pathirage"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,15 @@\n+import ballerina/io;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NzQ3Mw==", "bodyText": "This is just a draft PR, to get some ideas on what to include in the BBE (using let expressions in different scenarios)\nI will make sure to follow the guidelines and practices we follow on b.io once this PR is ready to be merged.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r387467473", "createdAt": "2020-03-04T06:17:45Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,15 @@\n+import ballerina/io;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MzQ1MA=="}, "originalCommit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTQ3OTAyOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozMTowMFrOFyRuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1NDoyNVrOFytI6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2MzQ3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Following is a simple let expression which involves only a single\n          \n          \n            \n                // This is a simple let expression which involves only a single\n          \n      \n    \n    \n  \n\nSince the comments are rendered on the side atm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388263479", "createdAt": "2020-03-05T12:31:00Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjY4Mw==", "bodyText": "+1, changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388712683", "createdAt": "2020-03-06T04:54:25Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2MzQ3OQ=="}, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTQ4NDI1OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozMjozMFrOFyRxOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1NDozN1rOFytJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NDI0OA==", "bodyText": "Shall we indent this line for it to be aligned with the let var declaration in the previous line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388264248", "createdAt": "2020-03-05T12:32:30Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjcxNQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388712715", "createdAt": "2020-03-06T04:54:37Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NDI0OA=="}, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTQ5MTk0OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozNToxM1rOFyR2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1NDo1MVrOFytJMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NTQ3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Use let expression with tuple binding pattern.\n          \n          \n            \n                [int, int] v1 = [10, 20];\n          \n          \n            \n                [int, int] v1 = [10, 20];\n          \n          \n            \n                // Let variable declarations can include binding patterns.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388265477", "createdAt": "2020-03-05T12:35:13Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjc1NQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388712755", "createdAt": "2020-03-06T04:54:51Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NTQ3Nw=="}, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTQ5MzU0OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozNTo0NFrOFyR28A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1NTowM1rOFytJVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NTcxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int tupleBindingResult = let [int, int] [d1, d2] = v1,\n          \n          \n            \n                                         int d3 = d1 + d2 in  d3 * 2;\n          \n          \n            \n                int tupleBindingResult = let [int, int] [d1, d2] = v1,\n          \n          \n            \n                                             int d3 = d1 + d2 \n          \n          \n            \n                                         in d3 * 2;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388265712", "createdAt": "2020-03-05T12:35:44Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjc5MA==", "bodyText": "fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388712790", "createdAt": "2020-03-06T04:55:03Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NTcxMg=="}, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTQ5Njg2OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozNjo1NlrOFyR5Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozNjo1NlrOFyR5Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NjI2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                io:println(\"tupleBindingResult: \", tupleBindingResult);\n          \n          \n            \n                io:println(\"tuple binding result: \", tupleBindingResult);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388266262", "createdAt": "2020-03-05T12:36:56Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTUxMTg2OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo0MTozOVrOFySB-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1NTozM1rOFytJng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2ODUzNg==", "bodyText": "Not sure if we need another comment if we change the above to remove tuple.\nSpecifically saying tuple and record and then ignoring error kinda seems incomplete.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388268536", "createdAt": "2020-03-05T12:41:39Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);\n+\n+    // Use let expression with record binding pattern.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjg2Mg==", "bodyText": "Remove the record binding pattern comment and added error binding pattern example.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388712862", "createdAt": "2020-03-06T04:55:33Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);\n+\n+    // Use let expression with record binding pattern.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2ODUzNg=="}, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTUxOTI5OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo0NDoyM1rOFySGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1NTo0NFrOFytJyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2OTcxMA==", "bodyText": "Shall we reformat this too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388269710", "createdAt": "2020-03-05T12:44:23Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);\n+\n+    // Use let expression with record binding pattern.\n+    int age = let Person { name: firstName, age: personAge,\n+     ...otherDetails } = getPerson() in personAge;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjkwNQ==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388712905", "createdAt": "2020-03-06T04:55:44Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);\n+\n+    // Use let expression with record binding pattern.\n+    int age = let Person { name: firstName, age: personAge,\n+     ...otherDetails } = getPerson() in personAge;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2OTcxMA=="}, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTUyMTc1OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo0NTowNVrOFySH7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1ODo1OVrOFytMWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MDA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Person person = { name: \"John\", age: 31, country: \"USA\",\n          \n          \n            \n                                  \"occupation\": \"Lawyer\" };\n          \n          \n            \n                return person;\n          \n          \n            \n                return { \n          \n          \n            \n                   name: \"John\", \n          \n          \n            \n                   age: 31, \n          \n          \n            \n                   country: \"USA\",\n          \n          \n            \n                   \"occupation\": \"Lawyer\"\n          \n          \n            \n                };", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388270062", "createdAt": "2020-03-05T12:45:05Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);\n+\n+    // Use let expression with record binding pattern.\n+    int age = let Person { name: firstName, age: personAge,\n+     ...otherDetails } = getPerson() in personAge;\n+    io:println(\"age: \", age);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}\n+\n+type Person record {\n+    string name;\n+    int age;\n+    string country;\n+};\n+\n+function getPerson() returns Person {\n+    Person person = { name: \"John\", age: 31, country: \"USA\",\n+                      \"occupation\": \"Lawyer\" };\n+    return person;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMzU2MA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388713560", "createdAt": "2020-03-06T04:58:59Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);\n+\n+    // Use let expression with record binding pattern.\n+    int age = let Person { name: firstName, age: personAge,\n+     ...otherDetails } = getPerson() in personAge;\n+    io:println(\"age: \", age);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}\n+\n+type Person record {\n+    string name;\n+    int age;\n+    string country;\n+};\n+\n+function getPerson() returns Person {\n+    Person person = { name: \"John\", age: 31, country: \"USA\",\n+                      \"occupation\": \"Lawyer\" };\n+    return person;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MDA2Mg=="}, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjU1MDA5OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwODoxNDo0NFrOFzT0Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTowMzoyNlrOF0Bm9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NjM1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This is a simple let expression which involves only a single\n          \n          \n            \n                // This is a simple let expression, which involves only a single", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r389346359", "createdAt": "2020-03-08T08:14:44Z", "author": {"login": "praneesha"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression which involves only a single", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6794b2110efbe8691c0288e670f8a04dc673db0c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NjYyOA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390096628", "createdAt": "2020-03-10T05:03:26Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression which involves only a single", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NjM1OQ=="}, "originalCommit": {"oid": "6794b2110efbe8691c0288e670f8a04dc673db0c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjU1MDMxOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.description", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwODoxNToxOFrOFzT0VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo0Mjo0M1rOF2XjoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NjM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in scope.\n          \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in the scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r389346388", "createdAt": "2020-03-08T08:15:18Z", "author": {"login": "praneesha"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let expression binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6794b2110efbe8691c0288e670f8a04dc673db0c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NjY3Ng==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390096676", "createdAt": "2020-03-10T05:03:36Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let expression binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NjM4OA=="}, "originalCommit": {"oid": "6794b2110efbe8691c0288e670f8a04dc673db0c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MzM3Nw==", "bodyText": "I don't think we need the \"the\" here. @pubudu91 thoughts?\nPlease check \"in scope\" in https://en.wikipedia.org/wiki/Scope_(computer_science)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392553377", "createdAt": "2020-03-14T03:42:43Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let expression binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NjM4OA=="}, "originalCommit": {"oid": "6794b2110efbe8691c0288e670f8a04dc673db0c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQyODMzOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyNToxNFrOF0K37A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDo0NjozNVrOF13hEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0ODQyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Declare variables using the keyword 'var` in a let expression.\n          \n          \n            \n                // Declare variables using the keyword `var` in a let expression.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390248428", "createdAt": "2020-03-10T11:25:14Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODQzMg==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392028432", "createdAt": "2020-03-13T04:46:35Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0ODQyOA=="}, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQzMTQ1OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyNjowOVrOF0K5ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyNjowOVrOF0K5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0ODg5MA==", "bodyText": "Extra line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390248890", "createdAt": "2020-03-10T11:26:09Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQ0OTA3OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozMjoyOFrOF0LE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDo0Njo0NVrOF13hKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTczMg==", "bodyText": "Can we fix formatting, something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int age = let Person { name: firstName, age: personAge,\n          \n          \n            \n                              ...otherDetails } = getPerson()\n          \n          \n            \n                          in personAge;\n          \n          \n            \n                int age = let Person {\n          \n          \n            \n                                name: firstName, \n          \n          \n            \n                                age: personAge, \n          \n          \n            \n                                ...otherDetails \n          \n          \n            \n                              } = getPerson()\n          \n          \n            \n                          in personAge;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390251732", "createdAt": "2020-03-10T11:32:28Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+\n+    int age = let Person { name: firstName, age: personAge,\n+                  ...otherDetails } = getPerson()\n+              in personAge;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODQ1OA==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392028458", "createdAt": "2020-03-13T04:46:45Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+\n+    int age = let Person { name: firstName, age: personAge,\n+                  ...otherDetails } = getPerson()\n+              in personAge;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTczMg=="}, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQ4NDAyOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0Mzo0NlrOF0LZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDo0NzowMlrOF13hXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NzEwMA==", "bodyText": "Wondering if we should use expression bodied functions here (and for getSampleError).\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function getPerson() returns Person {\n          \n          \n            \n                return {\n          \n          \n            \n                   name: \"John\",\n          \n          \n            \n                   age: 31,\n          \n          \n            \n                   country: \"USA\",\n          \n          \n            \n                   \"occupation\": \"Lawyer\"\n          \n          \n            \n                };\n          \n          \n            \n            }\n          \n          \n            \n            function getPerson() returns Person => {\n          \n          \n            \n                name: \"John\",\n          \n          \n            \n                age: 31,\n          \n          \n            \n                country: \"USA\",\n          \n          \n            \n                \"occupation\": \"Lawyer\"\n          \n          \n            \n            };", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390257100", "createdAt": "2020-03-10T11:43:46Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+\n+    int age = let Person { name: firstName, age: personAge,\n+                  ...otherDetails } = getPerson()\n+              in personAge;\n+    io:println(\"age: \", age);\n+\n+    boolean fatal = let var error(reason, ...params) = getSampleError()\n+                    in params[\"fatal\"];\n+    io:println(\"fatal: \", fatal);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}\n+\n+type Person record {\n+    string name;\n+    int age;\n+    string country;\n+};\n+\n+function getPerson() returns Person {\n+    return {\n+       name: \"John\",\n+       age: 31,\n+       country: \"USA\",\n+       \"occupation\": \"Lawyer\"\n+    };\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODUxMQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392028511", "createdAt": "2020-03-13T04:47:02Z", "author": {"login": "irshadnilam"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+\n+    int age = let Person { name: firstName, age: personAge,\n+                  ...otherDetails } = getPerson()\n+              in personAge;\n+    io:println(\"age: \", age);\n+\n+    boolean fatal = let var error(reason, ...params) = getSampleError()\n+                    in params[\"fatal\"];\n+    io:println(\"fatal: \", fatal);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}\n+\n+type Person record {\n+    string name;\n+    int age;\n+    string country;\n+};\n+\n+function getPerson() returns Person {\n+    return {\n+       name: \"John\",\n+       age: 31,\n+       country: \"USA\",\n+       \"occupation\": \"Lawyer\"\n+    };\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NzEwMA=="}, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDA1ODkxOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODoyNDo0M1rOF17DcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODoyNDo0M1rOF17DcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA4NjM4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // just after the declaration to the end of the let expression.\n          \n          \n            \n                // the point of declaration to the end of the let expression.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392086384", "createdAt": "2020-03-13T08:24:43Z", "author": {"login": "pubudu91"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwMTIyOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo0OTozOFrOF2Xk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo0OTozOFrOF2Xk8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MzcxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public function getInt() returns int {\n          \n          \n            \n                return 1;\n          \n          \n            \n            }\n          \n          \n            \n            public function getInt() returns int => 1;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392553715", "createdAt": "2020-03-14T03:49:38Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword `var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+    int age = let Person {\n+                        name: firstName,\n+                        age: personAge,\n+                        ...otherDetails\n+                      } = getPerson()\n+                  in personAge;\n+    io:println(\"age: \", age);\n+\n+    boolean fatal = let var error(reason, ...params) = getSampleError()\n+                    in params[\"fatal\"];\n+    io:println(\"fatal: \", fatal);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwMTYzOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1MDo1MFrOF2XlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1MDo1MFrOF2XlLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzc3NA==", "bodyText": "Formatting still seems off.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392553774", "createdAt": "2020-03-14T03:50:50Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword `var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+    int age = let Person {\n+                        name: firstName,\n+                        age: personAge,\n+                        ...otherDetails\n+                      } = getPerson()\n+                  in personAge;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwMTc3OnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1MTowNVrOF2XlRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1OTowMFrOF21WIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzc5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return error(\"Sample Error\", info = \"Detail Msg\", fatal = true);\n          \n          \n            \n                return error(\"SampleError\", message = \"Detail message\", fatal = true);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392553796", "createdAt": "2020-03-14T03:51:05Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword `var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+    int age = let Person {\n+                        name: firstName,\n+                        age: personAge,\n+                        ...otherDetails\n+                      } = getPerson()\n+                  in personAge;\n+    io:println(\"age: \", age);\n+\n+    boolean fatal = let var error(reason, ...params) = getSampleError()\n+                    in params[\"fatal\"];\n+    io:println(\"fatal: \", fatal);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}\n+\n+type Person record {\n+    string name;\n+    int age;\n+    string country;\n+};\n+\n+function getPerson() returns Person => {\n+    name: \"John\",\n+    age: 31,\n+    country: \"USA\",\n+    \"occupation\": \"Lawyer\"\n+};\n+\n+function getSampleError() returns error {\n+    return error(\"Sample Error\", info = \"Detail Msg\", fatal = true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MTQ0Mw==", "bodyText": "@irshadnilam, can't seem to see these changes? Shall we update?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r393041443", "createdAt": "2020-03-16T13:59:00Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword `var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+    int age = let Person {\n+                        name: firstName,\n+                        age: personAge,\n+                        ...otherDetails\n+                      } = getPerson()\n+                  in personAge;\n+    io:println(\"age: \", age);\n+\n+    boolean fatal = let var error(reason, ...params) = getSampleError()\n+                    in params[\"fatal\"];\n+    io:println(\"fatal: \", fatal);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}\n+\n+type Person record {\n+    string name;\n+    int age;\n+    string country;\n+};\n+\n+function getPerson() returns Person => {\n+    name: \"John\",\n+    age: 31,\n+    country: \"USA\",\n+    \"occupation\": \"Lawyer\"\n+};\n+\n+function getSampleError() returns error {\n+    return error(\"Sample Error\", info = \"Detail Msg\", fatal = true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzc5Ng=="}, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzk1MzYzOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNDo0MDo0NFrOF2fSxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNDo0MDo0NFrOF2fSxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4MDEzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in the scope.\n          \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392680135", "createdAt": "2020-03-15T14:40:44Z", "author": {"login": "pubudu91"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let expression binds variables and then evaluates an expression with those variables in the scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjMxOTAwOnYy", "diffSide": "RIGHT", "path": "examples/let-expression/let_expression.description", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowMzo0NlrOF21i6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowMzo0NlrOF21i6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NDcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in scope.\n          \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r393044713", "createdAt": "2020-03-16T14:03:46Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let expression binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7913111006ff115b3c141f72376dcdf4417c90"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 897, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}