{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NzUxNTEz", "number": 26152, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjo1NDo0OVrOEqJeAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjo1Nzo1NlrOEqJfjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjMwNzg0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjo1NDo0OVrOHcMZOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTozNjo1M1rOHc2jZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMyNTI0MA==", "bodyText": "As a practice, let's try to get each of the stream operations to a new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26152#discussion_r499325240", "createdAt": "2020-10-05T02:54:49Z", "author": {"login": "nadeeshaan"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "diffHunk": "@@ -356,15 +360,18 @@ private void setBreakpoints(List<BallerinaTestDebugPoint> breakPoints) throws Ba\n                     .stackTrace(stackTraceArgs);\n             StackFrame[] stackFrames = stackTraceResp.getStackFrames();\n             if (stackFrames.length == 0) {\n-                return new Variable[0];\n+                return variables;\n+            }\n+            if (scope == VariableScope.LOCAL) {\n+                scopeArgs.setFrameId(stackFrames[0].getId());\n+            } else {\n+                scopeArgs.setFrameId(-stackFrames[0].getId());\n             }\n-\n-            scopeArgs.setFrameId(stackFrames[0].getId());\n             ScopesResponse scopesResp = DebugHitListener.connector.getRequestManager().scopes(scopeArgs);\n             variableArgs.setVariablesReference(scopesResp.getScopes()[0].getVariablesReference());\n             VariablesResponse variableResp = DebugHitListener.connector.getRequestManager().variables(variableArgs);\n-            return variableResp.getVariables();\n-\n+            Arrays.stream(variableResp.getVariables()).forEach(variable -> variables.put(variable.getName(), variable));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59fedee76ca6ee0ec8684c63bad65424203dc21"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxNTk3Mg==", "bodyText": "Kept it inline as there's only one stream operation in here. changed with db9e03c.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26152#discussion_r500015972", "createdAt": "2020-10-06T05:36:53Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "diffHunk": "@@ -356,15 +360,18 @@ private void setBreakpoints(List<BallerinaTestDebugPoint> breakPoints) throws Ba\n                     .stackTrace(stackTraceArgs);\n             StackFrame[] stackFrames = stackTraceResp.getStackFrames();\n             if (stackFrames.length == 0) {\n-                return new Variable[0];\n+                return variables;\n+            }\n+            if (scope == VariableScope.LOCAL) {\n+                scopeArgs.setFrameId(stackFrames[0].getId());\n+            } else {\n+                scopeArgs.setFrameId(-stackFrames[0].getId());\n             }\n-\n-            scopeArgs.setFrameId(stackFrames[0].getId());\n             ScopesResponse scopesResp = DebugHitListener.connector.getRequestManager().scopes(scopeArgs);\n             variableArgs.setVariablesReference(scopesResp.getScopes()[0].getVariablesReference());\n             VariablesResponse variableResp = DebugHitListener.connector.getRequestManager().variables(variableArgs);\n-            return variableResp.getVariables();\n-\n+            Arrays.stream(variableResp.getVariables()).forEach(variable -> variables.put(variable.getName(), variable));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMyNTI0MA=="}, "originalCommit": {"oid": "a59fedee76ca6ee0ec8684c63bad65424203dc21"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjMxMTgzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjo1Nzo1NlrOHcMbYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTozNzoxMlrOHc2jxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMyNTc5NA==", "bodyText": "May be we can use the conditional operator here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26152#discussion_r499325794", "createdAt": "2020-10-05T02:57:56Z", "author": {"login": "nadeeshaan"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "diffHunk": "@@ -356,15 +360,18 @@ private void setBreakpoints(List<BallerinaTestDebugPoint> breakPoints) throws Ba\n                     .stackTrace(stackTraceArgs);\n             StackFrame[] stackFrames = stackTraceResp.getStackFrames();\n             if (stackFrames.length == 0) {\n-                return new Variable[0];\n+                return variables;\n+            }\n+            if (scope == VariableScope.LOCAL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59fedee76ca6ee0ec8684c63bad65424203dc21"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxNjA3MQ==", "bodyText": "Done via db9e03c", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26152#discussion_r500016071", "createdAt": "2020-10-06T05:37:12Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "diffHunk": "@@ -356,15 +360,18 @@ private void setBreakpoints(List<BallerinaTestDebugPoint> breakPoints) throws Ba\n                     .stackTrace(stackTraceArgs);\n             StackFrame[] stackFrames = stackTraceResp.getStackFrames();\n             if (stackFrames.length == 0) {\n-                return new Variable[0];\n+                return variables;\n+            }\n+            if (scope == VariableScope.LOCAL) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMyNTc5NA=="}, "originalCommit": {"oid": "a59fedee76ca6ee0ec8684c63bad65424203dc21"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4850, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}