{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NjI5ODAy", "number": 22692, "title": "Fix runtime error in optional field access", "bodyText": "Purpose\n$subject\nFixes #22451\nFixes #22676\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-16T19:13:49Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692", "merged": true, "mergeCommit": {"oid": "c8a34bcbf24538865f13cbe1b663af80bf9e5a68"}, "closed": true, "closedAt": "2020-05-13T21:22:49Z", "author": {"login": "KavinduZoysa"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYY67UgBqjMyNDI3MDc1MDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg9DWyAFqTQxMTE2ODk2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1aa8d577cc1571d11d3bd575868ea0c1a9efa369", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1aa8d577cc1571d11d3bd575868ea0c1a9efa369", "committedDate": "2020-04-16T19:09:26Z", "message": "Fix error in optional field access"}, "afterCommit": {"oid": "129576a43770f6619619b2c1c836639b5481d9b2", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/129576a43770f6619619b2c1c836639b5481d9b2", "committedDate": "2020-04-17T03:41:29Z", "message": "Fix error in optional field access"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "129576a43770f6619619b2c1c836639b5481d9b2", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/129576a43770f6619619b2c1c836639b5481d9b2", "committedDate": "2020-04-17T03:41:29Z", "message": "Fix error in optional field access"}, "afterCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f686147f125306f9e2d77e13a9acb95ded3dc37", "committedDate": "2020-04-17T08:24:35Z", "message": "Fix error in optional field access"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTk2OTI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#pullrequestreview-396996925", "createdAt": "2020-04-21T05:29:13Z", "commit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNToyOToxM1rOGIzJ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjozNjoyMVrOGI09lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3OTkyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Foo1 f = { s1: \"s\", i1: 1};\n          \n          \n            \n                Foo1 f = {s1: \"s\", i1: 1};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411879923", "createdAt": "2020-04-21T05:29:13Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/access/optional_field_access.bal", "diffHunk": "@@ -331,3 +333,41 @@ function testJsonOptionalFieldAccessOnInvocation() returns boolean {\n function getJson() returns json {\n     return { x: { y: 1 } };\n }\n+\n+type Foo1 record {|\n+    string s1;\n+    int i1;\n+|};\n+\n+type Bar1 record {|\n+    string s2;\n+    int i2;\n+|};\n+\n+function testOptionalFieldAccessInUnionType1() {\n+    Foo1 f = { s1: \"s\", i1: 1};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MTQyMQ==", "bodyText": "This is member-access, not optional-field-access. Shall we move these tests to member-access tests and add some optional field access tests here? Please include some optional field tests for both too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411881421", "createdAt": "2020-04-21T05:33:16Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/access/optional_field_access.bal", "diffHunk": "@@ -331,3 +333,41 @@ function testJsonOptionalFieldAccessOnInvocation() returns boolean {\n function getJson() returns json {\n     return { x: { y: 1 } };\n }\n+\n+type Foo1 record {|\n+    string s1;\n+    int i1;\n+|};\n+\n+type Bar1 record {|\n+    string s2;\n+    int i2;\n+|};\n+\n+function testOptionalFieldAccessInUnionType1() {\n+    Foo1 f = { s1: \"s\", i1: 1};\n+    Foo1|Bar1? fb = f;\n+\n+    string|int? x1 = fb[\"s1\"];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MjY0MQ==", "bodyText": "This is similar to the previous test but with a Bar1 instead of a Foo1 right?\nShall we change this a bit and make fb to be of type Foo1|Bar1 instead? Without the ().", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411882641", "createdAt": "2020-04-21T05:36:34Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/access/optional_field_access.bal", "diffHunk": "@@ -331,3 +333,41 @@ function testJsonOptionalFieldAccessOnInvocation() returns boolean {\n function getJson() returns json {\n     return { x: { y: 1 } };\n }\n+\n+type Foo1 record {|\n+    string s1;\n+    int i1;\n+|};\n+\n+type Bar1 record {|\n+    string s2;\n+    int i2;\n+|};\n+\n+function testOptionalFieldAccessInUnionType1() {\n+    Foo1 f = { s1: \"s\", i1: 1};\n+    Foo1|Bar1? fb = f;\n+\n+    string|int? x1 = fb[\"s1\"];\n+    string|int? x2 = fb[\"i1\"];\n+    string|int? x3 = fb[\"s2\"];\n+    string|int? x4 = fb[\"i2\"];\n+\n+    if !(x1 == \"s\" && x2 == 1 && x3 == () && x4 == ()) {\n+        panic error(ASSERTION_ERROR_REASON, message = \"expected 'true', found 'false'\");\n+    }\n+}\n+\n+function testOptionalFieldAccessInUnionType2() {\n+    Bar1 b = { s2: \"s\", i2: 1};\n+    Foo1|Bar1? fb = b;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MzE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Bar1 b = { s2: \"s\", i2: 1};\n          \n          \n            \n                Bar1 b = {s2: \"s\", i2: 1};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411883143", "createdAt": "2020-04-21T05:38:01Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/access/optional_field_access.bal", "diffHunk": "@@ -331,3 +333,41 @@ function testJsonOptionalFieldAccessOnInvocation() returns boolean {\n function getJson() returns json {\n     return { x: { y: 1 } };\n }\n+\n+type Foo1 record {|\n+    string s1;\n+    int i1;\n+|};\n+\n+type Bar1 record {|\n+    string s2;\n+    int i2;\n+|};\n+\n+function testOptionalFieldAccessInUnionType1() {\n+    Foo1 f = { s1: \"s\", i1: 1};\n+    Foo1|Bar1? fb = f;\n+\n+    string|int? x1 = fb[\"s1\"];\n+    string|int? x2 = fb[\"i1\"];\n+    string|int? x3 = fb[\"s2\"];\n+    string|int? x4 = fb[\"i2\"];\n+\n+    if !(x1 == \"s\" && x2 == 1 && x3 == () && x4 == ()) {\n+        panic error(ASSERTION_ERROR_REASON, message = \"expected 'true', found 'false'\");\n+    }\n+}\n+\n+function testOptionalFieldAccessInUnionType2() {\n+    Bar1 b = { s2: \"s\", i2: 1};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4Mzg0Nw==", "bodyText": "I suggest we make these closed records for the time-being, since they'll most likely result in a compilation error with changes for #22800.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411883847", "createdAt": "2020-04-21T05:39:52Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/access/field_access.bal", "diffHunk": "@@ -272,3 +274,41 @@ function testJsonFieldAccessOnInvocation() returns boolean {\n function getJson() returns json {\n     return { x: { y: 1 } };\n }\n+\n+type Foo1 record {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4NDcxMA==", "bodyText": "To minimize the Java code we can intro in the test file\nfunction testFieldAccessInUnionType() {\n    testOptionalFieldAccessInUnionType1();\n    testOptionalFieldAccessInUnionType2();\n}\nand here just do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test\n          \n          \n            \n                public void testOptionalFieldAccessInUnionType1() {\n          \n          \n            \n                    BRunUtil.invoke(result, \"testOptionalFieldAccessInUnionType1\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Test\n          \n          \n            \n                public void testOptionalFieldAccessInUnionType2() {\n          \n          \n            \n                    BRunUtil.invoke(result, \"testOptionalFieldAccessInUnionType2\");\n          \n          \n            \n                }\n          \n          \n            \n                @Test\n          \n          \n            \n                public void testFieldAccessInUnionType() {\n          \n          \n            \n                    BRunUtil.invoke(result, \"testFieldAccessInUnionType\");\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411884710", "createdAt": "2020-04-21T05:41:57Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/access/OptionalFieldAccessTest.java", "diffHunk": "@@ -132,4 +132,14 @@ public void testOptionalFieldAccessOnInvocation(String function) {\n                 { \"testJsonOptionalFieldAccessOnInvocation\" }\n         };\n     }\n+\n+    @Test\n+    public void testOptionalFieldAccessInUnionType1() {\n+        BRunUtil.invoke(result, \"testOptionalFieldAccessInUnionType1\");\n+    }\n+\n+    @Test\n+    public void testOptionalFieldAccessInUnionType2() {\n+        BRunUtil.invoke(result, \"testOptionalFieldAccessInUnionType2\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg5NTExMA==", "bodyText": "Shall we rename \n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n    \n    \n         Line 4255\n      in\n      8b26828\n    \n    \n    \n    \n\n        \n          \n           private BType addNilForNillableIndexBasedAccess(BType actualType) { \n        \n    \n  \n\n and use that instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411895110", "createdAt": "2020-04-21T06:06:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4381,16 +4381,23 @@ private BType checkOptionalRecordFieldAccessExpr(BLangFieldBasedAccess fieldAcce\n \n         LinkedHashSet<BType> fieldTypeMembers = new LinkedHashSet<>();\n \n+        boolean nonMatchedRecordExists = false;\n+\n         for (BType memType : memberTypes) {\n             BType individualFieldType = checkOptionalRecordFieldAccessExpr(fieldAccessExpr, memType, fieldName);\n \n             if (individualFieldType == symTable.semanticError) {\n+                nonMatchedRecordExists = true;\n                 continue;\n             }\n \n             fieldTypeMembers.add(individualFieldType);\n         }\n \n+        if (nonMatchedRecordExists) {\n+            fieldTypeMembers.add(symTable.nilType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg5Njc4Mg==", "bodyText": "Can we work with a LinkedHashSet instead? We don't need the union type right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411896782", "createdAt": "2020-04-21T06:10:35Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5856,31 +5856,92 @@ private void handleSafeNavigation(BLangAccessExpression accessExpr, BType type,\n \n         BLangMatch matchStmt = ASTBuilderUtil.createMatchStatement(accessExpr.pos, accessExpr.expr, new ArrayList<>());\n \n+        boolean allRecords = false;\n+        BUnionType errorLiftedType = BUnionType.create(null, new LinkedHashSet<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwMDIzOA==", "bodyText": "IMO the method name does not say much about what the method actually does, and the variable name kinda implies the check returns if all the members are records, which from the impl. doesn't seem to be the case. Can we rename?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411900238", "createdAt": "2020-04-21T06:18:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5856,31 +5856,92 @@ private void handleSafeNavigation(BLangAccessExpression accessExpr, BType type,\n \n         BLangMatch matchStmt = ASTBuilderUtil.createMatchStatement(accessExpr.pos, accessExpr.expr, new ArrayList<>());\n \n+        boolean allRecords = false;\n+        BUnionType errorLiftedType = BUnionType.create(null, new LinkedHashSet<>());\n+        if (accessExpr.expr.type.tag == TypeTags.UNION) {\n+            LinkedHashSet<BType> memTypes = new LinkedHashSet<>(((BUnionType) accessExpr.expr.type).getMemberTypes());\n+            errorLiftedType = BUnionType.create(null, memTypes);\n+            allRecords = checkForRecords(memTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwMjE2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        successPattern = getSuccessPattern(accessExpr, tempResultVar,\n          \n          \n            \n                                accessExpr.errorSafeNavigation);\n          \n          \n            \n                        successPattern = getSuccessPattern(accessExpr, tempResultVar, accessExpr.errorSafeNavigation);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411902165", "createdAt": "2020-04-21T06:22:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5856,31 +5856,92 @@ private void handleSafeNavigation(BLangAccessExpression accessExpr, BType type,\n \n         BLangMatch matchStmt = ASTBuilderUtil.createMatchStatement(accessExpr.pos, accessExpr.expr, new ArrayList<>());\n \n+        boolean allRecords = false;\n+        BUnionType errorLiftedType = BUnionType.create(null, new LinkedHashSet<>());\n+        if (accessExpr.expr.type.tag == TypeTags.UNION) {\n+            LinkedHashSet<BType> memTypes = new LinkedHashSet<>(((BUnionType) accessExpr.expr.type).getMemberTypes());\n+            errorLiftedType = BUnionType.create(null, memTypes);\n+            allRecords = checkForRecords(memTypes);\n+        }\n+\n         // Add pattern to lift nil\n         if (accessExpr.nilSafeNavigation) {\n             matchStmt.patternClauses.add(getMatchNullPattern(accessExpr, tempResultVar));\n             matchStmt.type = type;\n+            errorLiftedType.remove(symTable.nilType);\n         }\n \n         // Add pattern to lift error, only if the safe navigation is used\n         if (accessExpr.errorSafeNavigation) {\n             matchStmt.patternClauses.add(getMatchErrorPattern(accessExpr, tempResultVar));\n             matchStmt.type = type;\n             matchStmt.pos = accessExpr.pos;\n+            errorLiftedType.remove(symTable.errorType);\n+        }\n+\n+        BLangMatchTypedBindingPatternClause successPattern = null;\n+        Name field = getFieldName(accessExpr);\n+        if (field == Names.EMPTY) {\n+            successPattern = getSuccessPattern(accessExpr, tempResultVar,\n+                    accessExpr.errorSafeNavigation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNDY4OA==", "bodyText": "Do we need to do this? Can we not just iterate through the fields of the BRecordType and figure out if the field exists?\nsymResolver.resolveStructField could log errors right, even thought it may not atm?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411904688", "createdAt": "2020-04-21T06:27:13Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5856,31 +5856,92 @@ private void handleSafeNavigation(BLangAccessExpression accessExpr, BType type,\n \n         BLangMatch matchStmt = ASTBuilderUtil.createMatchStatement(accessExpr.pos, accessExpr.expr, new ArrayList<>());\n \n+        boolean allRecords = false;\n+        BUnionType errorLiftedType = BUnionType.create(null, new LinkedHashSet<>());\n+        if (accessExpr.expr.type.tag == TypeTags.UNION) {\n+            LinkedHashSet<BType> memTypes = new LinkedHashSet<>(((BUnionType) accessExpr.expr.type).getMemberTypes());\n+            errorLiftedType = BUnionType.create(null, memTypes);\n+            allRecords = checkForRecords(memTypes);\n+        }\n+\n         // Add pattern to lift nil\n         if (accessExpr.nilSafeNavigation) {\n             matchStmt.patternClauses.add(getMatchNullPattern(accessExpr, tempResultVar));\n             matchStmt.type = type;\n+            errorLiftedType.remove(symTable.nilType);\n         }\n \n         // Add pattern to lift error, only if the safe navigation is used\n         if (accessExpr.errorSafeNavigation) {\n             matchStmt.patternClauses.add(getMatchErrorPattern(accessExpr, tempResultVar));\n             matchStmt.type = type;\n             matchStmt.pos = accessExpr.pos;\n+            errorLiftedType.remove(symTable.errorType);\n+        }\n+\n+        BLangMatchTypedBindingPatternClause successPattern = null;\n+        Name field = getFieldName(accessExpr);\n+        if (field == Names.EMPTY) {\n+            successPattern = getSuccessPattern(accessExpr, tempResultVar,\n+                    accessExpr.errorSafeNavigation);\n+            matchStmt.patternClauses.add(successPattern);\n+            pushToMatchStatementStack(matchStmt, accessExpr, successPattern);\n+            return;\n+        }\n \n+        if (allRecords) {\n+            for (BType memberType : errorLiftedType.getMemberTypes()) {\n+                BSymbol fieldSymbol = symResolver.resolveStructField(accessExpr.pos, this.env, field,\n+                        memberType.tsymbol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNDc4NQ==", "bodyText": "@pubudu91 thoughts?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411904785", "createdAt": "2020-04-21T06:27:24Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5856,31 +5856,92 @@ private void handleSafeNavigation(BLangAccessExpression accessExpr, BType type,\n \n         BLangMatch matchStmt = ASTBuilderUtil.createMatchStatement(accessExpr.pos, accessExpr.expr, new ArrayList<>());\n \n+        boolean allRecords = false;\n+        BUnionType errorLiftedType = BUnionType.create(null, new LinkedHashSet<>());\n+        if (accessExpr.expr.type.tag == TypeTags.UNION) {\n+            LinkedHashSet<BType> memTypes = new LinkedHashSet<>(((BUnionType) accessExpr.expr.type).getMemberTypes());\n+            errorLiftedType = BUnionType.create(null, memTypes);\n+            allRecords = checkForRecords(memTypes);\n+        }\n+\n         // Add pattern to lift nil\n         if (accessExpr.nilSafeNavigation) {\n             matchStmt.patternClauses.add(getMatchNullPattern(accessExpr, tempResultVar));\n             matchStmt.type = type;\n+            errorLiftedType.remove(symTable.nilType);\n         }\n \n         // Add pattern to lift error, only if the safe navigation is used\n         if (accessExpr.errorSafeNavigation) {\n             matchStmt.patternClauses.add(getMatchErrorPattern(accessExpr, tempResultVar));\n             matchStmt.type = type;\n             matchStmt.pos = accessExpr.pos;\n+            errorLiftedType.remove(symTable.errorType);\n+        }\n+\n+        BLangMatchTypedBindingPatternClause successPattern = null;\n+        Name field = getFieldName(accessExpr);\n+        if (field == Names.EMPTY) {\n+            successPattern = getSuccessPattern(accessExpr, tempResultVar,\n+                    accessExpr.errorSafeNavigation);\n+            matchStmt.patternClauses.add(successPattern);\n+            pushToMatchStatementStack(matchStmt, accessExpr, successPattern);\n+            return;\n+        }\n \n+        if (allRecords) {\n+            for (BType memberType : errorLiftedType.getMemberTypes()) {\n+                BSymbol fieldSymbol = symResolver.resolveStructField(accessExpr.pos, this.env, field,\n+                        memberType.tsymbol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNDY4OA=="}, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNjI2Nw==", "bodyText": "Shall we rename this to indicate it returns () on match all?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411906267", "createdAt": "2020-04-21T06:30:18Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5939,6 +6000,25 @@ private BLangMatchTypedBindingPatternClause getMatchNullPattern(BLangExpression\n         return nullPattern;\n     }\n \n+    private BLangMatchStaticBindingPatternClause getMatchAllPattern(BLangExpression expr,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNjM4Nw==", "bodyText": "Variable name. :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411906387", "createdAt": "2020-04-21T06:30:30Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5939,6 +6000,25 @@ private BLangMatchTypedBindingPatternClause getMatchNullPattern(BLangExpression\n         return nullPattern;\n     }\n \n+    private BLangMatchStaticBindingPatternClause getMatchAllPattern(BLangExpression expr,\n+                                                                    BLangSimpleVariable tempResultVar) {\n+\n+        BLangVariableReference tempResultVarRef = ASTBuilderUtil.createVariableRef(expr.pos, tempResultVar.symbol);\n+        BLangAssignment assignmentStmt =\n+                ASTBuilderUtil.createAssignmentStmt(expr.pos, tempResultVarRef, createLiteral(expr.pos,\n+                        symTable.nilType, Names.NIL_VALUE), false);\n+        BLangBlockStmt patternBody = ASTBuilderUtil.createBlockStmt(expr.pos, Lists.of(assignmentStmt));\n+\n+        BLangMatchStaticBindingPatternClause c =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwOTUyNA==", "bodyText": "This seems to be duplicating quite a bit of code from getSuccessPattern. Can we try and refactor getSuccessPattern instead to handle the record scenario?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411909524", "createdAt": "2020-04-21T06:36:21Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5987,6 +6067,62 @@ private BLangMatchTypedBindingPatternClause getSuccessPattern(BLangAccessExpress\n         return successPattern;\n     }\n \n+    private BLangMatchTypedBindingPatternClause getSuccessPatternRecordMatch(BType type,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDY0MzM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#pullrequestreview-397064335", "createdAt": "2020-04-21T07:37:25Z", "commit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzozNzoyNVrOGI3Lyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzozNzoyNVrOGI3Lyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk0NTkzMA==", "bodyText": "What's this condition about?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r411945930", "createdAt": "2020-04-21T07:37:25Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5856,31 +5856,92 @@ private void handleSafeNavigation(BLangAccessExpression accessExpr, BType type,\n \n         BLangMatch matchStmt = ASTBuilderUtil.createMatchStatement(accessExpr.pos, accessExpr.expr, new ArrayList<>());\n \n+        boolean allRecords = false;\n+        BUnionType errorLiftedType = BUnionType.create(null, new LinkedHashSet<>());\n+        if (accessExpr.expr.type.tag == TypeTags.UNION) {\n+            LinkedHashSet<BType> memTypes = new LinkedHashSet<>(((BUnionType) accessExpr.expr.type).getMemberTypes());\n+            errorLiftedType = BUnionType.create(null, memTypes);\n+            allRecords = checkForRecords(memTypes);\n+        }\n+\n         // Add pattern to lift nil\n         if (accessExpr.nilSafeNavigation) {\n             matchStmt.patternClauses.add(getMatchNullPattern(accessExpr, tempResultVar));\n             matchStmt.type = type;\n+            errorLiftedType.remove(symTable.nilType);\n         }\n \n         // Add pattern to lift error, only if the safe navigation is used\n         if (accessExpr.errorSafeNavigation) {\n             matchStmt.patternClauses.add(getMatchErrorPattern(accessExpr, tempResultVar));\n             matchStmt.type = type;\n             matchStmt.pos = accessExpr.pos;\n+            errorLiftedType.remove(symTable.errorType);\n+        }\n+\n+        BLangMatchTypedBindingPatternClause successPattern = null;\n+        Name field = getFieldName(accessExpr);\n+        if (field == Names.EMPTY) {\n+            successPattern = getSuccessPattern(accessExpr, tempResultVar,\n+                    accessExpr.errorSafeNavigation);\n+            matchStmt.patternClauses.add(successPattern);\n+            pushToMatchStatementStack(matchStmt, accessExpr, successPattern);\n+            return;\n+        }\n \n+        if (allRecords) {\n+            for (BType memberType : errorLiftedType.getMemberTypes()) {\n+                BSymbol fieldSymbol = symResolver.resolveStructField(accessExpr.pos, this.env, field,\n+                        memberType.tsymbol);\n+                if (fieldSymbol != symTable.notFoundSymbol) {\n+                    successPattern = getSuccessPatternRecordMatch(memberType, accessExpr, tempResultVar);\n+                    matchStmt.patternClauses.add(successPattern);\n+                }\n+            }\n+            matchStmt.patternClauses.add(getMatchAllPattern(accessExpr, tempResultVar));\n+            pushToMatchStatementStack(matchStmt, accessExpr, successPattern);\n+            return;\n         }\n \n         // Create the pattern for success scenario. i.e: not null and not error (if applicable).\n-        BLangMatchTypedBindingPatternClause successPattern =\n+        successPattern =\n                 getSuccessPattern(accessExpr, tempResultVar, accessExpr.errorSafeNavigation);\n         matchStmt.patternClauses.add(successPattern);\n+        pushToMatchStatementStack(matchStmt, accessExpr, successPattern);\n+    }\n+\n+    private void pushToMatchStatementStack(BLangMatch matchStmt, BLangAccessExpression accessExpr,\n+                                           BLangMatchTypedBindingPatternClause successPattern) {\n         this.matchStmtStack.push(matchStmt);\n         if (this.successPattern != null) {\n             this.successPattern.body = ASTBuilderUtil.createBlockStmt(accessExpr.pos, Lists.of(matchStmt));\n         }\n         this.successPattern = successPattern;\n     }\n \n+    private Name getFieldName(BLangAccessExpression accessExpr) {\n+        Name field = Names.EMPTY;\n+        if (accessExpr.getKind() == NodeKind.FIELD_BASED_ACCESS_EXPR) {\n+            field = new Name(((BLangFieldBasedAccess) accessExpr).field.value);\n+        } else if (accessExpr.getKind() == NodeKind.INDEX_BASED_ACCESS_EXPR) {\n+            BLangExpression indexBasedExpression = ((BLangIndexBasedAccess) accessExpr).indexExpr;\n+            if (indexBasedExpression.getKind() == NodeKind.LITERAL) {\n+                field = new Name(((BLangLiteral) indexBasedExpression).value.toString());\n+            }\n+        }\n+        return field;\n+    }\n+\n+    private boolean checkForRecords(LinkedHashSet<BType> memTypes) {\n+        for (BType memType : memTypes) {\n+            int typeTag = memType.tag;\n+            if (typeTag != TypeTags.RECORD && typeTag != TypeTags.ERROR && typeTag != TypeTags.NIL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f686147f125306f9e2d77e13a9acb95ded3dc37"}, "originalPosition": 84}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0aaf20136cc4d0cdbf8942bf04a8eee2a7ae7c08", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0aaf20136cc4d0cdbf8942bf04a8eee2a7ae7c08", "committedDate": "2020-04-21T07:32:29Z", "message": "Fix suggested changes"}, "afterCommit": {"oid": "23e7d5270cebd94edddb8f7f02020f1b5ec5c0df", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23e7d5270cebd94edddb8f7f02020f1b5ec5c0df", "committedDate": "2020-04-21T08:20:36Z", "message": "Fix suggested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a058edadeb763ac6f8e6541531163a73dd96bdd", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a058edadeb763ac6f8e6541531163a73dd96bdd", "committedDate": "2020-04-23T17:38:40Z", "message": "Fix error in optional field access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56e73221aee3fff7fa317c2c94c5ab9411f0f399", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/56e73221aee3fff7fa317c2c94c5ab9411f0f399", "committedDate": "2020-04-23T17:38:40Z", "message": "Fix suggested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ba9be60dd3460dd5abe34cacbb1cd7ffa7eae2b", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ba9be60dd3460dd5abe34cacbb1cd7ffa7eae2b", "committedDate": "2020-04-23T17:38:40Z", "message": "Refactor tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "342fc785cd686c57e1639d4111e4aa146e663e2d", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/342fc785cd686c57e1639d4111e4aa146e663e2d", "committedDate": "2020-04-23T10:23:17Z", "message": "Refactor desugering"}, "afterCommit": {"oid": "d39f3d47c5f24b4e02fd3bc37839ffb0a06cf6d1", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d39f3d47c5f24b4e02fd3bc37839ffb0a06cf6d1", "committedDate": "2020-04-23T17:38:40Z", "message": "Refactor desugering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c11c154a47857501b654661381ae453f1809e9d0", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c11c154a47857501b654661381ae453f1809e9d0", "committedDate": "2020-04-23T17:58:43Z", "message": "Refactor desugering"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d39f3d47c5f24b4e02fd3bc37839ffb0a06cf6d1", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d39f3d47c5f24b4e02fd3bc37839ffb0a06cf6d1", "committedDate": "2020-04-23T17:38:40Z", "message": "Refactor desugering"}, "afterCommit": {"oid": "c11c154a47857501b654661381ae453f1809e9d0", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c11c154a47857501b654661381ae453f1809e9d0", "committedDate": "2020-04-23T17:58:43Z", "message": "Refactor desugering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2583b09a386bcb84f8d17b40d2eef175bb28cbdb", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2583b09a386bcb84f8d17b40d2eef175bb28cbdb", "committedDate": "2020-04-24T09:07:53Z", "message": "Find the existance of record field in another function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e27c6158e6b341bdbdf89f3d322b21ccf6baa743", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e27c6158e6b341bdbdf89f3d322b21ccf6baa743", "committedDate": "2020-04-24T08:41:28Z", "message": "Find the existance of record field in another function"}, "afterCommit": {"oid": "2583b09a386bcb84f8d17b40d2eef175bb28cbdb", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2583b09a386bcb84f8d17b40d2eef175bb28cbdb", "committedDate": "2020-04-24T09:07:53Z", "message": "Find the existance of record field in another function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODY4Mzkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#pullrequestreview-408868391", "createdAt": "2020-05-11T05:29:06Z", "commit": {"oid": "2583b09a386bcb84f8d17b40d2eef175bb28cbdb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTY4OTYz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#pullrequestreview-411168963", "createdAt": "2020-05-13T17:59:43Z", "commit": {"oid": "2583b09a386bcb84f8d17b40d2eef175bb28cbdb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzo1OTo0M1rOGU9P4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxNjoyMFrOGU92jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODE5NA==", "bodyText": "IMO isAllTypesAreRecordsInUnion still doesn't reflect the actual check. Can we rename?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r424628194", "createdAt": "2020-05-13T17:59:43Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5869,31 +5869,99 @@ private void handleSafeNavigation(BLangAccessExpression accessExpr, BType type,\n \n         BLangMatch matchStmt = ASTBuilderUtil.createMatchStatement(accessExpr.pos, accessExpr.expr, new ArrayList<>());\n \n+        boolean isAllTypesRecords = false;\n+        LinkedHashSet<BType> memTypes = new LinkedHashSet<>();\n+        if (accessExpr.expr.type.tag == TypeTags.UNION) {\n+            memTypes = new LinkedHashSet<>(((BUnionType) accessExpr.expr.type).getMemberTypes());\n+            isAllTypesRecords = isAllTypesAreRecordsInUnion(memTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2583b09a386bcb84f8d17b40d2eef175bb28cbdb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMDczMg==", "bodyText": "Is this used?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r424630732", "createdAt": "2020-05-13T18:04:02Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/access/field_access.bal", "diffHunk": "@@ -14,6 +14,8 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+const ASSERTION_ERROR_REASON = \"AssertionError\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2583b09a386bcb84f8d17b40d2eef175bb28cbdb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzODA5NQ==", "bodyText": "Why do we need a clone?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22692#discussion_r424638095", "createdAt": "2020-05-13T18:16:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5969,25 +6057,36 @@ private BLangMatchTypedBindingPatternClause getSuccessPattern(BLangAccessExpress\n         BLangSimpleVariable successPatternVar = ASTBuilderUtil.createVariable(accessExpr.pos, successPatternVarName,\n                 type, null, successPatternSymbol);\n \n-        // Create x.foo, by replacing the varRef expr of the current expression, with the new temp var ref\n-        accessExpr.expr = ASTBuilderUtil.createVariableRef(accessExpr.pos, successPatternVar.symbol);\n-        accessExpr.errorSafeNavigation = false;\n-        accessExpr.nilSafeNavigation = false;\n+        BLangAccessExpression tempAccessExpr = nodeCloner.clone(accessExpr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2583b09a386bcb84f8d17b40d2eef175bb28cbdb"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3564, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}