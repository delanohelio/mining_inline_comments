{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NjMzNzU3", "number": 27426, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzozNzoxN1rOFEyTrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0ODozNlrOFFkfzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTYyODYyOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzozNzoxN1rOIE-ipg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNjowN1rOIGIuQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4OTg5NA==", "bodyText": "Do we need to check the empty-ness?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542089894", "createdAt": "2020-12-14T03:37:17Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -596,19 +630,30 @@ public ImportPrefixNode transform(ImportPrefixNode importPrefixNode) {\n     public ServiceDeclarationNode transform(ServiceDeclarationNode serviceDeclarationNode) {\n         MetadataNode metadata = formatNode(serviceDeclarationNode.metadata().orElse(null), 0, 1);\n         Token serviceKeyword = formatToken(serviceDeclarationNode.serviceKeyword(), 1, 0);\n-        //IdentifierToken serviceName = formatToken(serviceDeclarationNode.serviceName().orElse(null), 1, 0);\n+        TypeDescriptorNode typeDescriptor = formatNode(serviceDeclarationNode.typeDescriptor().orElse(null), 1, 0);\n+        NodeList<Node> absoluteResourcePath = formatNodeList(serviceDeclarationNode.absoluteResourcePath(), 0, 0, 1, 0);\n         Token onKeyword = formatToken(serviceDeclarationNode.onKeyword(), 1, 0);\n         SeparatedNodeList<ExpressionNode> expressions =\n                 formatSeparatedNodeList(serviceDeclarationNode.expressions(), 0, 0, 1, 0);\n-        //Node serviceBody = formatNode(serviceDeclarationNode.serviceBody(), env.trailingWS, env.trailingNL);\n+        Token openBrace = formatToken(serviceDeclarationNode.openBraceToken(), 0, 1);\n+        indent(); // increase the indentation of the following statements.\n+        NodeList<Node> members = formatNodeList(serviceDeclarationNode.members(), 0, 1, 0, 1, true);\n+        unindent(); // reset the indentation.\n+        if (serviceDeclarationNode.members().isEmpty()) {\n+            env.preserveNewlines = true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyODk3Mw==", "bodyText": "Since a similar behavior is implemented here in FunctionBodyBlockNode, the newline preservation was added here as well.\n\n  \n    \n      ballerina-lang/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java\n    \n    \n         Line 361\n      in\n      7289b5b\n    \n    \n    \n    \n\n        \n          \n           env.preserveNewlines = true; \n        \n    \n  \n\n\nOtherwise, the following parser-tests seems to be failing as well.\nhttps://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-parser/src/test/resources/declarations/service-decl/service_decl_source_18.bal\nhttps://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-parser/src/test/resources/declarations/service-decl/service_decl_source_19.bal", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542128973", "createdAt": "2020-12-14T05:52:57Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -596,19 +630,30 @@ public ImportPrefixNode transform(ImportPrefixNode importPrefixNode) {\n     public ServiceDeclarationNode transform(ServiceDeclarationNode serviceDeclarationNode) {\n         MetadataNode metadata = formatNode(serviceDeclarationNode.metadata().orElse(null), 0, 1);\n         Token serviceKeyword = formatToken(serviceDeclarationNode.serviceKeyword(), 1, 0);\n-        //IdentifierToken serviceName = formatToken(serviceDeclarationNode.serviceName().orElse(null), 1, 0);\n+        TypeDescriptorNode typeDescriptor = formatNode(serviceDeclarationNode.typeDescriptor().orElse(null), 1, 0);\n+        NodeList<Node> absoluteResourcePath = formatNodeList(serviceDeclarationNode.absoluteResourcePath(), 0, 0, 1, 0);\n         Token onKeyword = formatToken(serviceDeclarationNode.onKeyword(), 1, 0);\n         SeparatedNodeList<ExpressionNode> expressions =\n                 formatSeparatedNodeList(serviceDeclarationNode.expressions(), 0, 0, 1, 0);\n-        //Node serviceBody = formatNode(serviceDeclarationNode.serviceBody(), env.trailingWS, env.trailingNL);\n+        Token openBrace = formatToken(serviceDeclarationNode.openBraceToken(), 0, 1);\n+        indent(); // increase the indentation of the following statements.\n+        NodeList<Node> members = formatNodeList(serviceDeclarationNode.members(), 0, 1, 0, 1, true);\n+        unindent(); // reset the indentation.\n+        if (serviceDeclarationNode.members().isEmpty()) {\n+            env.preserveNewlines = true;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4OTg5NA=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzMTI0OQ==", "bodyText": "Preserving the newline is fine. But do we need to check for the empty-ness?\nAs in, are we not preserving the newlines if the list is not empty?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542131249", "createdAt": "2020-12-14T05:59:50Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -596,19 +630,30 @@ public ImportPrefixNode transform(ImportPrefixNode importPrefixNode) {\n     public ServiceDeclarationNode transform(ServiceDeclarationNode serviceDeclarationNode) {\n         MetadataNode metadata = formatNode(serviceDeclarationNode.metadata().orElse(null), 0, 1);\n         Token serviceKeyword = formatToken(serviceDeclarationNode.serviceKeyword(), 1, 0);\n-        //IdentifierToken serviceName = formatToken(serviceDeclarationNode.serviceName().orElse(null), 1, 0);\n+        TypeDescriptorNode typeDescriptor = formatNode(serviceDeclarationNode.typeDescriptor().orElse(null), 1, 0);\n+        NodeList<Node> absoluteResourcePath = formatNodeList(serviceDeclarationNode.absoluteResourcePath(), 0, 0, 1, 0);\n         Token onKeyword = formatToken(serviceDeclarationNode.onKeyword(), 1, 0);\n         SeparatedNodeList<ExpressionNode> expressions =\n                 formatSeparatedNodeList(serviceDeclarationNode.expressions(), 0, 0, 1, 0);\n-        //Node serviceBody = formatNode(serviceDeclarationNode.serviceBody(), env.trailingWS, env.trailingNL);\n+        Token openBrace = formatToken(serviceDeclarationNode.openBraceToken(), 0, 1);\n+        indent(); // increase the indentation of the following statements.\n+        NodeList<Node> members = formatNodeList(serviceDeclarationNode.members(), 0, 1, 0, 1, true);\n+        unindent(); // reset the indentation.\n+        if (serviceDeclarationNode.members().isEmpty()) {\n+            env.preserveNewlines = true;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4OTg5NA=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNTI4Mg==", "bodyText": "Fixed in FunctionBodyBlockNode and ServiceDeclarationNode.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r543305282", "createdAt": "2020-12-15T12:36:07Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -596,19 +630,30 @@ public ImportPrefixNode transform(ImportPrefixNode importPrefixNode) {\n     public ServiceDeclarationNode transform(ServiceDeclarationNode serviceDeclarationNode) {\n         MetadataNode metadata = formatNode(serviceDeclarationNode.metadata().orElse(null), 0, 1);\n         Token serviceKeyword = formatToken(serviceDeclarationNode.serviceKeyword(), 1, 0);\n-        //IdentifierToken serviceName = formatToken(serviceDeclarationNode.serviceName().orElse(null), 1, 0);\n+        TypeDescriptorNode typeDescriptor = formatNode(serviceDeclarationNode.typeDescriptor().orElse(null), 1, 0);\n+        NodeList<Node> absoluteResourcePath = formatNodeList(serviceDeclarationNode.absoluteResourcePath(), 0, 0, 1, 0);\n         Token onKeyword = formatToken(serviceDeclarationNode.onKeyword(), 1, 0);\n         SeparatedNodeList<ExpressionNode> expressions =\n                 formatSeparatedNodeList(serviceDeclarationNode.expressions(), 0, 0, 1, 0);\n-        //Node serviceBody = formatNode(serviceDeclarationNode.serviceBody(), env.trailingWS, env.trailingNL);\n+        Token openBrace = formatToken(serviceDeclarationNode.openBraceToken(), 0, 1);\n+        indent(); // increase the indentation of the following statements.\n+        NodeList<Node> members = formatNodeList(serviceDeclarationNode.members(), 0, 1, 0, 1, true);\n+        unindent(); // reset the indentation.\n+        if (serviceDeclarationNode.members().isEmpty()) {\n+            env.preserveNewlines = true;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4OTg5NA=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTY0NzY3OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzo0NzowMFrOIE-sWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjozMTo1OFrOIFBuXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA5MjM3OQ==", "bodyText": "No changes required to the MethodDeclarationNode?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542092379", "createdAt": "2020-12-14T03:47:00Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -281,7 +282,14 @@ public FunctionDefinitionNode transform(FunctionDefinitionNode functionDefinitio\n         MetadataNode metadata = formatNode(functionDefinitionNode.metadata().orElse(null), 0, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMzc5Ng==", "bodyText": "This [1] seems to be added in the MethodDeclarationNode.\n[1] \n  \n    \n      ballerina-lang/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/TreeModifier.java\n    \n    \n         Line 2257\n      in\n      f919b1d\n    \n    \n    \n    \n\n        \n          \n           NodeList<Node> relativeResourcePath =", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542113796", "createdAt": "2020-12-14T05:04:29Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -281,7 +282,14 @@ public FunctionDefinitionNode transform(FunctionDefinitionNode functionDefinitio\n         MetadataNode metadata = formatNode(functionDefinitionNode.metadata().orElse(null), 0, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA5MjM3OQ=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0MjA0Nw==", "bodyText": "Fixed it here:\n\n  \n    \n      ballerina-lang/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java\n    \n    \n         Line 2744\n      in\n      28c7bca\n    \n    \n    \n    \n\n        \n          \n           NodeList<Node> relativeResourcePath = formatNodeList(methodDeclarationNode.relativeResourcePath(), 0, 0, 0, 0);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542142047", "createdAt": "2020-12-14T06:31:58Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -281,7 +282,14 @@ public FunctionDefinitionNode transform(FunctionDefinitionNode functionDefinitio\n         MetadataNode metadata = formatNode(functionDefinitionNode.metadata().orElse(null), 0, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA5MjM3OQ=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTY1MDk0OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzo0ODozMFrOIE-t-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNTozM1rOIGItCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA5Mjc5NA==", "bodyText": "Why are we not keeping a space for func-name, if the first component of relative path is missing?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542092794", "createdAt": "2020-12-14T03:48:30Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -281,7 +282,14 @@ public FunctionDefinitionNode transform(FunctionDefinitionNode functionDefinitio\n         MetadataNode metadata = formatNode(functionDefinitionNode.metadata().orElse(null), 0, 1);\n         NodeList<Token> qualifierList = formatNodeList(functionDefinitionNode.qualifierList(), 1, 0, 1, 0);\n         Token functionKeyword = formatToken(functionDefinitionNode.functionKeyword(), 1, 0);\n-        IdentifierToken functionName = formatToken(functionDefinitionNode.functionName(), 0, 0);\n+        IdentifierToken functionName;\n+        if (functionDefinitionNode.relativeResourcePath().isEmpty() ||\n+                functionDefinitionNode.relativeResourcePath().get(0).isMissing()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNDk3MA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r543304970", "createdAt": "2020-12-15T12:35:33Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -281,7 +282,14 @@ public FunctionDefinitionNode transform(FunctionDefinitionNode functionDefinitio\n         MetadataNode metadata = formatNode(functionDefinitionNode.metadata().orElse(null), 0, 1);\n         NodeList<Token> qualifierList = formatNodeList(functionDefinitionNode.qualifierList(), 1, 0, 1, 0);\n         Token functionKeyword = formatToken(functionDefinitionNode.functionKeyword(), 1, 0);\n-        IdentifierToken functionName = formatToken(functionDefinitionNode.functionName(), 0, 0);\n+        IdentifierToken functionName;\n+        if (functionDefinitionNode.relativeResourcePath().isEmpty() ||\n+                functionDefinitionNode.relativeResourcePath().get(0).isMissing()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA5Mjc5NA=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTY2Njc4OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzo1NToyMlrOIE-16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNToyMlrOIGIsow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA5NDgyNA==", "bodyText": "Why do we have to skip these tests?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542094824", "createdAt": "2020-12-14T03:55:22Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "diffHunk": "@@ -88,6 +88,8 @@ public void test(String fileName, String path) throws IOException {\n                 \"typed_binding_patterns_source_16.bal\", // parser issue for binding patterns #26421\n                 \"error_binding_pattern_source_02.bal\", // issue #26376\n \n+                \"service_decl_source_02.bal\", \"service_decl_source_05.bal\", \"service_decl_source_17.bal\",\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNDg2Nw==", "bodyText": "Will be addressed at #27490", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r543304867", "createdAt": "2020-12-15T12:35:22Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "diffHunk": "@@ -88,6 +88,8 @@ public void test(String fileName, String path) throws IOException {\n                 \"typed_binding_patterns_source_16.bal\", // parser issue for binding patterns #26421\n                 \"error_binding_pattern_source_02.bal\", // issue #26376\n \n+                \"service_decl_source_02.bal\", \"service_decl_source_05.bal\", \"service_decl_source_17.bal\",\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA5NDgyNA=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTc3Mzg4OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDo0NjoxOVrOIE_skg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNToxNlrOIGIsQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwODgxOA==", "bodyText": "The qualifiers [1] need to be formatted here as well right?\n[1] \n  \n    \n      ballerina-lang/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/TreeModifier.java\n    \n    \n         Line 157\n      in\n      f919b1d\n    \n    \n    \n    \n\n        \n          \n           NodeList<Token> qualifiers =", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542108818", "createdAt": "2020-12-14T04:46:19Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -596,19 +630,30 @@ public ImportPrefixNode transform(ImportPrefixNode importPrefixNode) {\n     public ServiceDeclarationNode transform(ServiceDeclarationNode serviceDeclarationNode) {\n         MetadataNode metadata = formatNode(serviceDeclarationNode.metadata().orElse(null), 0, 1);\n         Token serviceKeyword = formatToken(serviceDeclarationNode.serviceKeyword(), 1, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNDc3MQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r543304771", "createdAt": "2020-12-15T12:35:16Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -596,19 +630,30 @@ public ImportPrefixNode transform(ImportPrefixNode importPrefixNode) {\n     public ServiceDeclarationNode transform(ServiceDeclarationNode serviceDeclarationNode) {\n         MetadataNode metadata = formatNode(serviceDeclarationNode.metadata().orElse(null), 0, 1);\n         Token serviceKeyword = formatToken(serviceDeclarationNode.serviceKeyword(), 1, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwODgxOA=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTgzNDcwOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxNDozN1rOIFALrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNToxMFrOIGIsAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNjc4Mg==", "bodyText": "Shall we implement the RequiredExpressionNode [1] as well in this PR? Seems to be a new node.\n[1] \n  \n    \n      ballerina-lang/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/TreeModifier.java\n    \n    \n         Line 3157\n      in\n      f919b1d\n    \n    \n    \n    \n\n        \n          \n           public RequiredExpressionNode transform(", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542116782", "createdAt": "2020-12-14T05:14:37Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -160,6 +160,7 @@\n import io.ballerina.compiler.syntax.tree.RecordTypeDescriptorNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNDcwNg==", "bodyText": "Implemented.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r543304706", "createdAt": "2020-12-15T12:35:10Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -160,6 +160,7 @@\n import io.ballerina.compiler.syntax.tree.RecordTypeDescriptorNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNjc4Mg=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTg2NzAyOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToyODo0OFrOIFAc6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNTowMlrOIGIrwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMTE5NA==", "bodyText": "Can we change this to the following?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    NodeList<Token> identifiers = formatNodeList(annotationAttachPointNode.identifiers(), 1, 0, 0, 0);\n          \n          \n            \n                    NodeList<Token> identifiers = formatNodeList(annotationAttachPointNode.identifiers(), 1, 0, env.trailingWS, env.trailingNL);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r542121194", "createdAt": "2020-12-14T05:28:48Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -2307,19 +2352,10 @@ public AnnotationDeclarationNode transform(AnnotationDeclarationNode annotationD\n     @Override\n     public AnnotationAttachPointNode transform(AnnotationAttachPointNode annotationAttachPointNode) {\n         Token sourceKeyword = formatToken(annotationAttachPointNode.sourceKeyword().orElse(null), 1, 0);\n-//        Token firstIdent;\n-//        if (annotationAttachPointNode.secondIdent().isPresent()) {\n-//            firstIdent = formatToken(annotationAttachPointNode.firstIdent(), 1, 0);\n-//        } else {\n-//            firstIdent = formatToken(annotationAttachPointNode.firstIdent(), env.trailingWS, env.trailingNL);\n-//        }\n-//\n-//        Token secondIdent = formatToken(annotationAttachPointNode.secondIdent().orElse(null), env.trailingWS,\n-//                env.trailingNL);\n+        NodeList<Token> identifiers = formatNodeList(annotationAttachPointNode.identifiers(), 1, 0, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNDY0MA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r543304640", "createdAt": "2020-12-15T12:35:02Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -2307,19 +2352,10 @@ public AnnotationDeclarationNode transform(AnnotationDeclarationNode annotationD\n     @Override\n     public AnnotationAttachPointNode transform(AnnotationAttachPointNode annotationAttachPointNode) {\n         Token sourceKeyword = formatToken(annotationAttachPointNode.sourceKeyword().orElse(null), 1, 0);\n-//        Token firstIdent;\n-//        if (annotationAttachPointNode.secondIdent().isPresent()) {\n-//            firstIdent = formatToken(annotationAttachPointNode.firstIdent(), 1, 0);\n-//        } else {\n-//            firstIdent = formatToken(annotationAttachPointNode.firstIdent(), env.trailingWS, env.trailingNL);\n-//        }\n-//\n-//        Token secondIdent = formatToken(annotationAttachPointNode.secondIdent().orElse(null), env.trailingWS,\n-//                env.trailingNL);\n+        NodeList<Token> identifiers = formatNodeList(annotationAttachPointNode.identifiers(), 1, 0, 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMTE5NA=="}, "originalCommit": {"oid": "b2f80d2adb1a384e322a2de04e04a190f30546a2"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg1MTY1OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0ODozNlrOIGJODw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1ODoyMVrOIGJnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxMzQyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Token questionMarkToken = formatToken(requiredExpressionNode.questionMarkToken(), 0, 0);\n          \n          \n            \n                    Token questionMarkToken = formatToken(requiredExpressionNode.questionMarkToken(), env.trailingWS, env.trailingNL);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r543313423", "createdAt": "2020-12-15T12:48:36Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -595,20 +626,39 @@ public ImportPrefixNode transform(ImportPrefixNode importPrefixNode) {\n     @Override\n     public ServiceDeclarationNode transform(ServiceDeclarationNode serviceDeclarationNode) {\n         MetadataNode metadata = formatNode(serviceDeclarationNode.metadata().orElse(null), 0, 1);\n+        NodeList<Token> qualifiers = formatNodeList(serviceDeclarationNode.qualifiers(), 1, 0, 1, 0);\n         Token serviceKeyword = formatToken(serviceDeclarationNode.serviceKeyword(), 1, 0);\n-        //IdentifierToken serviceName = formatToken(serviceDeclarationNode.serviceName().orElse(null), 1, 0);\n+        TypeDescriptorNode typeDescriptor = formatNode(serviceDeclarationNode.typeDescriptor().orElse(null), 1, 0);\n+        NodeList<Node> absoluteResourcePath = formatNodeList(serviceDeclarationNode.absoluteResourcePath(), 0, 0, 1, 0);\n         Token onKeyword = formatToken(serviceDeclarationNode.onKeyword(), 1, 0);\n         SeparatedNodeList<ExpressionNode> expressions =\n                 formatSeparatedNodeList(serviceDeclarationNode.expressions(), 0, 0, 1, 0);\n-        //Node serviceBody = formatNode(serviceDeclarationNode.serviceBody(), env.trailingWS, env.trailingNL);\n+        Token openBrace = formatToken(serviceDeclarationNode.openBraceToken(), 0, 1);\n+        indent(); // increase the indentation of the following statements.\n+        NodeList<Node> members = formatNodeList(serviceDeclarationNode.members(), 0, 1, 0, 1, true);\n+        unindent(); // reset the indentation.\n+        env.preserveNewlines = true;\n+        Token closeBrace = formatToken(serviceDeclarationNode.closeBraceToken(), env.trailingWS, env.trailingNL);\n \n         return serviceDeclarationNode.modify()\n                 .withMetadata(metadata)\n+                .withQualifiers(qualifiers)\n                 .withServiceKeyword(serviceKeyword)\n-                //.withServiceName(serviceName)\n+                .withTypeDescriptor(typeDescriptor)\n+                .withAbsoluteResourcePath(absoluteResourcePath)\n                 .withOnKeyword(onKeyword)\n                 .withExpressions(expressions)\n-                //.withServiceBody(serviceBody)\n+                .withOpenBraceToken(openBrace)\n+                .withMembers(members)\n+                .withCloseBraceToken(closeBrace)\n+                .apply();\n+    }\n+\n+    @Override\n+    public RequiredExpressionNode transform(RequiredExpressionNode requiredExpressionNode) {\n+        Token questionMarkToken = formatToken(requiredExpressionNode.questionMarkToken(), 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a891c9dc5d35f413ee626f222edda1d5cbcb436"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMDAwNA==", "bodyText": "@IrushiL Thanks for pointing this out. \ud83d\udc4d\nFixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27426#discussion_r543320004", "createdAt": "2020-12-15T12:58:21Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java", "diffHunk": "@@ -595,20 +626,39 @@ public ImportPrefixNode transform(ImportPrefixNode importPrefixNode) {\n     @Override\n     public ServiceDeclarationNode transform(ServiceDeclarationNode serviceDeclarationNode) {\n         MetadataNode metadata = formatNode(serviceDeclarationNode.metadata().orElse(null), 0, 1);\n+        NodeList<Token> qualifiers = formatNodeList(serviceDeclarationNode.qualifiers(), 1, 0, 1, 0);\n         Token serviceKeyword = formatToken(serviceDeclarationNode.serviceKeyword(), 1, 0);\n-        //IdentifierToken serviceName = formatToken(serviceDeclarationNode.serviceName().orElse(null), 1, 0);\n+        TypeDescriptorNode typeDescriptor = formatNode(serviceDeclarationNode.typeDescriptor().orElse(null), 1, 0);\n+        NodeList<Node> absoluteResourcePath = formatNodeList(serviceDeclarationNode.absoluteResourcePath(), 0, 0, 1, 0);\n         Token onKeyword = formatToken(serviceDeclarationNode.onKeyword(), 1, 0);\n         SeparatedNodeList<ExpressionNode> expressions =\n                 formatSeparatedNodeList(serviceDeclarationNode.expressions(), 0, 0, 1, 0);\n-        //Node serviceBody = formatNode(serviceDeclarationNode.serviceBody(), env.trailingWS, env.trailingNL);\n+        Token openBrace = formatToken(serviceDeclarationNode.openBraceToken(), 0, 1);\n+        indent(); // increase the indentation of the following statements.\n+        NodeList<Node> members = formatNodeList(serviceDeclarationNode.members(), 0, 1, 0, 1, true);\n+        unindent(); // reset the indentation.\n+        env.preserveNewlines = true;\n+        Token closeBrace = formatToken(serviceDeclarationNode.closeBraceToken(), env.trailingWS, env.trailingNL);\n \n         return serviceDeclarationNode.modify()\n                 .withMetadata(metadata)\n+                .withQualifiers(qualifiers)\n                 .withServiceKeyword(serviceKeyword)\n-                //.withServiceName(serviceName)\n+                .withTypeDescriptor(typeDescriptor)\n+                .withAbsoluteResourcePath(absoluteResourcePath)\n                 .withOnKeyword(onKeyword)\n                 .withExpressions(expressions)\n-                //.withServiceBody(serviceBody)\n+                .withOpenBraceToken(openBrace)\n+                .withMembers(members)\n+                .withCloseBraceToken(closeBrace)\n+                .apply();\n+    }\n+\n+    @Override\n+    public RequiredExpressionNode transform(RequiredExpressionNode requiredExpressionNode) {\n+        Token questionMarkToken = formatToken(requiredExpressionNode.questionMarkToken(), 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxMzQyMw=="}, "originalCommit": {"oid": "7a891c9dc5d35f413ee626f222edda1d5cbcb436"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2909, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}