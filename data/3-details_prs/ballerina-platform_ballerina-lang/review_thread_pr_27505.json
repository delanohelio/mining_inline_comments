{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMjYyMjI2", "number": 27505, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMzowNDo0MlrOFF7KYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODozNjoxMFrOFHtP4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzU2NTEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-tools-api/src/main/java/io/ballerina/tools/text/TextDocument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMzowNDo0MlrOIGrFJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzo0OToxMFrOIJLczQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg2ODE5OQ==", "bodyText": "Do we need this method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r543868199", "createdAt": "2020-12-16T03:04:42Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-tools-api/src/main/java/io/ballerina/tools/text/TextDocument.java", "diffHunk": "@@ -50,6 +50,10 @@ public int textPositionFrom(LinePosition linePosition) {\n         return lines().textPositionFrom(linePosition);\n     }\n \n+    public LineMap getLines() {\n+        return this.lines();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5NTY5Mw==", "bodyText": "Removed this function since it was not necessary in the newly proposed approach.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r546495693", "createdAt": "2020-12-21T03:49:10Z", "author": {"login": "sanjana"}, "path": "compiler/ballerina-tools-api/src/main/java/io/ballerina/tools/text/TextDocument.java", "diffHunk": "@@ -50,6 +50,10 @@ public int textPositionFrom(LinePosition linePosition) {\n         return lines().textPositionFrom(linePosition);\n     }\n \n+    public LineMap getLines() {\n+        return this.lines();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg2ODE5OQ=="}, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzY1MDQ1OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/resources/misc/ranges/range-test-config.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMzoyMzowOVrOIGr6ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzo0OTozOFrOIJLdDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4MTg4Ng==", "bodyText": "I feel this structure can be improved. What we need is a 'list' of filenames and their ranges. The best data structure to represent a list is a json array, not a json object. That will make it easier to iterate as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r543881886", "createdAt": "2020-12-16T03:23:09Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/resources/misc/ranges/range-test-config.json", "diffHunk": "@@ -0,0 +1,232 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5NTc1OQ==", "bodyText": "Implemented as an array within the JSON file.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r546495759", "createdAt": "2020-12-21T03:49:38Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/test/resources/misc/ranges/range-test-config.json", "diffHunk": "@@ -0,0 +1,232 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4MTg4Ng=="}, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzY4MDIzOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMzoyOToxM1rOIGsNgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzo1MDozMVrOIJLdsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4NjcyMQ==", "bodyText": "As a practice, we don't really need to use this for function calls. It's fine to use it for instance variables, to distinguish them with local variables. But since functions doesn't have such a concept, using this for function calls can be an overkill.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r543886721", "createdAt": "2020-12-16T03:29:13Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "diffHunk": "@@ -113,26 +105,34 @@ public void testParserResources(String sourcePath) throws IOException, Formatter\n      */\n     public abstract String getTestResourceDir();\n \n+    public abstract String getConfigJsonFileName();\n+\n     protected Object[][] getConfigsList() {\n         if (this.testSubset().length != 0) {\n             return this.testSubset();\n         }\n         List<String> skippedTests = this.skipList();\n         try {\n-            return Files.walk(this.resourceDirectory.resolve(this.getTestResourceDir()).resolve(ASSERT_DIR))\n-                    .filter(path -> {\n-                        File file = path.toFile();\n-                        return file.isFile() && file.getName().endsWith(\".bal\")\n-                                && !skippedTests.contains(file.getName());\n-                    })\n-                    .map(path -> new Object[]{path.toFile().getName(), this.getTestResourceDir()})\n-                    .toArray(size -> new Object[size][2]);\n-        } catch (IOException e) {\n+            File jsonConfigFile = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(),\n+                    this.getConfigJsonFileName()).toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5NTkyMg==", "bodyText": "Removed all the this for function calls.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r546495922", "createdAt": "2020-12-21T03:50:31Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "diffHunk": "@@ -113,26 +105,34 @@ public void testParserResources(String sourcePath) throws IOException, Formatter\n      */\n     public abstract String getTestResourceDir();\n \n+    public abstract String getConfigJsonFileName();\n+\n     protected Object[][] getConfigsList() {\n         if (this.testSubset().length != 0) {\n             return this.testSubset();\n         }\n         List<String> skippedTests = this.skipList();\n         try {\n-            return Files.walk(this.resourceDirectory.resolve(this.getTestResourceDir()).resolve(ASSERT_DIR))\n-                    .filter(path -> {\n-                        File file = path.toFile();\n-                        return file.isFile() && file.getName().endsWith(\".bal\")\n-                                && !skippedTests.contains(file.getName());\n-                    })\n-                    .map(path -> new Object[]{path.toFile().getName(), this.getTestResourceDir()})\n-                    .toArray(size -> new Object[size][2]);\n-        } catch (IOException e) {\n+            File jsonConfigFile = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(),\n+                    this.getConfigJsonFileName()).toFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4NjcyMQ=="}, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzY4NDQwOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMzozMDoxMFrOIGsQIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDo1MDowOVrOIJMLkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4NzM5Mg==", "bodyText": "What is the difference between the source and the sourcePath?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r543887392", "createdAt": "2020-12-16T03:30:10Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "diffHunk": "@@ -38,46 +44,32 @@\n /**\n  * The abstract class that is extended by all range formatting test classes.\n  *\n- * @since 1.2.10\n+ * @since 2.0.0\n  */\n-public abstract class RangeFormatter {\n+public abstract class RangeFormatterTest {\n     private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n-    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n     private static final String ASSERT_DIR = \"assert\";\n     private static final String SOURCE_DIR = \"source\";\n \n+    private static final Gson gson = new Gson();\n+\n     @Test(dataProvider = \"test-file-provider\")\n-    public void test(String source, int[][] positions)\n+    public void test(String sourcePath, String source, JsonArray positions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5NzkzOQ==", "bodyText": "The method signature was referred from the currently implemented FormatterTest class as following:\n\n  \n    \n      ballerina-lang/misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/FormatterTest.java\n    \n    \n         Line 56\n      in\n      155a495\n    \n    \n    \n    \n\n        \n          \n           public void test(String source, String sourcePath) throws IOException { \n        \n    \n  \n\n\n\n\nThe source is the file name.\n\ne.g.: \"checking_action_01.bal\"\n\n\n\nThe sourcePath is the relative directory where the testcase related files are in (relative to the resource directory).\n\ne.g.: \"actions/checking\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r546497939", "createdAt": "2020-12-21T04:01:09Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "diffHunk": "@@ -38,46 +44,32 @@\n /**\n  * The abstract class that is extended by all range formatting test classes.\n  *\n- * @since 1.2.10\n+ * @since 2.0.0\n  */\n-public abstract class RangeFormatter {\n+public abstract class RangeFormatterTest {\n     private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n-    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n     private static final String ASSERT_DIR = \"assert\";\n     private static final String SOURCE_DIR = \"source\";\n \n+    private static final Gson gson = new Gson();\n+\n     @Test(dataProvider = \"test-file-provider\")\n-    public void test(String source, int[][] positions)\n+    public void test(String sourcePath, String source, JsonArray positions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4NzM5Mg=="}, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwNzY2NA==", "bodyText": "In the newly suggested approach, this test function signature was changed to test(Path sourceFilePath, Path assertFilePath, ArrayList<LineRange> lineRanges) whereas it has been implemented here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r546507664", "createdAt": "2020-12-21T04:50:09Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "diffHunk": "@@ -38,46 +44,32 @@\n /**\n  * The abstract class that is extended by all range formatting test classes.\n  *\n- * @since 1.2.10\n+ * @since 2.0.0\n  */\n-public abstract class RangeFormatter {\n+public abstract class RangeFormatterTest {\n     private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n-    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n     private static final String ASSERT_DIR = \"assert\";\n     private static final String SOURCE_DIR = \"source\";\n \n+    private static final Gson gson = new Gson();\n+\n     @Test(dataProvider = \"test-file-provider\")\n-    public void test(String source, int[][] positions)\n+    public void test(String sourcePath, String source, JsonArray positions)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4NzM5Mg=="}, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzY5NTUyOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMzozMjoyN1rOIGsXaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowMjo0MlrOIJLmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4OTI1OQ==", "bodyText": "Converting JSON to  LineRange is not part of the test case. Can we do this calculation at the data-provider's side?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r543889259", "createdAt": "2020-12-16T03:32:27Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "diffHunk": "@@ -38,46 +44,32 @@\n /**\n  * The abstract class that is extended by all range formatting test classes.\n  *\n- * @since 1.2.10\n+ * @since 2.0.0\n  */\n-public abstract class RangeFormatter {\n+public abstract class RangeFormatterTest {\n     private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n-    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n     private static final String ASSERT_DIR = \"assert\";\n     private static final String SOURCE_DIR = \"source\";\n \n+    private static final Gson gson = new Gson();\n+\n     @Test(dataProvider = \"test-file-provider\")\n-    public void test(String source, int[][] positions)\n+    public void test(String sourcePath, String source, JsonArray positions)\n             throws IOException, FormatterException {\n-        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n-        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);\n-\n-        String content = getSourceText(sourceFilePath);\n+        Path assertFilePath = Paths.get(resourceDirectory.toString(), sourcePath, ASSERT_DIR, source);\n+        Path sourceFilePath = Paths.get(resourceDirectory.toString(), sourcePath, SOURCE_DIR, source);\n+        String content = getFileContent(sourceFilePath);\n         TextDocument textDocument = TextDocuments.from(content);\n         SyntaxTree syntaxTree = SyntaxTree.from(textDocument, sourceFilePath.toString());\n-        for (int[] position : positions) {\n-            LinePosition startPos = LinePosition.from(position[0], position[1]);\n-            LinePosition endPos = LinePosition.from(position[2], position[3]);\n-            LineRange lineRange = LineRange.from(null, startPos, endPos);\n+        for (JsonElement position : positions) {\n+            JsonObject start = position.getAsJsonObject().get(\"startPos\").getAsJsonObject();\n+            LinePosition startPos = LinePosition.from(start.get(\"lineNo\").getAsInt(), start.get(\"colNo\").getAsInt());\n+            JsonObject end = position.getAsJsonObject().get(\"endPos\").getAsJsonObject();\n+            LinePosition endPos = LinePosition.from(end.get(\"lineNo\").getAsInt(), end.get(\"colNo\").getAsInt());\n+            LineRange lineRange = LineRange.from(sourceFilePath.toString(), startPos, endPos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODIwNQ==", "bodyText": "Moved to the data-provider's side. Now it's being calculated in the getConfigsList() method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r546498205", "createdAt": "2020-12-21T04:02:42Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "diffHunk": "@@ -38,46 +44,32 @@\n /**\n  * The abstract class that is extended by all range formatting test classes.\n  *\n- * @since 1.2.10\n+ * @since 2.0.0\n  */\n-public abstract class RangeFormatter {\n+public abstract class RangeFormatterTest {\n     private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n-    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n     private static final String ASSERT_DIR = \"assert\";\n     private static final String SOURCE_DIR = \"source\";\n \n+    private static final Gson gson = new Gson();\n+\n     @Test(dataProvider = \"test-file-provider\")\n-    public void test(String source, int[][] positions)\n+    public void test(String sourcePath, String source, JsonArray positions)\n             throws IOException, FormatterException {\n-        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n-        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);\n-\n-        String content = getSourceText(sourceFilePath);\n+        Path assertFilePath = Paths.get(resourceDirectory.toString(), sourcePath, ASSERT_DIR, source);\n+        Path sourceFilePath = Paths.get(resourceDirectory.toString(), sourcePath, SOURCE_DIR, source);\n+        String content = getFileContent(sourceFilePath);\n         TextDocument textDocument = TextDocuments.from(content);\n         SyntaxTree syntaxTree = SyntaxTree.from(textDocument, sourceFilePath.toString());\n-        for (int[] position : positions) {\n-            LinePosition startPos = LinePosition.from(position[0], position[1]);\n-            LinePosition endPos = LinePosition.from(position[2], position[3]);\n-            LineRange lineRange = LineRange.from(null, startPos, endPos);\n+        for (JsonElement position : positions) {\n+            JsonObject start = position.getAsJsonObject().get(\"startPos\").getAsJsonObject();\n+            LinePosition startPos = LinePosition.from(start.get(\"lineNo\").getAsInt(), start.get(\"colNo\").getAsInt());\n+            JsonObject end = position.getAsJsonObject().get(\"endPos\").getAsJsonObject();\n+            LinePosition endPos = LinePosition.from(end.get(\"lineNo\").getAsInt(), end.get(\"colNo\").getAsInt());\n+            LineRange lineRange = LineRange.from(sourceFilePath.toString(), startPos, endPos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4OTI1OQ=="}, "originalCommit": {"oid": "ffce4e5d1bec0a8dd37145ee82ac8133228c129d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjI1Njk5OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODozNjoxMFrOIJQPVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo0MjoyOFrOIJSG8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU3NDE2Ng==", "bodyText": "Is there a reason for using this overloaded SyntaxTree.from method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r546574166", "createdAt": "2020-12-21T08:36:10Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "diffHunk": "@@ -38,46 +44,25 @@\n /**\n  * The abstract class that is extended by all range formatting test classes.\n  *\n- * @since 1.2.10\n+ * @since 2.0.0\n  */\n-public abstract class RangeFormatter {\n+public abstract class RangeFormatterTest {\n     private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n-    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n     private static final String ASSERT_DIR = \"assert\";\n     private static final String SOURCE_DIR = \"source\";\n \n-    @Test(dataProvider = \"test-file-provider\")\n-    public void test(String source, int[][] positions)\n-            throws IOException, FormatterException {\n-        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n-        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);\n+    private static final Gson gson = new Gson();\n \n-        String content = getSourceText(sourceFilePath);\n+    @Test(dataProvider = \"test-file-provider\")\n+    public void test(Path sourceFilePath, Path assertFilePath, ArrayList<LineRange> lineRanges) throws IOException,\n+            FormatterException {\n+        String content = getFileContent(sourceFilePath);\n         TextDocument textDocument = TextDocuments.from(content);\n         SyntaxTree syntaxTree = SyntaxTree.from(textDocument, sourceFilePath.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7d999df8c2e8b4930d95076050885dcc727380c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNDc4NA==", "bodyText": "It was used as the previous approach required to access the positions of the syntax tree.\nThe revised approach no longer requires the overloaded method call.\nFixed it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27505#discussion_r546604784", "createdAt": "2020-12-21T09:42:28Z", "author": {"login": "sanjana"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatterTest.java", "diffHunk": "@@ -38,46 +44,25 @@\n /**\n  * The abstract class that is extended by all range formatting test classes.\n  *\n- * @since 1.2.10\n+ * @since 2.0.0\n  */\n-public abstract class RangeFormatter {\n+public abstract class RangeFormatterTest {\n     private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n-    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n     private static final String ASSERT_DIR = \"assert\";\n     private static final String SOURCE_DIR = \"source\";\n \n-    @Test(dataProvider = \"test-file-provider\")\n-    public void test(String source, int[][] positions)\n-            throws IOException, FormatterException {\n-        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n-        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);\n+    private static final Gson gson = new Gson();\n \n-        String content = getSourceText(sourceFilePath);\n+    @Test(dataProvider = \"test-file-provider\")\n+    public void test(Path sourceFilePath, Path assertFilePath, ArrayList<LineRange> lineRanges) throws IOException,\n+            FormatterException {\n+        String content = getFileContent(sourceFilePath);\n         TextDocument textDocument = TextDocuments.from(content);\n         SyntaxTree syntaxTree = SyntaxTree.from(textDocument, sourceFilePath.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU3NDE2Ng=="}, "originalCommit": {"oid": "b7d999df8c2e8b4930d95076050885dcc727380c"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2750, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}