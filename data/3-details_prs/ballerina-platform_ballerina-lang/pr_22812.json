{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTQ4OTAz", "number": 22812, "title": "Fix issues in API Docs", "bodyText": "Purpose\nFixes #20024 #22402 #21725 #22307\nThis include following PRs\n#22405\n#22404\n#22400\n#22310\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-21T09:20:01Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812", "merged": true, "mergeCommit": {"oid": "89173723a02f3fc528f377f2b39f036a51a5655c"}, "closed": true, "closedAt": "2020-04-24T01:32:02Z", "author": {"login": "pramodya1994"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaH8VagFqTM5ODE2NzAyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcanP_ygFqTM5OTU4MzI2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTY3MDIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#pullrequestreview-398167021", "createdAt": "2020-04-22T13:03:20Z", "commit": {"oid": "d31496a96536bb41b5b273a8b4099462e2ca509d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowMzoyMVrOGJ1PNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowMzoyMVrOGJ1PNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2MjYxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param moduleDocList modules list which docs ti be generated\n          \n          \n            \n                 * @param moduleDocList modules list which docs to be generated", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412962612", "createdAt": "2020-04-22T13:03:21Z", "author": {"login": "praveennadarajah"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocGenerator.java", "diffHunk": "@@ -426,6 +406,50 @@ public static void setPrintStream(PrintStream out) {\n         BallerinaDocGenerator.out = out;\n     }\n \n+    /**\n+     * Generate docs generator model.\n+     *\n+     * @param moduleDocList modules list which docs ti be generated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31496a96536bb41b5b273a8b4099462e2ca509d"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTczMjk4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#pullrequestreview-398173298", "createdAt": "2020-04-22T13:10:40Z", "commit": {"oid": "d31496a96536bb41b5b273a8b4099462e2ca509d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoxMDo0MFrOGJ1jyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoxMDo0MFrOGJ1jyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2Nzg4MQ==", "bodyText": "I think we can remove this unnecessary line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412967881", "createdAt": "2020-04-22T13:10:40Z", "author": {"login": "praveennadarajah"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocGenerator.java", "diffHunk": "@@ -426,6 +406,50 @@ public static void setPrintStream(PrintStream out) {\n         BallerinaDocGenerator.out = out;\n     }\n \n+    /**\n+     * Generate docs generator model.\n+     *\n+     * @param moduleDocList modules list which docs ti be generated\n+     * @param resources     module level doc resources\n+     * @return docs generator model of the project\n+     */\n+    public static Project getDocsGenModel(List<ModuleDoc> moduleDocList, Map<String, List<Path>> resources) {\n+        Project project = new Project();\n+        project.isSingleFile =\n+                moduleDocList.size() == 1 && moduleDocList.get(0).bLangPackage.packageID.name.value.equals(\".\");\n+        if (project.isSingleFile) {\n+            project.sourceFileName = moduleDocList.get(0).bLangPackage.packageID.sourceFileName.value;\n+        }\n+        project.name = \"\";\n+        project.description = \"\";\n+\n+        List<Module> moduleDocs = new ArrayList<>();\n+        for (ModuleDoc moduleDoc : moduleDocList) {\n+            // Generate module models\n+            Module module = new Module();\n+            module.id = moduleDoc.bLangPackage.packageID.name.toString();\n+            module.orgName = moduleDoc.bLangPackage.packageID.orgName.toString();\n+            String moduleVersion = moduleDoc.bLangPackage.packageID.version.toString();\n+            // get version from system property if not found in bLangPackage\n+            module.version = moduleVersion.equals(\"\") ?\n+                    System.getProperty(BallerinaDocConstants.VERSION) :\n+                    moduleVersion;\n+            module.summary = moduleDoc.summary;\n+            module.description = moduleDoc.description;\n+\n+            // populate module constructs\n+            sortModuleConstructs(moduleDoc.bLangPackage);\n+            Generator.generateModuleConstructs(module, moduleDoc.bLangPackage);\n+\n+            // collect module's doc resources\n+            resources.put(module.id, moduleDoc.resources);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31496a96536bb41b5b273a8b4099462e2ca509d"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTkyNjk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#pullrequestreview-398192696", "createdAt": "2020-04-22T13:31:23Z", "commit": {"oid": "d31496a96536bb41b5b273a8b4099462e2ca509d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzozMToyNFrOGJ2kww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzozMToyNFrOGJ2kww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NDUxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (\"CountryCode\".equals(typeName)) {\n          \n          \n            \n                        if (typeName.equals(\"CountryCode\")) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412984515", "createdAt": "2020-04-22T13:31:24Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DeprecatedAnnotationTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.documentation;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.Constant;\n+import org.ballerinalang.docgen.generator.model.Construct;\n+import org.ballerinalang.docgen.generator.model.Error;\n+import org.ballerinalang.docgen.generator.model.FiniteType;\n+import org.ballerinalang.docgen.generator.model.Function;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.generator.model.Record;\n+import org.ballerinalang.docgen.generator.model.UnionType;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test cases to check @deprecated annotation is showing in the docs.\n+ */\n+public class DeprecatedAnnotationTest {\n+\n+    private Module testModule;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot =\n+                \"test-src\" + File.separator + \"documentation\" + File.separator + \"deprecated_annotation_project\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"test_module\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocs(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);\n+        List<ModuleDoc> moduleDocList = new ArrayList<>(docsMap.values());\n+        moduleDocList.sort(Comparator.comparing(pkg -> pkg.bLangPackage.packageID.toString()));\n+        Map<String, List<Path>> resources = new HashMap<>();\n+\n+        Project project = BallerinaDocGenerator.getDocsGenModel(moduleDocList, resources);\n+        testModule = project.modules.get(0);\n+    }\n+\n+    @Test(description = \"Test @deprecated annotation for module-level union type definitions\")\n+    public void testDeprecatedUnionTypeDef() {\n+        List<UnionType> unionTypes = testModule.unionTypes;\n+        UnionType depUnionType = null;\n+        UnionType nonDepUnionType = null;\n+\n+        for (UnionType type : unionTypes) {\n+            String typeName = type.name;\n+            if (\"CountryCode\".equals(typeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31496a96536bb41b5b273a8b4099462e2ca509d"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTkzOTkz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#pullrequestreview-398193993", "createdAt": "2020-04-22T13:32:44Z", "commit": {"oid": "d31496a96536bb41b5b273a8b4099462e2ca509d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzozMjo0NFrOGJ2o2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzozMjo0NFrOGJ2o2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NTU2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (\"NewCountryCode\".equals(typeName)) {\n          \n          \n            \n                        } else if (typeName.equals(\"NewCountryCode\")) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412985562", "createdAt": "2020-04-22T13:32:44Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DeprecatedAnnotationTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.documentation;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.Constant;\n+import org.ballerinalang.docgen.generator.model.Construct;\n+import org.ballerinalang.docgen.generator.model.Error;\n+import org.ballerinalang.docgen.generator.model.FiniteType;\n+import org.ballerinalang.docgen.generator.model.Function;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.generator.model.Record;\n+import org.ballerinalang.docgen.generator.model.UnionType;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test cases to check @deprecated annotation is showing in the docs.\n+ */\n+public class DeprecatedAnnotationTest {\n+\n+    private Module testModule;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot =\n+                \"test-src\" + File.separator + \"documentation\" + File.separator + \"deprecated_annotation_project\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"test_module\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocs(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);\n+        List<ModuleDoc> moduleDocList = new ArrayList<>(docsMap.values());\n+        moduleDocList.sort(Comparator.comparing(pkg -> pkg.bLangPackage.packageID.toString()));\n+        Map<String, List<Path>> resources = new HashMap<>();\n+\n+        Project project = BallerinaDocGenerator.getDocsGenModel(moduleDocList, resources);\n+        testModule = project.modules.get(0);\n+    }\n+\n+    @Test(description = \"Test @deprecated annotation for module-level union type definitions\")\n+    public void testDeprecatedUnionTypeDef() {\n+        List<UnionType> unionTypes = testModule.unionTypes;\n+        UnionType depUnionType = null;\n+        UnionType nonDepUnionType = null;\n+\n+        for (UnionType type : unionTypes) {\n+            String typeName = type.name;\n+            if (\"CountryCode\".equals(typeName)) {\n+                depUnionType = type;\n+            } else if (\"NewCountryCode\".equals(typeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31496a96536bb41b5b273a8b4099462e2ca509d"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c18226f4e54d8ecd420215662494aa869368a54", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c18226f4e54d8ecd420215662494aa869368a54", "committedDate": "2020-04-23T05:38:58Z", "message": "Fixes #20024 #22402 #21725 #22307\n\nThis include following PRs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d31496a96536bb41b5b273a8b4099462e2ca509d", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d31496a96536bb41b5b273a8b4099462e2ca509d", "committedDate": "2020-04-21T09:17:50Z", "message": "Fixes #20024 #22402 #21725 #22307\n\nThis include following PRs"}, "afterCommit": {"oid": "7c18226f4e54d8ecd420215662494aa869368a54", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c18226f4e54d8ecd420215662494aa869368a54", "committedDate": "2020-04-23T05:38:58Z", "message": "Fixes #20024 #22402 #21725 #22307\n\nThis include following PRs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTgzMjY4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#pullrequestreview-399583268", "createdAt": "2020-04-24T01:31:53Z", "commit": {"oid": "7c18226f4e54d8ecd420215662494aa869368a54"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3603, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}