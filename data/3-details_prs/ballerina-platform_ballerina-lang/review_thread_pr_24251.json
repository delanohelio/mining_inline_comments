{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NjUyMzI3", "number": 24251, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0ODoxNFrOEGPBkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyNjoxNFrOEGP5Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTczMDcyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_access_negative.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0ODoxNFrOGk5zGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODowMDowNVrOGk6OUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODg4OA==", "bodyText": "extra indentation?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441348888", "createdAt": "2020-06-17T07:48:14Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_access_negative.bal", "diffHunk": "@@ -35,11 +35,21 @@ public type T1 record {\n T1 a = { name: \"John\" };\n \n function testRecordTypeAnnotationReadonlyValueEdit()  {\n-    typedesc<any> t = typeof a;\n-    Annot? annot = t.@v1;\n-    if (annot is Annot) {\n-        annot.foo = \"EDITED\";\n-    }\n+    var fn = function() {\n+        typedesc<any> t = typeof a;\n+        Annot? annot = t.@v1;\n+        if (annot is Annot) {\n+            annot.foo = \"EDITED\";\n+        }\n+    };\n+\n+    error? res = trap fn();\n+        assertEquality(true, res is error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b744315819a5e6b0b33e75f45c38aa4926fa9dc8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0OTg4Ng==", "bodyText": "need to fix. Thanks", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441349886", "createdAt": "2020-06-17T07:49:54Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_access_negative.bal", "diffHunk": "@@ -35,11 +35,21 @@ public type T1 record {\n T1 a = { name: \"John\" };\n \n function testRecordTypeAnnotationReadonlyValueEdit()  {\n-    typedesc<any> t = typeof a;\n-    Annot? annot = t.@v1;\n-    if (annot is Annot) {\n-        annot.foo = \"EDITED\";\n-    }\n+    var fn = function() {\n+        typedesc<any> t = typeof a;\n+        Annot? annot = t.@v1;\n+        if (annot is Annot) {\n+            annot.foo = \"EDITED\";\n+        }\n+    };\n+\n+    error? res = trap fn();\n+        assertEquality(true, res is error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODg4OA=="}, "originalCommit": {"oid": "b744315819a5e6b0b33e75f45c38aa4926fa9dc8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NTg1OQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441355859", "createdAt": "2020-06-17T08:00:05Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_access_negative.bal", "diffHunk": "@@ -35,11 +35,21 @@ public type T1 record {\n T1 a = { name: \"John\" };\n \n function testRecordTypeAnnotationReadonlyValueEdit()  {\n-    typedesc<any> t = typeof a;\n-    Annot? annot = t.@v1;\n-    if (annot is Annot) {\n-        annot.foo = \"EDITED\";\n-    }\n+    var fn = function() {\n+        typedesc<any> t = typeof a;\n+        Annot? annot = t.@v1;\n+        if (annot is Annot) {\n+            annot.foo = \"EDITED\";\n+        }\n+    };\n+\n+    error? res = trap fn();\n+        assertEquality(true, res is error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODg4OA=="}, "originalCommit": {"oid": "b744315819a5e6b0b33e75f45c38aa4926fa9dc8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTg2NDU1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_access_negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyMzo0OFrOGk7GEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODozNjo1MVrOGk7lIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MDEzMQ==", "bodyText": "Do we need this main function?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441370131", "createdAt": "2020-06-17T08:23:48Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_access_negative.bal", "diffHunk": "@@ -65,9 +85,44 @@ function testAnnotationOnObjectTypeReadonlyValueEdit() {\n function funcWithAnnots() {}\n \n function testAnnotationOnFunctionTypeReadonlyValueEdit() {\n-    typedesc<any> t = typeof funcWithAnnots;\n-    Annot? annot = t.@v3;\n-    if (annot is Annot) {\n-        annot.foo = \"EDITED\";\n+    var fn = function() {\n+        typedesc<any> t = typeof funcWithAnnots;\n+        Annot? annot = t.@v3;\n+        if (annot is Annot) {\n+            annot.foo = \"EDITED\";\n+        }\n+    };\n+\n+    error? res = trap fn();\n+    assertTrue(res is error);\n+\n+    error resError = <error> res;\n+    assertEquality(\"{ballerina/lang.map}InvalidUpdate\", resError.message());\n+    assertEquality(\"Invalid update of record field: modification not allowed on readonly value\",\n+                   resError.detail()[\"message\"].toString());\n+}\n+\n+public function main() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3ODA4MA==", "bodyText": "removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441378080", "createdAt": "2020-06-17T08:36:51Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_access_negative.bal", "diffHunk": "@@ -65,9 +85,44 @@ function testAnnotationOnObjectTypeReadonlyValueEdit() {\n function funcWithAnnots() {}\n \n function testAnnotationOnFunctionTypeReadonlyValueEdit() {\n-    typedesc<any> t = typeof funcWithAnnots;\n-    Annot? annot = t.@v3;\n-    if (annot is Annot) {\n-        annot.foo = \"EDITED\";\n+    var fn = function() {\n+        typedesc<any> t = typeof funcWithAnnots;\n+        Annot? annot = t.@v3;\n+        if (annot is Annot) {\n+            annot.foo = \"EDITED\";\n+        }\n+    };\n+\n+    error? res = trap fn();\n+    assertTrue(res is error);\n+\n+    error resError = <error> res;\n+    assertEquality(\"{ballerina/lang.map}InvalidUpdate\", resError.message());\n+    assertEquality(\"Invalid update of record field: modification not allowed on readonly value\",\n+                   resError.detail()[\"message\"].toString());\n+}\n+\n+public function main() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MDEzMQ=="}, "originalCommit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTg3MzM0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_readonly_types.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyNjoxNFrOGk7LuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODozNjozN1rOGk7kiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MTU3Nw==", "bodyText": "Does this compile? Can't seem to find testTypeAnnotAccess1.\nWe don't need this main function anyway right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441371577", "createdAt": "2020-06-17T08:26:14Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_readonly_types.bal", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'object as lang;\n+import ballerina/java;\n+\n+type Annot record {|\n+   service myService;\n+   object {} myObject;\n+   handle myHandle;\n+   typedesc myTypedesc;\n+   function () myFunction;\n+|};\n+\n+public annotation Annot v1 on type;\n+\n+string strValue = \"v1 value\";\n+\n+type Dummy abstract object {};\n+\n+type DummyImpl object {\n+    *Dummy;\n+};\n+\n+public function newArrayList() returns handle = @java:Constructor {\n+    class:\"java.util.ArrayList\"\n+} external;\n+\n+handle dummyHandle = newArrayList();\n+\n+typedesc<any> T = typeof strValue;\n+\n+var fn = function () {\n+    int x = 5;\n+    int y = 4;\n+};\n+\n+DummyImpl dummyImpl = new();\n+\n+@v1 {\n+    myService: ser,\n+    myObject: dummyImpl,\n+    myHandle: dummyHandle,\n+    myTypedesc: T,\n+    myFunction: fn\n+}\n+public type T1 record {\n+    string name;\n+};\n+\n+T1 a = { name: \"John\" };\n+\n+function testReadonlyTypeAnnotationAttachment()  {\n+    typedesc<any> t = typeof a;\n+    Annot? annot = t.@v1;\n+    assertTrue(annot is Annot);\n+}\n+\n+public function main() {\n+    testTypeAnnotAccess1();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NzkyOA==", "bodyText": "No..I have run locally disabling the test suite.\nFixed: 5604d29", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24251#discussion_r441377928", "createdAt": "2020-06-17T08:36:37Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/annotation_readonly_types.bal", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'object as lang;\n+import ballerina/java;\n+\n+type Annot record {|\n+   service myService;\n+   object {} myObject;\n+   handle myHandle;\n+   typedesc myTypedesc;\n+   function () myFunction;\n+|};\n+\n+public annotation Annot v1 on type;\n+\n+string strValue = \"v1 value\";\n+\n+type Dummy abstract object {};\n+\n+type DummyImpl object {\n+    *Dummy;\n+};\n+\n+public function newArrayList() returns handle = @java:Constructor {\n+    class:\"java.util.ArrayList\"\n+} external;\n+\n+handle dummyHandle = newArrayList();\n+\n+typedesc<any> T = typeof strValue;\n+\n+var fn = function () {\n+    int x = 5;\n+    int y = 4;\n+};\n+\n+DummyImpl dummyImpl = new();\n+\n+@v1 {\n+    myService: ser,\n+    myObject: dummyImpl,\n+    myHandle: dummyHandle,\n+    myTypedesc: T,\n+    myFunction: fn\n+}\n+public type T1 record {\n+    string name;\n+};\n+\n+T1 a = { name: \"John\" };\n+\n+function testReadonlyTypeAnnotationAttachment()  {\n+    typedesc<any> t = typeof a;\n+    Annot? annot = t.@v1;\n+    assertTrue(annot is Annot);\n+}\n+\n+public function main() {\n+    testTypeAnnotAccess1();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MTU3Nw=="}, "originalCommit": {"oid": "08560d977755e6b552e9d355d101f40a5fed4292"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3331, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}