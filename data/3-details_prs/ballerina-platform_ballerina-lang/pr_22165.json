{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMzM1MjA4", "number": 22165, "title": "Initial incremental parser test utils", "bodyText": "This PR introduces an incremental parser test framework phase 1.\nRelates to #22027\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-25T01:26:56Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22165", "merged": true, "mergeCommit": {"oid": "e20876b412999bbadd974ddd24246f5ce20ab373"}, "closed": true, "closedAt": "2020-03-25T02:58:50Z", "author": {"login": "sameerajayasoma"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ9DRNgH2gAyMzkzMzM1MjA4OmU5NGNhODFjMmI0Mjg3NjdmNTBmOTgxMjI2M2M3MmRlNzVkMTRmYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ-dyLgFqTM4MDgyMzA1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e94ca81c2b428767f50f9812263c72de75d14fc3", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e94ca81c2b428767f50f9812263c72de75d14fc3", "committedDate": "2020-03-25T01:16:39Z", "message": "Refactor parser test packages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "514c61e91b48e7578d97eb943e4faeae76db2f0e", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/514c61e91b48e7578d97eb943e4faeae76db2f0e", "committedDate": "2020-03-25T01:21:10Z", "message": "Update class comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef78573a17f4d74194cbd07d377a647927a0539c", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ef78573a17f4d74194cbd07d377a647927a0539c", "committedDate": "2020-03-25T01:22:25Z", "message": "Create public tree in some interal nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eba3bb6d209b752f1fc3c205f95cda8424e896c1", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eba3bb6d209b752f1fc3c205f95cda8424e896c1", "committedDate": "2020-03-25T01:24:46Z", "message": "Add public tree nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aad7f4690123361c89e2eaf24775f2d56a656996", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aad7f4690123361c89e2eaf24775f2d56a656996", "committedDate": "2020-03-25T01:25:23Z", "message": "Refactor incr. parser logic to a new class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e672493d54b4422beeaf6293039cf6bee0e712e", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e672493d54b4422beeaf6293039cf6bee0e712e", "committedDate": "2020-03-25T01:27:33Z", "message": "Add the initial incr. parser test utils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1370cfb8d1013cd3e001735189bb1311ae8ae8c", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1370cfb8d1013cd3e001735189bb1311ae8ae8c", "committedDate": "2020-03-25T01:32:45Z", "message": "Update IncrementalParser.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9690cbd7864ba83634298362943c8d553925963", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9690cbd7864ba83634298362943c8d553925963", "committedDate": "2020-03-25T01:33:36Z", "message": "Update function_name_new.bal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3da8ed8703d44bf86b8c1179ee00576f20119cb", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c3da8ed8703d44bf86b8c1179ee00576f20119cb", "committedDate": "2020-03-25T01:33:50Z", "message": "Update function_name_old.bal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODIzMDU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22165#pullrequestreview-380823055", "createdAt": "2020-03-25T02:34:07Z", "commit": {"oid": "c3da8ed8703d44bf86b8c1179ee00576f20119cb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjozNDowN1rOF7KG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo0MTowN1rOF7KNrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NTkxNQ==", "bodyText": "Can we use the range here, since there will be lots of statements in future?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22165#discussion_r397575915", "createdAt": "2020-03-25T02:34:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/incremental/IncrementalParser.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.incremental;\n+\n+import io.ballerinalang.compiler.internal.parser.AbstractTokenReader;\n+import io.ballerinalang.compiler.internal.parser.BallerinaParser;\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n+\n+import java.util.function.Predicate;\n+\n+/**\n+ * An incremental parser for Ballerina.\n+ * <p>\n+ * Reuses nodes and tokens from the old tree.\n+ *\n+ * @since 1.3.0\n+ */\n+public class IncrementalParser extends BallerinaParser {\n+    private final UnmodifiedSubtreeSupplier subtreeSupplier;\n+\n+    public IncrementalParser(AbstractTokenReader tokenReader, UnmodifiedSubtreeSupplier subtreeSupplier) {\n+        super(tokenReader);\n+        this.subtreeSupplier = subtreeSupplier;\n+    }\n+\n+    protected STNode parseTopLevelNodeWithModifier(SyntaxKind tokenKind) {\n+        STNode modelLevelDecl = getIfReusable(subtreeSupplier.peek(), isModelLevelDeclaration);\n+        return modelLevelDecl != null ? modelLevelDecl : super.parseTopLevelNodeWithModifier(tokenKind);\n+    }\n+\n+    protected STNode parseFunctionBody(SyntaxKind tokenKind) {\n+        STNode funcBodyNode = getIfReusable(subtreeSupplier.peek(), isFunctionBody);\n+        return funcBodyNode != null ? funcBodyNode : super.parseFunctionBody(tokenKind);\n+    }\n+\n+    protected STNode parseStatement() {\n+        STNode stmtNode = getIfReusable(subtreeSupplier.peek(), isStatement);\n+        return stmtNode != null ? stmtNode : super.parseStatement();\n+    }\n+\n+    private STNode getIfReusable(STNode node, Predicate<SyntaxKind> predicate) {\n+        if (node != null && predicate.test(node.kind)) {\n+            this.subtreeSupplier.consume();\n+        }\n+        return node;\n+    }\n+\n+    private Predicate<SyntaxKind> isModelLevelDeclaration = kind -> kind == SyntaxKind.FUNCTION_DEFINITION ||\n+            kind == SyntaxKind.TYPE_DEFINITION;\n+\n+    private Predicate<SyntaxKind> isFunctionBody = kind ->\n+            kind == SyntaxKind.BLOCK_STATEMENT || // TODO I am not too sure about this.\n+                    kind == SyntaxKind.EXTERNAL_FUNCTION_BODY;\n+\n+    private Predicate<SyntaxKind> isStatement = kind -> kind == SyntaxKind.BLOCK_STATEMENT ||\n+            kind == SyntaxKind.IF_ELSE_STATEMENT ||\n+            kind == SyntaxKind.CALL_STATEMENT ||\n+            kind == SyntaxKind.LOCAL_VARIABLE_DECL ||\n+            kind == SyntaxKind.ASSIGNMENT_STATEMENT ||\n+            kind == SyntaxKind.WHILE_STATEMENT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3da8ed8703d44bf86b8c1179ee00576f20119cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NzY0NQ==", "bodyText": "Ideally we would not need the internalToken == null check. If something is coming as null, then thats probably a bug in the parser.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22165#discussion_r397577645", "createdAt": "2020-03-25T02:41:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NonTerminalNode.java", "diffHunk": "@@ -85,12 +86,13 @@ protected int getChildPosition(int bucket) {\n \n     // Create a Token for the TextChange token in the given bucket\n     protected Token createToken(int bucket) {\n-        STNode internaltoken = this.node.childInBucket(bucket);\n-        if (internaltoken == null) {\n-            return null;\n+        STNode internalToken = this.node.childInBucket(bucket);\n+        if (internalToken == null || internalToken.kind == SyntaxKind.NONE) {\n+            // TODO Verify this change\n+            return new EmptyToken(internalToken, 0, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3da8ed8703d44bf86b8c1179ee00576f20119cb"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4174, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}