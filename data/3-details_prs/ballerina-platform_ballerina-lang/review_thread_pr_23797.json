{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwOTcwMTUy", "number": 23797, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTozOToxN1rOEDXtvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0MzozMFrOEDX0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTY5NzI2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTozOToxN1rOGgWUCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0ODoyMlrOGgWn-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzE5NQ==", "bodyText": "do we need replaceAll()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436573195", "createdAt": "2020-06-08T09:39:17Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2278,6 +2313,14 @@ protected BLangNode transformSyntaxNode(Node node) {\n     }\n \n     // ------------------------------------------private methods--------------------------------------------------------\n+    BLangValueType addValueType(DiagnosticPos pos, String typeName) {\n+        BLangValueType typeNode = (BLangValueType) TreeBuilder.createValueTypeNode();\n+        typeNode.pos = pos;\n+        typeNode.typeKind = (TreeUtils.stringToTypeKind(typeName.replaceAll(\"\\\\s+\", \"\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c18e04dc04a3362c9b11fb1eaff18261ec3977"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzU1NA==", "bodyText": "Additional parenthesis", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436573554", "createdAt": "2020-06-08T09:39:56Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2278,6 +2313,14 @@ protected BLangNode transformSyntaxNode(Node node) {\n     }\n \n     // ------------------------------------------private methods--------------------------------------------------------\n+    BLangValueType addValueType(DiagnosticPos pos, String typeName) {\n+        BLangValueType typeNode = (BLangValueType) TreeBuilder.createValueTypeNode();\n+        typeNode.pos = pos;\n+        typeNode.typeKind = (TreeUtils.stringToTypeKind(typeName.replaceAll(\"\\\\s+\", \"\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzE5NQ=="}, "originalCommit": {"oid": "40c18e04dc04a3362c9b11fb1eaff18261ec3977"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3ODI5OA==", "bodyText": "I think you don't even need the type name here. Why not pass the type kind directly?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436578298", "createdAt": "2020-06-08T09:48:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2278,6 +2313,14 @@ protected BLangNode transformSyntaxNode(Node node) {\n     }\n \n     // ------------------------------------------private methods--------------------------------------------------------\n+    BLangValueType addValueType(DiagnosticPos pos, String typeName) {\n+        BLangValueType typeNode = (BLangValueType) TreeBuilder.createValueTypeNode();\n+        typeNode.pos = pos;\n+        typeNode.typeKind = (TreeUtils.stringToTypeKind(typeName.replaceAll(\"\\\\s+\", \"\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3MzE5NQ=="}, "originalCommit": {"oid": "40c18e04dc04a3362c9b11fb1eaff18261ec3977"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTcwNTY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0MTozMFrOGgWZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0MTozMFrOGgWZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3NDQ3OA==", "bodyText": "Can't we directly use TypeKind.STREAM?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436574478", "createdAt": "2020-06-08T09:41:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2237,6 +2240,38 @@ public BLangNode transform(RemoteMethodCallActionNode remoteMethodCallActionNode\n         return bLangActionInvocation;\n     }\n \n+    @Override\n+    public BLangNode transform(StreamTypeDescriptorNode streamTypeDescriptorNode) {\n+        String streamTypeName = \"stream\";\n+        String anyTypeName = \"any\";\n+        BLangType constraint, error = null;\n+        Optional<Node> paramsNode = streamTypeDescriptorNode.streamTypeParamsNode();\n+        boolean hasConstraint = paramsNode.isPresent();\n+        boolean hasError = hasConstraint && ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().isPresent();\n+        DiagnosticPos pos = getPosition(streamTypeDescriptorNode);\n+\n+        if (hasError) {\n+            error = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().get().apply(this);\n+        }\n+        if (!hasConstraint) {\n+            constraint = addValueType(pos, anyTypeName);\n+        } else {\n+            constraint = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).leftTypeDescNode().apply(this);\n+        }\n+\n+        BLangBuiltInRefTypeNode refType = (BLangBuiltInRefTypeNode) TreeBuilder.createBuiltInReferenceTypeNode();\n+        refType.typeKind = TreeUtils.stringToTypeKind(streamTypeName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c18e04dc04a3362c9b11fb1eaff18261ec3977"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTcxMzc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0MzozMFrOGgWdwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0MzozMFrOGgWdwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3NTY4MQ==", "bodyText": "((StreamTypeParamsNode) paramsNode.get()) is called several times. consider extracting it to a variable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23797#discussion_r436575681", "createdAt": "2020-06-08T09:43:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2237,6 +2240,38 @@ public BLangNode transform(RemoteMethodCallActionNode remoteMethodCallActionNode\n         return bLangActionInvocation;\n     }\n \n+    @Override\n+    public BLangNode transform(StreamTypeDescriptorNode streamTypeDescriptorNode) {\n+        String streamTypeName = \"stream\";\n+        String anyTypeName = \"any\";\n+        BLangType constraint, error = null;\n+        Optional<Node> paramsNode = streamTypeDescriptorNode.streamTypeParamsNode();\n+        boolean hasConstraint = paramsNode.isPresent();\n+        boolean hasError = hasConstraint && ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().isPresent();\n+        DiagnosticPos pos = getPosition(streamTypeDescriptorNode);\n+\n+        if (hasError) {\n+            error = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).rightTypeDescNode().get().apply(this);\n+        }\n+        if (!hasConstraint) {\n+            constraint = addValueType(pos, anyTypeName);\n+        } else {\n+            constraint = (BLangType) ((StreamTypeParamsNode) paramsNode.get()).leftTypeDescNode().apply(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c18e04dc04a3362c9b11fb1eaff18261ec3977"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3474, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}