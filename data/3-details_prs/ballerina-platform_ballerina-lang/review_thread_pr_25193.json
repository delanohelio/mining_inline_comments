{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzU3Mjgx", "number": 25193, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMzo0NzozN1rOEXCw0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1OToyMVrOEXju6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTk3OTcxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMzo0NzozN1rOG-nXEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjoyNDoxN1rOG-p-Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwOTc3OA==", "bodyText": "Add API docs", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r468309778", "createdAt": "2020-08-11T03:47:37Z", "author": {"login": "daneshk"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -96,6 +96,15 @@ public type Client client object {\n         }\n     }\n \n+    public remote function call(@untainted sql:ParameterizedCallQuery sqlQuery, typedesc<record {}>[] rowTypes = [])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b30ecedea29be288ddd7ace655c348c42deeab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1MjU4Mw==", "bodyText": "Added in 0c13c50", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r468352583", "createdAt": "2020-08-11T06:24:17Z", "author": {"login": "niveathika"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -96,6 +96,15 @@ public type Client client object {\n         }\n     }\n \n+    public remote function call(@untainted sql:ParameterizedCallQuery sqlQuery, typedesc<record {}>[] rowTypes = [])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwOTc3OA=="}, "originalCommit": {"oid": "77b30ecedea29be288ddd7ace655c348c42deeab"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY3MDM0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozNzozMFrOG_TsbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0MjowM1rOG_Xqug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNjE0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + sqlQuery - The query to executed the SQL stored procedure.\n          \n          \n            \n                # + sqlQuery - The query to executed by the SQL stored procedure.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r469036140", "createdAt": "2020-08-12T06:37:30Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -96,6 +96,21 @@ public type Client client object {\n         }\n     }\n \n+    # Executes a SQL stored procedure and returns the result as stream and execution summary.\n+    #\n+    # + sqlQuery - The query to executed the SQL stored procedure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c13c50d731d78b06b6f7eff1297e808fb58df4e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwMTI0Mg==", "bodyText": "Fixed in b21f0db", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r469101242", "createdAt": "2020-08-12T08:42:03Z", "author": {"login": "niveathika"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -96,6 +96,21 @@ public type Client client object {\n         }\n     }\n \n+    # Executes a SQL stored procedure and returns the result as stream and execution summary.\n+    #\n+    # + sqlQuery - The query to executed the SQL stored procedure.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNjE0MA=="}, "originalCommit": {"oid": "0c13c50d731d78b06b6f7eff1297e808fb58df4e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY5ODQ3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0NzoyNFrOG_T8kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODozOToyMlrOG_Xkog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDI3Mg==", "bodyText": "The convention of using full stop is not properly followed in the api doc statements. Refer below sample by @MaryamZi . No full stop at the end of first sentence of the parameter and return type description and it is there only at function description. Maybe u can fix the newly added docs in this PR and sent another one to fix all the places in db modules in a separate PR as there is a lot of places to fix.\n# Description for the function.\n#\n# + i - One sentence only\n# + s - Sentence one. Sentence two.\n# + return - Return description\npublic function foo(int i, string s) returns boolean {\n    return true;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r469040272", "createdAt": "2020-08-12T06:47:24Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -96,6 +96,21 @@ public type Client client object {\n         }\n     }\n \n+    # Executes a SQL stored procedure and returns the result as stream and execution summary.\n+    #\n+    # + sqlQuery - The query to executed the SQL stored procedure.\n+    # + rowTypes - The array of `typedesc` of the records that should be returned as a result. If this is not provided\n+    #               the default column names of the query result set be used for the record attributes.\n+    # + return - Summary of the execution is returned in `ProcedureCallResult` or `sql:Error`.\n+    public remote function call(@untainted sql:ParameterizedCallQuery sqlQuery, typedesc<record {}>[] rowTypes = [])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c13c50d731d78b06b6f7eff1297e808fb58df4e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5OTY4Mg==", "bodyText": "Fixed in c8978fd", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r469099682", "createdAt": "2020-08-12T08:39:22Z", "author": {"login": "niveathika"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -96,6 +96,21 @@ public type Client client object {\n         }\n     }\n \n+    # Executes a SQL stored procedure and returns the result as stream and execution summary.\n+    #\n+    # + sqlQuery - The query to executed the SQL stored procedure.\n+    # + rowTypes - The array of `typedesc` of the records that should be returned as a result. If this is not provided\n+    #               the default column names of the query result set be used for the record attributes.\n+    # + return - Summary of the execution is returned in `ProcedureCallResult` or `sql:Error`.\n+    public remote function call(@untainted sql:ParameterizedCallQuery sqlQuery, typedesc<record {}>[] rowTypes = [])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDI3Mg=="}, "originalCommit": {"oid": "0c13c50d731d78b06b6f7eff1297e808fb58df4e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc4MzQzOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/utils/OutParameterUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoxNTo0NVrOG_UvwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0MDoyM1rOG_Xm_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1MzM3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return ErrorGenerator.getSQLApplicationError(\"Unsupported sql type \" + sqlType);\n          \n          \n            \n                                return ErrorGenerator.getSQLApplicationError(\"Unsupported SQL type \" + sqlType);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r469053377", "createdAt": "2020-08-12T07:15:45Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/utils/OutParameterUtils.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.sql.utils;\n+\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BTypedesc;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.exception.ApplicationError;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.Charset;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.JDBCType;\n+import java.sql.NClob;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLXML;\n+import java.sql.Struct;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+\n+import static org.ballerinalang.sql.utils.Utils.convert;\n+import static org.ballerinalang.sql.utils.Utils.getString;\n+\n+/**\n+ * Util class to process InOut/Out parameters of procedure calls.\n+ */\n+public class OutParameterUtils {\n+\n+    public static Object get(ObjectValue result, BTypedesc typeDesc) {\n+        int sqlType = (int) result.getNativeData(Constants.ParameterObject.SQL_TYPE_NATIVE_DATA);\n+        Object value = result.getNativeData(Constants.ParameterObject.VALUE_NATIVE_DATA);\n+\n+        BType ballerinaType = typeDesc.getDescribingType();\n+        try {\n+            switch (sqlType) {\n+                case Types.CHAR:\n+                case Types.VARCHAR:\n+                case Types.LONGVARCHAR:\n+                case Types.NCHAR:\n+                case Types.NVARCHAR:\n+                case Types.LONGNVARCHAR:\n+                    return convert((String) value, sqlType, ballerinaType);\n+                case Types.BINARY:\n+                case Types.VARBINARY:\n+                case Types.LONGVARBINARY:\n+                    if (ballerinaType.getTag() == TypeTags.STRING_TAG) {\n+                        return convert((String) value, sqlType, ballerinaType);\n+                    } else {\n+                        return convert(((String) value).getBytes(Charset.defaultCharset()), sqlType, ballerinaType,\n+                                JDBCType.valueOf(sqlType).getName());\n+                    }\n+                case Types.ARRAY:\n+                    return convert((Array) value, sqlType, ballerinaType);\n+                case Types.BLOB:\n+                    return convert((Blob) value, sqlType, ballerinaType);\n+                case Types.CLOB:\n+                    String clobValue = getString((Clob) value);\n+                    return convert(clobValue, sqlType, ballerinaType);\n+                case Types.NCLOB:\n+                    String nClobValue = getString((NClob) value);\n+                    return convert(nClobValue, sqlType, ballerinaType);\n+                case Types.DATE:\n+                    return convert((Date) value, sqlType, ballerinaType);\n+                case Types.TIME:\n+                case Types.TIME_WITH_TIMEZONE:\n+                    return convert((Time) value, sqlType, ballerinaType);\n+                case Types.TIMESTAMP:\n+                case Types.TIMESTAMP_WITH_TIMEZONE:\n+                    return convert((Timestamp) value, sqlType, ballerinaType);\n+                case Types.ROWID:\n+                    return convert(((RowId) value).getBytes(), sqlType, ballerinaType, \"SQL RowID\");\n+                case Types.TINYINT:\n+                case Types.SMALLINT:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((int) value, sqlType, ballerinaType, false);\n+                case Types.INTEGER:\n+                case Types.BIGINT:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((long) value, sqlType, ballerinaType, false);\n+                case Types.REAL:\n+                case Types.FLOAT:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((float) value, sqlType, ballerinaType, false);\n+                case Types.DOUBLE:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((double) value, sqlType, ballerinaType, false);\n+                case Types.NUMERIC:\n+                case Types.DECIMAL:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((BigDecimal) value, sqlType, ballerinaType, false);\n+                case Types.BIT:\n+                case Types.BOOLEAN:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((boolean) value, sqlType, ballerinaType, false);\n+                case Types.REF:\n+                case Types.STRUCT:\n+                    return convert((Struct) value, sqlType, ballerinaType);\n+                case Types.SQLXML:\n+                    return convert((SQLXML) value, sqlType, ballerinaType);\n+                default:\n+                    // Cannot reach to Default\n+                    return ErrorGenerator.getSQLApplicationError(\"Unsupported sql type \" + sqlType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c13c50d731d78b06b6f7eff1297e808fb58df4e"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwMDI4NA==", "bodyText": "Fixed in f56de73", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r469100284", "createdAt": "2020-08-12T08:40:23Z", "author": {"login": "niveathika"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/utils/OutParameterUtils.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.sql.utils;\n+\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BTypedesc;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.exception.ApplicationError;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.Charset;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.JDBCType;\n+import java.sql.NClob;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLXML;\n+import java.sql.Struct;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.sql.Types;\n+\n+import static org.ballerinalang.sql.utils.Utils.convert;\n+import static org.ballerinalang.sql.utils.Utils.getString;\n+\n+/**\n+ * Util class to process InOut/Out parameters of procedure calls.\n+ */\n+public class OutParameterUtils {\n+\n+    public static Object get(ObjectValue result, BTypedesc typeDesc) {\n+        int sqlType = (int) result.getNativeData(Constants.ParameterObject.SQL_TYPE_NATIVE_DATA);\n+        Object value = result.getNativeData(Constants.ParameterObject.VALUE_NATIVE_DATA);\n+\n+        BType ballerinaType = typeDesc.getDescribingType();\n+        try {\n+            switch (sqlType) {\n+                case Types.CHAR:\n+                case Types.VARCHAR:\n+                case Types.LONGVARCHAR:\n+                case Types.NCHAR:\n+                case Types.NVARCHAR:\n+                case Types.LONGNVARCHAR:\n+                    return convert((String) value, sqlType, ballerinaType);\n+                case Types.BINARY:\n+                case Types.VARBINARY:\n+                case Types.LONGVARBINARY:\n+                    if (ballerinaType.getTag() == TypeTags.STRING_TAG) {\n+                        return convert((String) value, sqlType, ballerinaType);\n+                    } else {\n+                        return convert(((String) value).getBytes(Charset.defaultCharset()), sqlType, ballerinaType,\n+                                JDBCType.valueOf(sqlType).getName());\n+                    }\n+                case Types.ARRAY:\n+                    return convert((Array) value, sqlType, ballerinaType);\n+                case Types.BLOB:\n+                    return convert((Blob) value, sqlType, ballerinaType);\n+                case Types.CLOB:\n+                    String clobValue = getString((Clob) value);\n+                    return convert(clobValue, sqlType, ballerinaType);\n+                case Types.NCLOB:\n+                    String nClobValue = getString((NClob) value);\n+                    return convert(nClobValue, sqlType, ballerinaType);\n+                case Types.DATE:\n+                    return convert((Date) value, sqlType, ballerinaType);\n+                case Types.TIME:\n+                case Types.TIME_WITH_TIMEZONE:\n+                    return convert((Time) value, sqlType, ballerinaType);\n+                case Types.TIMESTAMP:\n+                case Types.TIMESTAMP_WITH_TIMEZONE:\n+                    return convert((Timestamp) value, sqlType, ballerinaType);\n+                case Types.ROWID:\n+                    return convert(((RowId) value).getBytes(), sqlType, ballerinaType, \"SQL RowID\");\n+                case Types.TINYINT:\n+                case Types.SMALLINT:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((int) value, sqlType, ballerinaType, false);\n+                case Types.INTEGER:\n+                case Types.BIGINT:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((long) value, sqlType, ballerinaType, false);\n+                case Types.REAL:\n+                case Types.FLOAT:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((float) value, sqlType, ballerinaType, false);\n+                case Types.DOUBLE:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((double) value, sqlType, ballerinaType, false);\n+                case Types.NUMERIC:\n+                case Types.DECIMAL:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((BigDecimal) value, sqlType, ballerinaType, false);\n+                case Types.BIT:\n+                case Types.BOOLEAN:\n+                    if (value == null) {\n+                        return null;\n+                    }\n+                    return convert((boolean) value, sqlType, ballerinaType, false);\n+                case Types.REF:\n+                case Types.STRUCT:\n+                    return convert((Struct) value, sqlType, ballerinaType);\n+                case Types.SQLXML:\n+                    return convert((SQLXML) value, sqlType, ballerinaType);\n+                default:\n+                    // Cannot reach to Default\n+                    return ErrorGenerator.getSQLApplicationError(\"Unsupported sql type \" + sqlType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1MzM3Nw=="}, "originalCommit": {"oid": "0c13c50d731d78b06b6f7eff1297e808fb58df4e"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDk5MDI3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxNjo1MVrOG_WudQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0MDowNVrOG_XmTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NTgxMw==", "bodyText": "Is this working sample? What is result variable here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r469085813", "createdAt": "2020-08-12T08:16:51Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -340,5 +340,30 @@ if (ret is error) {\n }\n ```\n \n+#### Execute SQL stored procedures\n+\n+This example demonstrates how to execute a stored procedure with a single INSERT statement that is executed via the \n+`call` remote function of the client.\n+\n+```ballerina\n+int uid = 10;\n+sql:OutParameter insertId = new;\n+\n+var ret = dbClient->call(`call InsertPerson(${uid}, ${insertId}`);\n+if (ret is error) {\n+    io:println(\"Error occurred:\", err.message());\n+} else {\n+    io:println(\"Outparameter insert id: \", insertId.get(int));\n+    stream<record{}, sql:Error>? resultStr = result.queryResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c13c50d731d78b06b6f7eff1297e808fb58df4e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwMDExMA==", "bodyText": "Seems to be an error in the sample, it should be ret variable returned from the call api. Fixed in c8978fd", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r469100110", "createdAt": "2020-08-12T08:40:05Z", "author": {"login": "niveathika"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -340,5 +340,30 @@ if (ret is error) {\n }\n ```\n \n+#### Execute SQL stored procedures\n+\n+This example demonstrates how to execute a stored procedure with a single INSERT statement that is executed via the \n+`call` remote function of the client.\n+\n+```ballerina\n+int uid = 10;\n+sql:OutParameter insertId = new;\n+\n+var ret = dbClient->call(`call InsertPerson(${uid}, ${insertId}`);\n+if (ret is error) {\n+    io:println(\"Error occurred:\", err.message());\n+} else {\n+    io:println(\"Outparameter insert id: \", insertId.get(int));\n+    stream<record{}, sql:Error>? resultStr = result.queryResult;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NTgxMw=="}, "originalCommit": {"oid": "0c13c50d731d78b06b6f7eff1297e808fb58df4e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTM4MTUyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1OToyMVrOG_adSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1OToyMVrOG_adSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0Njk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            var ret = dbClient->call(`call InsertPerson(${uid}, ${insertId}`);\n          \n          \n            \n            var ret = dbClient->call(`call InsertPerson(${uid}, ${insertId})`);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25193#discussion_r469146953", "createdAt": "2020-08-12T09:59:21Z", "author": {"login": "daneshk"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -340,5 +340,30 @@ if (ret is error) {\n }\n ```\n \n+#### Execute SQL stored procedures\n+\n+This example demonstrates how to execute a stored procedure with a single INSERT statement that is executed via the \n+`call` remote function of the client.\n+\n+```ballerina\n+int uid = 10;\n+sql:OutParameter insertId = new;\n+\n+var ret = dbClient->call(`call InsertPerson(${uid}, ${insertId}`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b21f0dbc5fe3b1d9b726a4543092821a64761e31"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 361, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}