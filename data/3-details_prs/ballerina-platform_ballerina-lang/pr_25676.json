{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNTM3MjMy", "number": 25676, "title": "Fix refactor the ballerina OpenAPI commands ", "bodyText": "Purpose\n\nFix Refactor the Ballerina OpenAPI commands\n\nFixes #25274\nFixes #25015\nFixes #25213\nSamples\n\nBallerina service and client stub generation command\n\n\nballerina openapi --input swagger.yaml -o ./\n\n\nOpenApi spec generation command for given ballerina service\n\n\nballerina openapi --input service.bal -o ./\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-09-09T06:10:28Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676", "merged": true, "mergeCommit": {"oid": "ed5e41ea66027c881f3836bf824467622c6193a3"}, "closed": true, "closedAt": "2020-09-11T07:22:10Z", "author": {"login": "lnash94"}, "timelineItems": {"totalCount": 76, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_dlnvgH2gAyNDgyNTM3MjMyOmMzNjM0ZjliYWY0YWFlNDM5MjQ3ZmZkNTgxYWZiODQ0MzAxMjM3NzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHwKvmgFqTQ4NjUzNDMwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c3634f9baf4aae439247ffd581afb84430123770", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c3634f9baf4aae439247ffd581afb84430123770", "committedDate": "2020-08-16T13:11:39Z", "message": "Create new file for openapi command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86e7e3c65d5c5c68181bcedb33cd1ea50644ab69", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86e7e3c65d5c5c68181bcedb33cd1ea50644ab69", "committedDate": "2020-08-18T17:05:44Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56a8539db923597e2530dfe416979a8bebcded7f", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/56a8539db923597e2530dfe416979a8bebcded7f", "committedDate": "2020-08-19T09:56:34Z", "message": "Add execution path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "143cd04e908c21a0afe4fefbc9b6c901ddebd3c3", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/143cd04e908c21a0afe4fefbc9b6c901ddebd3c3", "committedDate": "2020-08-20T11:30:00Z", "message": "Add command to help file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c37dda34e210d717a0cc203750caab3bc89b69e0", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c37dda34e210d717a0cc203750caab3bc89b69e0", "committedDate": "2020-08-21T04:21:36Z", "message": "Add service generation command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4b6a4e4e1f5f96a02b04b8e7f596d05947ee8d8", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4b6a4e4e1f5f96a02b04b8e7f596d05947ee8d8", "committedDate": "2020-08-21T04:34:38Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00ccc4e8d8e3bfd7069d5a9408093eb1e0e95fa2", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00ccc4e8d8e3bfd7069d5a9408093eb1e0e95fa2", "committedDate": "2020-08-21T04:36:05Z", "message": "Add toml change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a602c3fefa40068067962a1c32506b99fb317fb3", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a602c3fefa40068067962a1c32506b99fb317fb3", "committedDate": "2020-08-21T04:36:38Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c53910ff59cac5de7481aebfd5917dd943ea066", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c53910ff59cac5de7481aebfd5917dd943ea066", "committedDate": "2020-08-21T06:21:50Z", "message": "Add client file generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5773326085e47b2f0242dac0b8415676920713", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f5773326085e47b2f0242dac0b8415676920713", "committedDate": "2020-08-24T05:06:17Z", "message": "Fix yaml file path in service file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2afd0ca5e0569ccd1abf1ba647ca9f4b70c09609", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2afd0ca5e0569ccd1abf1ba647ca9f4b70c09609", "committedDate": "2020-08-24T05:07:56Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "512c7f986a45ee7ece8ac980e975318161c2884e", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/512c7f986a45ee7ece8ac980e975318161c2884e", "committedDate": "2020-08-24T05:50:52Z", "message": "Clean code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "804d6fa9c036e59495167233b3ca179a60e7ce0b", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/804d6fa9c036e59495167233b3ca179a60e7ce0b", "committedDate": "2020-08-24T08:59:27Z", "message": "Add path resolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e047939d3f3da803bef89a583d2bfd66bd6158d9", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e047939d3f3da803bef89a583d2bfd66bd6158d9", "committedDate": "2020-08-25T05:44:11Z", "message": "Add path resolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44efe1bbd890eb97bce63ff05716a0198d4aa508", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44efe1bbd890eb97bce63ff05716a0198d4aa508", "committedDate": "2020-08-25T05:52:48Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cd02a6a5c124bfec5ca567bc23224f1911a1691", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cd02a6a5c124bfec5ca567bc23224f1911a1691", "committedDate": "2020-08-25T07:07:44Z", "message": "Add target path fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daeebbd2c46629ea54dd472f0939fedc91c80b3b", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/daeebbd2c46629ea54dd472f0939fedc91c80b3b", "committedDate": "2020-08-26T04:26:40Z", "message": "Add openApi contract generate function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6c9c5535a9ec86916f38401c928ea1b4b00f7d7", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6c9c5535a9ec86916f38401c928ea1b4b00f7d7", "committedDate": "2020-08-26T04:27:45Z", "message": "Fix openApi command tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92e5fe88c3a2d0d787d5ac23390e05f10197cfe2", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92e5fe88c3a2d0d787d5ac23390e05f10197cfe2", "committedDate": "2020-08-26T04:29:37Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a67c07b6b4405038abbda9c0cfce6b5e657203fb", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a67c07b6b4405038abbda9c0cfce6b5e657203fb", "committedDate": "2020-08-26T11:06:11Z", "message": "Fix relative path for service generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41e7280ca20634ecd45658a9c1a8e2e3b18affea", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41e7280ca20634ecd45658a9c1a8e2e3b18affea", "committedDate": "2020-08-27T09:34:42Z", "message": "Add user input given for overwrite the exist file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b95080677416a9d5a0e617b765ddfe924ce5e78f", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b95080677416a9d5a0e617b765ddfe924ce5e78f", "committedDate": "2020-08-27T11:33:24Z", "message": "Add tag filter for command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7b1268a6174c38a606cdcecc01fca0d7b5ffeb9", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7b1268a6174c38a606cdcecc01fca0d7b5ffeb9", "committedDate": "2020-08-27T11:33:53Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61efa8439ba744126dd239722bdc46705bd70759", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61efa8439ba744126dd239722bdc46705bd70759", "committedDate": "2020-08-28T05:47:49Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8d7d71acc061b22f49e10fcc4fe42696d0802e9", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8d7d71acc061b22f49e10fcc4fe42696d0802e9", "committedDate": "2020-09-02T02:35:28Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e715f52449571ccf93db9ffa9ad8416f9029d7d1", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e715f52449571ccf93db9ffa9ad8416f9029d7d1", "committedDate": "2020-09-02T05:33:03Z", "message": "Add operation filter to command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d80ea2a655ab77a3e916ede5023747d698cf1e93", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d80ea2a655ab77a3e916ede5023747d698cf1e93", "committedDate": "2020-09-02T06:24:57Z", "message": "Add filter values to langserver-core openApi tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "244b000b1304549f5bced43e4059af0c763735ca", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/244b000b1304549f5bced43e4059af0c763735ca", "committedDate": "2020-09-02T07:04:00Z", "message": "Add filter value to lang-server openapi tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4205a589cc41cdad8deb32d5ffddbcb388b53bb9", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4205a589cc41cdad8deb32d5ffddbcb388b53bb9", "committedDate": "2020-09-03T03:58:45Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "400e791261ba18f9982a3d87b007af4c00e4452f", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/400e791261ba18f9982a3d87b007af4c00e4452f", "committedDate": "2020-09-05T14:13:15Z", "message": "Add tags and operations to openApi annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b543f3ae7ff65cb2b4e4cde489067fc544efad8", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b543f3ae7ff65cb2b4e4cde489067fc544efad8", "committedDate": "2020-09-05T14:13:43Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df617582589451b5b4f22030560ad80b91e7064b", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df617582589451b5b4f22030560ad80b91e7064b", "committedDate": "2020-09-07T07:23:25Z", "message": "Add generate openApi specification for multiple services in ballerina file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74a1632dfab6f61912b0ca93b9ad24dd6f9287cd", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74a1632dfab6f61912b0ca93b9ad24dd6f9287cd", "committedDate": "2020-09-07T07:32:07Z", "message": "Add tests for support quoted identifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2cb6b797935c2e920998a92e770d2866e9fd87c", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c2cb6b797935c2e920998a92e770d2866e9fd87c", "committedDate": "2020-09-07T07:32:40Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28bc7a061500960022471c057f8099d48ed67f32", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28bc7a061500960022471c057f8099d48ed67f32", "committedDate": "2020-09-08T03:52:27Z", "message": "Add tests for support quoted identifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "279f626e706305b3092c4c47ee7d1314507f7a3e", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/279f626e706305b3092c4c47ee7d1314507f7a3e", "committedDate": "2020-09-08T05:29:55Z", "message": "Add if condition to service template tag attribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4f793192a89e50a05031ca0a7abeb98bea8b942", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4f793192a89e50a05031ca0a7abeb98bea8b942", "committedDate": "2020-09-08T05:30:18Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd416ba3f048cc5f9f080ac6fc4a2a176137de9a", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd416ba3f048cc5f9f080ac6fc4a2a176137de9a", "committedDate": "2020-09-08T07:00:48Z", "message": "Clean code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a0ed1b87eed9f6631d3abf01fefe4404ff08009", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a0ed1b87eed9f6631d3abf01fefe4404ff08009", "committedDate": "2020-09-09T03:55:35Z", "message": "Fix check-styles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c6f209d458e8bf122b379ccbc99f362bc0d8989", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c6f209d458e8bf122b379ccbc99f362bc0d8989", "committedDate": "2020-09-09T04:00:12Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47b6ceaeeb2e8808aa3b6e2bb515b862a5486f6e", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47b6ceaeeb2e8808aa3b6e2bb515b862a5486f6e", "committedDate": "2020-09-09T06:06:19Z", "message": "Update openApi helper file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4450e80525df5567c939b8bbc6d63c8c3ea2516a", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4450e80525df5567c939b8bbc6d63c8c3ea2516a", "committedDate": "2020-09-09T06:24:43Z", "message": "Remove changes in package-lock.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c800af516e6eb75f7e5a3103aebdf58a7267f747", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c800af516e6eb75f7e5a3103aebdf58a7267f747", "committedDate": "2020-09-09T06:32:10Z", "message": "Remove changes in package-lock.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ab24831d31c71f1418f767a37333b78a28d410", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67ab24831d31c71f1418f767a37333b78a28d410", "committedDate": "2020-09-09T06:33:56Z", "message": "Remove changes in package-lock.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa66d136c026620ee37a7edfcc1255d139fa39c3", "committedDate": "2020-09-09T06:59:56Z", "message": "Add new line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41f86b7bc82dcf21bf3c6129042a7db4c529ed60", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41f86b7bc82dcf21bf3c6129042a7db4c529ed60", "committedDate": "2020-09-09T07:59:49Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODU5MjA0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484859204", "createdAt": "2020-09-09T10:09:20Z", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowOToyMFrOHPAYPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowOToyMFrOHPAYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5Njg5Mw==", "bodyText": "Shall we remove these unnecessary comments?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485496893", "createdAt": "2020-09-09T10:09:20Z", "author": {"login": "azinneera"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/command/executors/openapi/openapitoballerina/CreateOpenApiServiceResourceMethodExecutor.java", "diffHunk": "@@ -267,7 +268,14 @@ static OpenAPI parseOpenAPIFile(String definitionURI) {\n             BallerinaOpenApiPath typePath = new BallerinaOpenApiPath();\n \n             typePath.setPath(pathName);\n-            typePath.setOperationsList(extractOpenApiOperations(pathObject.readOperationsMap(), pathName));\n+\n+            List<String> tag = new ArrayList<>();\n+            List<String> operation = new ArrayList<>();\n+//            List<String> tag = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODY3OTcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484867971", "createdAt": "2020-09-09T10:22:01Z", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyMjowMVrOHPAzAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyMjowMVrOHPAzAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMzc0NQ==", "bodyText": "This is not used anywhere. Shall we remove this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485503745", "createdAt": "2020-09-09T10:22:01Z", "author": {"login": "suganyasuven"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/typemodel/BallerinaOpenApiType.java", "diffHunk": "@@ -37,6 +38,24 @@\n     private List<Tag> tags;\n     private List<BallerinaOpenApiPath> pathList;\n     private BallerinaOpenApiComponent component;\n+    private List<Tag> filteredTags;\n+    private List<Operation> operations;\n+\n+    public List<Operation> getOperations() {\n+        return operations;\n+    }\n+\n+    public void setOperations(List<Operation> operations) {\n+        this.operations = operations;\n+    }\n+\n+    public List<Tag> getFilteredTags() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODcwNDI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484870427", "createdAt": "2020-09-09T10:25:44Z", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyNTo0NFrOHPA6ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyNTo0NFrOHPA6ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNTY1OQ==", "bodyText": "Shall we remove these commented lines?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485505659", "createdAt": "2020-09-09T10:25:44Z", "author": {"login": "suganyasuven"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/test/java/org/ballerinalang/openapi/cmd/OpenAPICmdTest.java", "diffHunk": "@@ -48,4 +66,77 @@ public void testOpenAPICmdHelpWithoutFlag() throws IOException {\n         String output = readOutput(true);\n         Assert.assertTrue(output.contains(\"NAME\\n       The Ballerina OpenAPI Tool\"));\n     }\n+\n+    @Test(description = \"Test openapi gen-service without openapi contract file\")\n+    public void testWithoutOpenApiContract() {\n+        String[] args = {\"--input\"};\n+        OpenApiCmd cmd = new OpenApiCmd(printStream);\n+        new CommandLine(cmd).parseArgs(args);\n+        String output = \"\";\n+        try {\n+            cmd.execute();\n+        } catch (BLauncherException e) {\n+            output = e.getDetailedMessages().get(0);\n+        }\n+        Assert.assertTrue(output.contains(\"An OpenApi definition file is required to generate the service.\"));\n+    }\n+\n+    @Test(description = \"Test openapi command with --input flag\", enabled = false)\n+    public void testOpenAPICmdInput() throws IOException {\n+        Path petstoreYaml = RES_DIR.resolve(Paths.get(\"petstore.yaml\"));\n+        String[] args = {\"--input\", petstoreYaml.toString()};\n+        OpenApiCmd openApiCommand = new OpenApiCmd(printStream);\n+        new CommandLine(openApiCommand).parseArgs(args);\n+        openApiCommand.execute();\n+\n+        String output = readOutput(true);\n+        Assert.assertTrue(output.contains(\"Following files were created.\"));\n+    }\n+\n+    @Test(description = \"Test openapi gen-service for successful service generation\", enabled = false)\n+    public void testSuccessfulServiceGeneration() throws IOException {\n+        Path petstoreYaml = RES_DIR.resolve(Paths.get(\"petstore.yaml\"));\n+        String[] args = {\"-i\", petstoreYaml.toString(), \"-o\", resourcePath.toString()};\n+        OpenApiCmd cmd = new OpenApiCmd(printStream);\n+        new CommandLine(cmd).parseArgs(args);\n+\n+        String output = \"\";\n+        try {\n+            cmd.execute();\n+        } catch (BLauncherException e) {\n+            output = e.getDetailedMessages().get(0);\n+        }\n+        Path expectedServiceFile = RES_DIR.resolve(Paths.get(\"expected_gen\", \"petstore_gen.bal\"));\n+        Path expectedSchemaFile = RES_DIR.resolve(Paths.get(\"expected_gen\", \"petstore_schema.bal\"));\n+\n+        Stream<String> expectedServiceLines = Files.lines(expectedServiceFile);\n+        String expectedServiceContent = expectedServiceLines.collect(Collectors.joining(\"\\n\"));\n+        expectedServiceLines.close();\n+\n+        Stream<String> expectedSchemaLines = Files.lines(expectedSchemaFile);\n+        String expectedSchemaContent = expectedSchemaLines.collect(Collectors.joining(\"\\n\"));\n+        expectedSchemaLines.close();\n+\n+        if (Files.exists(resourcePath.resolve(\"petstoreClient.bal\"))\n+                && Files.exists(resourcePath.resolve(\"petstoreService.bal\"))\n+                && Files.exists(resourcePath.resolve(\"schema.bal\"))) {\n+\n+//            Stream<String> serviceLines = Files.lines(resourcePath.resolve(\"petstoreService.bal\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODcxNDEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484871413", "createdAt": "2020-09-09T10:27:14Z", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyNzoxNFrOHPA9hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyNzoxNFrOHPA9hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNjQzOA==", "bodyText": "Shall we leave a line between each record type?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485506438", "createdAt": "2020-09-09T10:27:14Z", "author": {"login": "suganyasuven"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/test/resources/expected_gen/petstore_schema.bal", "diffHunk": "@@ -1,16 +1,15 @@\n-public type Pet record { \n-    int id;\n-    string name;\n-    string tag;\n-    string 'type;\n-};\n-public type Dog record { \n-    boolean bark;\n-};\n-public type Pets record { \n-    Pet[] pet;\n-};\n-public type Error record { \n-    int code;\n-    string message;\n+\n+type Pet record {\n+     int id;\n+     string name;\n+     string tag?;\n+     string 'type?;\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODc1NDI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484875427", "createdAt": "2020-09-09T10:33:15Z", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDozMzoxNVrOHPBJwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDozMzoxNVrOHPBJwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwOTU2OA==", "bodyText": "Seems not used anywhere. Shall we remove this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485509568", "createdAt": "2020-09-09T10:33:15Z", "author": {"login": "suganyasuven"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/cmd/Filter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.openapi.cmd;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This model use for storing the filter tags and operations details.\n+ */\n+public class Filter {\n+    private List<String> tags = new ArrayList<>();\n+    private List<String> operations = new ArrayList<>();\n+\n+    public Filter(List<String> tags, List<String> operations) {\n+        this.tags = tags;\n+        this.operations = operations;\n+    }\n+\n+    public List<String> getTags() {\n+        return tags;\n+    }\n+\n+    public void setTags(List<String> tags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODc5MTQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484879145", "createdAt": "2020-09-09T10:38:46Z", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDozODo0NlrOHPBU4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDozODo0NlrOHPBU4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMjQxNg==", "bodyText": "What if resourcePath is null?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485512416", "createdAt": "2020-09-09T10:38:46Z", "author": {"login": "suganyasuven"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/cmd/OpenApiCmd.java", "diffHunk": "@@ -17,47 +17,300 @@\n  */\n package org.ballerinalang.openapi.cmd;\n \n+import org.ballerinalang.ballerina.openapi.convertor.OpenApiConverterException;\n+import org.ballerinalang.ballerina.openapi.convertor.service.OpenApiConverterUtils;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.openapi.CodeGenerator;\n+import org.ballerinalang.openapi.OpenApiMesseges;\n+import org.ballerinalang.openapi.exception.BallerinaOpenApiException;\n+import org.ballerinalang.openapi.utils.GeneratorConstants;\n import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n import picocli.CommandLine;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.ballerinalang.openapi.utils.GeneratorConstants.USER_DIR;\n \n /**\n- * Main class to implement \"openapi\" command for ballerina.\n- * This class will accept sub-commands and execute the relevant sub-command class as given to the sub-commands\n- * parameter.\n- *\n- * Command usage will change according to the sub-command.\n+ * Main class to implement \"openapi\" command for ballerina. Commands for Client Stub, Service file and OpenApi contract\n+ * generation.\n  */\n @CommandLine.Command(\n         name = \"openapi\",\n         description = \"Generates Ballerina service/client for OpenApi contract and OpenApi contract for Ballerina\" +\n-                \"Service.\",\n-        subcommands = {\n-                OpenApiGenContractCmd.class,\n-                OpenApiGenClientCmd.class,\n-                OpenApiGenServiceCmd.class\n-        }\n+                \"Service.\"\n )\n public class OpenApiCmd implements BLauncherCmd {\n     private static final String CMD_NAME = \"openapi\";\n     private PrintStream outStream;\n+    private Path executionPath = Paths.get(System.getProperty(USER_DIR));\n+    private Path targetOutputPath;\n \n     @CommandLine.Option(names = {\"-h\", \"--help\"}, hidden = true)\n     private boolean helpFlag;\n \n+    @CommandLine.Option(names = {\"-i\", \"--input\"}, description = \"Generating the client and service both files\")\n+    private boolean inputPath;\n+\n+    @CommandLine.Option(names = {\"-o\", \"--output\"}, description = \"Location of the generated Ballerina service, \" +\n+            \"client and model files.\")\n+    private String outputPath;\n+\n+    @CommandLine.Option(names = {\"--mode\"}, description = \"Generate only service file or client file according to the\" +\n+            \" given mode type\")\n+    private String mode;\n+\n+    @CommandLine.Option(names = {\"-s\", \"--service\"}, description = \"Service name that need to documented as openapi \" +\n+            \"contract\")\n+    private String service;\n+\n+    @CommandLine.Option(names = {\"-m\", \"--module\"}, description = \"Module name which service used to documented\")\n+    private  String module;\n+\n+    @CommandLine.Option(names = {\"--tags\"}, description = \"Tag that need to write service\")\n+    private String tags;\n+\n+    @CommandLine.Option(names = {\"--operations\"}, description = \"Operations that need to write service\")\n+    private String operations;\n+\n+    @CommandLine.Option(names = {\"--service-name\"}, description = \"Service name for generated files\")\n+    private String generatedServiceName;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n     public OpenApiCmd() {\n         this.outStream = System.err;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     public OpenApiCmd(PrintStream outStream) {\n         this.outStream = outStream;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     @Override\n     public void execute() {\n-        String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n-        outStream.println(commandUsageInfo);\n+        //User notification of using an experimental tool\n+        outStream.println(OpenApiMesseges.EXPERIMENTAL_FEATURE);\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+        //Check if cli input argument is present\n+        if (inputPath) {\n+            //Check if an OpenApi definition is provided\n+            if (argList == null) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+            // If given input is yaml contract, it generates service file and client stub\n+            // else if given ballerina service file it generates openapi contract file\n+            // else it generates error message to enter correct input file\n+            String fileName = argList.get(0);\n+            if (fileName.endsWith(\".yaml\")) {\n+                List<String> tag = new ArrayList<>();\n+                List<String> operation = new ArrayList<>();\n+                if (tags != null) {\n+                     tag.addAll(Arrays.asList(tags.split(\",\")));\n+                }\n+                if (operations != null) {\n+                    operation.addAll(Arrays.asList(operations.split(\",\")));\n+                }\n+                Filter filter = new Filter(tag, operation);\n+                openApiToBallerina(fileName, filter);\n+            } else if (fileName.endsWith(\".bal\")) {\n+                ballerinaToOpenApi(fileName);\n+            } else {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+        } else {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * This util method to generate openApi contract based on the given service ballerina file.\n+     * @param fileName  input resource file\n+     */\n+    private void ballerinaToOpenApi(String fileName) {\n+        final File balFile = new File(fileName);\n+        String serviceName = service;\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(balFile, this.targetOutputPath.toString());\n+        //ballerina openapi -i service.bal --serviceName serviceName --module exampleModul -o ./\n+        // Check service name it is mandatory\n+        if ((module != null) && (service != null)) {\n+            if (!checkModuleExist(module)) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_INVALID_MODULE);\n+            }\n+            try {\n+                OpenApiConverterUtils.generateOAS3DefinitionFromModule(module, serviceName,\n+                        targetOutputPath);\n+            } catch (Exception e) {\n+                throw LauncherUtils.createLauncherException(\"Error occurred when exporting openapi file. \" +\n+                        \"\\n\" + e.getMessage());\n+            }\n+        } else if (serviceName != null) {\n+            try {\n+                OpenApiConverterUtils.generateOAS3Definitions(resourcePath, targetOutputPath, serviceName);\n+            } catch (IOException | OpenApiConverterException e) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            }\n+        } else {\n+            try {\n+                OpenApiConverterUtils.generateOAS3DefinitionsAllService(resourcePath, targetOutputPath);\n+            } catch (IOException | OpenApiConverterException | CompilationFailedException e) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * A util method for generating service and client stub using given contract file.\n+     * @param fileName input resource file\n+     */\n+    private void openApiToBallerina(String fileName, Filter filter) {\n+        CodeGenerator generator = new CodeGenerator();\n+        final File openApiFile = new File(fileName);\n+        String serviceName;\n+        if (generatedServiceName != null) {\n+            serviceName = generatedServiceName;\n+        } else {\n+            serviceName = openApiFile.getName().split(\"\\\\.\")[0];\n+        }\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(openApiFile, this.targetOutputPath.toString());\n+        if (mode != null) {\n+            switch (mode) {\n+                case \"service\":\n+                    generateServiceFile(generator, serviceName, resourcePath, filter);\n+                    break;\n+                case \"client\":\n+                    generatesClientFile(generator, serviceName, resourcePath, filter);\n+                    break;\n+                default:\n+                    break;\n+            }\n+        } else {\n+            generateBothFiles(generator, serviceName, resourcePath, filter);\n+        }\n+    }\n+\n+    /**\n+     * A util to take the resource Path.\n+     * @param resourceFile      resource file path\n+     * @return path of given resource file\n+     */\n+    private Path getResourcePath(File resourceFile, String targetOutputPath) {\n+        Path resourcePath = null;\n+        Path relativePath = null;\n+        try {\n+            resourcePath = Paths.get(resourceFile.getCanonicalPath());\n+            relativePath =\n+                    Paths.get(new File(targetOutputPath).toURI().relativize(new File(resourcePath.toString()).toURI())\n+                            .getPath());\n+        } catch (IOException e) {\n+            throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+        }\n+        return relativePath;\n+    }\n+\n+    /**\n+     * A util to get the output Path.\n+     */\n+    private void getTargetOutputPath() {\n+        targetOutputPath = executionPath;\n+        if (this.outputPath != null) {\n+            if (Paths.get(outputPath).isAbsolute()) {\n+                targetOutputPath = Paths.get(outputPath);\n+            } else {\n+                targetOutputPath = Paths.get(targetOutputPath.toString(), outputPath);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * A Util to Client generation.\n+     * @param generator         generator object\n+     * @param clientName        file name uses to name the generated file\n+     * @param resourcePath      resource Path\n+     */\n+    private void generatesClientFile(CodeGenerator generator, String clientName, Path resourcePath, Filter filter) {\n+\n+        try {\n+            generator.generateClient(executionPath.toString(), resourcePath.toString(), clientName,\n+                    targetOutputPath.toString(), filter);\n+        } catch (IOException | BallerinaOpenApiException e) {\n+            if (e.getLocalizedMessage() != null) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            } else {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.OPENAPI_CLIENT_EXCEPTION);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * A util to generate service file.\n+     * @param generator     generator object\n+     * @param serviceName   service name uses for naming the generated file\n+     * @param resourcePath  resource Path\n+     */\n+    private void generateServiceFile(CodeGenerator generator, String serviceName, Path resourcePath, Filter filter) {\n+\n+        try {\n+            assert resourcePath != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "originalPosition": 270}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODgxMzk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484881399", "createdAt": "2020-09-09T10:42:22Z", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDo0MjoyM1rOHPBcFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDo0MjoyM1rOHPBcFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxNDI2Mg==", "bodyText": "Please add a new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485514262", "createdAt": "2020-09-09T10:42:23Z", "author": {"login": "suganyasuven"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -60,18 +74,22 @@ EXAMPLES\n           $ ballerina openapi\n           $ ballerina openapi -h\n \n-       Print usage details of the OpenAPI sub commands.\n-          $ ballerina openapi gen-service -h\n-          $ ballerina openapi gen-client -h\n-          $ ballerina openapi gen-contract -h\n-\n        Generate a Ballerina mock service with module name hellomock\n        and service name hello using hello.yaml OpenAPI contract.\n-          $ ballerina openapi gen-service hellomock:hello hello.yaml\n+          $ ballerina openapi -i hello.yaml --mode service\n \n        Generate a Ballerina client with client name helloclient\n        and write the output to the client_project folder.\n-          $ ballerina openapi gen-client helloclient hello.yaml -o client_project\n+          $ ballerina openapi -i hello.yaml --mode client\n \n        Export an OpenAPI definition for hello_service.bal for the hello service.\n-          $ ballerina openapi gen-contract hello -i hello_service.bal\n+          $ ballerina openapi -i hello_service.bal --serviceName hello -o ./\n+\n+       Generate both Ballerina client and service file.\n+          $ballerina openapi --input petstore.yaml -o ./example\n+\n+       Generate services for given tags\n+          $ ballerina openapi -i hello.yaml --mode service --tags pets\n+\n+       Generate services for given operations\n+                 $ ballerina openapi -i hello.yaml --mode service --operations listPets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODgyMjQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484882241", "createdAt": "2020-09-09T10:43:40Z", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDo0Mzo0MFrOHPBekg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDo0Mzo0MFrOHPBekg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxNDg5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param servicePath               resource path\n          \n          \n            \n            \n          \n          \n            \n                 * @param servicePath               resource path", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485514898", "createdAt": "2020-09-09T10:43:40Z", "author": {"login": "azinneera"}, "path": "misc/openapi-ballerina/modules/ballerina-to-openapi-generator/src/main/java/org/ballerinalang/ballerina/openapi/convertor/service/OpenApiConverterUtils.java", "diffHunk": "@@ -385,9 +387,66 @@ public static void generateOAS3Definitions(Path servicePath, Path outPath, Strin\n         String openApiName = getOpenApiFileName(servicePath, serviceName);\n \n         String openApiSource = generateOAS3Definitions(balSource, serviceName);\n+        openApiName = checkDuplicateFiles(outPath, openApiName);\n         writeFile(outPath.resolve(openApiName), openApiSource);\n     }\n \n+    /**\n+     * This util for generating files when not available with specific service name.\n+     * @param servicePath               resource path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODg3MjQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484887241", "createdAt": "2020-09-09T10:51:15Z", "commit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDo1MToxNVrOHPBtiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDo1MToxNVrOHPBtiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxODcyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ((module != null) && (service != null)) {\n          \n          \n            \n                    if (module != null && service != null) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485518728", "createdAt": "2020-09-09T10:51:15Z", "author": {"login": "suganyasuven"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/cmd/OpenApiCmd.java", "diffHunk": "@@ -17,47 +17,300 @@\n  */\n package org.ballerinalang.openapi.cmd;\n \n+import org.ballerinalang.ballerina.openapi.convertor.OpenApiConverterException;\n+import org.ballerinalang.ballerina.openapi.convertor.service.OpenApiConverterUtils;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.openapi.CodeGenerator;\n+import org.ballerinalang.openapi.OpenApiMesseges;\n+import org.ballerinalang.openapi.exception.BallerinaOpenApiException;\n+import org.ballerinalang.openapi.utils.GeneratorConstants;\n import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n import picocli.CommandLine;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.ballerinalang.openapi.utils.GeneratorConstants.USER_DIR;\n \n /**\n- * Main class to implement \"openapi\" command for ballerina.\n- * This class will accept sub-commands and execute the relevant sub-command class as given to the sub-commands\n- * parameter.\n- *\n- * Command usage will change according to the sub-command.\n+ * Main class to implement \"openapi\" command for ballerina. Commands for Client Stub, Service file and OpenApi contract\n+ * generation.\n  */\n @CommandLine.Command(\n         name = \"openapi\",\n         description = \"Generates Ballerina service/client for OpenApi contract and OpenApi contract for Ballerina\" +\n-                \"Service.\",\n-        subcommands = {\n-                OpenApiGenContractCmd.class,\n-                OpenApiGenClientCmd.class,\n-                OpenApiGenServiceCmd.class\n-        }\n+                \"Service.\"\n )\n public class OpenApiCmd implements BLauncherCmd {\n     private static final String CMD_NAME = \"openapi\";\n     private PrintStream outStream;\n+    private Path executionPath = Paths.get(System.getProperty(USER_DIR));\n+    private Path targetOutputPath;\n \n     @CommandLine.Option(names = {\"-h\", \"--help\"}, hidden = true)\n     private boolean helpFlag;\n \n+    @CommandLine.Option(names = {\"-i\", \"--input\"}, description = \"Generating the client and service both files\")\n+    private boolean inputPath;\n+\n+    @CommandLine.Option(names = {\"-o\", \"--output\"}, description = \"Location of the generated Ballerina service, \" +\n+            \"client and model files.\")\n+    private String outputPath;\n+\n+    @CommandLine.Option(names = {\"--mode\"}, description = \"Generate only service file or client file according to the\" +\n+            \" given mode type\")\n+    private String mode;\n+\n+    @CommandLine.Option(names = {\"-s\", \"--service\"}, description = \"Service name that need to documented as openapi \" +\n+            \"contract\")\n+    private String service;\n+\n+    @CommandLine.Option(names = {\"-m\", \"--module\"}, description = \"Module name which service used to documented\")\n+    private  String module;\n+\n+    @CommandLine.Option(names = {\"--tags\"}, description = \"Tag that need to write service\")\n+    private String tags;\n+\n+    @CommandLine.Option(names = {\"--operations\"}, description = \"Operations that need to write service\")\n+    private String operations;\n+\n+    @CommandLine.Option(names = {\"--service-name\"}, description = \"Service name for generated files\")\n+    private String generatedServiceName;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n     public OpenApiCmd() {\n         this.outStream = System.err;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     public OpenApiCmd(PrintStream outStream) {\n         this.outStream = outStream;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     @Override\n     public void execute() {\n-        String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n-        outStream.println(commandUsageInfo);\n+        //User notification of using an experimental tool\n+        outStream.println(OpenApiMesseges.EXPERIMENTAL_FEATURE);\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+        //Check if cli input argument is present\n+        if (inputPath) {\n+            //Check if an OpenApi definition is provided\n+            if (argList == null) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+            // If given input is yaml contract, it generates service file and client stub\n+            // else if given ballerina service file it generates openapi contract file\n+            // else it generates error message to enter correct input file\n+            String fileName = argList.get(0);\n+            if (fileName.endsWith(\".yaml\")) {\n+                List<String> tag = new ArrayList<>();\n+                List<String> operation = new ArrayList<>();\n+                if (tags != null) {\n+                     tag.addAll(Arrays.asList(tags.split(\",\")));\n+                }\n+                if (operations != null) {\n+                    operation.addAll(Arrays.asList(operations.split(\",\")));\n+                }\n+                Filter filter = new Filter(tag, operation);\n+                openApiToBallerina(fileName, filter);\n+            } else if (fileName.endsWith(\".bal\")) {\n+                ballerinaToOpenApi(fileName);\n+            } else {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+        } else {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * This util method to generate openApi contract based on the given service ballerina file.\n+     * @param fileName  input resource file\n+     */\n+    private void ballerinaToOpenApi(String fileName) {\n+        final File balFile = new File(fileName);\n+        String serviceName = service;\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(balFile, this.targetOutputPath.toString());\n+        //ballerina openapi -i service.bal --serviceName serviceName --module exampleModul -o ./\n+        // Check service name it is mandatory\n+        if ((module != null) && (service != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b91d3c5e9ef8cc0f75254020f7ad4992b63c8588", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b91d3c5e9ef8cc0f75254020f7ad4992b63c8588", "committedDate": "2020-09-09T10:52:26Z", "message": "Update misc/openapi-ballerina/modules/ballerina-to-openapi-generator/src/main/java/org/ballerinalang/ballerina/openapi/convertor/service/OpenApiConverterUtils.java\n\nCo-authored-by: Asma Jabir <azinneera@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a2593ad6bff9dca5fac981dae4ee3b559e4a9c1", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a2593ad6bff9dca5fac981dae4ee3b559e4a9c1", "committedDate": "2020-09-09T10:58:48Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "316bd869a150c7d4477c034e24d0de718d95d7e9", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/316bd869a150c7d4477c034e24d0de718d95d7e9", "committedDate": "2020-09-09T11:01:23Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f158d0f0c1281fa683ed6dd83f643d266d30edab", "committedDate": "2020-09-09T11:05:48Z", "message": "Merge branch 'openapi_commands' of https://github.com/lnash94/ballerina-lang into openapi_commands"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTAzMTYz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484903163", "createdAt": "2020-09-09T11:15:07Z", "commit": {"oid": "b91d3c5e9ef8cc0f75254020f7ad4992b63c8588"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToxNzozNlrOHPCitw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToyMDowNFrOHPCnkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMjM0Mw==", "bodyText": "Shall we consider using this regex as a constant, as I've noticed that this same pattern is duplicated in few other places as well. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485532343", "createdAt": "2020-09-09T11:17:36Z", "author": {"login": "NipunaRanasinghe"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/utils/TypeExtractorUtil.java", "diffHunk": "@@ -396,8 +432,13 @@ public static String escapeIdentifier(String identifier) {\n             if (identifier.equals(\"error\")) {\n                 identifier = \"_error\";\n             } else {\n-                identifier = identifier.replaceAll(\"([\\\\\\\\?!<>*\\\\-=^+()_{}|.$])\", \"$1\");\n+                identifier = identifier.replaceAll(\"([\\\\[\\\\]\\\\\\\\?!<>@#&~`*\\\\-=^+();:\\\\_{}\\\\s|.$])\", \"\\\\\\\\$1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMzU4Ng==", "bodyText": "Shall we format these lines properly?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485533586", "createdAt": "2020-09-09T11:20:04Z", "author": {"login": "NipunaRanasinghe"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/cmd/OpenApiCmd.java", "diffHunk": "@@ -17,47 +17,300 @@\n  */\n package org.ballerinalang.openapi.cmd;\n \n+import org.ballerinalang.ballerina.openapi.convertor.OpenApiConverterException;\n+import org.ballerinalang.ballerina.openapi.convertor.service.OpenApiConverterUtils;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.openapi.CodeGenerator;\n+import org.ballerinalang.openapi.OpenApiMesseges;\n+import org.ballerinalang.openapi.exception.BallerinaOpenApiException;\n+import org.ballerinalang.openapi.utils.GeneratorConstants;\n import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n import picocli.CommandLine;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.ballerinalang.openapi.utils.GeneratorConstants.USER_DIR;\n \n /**\n- * Main class to implement \"openapi\" command for ballerina.\n- * This class will accept sub-commands and execute the relevant sub-command class as given to the sub-commands\n- * parameter.\n- *\n- * Command usage will change according to the sub-command.\n+ * Main class to implement \"openapi\" command for ballerina. Commands for Client Stub, Service file and OpenApi contract\n+ * generation.\n  */\n @CommandLine.Command(\n         name = \"openapi\",\n         description = \"Generates Ballerina service/client for OpenApi contract and OpenApi contract for Ballerina\" +\n-                \"Service.\",\n-        subcommands = {\n-                OpenApiGenContractCmd.class,\n-                OpenApiGenClientCmd.class,\n-                OpenApiGenServiceCmd.class\n-        }\n+                \"Service.\"\n )\n public class OpenApiCmd implements BLauncherCmd {\n     private static final String CMD_NAME = \"openapi\";\n     private PrintStream outStream;\n+    private Path executionPath = Paths.get(System.getProperty(USER_DIR));\n+    private Path targetOutputPath;\n \n     @CommandLine.Option(names = {\"-h\", \"--help\"}, hidden = true)\n     private boolean helpFlag;\n \n+    @CommandLine.Option(names = {\"-i\", \"--input\"}, description = \"Generating the client and service both files\")\n+    private boolean inputPath;\n+\n+    @CommandLine.Option(names = {\"-o\", \"--output\"}, description = \"Location of the generated Ballerina service, \" +\n+            \"client and model files.\")\n+    private String outputPath;\n+\n+    @CommandLine.Option(names = {\"--mode\"}, description = \"Generate only service file or client file according to the\" +\n+            \" given mode type\")\n+    private String mode;\n+\n+    @CommandLine.Option(names = {\"-s\", \"--service\"}, description = \"Service name that need to documented as openapi \" +\n+            \"contract\")\n+    private String service;\n+\n+    @CommandLine.Option(names = {\"-m\", \"--module\"}, description = \"Module name which service used to documented\")\n+    private  String module;\n+\n+    @CommandLine.Option(names = {\"--tags\"}, description = \"Tag that need to write service\")\n+    private String tags;\n+\n+    @CommandLine.Option(names = {\"--operations\"}, description = \"Operations that need to write service\")\n+    private String operations;\n+\n+    @CommandLine.Option(names = {\"--service-name\"}, description = \"Service name for generated files\")\n+    private String generatedServiceName;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n     public OpenApiCmd() {\n         this.outStream = System.err;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     public OpenApiCmd(PrintStream outStream) {\n         this.outStream = outStream;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     @Override\n     public void execute() {\n-        String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n-        outStream.println(commandUsageInfo);\n+        //User notification of using an experimental tool\n+        outStream.println(OpenApiMesseges.EXPERIMENTAL_FEATURE);\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+        //Check if cli input argument is present\n+        if (inputPath) {\n+            //Check if an OpenApi definition is provided\n+            if (argList == null) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+            // If given input is yaml contract, it generates service file and client stub\n+            // else if given ballerina service file it generates openapi contract file\n+            // else it generates error message to enter correct input file\n+            String fileName = argList.get(0);\n+            if (fileName.endsWith(\".yaml\")) {\n+                List<String> tag = new ArrayList<>();\n+                List<String> operation = new ArrayList<>();\n+                if (tags != null) {\n+                     tag.addAll(Arrays.asList(tags.split(\",\")));\n+                }\n+                if (operations != null) {\n+                    operation.addAll(Arrays.asList(operations.split(\",\")));\n+                }\n+                Filter filter = new Filter(tag, operation);\n+                openApiToBallerina(fileName, filter);\n+            } else if (fileName.endsWith(\".bal\")) {\n+                ballerinaToOpenApi(fileName);\n+            } else {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+        } else {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * This util method to generate openApi contract based on the given service ballerina file.\n+     * @param fileName  input resource file\n+     */\n+    private void ballerinaToOpenApi(String fileName) {\n+        final File balFile = new File(fileName);\n+        String serviceName = service;\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(balFile, this.targetOutputPath.toString());\n+        //ballerina openapi -i service.bal --serviceName serviceName --module exampleModul -o ./\n+        // Check service name it is mandatory\n+        if (module != null && service != null) {\n+            if (!checkModuleExist(module)) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_INVALID_MODULE);\n+            }\n+            try {\n+                OpenApiConverterUtils.generateOAS3DefinitionFromModule(module, serviceName,\n+                        targetOutputPath);\n+            } catch (Exception e) {\n+                throw LauncherUtils.createLauncherException(\"Error occurred when exporting openapi file. \" +\n+                        \"\\n\" + e.getMessage());\n+            }\n+        } else if (serviceName != null) {\n+            try {\n+                OpenApiConverterUtils.generateOAS3Definitions(resourcePath, targetOutputPath, serviceName);\n+            } catch (IOException | OpenApiConverterException e) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            }\n+        } else {\n+            try {\n+                OpenApiConverterUtils.generateOAS3DefinitionsAllService(resourcePath, targetOutputPath);\n+            } catch (IOException | OpenApiConverterException | CompilationFailedException e) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * A util method for generating service and client stub using given contract file.\n+     * @param fileName input resource file\n+     */\n+    private void openApiToBallerina(String fileName, Filter filter) {\n+        CodeGenerator generator = new CodeGenerator();\n+        final File openApiFile = new File(fileName);\n+        String serviceName;\n+        if (generatedServiceName != null) {\n+            serviceName = generatedServiceName;\n+        } else {\n+            serviceName = openApiFile.getName().split(\"\\\\.\")[0];\n+        }\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(openApiFile, this.targetOutputPath.toString());\n+        if (mode != null) {\n+            switch (mode) {\n+                case \"service\":\n+                    generateServiceFile(generator, serviceName, resourcePath, filter);\n+                    break;\n+                case \"client\":\n+                    generatesClientFile(generator, serviceName, resourcePath, filter);\n+                    break;\n+                default:\n+                    break;\n+            }\n+        } else {\n+            generateBothFiles(generator, serviceName, resourcePath, filter);\n+        }\n+    }\n+\n+    /**\n+     * A util to take the resource Path.\n+     * @param resourceFile      resource file path\n+     * @return path of given resource file\n+     */\n+    private Path getResourcePath(File resourceFile, String targetOutputPath) {\n+        Path resourcePath = null;\n+        Path relativePath = null;\n+        try {\n+            resourcePath = Paths.get(resourceFile.getCanonicalPath());\n+            relativePath =\n+                    Paths.get(new File(targetOutputPath).toURI().relativize(new File(resourcePath.toString()).toURI())\n+                            .getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 220}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e058e0339010bfad44579a3952d333284411d1", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0e058e0339010bfad44579a3952d333284411d1", "committedDate": "2020-09-09T11:40:07Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTE2ODYy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-484916862", "createdAt": "2020-09-09T11:35:35Z", "commit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTozNTozNlrOHPDGLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo0MjoyN1rOHPDUHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MTQyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n          \n          \n            \n                        This is a mandatory input. The given OpenAPI contract input will generate a Ballerina service and the client", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485541421", "createdAt": "2020-09-09T11:35:36Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MTYyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        stub files for given openapi contract. This generated service can be used as a code template\n          \n          \n            \n                        stub files for the given OpenAPI contract. This generated service can be used as a code template", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485541623", "createdAt": "2020-09-09T11:35:56Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MTY5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        to start the service implementation. Generated sources contain a service definition, schema definition and\n          \n          \n            \n                        to start the service implementation. Generated sources contain a service definition, schema definition, and", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485541693", "createdAt": "2020-09-09T11:36:04Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MTgyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n          \n          \n            \n                        a copy of the OpenAPI contract, which is used for the template generation. The generated client stub is used to", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485541821", "createdAt": "2020-09-09T11:36:18Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MjA0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Ballerina service file as a given input will generate the relevant openApi specification for the service\n          \n          \n            \n                        The given Ballerina service file input will generate the relevant OpenAPI specification for the service", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485542049", "createdAt": "2020-09-09T11:36:44Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MjE5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        the output will be written onto the same directory from where the command is run.\n          \n          \n            \n                        the output will be written to the same directory from which the command is run.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485542190", "createdAt": "2020-09-09T11:37:01Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MjQ3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Mode type can be service or client. Generate a ballerina service and client only\n          \n          \n            \n                        Mode type can be `service` or `client`. This generates a Ballerina service and client only", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485542470", "createdAt": "2020-09-09T11:37:33Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MjU1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        according to the mode. This is optional input.\n          \n          \n            \n                        according to the mode. This is an optional input.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485542550", "createdAt": "2020-09-09T11:37:41Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MjgwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        This use when ballerina file convert to openapi contract\n          \n          \n            \n                        This is used when a Ballerina file converts to an OpenAPI contract", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485542806", "createdAt": "2020-09-09T11:38:10Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.\n+\n+        (-m| --module) <module name>\n+            This use when ballerina file convert to openapi contract", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MzAyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        This use for allocating specific user-given name to generated service and client stub according to openapi\n          \n          \n            \n                        This is used for allocating specific user-given name to the generated service and client stub according to the OpenAPI", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485543020", "createdAt": "2020-09-09T11:38:36Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.\n+\n+        (-m| --module) <module name>\n+            This use when ballerina file convert to openapi contract\n+\n+        (--service-name) <service name>\n+            This use for allocating specific user-given name to generated service and client stub according to openapi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MzIwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        contract. This option uses with the command of openApi to ballerina file generation.\n          \n          \n            \n                        contract. This option is used with the command of OpenAPI to Ballerina file generation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485543205", "createdAt": "2020-09-09T11:39:00Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.\n+\n+        (-m| --module) <module name>\n+            This use when ballerina file convert to openapi contract\n+\n+        (--service-name) <service name>\n+            This use for allocating specific user-given name to generated service and client stub according to openapi\n+            contract. This option uses with the command of openApi to ballerina file generation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MzQ5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        This service name is used to identify the service that need to documented as openApi specification. This\n          \n          \n            \n                        This service name is used to identify the service that needs to be documented as per the OpenAPI specification. This", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485543494", "createdAt": "2020-09-09T11:39:36Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.\n+\n+        (-m| --module) <module name>\n+            This use when ballerina file convert to openapi contract\n+\n+        (--service-name) <service name>\n+            This use for allocating specific user-given name to generated service and client stub according to openapi\n+            contract. This option uses with the command of openApi to ballerina file generation.\n+\n+\n+        (-s| --service ) <current service name>\n+            This service name is used to identify the service that need to documented as openApi specification. This", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MzY5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        option uses with the command of ballerina to openApi specification generation.\n          \n          \n            \n                        option is used with the command of the Ballerina to OpenAPI specification generation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485543693", "createdAt": "2020-09-09T11:40:00Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.\n+\n+        (-m| --module) <module name>\n+            This use when ballerina file convert to openapi contract\n+\n+        (--service-name) <service name>\n+            This use for allocating specific user-given name to generated service and client stub according to openapi\n+            contract. This option uses with the command of openApi to ballerina file generation.\n+\n+\n+        (-s| --service ) <current service name>\n+            This service name is used to identify the service that need to documented as openApi specification. This\n+            option uses with the command of ballerina to openApi specification generation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDAwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        This tags use to filter the operations tag need to generate services. This option uses with command\n          \n          \n            \n                        This tags are used to filter the operations tags that are needed to generate services. This option is used with the command", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485544007", "createdAt": "2020-09-09T11:40:36Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.\n+\n+        (-m| --module) <module name>\n+            This use when ballerina file convert to openapi contract\n+\n+        (--service-name) <service name>\n+            This use for allocating specific user-given name to generated service and client stub according to openapi\n+            contract. This option uses with the command of openApi to ballerina file generation.\n+\n+\n+        (-s| --service ) <current service name>\n+            This service name is used to identify the service that need to documented as openApi specification. This\n+            option uses with the command of ballerina to openApi specification generation.\n \n+        (--tags) <tag names>\n+            This tags use to filter the operations tag need to generate services. This option uses with command", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDE0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        of openApi to ballerina file generation.\n          \n          \n            \n                        of OpenAPI to Ballerina file generation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485544146", "createdAt": "2020-09-09T11:40:52Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.\n+\n+        (-m| --module) <module name>\n+            This use when ballerina file convert to openapi contract\n+\n+        (--service-name) <service name>\n+            This use for allocating specific user-given name to generated service and client stub according to openapi\n+            contract. This option uses with the command of openApi to ballerina file generation.\n+\n+\n+        (-s| --service ) <current service name>\n+            This service name is used to identify the service that need to documented as openApi specification. This\n+            option uses with the command of ballerina to openApi specification generation.\n \n+        (--tags) <tag names>\n+            This tags use to filter the operations tag need to generate services. This option uses with command\n+            of openApi to ballerina file generation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDQxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        This operations use to filter the operations wise need to generate services. This option uses with command\n          \n          \n            \n                        These operations are used to filter the operations that are needed to generate services. This option is used with the command", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485544410", "createdAt": "2020-09-09T11:41:23Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.\n+\n+        (-m| --module) <module name>\n+            This use when ballerina file convert to openapi contract\n+\n+        (--service-name) <service name>\n+            This use for allocating specific user-given name to generated service and client stub according to openapi\n+            contract. This option uses with the command of openApi to ballerina file generation.\n+\n+\n+        (-s| --service ) <current service name>\n+            This service name is used to identify the service that need to documented as openApi specification. This\n+            option uses with the command of ballerina to openApi specification generation.\n \n+        (--tags) <tag names>\n+            This tags use to filter the operations tag need to generate services. This option uses with command\n+            of openApi to ballerina file generation.\n+\n+        (--operations) <operation names>\n+            This operations use to filter the operations wise need to generate services. This option uses with command", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDU2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        of openApi to ballerina file generation.\n          \n          \n            \n                        of the OpenAPI to Ballerina file generation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485544560", "createdAt": "2020-09-09T11:41:38Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -28,21 +18,45 @@ DESCRIPTION\n        Note: This is an experimental tool, which only supports a limited\n        set of functionality.\n \n+OPTIONS\n+        (-i| --input) <openapi-contract> | <ballerina service file>\n+            This is mandatory input. Openapi contract as a given input will generate a Ballerina service and client\n+            stub files for given openapi contract. This generated service can be used as a code template\n+            to start the service implementation. Generated sources contain a service definition, schema definition and\n+            a copy of the OpenAPI contract which is used for the template generation. Generated client stub is used to\n+            start the client application implementation to call the service defined in the OpenAPI file.\n+            Ballerina service file as a given input will generate the relevant openApi specification for the service\n+            file.\n \n-SUB COMMANDS\n-       gen-service\n-           Generate a Ballerina service from the OpenAPI file. This\n-           generated service can be used as a code template to start the\n-           service implementation. Generated sources contain a service\n-           definition, schema definition and  a copy of the OpenAPI contract\n-           which is used for the template generation.\n-\n-       gen-client\n-           Generate a Ballerina client stub for the service defined\n-           in the OpenAPI file. Generated client stub is used to start the\n-           client application implementation to call the service defined in\n-           the OpenAPI file.\n+        (-o| --output) <target location>\n+            Location of the generated Ballerina source code. If this path is not specified,\n+            the output will be written onto the same directory from where the command is run.\n+\n+        (--mode) <mode-type>\n+            Mode type can be service or client. Generate a ballerina service and client only\n+            according to the mode. This is optional input.\n+\n+        (-m| --module) <module name>\n+            This use when ballerina file convert to openapi contract\n+\n+        (--service-name) <service name>\n+            This use for allocating specific user-given name to generated service and client stub according to openapi\n+            contract. This option uses with the command of openApi to ballerina file generation.\n+\n+\n+        (-s| --service ) <current service name>\n+            This service name is used to identify the service that need to documented as openApi specification. This\n+            option uses with the command of ballerina to openApi specification generation.\n \n+        (--tags) <tag names>\n+            This tags use to filter the operations tag need to generate services. This option uses with command\n+            of openApi to ballerina file generation.\n+\n+        (--operations) <operation names>\n+            This operations use to filter the operations wise need to generate services. This option uses with command\n+            of openApi to ballerina file generation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDczMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   Generate both Ballerina client and service file.\n          \n          \n            \n                   Generate both the Ballerina client and service file.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485544730", "createdAt": "2020-09-09T11:41:56Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -60,18 +74,22 @@ EXAMPLES\n           $ ballerina openapi\n           $ ballerina openapi -h\n \n-       Print usage details of the OpenAPI sub commands.\n-          $ ballerina openapi gen-service -h\n-          $ ballerina openapi gen-client -h\n-          $ ballerina openapi gen-contract -h\n-\n        Generate a Ballerina mock service with module name hellomock\n        and service name hello using hello.yaml OpenAPI contract.\n-          $ ballerina openapi gen-service hellomock:hello hello.yaml\n+          $ ballerina openapi -i hello.yaml --mode service\n \n        Generate a Ballerina client with client name helloclient\n        and write the output to the client_project folder.\n-          $ ballerina openapi gen-client helloclient hello.yaml -o client_project\n+          $ ballerina openapi -i hello.yaml --mode client\n \n        Export an OpenAPI definition for hello_service.bal for the hello service.\n-          $ ballerina openapi gen-contract hello -i hello_service.bal\n+          $ ballerina openapi -i hello_service.bal --serviceName hello -o ./\n+\n+       Generate both Ballerina client and service file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDg4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   Generate a Ballerina mock service with module name hellomock\n          \n          \n            \n                   Generate a Ballerina mock service with the module name `hellomock`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485544885", "createdAt": "2020-09-09T11:42:14Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -60,18 +74,22 @@ EXAMPLES\n           $ ballerina openapi\n           $ ballerina openapi -h\n \n-       Print usage details of the OpenAPI sub commands.\n-          $ ballerina openapi gen-service -h\n-          $ ballerina openapi gen-client -h\n-          $ ballerina openapi gen-contract -h\n-\n        Generate a Ballerina mock service with module name hellomock", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NDk4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   and service name hello using hello.yaml OpenAPI contract.\n          \n          \n            \n                   and service name `hello` using the `hello.yaml` OpenAPI contract.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485544988", "createdAt": "2020-09-09T11:42:27Z", "author": {"login": "praneesha"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help", "diffHunk": "@@ -60,18 +74,22 @@ EXAMPLES\n           $ ballerina openapi\n           $ ballerina openapi -h\n \n-       Print usage details of the OpenAPI sub commands.\n-          $ ballerina openapi gen-service -h\n-          $ ballerina openapi gen-client -h\n-          $ ballerina openapi gen-contract -h\n-\n        Generate a Ballerina mock service with module name hellomock\n        and service name hello using hello.yaml OpenAPI contract.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f63f0598accbb664552fd115580d1d710d83016d", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f63f0598accbb664552fd115580d1d710d83016d", "committedDate": "2020-09-09T12:15:56Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc9dbe9a59c8032570dce8f3cef09bd8a0d1bf8", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fc9dbe9a59c8032570dce8f3cef09bd8a0d1bf8", "committedDate": "2020-09-09T12:16:46Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81fe14e91a9a0264701a088923bf6338fee6edf2", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81fe14e91a9a0264701a088923bf6338fee6edf2", "committedDate": "2020-09-09T12:17:28Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c1d242dc01a14db87f0904b6ed14ac9a2144810", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c1d242dc01a14db87f0904b6ed14ac9a2144810", "committedDate": "2020-09-09T12:18:12Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af15c5cf3b8940c6dc03e6bcb1c773af1e58629f", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af15c5cf3b8940c6dc03e6bcb1c773af1e58629f", "committedDate": "2020-09-09T12:18:59Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a08287b141bc48b32fc6ac6db6cdb9baaa45d549", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a08287b141bc48b32fc6ac6db6cdb9baaa45d549", "committedDate": "2020-09-09T12:19:40Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6ef4636514fa9e4dc2d18d824987a123f82d6c2", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6ef4636514fa9e4dc2d18d824987a123f82d6c2", "committedDate": "2020-09-09T12:21:15Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "053131af602b3d385e9cbdedd3e75864ac87b2d9", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/053131af602b3d385e9cbdedd3e75864ac87b2d9", "committedDate": "2020-09-09T12:21:42Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b61bd6dcd2202e66bf39a1ef6f5b35557a5b67c", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b61bd6dcd2202e66bf39a1ef6f5b35557a5b67c", "committedDate": "2020-09-09T12:21:59Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d6d5d34027d454f6689b9278320d137208e35ab", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d6d5d34027d454f6689b9278320d137208e35ab", "committedDate": "2020-09-09T12:22:18Z", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cf7a149960e95d63e9baa4032f335a9eb04b4a1", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6cf7a149960e95d63e9baa4032f335a9eb04b4a1", "committedDate": "2020-09-09T12:27:10Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20119b7a9703b8dca01bf20b62234e5cca1e2a4a", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20119b7a9703b8dca01bf20b62234e5cca1e2a4a", "committedDate": "2020-09-10T05:29:32Z", "message": "Fix resourcePath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c638ebf80126264189cedc5a3fc80ca0bb14f346", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c638ebf80126264189cedc5a3fc80ca0bb14f346", "committedDate": "2020-09-10T12:11:10Z", "message": "Add Json file as input"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTM0MzAz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#pullrequestreview-486534303", "createdAt": "2020-09-11T07:21:53Z", "commit": {"oid": "c638ebf80126264189cedc5a3fc80ca0bb14f346"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4854, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}