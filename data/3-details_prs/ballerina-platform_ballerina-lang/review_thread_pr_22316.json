{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NjAzODc0", "number": 22316, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoxMToxMlrODs_n5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozODo1OVrODtARMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTA2MzQxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoxMToxMlrOF-KGYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyMTo0MlrOF-d3EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ==", "bodyText": "Not related to this PR, but returning true for isJSONObject if  typeTag == TypeTags.JSON_TAG is wrong right? And we need to check the map's constraint too assuming this is a generic method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400721505", "createdAt": "2020-03-31T08:11:12Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONUtils.java", "diffHunk": "@@ -297,7 +297,8 @@ public static boolean isJSONObject(Object json) {\n         }\n \n         BType type = ((RefValue) json).getType();\n-        return type.getTag() == TypeTags.JSON_TAG || type.getTag() == TypeTags.MAP_TAG;\n+        int typeTag = type.getTag();\n+        return typeTag == TypeTags.JSON_TAG || typeTag == TypeTags.MAP_TAG || typeTag == TypeTags.RECORD_TYPE_TAG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5NDEzOQ==", "bodyText": "Just checked this. It seems simple literals are in their original type, so it doesn't count as a JSON tag. For example, the following works as expected:\nimport ballerina/io;\n\npublic function main() {\n    json j1 = 10;\n    io:println(j1.name);\n}\nj1 is a Long when you check at this point.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400794139", "createdAt": "2020-03-31T10:08:11Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONUtils.java", "diffHunk": "@@ -297,7 +297,8 @@ public static boolean isJSONObject(Object json) {\n         }\n \n         BType type = ((RefValue) json).getType();\n-        return type.getTag() == TypeTags.JSON_TAG || type.getTag() == TypeTags.MAP_TAG;\n+        int typeTag = type.getTag();\n+        return typeTag == TypeTags.JSON_TAG || typeTag == TypeTags.MAP_TAG || typeTag == TypeTags.RECORD_TYPE_TAG;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ=="}, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1MDM5OA==", "bodyText": "Yeah but typeTag == TypeTags.JSON_TAG will never be true right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400950398", "createdAt": "2020-03-31T14:18:01Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONUtils.java", "diffHunk": "@@ -297,7 +297,8 @@ public static boolean isJSONObject(Object json) {\n         }\n \n         BType type = ((RefValue) json).getType();\n-        return type.getTag() == TypeTags.JSON_TAG || type.getTag() == TypeTags.MAP_TAG;\n+        int typeTag = type.getTag();\n+        return typeTag == TypeTags.JSON_TAG || typeTag == TypeTags.MAP_TAG || typeTag == TypeTags.RECORD_TYPE_TAG;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ=="}, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzNjMxMw==", "bodyText": "Ah just checked it.. yeah, you're right.. for JSON objects, it's map<json>.. I'll remove this condition and see..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r401036313", "createdAt": "2020-03-31T16:08:36Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONUtils.java", "diffHunk": "@@ -297,7 +297,8 @@ public static boolean isJSONObject(Object json) {\n         }\n \n         BType type = ((RefValue) json).getType();\n-        return type.getTag() == TypeTags.JSON_TAG || type.getTag() == TypeTags.MAP_TAG;\n+        int typeTag = type.getTag();\n+        return typeTag == TypeTags.JSON_TAG || typeTag == TypeTags.MAP_TAG || typeTag == TypeTags.RECORD_TYPE_TAG;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ=="}, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0NTI2NA==", "bodyText": "Removed it in 4b4eaea. The unit tests passed locally.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r401045264", "createdAt": "2020-03-31T16:21:42Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONUtils.java", "diffHunk": "@@ -297,7 +297,8 @@ public static boolean isJSONObject(Object json) {\n         }\n \n         BType type = ((RefValue) json).getType();\n-        return type.getTag() == TypeTags.JSON_TAG || type.getTag() == TypeTags.MAP_TAG;\n+        int typeTag = type.getTag();\n+        return typeTag == TypeTags.JSON_TAG || typeTag == TypeTags.MAP_TAG || typeTag == TypeTags.RECORD_TYPE_TAG;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ=="}, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTE2NDk1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozNzo1MFrOF-LG6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo0ODo1NFrOF-Nzng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODAyNA==", "bodyText": "Shouldn't we just return false?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400738024", "createdAt": "2020-03-31T08:37:50Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -618,17 +622,34 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n                 isArrayTypesAssignable(source, target, unresolvedTypes);\n     }\n \n-    private boolean isAssignableRecordType(BRecordType recordType, BMapType targetMapType) {\n+    private boolean isAssignableRecordType(BRecordType recordType, BType type) {\n+        BType targetType;\n+        switch (type.tag) {\n+            case TypeTags.MAP:\n+                targetType = ((BMapType) type).constraint;\n+                break;\n+            case TypeTags.JSON:\n+                targetType = type;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Incompatible target type: \" + type.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4MjIzOA==", "bodyText": "Added this default case since I changed the method signature to accept BType and wanted to ensure this method is used only in contexts with the supported types (map and json).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400782238", "createdAt": "2020-03-31T09:48:54Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -618,17 +622,34 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n                 isArrayTypesAssignable(source, target, unresolvedTypes);\n     }\n \n-    private boolean isAssignableRecordType(BRecordType recordType, BMapType targetMapType) {\n+    private boolean isAssignableRecordType(BRecordType recordType, BType type) {\n+        BType targetType;\n+        switch (type.tag) {\n+            case TypeTags.MAP:\n+                targetType = ((BMapType) type).constraint;\n+                break;\n+            case TypeTags.JSON:\n+                targetType = type;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Incompatible target type: \" + type.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODAyNA=="}, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTE2ODU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozODo1MFrOF-LJYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo1MDoyOFrOF-N3Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODY1Nw==", "bodyText": "Shall we move this logic to recordFieldsAssignableToType. Rest fields are also record fields?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400738657", "createdAt": "2020-03-31T08:38:50Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -618,17 +622,34 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n                 isArrayTypesAssignable(source, target, unresolvedTypes);\n     }\n \n-    private boolean isAssignableRecordType(BRecordType recordType, BMapType targetMapType) {\n+    private boolean isAssignableRecordType(BRecordType recordType, BType type) {\n+        BType targetType;\n+        switch (type.tag) {\n+            case TypeTags.MAP:\n+                targetType = ((BMapType) type).constraint;\n+                break;\n+            case TypeTags.JSON:\n+                targetType = type;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Incompatible target type: \" + type.toString());\n+        }\n+\n         if (recordType.sealed) {\n-            return recordFieldsAssignableToMap(recordType, targetMapType);\n+            return recordFieldsAssignableToType(recordType, targetType);\n         } else {\n-            return isAssignable(recordType.restFieldType, targetMapType.constraint)\n-                    && recordFieldsAssignableToMap(recordType, targetMapType);\n+            return recordFieldsAssignableToType(recordType, targetType) &&\n+                    isAssignable(recordType.restFieldType, targetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4MzE5NA==", "bodyText": "+1.. That'd actually simplify things a bit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400783194", "createdAt": "2020-03-31T09:50:28Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -618,17 +622,34 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n                 isArrayTypesAssignable(source, target, unresolvedTypes);\n     }\n \n-    private boolean isAssignableRecordType(BRecordType recordType, BMapType targetMapType) {\n+    private boolean isAssignableRecordType(BRecordType recordType, BType type) {\n+        BType targetType;\n+        switch (type.tag) {\n+            case TypeTags.MAP:\n+                targetType = ((BMapType) type).constraint;\n+                break;\n+            case TypeTags.JSON:\n+                targetType = type;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Incompatible target type: \" + type.toString());\n+        }\n+\n         if (recordType.sealed) {\n-            return recordFieldsAssignableToMap(recordType, targetMapType);\n+            return recordFieldsAssignableToType(recordType, targetType);\n         } else {\n-            return isAssignable(recordType.restFieldType, targetMapType.constraint)\n-                    && recordFieldsAssignableToMap(recordType, targetMapType);\n+            return recordFieldsAssignableToType(recordType, targetType) &&\n+                    isAssignable(recordType.restFieldType, targetType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODY1Nw=="}, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTE2OTEyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/json/RecordToJSONTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozODo1OVrOF-LJtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozODo1OVrOF-LJtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODc0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400738742", "createdAt": "2020-03-31T08:38:59Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/json/RecordToJSONTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ *   Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4448, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}