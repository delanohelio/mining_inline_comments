{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NDUwNDk4", "number": 25447, "title": "Modify New and Init Command according to the latest layout", "bodyText": "Purpose\n\nModify New and Init Command according to the latest layout\n\nFixes #25449\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-08-27T05:09:56Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447", "merged": true, "mergeCommit": {"oid": "8e5aee6c8c4bcc57aadca2558da429c1c708c681"}, "closed": true, "closedAt": "2020-09-03T17:23:56Z", "author": {"login": "suganyasuven"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCvd_ngH2gAyNDc0NDUwNDk4OmQ4MDU5ZTNlYjk5ZTg4MDM0ZDNmMzM3MDM3NzNkODcwYzkxYmUyMTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFT-2TAFqTQ4MjA1MTg1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d8059e3eb99e88034d3f33703773d870c91be215", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d8059e3eb99e88034d3f33703773d870c91be215", "committedDate": "2020-08-26T17:43:23Z", "message": "Modify new and init command according to the latest layout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00d02dc34cc83e870d728fd018dbbe92618e9b72", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00d02dc34cc83e870d728fd018dbbe92618e9b72", "committedDate": "2020-08-27T05:06:23Z", "message": "Add unit tests and refactor code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MzkyNzM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#pullrequestreview-476392734", "createdAt": "2020-08-27T05:21:09Z", "commit": {"oid": "00d02dc34cc83e870d728fd018dbbe92618e9b72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToyMTowOVrOHH-9SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToyMTowOVrOHH-9SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzMzU3Nw==", "bodyText": "Shall we remove this new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r478133577", "createdAt": "2020-08-27T05:21:09Z", "author": {"login": "lnash94"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java", "diffHunk": "@@ -108,5 +111,42 @@ static Path createTargetDirectoryStructure(Path sourceRoot) throws IOException {\n \n         return targetDir;\n     }\n+\n+    /**\n+     * Guess organization name based on user name in system.\n+     *\n+     * @return organization name\n+     */\n+    public static String guessOrgName() {\n+        String guessOrgName = System.getProperty(ProjectConstants.USER_DIR);\n+        if (guessOrgName == null) {\n+            guessOrgName = \"my_org\";\n+        } else {\n+            guessOrgName = guessOrgName.toLowerCase(Locale.getDefault());\n+        }\n+        return guessOrgName;\n+    }\n+\n+    /**\n+     * Guess package name with valid pattern.\n+     * @param packageName package name\n+     * @return package name\n+     */\n+    public static String guessPkgName (String packageName) {\n+        if (!validatePkgName(packageName)) {\n+            return packageName.replaceAll(\"-\", \"_\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00d02dc34cc83e870d728fd018dbbe92618e9b72"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "297525b59f61fb93f47bea8474b59e88e6370149", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/297525b59f61fb93f47bea8474b59e88e6370149", "committedDate": "2020-08-27T05:42:44Z", "message": "Add java doc for methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44725eb6807604803200a1d56e3330ab7dcc74f1", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44725eb6807604803200a1d56e3330ab7dcc74f1", "committedDate": "2020-08-27T06:41:42Z", "message": "Modify cli-help texts for add and new command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a48ef32b49205de2aa8c9fa40a40c68543c40c", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/85a48ef32b49205de2aa8c9fa40a40c68543c40c", "committedDate": "2020-08-27T15:59:17Z", "message": "Remove directory creation for InitCommand"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79521a03815105618c554fe205c7f3f4512d5a83", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79521a03815105618c554fe205c7f3f4512d5a83", "committedDate": "2020-08-30T18:09:01Z", "message": "Add code review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6ec563577e347eff7f92991728f5d036901b0db", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6ec563577e347eff7f92991728f5d036901b0db", "committedDate": "2020-08-30T18:43:05Z", "message": "Modify Add Command according to the latest layout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61b8db8078e42187768f42c21fb7ed1a176826c5", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61b8db8078e42187768f42c21fb7ed1a176826c5", "committedDate": "2020-08-31T06:42:41Z", "message": "Merge branch 'project_api' of https://github.com/ballerina-platform/ballerina-lang into project_api_cmd_change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c33fad9785b6c512e6cf808900c1215bbb811dff", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c33fad9785b6c512e6cf808900c1215bbb811dff", "committedDate": "2020-08-31T09:47:01Z", "message": "Fix test failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/665679bf99859263d5d1eaa83cf1a0bd2706c2c5", "committedDate": "2020-08-31T11:20:09Z", "message": "Add negative scenario tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9992d11dff8a35b582df97bb9aeba47edd35e007", "committedDate": "2020-08-31T13:09:14Z", "message": "Revert the AddCommand related changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NTQzMzUx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#pullrequestreview-478543351", "createdAt": "2020-08-31T11:42:32Z", "commit": {"oid": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTo0MjozM1rOHJ1Z0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoyOTo1MFrOHKD1Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3NDE5Mw==", "bodyText": "you dont need catch and re-throw the same exception here. Having the throws in the method signature would suffice", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480074193", "createdAt": "2020-08-31T11:42:33Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java", "diffHunk": "@@ -115,11 +155,124 @@ public static void initProject(Path path) throws IOException {\n             String defaultGitignore = BCompileUtil.readFileAsString(\"new_cmd_defaults/gitignore\");\n \n             // replace manifest org with a guessed value.\n-            defaultManifest = defaultManifest.replaceAll(\"ORG_NAME\", CommandUtil.guessOrgName());\n+            defaultManifest = defaultManifest.replaceAll(\"ORG_NAME\", ProjectUtils.guessOrgName());\n \n             Files.write(manifest, defaultManifest.getBytes(\"UTF-8\"));\n             Files.write(gitignore, defaultGitignore.getBytes(\"UTF-8\"));\n+    }\n+\n+    /**\n+     * Initialize a new ballerina project in the given path.\n+     *\n+     * @param path project path\n+     * @param packageName name of the package\n+     * @param template package template\n+     * @throws IOException  If any IO exception occurred\n+     * @throws URISyntaxException If any URISyntaxException occurred\n+     */\n+    public static void initPackage(Path path, String packageName, String template) throws IOException,\n+            URISyntaxException {\n+        // We will be creating following in the project directory\n+        // - Ballerina.toml\n+        // - Package.md\n+        // - Module.md\n+        // - main.bal\n+        // - resources\n+        // - tests\n+        //      - main_test.bal\n+        //      - resources/\n+        // - .gitignore       <- git ignore file\n+        initProject(path, packageName);\n+        applyTemplate(path, template);\n+        Path gitignore = path.resolve(ProjectConstants.GITIGNORE_FILE_NAME);\n+\n+        Files.createFile(gitignore);\n \n+        String defaultGitignore = FileUtils.readFileAsString(NEW_CMD_DEFAULTS + File.separator + GITIGNORE);\n+\n+        Files.write(gitignore, defaultGitignore.getBytes(StandardCharsets.UTF_8));\n     }\n \n+    /**\n+     * Get the list of templates.\n+     *\n+     * @return list of templates\n+     */\n+    public static List<String> getTemplates() {\n+        try {\n+            Path templateDir = getTemplatePath();\n+            Stream<Path> walk = Files.walk(templateDir, 1);\n+\n+            List<String> templates = walk.filter(Files::isDirectory)\n+                    .filter(directory -> !templateDir.equals(directory))\n+                    .filter(directory -> directory.getFileName() != null)\n+                    .map(directory -> directory.getFileName())\n+                    .map(fileName -> fileName.toString())\n+                    .collect(Collectors.toList());\n+\n+            if (null != jarFs) {\n+                return templates.stream().map(t -> t\n+                        .replace(jarFs.getSeparator(), \"\"))\n+                        .collect(Collectors.toList());\n+            } else {\n+                return templates;\n+            }\n+\n+        } catch (IOException | URISyntaxException e) {\n+            // we will return an empty list if error.\n+            return new ArrayList<String>();\n+        }\n+    }\n+\n+    /**\n+     * Get the path to the given template.\n+     *\n+     * @return path of the given template\n+     * @throws URISyntaxException if any URISyntaxException occured\n+     */\n+    private static Path getTemplatePath() throws URISyntaxException {\n+        URI uri = CommandUtil.class.getClassLoader().getResource(CREATE_CMD_TEMPLATES).toURI();\n+        if (uri.toString().contains(\"!\")) {\n+            final String[] array = uri.toString().split(\"!\");\n+            return jarFs.getPath(array[1]);\n+        } else {\n+            return Paths.get(uri);\n+        }\n+    }\n+\n+    /**\n+     * Apply the template to the created module.\n+     *\n+     * @param modulePath path to the module\n+     * @param template template name\n+     * @throws IOException if any IOException occurred\n+     * @throws URISyntaxException if any URISyntaxException occurred\n+     */\n+    public static void applyTemplate(Path modulePath, String template) throws IOException, URISyntaxException {\n+        Path templateDir = getTemplatePath().resolve(template);\n+\n+        try {\n+            Files.walkFileTree(templateDir, new FileUtils.Copy(templateDir, modulePath));\n+        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4MDkxMw==", "bodyText": "Shall we rename this function to be more meaningful? Something like initProjectByTemplate", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480080913", "createdAt": "2020-08-31T11:56:39Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/CommandUtil.java", "diffHunk": "@@ -115,11 +155,124 @@ public static void initProject(Path path) throws IOException {\n             String defaultGitignore = BCompileUtil.readFileAsString(\"new_cmd_defaults/gitignore\");\n \n             // replace manifest org with a guessed value.\n-            defaultManifest = defaultManifest.replaceAll(\"ORG_NAME\", CommandUtil.guessOrgName());\n+            defaultManifest = defaultManifest.replaceAll(\"ORG_NAME\", ProjectUtils.guessOrgName());\n \n             Files.write(manifest, defaultManifest.getBytes(\"UTF-8\"));\n             Files.write(gitignore, defaultGitignore.getBytes(\"UTF-8\"));\n+    }\n+\n+    /**\n+     * Initialize a new ballerina project in the given path.\n+     *\n+     * @param path project path\n+     * @param packageName name of the package\n+     * @param template package template\n+     * @throws IOException  If any IO exception occurred\n+     * @throws URISyntaxException If any URISyntaxException occurred\n+     */\n+    public static void initPackage(Path path, String packageName, String template) throws IOException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4MjIyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If the current directory is a ballerina project ignore.\n          \n          \n            \n                    // If the current directory is a ballerina project, fail the command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480082227", "createdAt": "2020-08-31T11:59:22Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java", "diffHunk": "@@ -86,7 +95,17 @@ public void execute() {\n             return;\n         }\n \n-        Path path = userDir.resolve(argList.get(0));\n+        // If the current directory is a ballerina project ignore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NTI4Nw==", "bodyText": "@hevayo should we throw an error if the project name contains characters that are not allowed, or continue with a warning?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480085287", "createdAt": "2020-08-31T12:06:16Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java", "diffHunk": "@@ -97,29 +116,47 @@ public void execute() {\n         }\n \n         // Check if the command is executed inside a ballerina project\n-        Path projectRoot = ProjectDirs.findProjectRoot(path);\n+        Path projectRoot = ProjectUtils.findProjectRoot(path);\n         if (projectRoot != null) {\n             CommandUtil.printError(errStream,\n-            \"Directory is already within a Ballerina project :\" + projectRoot.toString(),\n+            \"Directory is already within a Ballerina project :\" +\n+                    projectRoot.resolve(ProjectConstants.BALLERINA_TOML).toString(),\n+                    null,\n+                    false);\n+            return;\n+        }\n+\n+        if (!ProjectUtils.validatePkgName(packageName)) {\n+            CommandUtil.printError(errStream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NTUwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @test:AfterSuite\n          \n          \n            \n            @test:AfterSuite {}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480085506", "createdAt": "2020-08-31T12:06:43Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/resources/create_cmd_templates/lib/tests/main_test.bal", "diffHunk": "@@ -0,0 +1,39 @@\n+import ballerina/io;\n+import ballerina/test;\n+\n+# Before Suite Function\n+\n+@test:BeforeSuite\n+function beforeSuiteFunc() {\n+    io:println(\"I'm the before suite function!\");\n+}\n+\n+# Before test function\n+\n+function beforeFunc() {\n+    io:println(\"I'm the before function!\");\n+}\n+\n+# Test function\n+\n+@test:Config {\n+    before: \"beforeFunc\",\n+    after: \"afterFunc\"\n+}\n+function testFunction() {\n+    io:println(\"I'm in test function!\");\n+    test:assertTrue(true, msg = \"Failed!\");\n+}\n+\n+# After test function\n+\n+function afterFunc() {\n+    io:println(\"I'm the after function!\");\n+}\n+\n+# After Suite Function\n+\n+@test:AfterSuite", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4OTAyMg==", "bodyText": "Shall we address the AddCommand changes in a seperate PR since this doesnt have all the required changes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480089022", "createdAt": "2020-08-31T12:14:03Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/AddCommand.java", "diffHunk": "@@ -18,40 +18,35 @@\n \n package org.ballerinalang.packerina.cmd;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665679bf99859263d5d1eaa83cf1a0bd2706c2c5"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5OTk3MQ==", "bodyText": "We already have this constant declared as MODULES_ROOT at L45", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480299971", "createdAt": "2020-08-31T18:09:53Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectConstants.java", "diffHunk": "@@ -36,12 +39,16 @@\n     public static final String CACHES_DIR_NAME = \"caches\";\n \n     public static final String USER_DIR = \"user.dir\";\n+    public static final String USER_NAME = \"user.name\";\n \n     // Balo specific constants\n     public static final String MODULES_ROOT = \"modules\";\n \n+    public static final String BALO_CACHE_DIR_NAME = \"balo_cache\";\n     public static final String BIR_CACHE_DIR_NAME = \"bir_cache\";\n     public static final String JAR_CACHE_DIR_NAME = \"jar_cache\";\n     public static final String JSON_CACHE_DIR_NAME = \"json_cache\";\n+    public static final String MODULES_DIR_NAME = \"modules\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMDg5Mg==", "bodyText": "This method doesn't seem to have any usages. If so, shall we remove it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480300892", "createdAt": "2020-08-31T18:11:34Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java", "diffHunk": "@@ -108,5 +123,43 @@ static Path createTargetDirectoryStructure(Path sourceRoot) throws IOException {\n \n         return targetDir;\n     }\n+\n+    /**\n+     * Guess organization name based on user name in system.\n+     *\n+     * @return organization name\n+     */\n+    public static String guessOrgName() {\n+        String guessOrgName = System.getProperty(ProjectConstants.USER_NAME);\n+        if (guessOrgName == null) {\n+            guessOrgName = \"my_org\";\n+        } else {\n+            guessOrgName = guessOrgName.toLowerCase(Locale.getDefault());\n+        }\n+        return guessOrgName;\n+    }\n+\n+    /**\n+     * Guess package name with valid pattern.\n+     * @param packageName package name\n+     * @return package name\n+     */\n+    public static String guessPkgName (String packageName) {\n+        if (!validatePkgName(packageName)) {\n+            return packageName.replaceAll(\"[^a-z0-9_]\", \"_\");\n+        }\n+        return packageName;\n+    }\n+\n+    /**\n+     * Check if a ballerina module exist.\n+     * @param projectPath project path\n+     * @param moduleName module name\n+     * @return module exist\n+     */\n+    public static boolean isModuleExist(Path projectPath, String moduleName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMTAwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param packageName package name\n          \n          \n            \n                 * @param packageName package name", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480301005", "createdAt": "2020-08-31T18:11:48Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java", "diffHunk": "@@ -108,5 +123,43 @@ static Path createTargetDirectoryStructure(Path sourceRoot) throws IOException {\n \n         return targetDir;\n     }\n+\n+    /**\n+     * Guess organization name based on user name in system.\n+     *\n+     * @return organization name\n+     */\n+    public static String guessOrgName() {\n+        String guessOrgName = System.getProperty(ProjectConstants.USER_NAME);\n+        if (guessOrgName == null) {\n+            guessOrgName = \"my_org\";\n+        } else {\n+            guessOrgName = guessOrgName.toLowerCase(Locale.getDefault());\n+        }\n+        return guessOrgName;\n+    }\n+\n+    /**\n+     * Guess package name with valid pattern.\n+     * @param packageName package name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMTIwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param path path of the file\n          \n          \n            \n                 * @param path path of the file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480301204", "createdAt": "2020-08-31T18:12:13Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/FileUtils.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerina.projects.utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+\n+/**\n+ * Utilities related to files.\n+ *\n+ * @since 2.0.0\n+ */\n+public class FileUtils {\n+    /**\n+     * Read the content of the given file.\n+     * @param path path of the file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNTE2MA==", "bodyText": "New Command without any args should default to the \"main\" template. Therefore, we should add an assertion to verify that the main.bal file exists.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480305160", "createdAt": "2020-08-31T18:19:56Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java", "diffHunk": "@@ -36,34 +36,88 @@\n \n     @Test(description = \"Initialize a new empty project\")\n     public void testNewCommand() throws IOException {\n-        String[] args = {\"project-name\"};\n+        String[] args = {\"project_name\"};\n         NewCommand newCommand = new NewCommand(tmpDir, printStream);\n         new CommandLine(newCommand).parse(args);\n         newCommand.execute();\n         // Check with spec\n-        // project-name/\n+        // project_name/\n         // - Ballerina.toml\n-        // - src/\n-        // - tests/\n-        // -- *.bal           <- integration test code\n-        // -- resources/      <- integration test resources\n+        // - Package.md\n+        // - Module.md\n+        // - main.bal\n+        // - resources\n+        // - tests\n+        //      - main_test.bal\n+        //      - resources/\n         // - .gitignore       <- git ignore file\n \n-        Path projectPath = tmpDir.resolve(\"project-name\");\n-        Assert.assertTrue(Files.exists(projectPath));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\"Ballerina.toml\")));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\"src\")));\n-        Assert.assertTrue(Files.isDirectory(projectPath.resolve(\"src\")));\n-        //Path integrationTestPath = projectPath.resolve(\"tests\");\n-        //Assert.assertTrue(Files.exists(integrationTestPath));\n-        //Assert.assertTrue(Files.isDirectory(integrationTestPath));\n-        //Assert.assertTrue(Files.exists(integrationTestPath.resolve(\"resources\")));\n-        //Assert.assertTrue(Files.isDirectory(integrationTestPath.resolve(\"resources\")));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\".gitignore\")));\n+        Path packageDir = tmpDir.resolve(\"project_name\");\n+        Assert.assertTrue(Files.exists(packageDir));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.BALLERINA_TOML)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNjIxMg==", "bodyText": "Misleading function name. The test implementation verifies the \"main\" template but the function name is related to testing the \"service\" template.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480306212", "createdAt": "2020-08-31T18:21:52Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/InitCommandTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/**\n+ * Test cases for ballerina init command.\n+ *\n+ * @since 2.0.0\n+ */\n+public class InitCommandTest extends CommandTest {\n+\n+    @Test(description = \"Initialize a new empty project within a directory\")\n+    public void testInitCommand() throws IOException {\n+        Path projectPath = tmpDir.resolve(\"sample1\");\n+        Files.createDirectory(projectPath);\n+        Path balFile = projectPath.resolve(\"data.bal\");\n+        Files.createFile(balFile);\n+\n+        String[] args = {};\n+        InitCommand initCommand = new InitCommand(projectPath, printStream);\n+        new CommandLine(initCommand).parse(args);\n+        initCommand.execute();\n+\n+        Assert.assertTrue(Files.exists(projectPath));\n+        Assert.assertTrue(Files.exists(balFile));\n+        Assert.assertTrue(Files.exists(projectPath.resolve(ProjectConstants.BALLERINA_TOML)));\n+        Path testPath = projectPath.resolve(ProjectConstants.TEST_DIR_NAME);\n+        Assert.assertFalse(Files.exists(testPath));\n+\n+        Path resourcePath = projectPath.resolve(ProjectConstants.RESOURCE_DIR_NAME);\n+        Assert.assertFalse(Files.exists(resourcePath));\n+\n+        Assert.assertTrue(readOutput().contains(\"Ballerina project initialised \"));\n+    }\n+\n+    @Test(description = \"Test init command with service template\")\n+    public void testInitCommandWithService() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNjc4Ng==", "bodyText": "Lets fix this and add tests to test the \"service\" and \"lib\" templates", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480306786", "createdAt": "2020-08-31T18:22:57Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/InitCommandTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/**\n+ * Test cases for ballerina init command.\n+ *\n+ * @since 2.0.0\n+ */\n+public class InitCommandTest extends CommandTest {\n+\n+    @Test(description = \"Initialize a new empty project within a directory\")\n+    public void testInitCommand() throws IOException {\n+        Path projectPath = tmpDir.resolve(\"sample1\");\n+        Files.createDirectory(projectPath);\n+        Path balFile = projectPath.resolve(\"data.bal\");\n+        Files.createFile(balFile);\n+\n+        String[] args = {};\n+        InitCommand initCommand = new InitCommand(projectPath, printStream);\n+        new CommandLine(initCommand).parse(args);\n+        initCommand.execute();\n+\n+        Assert.assertTrue(Files.exists(projectPath));\n+        Assert.assertTrue(Files.exists(balFile));\n+        Assert.assertTrue(Files.exists(projectPath.resolve(ProjectConstants.BALLERINA_TOML)));\n+        Path testPath = projectPath.resolve(ProjectConstants.TEST_DIR_NAME);\n+        Assert.assertFalse(Files.exists(testPath));\n+\n+        Path resourcePath = projectPath.resolve(ProjectConstants.RESOURCE_DIR_NAME);\n+        Assert.assertFalse(Files.exists(resourcePath));\n+\n+        Assert.assertTrue(readOutput().contains(\"Ballerina project initialised \"));\n+    }\n+\n+    @Test(description = \"Test init command with service template\")\n+    public void testInitCommandWithService() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNjIxMg=="}, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzkzNA==", "bodyText": "Let's add a test case for the \"lib\" template as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480307934", "createdAt": "2020-08-31T18:24:58Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/test/java/org/ballerinalang/packerina/cmd/NewCommandTest.java", "diffHunk": "@@ -36,34 +36,88 @@\n \n     @Test(description = \"Initialize a new empty project\")\n     public void testNewCommand() throws IOException {\n-        String[] args = {\"project-name\"};\n+        String[] args = {\"project_name\"};\n         NewCommand newCommand = new NewCommand(tmpDir, printStream);\n         new CommandLine(newCommand).parse(args);\n         newCommand.execute();\n         // Check with spec\n-        // project-name/\n+        // project_name/\n         // - Ballerina.toml\n-        // - src/\n-        // - tests/\n-        // -- *.bal           <- integration test code\n-        // -- resources/      <- integration test resources\n+        // - Package.md\n+        // - Module.md\n+        // - main.bal\n+        // - resources\n+        // - tests\n+        //      - main_test.bal\n+        //      - resources/\n         // - .gitignore       <- git ignore file\n \n-        Path projectPath = tmpDir.resolve(\"project-name\");\n-        Assert.assertTrue(Files.exists(projectPath));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\"Ballerina.toml\")));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\"src\")));\n-        Assert.assertTrue(Files.isDirectory(projectPath.resolve(\"src\")));\n-        //Path integrationTestPath = projectPath.resolve(\"tests\");\n-        //Assert.assertTrue(Files.exists(integrationTestPath));\n-        //Assert.assertTrue(Files.isDirectory(integrationTestPath));\n-        //Assert.assertTrue(Files.exists(integrationTestPath.resolve(\"resources\")));\n-        //Assert.assertTrue(Files.isDirectory(integrationTestPath.resolve(\"resources\")));\n-        Assert.assertTrue(Files.exists(projectPath.resolve(\".gitignore\")));\n+        Path packageDir = tmpDir.resolve(\"project_name\");\n+        Assert.assertTrue(Files.exists(packageDir));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.BALLERINA_TOML)));\n+        Path testPath = packageDir.resolve(ProjectConstants.TEST_DIR_NAME);\n+        Assert.assertTrue(Files.exists(testPath));\n+        Assert.assertTrue(Files.isDirectory(testPath));\n+        Assert.assertTrue(Files.exists(testPath.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+        Assert.assertTrue(Files.isDirectory(testPath.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.GITIGNORE_FILE_NAME)));\n+        Path resourcePath = packageDir.resolve(ProjectConstants.RESOURCE_DIR_NAME);\n+        Assert.assertTrue(Files.exists(resourcePath));\n+        Assert.assertTrue(Files.isDirectory(resourcePath));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.MODULE_MD_FILE_NAME)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.PACKAGE_MD_FILE_NAME)));\n+\n+        Assert.assertTrue(readOutput().contains(\"Created new Ballerina project at \"));\n+    }\n+\n+    @Test(description = \"Test new command with service template\")\n+    public void testAddCommandWithService() throws IOException {\n+        // Test if no arguments was passed in\n+        String[] args = {\"servicemodule\", \"-t\", \"service\"};\n+        NewCommand newCommand = new NewCommand(tmpDir, printStream);\n+        new CommandLine(newCommand).parseArgs(args);\n+        newCommand.execute();\n+        Path packageDir = tmpDir.resolve(\"servicemodule\");\n+\n+        Assert.assertTrue(Files.exists(packageDir));\n+        Assert.assertTrue(Files.isDirectory(packageDir));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.BALLERINA_TOML)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.MODULE_MD_FILE_NAME)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.PACKAGE_MD_FILE_NAME)));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(\"hello_service.bal\")));\n+        Assert.assertTrue(Files.exists(packageDir.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+        Assert.assertTrue(Files.isDirectory(packageDir.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+\n+        Path moduleTests = packageDir.resolve(ProjectConstants.TEST_DIR_NAME);\n+        Assert.assertTrue(Files.exists(moduleTests));\n+        Assert.assertTrue(Files.isDirectory(moduleTests));\n+        Assert.assertTrue(Files.exists(moduleTests.resolve(\"hello_service_test.bal\")));\n+        Assert.assertTrue(Files.exists(moduleTests.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n+        Assert.assertTrue(Files.isDirectory(moduleTests.resolve(ProjectConstants.RESOURCE_DIR_NAME)));\n \n         Assert.assertTrue(readOutput().contains(\"Created new Ballerina project at \"));\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwODY4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   'Ballerina.toml' file. It contains the organization name and the\n          \n          \n            \n                   'Ballerina.toml' file. It contains the organization name, package name and the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480308680", "createdAt": "2020-08-31T18:26:12Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-init.help", "diffHunk": "@@ -0,0 +1,67 @@\n+NAME\n+       ballerina-init - Create a new Ballerina project inside current directory.\n+\n+SYNOPSIS\n+       ballerina init\n+       ballerina init <package-name>\n+\n+\n+DESCRIPTION\n+       Init initializes a Ballerina project inside the current directory.\n+\n+       A project is a set of logically related Ballerina modules that share\n+       the same 'Ballerina.toml', 'Ballerina.lock' files and the 'target'\n+       directory.\n+\n+       The project directory will have the following structure.\n+            .\n+            \u251c\u2500\u2500 Ballerina.toml\n+            \u251c\u2500\u2500 Ballerina.lock\n+            \u251c\u2500\u2500 main.bal\n+            \u2514\u2500\u2500 tests\n+                \u251c\u2500\u2500 main_test.bal\n+                \u251c\u2500\u2500 resources\n+            \u251c\u2500\u2500 resources\n+            \u2514\u2500\u2500 Module.md\n+            \u2514\u2500\u2500 Package.md\n+\n+       Any directory becomes a Ballerina project if that directory has a\n+       'Ballerina.toml' file. It contains the organization name and the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwOTM4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   A template can also be specified when initialising the new project.\n          \n          \n            \n                   A template can also be specified when initialising a new project.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480309380", "createdAt": "2020-08-31T18:27:37Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-init.help", "diffHunk": "@@ -0,0 +1,67 @@\n+NAME\n+       ballerina-init - Create a new Ballerina project inside current directory.\n+\n+SYNOPSIS\n+       ballerina init\n+       ballerina init <package-name>\n+\n+\n+DESCRIPTION\n+       Init initializes a Ballerina project inside the current directory.\n+\n+       A project is a set of logically related Ballerina modules that share\n+       the same 'Ballerina.toml', 'Ballerina.lock' files and the 'target'\n+       directory.\n+\n+       The project directory will have the following structure.\n+            .\n+            \u251c\u2500\u2500 Ballerina.toml\n+            \u251c\u2500\u2500 Ballerina.lock\n+            \u251c\u2500\u2500 main.bal\n+            \u2514\u2500\u2500 tests\n+                \u251c\u2500\u2500 main_test.bal\n+                \u251c\u2500\u2500 resources\n+            \u251c\u2500\u2500 resources\n+            \u2514\u2500\u2500 Module.md\n+            \u2514\u2500\u2500 Package.md\n+\n+       Any directory becomes a Ballerina project if that directory has a\n+       'Ballerina.toml' file. It contains the organization name and the\n+       version. It also enables dependency management across the project.\n+\n+       The 'modules' directory contains Ballerina modules. Use\n+       'ballerina add <module-name>' command to create modules.\n+\n+       Both 'target' directory and 'Ballerina.lock' file are created during\n+       the build process. The 'target' is the output directory that contains\n+       build artifacts.\n+\n+       The 'Ballerina.lock' file will specify versions of the dependent modules.\n+       If the 'Ballerina.lock' file exists the 'ballerina build' command will\n+       use the specified versions instead of fetching the latest\n+       versions of modules.\n+\n+       A template can also be specified when initialising the new project.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwOTc2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   If a template is not specified, this command initialise a project with\n          \n          \n            \n                   If a template is not specified, this command will initialise a project by creating a", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480309767", "createdAt": "2020-08-31T18:28:21Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-init.help", "diffHunk": "@@ -0,0 +1,67 @@\n+NAME\n+       ballerina-init - Create a new Ballerina project inside current directory.\n+\n+SYNOPSIS\n+       ballerina init\n+       ballerina init <package-name>\n+\n+\n+DESCRIPTION\n+       Init initializes a Ballerina project inside the current directory.\n+\n+       A project is a set of logically related Ballerina modules that share\n+       the same 'Ballerina.toml', 'Ballerina.lock' files and the 'target'\n+       directory.\n+\n+       The project directory will have the following structure.\n+            .\n+            \u251c\u2500\u2500 Ballerina.toml\n+            \u251c\u2500\u2500 Ballerina.lock\n+            \u251c\u2500\u2500 main.bal\n+            \u2514\u2500\u2500 tests\n+                \u251c\u2500\u2500 main_test.bal\n+                \u251c\u2500\u2500 resources\n+            \u251c\u2500\u2500 resources\n+            \u2514\u2500\u2500 Module.md\n+            \u2514\u2500\u2500 Package.md\n+\n+       Any directory becomes a Ballerina project if that directory has a\n+       'Ballerina.toml' file. It contains the organization name and the\n+       version. It also enables dependency management across the project.\n+\n+       The 'modules' directory contains Ballerina modules. Use\n+       'ballerina add <module-name>' command to create modules.\n+\n+       Both 'target' directory and 'Ballerina.lock' file are created during\n+       the build process. The 'target' is the output directory that contains\n+       build artifacts.\n+\n+       The 'Ballerina.lock' file will specify versions of the dependent modules.\n+       If the 'Ballerina.lock' file exists the 'ballerina build' command will\n+       use the specified versions instead of fetching the latest\n+       versions of modules.\n+\n+       A template can also be specified when initialising the new project.\n+       If a template is not specified, this command initialise a project with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMDM0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    $ ballerina init\n          \n          \n            \n                    $ ballerina init --template main", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480310343", "createdAt": "2020-08-31T18:29:22Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-init.help", "diffHunk": "@@ -0,0 +1,67 @@\n+NAME\n+       ballerina-init - Create a new Ballerina project inside current directory.\n+\n+SYNOPSIS\n+       ballerina init\n+       ballerina init <package-name>\n+\n+\n+DESCRIPTION\n+       Init initializes a Ballerina project inside the current directory.\n+\n+       A project is a set of logically related Ballerina modules that share\n+       the same 'Ballerina.toml', 'Ballerina.lock' files and the 'target'\n+       directory.\n+\n+       The project directory will have the following structure.\n+            .\n+            \u251c\u2500\u2500 Ballerina.toml\n+            \u251c\u2500\u2500 Ballerina.lock\n+            \u251c\u2500\u2500 main.bal\n+            \u2514\u2500\u2500 tests\n+                \u251c\u2500\u2500 main_test.bal\n+                \u251c\u2500\u2500 resources\n+            \u251c\u2500\u2500 resources\n+            \u2514\u2500\u2500 Module.md\n+            \u2514\u2500\u2500 Package.md\n+\n+       Any directory becomes a Ballerina project if that directory has a\n+       'Ballerina.toml' file. It contains the organization name and the\n+       version. It also enables dependency management across the project.\n+\n+       The 'modules' directory contains Ballerina modules. Use\n+       'ballerina add <module-name>' command to create modules.\n+\n+       Both 'target' directory and 'Ballerina.lock' file are created during\n+       the build process. The 'target' is the output directory that contains\n+       build artifacts.\n+\n+       The 'Ballerina.lock' file will specify versions of the dependent modules.\n+       If the 'Ballerina.lock' file exists the 'ballerina build' command will\n+       use the specified versions instead of fetching the latest\n+       versions of modules.\n+\n+       A template can also be specified when initialising the new project.\n+       If a template is not specified, this command initialise a project with\n+       Ballerina.toml file inside the current directory.\n+\n+      There are three built-in templates named:\n+        1. main\n+        2. service\n+        3. lib\n+\n+OPTIONS\n+     -t <template-name>, --template <template-name>\n+         Create a package using a predefined template.\n+\n+     -l, --list\n+         List built-in templates.\n+\n+\n+EXAMPLES\n+     Initialise a package with a 'main' template.\n+        $ ballerina init", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMDU5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   'Ballerina.toml' file. It contains the organization name and the\n          \n          \n            \n                   'Ballerina.toml' file. It contains the organization name, package name and the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r480310594", "createdAt": "2020-08-31T18:29:50Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-tool/src/main/resources/cli-help/ballerina-new.help", "diffHunk": "@@ -17,14 +17,19 @@ DESCRIPTION\n             .\n             \u251c\u2500\u2500 Ballerina.toml\n             \u251c\u2500\u2500 Ballerina.lock\n-            \u251c\u2500\u2500 src\n-            \u2514\u2500\u2500 target\n+            \u251c\u2500\u2500 main.bal\n+            \u2514\u2500\u2500 tests\n+                \u251c\u2500\u2500 main_test.bal\n+                \u251c\u2500\u2500 resources\n+            \u251c\u2500\u2500 resources\n+            \u2514\u2500\u2500 Module.md\n+            \u2514\u2500\u2500 Package.md\n \n        Any directory becomes a Ballerina project if that directory has a\n        'Ballerina.toml' file. It contains the organization name and the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9992d11dff8a35b582df97bb9aeba47edd35e007"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/411c9cb0dafffb62602fdec0ea638c2f3eb1eed1", "committedDate": "2020-09-01T05:03:30Z", "message": "Apply review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c207b1270d474f9a6d69b061dd1043a7f96a866f", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c207b1270d474f9a6d69b061dd1043a7f96a866f", "committedDate": "2020-09-02T04:32:15Z", "message": "Remove a check temporarily until template gets finalised"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4249b52cf7f433e7cfc7e42c7d845c60f065a5d3", "committedDate": "2020-09-02T13:41:04Z", "message": "Add missed return statement and revert add command cli-text change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDkwMjk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#pullrequestreview-481490299", "createdAt": "2020-09-03T04:51:23Z", "commit": {"oid": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1MToyNFrOHMV0lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1MToyNFrOHMV0lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwMjQ4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"Invalid package name : '\" + packageName + \"' :\\n\" +\n          \n          \n            \n                            \"Invalid project name : '\" + packageName + \"' :\\n\" +", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r482702484", "createdAt": "2020-09-03T04:51:24Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java", "diffHunk": "@@ -97,29 +116,48 @@ public void execute() {\n         }\n \n         // Check if the command is executed inside a ballerina project\n-        Path projectRoot = ProjectDirs.findProjectRoot(path);\n+        Path projectRoot = ProjectUtils.findProjectRoot(path);\n         if (projectRoot != null) {\n             CommandUtil.printError(errStream,\n-            \"Directory is already within a Ballerina project :\" + projectRoot.toString(),\n+            \"Directory is already within a Ballerina project :\" +\n+                    projectRoot.resolve(ProjectConstants.BALLERINA_TOML).toString(),\n+                    null,\n+                    false);\n+            return;\n+        }\n+\n+        if (!ProjectUtils.validatePkgName(packageName)) {\n+            CommandUtil.printError(errStream,\n+                \"Invalid package name : '\" + packageName + \"' :\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDkwNDAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#pullrequestreview-481490400", "createdAt": "2020-09-03T04:51:41Z", "commit": {"oid": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1MTo0MlrOHMV05A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1MTo0MlrOHMV05A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwMjU2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Module name can only contain alphanumerics, underscores and periods \" +\n          \n          \n            \n                                    \"Project name can only contain alphanumerics, underscores and periods \" +", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r482702564", "createdAt": "2020-09-03T04:51:42Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/NewCommand.java", "diffHunk": "@@ -97,29 +116,48 @@ public void execute() {\n         }\n \n         // Check if the command is executed inside a ballerina project\n-        Path projectRoot = ProjectDirs.findProjectRoot(path);\n+        Path projectRoot = ProjectUtils.findProjectRoot(path);\n         if (projectRoot != null) {\n             CommandUtil.printError(errStream,\n-            \"Directory is already within a Ballerina project :\" + projectRoot.toString(),\n+            \"Directory is already within a Ballerina project :\" +\n+                    projectRoot.resolve(ProjectConstants.BALLERINA_TOML).toString(),\n+                    null,\n+                    false);\n+            return;\n+        }\n+\n+        if (!ProjectUtils.validatePkgName(packageName)) {\n+            CommandUtil.printError(errStream,\n+                \"Invalid package name : '\" + packageName + \"' :\\n\" +\n+                        \"Module name can only contain alphanumerics, underscores and periods \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDkwNTI0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#pullrequestreview-481490524", "createdAt": "2020-09-03T04:52:01Z", "commit": {"oid": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1MjowMVrOHMV1Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1MjowMVrOHMV1Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwMjY3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        \"Module name can only contain alphanumerics, underscores and periods \" +\n          \n          \n            \n                                        \"Package name can only contain alphanumerics, underscores and periods \" +", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#discussion_r482702671", "createdAt": "2020-09-03T04:52:01Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java", "diffHunk": "@@ -63,38 +73,79 @@ public void execute() {\n         }\n \n         // If the current directory is a ballerina project ignore.\n-        if (ProjectDirs.isProject(this.userDir)) {\n+        if (ProjectUtils.isBallerinaProject(this.userDir)) {\n             CommandUtil.printError(errStream,\n                     \"Directory is already a ballerina project\",\n                     null,\n                     false);\n             return;\n         }\n \n+        // Check if one argument is given and not more than one argument.\n+        if (argList != null && !(1 == argList.size())) {\n+                CommandUtil.printError(errStream,\n+                        \"too many arguments.\",\n+                        \"ballerina init <project-name>\",\n+                        true);\n+                return;\n+        }\n+\n         // Check if there is a ballerina project in sub level.\n \n         // Check if the command is executed inside a ballerina project\n-        Path projectRoot = ProjectDirs.findProjectRoot(this.userDir);\n+        Path projectRoot = ProjectUtils.findProjectRoot(this.userDir);\n         if (projectRoot != null) {\n             CommandUtil.printError(errStream,\n-                    \"Directory is already within a ballerina project :\" + projectRoot.toString(),\n+                    \"Directory is already within a ballerina project :\" +\n+                            projectRoot.resolve(ProjectConstants.BALLERINA_TOML).toString(),\n                     null,\n                     false);\n             return;\n         }\n \n+        // Check if the template exists\n+        if (!template.equals(\"\") && !CommandUtil.getTemplates().contains(template)) {\n+            CommandUtil.printError(errStream,\n+                    \"Template not found, use `ballerina init --help` to view available templates.\",\n+                    null,\n+                    false);\n+            return;\n+        }\n+\n+        String packageName = this.userDir.getFileName().toString();\n+        if (argList != null && argList.size() > 0) {\n+            packageName = argList.get(0);\n+            if (!ProjectUtils.validatePkgName(packageName)) {\n+                CommandUtil.printError(errStream,\n+                    \"Invalid package name : '\" + packageName + \"' :\\n\" +\n+                            \"Module name can only contain alphanumerics, underscores and periods \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4249b52cf7f433e7cfc7e42c7d845c60f065a5d3"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44a08ad0a8919f9a075f327f06d47d78719c4275", "author": {"user": {"login": "suganyasuven", "name": "Suganya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44a08ad0a8919f9a075f327f06d47d78719c4275", "committedDate": "2020-09-03T05:34:52Z", "message": "Modify error messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDUxODUx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25447#pullrequestreview-482051851", "createdAt": "2020-09-03T17:23:42Z", "commit": {"oid": "44a08ad0a8919f9a075f327f06d47d78719c4275"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4933, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}