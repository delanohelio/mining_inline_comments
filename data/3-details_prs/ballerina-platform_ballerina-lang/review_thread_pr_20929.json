{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzIyMzQy", "number": 20929, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxOTowM1rODetubQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNjo0NToyNVrODgSCcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTMzMDM3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/ExternFunctionBodyNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxOTowM1rOFoAKhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxOTowM1rOFoAKhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MDA1NQ==", "bodyText": "Change to ExternalFunctionBodyNode", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377490055", "createdAt": "2020-02-11T08:19:03Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/ExternFunctionBodyNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.model.tree;\n+\n+/**\n+ * Represents the body of a function whose implementation is native.\n+ *\n+ * @since 1.2.0\n+ */\n+public interface ExternFunctionBodyNode extends FunctionBodyNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTM3NjY2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODozODoxNFrOFoAmgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODozODoxNFrOFoAmgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5NzIxOQ==", "bodyText": "Remove the todo", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377497219", "createdAt": "2020-02-11T08:38:14Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -283,7 +283,44 @@ public void exitBlockFunctionBody(BallerinaParser.BlockFunctionBodyContext ctx)\n             return;\n         }\n \n-        this.pkgBuilder.endBlockFunctionBody(getWS(ctx));\n+        this.pkgBuilder.endBlockFunctionBody(getCurrentPos(ctx), getWS(ctx));\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void enterExprFunctionBody(BallerinaParser.ExprFunctionBodyContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startExprFunctionBody();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void exitExprFunctionBody(BallerinaParser.ExprFunctionBodyContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        // TODO: Check if we need to take pos and ws of expr or the whole body", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTQwMjIzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODo0ODoxMFrOFoA1-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODo0ODoxMFrOFoA1-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwMTE3Ng==", "bodyText": "move the extern function related logic to the extern func body from the invoke node.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377501176", "createdAt": "2020-02-11T08:48:10Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1926,6 +1960,9 @@ void endExternalFunctionBody(int annotCount) {\n         // reversing the collected annotations to preserve the original order\n         Collections.reverse(tempAnnotAttachments);\n         tempAnnotAttachments.forEach(invokableNode::addExternalAnnotationAttachment);\n+\n+        FunctionBodyNode body = this.funcBodyNodeStack.pop();\n+        invokableNode.setBody(body);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTQxMTY1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODo1MTo1MFrOFoA7sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODo1MTo1MFrOFoA7sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwMjY0Mw==", "bodyText": "Change this along with the extern body changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377502643", "createdAt": "2020-02-11T08:51:50Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -316,14 +319,15 @@ public void visit(BLangFunction funcNode) {\n \n         // Check for native functions\n         if (Symbols.isNative(funcNode.symbol) || funcNode.interfaceFunction) {\n-            if (funcNode.body != null) {\n+            // TODO: double check this. Only applies for interfaces now IINM.\n+            if (funcNode.funcBody != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTQzODgxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTowMToxN1rOFoBMbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTowMToxN1rOFoBMbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwNjkyNA==", "bodyText": "Check and see whether we can reuse the envs created in prev stages", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377506924", "createdAt": "2020-02-11T09:01:17Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java", "diffHunk": "@@ -390,6 +393,29 @@ public void visit(BLangFunction funcNode) {\n         analysisStateStack.pop();\n     }\n \n+    @Override\n+    public void visit(BLangBlockFunctionBody body) {\n+        SymbolEnv bodyEnv = SymbolEnv.createFuncBodyEnv(body, env);\n+        for (BLangStatement stmt : body.stmts) {\n+            if (stopAnalysis) {\n+                break;\n+            } else {\n+                analyzeNode(stmt, bodyEnv);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(BLangExprFunctionBody body) {\n+        SymbolEnv bodyEnv = SymbolEnv.createFuncBodyEnv(body, env);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTQ2ODE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangFunctionBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToxMTozNVrOFoBeBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToxMTozNVrOFoBeBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxMTQyOQ==", "bodyText": "Check and remove this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377511429", "createdAt": "2020-02-11T09:11:35Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangFunctionBody.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.tree;\n+\n+import org.ballerinalang.model.tree.FunctionBodyNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.Scope;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+\n+/**\n+ * Represents a function/method body.\n+ *\n+ * @since 1.2.0\n+ */\n+public abstract class BLangFunctionBody extends BLangNode implements FunctionBodyNode {\n+\n+    public BVarSymbol mapSymbol; // TODO: Do we need closure map for non-block bodied functions?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTQ5NzA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/HttpFiltersDesugar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMToxNlrOFoBvaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMToxNlrOFoBvaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNTg4Mw==", "bodyText": "Consider other types of bodies as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377515883", "createdAt": "2020-02-11T09:21:16Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/HttpFiltersDesugar.java", "diffHunk": "@@ -233,7 +234,8 @@ private BLangSimpleVariable addFilterContextCreation(BLangFunction resourceNode,\n                 new BVarSymbol(0, names.fromString(filterContextVarName), resourceNode.symbol.pkgID, filterContextType,\n                                resourceNode.symbol));\n         filterContextVar.typeNode = filterContextUserDefinedType;\n-        resourceNode.body.stmts.add(0, ASTBuilderUtil.createVariableDef(resourceNode.pos, filterContextVar));\n+        ((BLangBlockFunctionBody) resourceNode.funcBody).stmts.add(0, ASTBuilderUtil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTc1MDQzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNjozNDo0NlrOFqZorA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODowMzoyMlrOFqbKoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNDUyNA==", "bodyText": "Can getOrCreateMapSymbol be a better name.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380004524", "createdAt": "2020-02-17T06:34:46Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -372,23 +404,63 @@ public void visit(BLangSimpleVariableDef varDefNode) {\n      * @return assignment statement created\n      */\n     private BLangAssignment createAssignment(BLangSimpleVariableDef varDefNode) {\n-        // Create a map for the function or block node.\n-        BLangBlockStmt blockStmt = (BLangBlockStmt) env.node;\n-        if (blockStmt.mapSymbol == null) {\n-            // create a map symbol\n-            blockStmt.mapSymbol = createMapSymbol(\"$map$block$\" + blockClosureMapCount, env);\n-        }\n+        BVarSymbol mapSymbol = createMapSymbolIfAbsent(env.node, blockClosureMapCount);\n \n         // Add the variable to the created map.\n-        BLangIndexBasedAccess accessExpr = ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type,\n-                blockStmt.mapSymbol, ASTBuilderUtil.createLiteral(varDefNode.pos, symTable.stringType,\n-                        varDefNode.var.name.value));\n-        accessExpr.type = ((BMapType) blockStmt.mapSymbol.type).constraint;\n+        BLangIndexBasedAccess accessExpr =\n+                ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type, mapSymbol,\n+                                                          ASTBuilderUtil\n+                                                                  .createLiteral(varDefNode.pos, symTable.stringType,\n+                                                                                 varDefNode.var.name.value));\n+        accessExpr.type = ((BMapType) mapSymbol.type).constraint;\n         accessExpr.lhsVar = true;\n         // Written to: 'map[\"x\"] = 8'.\n         return ASTBuilderUtil.createAssignmentStmt(varDefNode.pos, accessExpr, varDefNode.var.expr);\n     }\n \n+    private BVarSymbol createMapSymbolIfAbsent(BLangNode node, int closureMapCount) {\n+        if (node.getKind() == NodeKind.BLOCK_FUNCTION_BODY) {\n+            return createMapSymbolIfAbsent((BLangBlockFunctionBody) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.BLOCK) {\n+            return createMapSymbolIfAbsent((BLangBlockStmt) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.FUNCTION) {\n+            return createMapSymbolIfAbsent((BLangFunction) node, closureMapCount);\n+        }\n+        return null;\n+    }\n+\n+    private BVarSymbol createMapSymbolIfAbsent(BLangBlockFunctionBody body, int closureMapCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4009eca4d6fef530efe89b430cef6156c3b4c6ea"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTYwMQ==", "bodyText": "Sort of gives the idea that the method has multiple responsibilities doesn't it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380029601", "createdAt": "2020-02-17T08:03:22Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -372,23 +404,63 @@ public void visit(BLangSimpleVariableDef varDefNode) {\n      * @return assignment statement created\n      */\n     private BLangAssignment createAssignment(BLangSimpleVariableDef varDefNode) {\n-        // Create a map for the function or block node.\n-        BLangBlockStmt blockStmt = (BLangBlockStmt) env.node;\n-        if (blockStmt.mapSymbol == null) {\n-            // create a map symbol\n-            blockStmt.mapSymbol = createMapSymbol(\"$map$block$\" + blockClosureMapCount, env);\n-        }\n+        BVarSymbol mapSymbol = createMapSymbolIfAbsent(env.node, blockClosureMapCount);\n \n         // Add the variable to the created map.\n-        BLangIndexBasedAccess accessExpr = ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type,\n-                blockStmt.mapSymbol, ASTBuilderUtil.createLiteral(varDefNode.pos, symTable.stringType,\n-                        varDefNode.var.name.value));\n-        accessExpr.type = ((BMapType) blockStmt.mapSymbol.type).constraint;\n+        BLangIndexBasedAccess accessExpr =\n+                ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type, mapSymbol,\n+                                                          ASTBuilderUtil\n+                                                                  .createLiteral(varDefNode.pos, symTable.stringType,\n+                                                                                 varDefNode.var.name.value));\n+        accessExpr.type = ((BMapType) mapSymbol.type).constraint;\n         accessExpr.lhsVar = true;\n         // Written to: 'map[\"x\"] = 8'.\n         return ASTBuilderUtil.createAssignmentStmt(varDefNode.pos, accessExpr, varDefNode.var.expr);\n     }\n \n+    private BVarSymbol createMapSymbolIfAbsent(BLangNode node, int closureMapCount) {\n+        if (node.getKind() == NodeKind.BLOCK_FUNCTION_BODY) {\n+            return createMapSymbolIfAbsent((BLangBlockFunctionBody) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.BLOCK) {\n+            return createMapSymbolIfAbsent((BLangBlockStmt) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.FUNCTION) {\n+            return createMapSymbolIfAbsent((BLangFunction) node, closureMapCount);\n+        }\n+        return null;\n+    }\n+\n+    private BVarSymbol createMapSymbolIfAbsent(BLangBlockFunctionBody body, int closureMapCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNDUyNA=="}, "originalCommit": {"oid": "4009eca4d6fef530efe89b430cef6156c3b4c6ea"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTc2NTYzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNjo0NToyNVrOFqZx1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDo1NDo0NVrOFqgRUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNjg3MA==", "bodyText": "The name suggests that we create a map symbol always but the function may return null as well. Should this null be an assert ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380006870", "createdAt": "2020-02-17T06:45:25Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -372,23 +404,63 @@ public void visit(BLangSimpleVariableDef varDefNode) {\n      * @return assignment statement created\n      */\n     private BLangAssignment createAssignment(BLangSimpleVariableDef varDefNode) {\n-        // Create a map for the function or block node.\n-        BLangBlockStmt blockStmt = (BLangBlockStmt) env.node;\n-        if (blockStmt.mapSymbol == null) {\n-            // create a map symbol\n-            blockStmt.mapSymbol = createMapSymbol(\"$map$block$\" + blockClosureMapCount, env);\n-        }\n+        BVarSymbol mapSymbol = createMapSymbolIfAbsent(env.node, blockClosureMapCount);\n \n         // Add the variable to the created map.\n-        BLangIndexBasedAccess accessExpr = ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type,\n-                blockStmt.mapSymbol, ASTBuilderUtil.createLiteral(varDefNode.pos, symTable.stringType,\n-                        varDefNode.var.name.value));\n-        accessExpr.type = ((BMapType) blockStmt.mapSymbol.type).constraint;\n+        BLangIndexBasedAccess accessExpr =\n+                ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type, mapSymbol,\n+                                                          ASTBuilderUtil\n+                                                                  .createLiteral(varDefNode.pos, symTable.stringType,\n+                                                                                 varDefNode.var.name.value));\n+        accessExpr.type = ((BMapType) mapSymbol.type).constraint;\n         accessExpr.lhsVar = true;\n         // Written to: 'map[\"x\"] = 8'.\n         return ASTBuilderUtil.createAssignmentStmt(varDefNode.pos, accessExpr, varDefNode.var.expr);\n     }\n \n+    private BVarSymbol createMapSymbolIfAbsent(BLangNode node, int closureMapCount) {\n+        if (node.getKind() == NodeKind.BLOCK_FUNCTION_BODY) {\n+            return createMapSymbolIfAbsent((BLangBlockFunctionBody) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.BLOCK) {\n+            return createMapSymbolIfAbsent((BLangBlockStmt) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.FUNCTION) {\n+            return createMapSymbolIfAbsent((BLangFunction) node, closureMapCount);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4009eca4d6fef530efe89b430cef6156c3b4c6ea"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTE3OQ==", "bodyText": "null return is for the cases where a closure var map symbol is not applicable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380029179", "createdAt": "2020-02-17T08:02:01Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -372,23 +404,63 @@ public void visit(BLangSimpleVariableDef varDefNode) {\n      * @return assignment statement created\n      */\n     private BLangAssignment createAssignment(BLangSimpleVariableDef varDefNode) {\n-        // Create a map for the function or block node.\n-        BLangBlockStmt blockStmt = (BLangBlockStmt) env.node;\n-        if (blockStmt.mapSymbol == null) {\n-            // create a map symbol\n-            blockStmt.mapSymbol = createMapSymbol(\"$map$block$\" + blockClosureMapCount, env);\n-        }\n+        BVarSymbol mapSymbol = createMapSymbolIfAbsent(env.node, blockClosureMapCount);\n \n         // Add the variable to the created map.\n-        BLangIndexBasedAccess accessExpr = ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type,\n-                blockStmt.mapSymbol, ASTBuilderUtil.createLiteral(varDefNode.pos, symTable.stringType,\n-                        varDefNode.var.name.value));\n-        accessExpr.type = ((BMapType) blockStmt.mapSymbol.type).constraint;\n+        BLangIndexBasedAccess accessExpr =\n+                ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type, mapSymbol,\n+                                                          ASTBuilderUtil\n+                                                                  .createLiteral(varDefNode.pos, symTable.stringType,\n+                                                                                 varDefNode.var.name.value));\n+        accessExpr.type = ((BMapType) mapSymbol.type).constraint;\n         accessExpr.lhsVar = true;\n         // Written to: 'map[\"x\"] = 8'.\n         return ASTBuilderUtil.createAssignmentStmt(varDefNode.pos, accessExpr, varDefNode.var.expr);\n     }\n \n+    private BVarSymbol createMapSymbolIfAbsent(BLangNode node, int closureMapCount) {\n+        if (node.getKind() == NodeKind.BLOCK_FUNCTION_BODY) {\n+            return createMapSymbolIfAbsent((BLangBlockFunctionBody) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.BLOCK) {\n+            return createMapSymbolIfAbsent((BLangBlockStmt) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.FUNCTION) {\n+            return createMapSymbolIfAbsent((BLangFunction) node, closureMapCount);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNjg3MA=="}, "originalCommit": {"oid": "4009eca4d6fef530efe89b430cef6156c3b4c6ea"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExMzIzNA==", "bodyText": "To further clarify this, for nodes for which closures are not applicable, calling this method doesn't have any effect and we don't do anything with the return value. We use the return value returned by this method only in contexts where the closure map is applicable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380113234", "createdAt": "2020-02-17T10:54:45Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -372,23 +404,63 @@ public void visit(BLangSimpleVariableDef varDefNode) {\n      * @return assignment statement created\n      */\n     private BLangAssignment createAssignment(BLangSimpleVariableDef varDefNode) {\n-        // Create a map for the function or block node.\n-        BLangBlockStmt blockStmt = (BLangBlockStmt) env.node;\n-        if (blockStmt.mapSymbol == null) {\n-            // create a map symbol\n-            blockStmt.mapSymbol = createMapSymbol(\"$map$block$\" + blockClosureMapCount, env);\n-        }\n+        BVarSymbol mapSymbol = createMapSymbolIfAbsent(env.node, blockClosureMapCount);\n \n         // Add the variable to the created map.\n-        BLangIndexBasedAccess accessExpr = ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type,\n-                blockStmt.mapSymbol, ASTBuilderUtil.createLiteral(varDefNode.pos, symTable.stringType,\n-                        varDefNode.var.name.value));\n-        accessExpr.type = ((BMapType) blockStmt.mapSymbol.type).constraint;\n+        BLangIndexBasedAccess accessExpr =\n+                ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type, mapSymbol,\n+                                                          ASTBuilderUtil\n+                                                                  .createLiteral(varDefNode.pos, symTable.stringType,\n+                                                                                 varDefNode.var.name.value));\n+        accessExpr.type = ((BMapType) mapSymbol.type).constraint;\n         accessExpr.lhsVar = true;\n         // Written to: 'map[\"x\"] = 8'.\n         return ASTBuilderUtil.createAssignmentStmt(varDefNode.pos, accessExpr, varDefNode.var.expr);\n     }\n \n+    private BVarSymbol createMapSymbolIfAbsent(BLangNode node, int closureMapCount) {\n+        if (node.getKind() == NodeKind.BLOCK_FUNCTION_BODY) {\n+            return createMapSymbolIfAbsent((BLangBlockFunctionBody) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.BLOCK) {\n+            return createMapSymbolIfAbsent((BLangBlockStmt) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.FUNCTION) {\n+            return createMapSymbolIfAbsent((BLangFunction) node, closureMapCount);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNjg3MA=="}, "originalCommit": {"oid": "4009eca4d6fef530efe89b430cef6156c3b4c6ea"}, "originalPosition": 186}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1176, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}