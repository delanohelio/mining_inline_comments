{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3ODY1NTA3", "number": 22860, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0Mjo0OFrOD2UW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1MjoxN1rOD2Udhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjgzMjMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0Mjo0OFrOGMEBWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0Mjo0OFrOGMEBWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMTk3OA==", "bodyText": "Please remove unnecessary newlines L#668 and L#6670", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22860#discussion_r415301978", "createdAt": "2020-04-26T12:42:48Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -6638,4 +6643,70 @@ private STNode parseLockKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse fork-keyword.\n+     *\n+     * @return Fork-keyword node\n+     */\n+    private STNode parseForkKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.FORK_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.FORK_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+    * Parse multiple named worker declarations.\n+    *\n+    * @return named-worker-declarations node array\n+    */\n+    private STNode parseMultileNamedWorkerDeclarations() {\n+\n+        STToken token = peek();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71ecb25083e743acef947ae6ae13de4da9b09b0"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjgzNzEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0NTozN1rOGMEDcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozNjoxNFrOGMU_EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMjUxMw==", "bodyText": "Else throw an error. Then we know the parser has come to an invalid state, and easy to debug :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22860#discussion_r415302513", "createdAt": "2020-04-26T12:45:37Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2187,6 +2199,17 @@ private ParserRuleContext getNextRuleForCloseBrace(int nextLookahead) {\n                     return ParserRuleContext.STATEMENT;\n                 } else if (parentCtx == ParserRuleContext.NAMED_WORKER_DECL) {\n                     endContext(); // end named-worker\n+                    parentCtx = getParentContext();\n+                    if (parentCtx == ParserRuleContext.FORK_STMT) {\n+                        nextToken = this.tokenReader.peek(nextLookahead);\n+                        switch (nextToken.kind) {\n+                            case AT_TOKEN:\n+                            case WORKER_KEYWORD:\n+                                return ParserRuleContext.NAMED_WORKER_DECL;\n+                            default:\n+                                return ParserRuleContext.CLOSE_BRACE;\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71ecb25083e743acef947ae6ae13de4da9b09b0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3OTkyMA==", "bodyText": "else for the if at L#2203?, its ok if the flow doesnt go through that because when doing a normal worker declaration the flow is to return a statement at that point.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22860#discussion_r415579920", "createdAt": "2020-04-27T07:36:14Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2187,6 +2199,17 @@ private ParserRuleContext getNextRuleForCloseBrace(int nextLookahead) {\n                     return ParserRuleContext.STATEMENT;\n                 } else if (parentCtx == ParserRuleContext.NAMED_WORKER_DECL) {\n                     endContext(); // end named-worker\n+                    parentCtx = getParentContext();\n+                    if (parentCtx == ParserRuleContext.FORK_STMT) {\n+                        nextToken = this.tokenReader.peek(nextLookahead);\n+                        switch (nextToken.kind) {\n+                            case AT_TOKEN:\n+                            case WORKER_KEYWORD:\n+                                return ParserRuleContext.NAMED_WORKER_DECL;\n+                            default:\n+                                return ParserRuleContext.CLOSE_BRACE;\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMjUxMw=="}, "originalCommit": {"oid": "d71ecb25083e743acef947ae6ae13de4da9b09b0"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mjg0NDk1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo0OTo1MFrOGMEG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoyNzozMVrOGMUq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzQwNQ==", "bodyText": "I feel we should make STATEMENT as the next rule. So that it will proceed even when there are other statements thought its not valid. But the parser will do that validation anyway.\nOtherwise the issue here is, if there is some additional token before the@ or worker keyword, then this will try searching for a close brace, which is kind of wrong.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22860#discussion_r415303405", "createdAt": "2020-04-26T12:49:50Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2187,6 +2199,17 @@ private ParserRuleContext getNextRuleForCloseBrace(int nextLookahead) {\n                     return ParserRuleContext.STATEMENT;\n                 } else if (parentCtx == ParserRuleContext.NAMED_WORKER_DECL) {\n                     endContext(); // end named-worker\n+                    parentCtx = getParentContext();\n+                    if (parentCtx == ParserRuleContext.FORK_STMT) {\n+                        nextToken = this.tokenReader.peek(nextLookahead);\n+                        switch (nextToken.kind) {\n+                            case AT_TOKEN:\n+                            case WORKER_KEYWORD:\n+                                return ParserRuleContext.NAMED_WORKER_DECL;\n+                            default:\n+                                return ParserRuleContext.CLOSE_BRACE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71ecb25083e743acef947ae6ae13de4da9b09b0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NDc2MA==", "bodyText": "yea that makes more sense, will change it to statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22860#discussion_r415574760", "createdAt": "2020-04-27T07:27:31Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2187,6 +2199,17 @@ private ParserRuleContext getNextRuleForCloseBrace(int nextLookahead) {\n                     return ParserRuleContext.STATEMENT;\n                 } else if (parentCtx == ParserRuleContext.NAMED_WORKER_DECL) {\n                     endContext(); // end named-worker\n+                    parentCtx = getParentContext();\n+                    if (parentCtx == ParserRuleContext.FORK_STMT) {\n+                        nextToken = this.tokenReader.peek(nextLookahead);\n+                        switch (nextToken.kind) {\n+                            case AT_TOKEN:\n+                            case WORKER_KEYWORD:\n+                                return ParserRuleContext.NAMED_WORKER_DECL;\n+                            default:\n+                                return ParserRuleContext.CLOSE_BRACE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzQwNQ=="}, "originalCommit": {"oid": "d71ecb25083e743acef947ae6ae13de4da9b09b0"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mjg0ODA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/ForkStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1MToyM1rOGMEIUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1MToyM1rOGMEIUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzc2Mg==", "bodyText": "add version", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22860#discussion_r415303762", "createdAt": "2020-04-26T12:51:23Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/ForkStatement.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing Fork Statements.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71ecb25083e743acef947ae6ae13de4da9b09b0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mjg0OTE3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1MjowNFrOGMEI0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1MjowNFrOGMEI0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzg4OQ==", "bodyText": "Class name should be LockStatementTest", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22860#discussion_r415303889", "createdAt": "2020-04-26T12:52:04Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java", "diffHunk": "@@ -20,7 +20,7 @@\n import org.testng.annotations.Test;\n \n /**\n- * Test parsing object type definitions.\n+ * Test parsing Lock statements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71ecb25083e743acef947ae6ae13de4da9b09b0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mjg0OTM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/ForkStatement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1MjoxN1rOGMEI6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjo1MjoxN1rOGMEI6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMzkxNA==", "bodyText": "Should be ForkStatementTest", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22860#discussion_r415303914", "createdAt": "2020-04-26T12:52:17Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/ForkStatement.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing Fork Statements.\n+ */\n+public class ForkStatement extends AbstractStatementTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71ecb25083e743acef947ae6ae13de4da9b09b0"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3776, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}