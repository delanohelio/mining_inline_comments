{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTE4MDg3", "number": 23656, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoyNjo0N1rOECBD5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjozNTozMlrOECBMQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ5OTg5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaErrors.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoyNjo0N1rOGeNrZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODo1NDo0NlrOGeScDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzNDU2Nw==", "bodyText": "Do we need another constructor taking:\n\ntypeIdName\npkgId\nmessage\ncause\nerror detail type\n\nMaybe we can add it when there is a requirement for it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434334567", "createdAt": "2020-06-03T06:26:47Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaErrors.java", "diffHunk": "@@ -99,15 +100,32 @@ public static ErrorValue createError(BType type, BString message, BString detail\n         return new ErrorValue(type, message, null, detailMap);\n     }\n \n+    public static ErrorValue createDistinctError(String typeIdName, BPackage typeIdPkg, String message) {\n+        return createDistinctError(typeIdName, typeIdPkg, message, new MapValueImpl<>(BTypes.typeErrorDetail));\n+    }\n \n-    public static ErrorValue createDistinctError(String errorCode, String typeIdName, BPackage typeIdPkg,\n+    public static ErrorValue createDistinctError(String typeIdName, BPackage typeIdPkg, String message,\n                                                  MapValue<BString, Object> detailRecord) {\n-        ErrorValue error = createError(errorCode, detailRecord);\n+        ErrorValue error = createError(message, detailRecord);\n+        setTypeId(typeIdName, typeIdPkg, error);\n+        return error;\n+    }\n+\n+    public static ErrorValue createDistinctError(String typeIdName, BPackage typeIdPkg, String message,\n+                                                 ErrorValue cause) {\n+        MapValueImpl<Object, Object> details = new MapValueImpl<>(BTypes.typeErrorDetail);\n+        ErrorValue error = new ErrorValue(new BErrorType(TypeConstants.ERROR, BTypes.typeError.getPackage(),\n+                                                         TypeChecker.getType(details)),\n+                                          StringUtils.fromString(message), cause, details);\n+        setTypeId(typeIdName, typeIdPkg, error);\n+        return error;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b84938e60cc8149551f0fb931ed9e5064901f7b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQxMjU1Ng==", "bodyText": "+1 We'll add if it is required. Still, we did not find any", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434412556", "createdAt": "2020-06-03T08:54:46Z", "author": {"login": "chamil321"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaErrors.java", "diffHunk": "@@ -99,15 +100,32 @@ public static ErrorValue createError(BType type, BString message, BString detail\n         return new ErrorValue(type, message, null, detailMap);\n     }\n \n+    public static ErrorValue createDistinctError(String typeIdName, BPackage typeIdPkg, String message) {\n+        return createDistinctError(typeIdName, typeIdPkg, message, new MapValueImpl<>(BTypes.typeErrorDetail));\n+    }\n \n-    public static ErrorValue createDistinctError(String errorCode, String typeIdName, BPackage typeIdPkg,\n+    public static ErrorValue createDistinctError(String typeIdName, BPackage typeIdPkg, String message,\n                                                  MapValue<BString, Object> detailRecord) {\n-        ErrorValue error = createError(errorCode, detailRecord);\n+        ErrorValue error = createError(message, detailRecord);\n+        setTypeId(typeIdName, typeIdPkg, error);\n+        return error;\n+    }\n+\n+    public static ErrorValue createDistinctError(String typeIdName, BPackage typeIdPkg, String message,\n+                                                 ErrorValue cause) {\n+        MapValueImpl<Object, Object> details = new MapValueImpl<>(BTypes.typeErrorDetail);\n+        ErrorValue error = new ErrorValue(new BErrorType(TypeConstants.ERROR, BTypes.typeError.getPackage(),\n+                                                         TypeChecker.getType(details)),\n+                                          StringUtils.fromString(message), cause, details);\n+        setTypeId(typeIdName, typeIdPkg, error);\n+        return error;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzNDU2Nw=="}, "originalCommit": {"oid": "7b84938e60cc8149551f0fb931ed9e5064901f7b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTUyMTMwOnYy", "diffSide": "RIGHT", "path": "stdlib/system/src/main/java/org/ballerinalang/stdlib/system/utils/SystemUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjozNTozM1rOGeN43Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTowNjozMlrOGeS5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzODAxMw==", "bodyText": "It's is required that the typeId to be same name as the defined type for distinct types.\nFor example type A distinct error, here typeId of A is A.\nPlease refer the spec, in the spec the value we call typeId is referred to as local id.\nhttps://ballerina.io/ballerina-spec/spec.html#section_5.1.3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434338013", "createdAt": "2020-06-03T06:35:33Z", "author": {"login": "rdhananjaya"}, "path": "stdlib/system/src/main/java/org/ballerinalang/stdlib/system/utils/SystemUtils.java", "diffHunk": "@@ -49,41 +47,31 @@\n     private static final String UNKNOWN_MESSAGE = \"Unknown Error\";\n \n     /**\n-     * Returns error object for input reason.\n-     * Error type is generic ballerina error type. This utility to construct error object from message.\n+     * Returns error object  with message. Error type is generic ballerina error type. This utility to construct\n+     * error object from message.\n      *\n-     * @param error Reason for creating the error object. If the reason is null, \"UNKNOWN\" sets by\n-     *              default.\n+     * @param typeId The string type ID of the particular error object. If the typeId is  null, \"UNKNOWN\" sets by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b84938e60cc8149551f0fb931ed9e5064901f7b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzODM1MA==", "bodyText": "The issue is we don't have a way to enforce this when we are creating error values programmatically in Java.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434338350", "createdAt": "2020-06-03T06:36:24Z", "author": {"login": "rdhananjaya"}, "path": "stdlib/system/src/main/java/org/ballerinalang/stdlib/system/utils/SystemUtils.java", "diffHunk": "@@ -49,41 +47,31 @@\n     private static final String UNKNOWN_MESSAGE = \"Unknown Error\";\n \n     /**\n-     * Returns error object for input reason.\n-     * Error type is generic ballerina error type. This utility to construct error object from message.\n+     * Returns error object  with message. Error type is generic ballerina error type. This utility to construct\n+     * error object from message.\n      *\n-     * @param error Reason for creating the error object. If the reason is null, \"UNKNOWN\" sets by\n-     *              default.\n+     * @param typeId The string type ID of the particular error object. If the typeId is  null, \"UNKNOWN\" sets by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzODAxMw=="}, "originalCommit": {"oid": "7b84938e60cc8149551f0fb931ed9e5064901f7b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyMDA2MA==", "bodyText": "I think that param doc is misleading. I removed it. The original author must have meant to set the error message as \"UNKNOWN\" if the error reason(previously we had reason for errors) or the throwable is null. I fixed the logic to check only the throwable as the typeId cannot be null and throughout the module, a null has NOT been passed as a parameter to the typeId.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23656#discussion_r434420060", "createdAt": "2020-06-03T09:06:32Z", "author": {"login": "chamil321"}, "path": "stdlib/system/src/main/java/org/ballerinalang/stdlib/system/utils/SystemUtils.java", "diffHunk": "@@ -49,41 +47,31 @@\n     private static final String UNKNOWN_MESSAGE = \"Unknown Error\";\n \n     /**\n-     * Returns error object for input reason.\n-     * Error type is generic ballerina error type. This utility to construct error object from message.\n+     * Returns error object  with message. Error type is generic ballerina error type. This utility to construct\n+     * error object from message.\n      *\n-     * @param error Reason for creating the error object. If the reason is null, \"UNKNOWN\" sets by\n-     *              default.\n+     * @param typeId The string type ID of the particular error object. If the typeId is  null, \"UNKNOWN\" sets by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzODAxMw=="}, "originalCommit": {"oid": "7b84938e60cc8149551f0fb931ed9e5064901f7b"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3542, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}