{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMDE3OTYy", "number": 26894, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyOTo0M1rOE4Swqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoyOTowMFrOE5UJDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDYzMDgzOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyOTo0M1rOHyILNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyOTo0M1rOHyILNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNDc4OQ==", "bodyText": "We should use ProjectConstants class. You can create a constant there if it is not present.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r522324789", "createdAt": "2020-11-12T18:29:43Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Task for generating docs using docerina.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateDocsTask implements Task {\n+\n+    private boolean excludeIndex;\n+    private final transient PrintStream out;\n+\n+    public CreateDocsTask(boolean excludeIndex, PrintStream out) {\n+        this.excludeIndex = excludeIndex;\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        Path sourceRootPath = project.sourceRoot();\n+        Path targetDir = project.sourceRoot().resolve(ProjectDirConstants.TARGET_DIR_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d60cda86a9f018bba3404f8b32eb71594947284"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDYzNjgwOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODozMToyM1rOHyIPDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwNjowNTo1OVrOHzIuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNTc3NQ==", "bodyText": "@hevayo should we use the Target model here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r522325775", "createdAt": "2020-11-12T18:31:23Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Task for generating docs using docerina.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateDocsTask implements Task {\n+\n+    private boolean excludeIndex;\n+    private final transient PrintStream out;\n+\n+    public CreateDocsTask(boolean excludeIndex, PrintStream out) {\n+        this.excludeIndex = excludeIndex;\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        Path sourceRootPath = project.sourceRoot();\n+        Path targetDir = project.sourceRoot().resolve(ProjectDirConstants.TARGET_DIR_NAME);\n+        Path outputPath = targetDir.resolve(ProjectDirConstants.TARGET_API_DOC_DIRECTORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d60cda86a9f018bba3404f8b32eb71594947284"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjY5MA==", "bodyText": "Yes better if we could do that", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r522866690", "createdAt": "2020-11-13T10:38:04Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Task for generating docs using docerina.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateDocsTask implements Task {\n+\n+    private boolean excludeIndex;\n+    private final transient PrintStream out;\n+\n+    public CreateDocsTask(boolean excludeIndex, PrintStream out) {\n+        this.excludeIndex = excludeIndex;\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        Path sourceRootPath = project.sourceRoot();\n+        Path targetDir = project.sourceRoot().resolve(ProjectDirConstants.TARGET_DIR_NAME);\n+        Path outputPath = targetDir.resolve(ProjectDirConstants.TARGET_API_DOC_DIRECTORY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNTc3NQ=="}, "originalCommit": {"oid": "5d60cda86a9f018bba3404f8b32eb71594947284"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MjMyOA==", "bodyText": "Added the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523382328", "createdAt": "2020-11-14T06:05:59Z", "author": {"login": "shehan360"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Task for generating docs using docerina.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateDocsTask implements Task {\n+\n+    private boolean excludeIndex;\n+    private final transient PrintStream out;\n+\n+    public CreateDocsTask(boolean excludeIndex, PrintStream out) {\n+        this.excludeIndex = excludeIndex;\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        Path sourceRootPath = project.sourceRoot();\n+        Path targetDir = project.sourceRoot().resolve(ProjectDirConstants.TARGET_DIR_NAME);\n+        Path outputPath = targetDir.resolve(ProjectDirConstants.TARGET_API_DOC_DIRECTORY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNTc3NQ=="}, "originalCommit": {"oid": "5d60cda86a9f018bba3404f8b32eb71594947284"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDY0MzUyOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODozMjo0OVrOHyIS5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODozMjo0OVrOHyIS5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjc1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw createLauncherException(\"Unable to generate API Documentation.\");\n          \n          \n            \n                        throw createLauncherException(\"Unable to generate API Documentation.\", e.getCause());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r522326758", "createdAt": "2020-11-12T18:32:49Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Task for generating docs using docerina.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateDocsTask implements Task {\n+\n+    private boolean excludeIndex;\n+    private final transient PrintStream out;\n+\n+    public CreateDocsTask(boolean excludeIndex, PrintStream out) {\n+        this.excludeIndex = excludeIndex;\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        Path sourceRootPath = project.sourceRoot();\n+        Path targetDir = project.sourceRoot().resolve(ProjectDirConstants.TARGET_DIR_NAME);\n+        Path outputPath = targetDir.resolve(ProjectDirConstants.TARGET_API_DOC_DIRECTORY);\n+        this.out.println(\"Generating API Documentation\");\n+        try {\n+            Files.createDirectories(outputPath);\n+            BallerinaDocGenerator.generateAPIDocs(project, outputPath.toString(), excludeIndex);\n+            this.out.println(\"\\t\" + sourceRootPath.relativize(outputPath).toString());\n+\n+        } catch (IOException e) {\n+            throw createLauncherException(\"Unable to generate API Documentation.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d60cda86a9f018bba3404f8b32eb71594947284"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTMzNjc3OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoyNzoyMlrOHzsX6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODozMjo0MVrOHzsjqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NjQ0MQ==", "bodyText": "We dont support this flag now. The command should be run as ballerina doc [<project-path>]", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523966441", "createdAt": "2020-11-16T08:27:22Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.cli.TaskExecutor;\n+import io.ballerina.cli.task.CompileTask;\n+import io.ballerina.cli.task.CreateDocsTask;\n+import io.ballerina.cli.task.CreateTargetDirTask;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.DOC_COMMAND;\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * This class represents the \"ballerina doc\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = DOC_COMMAND, description = \"Ballerina doc - Generates API Documentation\")\n+public class DocCommand implements BLauncherCmd {\n+\n+    private final PrintStream outStream;\n+    private final PrintStream errStream;\n+    private Path projectPath;\n+    private boolean exitWhenFinish;\n+\n+    public DocCommand() {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = System.out;\n+        this.errStream = System.err;\n+        this.exitWhenFinish = true;\n+    }\n+\n+    public DocCommand(PrintStream outStream, PrintStream errStream, boolean exitWhenFinish) {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = outStream;\n+        this.errStream = errStream;\n+        this.exitWhenFinish = exitWhenFinish;\n+    }\n+\n+    @CommandLine.Option(names = {\"--sourceroot\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4908fc78daecaad056b0307b429dba51e317f20"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2OTQ1MA==", "bodyText": "You can refer to the run command", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523969450", "createdAt": "2020-11-16T08:32:41Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.cli.TaskExecutor;\n+import io.ballerina.cli.task.CompileTask;\n+import io.ballerina.cli.task.CreateDocsTask;\n+import io.ballerina.cli.task.CreateTargetDirTask;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.DOC_COMMAND;\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * This class represents the \"ballerina doc\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = DOC_COMMAND, description = \"Ballerina doc - Generates API Documentation\")\n+public class DocCommand implements BLauncherCmd {\n+\n+    private final PrintStream outStream;\n+    private final PrintStream errStream;\n+    private Path projectPath;\n+    private boolean exitWhenFinish;\n+\n+    public DocCommand() {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = System.out;\n+        this.errStream = System.err;\n+        this.exitWhenFinish = true;\n+    }\n+\n+    public DocCommand(PrintStream outStream, PrintStream errStream, boolean exitWhenFinish) {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = outStream;\n+        this.errStream = errStream;\n+        this.exitWhenFinish = exitWhenFinish;\n+    }\n+\n+    @CommandLine.Option(names = {\"--sourceroot\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NjQ0MQ=="}, "originalCommit": {"oid": "f4908fc78daecaad056b0307b429dba51e317f20"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTM0MTcyOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoyODo0MlrOHzsayA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoyODo0MlrOHzsayA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NzE3Ng==", "bodyText": "We dont need this validation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523967176", "createdAt": "2020-11-16T08:28:42Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.cli.TaskExecutor;\n+import io.ballerina.cli.task.CompileTask;\n+import io.ballerina.cli.task.CreateDocsTask;\n+import io.ballerina.cli.task.CreateTargetDirTask;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.DOC_COMMAND;\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * This class represents the \"ballerina doc\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = DOC_COMMAND, description = \"Ballerina doc - Generates API Documentation\")\n+public class DocCommand implements BLauncherCmd {\n+\n+    private final PrintStream outStream;\n+    private final PrintStream errStream;\n+    private Path projectPath;\n+    private boolean exitWhenFinish;\n+\n+    public DocCommand() {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = System.out;\n+        this.errStream = System.err;\n+        this.exitWhenFinish = true;\n+    }\n+\n+    public DocCommand(PrintStream outStream, PrintStream errStream, boolean exitWhenFinish) {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = outStream;\n+        this.errStream = errStream;\n+        this.exitWhenFinish = exitWhenFinish;\n+    }\n+\n+    @CommandLine.Option(names = {\"--sourceroot\"},\n+            description = \"Path to the directory containing source files and modules.\")\n+    private String sourceRoot;\n+\n+    @CommandLine.Option(names = {\"--o\", \"-o\"}, description = \"Location to save API Docs.\")\n+    private String outputLoc;\n+\n+    @CommandLine.Option(names = {\"--excludeIndex\", \"-excludeIndex\"}, description = \"Prevents project index from \" +\n+            \"being generated.\")\n+    private boolean excludeIndex;\n+\n+    @CommandLine.Option(names = {\"--combine\", \"-combine\"}, description = \"Creates index using modules.\")\n+    private boolean combine;\n+\n+    @CommandLine.Option(names = {\"--offline\"}, description = \"Compiles offline without downloading \" +\n+            \"dependencies.\")\n+    private boolean offline;\n+\n+    @CommandLine.Option(names = \"--old-parser\", description = \"Enable old parser.\", hidden = true)\n+    private boolean useOldParser;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--exclude\", \"-e\"}, description = \"List of modules to be excluded.\")\n+    private String[] excludes;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"Enable experimental language features.\")\n+    private boolean experimentalFlag;\n+\n+    public void execute() {\n+        if (this.helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(DOC_COMMAND);\n+            this.errStream.println(commandUsageInfo);\n+            return;\n+        }\n+        // combine docs\n+        if (this.combine) {\n+            outStream.println(\"Combining Docs\");\n+            BallerinaDocGenerator.mergeApiDocs(this.projectPath.toString());\n+            if (this.exitWhenFinish) {\n+                Runtime.getRuntime().exit(0);\n+            }\n+        }\n+\n+        if (this.argList != null && this.argList.get(0).endsWith(ProjectConstants.BLANG_SOURCE_EXT)) {\n+            CommandUtil.printError(this.errStream,\n+                    \"generating API Documentation is not supported for a single Ballerina file.\",\n+                    null,\n+                    false);\n+            CommandUtil.exitError(true);\n+            return;\n+        }\n+\n+        // check if there are too many arguments.\n+        if (this.argList != null && this.argList.size() > 1) {\n+            CommandUtil.printError(this.errStream,\n+                    \"too many arguments.\",\n+                    \"ballerina doc [--sourceroot] [--offline]\\n\",\n+                    false);\n+            CommandUtil.exitError(true);\n+            return;\n+        }\n+\n+        // validation and decide source root and source full path\n+        this.projectPath = null != this.sourceRoot ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4908fc78daecaad056b0307b429dba51e317f20"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTM0Mjg0OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoyOTowMFrOHzsbXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoyOTowMFrOHzsbXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NzMyNQ==", "bodyText": "We can remove this validation as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523967325", "createdAt": "2020-11-16T08:29:00Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.cli.TaskExecutor;\n+import io.ballerina.cli.task.CompileTask;\n+import io.ballerina.cli.task.CreateDocsTask;\n+import io.ballerina.cli.task.CreateTargetDirTask;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.DOC_COMMAND;\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * This class represents the \"ballerina doc\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = DOC_COMMAND, description = \"Ballerina doc - Generates API Documentation\")\n+public class DocCommand implements BLauncherCmd {\n+\n+    private final PrintStream outStream;\n+    private final PrintStream errStream;\n+    private Path projectPath;\n+    private boolean exitWhenFinish;\n+\n+    public DocCommand() {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = System.out;\n+        this.errStream = System.err;\n+        this.exitWhenFinish = true;\n+    }\n+\n+    public DocCommand(PrintStream outStream, PrintStream errStream, boolean exitWhenFinish) {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = outStream;\n+        this.errStream = errStream;\n+        this.exitWhenFinish = exitWhenFinish;\n+    }\n+\n+    @CommandLine.Option(names = {\"--sourceroot\"},\n+            description = \"Path to the directory containing source files and modules.\")\n+    private String sourceRoot;\n+\n+    @CommandLine.Option(names = {\"--o\", \"-o\"}, description = \"Location to save API Docs.\")\n+    private String outputLoc;\n+\n+    @CommandLine.Option(names = {\"--excludeIndex\", \"-excludeIndex\"}, description = \"Prevents project index from \" +\n+            \"being generated.\")\n+    private boolean excludeIndex;\n+\n+    @CommandLine.Option(names = {\"--combine\", \"-combine\"}, description = \"Creates index using modules.\")\n+    private boolean combine;\n+\n+    @CommandLine.Option(names = {\"--offline\"}, description = \"Compiles offline without downloading \" +\n+            \"dependencies.\")\n+    private boolean offline;\n+\n+    @CommandLine.Option(names = \"--old-parser\", description = \"Enable old parser.\", hidden = true)\n+    private boolean useOldParser;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--exclude\", \"-e\"}, description = \"List of modules to be excluded.\")\n+    private String[] excludes;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"Enable experimental language features.\")\n+    private boolean experimentalFlag;\n+\n+    public void execute() {\n+        if (this.helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(DOC_COMMAND);\n+            this.errStream.println(commandUsageInfo);\n+            return;\n+        }\n+        // combine docs\n+        if (this.combine) {\n+            outStream.println(\"Combining Docs\");\n+            BallerinaDocGenerator.mergeApiDocs(this.projectPath.toString());\n+            if (this.exitWhenFinish) {\n+                Runtime.getRuntime().exit(0);\n+            }\n+        }\n+\n+        if (this.argList != null && this.argList.get(0).endsWith(ProjectConstants.BLANG_SOURCE_EXT)) {\n+            CommandUtil.printError(this.errStream,\n+                    \"generating API Documentation is not supported for a single Ballerina file.\",\n+                    null,\n+                    false);\n+            CommandUtil.exitError(true);\n+            return;\n+        }\n+\n+        // check if there are too many arguments.\n+        if (this.argList != null && this.argList.size() > 1) {\n+            CommandUtil.printError(this.errStream,\n+                    \"too many arguments.\",\n+                    \"ballerina doc [--sourceroot] [--offline]\\n\",\n+                    false);\n+            CommandUtil.exitError(true);\n+            return;\n+        }\n+\n+        // validation and decide source root and source full path\n+        this.projectPath = null != this.sourceRoot ?\n+                Paths.get(this.sourceRoot).toAbsolutePath() : this.projectPath;\n+\n+        // validate and set source root path\n+        if (!ProjectDirs.isProject(this.projectPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4908fc78daecaad056b0307b429dba51e317f20"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3164, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}