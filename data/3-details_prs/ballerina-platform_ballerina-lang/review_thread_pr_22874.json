{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NDAyOTk1", "number": 22874, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNjoxN1rOD3gceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTo1MDowNVrOD3jfMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI5ODUwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoyNjoxN1rOGNywYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowNzo1OVrOGN4IzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNjI1Nw==", "bodyText": "in runtime, we have to check the key specifiers, not the key type @pcnfernando", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417116257", "createdAt": "2020-04-29T07:26:17Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -745,6 +748,19 @@ private static boolean checkIsStreamType(BType sourceType, BStreamType targetTyp\n                                unresolvedTypes);\n     }\n \n+    private static boolean checkIsTableType(BType sourceType, BTableType targetType, List<TypePair> unresolvedTypes) {\n+        if (sourceType.getTag() != TypeTags.TABLE_TAG) {\n+            return false;\n+        }\n+        boolean isTableType = checkContraints(((BTableType) sourceType).getConstrainedType(),\n+                targetType.getConstrainedType(), unresolvedTypes);\n+        if (isTableType && ((BTableType) sourceType).getKeyType() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwNDQyOQ==", "bodyText": "@gimantha", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417204429", "createdAt": "2020-04-29T10:07:59Z", "author": {"login": "pcnfernando"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -745,6 +748,19 @@ private static boolean checkIsStreamType(BType sourceType, BStreamType targetTyp\n                                unresolvedTypes);\n     }\n \n+    private static boolean checkIsTableType(BType sourceType, BTableType targetType, List<TypePair> unresolvedTypes) {\n+        if (sourceType.getTag() != TypeTags.TABLE_TAG) {\n+            return false;\n+        }\n+        boolean isTableType = checkContraints(((BTableType) sourceType).getConstrainedType(),\n+                targetType.getConstrainedType(), unresolvedTypes);\n+        if (isTableType && ((BTableType) sourceType).getKeyType() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNjI1Nw=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTMyNjExOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozNTowMVrOGNzBBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozODoxMFrOGOaTEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMDUxOQ==", "bodyText": "Implement copy and frozenCopy methods.. @gimantha", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417120519", "createdAt": "2020-04-29T07:35:01Z", "author": {"login": "mohanvive"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java", "diffHunk": "@@ -0,0 +1,438 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.jvm.values;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.IteratorUtils;\n+import org.ballerinalang.jvm.TableUtils;\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BTableType;\n+import org.ballerinalang.jvm.types.BTupleType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.api.BIterator;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.jvm.values.freeze.FreezeUtils;\n+import org.ballerinalang.jvm.values.freeze.State;\n+import org.ballerinalang.jvm.values.freeze.Status;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.OPERATION_NOT_SUPPORTED_IDENTIFIER;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.TABLE_HAS_A_VALUE_FOR_KEY_ERROR;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.TABLE_KEY_NOT_FOUND_ERROR;\n+\n+/**\n+ * The runtime representation of table.\n+ *\n+ * @param <K> the type of keys maintained by this map\n+ * @param <V> the type of mapped values\n+ *\n+ * @since 1.3.0\n+ */\n+public class TableValueImpl<K, V> implements TableValue<K, V> {\n+\n+    private BTableType type;\n+    private volatile Status freezeStatus = new Status(State.UNFROZEN);\n+    private BType iteratorNextReturnType;\n+    private LinkedHashMap<Integer, Map.Entry<K, V>> entries;\n+    private LinkedHashMap<Integer, V> values;\n+    private LinkedHashMap<Integer, K> keys;\n+    private String[] fieldNames = null;\n+    private ValueHolder valueHolder;\n+    private int maxIntKey = 0;\n+    private boolean nextKeySupported;\n+\n+    public TableValueImpl(BTableType type) {\n+        this.type = type;\n+        this.entries = new LinkedHashMap<>();\n+        this.keys = new LinkedHashMap<>();\n+        this.values = new LinkedHashMap<>();\n+        this.fieldNames = type.getFieldNames();\n+        if (type.getFieldNames() != null) {\n+            this.valueHolder = new KeyHashValueHolder();\n+        } else {\n+            this.valueHolder = new ValueHolder();\n+        }\n+    }\n+\n+    public TableValueImpl(BTableType type, ArrayValue data, ArrayValue fieldNames) {\n+        this(type);\n+        if (this.fieldNames == null) {\n+            this.fieldNames = fieldNames.getStringArray();\n+        }\n+\n+        addData(data);\n+    }\n+\n+    private void addData(ArrayValue data) {\n+        BIterator itr = data.getIterator();\n+        while (itr.hasNext()) {\n+            Object next = itr.next();\n+            valueHolder.addData((V) next);\n+        }\n+    }\n+\n+\n+    @Override\n+    public IteratorValue getIterator() {\n+        return new TableIterator<K, V>(entries.values().iterator());\n+    }\n+\n+    @Override\n+    public Object copy(Map<Object, Object> refs) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object frozenCopy(Map<Object, Object> refs) {\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2NDExNQ==", "bodyText": "created an issue for this. #23006", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417764115", "createdAt": "2020-04-30T05:38:10Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java", "diffHunk": "@@ -0,0 +1,438 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.jvm.values;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.IteratorUtils;\n+import org.ballerinalang.jvm.TableUtils;\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BTableType;\n+import org.ballerinalang.jvm.types.BTupleType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.api.BIterator;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.jvm.values.freeze.FreezeUtils;\n+import org.ballerinalang.jvm.values.freeze.State;\n+import org.ballerinalang.jvm.values.freeze.Status;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.OPERATION_NOT_SUPPORTED_IDENTIFIER;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.TABLE_HAS_A_VALUE_FOR_KEY_ERROR;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.TABLE_KEY_NOT_FOUND_ERROR;\n+\n+/**\n+ * The runtime representation of table.\n+ *\n+ * @param <K> the type of keys maintained by this map\n+ * @param <V> the type of mapped values\n+ *\n+ * @since 1.3.0\n+ */\n+public class TableValueImpl<K, V> implements TableValue<K, V> {\n+\n+    private BTableType type;\n+    private volatile Status freezeStatus = new Status(State.UNFROZEN);\n+    private BType iteratorNextReturnType;\n+    private LinkedHashMap<Integer, Map.Entry<K, V>> entries;\n+    private LinkedHashMap<Integer, V> values;\n+    private LinkedHashMap<Integer, K> keys;\n+    private String[] fieldNames = null;\n+    private ValueHolder valueHolder;\n+    private int maxIntKey = 0;\n+    private boolean nextKeySupported;\n+\n+    public TableValueImpl(BTableType type) {\n+        this.type = type;\n+        this.entries = new LinkedHashMap<>();\n+        this.keys = new LinkedHashMap<>();\n+        this.values = new LinkedHashMap<>();\n+        this.fieldNames = type.getFieldNames();\n+        if (type.getFieldNames() != null) {\n+            this.valueHolder = new KeyHashValueHolder();\n+        } else {\n+            this.valueHolder = new ValueHolder();\n+        }\n+    }\n+\n+    public TableValueImpl(BTableType type, ArrayValue data, ArrayValue fieldNames) {\n+        this(type);\n+        if (this.fieldNames == null) {\n+            this.fieldNames = fieldNames.getStringArray();\n+        }\n+\n+        addData(data);\n+    }\n+\n+    private void addData(ArrayValue data) {\n+        BIterator itr = data.getIterator();\n+        while (itr.hasNext()) {\n+            Object next = itr.next();\n+            valueHolder.addData((V) next);\n+        }\n+    }\n+\n+\n+    @Override\n+    public IteratorValue getIterator() {\n+        return new TableIterator<K, V>(entries.values().iterator());\n+    }\n+\n+    @Override\n+    public Object copy(Map<Object, Object> refs) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object frozenCopy(Map<Object, Object> refs) {\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMDUxOQ=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTM3NTE3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo0OTo0M1rOGNzeow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTozODoyN1rOGOaTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyODA5OQ==", "bodyText": "@pcnfernando can you please check this method for map as constraint type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417128099", "createdAt": "2020-04-29T07:49:43Z", "author": {"login": "mohanvive"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java", "diffHunk": "@@ -0,0 +1,438 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.jvm.values;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.IteratorUtils;\n+import org.ballerinalang.jvm.TableUtils;\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BTableType;\n+import org.ballerinalang.jvm.types.BTupleType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.api.BIterator;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.jvm.values.freeze.FreezeUtils;\n+import org.ballerinalang.jvm.values.freeze.State;\n+import org.ballerinalang.jvm.values.freeze.Status;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.OPERATION_NOT_SUPPORTED_IDENTIFIER;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.TABLE_HAS_A_VALUE_FOR_KEY_ERROR;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.TABLE_KEY_NOT_FOUND_ERROR;\n+\n+/**\n+ * The runtime representation of table.\n+ *\n+ * @param <K> the type of keys maintained by this map\n+ * @param <V> the type of mapped values\n+ *\n+ * @since 1.3.0\n+ */\n+public class TableValueImpl<K, V> implements TableValue<K, V> {\n+\n+    private BTableType type;\n+    private volatile Status freezeStatus = new Status(State.UNFROZEN);\n+    private BType iteratorNextReturnType;\n+    private LinkedHashMap<Integer, Map.Entry<K, V>> entries;\n+    private LinkedHashMap<Integer, V> values;\n+    private LinkedHashMap<Integer, K> keys;\n+    private String[] fieldNames = null;\n+    private ValueHolder valueHolder;\n+    private int maxIntKey = 0;\n+    private boolean nextKeySupported;\n+\n+    public TableValueImpl(BTableType type) {\n+        this.type = type;\n+        this.entries = new LinkedHashMap<>();\n+        this.keys = new LinkedHashMap<>();\n+        this.values = new LinkedHashMap<>();\n+        this.fieldNames = type.getFieldNames();\n+        if (type.getFieldNames() != null) {\n+            this.valueHolder = new KeyHashValueHolder();\n+        } else {\n+            this.valueHolder = new ValueHolder();\n+        }\n+    }\n+\n+    public TableValueImpl(BTableType type, ArrayValue data, ArrayValue fieldNames) {\n+        this(type);\n+        if (this.fieldNames == null) {\n+            this.fieldNames = fieldNames.getStringArray();\n+        }\n+\n+        addData(data);\n+    }\n+\n+    private void addData(ArrayValue data) {\n+        BIterator itr = data.getIterator();\n+        while (itr.hasNext()) {\n+            Object next = itr.next();\n+            valueHolder.addData((V) next);\n+        }\n+    }\n+\n+\n+    @Override\n+    public IteratorValue getIterator() {\n+        return new TableIterator<K, V>(entries.values().iterator());\n+    }\n+\n+    @Override\n+    public Object copy(Map<Object, Object> refs) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object frozenCopy(Map<Object, Object> refs) {\n+        return null;\n+    }\n+\n+    @Override\n+    public V get(Object key) {\n+        return valueHolder.getData((K) key);\n+    }\n+\n+    @Override\n+    public V put(K key, V value) {\n+        return valueHolder.putData(key, value);\n+    }\n+\n+    @Override\n+    public void add(V data) {\n+        valueHolder.addData(data);\n+    }\n+\n+    @Override\n+    public V remove(Object key) {\n+        return valueHolder.remove((K) key);\n+    }\n+\n+    @Override\n+    public boolean containsKey(Object key) {\n+        return valueHolder.containsKey((K) key);\n+    }\n+\n+    @Override\n+    public Set<Map.Entry<K, V>> entrySet() {\n+        return new LinkedHashSet<>(entries.values());\n+    }\n+\n+    @Override\n+    public Collection<V> values() {\n+        return values.values();\n+    }\n+\n+    @Override\n+    public void clear() {\n+        entries.clear();\n+        keys.clear();\n+        values.clear();\n+    }\n+\n+    @Override\n+    public V getOrThrow(Object key) {\n+        if (!containsKey(key)) {\n+            throw BallerinaErrors.createError(TABLE_KEY_NOT_FOUND_ERROR, \"cannot find key '\" + key + \"'\");\n+        }\n+        return this.get(key);\n+    }\n+\n+    public V removeOrThrow(Object key) {\n+        if (!containsKey(key)) {\n+            throw BallerinaErrors.createError(TABLE_KEY_NOT_FOUND_ERROR, \"cannot find key '\" + key + \"'\");\n+        }\n+        return this.remove(key);\n+    }\n+\n+    public int getNextKey() {\n+        if (!nextKeySupported) {\n+            throw BallerinaErrors.createError(OPERATION_NOT_SUPPORTED_IDENTIFIER,\n+                    \"Defined key sequence is not supported with nextKey(). \"\n+                            + \"The key sequence should only have an Integer field.\");\n+        }\n+        return keys.size() == 0 ? 0 : (this.maxIntKey + 1);\n+    }\n+\n+    @Override\n+    public V fillAndGet(Object key) {\n+        return null;\n+    }\n+\n+    @Override\n+    public K[] getKeys() {\n+        return (K[]) keys.values().toArray(new Object[]{});\n+    }\n+\n+    @Override\n+    public int size() {\n+        return entries.size();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return entries.isEmpty();\n+    }\n+\n+    @Override\n+    public boolean isFrozen() {\n+        return freezeStatus.isFrozen();\n+    }\n+\n+    @Override\n+    public void attemptFreeze(Status freezeStatus) {\n+        if (FreezeUtils.isOpenForFreeze(this.freezeStatus, freezeStatus)) {\n+            this.freezeStatus = freezeStatus;\n+            this.values().forEach(val -> {\n+                if (val instanceof RefValue) {\n+                    ((RefValue) val).attemptFreeze(freezeStatus);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    public void freezeDirect() {\n+        if (isFrozen()) {\n+            return;\n+        }\n+\n+        this.freezeStatus.setFrozen();\n+        this.values().forEach(val -> {\n+            if (val instanceof RefValue) {\n+                ((RefValue) val).freezeDirect();\n+            }\n+        });\n+    }\n+\n+    public String stringValue() {\n+        Iterator<Map.Entry<Integer, Map.Entry<K, V>>> itr = entries.entrySet().iterator();\n+        return createStringValueDataEntry(itr);\n+    }\n+\n+    private String createStringValueDataEntry(Iterator<Map.Entry<Integer, Map.Entry<K, V>>> itr) {\n+        StringJoiner sj = new StringJoiner(\"\\n\");\n+        while (itr.hasNext()) {\n+            Map.Entry<Integer, Map.Entry<K, V>> struct = itr.next();\n+            sj.add(struct.getValue().getValue().toString());\n+        }\n+        return sj.toString();\n+    }\n+\n+    private BType getTableConstraintField(BType constraintType, String fieldName) {\n+        if (constraintType.getTag() == TypeTags.RECORD_TYPE_TAG) {\n+            Map<String, BField> fieldList = ((BRecordType) constraintType).getFields();\n+            return fieldList.get(fieldName).getFieldType();\n+        } else if (constraintType.getTag() == TypeTags.MAP_TAG) {\n+            return ((BMapType) constraintType).getConstrainedType();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2NDIwNQ==", "bodyText": "created an issue for this.\n#23006", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417764205", "createdAt": "2020-04-30T05:38:27Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TableValueImpl.java", "diffHunk": "@@ -0,0 +1,438 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.jvm.values;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.IteratorUtils;\n+import org.ballerinalang.jvm.TableUtils;\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.types.BField;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BTableType;\n+import org.ballerinalang.jvm.types.BTupleType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.api.BIterator;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.jvm.values.freeze.FreezeUtils;\n+import org.ballerinalang.jvm.values.freeze.State;\n+import org.ballerinalang.jvm.values.freeze.Status;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.OPERATION_NOT_SUPPORTED_IDENTIFIER;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.TABLE_HAS_A_VALUE_FOR_KEY_ERROR;\n+import static org.ballerinalang.jvm.util.exceptions.BallerinaErrorReasons.TABLE_KEY_NOT_FOUND_ERROR;\n+\n+/**\n+ * The runtime representation of table.\n+ *\n+ * @param <K> the type of keys maintained by this map\n+ * @param <V> the type of mapped values\n+ *\n+ * @since 1.3.0\n+ */\n+public class TableValueImpl<K, V> implements TableValue<K, V> {\n+\n+    private BTableType type;\n+    private volatile Status freezeStatus = new Status(State.UNFROZEN);\n+    private BType iteratorNextReturnType;\n+    private LinkedHashMap<Integer, Map.Entry<K, V>> entries;\n+    private LinkedHashMap<Integer, V> values;\n+    private LinkedHashMap<Integer, K> keys;\n+    private String[] fieldNames = null;\n+    private ValueHolder valueHolder;\n+    private int maxIntKey = 0;\n+    private boolean nextKeySupported;\n+\n+    public TableValueImpl(BTableType type) {\n+        this.type = type;\n+        this.entries = new LinkedHashMap<>();\n+        this.keys = new LinkedHashMap<>();\n+        this.values = new LinkedHashMap<>();\n+        this.fieldNames = type.getFieldNames();\n+        if (type.getFieldNames() != null) {\n+            this.valueHolder = new KeyHashValueHolder();\n+        } else {\n+            this.valueHolder = new ValueHolder();\n+        }\n+    }\n+\n+    public TableValueImpl(BTableType type, ArrayValue data, ArrayValue fieldNames) {\n+        this(type);\n+        if (this.fieldNames == null) {\n+            this.fieldNames = fieldNames.getStringArray();\n+        }\n+\n+        addData(data);\n+    }\n+\n+    private void addData(ArrayValue data) {\n+        BIterator itr = data.getIterator();\n+        while (itr.hasNext()) {\n+            Object next = itr.next();\n+            valueHolder.addData((V) next);\n+        }\n+    }\n+\n+\n+    @Override\n+    public IteratorValue getIterator() {\n+        return new TableIterator<K, V>(entries.values().iterator());\n+    }\n+\n+    @Override\n+    public Object copy(Map<Object, Object> refs) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object frozenCopy(Map<Object, Object> refs) {\n+        return null;\n+    }\n+\n+    @Override\n+    public V get(Object key) {\n+        return valueHolder.getData((K) key);\n+    }\n+\n+    @Override\n+    public V put(K key, V value) {\n+        return valueHolder.putData(key, value);\n+    }\n+\n+    @Override\n+    public void add(V data) {\n+        valueHolder.addData(data);\n+    }\n+\n+    @Override\n+    public V remove(Object key) {\n+        return valueHolder.remove((K) key);\n+    }\n+\n+    @Override\n+    public boolean containsKey(Object key) {\n+        return valueHolder.containsKey((K) key);\n+    }\n+\n+    @Override\n+    public Set<Map.Entry<K, V>> entrySet() {\n+        return new LinkedHashSet<>(entries.values());\n+    }\n+\n+    @Override\n+    public Collection<V> values() {\n+        return values.values();\n+    }\n+\n+    @Override\n+    public void clear() {\n+        entries.clear();\n+        keys.clear();\n+        values.clear();\n+    }\n+\n+    @Override\n+    public V getOrThrow(Object key) {\n+        if (!containsKey(key)) {\n+            throw BallerinaErrors.createError(TABLE_KEY_NOT_FOUND_ERROR, \"cannot find key '\" + key + \"'\");\n+        }\n+        return this.get(key);\n+    }\n+\n+    public V removeOrThrow(Object key) {\n+        if (!containsKey(key)) {\n+            throw BallerinaErrors.createError(TABLE_KEY_NOT_FOUND_ERROR, \"cannot find key '\" + key + \"'\");\n+        }\n+        return this.remove(key);\n+    }\n+\n+    public int getNextKey() {\n+        if (!nextKeySupported) {\n+            throw BallerinaErrors.createError(OPERATION_NOT_SUPPORTED_IDENTIFIER,\n+                    \"Defined key sequence is not supported with nextKey(). \"\n+                            + \"The key sequence should only have an Integer field.\");\n+        }\n+        return keys.size() == 0 ? 0 : (this.maxIntKey + 1);\n+    }\n+\n+    @Override\n+    public V fillAndGet(Object key) {\n+        return null;\n+    }\n+\n+    @Override\n+    public K[] getKeys() {\n+        return (K[]) keys.values().toArray(new Object[]{});\n+    }\n+\n+    @Override\n+    public int size() {\n+        return entries.size();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return entries.isEmpty();\n+    }\n+\n+    @Override\n+    public boolean isFrozen() {\n+        return freezeStatus.isFrozen();\n+    }\n+\n+    @Override\n+    public void attemptFreeze(Status freezeStatus) {\n+        if (FreezeUtils.isOpenForFreeze(this.freezeStatus, freezeStatus)) {\n+            this.freezeStatus = freezeStatus;\n+            this.values().forEach(val -> {\n+                if (val instanceof RefValue) {\n+                    ((RefValue) val).attemptFreeze(freezeStatus);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    public void freezeDirect() {\n+        if (isFrozen()) {\n+            return;\n+        }\n+\n+        this.freezeStatus.setFrozen();\n+        this.values().forEach(val -> {\n+            if (val instanceof RefValue) {\n+                ((RefValue) val).freezeDirect();\n+            }\n+        });\n+    }\n+\n+    public String stringValue() {\n+        Iterator<Map.Entry<Integer, Map.Entry<K, V>>> itr = entries.entrySet().iterator();\n+        return createStringValueDataEntry(itr);\n+    }\n+\n+    private String createStringValueDataEntry(Iterator<Map.Entry<Integer, Map.Entry<K, V>>> itr) {\n+        StringJoiner sj = new StringJoiner(\"\\n\");\n+        while (itr.hasNext()) {\n+            Map.Entry<Integer, Map.Entry<K, V>> struct = itr.next();\n+            sj.add(struct.getValue().getValue().toString());\n+        }\n+        return sj.toString();\n+    }\n+\n+    private BType getTableConstraintField(BType constraintType, String fieldName) {\n+        if (constraintType.getTag() == TypeTags.RECORD_TYPE_TAG) {\n+            Map<String, BField> fieldList = ((BRecordType) constraintType).getFields();\n+            return fieldList.get(fieldName).getFieldType();\n+        } else if (constraintType.getTag() == TypeTags.MAP_TAG) {\n+            return ((BMapType) constraintType).getConstrainedType();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyODA5OQ=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQyMDk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/IndexBasedAccessNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODowMzoyMVrOGNz6_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowNDo0OFrOGN55Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNTM1OA==", "bodyText": "Validate whether we need another variable for MultiKeyExpression. @mohanvive", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417135358", "createdAt": "2020-04-29T08:03:21Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/IndexBasedAccessNode.java", "diffHunk": "@@ -27,4 +27,6 @@\n     ExpressionNode getExpression();\n \n     ExpressionNode getIndex();\n+\n+    TableMultiKeyExpressionNode getMultiKeyExpr();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMzI0Nw==", "bodyText": "Fixed..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417233247", "createdAt": "2020-04-29T11:04:48Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/IndexBasedAccessNode.java", "diffHunk": "@@ -27,4 +27,6 @@\n     ExpressionNode getExpression();\n \n     ExpressionNode getIndex();\n+\n+    TableMultiKeyExpressionNode getMultiKeyExpr();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNTM1OA=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQyNTkzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/TableTypeNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODowNDo0OVrOGNz98A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowNTowNFrOGN55zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNjExMg==", "bodyText": "Add description for table node.\nChange it to 1.3.0 @mohanvive", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417136112", "createdAt": "2020-04-29T08:04:49Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/TableTypeNode.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.types;\n+\n+import org.ballerinalang.model.tree.TableKeySpecifierNode;\n+import org.ballerinalang.model.tree.TableKeyTypeConstraintNode;\n+\n+/**\n+ * table&lt;Person&gt; key(...);.\n+ *\n+ * @since 1.2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMzM1Ng==", "bodyText": "Fixed..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417233356", "createdAt": "2020-04-29T11:05:04Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/TableTypeNode.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.types;\n+\n+import org.ballerinalang.model.tree.TableKeySpecifierNode;\n+import org.ballerinalang.model.tree.TableKeyTypeConstraintNode;\n+\n+/**\n+ * table&lt;Person&gt; key(...);.\n+ *\n+ * @since 1.2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNjExMg=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQyNzE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/types/TableType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODowNToxMFrOGNz-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowNToxN1rOGN56LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNjMwNg==", "bodyText": "Fix the year. @mohanvive", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417136306", "createdAt": "2020-04-29T08:05:10Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/types/TableType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMzQ1Mw==", "bodyText": "Fixed..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417233453", "createdAt": "2020-04-29T11:05:17Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/types/TableType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNjMwNg=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQzNDA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODowNzoxMVrOGN0C5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowNToyNVrOGN56Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNzM4MA==", "bodyText": "Rename the diagnostic code @mohanvive", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417137380", "createdAt": "2020-04-29T08:07:11Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -411,6 +405,20 @@\n     ERROR_TYPE_EXPECTED(\"error.type.expected\"),\n     MISSING_REQUIRED_METHOD_NEXT(\"missing.required.method.next\"),\n \n+    // Table related codes\n+    TABLE_CONSTRAINT_INVALID_SUBTYPE(\"invalid.stream.constraint.subtype\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMzUxMA==", "bodyText": "Fixed..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417233510", "createdAt": "2020-04-29T11:05:25Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -411,6 +405,20 @@\n     ERROR_TYPE_EXPECTED(\"error.type.expected\"),\n     MISSING_REQUIRED_METHOD_NEXT(\"missing.required.method.next\"),\n \n+    // Table related codes\n+    TABLE_CONSTRAINT_INVALID_SUBTYPE(\"invalid.stream.constraint.subtype\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNzM4MA=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUyNzgwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozNTowMFrOGN09cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowODowM1rOGN5_Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MjM3MQ==", "bodyText": "Remove this Todo. @mohanvive", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417152371", "createdAt": "2020-04-29T08:35:00Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -546,6 +547,11 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n                     unresolvedTypes);\n         }\n \n+        //TODO Need to check the key specifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNDc4Mw==", "bodyText": "Fixed..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417234783", "createdAt": "2020-04-29T11:08:03Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -546,6 +547,11 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n                     unresolvedTypes);\n         }\n \n+        //TODO Need to check the key specifier", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MjM3MQ=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUzNDQ3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangTableConstructorExpr.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozNjo1MVrOGN1Bhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowODoxNlrOGN5_0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MzQxNQ==", "bodyText": "Add description @mohanvive", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417153415", "createdAt": "2020-04-29T08:36:51Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangTableConstructorExpr.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.TableKeySpecifierNode;\n+import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n+import org.ballerinalang.model.tree.expressions.TableConstructorExprNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeySpecifier;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * BLangTableConstructorExpr class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNDg5Nw==", "bodyText": "Fixed..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417234897", "createdAt": "2020-04-29T11:08:16Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangTableConstructorExpr.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.TableKeySpecifierNode;\n+import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n+import org.ballerinalang.model.tree.expressions.TableConstructorExprNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeySpecifier;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * BLangTableConstructorExpr class.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MzQxNQ=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUzNjY2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangTableMultiKeyExpr.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozNzoyOFrOGN1C7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowODoxMFrOGN5_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1Mzc3Mg==", "bodyText": "Add descriptio. @mohanvive", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417153772", "createdAt": "2020-04-29T08:37:28Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangTableMultiKeyExpr.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.TableMultiKeyExpressionNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNDg0MQ==", "bodyText": "Fixed..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417234841", "createdAt": "2020-04-29T11:08:10Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangTableMultiKeyExpr.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.TableMultiKeyExpressionNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1Mzc3Mg=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUzNzU0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangTableTypeNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozNzo0NlrOGN1Dfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTowOToxOVrOGN6Bww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MzkxOA==", "bodyText": "Add description @mohanvive", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417153918", "createdAt": "2020-04-29T08:37:46Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangTableTypeNode.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.types;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.TableKeySpecifierNode;\n+import org.ballerinalang.model.tree.TableKeyTypeConstraintNode;\n+import org.ballerinalang.model.tree.types.TableTypeNode;\n+import org.ballerinalang.model.tree.types.TypeNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeySpecifier;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeyTypeConstraint;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNTM5NQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417235395", "createdAt": "2020-04-29T11:09:19Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangTableTypeNode.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.types;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.TableKeySpecifierNode;\n+import org.ballerinalang.model.tree.TableKeyTypeConstraintNode;\n+import org.ballerinalang.model.tree.types.TableTypeNode;\n+import org.ballerinalang.model.tree.types.TypeNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeySpecifier;\n+import org.wso2.ballerinalang.compiler.tree.BLangTableKeyTypeConstraint;\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MzkxOA=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTY5MjQzOnYy", "diffSide": "RIGHT", "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/GetKeys.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOToyMDowOFrOGN2iTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowMzoyNFrOGN3_TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE3ODE4OQ==", "bodyText": "Check keyType being created from Key Specifier", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417178189", "createdAt": "2020-04-29T09:20:08Z", "author": {"login": "pcnfernando"}, "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/GetKeys.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.table;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTableType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.TableValueImpl;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * Extern function to get key arrays from the table.\n+ * ballerina.model.table:keys()\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.table\",\n+        functionName = \"keys\",\n+        args = {@Argument(name = \"tbl\", type = TypeKind.TABLE)},\n+        returnType = {@ReturnType(type = TypeKind.ARRAY, elementType = TypeKind.ANYDATA)},\n+        isPublic = true\n+)\n+public class GetKeys {\n+\n+    public static ArrayValue keys(Strand strand, TableValueImpl tbl) {\n+        BType tableKeyType = ((BTableType) tbl.getType()).getKeyType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMTk5Nw==", "bodyText": "@gimantha", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417201997", "createdAt": "2020-04-29T10:03:24Z", "author": {"login": "pcnfernando"}, "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/GetKeys.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.table;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTableType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.TableValueImpl;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * Extern function to get key arrays from the table.\n+ * ballerina.model.table:keys()\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.table\",\n+        functionName = \"keys\",\n+        args = {@Argument(name = \"tbl\", type = TypeKind.TABLE)},\n+        returnType = {@ReturnType(type = TypeKind.ARRAY, elementType = TypeKind.ANYDATA)},\n+        isPublic = true\n+)\n+public class GetKeys {\n+\n+    public static ArrayValue keys(Strand strand, TableValueImpl tbl) {\n+        BType tableKeyType = ((BTableType) tbl.getType()).getKeyType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE3ODE4OQ=="}, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTcwMzIwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/HasKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOToyMzowNlrOGN2o8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOToyMzowNlrOGN2o8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE3OTg5MA==", "bodyText": "add @SInCE version", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417179890", "createdAt": "2020-04-29T09:23:06Z", "author": {"login": "pcnfernando"}, "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/HasKey.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.table;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.TableValueImpl;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * Extern function to check existence of key.\n+ * ballerina.model.table:hasKey(KeyType)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTc5Njk5OnYy", "diffSide": "RIGHT", "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/ToArray.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTo1MDowNVrOGN3jXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTo1MDowNVrOGN3jXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NDg0Nw==", "bodyText": "Remove single columns", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22874#discussion_r417194847", "createdAt": "2020-04-29T09:50:05Z", "author": {"login": "pcnfernando"}, "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/ToArray.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.table;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTableType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.TableValueImpl;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Function for returning the values of the table as an array. T[] vals = tbl.toArray();\n+ *\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.table\",\n+        functionName = \"toArray\",\n+        args = {@Argument(name = \"tbl\", type = TypeKind.TABLE)},\n+        returnType = {@ReturnType(type = TypeKind.ARRAY, elementType = TypeKind.ANYDATA)},\n+        isPublic = true\n+)\n+public class ToArray {\n+\n+    public static ArrayValue toArray(Strand strand, TableValueImpl tbl) {\n+        BType constrainedType = ((BTableType) tbl.getType()).getConstrainedType();\n+\n+        Collection values = tbl.values();\n+        int size = values.size();\n+        int i = 0;\n+        switch (constrainedType.getTag()) {\n+            case TypeTags.INT_TAG:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebf529a98ea18a5a6813dcf3b09f542172950c2"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3779, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}