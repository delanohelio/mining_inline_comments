{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjU3OTY2", "number": 22816, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNjoyMjoxMFrOD1HNMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMToxNDoyM1rOD2cFRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDE5MTg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNjoyMjoxMFrOGKYf2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzo1ODowM1rOGKb7Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0MDMxNA==", "bodyText": "WDYT of using a method instead of all these. Looks a bit too verbose for this method for me :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r413540314", "createdAt": "2020-04-23T06:22:10Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1816,6 +1811,63 @@ public void visit(BLangInvocation iExpr) {\n         }\n     }\n \n+    public void visit(BLangInvocation.BLangActionInvocation aInv) {\n+        // For an action invocation, this will only be satisfied when it's an async call of a function.\n+        // e.g., start foo();\n+        if (aInv.expr == null) {\n+            checkFunctionInvocationExpr(aInv);\n+            return;\n+        }\n+\n+        // Module aliases cannot be used with remote method call actions\n+        if (!validateModuleAliasUsage(aInv)) {\n+            return;\n+        }\n+\n+        // Find the variable reference expression type\n+        BType exprType = checkExpr(aInv.expr, this.env, symTable.noType);\n+        BType actualType = symTable.semanticError;\n+        BLangVariableReference varRef = (BLangVariableReference) aInv.expr;\n+\n+        if (exprType == symTable.semanticError || exprType.tag != TypeTags.OBJECT ||\n+                ((varRef.symbol.tag & SymTag.ENDPOINT) != SymTag.ENDPOINT) && !aInv.async) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f3ab7779ecc575af947812020f9e8380eb57c6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5NTU3Mw==", "bodyText": "Just the (varRef.symbol.tag & SymTag.ENDPOINT) != SymTag.ENDPOINT) part or the whole thing? The expression as a whole, checks whether it's a remote method call or an async method call.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r413595573", "createdAt": "2020-04-23T07:56:50Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1816,6 +1811,63 @@ public void visit(BLangInvocation iExpr) {\n         }\n     }\n \n+    public void visit(BLangInvocation.BLangActionInvocation aInv) {\n+        // For an action invocation, this will only be satisfied when it's an async call of a function.\n+        // e.g., start foo();\n+        if (aInv.expr == null) {\n+            checkFunctionInvocationExpr(aInv);\n+            return;\n+        }\n+\n+        // Module aliases cannot be used with remote method call actions\n+        if (!validateModuleAliasUsage(aInv)) {\n+            return;\n+        }\n+\n+        // Find the variable reference expression type\n+        BType exprType = checkExpr(aInv.expr, this.env, symTable.noType);\n+        BType actualType = symTable.semanticError;\n+        BLangVariableReference varRef = (BLangVariableReference) aInv.expr;\n+\n+        if (exprType == symTable.semanticError || exprType.tag != TypeTags.OBJECT ||\n+                ((varRef.symbol.tag & SymTag.ENDPOINT) != SymTag.ENDPOINT) && !aInv.async) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0MDMxNA=="}, "originalCommit": {"oid": "53f3ab7779ecc575af947812020f9e8380eb57c6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5NjQxOQ==", "bodyText": "On second thoughts, that's probably not the correct way to check for a remote method call", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r413596419", "createdAt": "2020-04-23T07:58:03Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1816,6 +1811,63 @@ public void visit(BLangInvocation iExpr) {\n         }\n     }\n \n+    public void visit(BLangInvocation.BLangActionInvocation aInv) {\n+        // For an action invocation, this will only be satisfied when it's an async call of a function.\n+        // e.g., start foo();\n+        if (aInv.expr == null) {\n+            checkFunctionInvocationExpr(aInv);\n+            return;\n+        }\n+\n+        // Module aliases cannot be used with remote method call actions\n+        if (!validateModuleAliasUsage(aInv)) {\n+            return;\n+        }\n+\n+        // Find the variable reference expression type\n+        BType exprType = checkExpr(aInv.expr, this.env, symTable.noType);\n+        BType actualType = symTable.semanticError;\n+        BLangVariableReference varRef = (BLangVariableReference) aInv.expr;\n+\n+        if (exprType == symTable.semanticError || exprType.tag != TypeTags.OBJECT ||\n+                ((varRef.symbol.tag & SymTag.ENDPOINT) != SymTag.ENDPOINT) && !aInv.async) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0MDMxNA=="}, "originalCommit": {"oid": "53f3ab7779ecc575af947812020f9e8380eb57c6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDIxMjgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/ActionNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNjoyOTowMVrOGKYrgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNjoyOTowMVrOGKYrgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0MzI5Ng==", "bodyText": "Wrong year?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r413543296", "createdAt": "2020-04-23T06:29:01Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/ActionNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ *  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f3ab7779ecc575af947812020f9e8380eb57c6"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDA4NDA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ConstantPropagation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMTowNjo1MlrOGMM2uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMTowNjo1MlrOGMM2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NjcxMw==", "bodyText": "Shall we use\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void visit(BLangInvocation.BLangActionInvocation remoteMethodCallNode) {\n          \n          \n            \n                public void visit(BLangInvocation.BLangActionInvocation actionInvocation) {\n          \n      \n    \n    \n  \n\ninstead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r415446713", "createdAt": "2020-04-27T01:06:52Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ConstantPropagation.java", "diffHunk": "@@ -274,6 +274,14 @@ public void visit(BLangInvocation bLangInvocationNode) {\n         result = bLangInvocationNode;\n     }\n \n+    @Override\n+    public void visit(BLangInvocation.BLangActionInvocation remoteMethodCallNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28cd437150535ae0b72602f492912aee4f571627"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDA4OTU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMToxMDowNVrOGMM5ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1NjoxN1rOGMdI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NzM5Nw==", "bodyText": "Aren't we duplicating most of the logic from visit(BLangInvocation iExpr) here? Can't we use a common method instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r415447397", "createdAt": "2020-04-27T01:10:05Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3615,6 +3614,58 @@ public void visit(BLangInvocation iExpr) {\n         fixTypeCastInTypeParamInvocation(iExpr, genIExpr);\n     }\n \n+    @Override\n+    public void visit(BLangInvocation.BLangActionInvocation actionInvocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28cd437150535ae0b72602f492912aee4f571627"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzMTIyNA==", "bodyText": "Yeah, it's duplicated. Will see about moving it to a common place", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r415531224", "createdAt": "2020-04-27T05:58:20Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3615,6 +3614,58 @@ public void visit(BLangInvocation iExpr) {\n         fixTypeCastInTypeParamInvocation(iExpr, genIExpr);\n     }\n \n+    @Override\n+    public void visit(BLangInvocation.BLangActionInvocation actionInvocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NzM5Nw=="}, "originalCommit": {"oid": "28cd437150535ae0b72602f492912aee4f571627"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMzUwMw==", "bodyText": "Addressed with ccf1fe7", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r415713503", "createdAt": "2020-04-27T10:56:17Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3615,6 +3614,58 @@ public void visit(BLangInvocation iExpr) {\n         fixTypeCastInTypeParamInvocation(iExpr, genIExpr);\n     }\n \n+    @Override\n+    public void visit(BLangInvocation.BLangActionInvocation actionInvocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NzM5Nw=="}, "originalCommit": {"oid": "28cd437150535ae0b72602f492912aee4f571627"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDA5Mzg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMToxMjoxMFrOGMM7dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMToxMjoxMFrOGMM7dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NzkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                              boolean remoteMethodCall) {\n          \n          \n            \n                                              boolean actionInvocation) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r415447925", "createdAt": "2020-04-27T01:12:10Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1654,8 +1655,16 @@ private void createSimpleVariableReference(DiagnosticPos pos, Set<Whitespace> ws\n         this.exprNodeStack.push(varRef);\n     }\n \n-    void createFunctionInvocation(DiagnosticPos pos, Set<Whitespace> ws, boolean argsAvailable) {\n-        BLangInvocation invocationNode = (BLangInvocation) TreeBuilder.createInvocationNode();\n+    void createFunctionInvocation(DiagnosticPos pos, Set<Whitespace> ws, boolean argsAvailable,\n+                                  boolean remoteMethodCall) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28cd437150535ae0b72602f492912aee4f571627"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDA5Nzk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMToxNDoyM1rOGMM9cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMToxNDoyM1rOGMM9cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0ODQzNQ==", "bodyText": "Not sure if the changes to support multiple-receive-action will remove the key from normal worker receive. But shall we remove this and create an issue anyway?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22816#discussion_r415448435", "createdAt": "2020-04-27T01:14:23Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -3194,6 +3213,7 @@ void addWorkerReceiveExpr(DiagnosticPos pos, Set<Whitespace> ws, String workerNa\n         workerReceiveExpr.pos = pos;\n         workerReceiveExpr.addWS(ws);\n         //if there are two expressions, this is a channel receive and the top expression is the key\n+        // TODO: Not needed?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28cd437150535ae0b72602f492912aee4f571627"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3897, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}