{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MDM5Njgy", "number": 26136, "title": "Align parser with new swan lake service changes", "bodyText": "Purpose\n\nRemove service-constructor-expr support\nRemove  service-type-descriptor support\nAdd service qualifier support to module-class-defn, object-type-descriptor and object-constructor-expr\nAdd resource qualifier support to object-field\nAdd  new service-decl support.\nAdd new resource-accessor-defn support to module-class-defn and object-contructor-expr\nReplace resource attach point with service remote\nDisallow visibility-qual with remote-qual and resource-qual\n\n\n\n  service-decl (click to expand)\nservice-decl := metadata service [type-descriptor] [absolute-resource-path] on expression-list object-constructor-block\nabsolute-resource-path := \"/\" | (\"/\" identifier)+\n\n\n\n\n  resource-accessor-defn (click to expand)\nresource-accessor-defn := metadata `resource` `function` accessor-name relative-resource-path\n                           function-signature method-defn-body\naccessor-name := identifier\nrelative-resource-path := \".\" | (identifier (\"/\" identifier)*)\n\n\nFixes #25797\nApproach\nN/A\nSamples\nN/A\nRemarks\nN/A\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-09-28T10:20:29Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136", "merged": true, "mergeCommit": {"oid": "abdeb1e5646149f35842678999c173712ee2828d"}, "closed": true, "closedAt": "2020-10-08T04:26:46Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJEjh_gH2gAyNDk0MDM5NjgyOmZkM2JlMzFjNDIyN2U2ZjdhNGI4NDJhOGI5Yzg1NDJmOGY1NjExNmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQZ1_EgFqTUwNDQyMDA3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fd3be31c4227e6f7a4b842a8b9c8542f8f56116c", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd3be31c4227e6f7a4b842a8b9c8542f8f56116c", "committedDate": "2020-09-15T09:40:59Z", "message": "Remove parser support of service constructor and type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc7c6c2d1ef410aebb20a3c90ce788b4e7684983", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc7c6c2d1ef410aebb20a3c90ce788b4e7684983", "committedDate": "2020-09-15T11:04:20Z", "message": "Merge branch 'obect-parsing' of https://github.com/lochana-chathura/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a312f7e70e9945d4d561267c902dcaff72a8d65e", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a312f7e70e9945d4d561267c902dcaff72a8d65e", "committedDate": "2020-09-15T11:09:01Z", "message": "Merge branch 'isolated-objects' of https://github.com/lochana-chathura/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bdc6304b950338ac794351de74ce31da911091a", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2bdc6304b950338ac794351de74ce31da911091a", "committedDate": "2020-09-23T06:45:23Z", "message": "Merge branch 'isolated-objects' of https://github.com/lochana-chathura/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2410ca4d5adff19489205081391fa12fe8419224", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2410ca4d5adff19489205081391fa12fe8419224", "committedDate": "2020-09-28T10:16:11Z", "message": "Add parsing support for swan lake service part 1 changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e7a3f6a8ed8e3ad461f2b77a3a4fec700585c6d", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e7a3f6a8ed8e3ad461f2b77a3a4fec700585c6d", "committedDate": "2020-09-28T17:55:35Z", "message": "Add parsing support for swan lake service part 2 changes\n\nAllow resource `object-field`s\nAdd `resource-accessor-defn` support\nAllow `object-field`s in service-decl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0a590ecb4b15e94bee028d00bd45f3d2933458b", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0a590ecb4b15e94bee028d00bd45f3d2933458b", "committedDate": "2020-09-29T19:00:15Z", "message": "Update parser tests for syntax tree changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b28819ede00db3f3fe56ca345821963b85a6d79b", "committedDate": "2020-09-29T19:09:04Z", "message": "Fix resource object fields with function type parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa83959f8c178d313e83b529ab9f47f500268dbd", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa83959f8c178d313e83b529ab9f47f500268dbd", "committedDate": "2020-09-30T05:16:52Z", "message": "Merge branch 'isolated-objects' of https://github.com/lochana-chathura/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MTgwMjU2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#pullrequestreview-499180256", "createdAt": "2020-09-30T08:06:07Z", "commit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODowNjowOFrOHaR9Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODowNjowOFrOHaR9Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxOTIwMg==", "bodyText": "Shall we remove this commented code", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497319202", "createdAt": "2020-09-30T08:06:08Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1031,125 +1028,131 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addFinalQualifier(objFieldNode.finalKeyword(), simpleVar);\n-        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n-        return simpleVar;\n-    }\n-\n-    @Override\n-    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-    }\n-\n-    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-        // Any Service can be represented in two major components.\n-        //  1) A anonymous type node (Object)\n-        //  2) Variable assignment with \"serviceName\".\n-        //      This is a global variable if the service is defined in module level.\n-        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-        ServiceDeclarationNode serviceDeclrNode = null;\n-        ServiceConstructorExpressionNode serviceConstructorNode;\n-        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-        //TODO handle service.expression\n-        // TODO: Look for generify this into sepearte method for type as well\n-        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-\n-        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-        if (serviceNode instanceof ServiceDeclarationNode) {\n-            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-        }\n-        String serviceName;\n-        DiagnosticPos identifierPos;\n-        if (isAnonServiceValue || serviceNameNode == null) {\n-            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-            identifierPos = pos;\n-        } else {\n-            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-            } else {\n-                serviceName = serviceNameNode.text();\n-            }\n-            identifierPos = getPosition(serviceNameNode);\n-        }\n-\n-        String serviceTypeName =\n-                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-        serviceVar.pos = identifierPos;\n-        bLService.setName(serviceVar);\n-        if (!isAnonServiceValue) {\n-            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-            for (Node expr : serviceDeclrNode.expressions()) {\n-                bLService.attachedExprs.add(createExpression(expr));\n+        NodeList<Token> qualifierList = objFieldNode.qualifierList();\n+        for (Token token : qualifierList) {\n+            if (token.kind() == SyntaxKind.FINAL_KEYWORD) {\n+                addFinalQualifier(token, simpleVar);\n             }\n         }\n \n-        if (isAnonServiceValue) {\n-            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-        } else {\n-            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-        }\n-\n-        // We add all service nodes to top level, only for future reference.\n-        addToTop(bLService);\n-\n-        // 1) Define type nodeDefinition for service type.\n-        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-        serviceTypeID.pos = pos;\n-        classDef.setName(serviceTypeID);\n-        classDef.flagSet.add(SERVICE);\n-\n-        if (!isAnonServiceValue) {\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-            bLService.markdownDocumentationAttachment =\n-                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-        } else {\n-            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-        }\n-\n-        classDef.pos = pos;\n-        addToTop(classDef);\n-        bLService.serviceClass = classDef;\n-\n-        // 2) Create service constructor.\n-        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-                .createServiceConstructorNode();\n-        serviceConstNode.serviceNode = bLService;\n-        serviceConstNode.pos = pos;\n-\n-        // Crate Global variable for service.\n-        bLService.pos = pos;\n-        if (!isAnonServiceValue) {\n-            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-                    Collections.emptySet(),\n-                    serviceName, identifierPos,\n-                    serviceConstNode);\n-            var.flagSet.add(Flag.FINAL);\n-            var.flagSet.add(SERVICE);\n-\n-            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-            bLUserDefinedType.typeName = classDef.name;\n-            bLUserDefinedType.pos = pos;\n-\n-            var.typeNode = bLUserDefinedType;\n-            bLService.variableNode = var;\n-            return var;\n-        } else {\n-            BLangServiceConstructorExpr serviceConstructorExpr =\n-                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-            serviceConstructorExpr.serviceNode = bLService;\n-            return serviceConstructorExpr;\n-        }\n+        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n+        return simpleVar;\n     }\n \n+//    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33d8fac1268f8dd0280f4374862bb22b87718b9d", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33d8fac1268f8dd0280f4374862bb22b87718b9d", "committedDate": "2020-09-30T08:12:21Z", "message": "Fix merging issues and cleanup commented code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MjYzMTA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#pullrequestreview-499263109", "createdAt": "2020-09-30T09:49:27Z", "commit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo0OToyN1rOHaV3lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo0OToyN1rOHaV3lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzMxOQ==", "bodyText": "this looks like dead code, if so shall we remove it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497383319", "createdAt": "2020-09-30T09:49:27Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1031,125 +1028,131 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addFinalQualifier(objFieldNode.finalKeyword(), simpleVar);\n-        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n-        return simpleVar;\n-    }\n-\n-    @Override\n-    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-    }\n-\n-    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-        // Any Service can be represented in two major components.\n-        //  1) A anonymous type node (Object)\n-        //  2) Variable assignment with \"serviceName\".\n-        //      This is a global variable if the service is defined in module level.\n-        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-        ServiceDeclarationNode serviceDeclrNode = null;\n-        ServiceConstructorExpressionNode serviceConstructorNode;\n-        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-        //TODO handle service.expression\n-        // TODO: Look for generify this into sepearte method for type as well\n-        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-\n-        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-        if (serviceNode instanceof ServiceDeclarationNode) {\n-            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-        }\n-        String serviceName;\n-        DiagnosticPos identifierPos;\n-        if (isAnonServiceValue || serviceNameNode == null) {\n-            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-            identifierPos = pos;\n-        } else {\n-            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-            } else {\n-                serviceName = serviceNameNode.text();\n-            }\n-            identifierPos = getPosition(serviceNameNode);\n-        }\n-\n-        String serviceTypeName =\n-                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-        serviceVar.pos = identifierPos;\n-        bLService.setName(serviceVar);\n-        if (!isAnonServiceValue) {\n-            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-            for (Node expr : serviceDeclrNode.expressions()) {\n-                bLService.attachedExprs.add(createExpression(expr));\n+        NodeList<Token> qualifierList = objFieldNode.qualifierList();\n+        for (Token token : qualifierList) {\n+            if (token.kind() == SyntaxKind.FINAL_KEYWORD) {\n+                addFinalQualifier(token, simpleVar);\n             }\n         }\n \n-        if (isAnonServiceValue) {\n-            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-        } else {\n-            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-        }\n-\n-        // We add all service nodes to top level, only for future reference.\n-        addToTop(bLService);\n-\n-        // 1) Define type nodeDefinition for service type.\n-        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-        serviceTypeID.pos = pos;\n-        classDef.setName(serviceTypeID);\n-        classDef.flagSet.add(SERVICE);\n-\n-        if (!isAnonServiceValue) {\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-            bLService.markdownDocumentationAttachment =\n-                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-        } else {\n-            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-        }\n-\n-        classDef.pos = pos;\n-        addToTop(classDef);\n-        bLService.serviceClass = classDef;\n-\n-        // 2) Create service constructor.\n-        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-                .createServiceConstructorNode();\n-        serviceConstNode.serviceNode = bLService;\n-        serviceConstNode.pos = pos;\n-\n-        // Crate Global variable for service.\n-        bLService.pos = pos;\n-        if (!isAnonServiceValue) {\n-            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-                    Collections.emptySet(),\n-                    serviceName, identifierPos,\n-                    serviceConstNode);\n-            var.flagSet.add(Flag.FINAL);\n-            var.flagSet.add(SERVICE);\n-\n-            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-            bLUserDefinedType.typeName = classDef.name;\n-            bLUserDefinedType.pos = pos;\n-\n-            var.typeNode = bLUserDefinedType;\n-            bLService.variableNode = var;\n-            return var;\n-        } else {\n-            BLangServiceConstructorExpr serviceConstructorExpr =\n-                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-            serviceConstructorExpr.serviceNode = bLService;\n-            return serviceConstructorExpr;\n-        }\n+        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n+        return simpleVar;\n     }\n \n+//    @Override\n+//    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n+//        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n+//    }\n+\n+//    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n+//        // Any Service can be represented in two major components.\n+//        //  1) A anonymous type node (Object)\n+//        //  2) Variable assignment with \"serviceName\".\n+//        //      This is a global variable if the service is defined in module level.\n+//        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n+//        ServiceDeclarationNode serviceDeclrNode = null;\n+//        ServiceConstructorExpressionNode serviceConstructorNode;\n+//        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n+//        //TODO handle service.expression\n+//        // TODO: Look for generify this into sepearte method for type as well\n+//        bLService.isAnonymousServiceValue = isAnonServiceValue;\n+//\n+//        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n+//        if (serviceNode instanceof ServiceDeclarationNode) {\n+//            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n+//        }\n+//        String serviceName;\n+//        DiagnosticPos identifierPos;\n+//        if (isAnonServiceValue || serviceNameNode == null) {\n+//            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n+//            identifierPos = pos;\n+//        } else {\n+//            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n+//                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n+//            } else {\n+//                serviceName = serviceNameNode.text();\n+//            }\n+//            identifierPos = getPosition(serviceNameNode);\n+//        }\n+//\n+//        String serviceTypeName =\n+//                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n+//        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n+//        serviceVar.pos = identifierPos;\n+//        bLService.setName(serviceVar);\n+//        if (!isAnonServiceValue) {\n+//            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n+//            for (Node expr : serviceDeclrNode.expressions()) {\n+//                bLService.attachedExprs.add(createExpression(expr));\n+//            }\n+//        }\n+//\n+//        if (isAnonServiceValue) {\n+//            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n+//        } else {\n+//            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n+//        }\n+//\n+//        // We add all service nodes to top level, only for future reference.\n+//        addToTop(bLService);\n+//\n+//        // 1) Define type nodeDefinition for service type.\n+//        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n+//        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n+//        serviceTypeID.pos = pos;\n+//        classDef.setName(serviceTypeID);\n+//        classDef.flagSet.add(SERVICE);\n+//\n+//        if (!isAnonServiceValue) {\n+//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n+//            bLService.markdownDocumentationAttachment =\n+//                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n+//        } else {\n+//            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n+//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n+//            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n+//        }\n+//\n+//        classDef.pos = pos;\n+//        addToTop(classDef);\n+//        bLService.serviceClass = classDef;\n+//\n+//        // 2) Create service constructor.\n+//        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n+//                .createServiceConstructorNode();\n+//        serviceConstNode.serviceNode = bLService;\n+//        serviceConstNode.pos = pos;\n+//\n+//        // Crate Global variable for service.\n+//        bLService.pos = pos;\n+//        if (!isAnonServiceValue) {\n+//            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n+//                    Collections.emptySet(),\n+//                    serviceName, identifierPos,\n+//                    serviceConstNode);\n+//            var.flagSet.add(Flag.FINAL);\n+//            var.flagSet.add(SERVICE);\n+//\n+//            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n+//            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n+//            bLUserDefinedType.typeName = classDef.name;\n+//            bLUserDefinedType.pos = pos;\n+//\n+//            var.typeNode = bLUserDefinedType;\n+//            bLService.variableNode = var;\n+//            return var;\n+//        } else {\n+//            BLangServiceConstructorExpr serviceConstructorExpr =\n+//                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n+//            serviceConstructorExpr.serviceNode = bLService;\n+//            return serviceConstructorExpr;\n+//        }\n+//    }\n+\n     public void addServiceConstructsToClassDefinition(ServiceBodyNode serviceBodyNode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "originalPosition": 259}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzA2MjQw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#pullrequestreview-499306240", "createdAt": "2020-09-30T10:49:38Z", "commit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo0OTozOFrOHaX4vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo0OTozOFrOHaX4vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxNjM4Mg==", "bodyText": "Please check if all messages removed here are removed from *message.properties files", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497416382", "createdAt": "2020-09-30T10:49:38Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java", "diffHunk": "@@ -241,17 +241,12 @@\n     ERROR_ANNOTATIONS_ATTACHED_TO_EXPRESSION(\"BCE206\", \"error.annotations.attached.to.expression\"),\n     // Expression followed by the start keyword must be a func-call, a method-call or a remote-method-call\n     ERROR_INVALID_EXPRESSION_IN_START_ACTION(\"BCE207\", \"error.invalid.expression.in.start.action\"),\n-    // Cannot have the  same qualifier twice\n-    ERROR_DUPLICATE_OBJECT_TYPE_QUALIFIER(\"BCE208\", \"error.duplicate.object.type.qualifier\"),\n-    ERROR_DUPLICATE_CLASS_TYPE_QUALIFIER(\"BCE209\", \"error.duplicate.class.type.qualifier\"),\n-    ERROR_DUPLICATE_OBJECT_METHOD_QUALIFIER(\"BCE210\", \"error.duplicate.object.method.qualifier\"),\n-    ERROR_QUALIFIER_NOT_ALLOWED(\"BCE211\", \"error.qualifier.not.allowed\"),\n-    ERROR_ABSTRACT_QUALIFIER_NOT_ALLOWED_IN_OBJECT(\"BCE212\", \"error.abstract.qualifier.not.allowed.in.object\"),\n-    ERROR_READONLY_QUALIFIER_NOT_ALLOWED_IN_OBJECT(\"BCE213\", \"error.readonly.qualifier.not.allowed.in.object\"),\n+    // Cannot have the same qualifier twice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d7b34c7ace472bcba5121ecd482b489f90b9a39", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d7b34c7ace472bcba5121ecd482b489f90b9a39", "committedDate": "2020-09-30T14:12:53Z", "message": "Address few parsing issues\n\n* Merge ServiceBodyNode and ServiceDeclarationNode\n* Allow `service remote function` attach points instead of `resource function`\n* Disallow Client and Service qualifiers at the same time"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ac63299c75876877447fe3a08c1d0c8bb55615e", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ac63299c75876877447fe3a08c1d0c8bb55615e", "committedDate": "2020-09-30T14:13:23Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into parser-service-change"}, "afterCommit": {"oid": "4d7b34c7ace472bcba5121ecd482b489f90b9a39", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d7b34c7ace472bcba5121ecd482b489f90b9a39", "committedDate": "2020-09-30T14:12:53Z", "message": "Address few parsing issues\n\n* Merge ServiceBodyNode and ServiceDeclarationNode\n* Allow `service remote function` attach points instead of `resource function`\n* Disallow Client and Service qualifiers at the same time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3547591c05321129e9a4ee79867f597fdce9050", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3547591c05321129e9a4ee79867f597fdce9050", "committedDate": "2020-10-04T21:04:51Z", "message": "Complete swan lake service change error recovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb7fb051ed9ebcb9d5dae3472485d57ffe567339", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb7fb051ed9ebcb9d5dae3472485d57ffe567339", "committedDate": "2020-10-04T21:17:00Z", "message": "Merge branch 'service-typing' of https://github.com/ballerina-platform/ballerina-lang into parser-service-change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8400faca26e0210458b02fec62f2f36b1d81f202", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8400faca26e0210458b02fec62f2f36b1d81f202", "committedDate": "2020-10-05T08:06:18Z", "message": "Update service related recovery tests and refactor\n\n* update and enable disabled parser recovery tests\n* add new service decl, accessor def recovery tests\n* refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e6cb1eb475ab1c4941e8fd33a7f0570abd8c428", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e6cb1eb475ab1c4941e8fd33a7f0570abd8c428", "committedDate": "2020-10-05T08:17:38Z", "message": "Add small syntax tree change and update parser tests\n\n* Convert resource qualifier to a list in resource-accessor-def\n* update and enable disabled parser recovery tests\n* refactor code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b33ee737aca6e49d3f9df3116238c08fb90929fa", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b33ee737aca6e49d3f9df3116238c08fb90929fa", "committedDate": "2020-10-05T09:56:22Z", "message": "Merge master"}, "afterCommit": {"oid": "7e6cb1eb475ab1c4941e8fd33a7f0570abd8c428", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e6cb1eb475ab1c4941e8fd33a7f0570abd8c428", "committedDate": "2020-10-05T08:17:38Z", "message": "Add small syntax tree change and update parser tests\n\n* Convert resource qualifier to a list in resource-accessor-def\n* update and enable disabled parser recovery tests\n* refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd25a5b950da3dabe5c39646f0e857e12f1bb8ea", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd25a5b950da3dabe5c39646f0e857e12f1bb8ea", "committedDate": "2020-10-05T10:39:00Z", "message": "Merge branch 'service-typing' of https://github.com/ballerina-platform/ballerina-lang into parser-service-change\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/tree/STResourceAccessorDefinitionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/tree/STServiceBodyNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/tree/STServiceConstructorExpressionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/tree/STServiceRemoteAttachPointIdentifierNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/ResourceAccessorDefinitionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/ServiceBodyNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/ServiceConstructorExpressionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/ServiceRemoteAttachPointIdentifierNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STServiceConstructorExpressionNode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ServiceConstructorExpressionNode.java\n\u0001\tmisc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormattingTreeModifier.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fecd25fc5b0918e8749bb827d51b6338467563f1", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fecd25fc5b0918e8749bb827d51b6338467563f1", "committedDate": "2020-10-05T19:43:16Z", "message": "Enable service declaration recovery tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "163a4a7cacf8eeac9ae3644541d501260aa74f15", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/163a4a7cacf8eeac9ae3644541d501260aa74f15", "committedDate": "2020-10-06T13:34:15Z", "message": "Revamp qualifier validation in createFuncDefOrMethodDecl method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e937a3f7fa9b59eff1987be226fe7111cb858124", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e937a3f7fa9b59eff1987be226fe7111cb858124", "committedDate": "2020-10-05T19:26:16Z", "message": "Enable service declaration recovery tests"}, "afterCommit": {"oid": "15bd8ebed897ae12f67b696937e869cd3a3307dd", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15bd8ebed897ae12f67b696937e869cd3a3307dd", "committedDate": "2020-10-06T13:57:26Z", "message": "Cleanup code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "773a04ab1f2504e5266e6ba28d0410899bd3e40c", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/773a04ab1f2504e5266e6ba28d0410899bd3e40c", "committedDate": "2020-10-06T19:04:47Z", "message": "Cleanup code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15bd8ebed897ae12f67b696937e869cd3a3307dd", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15bd8ebed897ae12f67b696937e869cd3a3307dd", "committedDate": "2020-10-06T13:57:26Z", "message": "Cleanup code"}, "afterCommit": {"oid": "773a04ab1f2504e5266e6ba28d0410899bd3e40c", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/773a04ab1f2504e5266e6ba28d0410899bd3e40c", "committedDate": "2020-10-06T19:04:47Z", "message": "Cleanup code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8ebff03650f8b05ba3dad49a2c92716e365e50e", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8ebff03650f8b05ba3dad49a2c92716e365e50e", "committedDate": "2020-10-07T19:07:29Z", "message": "Add code review changes\n\n* rename updateObjectTypeDescWithServiceQualifier method\n* change function args order\n* convert attach point idents to a list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b557217303d0c2d5d7f8561a3476d44935d17232", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b557217303d0c2d5d7f8561a3476d44935d17232", "committedDate": "2020-10-07T19:19:14Z", "message": "Reuse FunctionDefinitionNode for resource-accessor-defn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecacbe89892b34c4f6b44934d290867f866fea74", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ecacbe89892b34c4f6b44934d290867f866fea74", "committedDate": "2020-10-07T19:24:12Z", "message": "Remove redundant cast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NDIwMDcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#pullrequestreview-504420072", "createdAt": "2020-10-08T04:26:37Z", "commit": {"oid": "ecacbe89892b34c4f6b44934d290867f866fea74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4466, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}