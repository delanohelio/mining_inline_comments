{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODA1MTk0", "number": 25354, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyMTowNlrOEadUMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDozOToxNlrOEad3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTc4NzM2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyMTowNlrOHD5zgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo1MDoxNlrOHD7L3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NDg1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new BallerinaTestException(\"Connection error is occurred when trying to fet information from the \" +\n          \n          \n            \n                        throw new BallerinaTestException(\"Connection error occurred when trying to get information from the \" +", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25354#discussion_r473854851", "createdAt": "2020-08-20T10:21:06Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "diffHunk": "@@ -403,6 +405,78 @@ protected void assertVariable(Variable variable, String variableName, String var\n         Assert.assertEquals(variable.getType(), variableType);\n     }\n \n+    /**\n+     * Can be used to assert any expression evaluation result.\n+     *\n+     * @param context     suspended context.\n+     * @param expression  expression.\n+     * @param resultValue result value.\n+     * @param resultType  result type.\n+     * @throws BallerinaTestException if an error occurs when evaluating the expression.\n+     */\n+    protected void assertExpression(StoppedEventArguments context, String expression, String resultValue,\n+                                    String resultType) throws BallerinaTestException {\n+        Variable result = evaluateExpression(context, expression);\n+        Assert.assertEquals(result.getValue(), resultValue);\n+        Assert.assertEquals(result.getType(), resultType);\n+    }\n+\n+    /**\n+     * Can be used to evaluate any given evaluation failure, against its expected error message.\n+     *\n+     * @param context    suspended context.\n+     * @param expression expression.\n+     * @throws BallerinaTestException if an error occurs when evaluating the expression.\n+     */\n+    protected void assertEvaluationError(StoppedEventArguments context, String expression, String errorMessage)\n+            throws BallerinaTestException {\n+        Variable result = evaluateExpression(context, expression);\n+        Assert.assertEquals(result.getValue(), errorMessage);\n+        Assert.assertEquals(result.getType(), \"string\");\n+    }\n+\n+    /**\n+     * Can be used to evaluate any given expression, when a debug hit is occurred.\n+     *\n+     * @param args debug stopped event arguments.\n+     * @return the evaluation result as a variable.\n+     * @throws BallerinaTestException if an error occurs when evaluating the expression.\n+     */\n+    private Variable evaluateExpression(StoppedEventArguments args, String expr) throws BallerinaTestException {\n+        if (!DebugHitListener.connector.isConnected()) {\n+            throw new BallerinaTestException(\"Connection error is occurred when trying to fet information from the \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d61c409a984f11112766ce4a1a1b695be36236"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3NzQ3MQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25354#discussion_r473877471", "createdAt": "2020-08-20T10:50:16Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "diffHunk": "@@ -403,6 +405,78 @@ protected void assertVariable(Variable variable, String variableName, String var\n         Assert.assertEquals(variable.getType(), variableType);\n     }\n \n+    /**\n+     * Can be used to assert any expression evaluation result.\n+     *\n+     * @param context     suspended context.\n+     * @param expression  expression.\n+     * @param resultValue result value.\n+     * @param resultType  result type.\n+     * @throws BallerinaTestException if an error occurs when evaluating the expression.\n+     */\n+    protected void assertExpression(StoppedEventArguments context, String expression, String resultValue,\n+                                    String resultType) throws BallerinaTestException {\n+        Variable result = evaluateExpression(context, expression);\n+        Assert.assertEquals(result.getValue(), resultValue);\n+        Assert.assertEquals(result.getType(), resultType);\n+    }\n+\n+    /**\n+     * Can be used to evaluate any given evaluation failure, against its expected error message.\n+     *\n+     * @param context    suspended context.\n+     * @param expression expression.\n+     * @throws BallerinaTestException if an error occurs when evaluating the expression.\n+     */\n+    protected void assertEvaluationError(StoppedEventArguments context, String expression, String errorMessage)\n+            throws BallerinaTestException {\n+        Variable result = evaluateExpression(context, expression);\n+        Assert.assertEquals(result.getValue(), errorMessage);\n+        Assert.assertEquals(result.getType(), \"string\");\n+    }\n+\n+    /**\n+     * Can be used to evaluate any given expression, when a debug hit is occurred.\n+     *\n+     * @param args debug stopped event arguments.\n+     * @return the evaluation result as a variable.\n+     * @throws BallerinaTestException if an error occurs when evaluating the expression.\n+     */\n+    private Variable evaluateExpression(StoppedEventArguments args, String expr) throws BallerinaTestException {\n+        if (!DebugHitListener.connector.isConnected()) {\n+            throw new BallerinaTestException(\"Connection error is occurred when trying to fet information from the \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NDg1MQ=="}, "originalCommit": {"oid": "f7d61c409a984f11112766ce4a1a1b695be36236"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTg3NzQyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/evaluation/ExpressionEvaluationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDozOToxNlrOHD6r8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo1MDowN1rOHD7Law==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg2OTI5OQ==", "bodyText": "Shall we change the above lines to use Paths.get since File.sperator is a pre-1.7 JDK way?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;\n          \n          \n            \n                    testProjectPath = Paths.get(testProjectBaseDir.toString(), testProjectName).toString();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25354#discussion_r473869299", "createdAt": "2020-08-20T10:39:16Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/evaluation/ExpressionEvaluationTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.adapter.evaluation;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.DebugAdapterBaseTestCase;\n+import org.ballerinalang.debugger.test.utils.BallerinaTestDebugPoint;\n+import org.ballerinalang.debugger.test.utils.DebugUtils;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test implementation for debug expression evaluation scenarios.\n+ */\n+public class ExpressionEvaluationTest extends DebugAdapterBaseTestCase {\n+\n+    private StoppedEventArguments context;\n+\n+    private static final String nilVar = \"v01_varVariable\";\n+    private static final String booleanVar = \"v02_booleanVar\";\n+    private static final String intVar = \"v03_intVar\";\n+    private static final String floatVar = \"v04_floatVar\";\n+    private static final String decimalVar = \"v05_decimalVar\";\n+    private static final String stringVar = \"v06_stringVar\";\n+    private static final String xmlVar = \"v07_xmlVar\";\n+    private static final String arrayVar = \"v08_arrayVar\";\n+    private static final String tupleVar = \"v09_tupleVar\";\n+    private static final String mapVar = \"v10_mapVar\";\n+    private static final String recordVar = \"v11_john\";\n+    private static final String anonRecordVar = \"v12_anonRecord\";\n+    private static final String errorVar = \"v13_errorVar\";\n+    private static final String anonFunctionVar = \"v14_anonFunctionVar\";\n+    private static final String futureVar = \"v15_futureVar\";\n+    private static final String objectVar = \"v16_objectVar\";\n+    private static final String anonObjectVar = \"v17_anonObjectVar\";\n+    private static final String typeDescVar = \"v18_typedescVar\";\n+    private static final String unionVar = \"v19_unionVar\";\n+    private static final String optionalVar = \"v20_optionalVar\";\n+    private static final String anyVar = \"v21_anyVar\";\n+    private static final String anydataVar = \"v22_anydataVar\";\n+    private static final String byteVar = \"v23_byteVar\";\n+    private static final String jsonVar = \"v24_jsonVar\";\n+    private static final String tableVar = \"v25_tableVar\";\n+    private static final String streamVar = \"v26_oddNumberStream\";\n+    private static final String neverVar = \"v27_neverVar\";\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        testProjectName = \"basic-project\";\n+        testModuleName = \"advanced\";\n+        testModuleFileName = \"main.bal\";\n+        testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d61c409a984f11112766ce4a1a1b695be36236"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3NzM1NQ==", "bodyText": "+1, Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25354#discussion_r473877355", "createdAt": "2020-08-20T10:50:07Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/evaluation/ExpressionEvaluationTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.adapter.evaluation;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.DebugAdapterBaseTestCase;\n+import org.ballerinalang.debugger.test.utils.BallerinaTestDebugPoint;\n+import org.ballerinalang.debugger.test.utils.DebugUtils;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test implementation for debug expression evaluation scenarios.\n+ */\n+public class ExpressionEvaluationTest extends DebugAdapterBaseTestCase {\n+\n+    private StoppedEventArguments context;\n+\n+    private static final String nilVar = \"v01_varVariable\";\n+    private static final String booleanVar = \"v02_booleanVar\";\n+    private static final String intVar = \"v03_intVar\";\n+    private static final String floatVar = \"v04_floatVar\";\n+    private static final String decimalVar = \"v05_decimalVar\";\n+    private static final String stringVar = \"v06_stringVar\";\n+    private static final String xmlVar = \"v07_xmlVar\";\n+    private static final String arrayVar = \"v08_arrayVar\";\n+    private static final String tupleVar = \"v09_tupleVar\";\n+    private static final String mapVar = \"v10_mapVar\";\n+    private static final String recordVar = \"v11_john\";\n+    private static final String anonRecordVar = \"v12_anonRecord\";\n+    private static final String errorVar = \"v13_errorVar\";\n+    private static final String anonFunctionVar = \"v14_anonFunctionVar\";\n+    private static final String futureVar = \"v15_futureVar\";\n+    private static final String objectVar = \"v16_objectVar\";\n+    private static final String anonObjectVar = \"v17_anonObjectVar\";\n+    private static final String typeDescVar = \"v18_typedescVar\";\n+    private static final String unionVar = \"v19_unionVar\";\n+    private static final String optionalVar = \"v20_optionalVar\";\n+    private static final String anyVar = \"v21_anyVar\";\n+    private static final String anydataVar = \"v22_anydataVar\";\n+    private static final String byteVar = \"v23_byteVar\";\n+    private static final String jsonVar = \"v24_jsonVar\";\n+    private static final String tableVar = \"v25_tableVar\";\n+    private static final String streamVar = \"v26_oddNumberStream\";\n+    private static final String neverVar = \"v27_neverVar\";\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        testProjectName = \"basic-project\";\n+        testModuleName = \"advanced\";\n+        testModuleFileName = \"main.bal\";\n+        testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg2OTI5OQ=="}, "originalCommit": {"oid": "f7d61c409a984f11112766ce4a1a1b695be36236"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 255, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}