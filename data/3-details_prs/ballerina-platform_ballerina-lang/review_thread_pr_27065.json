{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NDIxMjU5", "number": 27065, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo0Mjo1OFrOE8KNZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNzoyNVrOE8QgVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTE3Mjg2OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo0Mjo1OFrOH4H25w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo0Mjo1OFrOH4H25w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxMTA0Nw==", "bodyText": "lets use a switch-case here.\nAlso remove the else block, since we are returning within if/", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528611047", "createdAt": "2020-11-23T10:42:58Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -230,28 +237,50 @@ private STToken readStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.DOUBLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar == LexerTerminals.DOUBLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.DOUBLE_QUOTE_TOKEN);\n         } else {\n             while (!reader.isEOF()) {\n                 nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.DOUBLE_QUOTE) {\n+                if (nextChar == LexerTerminals.DOUBLE_QUOTE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTIyNTg1OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1NzozNlrOH4IW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1NzozNlrOH4IW5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTIzNw==", "bodyText": "remove else block", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528619237", "createdAt": "2020-11-23T10:57:36Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,28 +290,110 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n+//        char secondNextChar = this.reader.peek(1);\n+//        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n+//            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+//                reader.advance(3);\n+//                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+//            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n         } else {\n             while (!reader.isEOF()) {\n                 nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                }  else if (nextChar == LexerTerminals.CARRIAGE_RETURN) {\n+                    break;\n+                } else if (nextChar == LexerTerminals.NEWLINE) {\n+                    break;\n+                } else {\n                     reader.advance();\n-                    continue;\n                 }\n-                break;\n             }\n         }\n \n-        return getUnquotedKey();\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineLiteralStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.SINGLE_QUOTE && secondNextChar == LexerTerminals.SINGLE_QUOTE &&\n+                thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+        } else {\n+            while (!reader.isEOF()) {\n+                nextChar = this.reader.peek();\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                } else {\n+                    reader.advance();\n+                }\n+            }\n+        }\n+\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTIzMTEwOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1OTowNlrOH4IaGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1OTowNlrOH4IaGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMDA1Ng==", "bodyText": "remove else block. Invert the condition and break the loop early.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528620056", "createdAt": "2020-11-23T10:59:06Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,28 +290,110 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n+//        char secondNextChar = this.reader.peek(1);\n+//        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n+//            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+//                reader.advance(3);\n+//                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+//            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n         } else {\n             while (!reader.isEOF()) {\n                 nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                }  else if (nextChar == LexerTerminals.CARRIAGE_RETURN) {\n+                    break;\n+                } else if (nextChar == LexerTerminals.NEWLINE) {\n+                    break;\n+                } else {\n                     reader.advance();\n-                    continue;\n                 }\n-                break;\n             }\n         }\n \n-        return getUnquotedKey();\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineLiteralStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.SINGLE_QUOTE && secondNextChar == LexerTerminals.SINGLE_QUOTE &&\n+                thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+        } else {\n+            while (!reader.isEOF()) {\n+                nextChar = this.reader.peek();\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                } else {\n+                    reader.advance();\n+                }\n+            }\n+        }\n+\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        } else {\n+            while (!reader.isEOF()) {\n+                nextChar = this.reader.peek();\n+                if (nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE &&\n+                        this.reader.peek(2) == LexerTerminals.DOUBLE_QUOTE) {\n+                    break;\n+                } else if (nextChar == LexerTerminals.BACKSLASH) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTI0MTgwOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowMTo1OVrOH4Igcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowMTo1OVrOH4Igcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMTY4Mg==", "bodyText": "you reach here after peeking only 2 tokens. So this should advance only 2 tokens.\nComment in L#796 is also not correct.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528621682", "createdAt": "2020-11-23T11:01:59Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -672,4 +786,27 @@ private int peek() {\n     private String getLexeme() {\n         return reader.getMarkedChars();\n     }\n+\n+    /**\n+     * Process string numeric escape.\n+     * <p>\n+     * <code>StringNumericEscape := \\u00E9 </code>\n+     */\n+    private void processStringNumericEscape() {\n+        // Process '\\ u {'\n+        this.reader.advance(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTI1MjAzOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowNDo1NVrOH4Im0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowNDo1NVrOH4Im0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzMxMg==", "bodyText": "Why do we need a flag here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528623312", "createdAt": "2020-11-23T11:04:55Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -297,10 +408,13 @@ private STToken getSyntaxToken(SyntaxKind kind) {\n         return STNodeFactory.createToken(kind, leadingTrivia, trailingTrivia);\n     }\n \n-    private STToken getUnquotedKey() {\n+    private STToken getUnquotedKey(boolean skipTrailingTrivia) {\n         STNode leadingTrivia = getLeadingTrivia();\n         String lexeme = getLexeme();\n-        STNode trailingTrivia = processTrailingTrivia();\n+        STNode trailingTrivia = STNodeFactory.createEmptyNodeList();\n+        if (!skipTrailingTrivia) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjE5Mjk2OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNTowNFrOH4Rekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNTowNFrOH4Rekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODY1OQ==", "bodyText": "keep a newline after a block", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528768659", "createdAt": "2020-11-23T15:05:04Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -230,27 +234,47 @@ private STToken readStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.DOUBLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar == LexerTerminals.DOUBLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.DOUBLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.DOUBLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjE5Mzg3OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNToxNlrOH4RfLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNToxNlrOH4RfLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODgxMw==", "bodyText": "same here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528768813", "createdAt": "2020-11-23T15:05:16Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjE5NDgwOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNToyNlrOH4Rfug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNToyNlrOH4Rfug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODk1NA==", "bodyText": "same for all places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528768954", "createdAt": "2020-11-23T15:05:26Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break;\n+                default:\n                     reader.advance();\n                     continue;\n-                }\n-                break;\n             }\n+            break;\n+        }\n+        return getUnquotedKey();\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n         }\n \n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        }\n+        while (!reader.isEOF()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjE5NTgxOnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNTozOFrOH4RgSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNTozOFrOH4RgSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2OTA5Ng==", "bodyText": "since nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(2) == LexerTerminals.DOUBLE_QUOTE is used at L#318 as well, we can take it to a common method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528769096", "createdAt": "2020-11-23T15:05:38Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break;\n+                default:\n                     reader.advance();\n                     continue;\n-                }\n-                break;\n             }\n+            break;\n+        }\n+        return getUnquotedKey();\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n         }\n \n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            if (nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjIwNDM2OnYy", "diffSide": "RIGHT", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNzoyNVrOH4Rlhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNzoyNVrOH4Rlhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3MDQzOA==", "bodyText": "Would be clean to extract this to a separate method like readStringEscapeSequence", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528770438", "createdAt": "2020-11-23T15:07:25Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break;\n+                default:\n                     reader.advance();\n                     continue;\n-                }\n-                break;\n             }\n+            break;\n+        }\n+        return getUnquotedKey();\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n         }\n \n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            if (nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE &&\n+                    this.reader.peek(2) == LexerTerminals.DOUBLE_QUOTE) {\n+                break;\n+            }\n+            if (nextChar != LexerTerminals.BACKSLASH) {\n+                reader.advance();\n+                continue;\n+            }\n+            switch (this.reader.peek(1)) {\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    reader.advance();\n+                    continue;\n+                case 'n':\n+                case 't':\n+                case 'r':\n+                case LexerTerminals.BACKSLASH:\n+                case LexerTerminals.DOUBLE_QUOTE:\n+                    this.reader.advance(2);\n+                    continue;\n+                case 'u':\n+                case 'U':\n+                    processStringNumericEscape();\n+                    continue;\n+                default:\n+                    String escapeSequence = String.valueOf(this.reader.peek(2));\n+                    reportLexerError(DiagnosticErrorCode.ERROR_INVALID_ESCAPE_SEQUENCE, escapeSequence);\n+                    this.reader.advance();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3050, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}