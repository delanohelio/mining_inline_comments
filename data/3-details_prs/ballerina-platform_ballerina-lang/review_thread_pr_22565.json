{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNzg2NTg5", "number": 22565, "reviewThreads": {"totalCount": 90, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0MTo0N1rODws2hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMToxNFrODyGWiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzkzMDk0OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0MTo0N1rOGD2IlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0MTo0N1rOGD2IlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NTg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the [\n          \n          \n            \n            Secured Service with Basic Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-service-with-basic-auth.html), and [\n          \n          \n            \n            Secured Client with Basic Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-client-with-basic-auth.html).\n          \n          \n            \n            For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the [Secured Service with Basic Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-service-with-basic-auth.html), and [Secured Client with Basic Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-client-with-basic-auth.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406685844", "createdAt": "2020-04-10T09:41:47Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "diffHunk": "@@ -44,3 +42,7 @@ auth:OutboundBasicAuthProvider basicAuthProvider = new({\n     password: \"123\"\n });\n ```\n+\n+For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the [\n+Secured Service with Basic Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-service-with-basic-auth.html), and [\n+Secured Client with Basic Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-client-with-basic-auth.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzkzMjEzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0MjoyMFrOGD2JPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0MjoyMFrOGD2JPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NjAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if authentication is successful, else `false` or else an `Error` in case of an error\n          \n          \n            \n                # + return - `true` if authentication is successful, else `false` or else an `auth:Error` in case of an error", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406686015", "createdAt": "2020-04-10T09:42:20Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "diffHunk": "@@ -18,9 +18,9 @@\n # should be object-wise similar.\n public type InboundAuthProvider abstract object {\n \n-    # Authenticate with credential value passed.\n+    # Authenticate with the credential value passed as a `string`.\n     #\n     # + credential - Credential value\n-    # + return - True if authentication is a success, else false or `Error` if any error occurred\n+    # + return - `true` if authentication is successful, else `false` or else an `Error` in case of an error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzkzNDA5OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0MzowOFrOGD2KbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0MzowOFrOGD2KbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NjMxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if authentication is successful, otherwise `false` or else an `Error` if any error occurred\n          \n          \n            \n            # + return - `true` if authentication is successful, otherwise `false` or else an `auth:Error` if any error occurred", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406686317", "createdAt": "2020-04-10T09:43:08Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate with the given credentials.\n+# ```ballerina\n+# boolean|auth:Error authenticationResult = inboundBasicAuthProvider.authenticate(\"<credential>\");\n+# ```\n+#\n+# + credential - Credential\n+# + return - `true` if authentication is successful, otherwise `false` or else an `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzkzNzQxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0NDozNVrOGD2MXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0NDozNVrOGD2MXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NjgxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #             while extracting credentials\n          \n          \n            \n            #             while authenticating credentials", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406686814", "createdAt": "2020-04-10T09:44:35Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate with the given credentials.\n+# ```ballerina\n+# boolean|auth:Error authenticationResult = inboundBasicAuthProvider.authenticate(\"<credential>\");\n+# ```\n+#\n+# + credential - Credential\n+# + return - `true` if authentication is successful, otherwise `false` or else an `Error` if any error occurred\n+#             while extracting credentials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk0MzkyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0Nzo0MVrOGD2QPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0Nzo0MVrOGD2QPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NzgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The token as a `string` or else an `Error` if occurred when generating the token\n          \n          \n            \n                # + return - The token as a `string` or else an `auth:Error` if occurred when generating the token", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406687804", "createdAt": "2020-04-10T09:47:41Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "diffHunk": "@@ -20,12 +20,13 @@ public type OutboundAuthProvider abstract object {\n \n     # Generates a token for the outbound request.\n     #\n-    # + return - The String token or the `Error` occurred when generating the token.\n+    # + return - The token as a `string` or else an `Error` if occurred when generating the token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk0NDUxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0Nzo1NVrOGD2QlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0Nzo1NVrOGD2QlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4Nzg5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The token as a `string` or an `Error` if occurred when generating the token,\n          \n          \n            \n                # + return - The token as a `string` or an `auth:Error` if occurred when generating the token,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406687892", "createdAt": "2020-04-10T09:47:55Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "diffHunk": "@@ -20,12 +20,13 @@ public type OutboundAuthProvider abstract object {\n \n     # Generates a token for the outbound request.\n     #\n-    # + return - The String token or the `Error` occurred when generating the token.\n+    # + return - The token as a `string` or else an `Error` if occurred when generating the token\n     public function generateToken() returns string|Error;\n \n     # Inspects the incoming data and generates the token as needed.\n     #\n-    # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + data - Map of data which is extracted from the HTTP response\n+    # + return - The token as a `string` or an `Error` if occurred when generating the token,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk0NjA2OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0ODozOFrOGD2RgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0ODozOFrOGD2RgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4ODEyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + credential - Credential configurations\n          \n          \n            \n            # + credential - `auth:Credential` configurations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406688128", "createdAt": "2020-04-10T09:48:38Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -19,23 +19,26 @@ import ballerina/runtime;\n \n # Represents the outbound Basic Auth authenticator.\n #\n-# + credential - The credential configurations.\n+# + credential - Credential configurations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk0NzU4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0OTowOFrOGD2SVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0OTowOFrOGD2SVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4ODM0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated token or else an `Error` if occurred during the validation\n          \n          \n            \n            # + return - The generated token or else an `auth:Error` if occurred during the validation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406688340", "createdAt": "2020-04-10T09:49:08Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -19,23 +19,26 @@ import ballerina/runtime;\n \n # Represents the outbound Basic Auth authenticator.\n #\n-# + credential - The credential configurations.\n+# + credential - Credential configurations\n public type OutboundBasicAuthProvider object {\n \n     *OutboundAuthProvider;\n \n     public Credential? credential;\n \n-    # Provides authentication based on the provided Basic Auth configuration.\n+    # Provides authentication based on the provided Basic Auth configurations.\n     #\n-    # + credential - The credential configurations.\n+    # + credential - Credential configurations\n     public function __init(Credential? credential = ()) {\n         self.credential = credential;\n     }\n \n-    # Generates a token for Basic authentication.\n-    #\n-    # + return - The generated token or the `Error` if an error occurred during validation.\n+# Generates a token for Basic authentication.\n+# ```ballerina\n+# string|auth:Error token = outboundBasicAuthProvider.generateToken();\n+# ```\n+#\n+# + return - The generated token or else an `Error` if occurred during the validation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk1NjAzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1MzoxMFrOGD2Xkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1MzoxMFrOGD2Xkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4OTY4Mw==", "bodyText": "This was done intentionally because when we print the error logs after this change, it will print with new line character. So, shall we revert this change? This need to be properly fixed in log-api.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return prepareError(\"Failed to generate basic auth token since credential config is not defined and auth \" +\n          \n          \n            \n                                        \"token is not defined in the authentication context at invocation context.\");\n          \n          \n            \n                        return prepareError(\"Failed to generate basic auth token since credential config is not defined and auth token is not defined in the authentication context at invocation context.\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406689683", "createdAt": "2020-04-10T09:53:10Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -46,7 +49,8 @@ public type OutboundBasicAuthProvider object {\n                     return authToken;\n                 }\n             }\n-            return prepareError(\"Failed to generate basic auth token since credential config is not defined and auth token is not defined in the authentication context at invocation context.\");\n+            return prepareError(\"Failed to generate basic auth token since credential config is not defined and auth \" +\n+                            \"token is not defined in the authentication context at invocation context.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk1Njg4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1MzozNVrOGD2YFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxODozNVrOGD23JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4OTgxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The token as a `string`, or an `Error` if occurred when generating the token, or `()`\n          \n          \n            \n                # + return - The token as a `string`, or an `auth:Error` if occurred when generating the token, or `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406689813", "createdAt": "2020-04-10T09:53:35Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -55,25 +59,26 @@ public type OutboundBasicAuthProvider object {\n     # Inspects the incoming data and generates the token for Basic authentication.\n     #\n     # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + return - The token as a `string`, or an `Error` if occurred when generating the token, or `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5Nzc2NA==", "bodyText": "Wrong return statement format. Please refer the template.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406697764", "createdAt": "2020-04-10T10:18:35Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -55,25 +59,26 @@ public type OutboundBasicAuthProvider object {\n     # Inspects the incoming data and generates the token for Basic authentication.\n     #\n     # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + return - The token as a `string`, or an `Error` if occurred when generating the token, or `()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4OTgxMw=="}, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk1OTI3OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1NDozNlrOGD2ZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1NDozNlrOGD2ZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MDE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + credential - Credential configurations\n          \n          \n            \n            # + credential - `auth:Credential` configurations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406690169", "createdAt": "2020-04-10T09:54:36Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -55,25 +59,26 @@ public type OutboundBasicAuthProvider object {\n     # Inspects the incoming data and generates the token for Basic authentication.\n     #\n     # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + return - The token as a `string`, or an `Error` if occurred when generating the token, or `()`\n+    #            if nothing is to be returned\n     public function inspect(map<anydata> data) returns string|Error? {\n         return ();\n     }\n };\n \n-# The `Credential` record can be used to configure Basic Authentication, which is used by the HTTP endpoint.\n+# Represents Basic Authentication configurations, which is used by the HTTP endpoint.\n #\n-# + username - The username for Basic authentication.\n-# + password - The password for Basic authentication.\n+# + username - Username for Basic authentication\n+# + password - Password for Basic authentication\n public type Credential record {|\n     string username;\n     string password;\n |};\n \n # Processes the auth token for Basic Auth.\n #\n-# + credential - The credential configurations.\n-# + return - The auth token or the `Error` if an error occurred during validation.\n+# + credential - Credential configurations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk1OTk3OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1NDo1MFrOGD2Z2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1NDo1MFrOGD2Z2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MDI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The auth token or else an `Error` if occurred during the validation\n          \n          \n            \n            # + return - The auth token or else an `auth:Error` if occurred during the validation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406690266", "createdAt": "2020-04-10T09:54:50Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -55,25 +59,26 @@ public type OutboundBasicAuthProvider object {\n     # Inspects the incoming data and generates the token for Basic authentication.\n     #\n     # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + return - The token as a `string`, or an `Error` if occurred when generating the token, or `()`\n+    #            if nothing is to be returned\n     public function inspect(map<anydata> data) returns string|Error? {\n         return ();\n     }\n };\n \n-# The `Credential` record can be used to configure Basic Authentication, which is used by the HTTP endpoint.\n+# Represents Basic Authentication configurations, which is used by the HTTP endpoint.\n #\n-# + username - The username for Basic authentication.\n-# + password - The password for Basic authentication.\n+# + username - Username for Basic authentication\n+# + password - Password for Basic authentication\n public type Credential record {|\n     string username;\n     string password;\n |};\n \n # Processes the auth token for Basic Auth.\n #\n-# + credential - The credential configurations.\n-# + return - The auth token or the `Error` if an error occurred during validation.\n+# + credential - Credential configurations\n+# + return - The auth token or else an `Error` if occurred during the validation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk2MjM0OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1NjoxMVrOGD2baQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOTowNVrOGD23ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MDY2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Extracts the username and the password from the credential values.\n          \n          \n            \n            # Extracts the username and the password from the base64 encoded `username:password` value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406690665", "createdAt": "2020-04-10T09:56:11Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -42,13 +42,17 @@ public const string AUTH_SCHEME_BASIC = \"Basic \";\n # Prefix used to denote Bearer Authentication scheme.\n public const string AUTH_SCHEME_BEARER = \"Bearer \";\n \n-# The table name of the config user section of the TOML file.\n+# The table name specified in the user section of the TOML configuration.\n const string CONFIG_USER_SECTION = \"b7a.users\";\n \n-# Extracts the username and password from the credential values.\n+# Extracts the username and the password from the credential values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NzkyMw==", "bodyText": "Extracts the username and the password from the base64-encoded username:password value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406697923", "createdAt": "2020-04-10T10:19:05Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -42,13 +42,17 @@ public const string AUTH_SCHEME_BASIC = \"Basic \";\n # Prefix used to denote Bearer Authentication scheme.\n public const string AUTH_SCHEME_BEARER = \"Bearer \";\n \n-# The table name of the config user section of the TOML file.\n+# The table name specified in the user section of the TOML configuration.\n const string CONFIG_USER_SECTION = \"b7a.users\";\n \n-# Extracts the username and password from the credential values.\n+# Extracts the username and the password from the credential values.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MDY2NQ=="}, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk2MzAxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1NjoyOVrOGD2b0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOToxOVrOGD24HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MDc2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + credential - Credential value\n          \n          \n            \n            # + credential - Base64 encoded `username:password` value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406690768", "createdAt": "2020-04-10T09:56:29Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -42,13 +42,17 @@ public const string AUTH_SCHEME_BASIC = \"Basic \";\n # Prefix used to denote Bearer Authentication scheme.\n public const string AUTH_SCHEME_BEARER = \"Bearer \";\n \n-# The table name of the config user section of the TOML file.\n+# The table name specified in the user section of the TOML configuration.\n const string CONFIG_USER_SECTION = \"b7a.users\";\n \n-# Extracts the username and password from the credential values.\n+# Extracts the username and the password from the credential values.\n+# ```ballerina\n+# [string, string]|auth:Error [username, password] = auth:extractUsernameAndPassword(\"<credential>\");\n+# ```\n #\n-# + credential - The credential values.\n-# + return - A `string` tuple with the extracted username and password or `Error` occurred while extracting credentials\n+# + credential - Credential value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODAxMg==", "bodyText": "+ credential - Base64-encoded username:password value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406698012", "createdAt": "2020-04-10T10:19:19Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -42,13 +42,17 @@ public const string AUTH_SCHEME_BASIC = \"Basic \";\n # Prefix used to denote Bearer Authentication scheme.\n public const string AUTH_SCHEME_BEARER = \"Bearer \";\n \n-# The table name of the config user section of the TOML file.\n+# The table name specified in the user section of the TOML configuration.\n const string CONFIG_USER_SECTION = \"b7a.users\";\n \n-# Extracts the username and password from the credential values.\n+# Extracts the username and the password from the credential values.\n+# ```ballerina\n+# [string, string]|auth:Error [username, password] = auth:extractUsernameAndPassword(\"<credential>\");\n+# ```\n #\n-# + credential - The credential values.\n-# + return - A `string` tuple with the extracted username and password or `Error` occurred while extracting credentials\n+# + credential - Credential value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MDc2OA=="}, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk2Mzk1OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1Njo1NlrOGD2caw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1Njo1NlrOGD2caw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MDkyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `string` tuple with the extracted username and password or else an `Error` if occurred while extracting\n          \n          \n            \n            # + return - A `string` tuple with the extracted username and password or else an `auth:Error` if occurred while extracting", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406690923", "createdAt": "2020-04-10T09:56:56Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -42,13 +42,17 @@ public const string AUTH_SCHEME_BASIC = \"Basic \";\n # Prefix used to denote Bearer Authentication scheme.\n public const string AUTH_SCHEME_BEARER = \"Bearer \";\n \n-# The table name of the config user section of the TOML file.\n+# The table name specified in the user section of the TOML configuration.\n const string CONFIG_USER_SECTION = \"b7a.users\";\n \n-# Extracts the username and password from the credential values.\n+# Extracts the username and the password from the credential values.\n+# ```ballerina\n+# [string, string]|auth:Error [username, password] = auth:extractUsernameAndPassword(\"<credential>\");\n+# ```\n #\n-# + credential - The credential values.\n-# + return - A `string` tuple with the extracted username and password or `Error` occurred while extracting credentials\n+# + credential - Credential value\n+# + return - A `string` tuple with the extracted username and password or else an `Error` if occurred while extracting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk2OTkxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1OToxOVrOGD2f1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1OToxOVrOGD2f1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MTc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + positiveAuthzCache - Cache for positive authorizations\n          \n          \n            \n            # + positiveAuthzCache - `cache:Cache` for positive authorizations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406691798", "createdAt": "2020-04-10T09:59:19Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -103,14 +110,14 @@ public function setPrincipal(public string? userId = (), public string? username\n     }\n }\n \n-# Check whether the scopes of the user and scopes of resource matches.\n+# Check whether the scopes of the user matches the scopes of the resource.\n #\n-# + resourceScopes - Scopes of resource\n-# + userScopes - Scopes of user\n+# + resourceScopes - Scopes of the resource\n+# + userScopes - Scopes of the user\n # + authzCacheKey - Authorization cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n-# + return - true if there is a match between resource and user scopes, else false\n+# + positiveAuthzCache - Cache for positive authorizations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk3MDMyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1OTozM1rOGD2gDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo1OTozM1rOGD2gDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MTg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + negativeAuthzCache - Cache for negative authorizations\n          \n          \n            \n            # + negativeAuthzCache - `cache:Cache` for negative authorizations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406691854", "createdAt": "2020-04-10T09:59:33Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -103,14 +110,14 @@ public function setPrincipal(public string? userId = (), public string? username\n     }\n }\n \n-# Check whether the scopes of the user and scopes of resource matches.\n+# Check whether the scopes of the user matches the scopes of the resource.\n #\n-# + resourceScopes - Scopes of resource\n-# + userScopes - Scopes of user\n+# + resourceScopes - Scopes of the resource\n+# + userScopes - Scopes of the user\n # + authzCacheKey - Authorization cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n-# + return - true if there is a match between resource and user scopes, else false\n+# + positiveAuthzCache - Cache for positive authorizations\n+# + negativeAuthzCache - Cache for negative authorizations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk3MTgwOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowMDoxMlrOGD2g6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowMDoxMlrOGD2g6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MjA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + positiveAuthzCache - Cache for positive authorizations\n          \n          \n            \n            # + positiveAuthzCache - `cache:Cache` for positive authorizations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406692073", "createdAt": "2020-04-10T10:00:12Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -158,12 +165,12 @@ function authorizeFromCache(string authzCacheKey, cache:Cache? positiveAuthzCach\n     return ();\n }\n \n-# Cached the authorization result.\n+# Caches the authorization result.\n #\n-# + authorized - boolean flag to indicate the authorization decision\n+# + authorized - `boolean` flag to indicate the authorization decision\n # + authzCacheKey - Cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n+# + positiveAuthzCache - Cache for positive authorizations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk3MjA5OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowMDoyM1rOGD2hGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowMDoyM1rOGD2hGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5MjEyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + negativeAuthzCache - Cache for negative authorizations\n          \n          \n            \n            # + negativeAuthzCache - `cache:Cache` for negative authorizations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406692122", "createdAt": "2020-04-10T10:00:23Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -158,12 +165,12 @@ function authorizeFromCache(string authzCacheKey, cache:Cache? positiveAuthzCach\n     return ();\n }\n \n-# Cached the authorization result.\n+# Caches the authorization result.\n #\n-# + authorized - boolean flag to indicate the authorization decision\n+# + authorized - `boolean` flag to indicate the authorization decision\n # + authzCacheKey - Cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n+# + positiveAuthzCache - Cache for positive authorizations\n+# + negativeAuthzCache - Cache for negative authorizations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk4NjMyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowNzowOVrOGD2pbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowNzowOVrOGD2pbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NDI1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + credential - Credential value\n          \n          \n            \n                # + credential - `string` credential value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406694253", "createdAt": "2020-04-10T10:07:09Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "diffHunk": "@@ -18,9 +18,9 @@\n # should be object-wise similar.\n public type InboundAuthProvider abstract object {\n \n-    # Authenticate with credential value passed.\n+    # Authenticate with the credential value passed as a `string`.\n     #\n     # + credential - Credential value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk4ODQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowODoxOVrOGD2qpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNToyMlrOGD2zSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NDU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Attempts to authenticate with the given credentials.\n          \n          \n            \n            # Attempts to authenticate base64 encoded `username:password` credential.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406694565", "createdAt": "2020-04-10T10:08:19Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate with the given credentials.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5Njc3OA==", "bodyText": "Attempts to authenticate base64-encoded username:password credentials.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406696778", "createdAt": "2020-04-10T10:15:22Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate with the given credentials.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NDU2NQ=="}, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk5MDkyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowOToxM1rOGD2sAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNDoyMFrOGD2yGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NDkxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + credential - Credential\n          \n          \n            \n            # + credential - Base64 encode `username:password` value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406694915", "createdAt": "2020-04-10T10:09:13Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate with the given credentials.\n+# ```ballerina\n+# boolean|auth:Error authenticationResult = inboundBasicAuthProvider.authenticate(\"<credential>\");\n+# ```\n+#\n+# + credential - Credential", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NjQ3Mw==", "bodyText": "Base64-encoded username:password value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406696473", "createdAt": "2020-04-10T10:14:20Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate with the given credentials.\n+# ```ballerina\n+# boolean|auth:Error authenticationResult = inboundBasicAuthProvider.authenticate(\"<credential>\");\n+# ```\n+#\n+# + credential - Credential", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NDkxNQ=="}, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk5NjAxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxMjowMlrOGD2vHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxMjowMlrOGD2vHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NTcwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Secured Service with Basic Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-service-with-basic-auth.html), and [\n          \n          \n            \n            Secured Service with Basic Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-service-with-basic-auth.html) and [", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406695709", "createdAt": "2020-04-10T10:12:02Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "diffHunk": "@@ -44,3 +42,7 @@ auth:OutboundBasicAuthProvider basicAuthProvider = new({\n     password: \"123\"\n });\n ```\n+\n+For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the [\n+Secured Service with Basic Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-service-with-basic-auth.html), and [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk5OTAxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxMzoyNVrOGD2w4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxMzoyNVrOGD2w4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NjE2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if authentication is successful, else `false` or else an `Error` in case of an error\n          \n          \n            \n                # + return - `true` if authentication is successful, otherwise fails, or else an `Error` in case of an error\n          \n      \n    \n    \n  \n\nBetter to specify the type of the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406696163", "createdAt": "2020-04-10T10:13:25Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "diffHunk": "@@ -18,9 +18,9 @@\n # should be object-wise similar.\n public type InboundAuthProvider abstract object {\n \n-    # Authenticate with credential value passed.\n+    # Authenticate with the credential value passed as a `string`.\n     #\n     # + credential - Credential value\n-    # + return - True if authentication is a success, else false or `Error` if any error occurred\n+    # + return - `true` if authentication is successful, else `false` or else an `Error` in case of an error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAwMjI2OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNDo1NlrOGD2ywg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNDo1NlrOGD2ywg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NjY0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if authentication is successful, otherwise `false` or else an `Error` if any error occurred\n          \n          \n            \n            # + return - `true` if authentication is successful, otherwise `false`, or else an `Error` if any error occurred", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406696642", "createdAt": "2020-04-10T10:14:56Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate with the given credentials.\n+# ```ballerina\n+# boolean|auth:Error authenticationResult = inboundBasicAuthProvider.authenticate(\"<credential>\");\n+# ```\n+#\n+# + credential - Credential\n+# + return - `true` if authentication is successful, otherwise `false` or else an `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAwNTE2OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNjoyN1rOGD20XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNjoyN1rOGD20XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NzA1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // First, read the user ID from user->id mapping\n          \n          \n            \n                // First, read the user ID from user->id mapping.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406697053", "createdAt": "2020-04-10T10:16:27Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,12 +108,12 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n+# + username - Username of the user\n # + return - Password hash read from userstore, or nil if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n+    // First, read the user ID from user->id mapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAwNTY4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNjo0MlrOGD20pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNjo0MlrOGD20pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NzEyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // read the hashed password from the user-store file, using the user id\n          \n          \n            \n                // Then, read the hashed password from the user-store file using the user ID.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406697127", "createdAt": "2020-04-10T10:16:42Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,12 +108,12 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n+# + username - Username of the user\n # + return - Password hash read from userstore, or nil if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n+    // First, read the user ID from user->id mapping\n     // read the hashed password from the user-store file, using the user id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAwNjA5OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNjo1NFrOGD204w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNjo1NFrOGD204w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NzE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constructs an array of groups from the given comma separed string of groups.\n          \n          \n            \n            # Constructs an array of groups from the given comma-separated string of groups.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406697187", "createdAt": "2020-04-10T10:16:54Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -118,10 +122,10 @@ function getConfigAuthValue(string instanceId, string property) returns string {\n     return config:getAsString(instanceId + \".\" + property, \"\");\n }\n \n-# Construct an array of groups from the comma separed group string passed.\n+# Constructs an array of groups from the given comma separed string of groups.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAwNzA1OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNzoyMlrOGD21aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxNzoyMlrOGD21aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NzMyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An array of groups, nil if the groups string is empty/nil\n          \n          \n            \n            # + return - An array of groups or else nil if the groups string is empty/nil\n          \n      \n    \n    \n  \n\n@daneshk - Should nil be replaced with \"()\"?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406697321", "createdAt": "2020-04-10T10:17:22Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -118,10 +122,10 @@ function getConfigAuthValue(string instanceId, string property) returns string {\n     return config:getAsString(instanceId + \".\" + property, \"\");\n }\n \n-# Construct an array of groups from the comma separed group string passed.\n+# Constructs an array of groups from the given comma separed string of groups.\n #\n # + groupString - Comma separated string of groups\n-# + return - Array of groups, nil if the groups string is empty/nil\n+# + return - An array of groups, nil if the groups string is empty/nil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxMjExOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOTozNlrOGD24Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOTozNlrOGD24Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODA3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Sets the authentication related values (scheme, auth token) to the authentication context of the invocation context.\n          \n          \n            \n            # Sets the authentication-related values (scheme, auth token) to the authentication context of the invocation context.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406698078", "createdAt": "2020-04-10T10:19:36Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -68,9 +72,12 @@ public function extractUsernameAndPassword(string credential) returns [string, s\n     }\n }\n \n-# Set the authentication related values (scheme, auth token) to the authentication context of the invocation context.\n+# Sets the authentication related values (scheme, auth token) to the authentication context of the invocation context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxMjM1OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOTo0NFrOGD24hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOTo0NFrOGD24hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODExOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + scheme - Auth scheme (`JWT`, `LDAP`, `OAuth2`, `Basic` etc.)\n          \n          \n            \n            # + scheme - Auth scheme (`JWT`, `LDAP`, `OAuth2`, `Basic`, etc.)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406698118", "createdAt": "2020-04-10T10:19:44Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -68,9 +72,12 @@ public function extractUsernameAndPassword(string credential) returns [string, s\n     }\n }\n \n-# Set the authentication related values (scheme, auth token) to the authentication context of the invocation context.\n+# Sets the authentication related values (scheme, auth token) to the authentication context of the invocation context.\n+# ```ballerina\n+# auth:setAuthenticationContext(\"jwt\", \"<credential>\");\n+# ```\n #\n-# + scheme - Auth scheme (JWT, LDAP, OAuth2, Basic etc.)\n+# + scheme - Auth scheme (`JWT`, `LDAP`, `OAuth2`, `Basic` etc.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxMjgzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOTo1NVrOGD24wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOTo1NVrOGD24wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODE3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Sets the authentication related values (user id, username, scopes, claims) to the principal of the invocation context.\n          \n          \n            \n            # Sets the authentication-related values (user ID, username, scopes, claims) to the principal of the invocation context.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406698176", "createdAt": "2020-04-10T10:19:55Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -80,12 +87,12 @@ public function setAuthenticationContext(string scheme, string authToken) {\n     };\n }\n \n-# Set the authentication related values (user id, username, scopes, claims) to the principal of the invocation context.\n+# Sets the authentication related values (user id, username, scopes, claims) to the principal of the invocation context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxMzIwOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMDowN1rOGD24-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMDowN1rOGD24-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODIzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Check whether the scopes of the user matches the scopes of the resource.\n          \n          \n            \n            # Checks whether the scopes of the user matches the scopes of the resource.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406698232", "createdAt": "2020-04-10T10:20:07Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -103,14 +110,14 @@ public function setPrincipal(public string? userId = (), public string? username\n     }\n }\n \n-# Check whether the scopes of the user and scopes of resource matches.\n+# Check whether the scopes of the user matches the scopes of the resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxNDIxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMDozMVrOGD25iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMDozMVrOGD25iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODM3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if there is a match between resource and user scopes, else `false`\n          \n          \n            \n            # + return - `true` if there is a match between resource and user scopes, else `false`\n          \n      \n    \n    \n  \n\nWrong format. Please refer the template.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406698376", "createdAt": "2020-04-10T10:20:31Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -103,14 +110,14 @@ public function setPrincipal(public string? userId = (), public string? username\n     }\n }\n \n-# Check whether the scopes of the user and scopes of resource matches.\n+# Check whether the scopes of the user matches the scopes of the resource.\n #\n-# + resourceScopes - Scopes of resource\n-# + userScopes - Scopes of user\n+# + resourceScopes - Scopes of the resource\n+# + userScopes - Scopes of the user\n # + authzCacheKey - Authorization cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n-# + return - true if there is a match between resource and user scopes, else false\n+# + positiveAuthzCache - Cache for positive authorizations\n+# + negativeAuthzCache - Cache for negative authorizations\n+# + return - `true` if there is a match between resource and user scopes, else `false`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxNDc4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMDo0N1rOGD253w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMDo0N1rOGD253w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` or `false` in case of a cache hit, `()` in case of a cache miss\n          \n          \n            \n            # + return - `true` or `false` in case of a cache hit, `()` in case of a cache miss\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406698463", "createdAt": "2020-04-10T10:20:47Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -135,8 +142,8 @@ public function checkForScopeMatch(string[]|string[][] resourceScopes, string[]\n # Tries to retrieve authorization decision from the cached information, if any.\n #\n # + authzCacheKey - Cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n+# + positiveAuthzCache - Cache for positive authorizations\n+# + negativeAuthzCache - Cache for negative authorizations\n # + return - `true` or `false` in case of a cache hit, `()` in case of a cache miss", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxNTE4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMDo1OVrOGD26Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMDo1OVrOGD26Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODUxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if one of the resourceScopes can be found at userScopes, else `false`\n          \n          \n            \n            # + return - `true` if one of the resourceScopes can be found at userScopes, else `false`\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406698518", "createdAt": "2020-04-10T10:20:59Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -195,7 +202,7 @@ function cacheAuthzResult(boolean authorized, string authzCacheKey, cache:Cache?\n #\n # + resourceScopes - Scopes of resource\n # + userScopes - Scopes of the user\n-# + return - true if one of the resourceScopes can be found at userScopes, else false\n+# + return - `true` if one of the resourceScopes can be found at userScopes, else `false`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c1253648af2da1717fba086e6f364337739894"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc2NDAyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNDoxMVrOGD9zYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNDoxMVrOGD9zYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMTQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Password hash read from userstore, or nil if not found\n          \n          \n            \n            # + return - Password hash read from userstore, or () if not found\n          \n      \n    \n    \n  \n\nPlease replace all occurrences of \"nil\" with \"()\".", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r406811491", "createdAt": "2020-04-10T15:34:11Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +108,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n+# + username - Username of the user\n # + return - Password hash read from userstore, or nil if not found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3edf23b3ac3727cc5ae3b0568b6231daec5b01a3"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjE0NzEzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTowMjo1OFrOGEKdAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTowMjo1OFrOGEKdAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxODc1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # implementation such as JWT and OAuth2 should be object-wise similar to the `OutboundAuthProvider` object.\n          \n          \n            \n            # implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc. should be object-wise similar to the `auth:OutboundAuthProvider` object.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407018753", "createdAt": "2020-04-11T05:02:58Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "diffHunk": "@@ -14,16 +14,18 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the outbound Auth provider. Any type of implementation such as JWT and OAuth2 should be object-wise similar\n-# to the `OutboundAuthProvider` object.\n+# Represents the outbound Auth provider that could be used to authenticate external endpoints. Any type of\n+# implementation such as JWT and OAuth2 should be object-wise similar to the `OutboundAuthProvider` object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6daab4e3d973851ae22eb331a3de8a99edeaba88"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjE0NzIxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTowMzoxN1rOGEKdCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTowMzoxN1rOGEKdCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxODc2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # as the interface for all the inbound authentication providers. Any type of implementation such as `JWT`, `OAuth2`,\n          \n          \n            \n            # as the interface for all the inbound authentication providers. Any type of implementation such as JWT, OAuth2,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407018763", "createdAt": "2020-04-11T05:03:17Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "diffHunk": "@@ -14,11 +14,13 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the inbound Auth provider. Any type of implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc.\n-# should be object-wise similar.\n+# Represents the inbound Auth provider that could be used to authenticate endpoints. The `auth:InboundAuthProvider` acts\n+# as the interface for all the inbound authentication providers. Any type of implementation such as `JWT`, `OAuth2`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6daab4e3d973851ae22eb331a3de8a99edeaba88"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjE0NzU0OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTowMzo0MVrOGEKdMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTowMzo0MVrOGEKdMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxODgwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `LDAP`, `JDBC`, `file-based` etc. should be object-wise similar.\n          \n          \n            \n            # LDAP, JDBC, file-based etc. should be object-wise similar.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407018802", "createdAt": "2020-04-11T05:03:41Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "diffHunk": "@@ -14,11 +14,13 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the inbound Auth provider. Any type of implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc.\n-# should be object-wise similar.\n+# Represents the inbound Auth provider that could be used to authenticate endpoints. The `auth:InboundAuthProvider` acts\n+# as the interface for all the inbound authentication providers. Any type of implementation such as `JWT`, `OAuth2`,\n+# `LDAP`, `JDBC`, `file-based` etc. should be object-wise similar.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6daab4e3d973851ae22eb331a3de8a99edeaba88"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjE1OTAzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNToyMjowMVrOGEKibg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNToyMjowMVrOGEKibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyMDE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the outbound Basic Auth authenticator which is an implementation of the auth:OutboundAuthProvider interface,\n          \n          \n            \n            # Represents the outbound Basic Auth authenticator which is an implementation of the `auth:OutboundAuthProvider` interface,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407020142", "createdAt": "2020-04-11T05:22:01Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -17,8 +17,14 @@\n import ballerina/log;\n import ballerina/runtime;\n \n-# Represents the outbound Basic Auth authenticator.\n-#\n+# Represents the outbound Basic Auth authenticator which is an implementation of the auth:OutboundAuthProvider interface,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6daab4e3d973851ae22eb331a3de8a99edeaba88"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjE3MjA4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTo0MDozM1rOGEKoLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTo0MDozM1rOGEKoLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyMTYxNQ==", "bodyText": "To be compatible with code-snippets in object functions.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #  auth:InboundBasicAuthProvider basicAuthProvider = new;\n          \n          \n            \n            #  auth:InboundBasicAuthProvider inboundBasicAuthProvider = new;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407021615", "createdAt": "2020-04-11T05:40:33Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -18,18 +18,29 @@ import ballerina/config;\n import ballerina/crypto;\n import ballerina/stringutils;\n \n-# Represents the inbound basic Auth provider, which is a configuration-file-based Auth provider.\n+# Represents the configuration-file-based inbound Basic Auth provider which is an implementation of the\n+# `auth:InboundAuthProvider` interface.\n+# ```ballerina\n+#  auth:InboundBasicAuthProvider basicAuthProvider = new;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78ea7c2e4abddfab4e84a4f5318e53b97d772d1"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjE3MjIxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTo0MDo0OVrOGEKoPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNTo0MDo0OVrOGEKoPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyMTYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #  auth:OutboundBasicAuthProvider basicAuthProvider = new({\n          \n          \n            \n            #  auth:OutboundBasicAuthProvider outboundBasicAuthProvider = new({", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407021631", "createdAt": "2020-04-11T05:40:49Z", "author": {"login": "ldclakmal"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -17,25 +17,34 @@\n import ballerina/log;\n import ballerina/runtime;\n \n-# Represents the outbound Basic Auth authenticator.\n-#\n-# + credential - The credential configurations.\n+# Represents the outbound Basic Auth authenticator which is an implementation of the `auth:OutboundAuthProvider` interface,\n+# This uses usernames and passwords provided Ballerina configurations to authenticate external endpoints.\n+# ```ballerina\n+#  auth:OutboundBasicAuthProvider basicAuthProvider = new({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78ea7c2e4abddfab4e84a4f5318e53b97d772d1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMTU0OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNToyMFrOGEK1ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNToyMFrOGEK1ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTAxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents inbound Basic Authentication configurations.\n          \n          \n            \n            # Represents the inbound Basic Authentication configurations.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025019", "createdAt": "2020-04-11T06:25:20Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -78,21 +93,21 @@ public type InboundBasicAuthProvider object {\n     }\n };\n \n-# The `BasicAuthConfig` record can be used to configure inbound Basic Authentication configurations.\n+# Represents inbound Basic Authentication configurations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMTg0OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNTo1M1rOGEK1ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNTo1M1rOGEK1ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Password hash read from userstore, or `()` if not found\n          \n          \n            \n            # + return - Password hash read from userstore or else `()` if not found", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025054", "createdAt": "2020-04-11T06:25:53Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from userstore, or `()` if not found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMjEyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNjowNFrOGEK1wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNjowNFrOGEK1wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTA4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Then, read the hashed password from the user-store file, using the user ID.\n          \n          \n            \n                // Then, reads the hashed password from the user-store file using the user ID.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025088", "createdAt": "2020-04-11T06:26:04Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from userstore, or `()` if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n-    // read the hashed password from the user-store file, using the user id\n+    // First, read the user ID from user->id mapping.\n+    // Then, read the hashed password from the user-store file, using the user ID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMjI1OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNjoyNVrOGEK10Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNjoyNVrOGEK10Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTEwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the inbound Auth provider that could be used to authenticate endpoints. The `auth:InboundAuthProvider` acts\n          \n          \n            \n            # Represents the inbound Auth provider, which could be used to authenticate endpoints. The `auth:InboundAuthProvider` acts", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025105", "createdAt": "2020-04-11T06:26:25Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "diffHunk": "@@ -14,13 +14,15 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the inbound Auth provider. Any type of implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc.\n-# should be object-wise similar.\n+# Represents the inbound Auth provider that could be used to authenticate endpoints. The `auth:InboundAuthProvider` acts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMjYyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNjo1N1rOGEK2AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNjo1N1rOGEK2AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTE1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the configuration-file-based inbound Basic Auth provider which is an implementation of the\n          \n          \n            \n            # Represents the configuration file based inbound Basic Auth provider, which is an implementation of the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025152", "createdAt": "2020-04-11T06:26:57Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -18,18 +18,29 @@ import ballerina/config;\n import ballerina/crypto;\n import ballerina/stringutils;\n \n-# Represents the inbound basic Auth provider, which is a configuration-file-based Auth provider.\n+# Represents the configuration-file-based inbound Basic Auth provider which is an implementation of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMjc5OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNzoyMVrOGEK2Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNzoyMVrOGEK2Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTE3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Attempts to authenticate base64-encoded `username:password` credential.\n          \n          \n            \n            # Attempts to authenticate the base64-encoded `username:password` credential.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025171", "createdAt": "2020-04-11T06:27:21Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +49,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate base64-encoded `username:password` credential.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMjg4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNzozMVrOGEK2HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNzozMVrOGEK2HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTE4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if authentication is successful, otherwise `false` or else an `auth:Error` if any error occurred\n          \n          \n            \n            # + return - `true` if authentication is successful, `false` otherwise, or else an `auth:Error` occurred", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025180", "createdAt": "2020-04-11T06:27:31Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +49,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate base64-encoded `username:password` credential.\n+# ```ballerina\n+# boolean|auth:Error authenticationResult = inboundBasicAuthProvider.authenticate(\"<credential>\");\n+# ```\n+#\n+# + credential - Base64-encoded `username:password` value\n+# + return - `true` if authentication is successful, otherwise `false` or else an `auth:Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMzAxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNzozOFrOGEK2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyNzozOFrOGEK2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTE5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #             while authenticating credentials\n          \n          \n            \n            #             while authenticating the credentials", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025196", "createdAt": "2020-04-11T06:27:38Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +49,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate base64-encoded `username:password` credential.\n+# ```ballerina\n+# boolean|auth:Error authenticationResult = inboundBasicAuthProvider.authenticate(\"<credential>\");\n+# ```\n+#\n+# + credential - Base64-encoded `username:password` value\n+# + return - `true` if authentication is successful, otherwise `false` or else an `auth:Error` if any error occurred\n+#             while authenticating credentials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMzQwOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyODoxNVrOGEK2Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyODoxNVrOGEK2Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTI0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + groupString - Comma separated string of groups\n          \n          \n            \n            # + groupString - Comma-separated string of groups", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025242", "createdAt": "2020-04-11T06:28:15Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from userstore, or `()` if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n-    // read the hashed password from the user-store file, using the user id\n+    // First, read the user ID from user->id mapping.\n+    // Then, read the hashed password from the user-store file, using the user ID.\n     return getConfigAuthValue(CONFIG_USER_SECTION + \".\" + username, \"password\");\n }\n \n function getConfigAuthValue(string instanceId, string property) returns string {\n     return config:getAsString(instanceId + \".\" + property, \"\");\n }\n \n-# Construct an array of groups from the comma separed group string passed.\n+# Constructs an array of groups from the given comma-separed string of groups.\n #\n # + groupString - Comma separated string of groups", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMzU5OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyODozMlrOGEK2cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyODozMlrOGEK2cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the outbound Auth provider that could be used to authenticate external endpoints. Any type of\n          \n          \n            \n            # Represents the outbound Auth provider, which could be used to authenticate external endpoints. Any type of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025266", "createdAt": "2020-04-11T06:28:32Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "diffHunk": "@@ -14,18 +14,21 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the outbound Auth provider. Any type of implementation such as JWT and OAuth2 should be object-wise similar\n-# to the `OutboundAuthProvider` object.\n+# Represents the outbound Auth provider that could be used to authenticate external endpoints. Any type of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwMzkwOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyODo0NVrOGEK2lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyODo0NVrOGEK2lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTMwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Generates a authentication token for the outbound request with outbound Auth providers such as JWT and OAuth2.\n          \n          \n            \n                # Generates an authentication token for the outbound request with outbound Auth providers such as JWT and OAuth2.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025301", "createdAt": "2020-04-11T06:28:45Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "diffHunk": "@@ -14,18 +14,21 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the outbound Auth provider. Any type of implementation such as JWT and OAuth2 should be object-wise similar\n-# to the `OutboundAuthProvider` object.\n+# Represents the outbound Auth provider that could be used to authenticate external endpoints. Any type of\n+# implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc. should be object-wise similar to the `auth:OutboundAuthProvider` object.\n public type OutboundAuthProvider abstract object {\n \n-    # Generates a token for the outbound request.\n+    # Generates a authentication token for the outbound request with outbound Auth providers such as JWT and OAuth2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNDIwOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyOTowM1rOGEK2uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyOTowM1rOGEK2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTMzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + data - Map of data which is extracted from the HTTP response\n          \n          \n            \n                # + data - Map of data, which is extracted from the HTTP response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025337", "createdAt": "2020-04-11T06:29:03Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "diffHunk": "@@ -14,18 +14,21 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the outbound Auth provider. Any type of implementation such as JWT and OAuth2 should be object-wise similar\n-# to the `OutboundAuthProvider` object.\n+# Represents the outbound Auth provider that could be used to authenticate external endpoints. Any type of\n+# implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc. should be object-wise similar to the `auth:OutboundAuthProvider` object.\n public type OutboundAuthProvider abstract object {\n \n-    # Generates a token for the outbound request.\n+    # Generates a authentication token for the outbound request with outbound Auth providers such as JWT and OAuth2.\n     #\n-    # + return - The String token or the `Error` occurred when generating the token.\n+    # + return - The token as a `string` or else an `auth:Error` if occurred when generating the token\n     public function generateToken() returns string|Error;\n \n-    # Inspects the incoming data and generates the token as needed.\n+    # Inspects the incoming data and generates the authentication token as needed. For example, if the incoming data\n+    # indicates that it needs to regenerate the token because the previously-generated token is invalid, this method\n+    # will generate it.\n     #\n-    # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + data - Map of data which is extracted from the HTTP response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNDQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyOToyMVrOGEK20g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyOToyMVrOGEK20g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTM2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The token as a `string` or an `auth:Error` if occurred when generating the token,\n          \n          \n            \n                # + return - The token as a `string`, an `auth:Error` occurred when generating the token,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025362", "createdAt": "2020-04-11T06:29:21Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "diffHunk": "@@ -14,18 +14,21 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the outbound Auth provider. Any type of implementation such as JWT and OAuth2 should be object-wise similar\n-# to the `OutboundAuthProvider` object.\n+# Represents the outbound Auth provider that could be used to authenticate external endpoints. Any type of\n+# implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc. should be object-wise similar to the `auth:OutboundAuthProvider` object.\n public type OutboundAuthProvider abstract object {\n \n-    # Generates a token for the outbound request.\n+    # Generates a authentication token for the outbound request with outbound Auth providers such as JWT and OAuth2.\n     #\n-    # + return - The String token or the `Error` occurred when generating the token.\n+    # + return - The token as a `string` or else an `auth:Error` if occurred when generating the token\n     public function generateToken() returns string|Error;\n \n-    # Inspects the incoming data and generates the token as needed.\n+    # Inspects the incoming data and generates the authentication token as needed. For example, if the incoming data\n+    # indicates that it needs to regenerate the token because the previously-generated token is invalid, this method\n+    # will generate it.\n     #\n-    # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + data - Map of data which is extracted from the HTTP response\n+    # + return - The token as a `string` or an `auth:Error` if occurred when generating the token,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNDUwOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyOTozNFrOGEK23g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyOTozNFrOGEK23g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTM3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the outbound Basic Auth authenticator which is an implementation of the `auth:OutboundAuthProvider` interface,\n          \n          \n            \n            # Represents the outbound Basic Auth authenticator, which is an implementation of the `auth:OutboundAuthProvider` interface.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025374", "createdAt": "2020-04-11T06:29:34Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -17,25 +17,34 @@\n import ballerina/log;\n import ballerina/runtime;\n \n-# Represents the outbound Basic Auth authenticator.\n-#\n-# + credential - The credential configurations.\n+# Represents the outbound Basic Auth authenticator which is an implementation of the `auth:OutboundAuthProvider` interface,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNDg3OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyOTo0NlrOGEK3BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjoyOTo0NlrOGEK3BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTQxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # This uses usernames and passwords provided Ballerina configurations to authenticate external endpoints.\n          \n          \n            \n            # This uses the usernames and passwords provided by the Ballerina configurations to authenticate external endpoints.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025412", "createdAt": "2020-04-11T06:29:46Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -17,25 +17,34 @@\n import ballerina/log;\n import ballerina/runtime;\n \n-# Represents the outbound Basic Auth authenticator.\n-#\n-# + credential - The credential configurations.\n+# Represents the outbound Basic Auth authenticator which is an implementation of the `auth:OutboundAuthProvider` interface,\n+# This uses usernames and passwords provided Ballerina configurations to authenticate external endpoints.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNTAxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMDowNlrOGEK3Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMDowNlrOGEK3Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTQzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated token or else an `auth:Error` if occurred during the validation\n          \n          \n            \n            # + return - The generated token or else an `auth:Error` occurred during the validation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025431", "createdAt": "2020-04-11T06:30:06Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -17,25 +17,34 @@\n import ballerina/log;\n import ballerina/runtime;\n \n-# Represents the outbound Basic Auth authenticator.\n-#\n-# + credential - The credential configurations.\n+# Represents the outbound Basic Auth authenticator which is an implementation of the `auth:OutboundAuthProvider` interface,\n+# This uses usernames and passwords provided Ballerina configurations to authenticate external endpoints.\n+# ```ballerina\n+#  auth:OutboundBasicAuthProvider outboundBasicAuthProvider = new({\n+#      username: \"tom\",\n+#      password: \"123\"\n+#  });\n+#  ```\n+# + credential - `auth:Credential` configurations\n public type OutboundBasicAuthProvider object {\n \n     *OutboundAuthProvider;\n \n     public Credential? credential;\n \n-    # Provides authentication based on the provided Basic Auth configuration.\n+    # Provides authentication based on the provided Basic Auth configurations.\n     #\n-    # + credential - The credential configurations.\n+    # + credential - Credential configurations\n     public function __init(Credential? credential = ()) {\n         self.credential = credential;\n     }\n \n-    # Generates a token for Basic authentication.\n-    #\n-    # + return - The generated token or the `Error` if an error occurred during validation.\n+# Generates a token for Basic authentication.\n+# ```ballerina\n+# string|auth:Error token = outboundBasicAuthProvider.generateToken();\n+# ```\n+#\n+# + return - The generated token or else an `auth:Error` if occurred during the validation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNTE4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMDoyM1rOGEK3LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMDoyM1rOGEK3LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTQ1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The token as a `string`, an `auth:Error` if occurred when generating the token, or else `()`\n          \n          \n            \n                # + return - The token as a `string`, an `auth:Error` occurred when generating the token, or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025453", "createdAt": "2020-04-11T06:30:23Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -55,25 +64,26 @@ public type OutboundBasicAuthProvider object {\n     # Inspects the incoming data and generates the token for Basic authentication.\n     #\n     # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + return - The token as a `string`, an `auth:Error` if occurred when generating the token, or else `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNTMzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMDozNFrOGEK3Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMDozNFrOGEK3Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTQ3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents Basic Authentication configurations, which is used by the HTTP endpoint.\n          \n          \n            \n            # Represents the Basic Authentication configurations, which are used by the HTTP endpoint.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025471", "createdAt": "2020-04-11T06:30:34Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -55,25 +64,26 @@ public type OutboundBasicAuthProvider object {\n     # Inspects the incoming data and generates the token for Basic authentication.\n     #\n     # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + return - The token as a `string`, an `auth:Error` if occurred when generating the token, or else `()`\n+    #            if nothing is to be returned\n     public function inspect(map<anydata> data) returns string|Error? {\n         return ();\n     }\n };\n \n-# The `Credential` record can be used to configure Basic Authentication, which is used by the HTTP endpoint.\n+# Represents Basic Authentication configurations, which is used by the HTTP endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNTQzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMDo0NFrOGEK3TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMDo0NFrOGEK3TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTQ4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + credential - `auth:Credential` configurations\n          \n          \n            \n            # + credential - The `auth:Credential` configurations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025484", "createdAt": "2020-04-11T06:30:44Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -55,25 +64,26 @@ public type OutboundBasicAuthProvider object {\n     # Inspects the incoming data and generates the token for Basic authentication.\n     #\n     # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + return - The token as a `string`, an `auth:Error` if occurred when generating the token, or else `()`\n+    #            if nothing is to be returned\n     public function inspect(map<anydata> data) returns string|Error? {\n         return ();\n     }\n };\n \n-# The `Credential` record can be used to configure Basic Authentication, which is used by the HTTP endpoint.\n+# Represents Basic Authentication configurations, which is used by the HTTP endpoint.\n #\n-# + username - The username for Basic authentication.\n-# + password - The password for Basic authentication.\n+# + username - Username for Basic authentication\n+# + password - Password for Basic authentication\n public type Credential record {|\n     string username;\n     string password;\n |};\n \n # Processes the auth token for Basic Auth.\n #\n-# + credential - The credential configurations.\n-# + return - The auth token or the `Error` if an error occurred during validation.\n+# + credential - `auth:Credential` configurations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNzExOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMzo0NFrOGEK4JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozMzo0NFrOGEK4JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The auth token or else an `auth:Error` if occurred during the validation\n          \n          \n            \n            # + return - The auth token or else an `auth:Error` occurred during the validation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025700", "createdAt": "2020-04-11T06:33:44Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_basic_auth_provider.bal", "diffHunk": "@@ -55,25 +64,26 @@ public type OutboundBasicAuthProvider object {\n     # Inspects the incoming data and generates the token for Basic authentication.\n     #\n     # + data - Map of the data, which is extracted from the HTTP response.\n-    # + return - The String token, the `Error` occurred when generating the token, or `()` if nothing is to be returned.\n+    # + return - The token as a `string`, an `auth:Error` if occurred when generating the token, or else `()`\n+    #            if nothing is to be returned\n     public function inspect(map<anydata> data) returns string|Error? {\n         return ();\n     }\n };\n \n-# The `Credential` record can be used to configure Basic Authentication, which is used by the HTTP endpoint.\n+# Represents Basic Authentication configurations, which is used by the HTTP endpoint.\n #\n-# + username - The username for Basic authentication.\n-# + password - The password for Basic authentication.\n+# + username - Username for Basic authentication\n+# + password - Password for Basic authentication\n public type Credential record {|\n     string username;\n     string password;\n |};\n \n # Processes the auth token for Basic Auth.\n #\n-# + credential - The credential configurations.\n-# + return - The auth token or the `Error` if an error occurred during validation.\n+# + credential - `auth:Credential` configurations\n+# + return - The auth token or else an `auth:Error` if occurred during the validation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNzQ1OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNDowMVrOGEK4Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNDowMVrOGEK4Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTczOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `string` tuple with the extracted username and password or else an `auth:Error` if occurred while\n          \n          \n            \n            # + return - A `string` tuple with the extracted username and password or else an `auth:Error` occurred while", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025738", "createdAt": "2020-04-11T06:34:01Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -42,13 +42,17 @@ public const string AUTH_SCHEME_BASIC = \"Basic \";\n # Prefix used to denote Bearer Authentication scheme.\n public const string AUTH_SCHEME_BEARER = \"Bearer \";\n \n-# The table name of the config user section of the TOML file.\n+# The table name specified in the user section of the TOML configuration.\n const string CONFIG_USER_SECTION = \"b7a.users\";\n \n-# Extracts the username and password from the credential values.\n+# Extracts the username and the password from the base64-encoded `username:password` value.\n+# ```ballerina\n+# [string, string]|auth:Error [username, password] = auth:extractUsernameAndPassword(\"<credential>\");\n+# ```\n #\n-# + credential - The credential values.\n-# + return - A `string` tuple with the extracted username and password or `Error` occurred while extracting credentials\n+# + credential - Base64-encoded `username:password` value\n+# + return - A `string` tuple with the extracted username and password or else an `auth:Error` if occurred while", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwNzkzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNDozNVrOGEK4hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNDozNVrOGEK4hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + positiveAuthzCache - `cache:Cache` for positive authorizations\n          \n          \n            \n            # + positiveAuthzCache - The `cache:Cache` for positive authorizations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025798", "createdAt": "2020-04-11T06:34:35Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -103,14 +110,14 @@ public function setPrincipal(public string? userId = (), public string? username\n     }\n }\n \n-# Check whether the scopes of the user and scopes of resource matches.\n+# Checks whether the scopes of the user matches the scopes of the resource.\n #\n-# + resourceScopes - Scopes of resource\n-# + userScopes - Scopes of user\n+# + resourceScopes - Scopes of the resource\n+# + userScopes - Scopes of the user\n # + authzCacheKey - Authorization cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n-# + return - true if there is a match between resource and user scopes, else false\n+# + positiveAuthzCache - `cache:Cache` for positive authorizations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwODAzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNDo0MlrOGEK4kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNDo0MlrOGEK4kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTgwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + negativeAuthzCache - `cache:Cache` for negative authorizations\n          \n          \n            \n            # + negativeAuthzCache - The `cache:Cache` for negative authorizations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025808", "createdAt": "2020-04-11T06:34:42Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -103,14 +110,14 @@ public function setPrincipal(public string? userId = (), public string? username\n     }\n }\n \n-# Check whether the scopes of the user and scopes of resource matches.\n+# Checks whether the scopes of the user matches the scopes of the resource.\n #\n-# + resourceScopes - Scopes of resource\n-# + userScopes - Scopes of user\n+# + resourceScopes - Scopes of the resource\n+# + userScopes - Scopes of the user\n # + authzCacheKey - Authorization cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n-# + return - true if there is a match between resource and user scopes, else false\n+# + positiveAuthzCache - `cache:Cache` for positive authorizations\n+# + negativeAuthzCache - `cache:Cache` for negative authorizations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwODEzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNDo1NlrOGEK4ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNDo1NlrOGEK4ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTgyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if there is a match between resource and user scopes, `false` otherwise\n          \n          \n            \n            # + return - `true` if there is a match between the resource and user scopes or else `false` otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025822", "createdAt": "2020-04-11T06:34:56Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -103,14 +110,14 @@ public function setPrincipal(public string? userId = (), public string? username\n     }\n }\n \n-# Check whether the scopes of the user and scopes of resource matches.\n+# Checks whether the scopes of the user matches the scopes of the resource.\n #\n-# + resourceScopes - Scopes of resource\n-# + userScopes - Scopes of user\n+# + resourceScopes - Scopes of the resource\n+# + userScopes - Scopes of the user\n # + authzCacheKey - Authorization cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n-# + return - true if there is a match between resource and user scopes, else false\n+# + positiveAuthzCache - `cache:Cache` for positive authorizations\n+# + negativeAuthzCache - `cache:Cache` for negative authorizations\n+# + return - `true` if there is a match between resource and user scopes, `false` otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwODIyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNTowNVrOGEK4qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNTowNVrOGEK4qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTgzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Tries to retrieve authorization decision from the cached information, if any.\n          \n          \n            \n            # Tries to retrieve authorization decision from the cached information if any.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025832", "createdAt": "2020-04-11T06:35:05Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -135,9 +142,9 @@ public function checkForScopeMatch(string[]|string[][] resourceScopes, string[]\n # Tries to retrieve authorization decision from the cached information, if any.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwODQ3OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNToyMlrOGEK4xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNToyMlrOGEK4xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTg2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + positiveAuthzCache - `cache:Cache` for positive authorizations\n          \n          \n            \n            # + positiveAuthzCache - The `cache:Cache` for positive authorizations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025861", "createdAt": "2020-04-11T06:35:22Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -158,12 +165,12 @@ function authorizeFromCache(string authzCacheKey, cache:Cache? positiveAuthzCach\n     return ();\n }\n \n-# Cached the authorization result.\n+# Caches the authorization result.\n #\n-# + authorized - boolean flag to indicate the authorization decision\n+# + authorized - `boolean` flag to indicate the authorization decision\n # + authzCacheKey - Cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n+# + positiveAuthzCache - `cache:Cache` for positive authorizations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwODU4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNToyOFrOGEK40w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNToyOFrOGEK40w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTg3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + negativeAuthzCache - `cache:Cache` for negative authorizations\n          \n          \n            \n            # + negativeAuthzCache - The `cache:Cache` for negative authorizations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025875", "createdAt": "2020-04-11T06:35:28Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -158,12 +165,12 @@ function authorizeFromCache(string authzCacheKey, cache:Cache? positiveAuthzCach\n     return ();\n }\n \n-# Cached the authorization result.\n+# Caches the authorization result.\n #\n-# + authorized - boolean flag to indicate the authorization decision\n+# + authorized - `boolean` flag to indicate the authorization decision\n # + authzCacheKey - Cache key\n-# + positiveAuthzCache - The cache for positive authorizations\n-# + negativeAuthzCache - The cache for negative authorizations\n+# + positiveAuthzCache - `cache:Cache` for positive authorizations\n+# + negativeAuthzCache - `cache:Cache` for negative authorizations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwODY2OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNTozOFrOGEK44Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNTozOFrOGEK44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTg4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + resourceScopes - Scopes of resource\n          \n          \n            \n            # + resourceScopes - Scopes of the resource", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025889", "createdAt": "2020-04-11T06:35:38Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -195,7 +202,7 @@ function cacheAuthzResult(boolean authorized, string authzCacheKey, cache:Cache?\n #\n # + resourceScopes - Scopes of resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIwODcxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNTo0OFrOGEK46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNTo0OFrOGEK46w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNTg5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if one of the resourceScopes can be found at userScopes, `false` otherwise\n          \n          \n            \n            # + return - `true` if one of the resourceScopes can be found at userScopes or else `false` otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407025899", "createdAt": "2020-04-11T06:35:48Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -195,7 +202,7 @@ function cacheAuthzResult(boolean authorized, string authzCacheKey, cache:Cache?\n #\n # + resourceScopes - Scopes of resource\n # + userScopes - Scopes of the user\n-# + return - true if one of the resourceScopes can be found at userScopes, else false\n+# + return - `true` if one of the resourceScopes can be found at userScopes, `false` otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIxMDEwOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNzo1M1rOGEK5nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozNzo1M1rOGEK5nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNjA3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Reads the scopes of the user-id.\n          \n          \n            \n                // Then, reads the scopes of the user-id.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407026079", "createdAt": "2020-04-11T06:37:53Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -78,21 +93,21 @@ public type InboundBasicAuthProvider object {\n     }\n };\n \n-# The `BasicAuthConfig` record can be used to configure inbound Basic Authentication configurations.\n+# Represents inbound Basic Authentication configurations.\n #\n-# + tableName - The table name of the TOML file of the user-store.\n+# + tableName - The table name specified in the user-store TOML configuration\n public type BasicAuthConfig record {|\n     string tableName;\n |};\n \n-# Reads the scope(s) of the user of the given username.\n+# Reads the scope(s) of the user identified by the given username.\n #\n-# + username - The username of the user.\n-# + tableName - The table name of the TOML file of the user-store.\n-# + return - An array of groups of the user who is denoted by the username.\n+# + username - Username of the user\n+# + tableName - Table name specified in the user-store TOML configuration\n+# + return - An array of scopes of the user identified by the username\n function getScopes(string username, string tableName) returns string[] {\n     // First, reads the user ID from the user->id mapping.\n-    // Reads the groups of the user-id.\n+    // Reads the scopes of the user-id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIxMDI3OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozODowN1rOGEK5sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozODowN1rOGEK5sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNjA5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // First, read the user ID from user->id mapping.\n          \n          \n            \n                // First, reads the user ID from user->id mapping.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407026099", "createdAt": "2020-04-11T06:38:07Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from userstore, or `()` if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n-    // read the hashed password from the user-store file, using the user id\n+    // First, read the user ID from user->id mapping.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIxMTQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozOToyNlrOGEK6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjozOToyNlrOGEK6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNjI0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The token as a `string` or else an `auth:Error` if occurred when generating the token\n          \n          \n            \n                # + return - The token as a `string` or else an `auth:Error` occurred when generating the token", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r407026242", "createdAt": "2020-04-11T06:39:26Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/outbound_auth_provider.bal", "diffHunk": "@@ -14,18 +14,21 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the outbound Auth provider. Any type of implementation such as JWT and OAuth2 should be object-wise similar\n-# to the `OutboundAuthProvider` object.\n+# Represents the outbound Auth provider that could be used to authenticate external endpoints. Any type of\n+# implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc. should be object-wise similar to the `auth:OutboundAuthProvider` object.\n public type OutboundAuthProvider abstract object {\n \n-    # Generates a token for the outbound request.\n+    # Generates a authentication token for the outbound request with outbound Auth providers such as JWT and OAuth2.\n     #\n-    # + return - The String token or the `Error` occurred when generating the token.\n+    # + return - The token as a `string` or else an `auth:Error` if occurred when generating the token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "076d5f3eddcf569d1c4f66e48927a8482044e613"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzA4OTEyOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1MjoyNlrOGFt7vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1MjoyNlrOGFt7vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0ODYzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides default authentication provider configurations that can be extended to create new authentication providers.\n          \n          \n            \n            This module provides the default authentication provider configurations, which can be extended to create new authentication providers.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408648639", "createdAt": "2020-04-15T07:52:26Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/Module.md", "diffHunk": "@@ -1,46 +1,3 @@\n-## Module Overview\n-\n This module provides default authentication provider configurations that can be extended to create new authentication providers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzA5Mjk2OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1MzoyOFrOGFt-LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1MzoyOFrOGFt-LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTI2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if authentication is successful, otherwise `false`, or else an `auth:Error` in case of an error\n          \n          \n            \n                # + return - `true` if the authentication is successful, `false` otherwise, or else an `auth:Error` in case of an error", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408649260", "createdAt": "2020-04-15T07:53:28Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "diffHunk": "@@ -14,13 +14,15 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the inbound Auth provider. Any type of implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc.\n-# should be object-wise similar.\n+# Represents the inbound Auth provider, which could be used to authenticate endpoints. The `auth:InboundAuthProvider` acts\n+# as the interface for all the inbound authentication providers. Any type of implementation such as JWT, OAuth2,\n+# LDAP, JDBC, file-based etc. should be object-wise similar.\n public type InboundAuthProvider abstract object {\n \n-    # Authenticate with credential value passed.\n+    # Authenticates the user based on the user credentials (i.e., the username/password) or a token such as JWT or\n+    # OAuth2.\n     #\n-    # + credential - Credential value\n-    # + return - True if authentication is a success, else false or `Error` if any error occurred\n+    # + credential - `string` credential value\n+    # + return - `true` if authentication is successful, otherwise `false`, or else an `auth:Error` in case of an error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzA5NTE3OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Mzo1OVrOGFt_fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Mzo1OVrOGFt_fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTU5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Attempts to authenticate the base64-encoded `username:password` credential.\n          \n          \n            \n            # Attempts to authenticate the base64-encoded `username:password` credentials.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408649596", "createdAt": "2020-04-15T07:53:59Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +49,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate the base64-encoded `username:password` credential.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzA5NjY2OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NDoyNlrOGFuAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NDoyNlrOGFuAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if authentication is successful, `false` otherwise, or else an `auth:Error` occurred\n          \n          \n            \n            # + return - `true` if the authentication is successful, `false` otherwise, or else an `auth:Error` occurred", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408649844", "createdAt": "2020-04-15T07:54:26Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -38,10 +49,14 @@ public type InboundBasicAuthProvider object {\n         }\n     }\n \n-    # Attempts to authenticate with credentials.\n-    #\n-    # + credential - Credential\n-    # + return - `true` if authentication is successful, otherwise `false` or `Error` occurred while extracting credentials\n+# Attempts to authenticate the base64-encoded `username:password` credential.\n+# ```ballerina\n+# boolean|auth:Error authenticationResult = inboundBasicAuthProvider.authenticate(\"<credential>\");\n+# ```\n+#\n+# + credential - Base64-encoded `username:password` value\n+# + return - `true` if authentication is successful, `false` otherwise, or else an `auth:Error` occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzA5ODk1OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NTowMlrOGFuB6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NTowMlrOGFuB6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MDIxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Password hash read from userstore or else `()` if not found\n          \n          \n            \n            # + return - Password hash read from the userstore or else `()` if not found", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408650217", "createdAt": "2020-04-15T07:55:02Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from userstore or else `()` if not found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzA5OTQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NToxMlrOGFuCPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NToxMlrOGFuCPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MDMwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // First, reads the user ID from user->id mapping.\n          \n          \n            \n                // First, reads the user ID from the user->id mapping.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408650302", "createdAt": "2020-04-15T07:55:12Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from userstore or else `()` if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n-    // read the hashed password from the user-store file, using the user id\n+    // First, reads the user ID from user->id mapping.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzEwMTM1OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NTo0NVrOGFuDWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NTo0NVrOGFuDWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MDU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constructs an array of groups from the given comma-separed string of groups.\n          \n          \n            \n            # Constructs an array of groups from the given comma-separated string of groups.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408650584", "createdAt": "2020-04-15T07:55:45Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from userstore or else `()` if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n-    // read the hashed password from the user-store file, using the user id\n+    // First, reads the user ID from user->id mapping.\n+    // Then, reads the hashed password from the user-store file using the user ID.\n     return getConfigAuthValue(CONFIG_USER_SECTION + \".\" + username, \"password\");\n }\n \n function getConfigAuthValue(string instanceId, string property) returns string {\n     return config:getAsString(instanceId + \".\" + property, \"\");\n }\n \n-# Construct an array of groups from the comma separed group string passed.\n+# Constructs an array of groups from the given comma-separed string of groups.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzEwMjM5OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NjowMlrOGFuEAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowMzowNVrOGFuUIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MDc1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An array of groups or else () if the groups string is empty/`()`\n          \n          \n            \n            # + return - An array of groups or else () if the groups string is empty", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408650753", "createdAt": "2020-04-15T07:56:02Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from userstore or else `()` if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n-    // read the hashed password from the user-store file, using the user id\n+    // First, reads the user ID from user->id mapping.\n+    // Then, reads the hashed password from the user-store file using the user ID.\n     return getConfigAuthValue(CONFIG_USER_SECTION + \".\" + username, \"password\");\n }\n \n function getConfigAuthValue(string instanceId, string property) returns string {\n     return config:getAsString(instanceId + \".\" + property, \"\");\n }\n \n-# Construct an array of groups from the comma separed group string passed.\n+# Constructs an array of groups from the given comma-separed string of groups.\n #\n-# + groupString - Comma separated string of groups\n-# + return - Array of groups, nil if the groups string is empty/nil\n+# + groupString - Comma-separated string of groups\n+# + return - An array of groups or else () if the groups string is empty/`()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1NDg4Mw==", "bodyText": "This should reflect string becoming empty and also string becoming nil.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408654883", "createdAt": "2020-04-15T08:03:05Z", "author": {"login": "Bhashinee"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from userstore or else `()` if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n-    // read the hashed password from the user-store file, using the user id\n+    // First, reads the user ID from user->id mapping.\n+    // Then, reads the hashed password from the user-store file using the user ID.\n     return getConfigAuthValue(CONFIG_USER_SECTION + \".\" + username, \"password\");\n }\n \n function getConfigAuthValue(string instanceId, string property) returns string {\n     return config:getAsString(instanceId + \".\" + property, \"\");\n }\n \n-# Construct an array of groups from the comma separed group string passed.\n+# Constructs an array of groups from the given comma-separed string of groups.\n #\n-# + groupString - Comma separated string of groups\n-# + return - Array of groups, nil if the groups string is empty/nil\n+# + groupString - Comma-separated string of groups\n+# + return - An array of groups or else () if the groups string is empty/`()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MDc1Mw=="}, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzExMTAzOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1ODoyNFrOGFuJbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1ODoyNFrOGFuJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MjE0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Checks whether the scopes of the user matches the scopes of the resource.\n          \n          \n            \n            # Checks whether the scopes of the user match the scopes of the resource.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408652141", "createdAt": "2020-04-15T07:58:24Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -103,14 +110,14 @@ public function setPrincipal(public string? userId = (), public string? username\n     }\n }\n \n-# Check whether the scopes of the user and scopes of resource matches.\n+# Checks whether the scopes of the user matches the scopes of the resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzExMjUxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1ODo0NlrOGFuKVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1ODo0NlrOGFuKVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MjM3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Tries to retrieve authorization decision from the cached information if any.\n          \n          \n            \n            # Tries to retrieve an authorization decision from the cached information if any.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408652375", "createdAt": "2020-04-15T07:58:46Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -132,12 +139,12 @@ public function checkForScopeMatch(string[]|string[][] resourceScopes, string[]\n     return false;\n }\n \n-# Tries to retrieve authorization decision from the cached information, if any.\n+# Tries to retrieve authorization decision from the cached information if any.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a6b4a6df3e84679c997e8d3c6e8910d0f9ad08"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU3MTgxOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNjoyNVrOGF8Ubg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNjoyNVrOGF8Ubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NDMzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + credential - `string` credential value\n          \n          \n            \n                # + credential - The `string` credential value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408884334", "createdAt": "2020-04-15T14:26:25Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_auth_provider.bal", "diffHunk": "@@ -14,13 +14,15 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Represents the inbound Auth provider. Any type of implementation such as JWT, OAuth2, LDAP, JDBC, file-based etc.\n-# should be object-wise similar.\n+# Represents the inbound Auth provider, which could be used to authenticate endpoints. The `auth:InboundAuthProvider` acts\n+# as the interface for all the inbound authentication providers. Any type of implementation such as JWT, OAuth2,\n+# LDAP, JDBC, file-based etc. should be object-wise similar.\n public type InboundAuthProvider abstract object {\n \n-    # Authenticate with credential value passed.\n+    # Authenticates the user based on the user credentials (i.e., the username/password) or a token such as JWT or\n+    # OAuth2.\n     #\n-    # + credential - Credential value\n-    # + return - True if authentication is a success, else false or `Error` if any error occurred\n+    # + credential - `string` credential value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb351f1617e5a7c437c8724d0d3e094c7cccc22f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU3ODAwOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNzo0NVrOGF8Ybg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNzo0NVrOGF8Ybg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NTM1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An array of groups or else () if the groups string is empty/`()`\n          \n          \n            \n            # + return - An array of groups or else `()` if the groups string is empty/`()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408885358", "createdAt": "2020-04-15T14:27:45Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/inbound_basic_auth_provider.bal", "diffHunk": "@@ -104,24 +119,24 @@ function extractHash(string configValue) returns string {\n     return configValue.substring((<int> configValue.indexOf(\"{\")) + 1, stringutils:lastIndexOf(configValue, \"}\"));\n }\n \n-# Reads the password hash for a user.\n+# Reads the password hash of a user.\n #\n-# + username - Username\n-# + return - Password hash read from userstore, or nil if not found\n+# + username - Username of the user\n+# + return - Password hash read from the userstore or else `()` if not found\n function readPassword(string username) returns string {\n-    // first read the user id from user->id mapping\n-    // read the hashed password from the user-store file, using the user id\n+    // First, reads the user ID from the user->id mapping.\n+    // Then, reads the hashed password from the user-store file using the user ID.\n     return getConfigAuthValue(CONFIG_USER_SECTION + \".\" + username, \"password\");\n }\n \n function getConfigAuthValue(string instanceId, string property) returns string {\n     return config:getAsString(instanceId + \".\" + property, \"\");\n }\n \n-# Construct an array of groups from the comma separed group string passed.\n+# Constructs an array of groups from the given comma-separated string of groups.\n #\n-# + groupString - Comma separated string of groups\n-# + return - Array of groups, nil if the groups string is empty/nil\n+# + groupString - Comma-separated string of groups\n+# + return - An array of groups or else () if the groups string is empty/`()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb351f1617e5a7c437c8724d0d3e094c7cccc22f"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU4ODQwOnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyOTo0OFrOGF8e_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyOTo0OFrOGF8e_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NzAzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Prefix used to denote Bearer Authentication scheme.\n          \n          \n            \n            # The prefix used to denote the Bearer Authentication scheme.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408887038", "createdAt": "2020-04-15T14:29:48Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -42,13 +42,17 @@ public const string AUTH_SCHEME_BASIC = \"Basic \";\n # Prefix used to denote Bearer Authentication scheme.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb351f1617e5a7c437c8724d0d3e094c7cccc22f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU5MzM4OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMDo1NlrOGF8iSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMDo1NlrOGF8iSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4Nzg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + authorized - `boolean` flag to indicate the authorization decision\n          \n          \n            \n            # + authorized - The `boolean` flag to indicate the authorization decision", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408887880", "createdAt": "2020-04-15T14:30:56Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -158,12 +165,12 @@ function authorizeFromCache(string authzCacheKey, cache:Cache? positiveAuthzCach\n     return ();\n }\n \n-# Cached the authorization result.\n+# Caches the authorization result.\n #\n-# + authorized - boolean flag to indicate the authorization decision\n+# + authorized - `boolean` flag to indicate the authorization decision", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb351f1617e5a7c437c8724d0d3e094c7cccc22f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU5NDY0OnYy", "diffSide": "RIGHT", "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMToxNFrOGF8jKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMToxNFrOGF8jKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODEwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if one of the resourceScopes can be found at userScopes or else `false` otherwise\n          \n          \n            \n            # + return - `true` if one of the resourceScopes can be found at `userScopes` or else `false` otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22565#discussion_r408888104", "createdAt": "2020-04-15T14:31:14Z", "author": {"login": "praneesha"}, "path": "stdlib/auth/src/main/ballerina/src/auth/utils.bal", "diffHunk": "@@ -193,9 +200,9 @@ function cacheAuthzResult(boolean authorized, string authzCacheKey, cache:Cache?\n \n # Tries to find a match between the two scope arrays.\n #\n-# + resourceScopes - Scopes of resource\n+# + resourceScopes - Scopes of the resource\n # + userScopes - Scopes of the user\n-# + return - true if one of the resourceScopes can be found at userScopes, else false\n+# + return - `true` if one of the resourceScopes can be found at userScopes or else `false` otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb351f1617e5a7c437c8724d0d3e094c7cccc22f"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4205, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}