{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNTI2MjQ5", "number": 20976, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODo1MTo0M1rODeuN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODo1MTo0M1rODeuN_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTQxMTE5OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/providers/VariableAssignmentCodeAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODo1MTo0M1rOFoA7cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTozNzoxMlrOFoFyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwMjU3Nw==", "bodyText": "Shall we update the logic to handle(ignore) characters inside string literals?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20976#discussion_r377502577", "createdAt": "2020-02-11T08:51:43Z", "author": {"login": "NipunaRanasinghe"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/providers/VariableAssignmentCodeAction.java", "diffHunk": "@@ -223,16 +223,44 @@ private static String getDiagnosedContent(Diagnostic diagnostic, LSContext conte\n     }\n \n     private static Position offsetInvocation(String diagnosedContent, Position position) {\n+//        Need to capture the correct function invocation position in chain & nested invocations\n+//        eg. General Invocations: lorry.get_color()\n+//            Chain invocations: lorry.get_color().print(10),\n+//            Package Prefixes: http:lorry.get_color()\n+//            Action invocations: http:lorry->action()\n+//            Nested invocations: crypto:hashMd5(str.toBytes())\n+//            Field accesses: http:lorry.get_color\n+        String content = diagnosedContent;\n+        int pendingLParenthesis = 0;\n+        boolean loop = true;\n+        int count = 0;\n+        while (loop) {\n+            if (content.length() == 2) {\n+                break;\n+            }\n+            char tailChar = content.charAt(content.length() - 1);\n+            char tailPrevChar = content.charAt(content.length() - 2);\n+            if (pendingLParenthesis <= 0) {\n+                if (tailChar == '.' || tailChar == ':') {\n+                    count++;\n+                    break;\n+                } else if ((tailPrevChar == '-' && tailChar == '>')) {\n+                    count += 2;\n+                    break;\n+                }\n+            }\n+            if (tailChar == '(') {\n+                pendingLParenthesis--;\n+            } else if (tailChar == ')') {\n+                pendingLParenthesis++;\n+            }\n+            content = content.substring(0, content.length() - 1);\n+            count++;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f87b672a18e46163c654225ccbe53d98f4b611"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwNzExMQ==", "bodyText": "Yes \ud83d\udc4d , Need to ignore chars inside strings for the calculation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20976#discussion_r377507111", "createdAt": "2020-02-11T09:01:40Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/providers/VariableAssignmentCodeAction.java", "diffHunk": "@@ -223,16 +223,44 @@ private static String getDiagnosedContent(Diagnostic diagnostic, LSContext conte\n     }\n \n     private static Position offsetInvocation(String diagnosedContent, Position position) {\n+//        Need to capture the correct function invocation position in chain & nested invocations\n+//        eg. General Invocations: lorry.get_color()\n+//            Chain invocations: lorry.get_color().print(10),\n+//            Package Prefixes: http:lorry.get_color()\n+//            Action invocations: http:lorry->action()\n+//            Nested invocations: crypto:hashMd5(str.toBytes())\n+//            Field accesses: http:lorry.get_color\n+        String content = diagnosedContent;\n+        int pendingLParenthesis = 0;\n+        boolean loop = true;\n+        int count = 0;\n+        while (loop) {\n+            if (content.length() == 2) {\n+                break;\n+            }\n+            char tailChar = content.charAt(content.length() - 1);\n+            char tailPrevChar = content.charAt(content.length() - 2);\n+            if (pendingLParenthesis <= 0) {\n+                if (tailChar == '.' || tailChar == ':') {\n+                    count++;\n+                    break;\n+                } else if ((tailPrevChar == '-' && tailChar == '>')) {\n+                    count += 2;\n+                    break;\n+                }\n+            }\n+            if (tailChar == '(') {\n+                pendingLParenthesis--;\n+            } else if (tailChar == ')') {\n+                pendingLParenthesis++;\n+            }\n+            content = content.substring(0, content.length() - 1);\n+            count++;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwMjU3Nw=="}, "originalCommit": {"oid": "c6f87b672a18e46163c654225ccbe53d98f4b611"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxMTExOQ==", "bodyText": "@rasika Maybe it'd be better to have a test case including string literals, if possible", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20976#discussion_r377511119", "createdAt": "2020-02-11T09:10:59Z", "author": {"login": "NipunaRanasinghe"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/providers/VariableAssignmentCodeAction.java", "diffHunk": "@@ -223,16 +223,44 @@ private static String getDiagnosedContent(Diagnostic diagnostic, LSContext conte\n     }\n \n     private static Position offsetInvocation(String diagnosedContent, Position position) {\n+//        Need to capture the correct function invocation position in chain & nested invocations\n+//        eg. General Invocations: lorry.get_color()\n+//            Chain invocations: lorry.get_color().print(10),\n+//            Package Prefixes: http:lorry.get_color()\n+//            Action invocations: http:lorry->action()\n+//            Nested invocations: crypto:hashMd5(str.toBytes())\n+//            Field accesses: http:lorry.get_color\n+        String content = diagnosedContent;\n+        int pendingLParenthesis = 0;\n+        boolean loop = true;\n+        int count = 0;\n+        while (loop) {\n+            if (content.length() == 2) {\n+                break;\n+            }\n+            char tailChar = content.charAt(content.length() - 1);\n+            char tailPrevChar = content.charAt(content.length() - 2);\n+            if (pendingLParenthesis <= 0) {\n+                if (tailChar == '.' || tailChar == ':') {\n+                    count++;\n+                    break;\n+                } else if ((tailPrevChar == '-' && tailChar == '>')) {\n+                    count += 2;\n+                    break;\n+                }\n+            }\n+            if (tailChar == '(') {\n+                pendingLParenthesis--;\n+            } else if (tailChar == ')') {\n+                pendingLParenthesis++;\n+            }\n+            content = content.substring(0, content.length() - 1);\n+            count++;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwMjU3Nw=="}, "originalCommit": {"oid": "c6f87b672a18e46163c654225ccbe53d98f4b611"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MjI3NQ==", "bodyText": "Yes, added a test case as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20976#discussion_r377582275", "createdAt": "2020-02-11T11:37:12Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/providers/VariableAssignmentCodeAction.java", "diffHunk": "@@ -223,16 +223,44 @@ private static String getDiagnosedContent(Diagnostic diagnostic, LSContext conte\n     }\n \n     private static Position offsetInvocation(String diagnosedContent, Position position) {\n+//        Need to capture the correct function invocation position in chain & nested invocations\n+//        eg. General Invocations: lorry.get_color()\n+//            Chain invocations: lorry.get_color().print(10),\n+//            Package Prefixes: http:lorry.get_color()\n+//            Action invocations: http:lorry->action()\n+//            Nested invocations: crypto:hashMd5(str.toBytes())\n+//            Field accesses: http:lorry.get_color\n+        String content = diagnosedContent;\n+        int pendingLParenthesis = 0;\n+        boolean loop = true;\n+        int count = 0;\n+        while (loop) {\n+            if (content.length() == 2) {\n+                break;\n+            }\n+            char tailChar = content.charAt(content.length() - 1);\n+            char tailPrevChar = content.charAt(content.length() - 2);\n+            if (pendingLParenthesis <= 0) {\n+                if (tailChar == '.' || tailChar == ':') {\n+                    count++;\n+                    break;\n+                } else if ((tailPrevChar == '-' && tailChar == '>')) {\n+                    count += 2;\n+                    break;\n+                }\n+            }\n+            if (tailChar == '(') {\n+                pendingLParenthesis--;\n+            } else if (tailChar == ')') {\n+                pendingLParenthesis++;\n+            }\n+            content = content.substring(0, content.length() - 1);\n+            count++;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwMjU3Nw=="}, "originalCommit": {"oid": "c6f87b672a18e46163c654225ccbe53d98f4b611"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1206, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}