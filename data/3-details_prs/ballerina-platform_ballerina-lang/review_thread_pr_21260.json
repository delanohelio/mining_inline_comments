{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDYwMDI0", "number": 21260, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNToxNTo0MFrODjVbgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1MjowMVrODlA7SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzc3ODU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNToxNTo0MFrOFvFfBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMDozOVrOFw6MxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNzI1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if ((bbTerminator.kind.equals(InstructionKind.CALL))) {\n          \n          \n            \n                            if (bbTerminator.kind.equals(InstructionKind.CALL)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r384917255", "createdAt": "2020-02-27T05:15:40Z", "author": {"login": "suganyasuven"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -280,6 +286,39 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if ((bbTerminator.kind.equals(InstructionKind.CALL))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTUwOQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r386829509", "createdAt": "2020-03-03T07:00:39Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -280,6 +286,39 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if ((bbTerminator.kind.equals(InstructionKind.CALL))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNzI1NQ=="}, "originalCommit": {"oid": "f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzc4MjIzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNToxODoxNlrOFvFhLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMDo1NFrOFw6NMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNzgwNQ==", "bodyText": "Shall we remove this extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r384917805", "createdAt": "2020-02-27T05:18:16Z", "author": {"login": "suganyasuven"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -280,6 +286,39 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if ((bbTerminator.kind.equals(InstructionKind.CALL))) {\n+                    mockFunctionMap.forEach((k, v) -> {\n+                        String[] mockInfo = k.split(MOCK_ANNOTATION_DELIMITER);\n+                        if (mockInfo.length != 2) {\n+                            return;\n+                        }\n+                        if (((BIRTerminator.Call) bbTerminator).name.getValue().equals(mockInfo[1])) {\n+                            ((BIRTerminator.Call) bbTerminator).name = getMockFunctionName(v, birPkg);\n+                            if (!mockInfo[0].equals(\".\")) {\n+                                ((BIRTerminator.Call) bbTerminator).calleePkg = function.pos.src.pkgID;\n+                            }\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    private Name getMockFunctionName(String name, BIRPackage birPkg) {\n+        for (BIRFunction function : birPkg.functions) {\n+            if (function.name.value.equals(name)) {\n+                return function.name;\n+            }\n+        }\n+        return null;\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTYxNw==", "bodyText": "Removed extra line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r386829617", "createdAt": "2020-03-03T07:00:54Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -280,6 +286,39 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if ((bbTerminator.kind.equals(InstructionKind.CALL))) {\n+                    mockFunctionMap.forEach((k, v) -> {\n+                        String[] mockInfo = k.split(MOCK_ANNOTATION_DELIMITER);\n+                        if (mockInfo.length != 2) {\n+                            return;\n+                        }\n+                        if (((BIRTerminator.Call) bbTerminator).name.getValue().equals(mockInfo[1])) {\n+                            ((BIRTerminator.Call) bbTerminator).name = getMockFunctionName(v, birPkg);\n+                            if (!mockInfo[0].equals(\".\")) {\n+                                ((BIRTerminator.Call) bbTerminator).calleePkg = function.pos.src.pkgID;\n+                            }\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    private Name getMockFunctionName(String name, BIRPackage birPkg) {\n+        for (BIRFunction function : birPkg.functions) {\n+            if (function.name.value.equals(name)) {\n+                return function.name;\n+            }\n+        }\n+        return null;\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNzgwNQ=="}, "originalCommit": {"oid": "f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTAxMjM3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTo1NToyNVrOFxmpJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzowNjo0NVrOF0rMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1NzY2OQ==", "bodyText": "Shall we use a better name for this, so that the functionality of this method is intuitive by the name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387557669", "createdAt": "2020-03-04T09:55:25Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MTczNw==", "bodyText": "I have used this name since there was another function called visitBuiltInFunction() in the same class. Im currently not sure what to rename this function. Any suggestions?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r390281737", "createdAt": "2020-03-10T12:35:42Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1NzY2OQ=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3MDg3Nw==", "bodyText": "Heres a tip for function naming/designing :)\nTry to explain the logic in the code using a short single sentence. e.g: \"This method adds wheels to a car.\"\nThen the method signature can be something like addWheels(Car c).\nNow, anyone who looks at the method-signature can get a high level idea of what it does, without looking at the code.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r390770877", "createdAt": "2020-03-11T06:42:11Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1NzY2OQ=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDUxNA==", "bodyText": "Since we are replacing the call.Terminator's name and calleepkg details i decided on 'replaceMockFunctions()' as a name. Is this suitable?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r390774514", "createdAt": "2020-03-11T06:54:58Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1NzY2OQ=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NTkyMw==", "bodyText": "+1\nshould it be replaceMockedFunctions()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r390775923", "createdAt": "2020-03-11T06:59:43Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1NzY2OQ=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3Nzg2Nw==", "bodyText": "yes. Since we are replacing the functions to be mocked...\nChanged it to replaceMockedFunctions()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r390777867", "createdAt": "2020-03-11T07:06:45Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1NzY2OQ=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTAxNTk0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTo1NjoyMlrOFxmrSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMTo1NToxMVrOFy2TUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1ODIxOQ==", "bodyText": "I think we can refactor this to reduce the runtime-cost. No need to iterate through the mockFunctionMap and do the splitting etc. for each and every CALL instruction. Those are redundant.  Prepare a separate map before coming here, so that you can lookup function name in the map using the key.\nThat will reduce the time complexity of L#297-L#307 from O(n) to k-constant time.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387558219", "createdAt": "2020-03-04T09:56:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if (bbTerminator.kind.equals(InstructionKind.CALL)) {\n+                    mockFunctionMap.forEach((k, v) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg2MjgwMg==", "bodyText": "I have refactored this and removed the need to split the mockFunctionMap.\n@pubudu91 I have implemented a reverse check as discussed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r388862802", "createdAt": "2020-03-06T11:55:11Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if (bbTerminator.kind.equals(InstructionKind.CALL)) {\n+                    mockFunctionMap.forEach((k, v) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1ODIxOQ=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTA3MTgwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoxMjowMlrOFxnN_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0NjoxNlrOFytDDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NzEwMA==", "bodyText": "Since your are doing the same casting operation ((BIRTerminator.Call) bbTerminator) multiple times,  better to do it once and keep it in a local variable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387567100", "createdAt": "2020-03-04T10:12:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if (bbTerminator.kind.equals(InstructionKind.CALL)) {\n+                    mockFunctionMap.forEach((k, v) -> {\n+                        String[] mockInfo = k.split(MOCK_ANNOTATION_DELIMITER);\n+                        if (mockInfo.length != 2) {\n+                            return;\n+                        }\n+                        if (((BIRTerminator.Call) bbTerminator).name.getValue().equals(mockInfo[1])) {\n+                            ((BIRTerminator.Call) bbTerminator).name = getMockFunctionName(v, birPkg);\n+                            if (!mockInfo[0].equals(\".\")) {\n+                                ((BIRTerminator.Call) bbTerminator).calleePkg = function.pos.src.pkgID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTE4Mw==", "bodyText": "Implemented a local variable for this. Will continue to refactor this nested loop case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r388711183", "createdAt": "2020-03-06T04:46:16Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if (bbTerminator.kind.equals(InstructionKind.CALL)) {\n+                    mockFunctionMap.forEach((k, v) -> {\n+                        String[] mockInfo = k.split(MOCK_ANNOTATION_DELIMITER);\n+                        if (mockInfo.length != 2) {\n+                            return;\n+                        }\n+                        if (((BIRTerminator.Call) bbTerminator).name.getValue().equals(mockInfo[1])) {\n+                            ((BIRTerminator.Call) bbTerminator).name = getMockFunctionName(v, birPkg);\n+                            if (!mockInfo[0].equals(\".\")) {\n+                                ((BIRTerminator.Call) bbTerminator).calleePkg = function.pos.src.pkgID;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NzEwMA=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTEwMDQ3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoyMDozMlrOFxngcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMTo1NjoyNFrOFy2VJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MTgyNw==", "bodyText": "Looks like there are 4-nested loops here. Please try to reduce.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387571827", "createdAt": "2020-03-04T10:20:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if (bbTerminator.kind.equals(InstructionKind.CALL)) {\n+                    mockFunctionMap.forEach((k, v) -> {\n+                        String[] mockInfo = k.split(MOCK_ANNOTATION_DELIMITER);\n+                        if (mockInfo.length != 2) {\n+                            return;\n+                        }\n+                        if (((BIRTerminator.Call) bbTerminator).name.getValue().equals(mockInfo[1])) {\n+                            ((BIRTerminator.Call) bbTerminator).name = getMockFunctionName(v, birPkg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg2MzI3MA==", "bodyText": "I have reduced the complexity in this case by removing the need to go thru the mockFunctionMap. There are only 2 loops now", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r388863270", "createdAt": "2020-03-06T11:56:24Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if (bbTerminator.kind.equals(InstructionKind.CALL)) {\n+                    mockFunctionMap.forEach((k, v) -> {\n+                        String[] mockInfo = k.split(MOCK_ANNOTATION_DELIMITER);\n+                        if (mockInfo.length != 2) {\n+                            return;\n+                        }\n+                        if (((BIRTerminator.Call) bbTerminator).name.getValue().equals(mockInfo[1])) {\n+                            ((BIRTerminator.Call) bbTerminator).name = getMockFunctionName(v, birPkg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MTgyNw=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTM3NTc2OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo0Njo1NFrOFxqKWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowNTo1MFrOFyxjfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNTMyMw==", "bodyText": "Instead of trying to extract the module using the annotation, check and see if you can get it when initializing the annotation processor.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387615323", "createdAt": "2020-03-04T11:46:54Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NTAyMw==", "bodyText": "I removed setting the bLangPackage entirely since there is already an instance of the BlangPackage that is initialized in the process() function.\nI am simply using this instance throughout the code.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r388785023", "createdAt": "2020-03-06T09:05:50Z", "author": {"login": "Ibaqu"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNTMyMw=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTM3ODM3OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo0Nzo1NFrOFxqL6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo1NzozMlrOF0NmFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNTcyMA==", "bodyText": "For compile errors the standard we follow is to use lower case letters at the start of an error message.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387615720", "createdAt": "2020-03-04T11:47:54Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNjI0MA==", "bodyText": "Also, this error will be given to the beginning of the function. Check and see if you can give the error to the correct position of the relevant field in the annotation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387616240", "createdAt": "2020-03-04T11:49:03Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNTcyMA=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5MzAxNQ==", "bodyText": "I have changed this so that it highlights the error in the annotation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r390293015", "createdAt": "2020-03-10T12:57:32Z", "author": {"login": "Ibaqu"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNTcyMA=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTM4NTAyOnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1MDowNlrOFxqP8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0Njo0NlrOFytDgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNjc1NA==", "bodyText": "You don't need to do this each time the process() method gets invoked right? I think this can just be done in the init.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387616754", "createdAt": "2020-03-04T11:50:06Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");\n+                    }\n+\n+                    if (vals[1].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Function name cannot be empty\");\n+                    }\n+\n+                    SymbolTable symbolTable = SymbolTable.getInstance(compilerContext);\n+                    Map<BPackageSymbol, SymbolEnv> packageEnvironmentMap = symbolTable.pkgEnvMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTI5Ng==", "bodyText": "Moved to the init function", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r388711296", "createdAt": "2020-03-06T04:46:46Z", "author": {"login": "Ibaqu"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");\n+                    }\n+\n+                    if (vals[1].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Function name cannot be empty\");\n+                    }\n+\n+                    SymbolTable symbolTable = SymbolTable.getInstance(compilerContext);\n+                    Map<BPackageSymbol, SymbolEnv> packageEnvironmentMap = symbolTable.pkgEnvMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNjc1NA=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTM5MDgwOnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1MjowMVrOFxqTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo1NTo0MlrOF0KA-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNzY1Mg==", "bodyText": "This typecheck will be checking the entire signature, not just the param types. So it's not exactly right to complain about parameter mismatches. You can try using the standard incompatible types error message we have in the compiler for this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387617652", "createdAt": "2020-03-04T11:52:01Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");\n+                    }\n+\n+                    if (vals[1].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Function name cannot be empty\");\n+                    }\n+\n+                    SymbolTable symbolTable = SymbolTable.getInstance(compilerContext);\n+                    Map<BPackageSymbol, SymbolEnv> packageEnvironmentMap = symbolTable.pkgEnvMap;\n+                    PackageID functionToMockID = getPackageID(vals[0], packageEnvironmentMap);\n+\n+                    BType functionToMockType = getFunctionType(packageEnvironmentMap, functionToMockID, vals[1]);\n+                    BType mockFunctionType = getFunctionType(packageEnvironmentMap, bLangPackage.packageID,\n+                            ((BLangFunction) functionNode).name.toString());\n+\n+                    if (functionToMockType != null && mockFunctionType != null) {\n+                        if (!typeChecker.isAssignable(mockFunctionType, functionToMockType)) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNzk1Mg==", "bodyText": "It's in the form: incompatible types: expected 'T' but found 'T2'`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387617952", "createdAt": "2020-03-04T11:52:41Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");\n+                    }\n+\n+                    if (vals[1].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Function name cannot be empty\");\n+                    }\n+\n+                    SymbolTable symbolTable = SymbolTable.getInstance(compilerContext);\n+                    Map<BPackageSymbol, SymbolEnv> packageEnvironmentMap = symbolTable.pkgEnvMap;\n+                    PackageID functionToMockID = getPackageID(vals[0], packageEnvironmentMap);\n+\n+                    BType functionToMockType = getFunctionType(packageEnvironmentMap, functionToMockID, vals[1]);\n+                    BType mockFunctionType = getFunctionType(packageEnvironmentMap, bLangPackage.packageID,\n+                            ((BLangFunction) functionNode).name.toString());\n+\n+                    if (functionToMockType != null && mockFunctionType != null) {\n+                        if (!typeChecker.isAssignable(mockFunctionType, functionToMockType)) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNzY1Mg=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNDM2Mg==", "bodyText": "Changed to standard error", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r390234362", "createdAt": "2020-03-10T10:55:42Z", "author": {"login": "Ibaqu"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");\n+                    }\n+\n+                    if (vals[1].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Function name cannot be empty\");\n+                    }\n+\n+                    SymbolTable symbolTable = SymbolTable.getInstance(compilerContext);\n+                    Map<BPackageSymbol, SymbolEnv> packageEnvironmentMap = symbolTable.pkgEnvMap;\n+                    PackageID functionToMockID = getPackageID(vals[0], packageEnvironmentMap);\n+\n+                    BType functionToMockType = getFunctionType(packageEnvironmentMap, functionToMockID, vals[1]);\n+                    BType mockFunctionType = getFunctionType(packageEnvironmentMap, bLangPackage.packageID,\n+                            ((BLangFunction) functionNode).name.toString());\n+\n+                    if (functionToMockType != null && mockFunctionType != null) {\n+                        if (!typeChecker.isAssignable(mockFunctionType, functionToMockType)) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNzY1Mg=="}, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1150, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}