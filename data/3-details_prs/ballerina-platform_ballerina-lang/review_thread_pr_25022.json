{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NjQwNTAz", "number": 25022, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyNjo1MVrOETfreg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0MDoyM1rOEXkifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc3NDM0OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-commons/src/main/java/org/ballerinalang/langserver/commons/codeaction/LSCodeActionProviderException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyNjo1MVrOG5Qxag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1NjozNlrOG583dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjgxMA==", "bodyText": "Remove this extra line feed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462696810", "createdAt": "2020-07-30T02:26:51Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-commons/src/main/java/org/ballerinalang/langserver/commons/codeaction/LSCodeActionProviderException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.commons.codeaction;\n+\n+/**\n+ * Exception for Language Server Code Actions.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LSCodeActionProviderException extends Exception {\n+\n+    public LSCodeActionProviderException(String message) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTI1Mw==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463419253", "createdAt": "2020-07-31T05:56:36Z", "author": {"login": "Ayodhya94"}, "path": "language-server/modules/langserver-commons/src/main/java/org/ballerinalang/langserver/commons/codeaction/LSCodeActionProviderException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.commons.codeaction;\n+\n+/**\n+ * Exception for Language Server Code Actions.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LSCodeActionProviderException extends Exception {\n+\n+    public LSCodeActionProviderException(String message) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjgxMA=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc3NDQxOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-commons/src/main/java/org/ballerinalang/langserver/commons/codeaction/LSCodeActionProviderException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyNjo1OFrOG5QxfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1Njo0NVrOG583ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjgyOA==", "bodyText": "Remove this extra line feed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462696828", "createdAt": "2020-07-30T02:26:58Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-commons/src/main/java/org/ballerinalang/langserver/commons/codeaction/LSCodeActionProviderException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.commons.codeaction;\n+\n+/**\n+ * Exception for Language Server Code Actions.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LSCodeActionProviderException extends Exception {\n+\n+    public LSCodeActionProviderException(String message) {\n+\n+        super(message);\n+    }\n+\n+    public LSCodeActionProviderException(String message, Throwable cause) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTI5OQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463419299", "createdAt": "2020-07-31T05:56:45Z", "author": {"login": "Ayodhya94"}, "path": "language-server/modules/langserver-commons/src/main/java/org/ballerinalang/langserver/commons/codeaction/LSCodeActionProviderException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.commons.codeaction;\n+\n+/**\n+ * Exception for Language Server Code Actions.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LSCodeActionProviderException extends Exception {\n+\n+    public LSCodeActionProviderException(String message) {\n+\n+        super(message);\n+    }\n+\n+    public LSCodeActionProviderException(String message, Throwable cause) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjgyOA=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc3NDYwOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-commons/src/main/java/org/ballerinalang/langserver/commons/codeaction/LSCodeActionProviderException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyNzowNFrOG5Qxmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1Njo1NVrOG5831w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5Njg1OA==", "bodyText": "Remove this extra line feed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462696858", "createdAt": "2020-07-30T02:27:04Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-commons/src/main/java/org/ballerinalang/langserver/commons/codeaction/LSCodeActionProviderException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.commons.codeaction;\n+\n+/**\n+ * Exception for Language Server Code Actions.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LSCodeActionProviderException extends Exception {\n+\n+    public LSCodeActionProviderException(String message) {\n+\n+        super(message);\n+    }\n+\n+    public LSCodeActionProviderException(String message, Throwable cause) {\n+\n+        super(message, cause);\n+    }\n+\n+    public LSCodeActionProviderException(Throwable cause) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTM1MQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463419351", "createdAt": "2020-07-31T05:56:55Z", "author": {"login": "Ayodhya94"}, "path": "language-server/modules/langserver-commons/src/main/java/org/ballerinalang/langserver/commons/codeaction/LSCodeActionProviderException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.commons.codeaction;\n+\n+/**\n+ * Exception for Language Server Code Actions.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LSCodeActionProviderException extends Exception {\n+\n+    public LSCodeActionProviderException(String message) {\n+\n+        super(message);\n+    }\n+\n+    public LSCodeActionProviderException(String message, Throwable cause) {\n+\n+        super(message, cause);\n+    }\n+\n+    public LSCodeActionProviderException(Throwable cause) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5Njg1OA=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc3NDk0OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyNzoxM1rOG5QxzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1ODoyMFrOG585bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjkwOA==", "bodyText": "Remove this extra line feed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462696908", "createdAt": "2020-07-30T02:27:13Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;\n+\n+/**\n+ * Ballerina CodeLens Configuration.\n+ */\n+public class DataMapperConfig {\n+    private final boolean enabled;\n+    private final String url;\n+\n+    DataMapperConfig() {\n+        this.enabled = false;\n+        this.url = \"\";\n+    }\n+\n+    public boolean isEnabled() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTc1OQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463419759", "createdAt": "2020-07-31T05:58:20Z", "author": {"login": "Ayodhya94"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;\n+\n+/**\n+ * Ballerina CodeLens Configuration.\n+ */\n+public class DataMapperConfig {\n+    private final boolean enabled;\n+    private final String url;\n+\n+    DataMapperConfig() {\n+        this.enabled = false;\n+        this.url = \"\";\n+    }\n+\n+    public boolean isEnabled() {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjkwOA=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc3NTM1OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyNzozMlrOG5QyFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1ODoyOFrOG585lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5Njk4MA==", "bodyText": "Remove this extra line feed, check for other places as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462696980", "createdAt": "2020-07-30T02:27:32Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;\n+\n+/**\n+ * Ballerina CodeLens Configuration.\n+ */\n+public class DataMapperConfig {\n+    private final boolean enabled;\n+    private final String url;\n+\n+    DataMapperConfig() {\n+        this.enabled = false;\n+        this.url = \"\";\n+    }\n+\n+    public boolean isEnabled() {\n+\n+        return enabled;\n+    }\n+\n+    public String getUrl() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTc5Ng==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463419796", "createdAt": "2020-07-31T05:58:28Z", "author": {"login": "Ayodhya94"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;\n+\n+/**\n+ * Ballerina CodeLens Configuration.\n+ */\n+public class DataMapperConfig {\n+    private final boolean enabled;\n+    private final String url;\n+\n+    DataMapperConfig() {\n+        this.enabled = false;\n+        this.url = \"\";\n+    }\n+\n+    public boolean isEnabled() {\n+\n+        return enabled;\n+    }\n+\n+    public String getUrl() {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5Njk4MA=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc3NjU1OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyODoxNVrOG5Qy0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjowMjozNFrOG5896g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzE3MA==", "bodyText": "Add code-docs for public methods", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462697170", "createdAt": "2020-07-30T02:28:15Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;\n+\n+/**\n+ * Ballerina CodeLens Configuration.\n+ */\n+public class DataMapperConfig {\n+    private final boolean enabled;\n+    private final String url;\n+\n+    DataMapperConfig() {\n+        this.enabled = false;\n+        this.url = \"\";\n+    }\n+\n+    public boolean isEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQyMDkwNg==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463420906", "createdAt": "2020-07-31T06:02:34Z", "author": {"login": "Ayodhya94"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;\n+\n+/**\n+ * Ballerina CodeLens Configuration.\n+ */\n+public class DataMapperConfig {\n+    private final boolean enabled;\n+    private final String url;\n+\n+    DataMapperConfig() {\n+        this.enabled = false;\n+        this.url = \"\";\n+    }\n+\n+    public boolean isEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzE3MA=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc3Njc5OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyODoyMlrOG5Qy9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjowMjo0OVrOG58-NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzIwNw==", "bodyText": "Add code-docs for public methods", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462697207", "createdAt": "2020-07-30T02:28:22Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;\n+\n+/**\n+ * Ballerina CodeLens Configuration.\n+ */\n+public class DataMapperConfig {\n+    private final boolean enabled;\n+    private final String url;\n+\n+    DataMapperConfig() {\n+        this.enabled = false;\n+        this.url = \"\";\n+    }\n+\n+    public boolean isEnabled() {\n+\n+        return enabled;\n+    }\n+\n+    public String getUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQyMDk4MQ==", "bodyText": "Added code-docs", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463420981", "createdAt": "2020-07-31T06:02:49Z", "author": {"login": "Ayodhya94"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;\n+\n+/**\n+ * Ballerina CodeLens Configuration.\n+ */\n+public class DataMapperConfig {\n+    private final boolean enabled;\n+    private final String url;\n+\n+    DataMapperConfig() {\n+        this.enabled = false;\n+        this.url = \"\";\n+    }\n+\n+    public boolean isEnabled() {\n+\n+        return enabled;\n+    }\n+\n+    public String getUrl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzIwNw=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc3OTA1OnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/build-config/checkstyle/checkstyle.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyOTo0N1rOG5Q0YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyOTo0N1rOG5Q0YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzU2OQ==", "bodyText": "Any reason to commit this file?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462697569", "createdAt": "2020-07-30T02:29:47Z", "author": {"login": "rasika"}, "path": "misc/ballerinalang-data-mapper/build-config/checkstyle/checkstyle.xml", "diffHunk": "@@ -0,0 +1,407 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc4NTIxOnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjozMzoxOFrOG5Q36w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjozMzoxOFrOG5Q36w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5ODQ3NQ==", "bodyText": "Can we move this part into try-with-resources approach? So we can remove https://github.com/ballerina-platform/ballerina-lang/pull/25022/files#diff-c9d62fe95c71192e4a81b263dc056364R66 part", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462698475", "createdAt": "2020-07-30T02:33:18Z", "author": {"login": "rasika"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.net.HttpURLConnection;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * This class can be used to send http request.\n+ */\n+public class HttpClientRequest {\n+    private static final Logger LOG = LoggerFactory.getLogger(HttpClientRequest.class);\n+    private static final int DEFAULT_READ_TIMEOUT = 30000;\n+\n+    /**\n+     * Send an HTTP POST request to a service.\n+     *\n+     * @param endpoint - service endpoint\n+     * @param postBody - message payload\n+     * @param headers  http request headers map\n+     * @return - HttpResponse from end point\n+     * @throws IOException If an error occurs while sending the GET request\n+     */\n+    public static HttpResponse doPost(String endpoint, String postBody, Map<String, String> headers)\n+            throws IOException {\n+        HttpURLConnection urlConnection = null;\n+        try {\n+            urlConnection = getURLConnection(endpoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc4OTgzOnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjozNTo1MFrOG5Q6kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODoyODoxNlrOG6AWEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5OTE1NA==", "bodyText": "Add code-docs for public methods(even you copied it from somewhere else)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462699154", "createdAt": "2020-07-30T02:35:50Z", "author": {"login": "rasika"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpResponse.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class is a simple representation of an HTTP response.\n+ */\n+public class HttpResponse {\n+    private String data;\n+    private int responseCode;\n+    private String responseMessage;\n+    private Map<String, String> headers;\n+\n+    public HttpResponse(String data, int responseCode) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+    }\n+\n+    public HttpResponse(String data, int responseCode, Map<String, String> headers) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+        this.headers = headers;\n+    }\n+\n+    public String getData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjI0MA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463476240", "createdAt": "2020-07-31T08:28:16Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpResponse.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class is a simple representation of an HTTP response.\n+ */\n+public class HttpResponse {\n+    private String data;\n+    private int responseCode;\n+    private String responseMessage;\n+    private Map<String, String> headers;\n+\n+    public HttpResponse(String data, int responseCode) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+    }\n+\n+    public HttpResponse(String data, int responseCode, Map<String, String> headers) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+        this.headers = headers;\n+    }\n+\n+    public String getData() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5OTE1NA=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc5MDIwOnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjozNjowNFrOG5Q6xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODoyODowNVrOG6AVxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5OTIwNg==", "bodyText": "Add code-docs for public methods", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462699206", "createdAt": "2020-07-30T02:36:04Z", "author": {"login": "rasika"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpResponse.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class is a simple representation of an HTTP response.\n+ */\n+public class HttpResponse {\n+    private String data;\n+    private int responseCode;\n+    private String responseMessage;\n+    private Map<String, String> headers;\n+\n+    public HttpResponse(String data, int responseCode) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+    }\n+\n+    public HttpResponse(String data, int responseCode, Map<String, String> headers) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+        this.headers = headers;\n+    }\n+\n+    public String getData() {\n+        return data;\n+    }\n+\n+    public int getResponseCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjE2NQ==", "bodyText": "Added code-docs", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463476165", "createdAt": "2020-07-31T08:28:05Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpResponse.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class is a simple representation of an HTTP response.\n+ */\n+public class HttpResponse {\n+    private String data;\n+    private int responseCode;\n+    private String responseMessage;\n+    private Map<String, String> headers;\n+\n+    public HttpResponse(String data, int responseCode) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+    }\n+\n+    public HttpResponse(String data, int responseCode, Map<String, String> headers) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+        this.headers = headers;\n+    }\n+\n+    public String getData() {\n+        return data;\n+    }\n+\n+    public int getResponseCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5OTIwNg=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODc5MjM4OnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/test/java/org/ballerinalang/datamapper/codeaction/CodeActionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjozNzoyM1rOG5Q8HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDoxMjowOVrOG7QZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5OTU0OQ==", "bodyText": "this test method is bit long, commenting would helpful for  readability", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462699549", "createdAt": "2020-07-30T02:37:23Z", "author": {"login": "rasika"}, "path": "misc/ballerinalang-data-mapper/src/test/java/org/ballerinalang/datamapper/codeaction/CodeActionTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.codeaction;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import org.ballerinalang.datamapper.util.FileUtils;\n+import org.ballerinalang.datamapper.util.TestUtil;\n+import org.ballerinalang.datamapper.utils.HttpClientRequest;\n+import org.ballerinalang.datamapper.utils.HttpResponse;\n+import org.ballerinalang.langserver.codeaction.CodeActionUtil;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.testng.PowerMockTestCase;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.any;\n+\n+/**\n+ * Test Cases for CodeActions.\n+ *\n+ * @since 2.0.0\n+ */\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest(HttpClientRequest.class)\n+public class CodeActionTest extends PowerMockTestCase {\n+\n+    private Endpoint serviceEndpoint;\n+\n+    private JsonParser parser = new JsonParser();\n+\n+    private Path sourcesPath = new File(getClass().getClassLoader().getResource(\"codeaction\").getFile()).toPath();\n+\n+    private static final Logger log = LoggerFactory.getLogger(CodeActionTest.class);\n+    private static final int HTTP_200_OK = 200;\n+    private static final int HTTP_422_UN_PROCESSABLE_ENTITY = 422;\n+    private static final int HTTP_500_INTERNAL_SERVER_ERROR = 500;\n+\n+    @BeforeClass\n+    private void init() {\n+        this.serviceEndpoint = TestUtil.initializeLanguageSever();\n+        String startConfigPath = \"codeaction\" + File.separator + \"config\" + File.separator + \"startConfig.json\";\n+        JsonObject configs = FileUtils.fileContentAsObject(startConfigPath);\n+        TestUtil.setWorkspaceConfig(serviceEndpoint, configs);\n+    }\n+\n+    @Test(dataProvider = \"codeAction-data-mapper-data-provider\")\n+    public void testDataMapperCodeAction(String config, String source) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4NzkxNg==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r464787916", "createdAt": "2020-08-04T04:12:09Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/test/java/org/ballerinalang/datamapper/codeaction/CodeActionTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.codeaction;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import org.ballerinalang.datamapper.util.FileUtils;\n+import org.ballerinalang.datamapper.util.TestUtil;\n+import org.ballerinalang.datamapper.utils.HttpClientRequest;\n+import org.ballerinalang.datamapper.utils.HttpResponse;\n+import org.ballerinalang.langserver.codeaction.CodeActionUtil;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.testng.PowerMockTestCase;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.any;\n+\n+/**\n+ * Test Cases for CodeActions.\n+ *\n+ * @since 2.0.0\n+ */\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest(HttpClientRequest.class)\n+public class CodeActionTest extends PowerMockTestCase {\n+\n+    private Endpoint serviceEndpoint;\n+\n+    private JsonParser parser = new JsonParser();\n+\n+    private Path sourcesPath = new File(getClass().getClassLoader().getResource(\"codeaction\").getFile()).toPath();\n+\n+    private static final Logger log = LoggerFactory.getLogger(CodeActionTest.class);\n+    private static final int HTTP_200_OK = 200;\n+    private static final int HTTP_422_UN_PROCESSABLE_ENTITY = 422;\n+    private static final int HTTP_500_INTERNAL_SERVER_ERROR = 500;\n+\n+    @BeforeClass\n+    private void init() {\n+        this.serviceEndpoint = TestUtil.initializeLanguageSever();\n+        String startConfigPath = \"codeaction\" + File.separator + \"config\" + File.separator + \"startConfig.json\";\n+        JsonObject configs = FileUtils.fileContentAsObject(startConfigPath);\n+        TestUtil.setWorkspaceConfig(serviceEndpoint, configs);\n+    }\n+\n+    @Test(dataProvider = \"codeAction-data-mapper-data-provider\")\n+    public void testDataMapperCodeAction(String config, String source) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5OTU0OQ=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODgwNDM0OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjo0NDozMFrOG5RDRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODozMjowNVrOG_XUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcwMTM4Mw==", "bodyText": "Missing license agreement", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462701383", "createdAt": "2020-07-30T02:44:30Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQyMTMwNQ==", "bodyText": "Added license agreement", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463421305", "createdAt": "2020-07-31T06:04:10Z", "author": {"login": "Ayodhya94"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcwMTM4Mw=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NTUzNg==", "bodyText": "It seems the license header is not properly added. The last part is missing and also new lines are missing. Refer [1] for example.\n[1] https://github.com/ballerina-platform/ballerina-lang/blob/master/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSClientConfig.java", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469095536", "createdAt": "2020-08-12T08:32:05Z", "author": {"login": "anupama-pathirage"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/DataMapperConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.ballerinalang.langserver.compiler.config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcwMTM4Mw=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODgwNTE4OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/LSClientConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjo0NDo1NFrOG5RDuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjowNTo0OFrOG59BRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcwMTQ5OQ==", "bodyText": "format needed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462701499", "createdAt": "2020-07-30T02:44:54Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/LSClientConfig.java", "diffHunk": "@@ -105,4 +107,9 @@ public boolean isTraceLogEnabled() {\n     public GoToDefinitionConfig getGoToDefinition() {\n         return goToDefinition;\n     }\n+\n+    public DataMapperConfig getDataMapper() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQyMTc2Ng==", "bodyText": "Formatted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463421766", "createdAt": "2020-07-31T06:05:48Z", "author": {"login": "Ayodhya94"}, "path": "language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/config/LSClientConfig.java", "diffHunk": "@@ -105,4 +107,9 @@ public boolean isTraceLogEnabled() {\n     public GoToDefinitionConfig getGoToDefinition() {\n         return goToDefinition;\n     }\n+\n+    public DataMapperConfig getDataMapper() {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcwMTQ5OQ=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDQ4MDQxOnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/test/resources/testng.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozMDozMlrOG5g6FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjowNzo1N1rOG59DeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MTE3Mw==", "bodyText": "Change the copyright statement here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r462961173", "createdAt": "2020-07-30T12:30:32Z", "author": {"login": "miyurud"}, "path": "misc/ballerinalang-data-mapper/src/test/resources/testng.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQyMjMyOA==", "bodyText": "Changed the statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r463422328", "createdAt": "2020-07-31T06:07:57Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/test/resources/testng.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MTE3Mw=="}, "originalCommit": {"oid": "567f0056394f6a218b3fd2c8ce94369d94b8d662"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzE2MzAwOnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDo0ODozNVrOG-ybLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxMTowMFrOG-3Dxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5MTA1NA==", "bodyText": "We might not need all of these modules, let's remove them as soon as we merge the PR", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r468491054", "createdAt": "2020-08-11T10:48:35Z", "author": {"login": "nadeeshaan"}, "path": "misc/ballerinalang-data-mapper/build.gradle", "diffHunk": "@@ -0,0 +1,112 @@\n+apply from: \"$rootDir/gradle/javaProjectWithExtBalo.gradle\"\n+apply from: \"$rootDir/gradle/baseNativeStdLibProject.gradle\"\n+\n+//apply plugin: 'jacoco'\n+\n+configurations {\n+    dist {\n+        transitive false\n+    }\n+    dependency {\n+        transitive false\n+    }\n+    libs\n+}\n+\n+repositories {\n+    jcenter()\n+}\n+\n+dependencies {\n+    implementation project(':ballerina-lang')\n+    implementation project(':ballerina-parser')\n+    implementation project(':ballerina-runtime')\n+    implementation project(':language-server:language-server-commons')\n+    implementation project(':language-server:language-server-compiler')\n+    implementation project(':language-server:language-server-core')\n+    implementation project(':language-server:language-server-cli')\n+    implementation project(':openapi-ballerina:openapi-validator')\n+    implementation project(':openapi-ballerina:openapi-to-ballerina-generator')\n+    implementation project(':openapi-ballerina:ballerina-to-openapi-generator')\n+\n+    // Standard libs\n+    implementation project(':ballerina-auth')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f595321eb4065943e4b9a3d29d3e60430a4c5c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2Njk4Mw==", "bodyText": "Okay.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r468566983", "createdAt": "2020-08-11T13:11:00Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/build.gradle", "diffHunk": "@@ -0,0 +1,112 @@\n+apply from: \"$rootDir/gradle/javaProjectWithExtBalo.gradle\"\n+apply from: \"$rootDir/gradle/baseNativeStdLibProject.gradle\"\n+\n+//apply plugin: 'jacoco'\n+\n+configurations {\n+    dist {\n+        transitive false\n+    }\n+    dependency {\n+        transitive false\n+    }\n+    libs\n+}\n+\n+repositories {\n+    jcenter()\n+}\n+\n+dependencies {\n+    implementation project(':ballerina-lang')\n+    implementation project(':ballerina-parser')\n+    implementation project(':ballerina-runtime')\n+    implementation project(':language-server:language-server-commons')\n+    implementation project(':language-server:language-server-compiler')\n+    implementation project(':language-server:language-server-core')\n+    implementation project(':language-server:language-server-cli')\n+    implementation project(':openapi-ballerina:openapi-validator')\n+    implementation project(':openapi-ballerina:openapi-to-ballerina-generator')\n+    implementation project(':openapi-ballerina:ballerina-to-openapi-generator')\n+\n+    // Standard libs\n+    implementation project(':ballerina-auth')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5MTA1NA=="}, "originalCommit": {"oid": "a2f595321eb4065943e4b9a3d29d3e60430a4c5c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTA1MDMxOnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/AIDataMapperCodeAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODozMTo1MVrOG_XT9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo1NjoxNVrOG_cMEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NTQxMw==", "bodyText": "It seems the license header is not properly added. The last part is missing and also new lines are missing. Refer [1] for example.\n[1] https://github.com/ballerina-platform/ballerina-lang/blob/master/tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/preloading/LSClientConfig.java", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469095413", "createdAt": "2020-08-12T08:31:51Z", "author": {"login": "anupama-pathirage"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/AIDataMapperCodeAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NTMxMw==", "bodyText": "Changed the license header as suggested", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469175313", "createdAt": "2020-08-12T10:56:15Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/AIDataMapperCodeAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NTQxMw=="}, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTA1MjI4OnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/AIDataMapperCodeActionUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODozMjoyM1rOG_XVFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo1NjozNlrOG_cMtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NTcwMw==", "bodyText": "Same as above. Check all the places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469095703", "createdAt": "2020-08-12T08:32:23Z", "author": {"login": "anupama-pathirage"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/AIDataMapperCodeActionUtil.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NTQ3OA==", "bodyText": "Changed the license headers as suggested", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469175478", "createdAt": "2020-08-12T10:56:36Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/AIDataMapperCodeActionUtil.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NTcwMw=="}, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTA1ODk5OnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/AIDataMapperCodeActionUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODozNDoyNlrOG_XZTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjozMjo1MlrOG_fNdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5Njc4Mg==", "bodyText": "Can we define set of constants for these fields as we are using them in multiple places. Then we can find the usages easily and change easily in future if requrired.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469096782", "createdAt": "2020-08-12T08:34:26Z", "author": {"login": "anupama-pathirage"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/AIDataMapperCodeActionUtil.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import org.ballerinalang.datamapper.utils.HttpClientRequest;\n+import org.ballerinalang.datamapper.utils.HttpResponse;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentManager;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.config.LSClientConfigHolder;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BField;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+\n+/**\n+ * Automatic data mapping code action related utils.\n+ */\n+class AIDataMapperCodeActionUtil {\n+    private static final int HTTP_200_OK = 200;\n+    private static final int HTTP_422_UN_PROCESSABLE_ENTITY = 422;\n+    private static final int HTTP_500_INTERNAL_SERVER_ERROR = 500;\n+    private static final int MAXIMUM_CACHE_SIZE = 100;\n+    private static Cache<Integer, String> mappingCache =\n+            CacheBuilder.newBuilder().maximumSize(MAXIMUM_CACHE_SIZE).build();\n+\n+    /**\n+     * Returns the workspace edits for the automatic data mapping code action.\n+     *\n+     * @param context     {@link LSContext}\n+     * @param refAtCursor {@link SymbolReferencesModel.Reference}\n+     * @param diagnostic  {@link Diagnostic}\n+     * @return edits for the data mapper code action\n+     * @throws IOException                throws if error occurred when getting generatedRecordMappingFunction\n+     * @throws WorkspaceDocumentException throws if error occurred when reading file content\n+     */\n+    static List<TextEdit> getAIDataMapperCodeActionEdits(LSContext context,\n+                                                         SymbolReferencesModel.Reference refAtCursor,\n+                                                         Diagnostic diagnostic)\n+            throws IOException, WorkspaceDocumentException {\n+        List<TextEdit> fEdits = new ArrayList<>();\n+        String diagnosticMessage = diagnostic.getMessage();\n+        Matcher matcher = CommandConstants.INCOMPATIBLE_TYPE_PATTERN.matcher(diagnosticMessage);\n+\n+        if (!(matcher.find() && matcher.groupCount() > 1)) {\n+            return fEdits;\n+        }\n+        String foundTypeLeft = matcher.group(1)\n+                .replaceAll(refAtCursor.getSymbol().type.tsymbol.pkgID.toString() + \":\",\n+                        \"\");  // variable at left side of the equal sign\n+        String foundTypeRight = matcher.group(2)\n+                .replaceAll(refAtCursor.getSymbol().type.tsymbol.pkgID.toString() + \":\",\n+                        \"\");  // variable at right side of the equal sign\n+\n+        // Insert function call in the code where error is found\n+        BLangNode bLangNode = refAtCursor.getbLangNode();\n+        Position startPos = new Position(bLangNode.pos.sLine - 1, bLangNode.pos.sCol - 1);\n+        Position endPosWithSemiColon = new Position(bLangNode.pos.eLine - 1, bLangNode.pos.eCol);\n+        Range newTextRange = new Range(startPos, endPosWithSemiColon);\n+\n+        BSymbol symbolAtCursor = refAtCursor.getSymbol();\n+        String generatedFunctionName =\n+                String.format(\"map%sTo%s(%s);\", foundTypeRight, foundTypeLeft, symbolAtCursor.name.value);\n+        fEdits.add(new TextEdit(newTextRange, generatedFunctionName));\n+\n+        // Insert function declaration at the bottom of the file\n+        WorkspaceDocumentManager docManager = context.get(DocumentServiceKeys.DOC_MANAGER_KEY);\n+        Optional<Path> filePath = CommonUtil.getPathFromURI(context.get(DocumentServiceKeys.FILE_URI_KEY));\n+        if (filePath.isPresent()) {\n+            String fileContent = docManager.getFileContent(Paths.get(String.valueOf(filePath.get())));\n+            String functionName = String.format(\"map%sTo%s (%s\", foundTypeRight, foundTypeLeft, foundTypeRight);\n+            if (!fileContent.contains(functionName)) {\n+                int numberOfLinesInFile = fileContent.split(\"\\n\").length;\n+                Position startPosOfLastLine = new Position(numberOfLinesInFile + 2, 0);\n+                Position endPosOfLastLine = new Position(numberOfLinesInFile + 2, 1);\n+                Range newFunctionRange = new Range(startPosOfLastLine, endPosOfLastLine);\n+                String generatedRecordMappingFunction =\n+                        getGeneratedRecordMappingFunction(bLangNode, symbolAtCursor, foundTypeLeft, foundTypeRight);\n+                fEdits.add(new TextEdit(newFunctionRange, generatedRecordMappingFunction));\n+            }\n+        }\n+        return fEdits;\n+    }\n+\n+    /**\n+     * Given two record types, this returns a function with mapped schemas.\n+     *\n+     * @param bLangNode      {@link BLangNode}\n+     * @param symbolAtCursor {@link BSymbol}\n+     * @param foundTypeLeft  {@link String}\n+     * @param foundTypeRight {@link String}\n+     * @return function string with mapped schemas\n+     * @throws IOException throws if error occurred when getting mapped function\n+     */\n+    private static String getGeneratedRecordMappingFunction(BLangNode bLangNode, BSymbol symbolAtCursor,\n+                                                            String foundTypeLeft, String foundTypeRight)\n+            throws IOException {\n+        JsonObject rightRecordJSON = new JsonObject();\n+        JsonObject leftRecordJSON = new JsonObject();\n+\n+        // Schema 1\n+        BType variableTypeMappingFrom = symbolAtCursor.type;\n+        if (variableTypeMappingFrom instanceof BRecordType) {\n+            List<BField> rightSchemaFields = new ArrayList<>(((BRecordType) variableTypeMappingFrom).fields.values());\n+            JsonObject rightSchema = (JsonObject) recordToJSON(rightSchemaFields);\n+\n+            rightRecordJSON.addProperty(\"schema\", foundTypeRight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNDgyMQ==", "bodyText": "Defined them as constants", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469224821", "createdAt": "2020-08-12T12:32:52Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/AIDataMapperCodeActionUtil.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import org.ballerinalang.datamapper.utils.HttpClientRequest;\n+import org.ballerinalang.datamapper.utils.HttpResponse;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentManager;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.config.LSClientConfigHolder;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BField;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+\n+/**\n+ * Automatic data mapping code action related utils.\n+ */\n+class AIDataMapperCodeActionUtil {\n+    private static final int HTTP_200_OK = 200;\n+    private static final int HTTP_422_UN_PROCESSABLE_ENTITY = 422;\n+    private static final int HTTP_500_INTERNAL_SERVER_ERROR = 500;\n+    private static final int MAXIMUM_CACHE_SIZE = 100;\n+    private static Cache<Integer, String> mappingCache =\n+            CacheBuilder.newBuilder().maximumSize(MAXIMUM_CACHE_SIZE).build();\n+\n+    /**\n+     * Returns the workspace edits for the automatic data mapping code action.\n+     *\n+     * @param context     {@link LSContext}\n+     * @param refAtCursor {@link SymbolReferencesModel.Reference}\n+     * @param diagnostic  {@link Diagnostic}\n+     * @return edits for the data mapper code action\n+     * @throws IOException                throws if error occurred when getting generatedRecordMappingFunction\n+     * @throws WorkspaceDocumentException throws if error occurred when reading file content\n+     */\n+    static List<TextEdit> getAIDataMapperCodeActionEdits(LSContext context,\n+                                                         SymbolReferencesModel.Reference refAtCursor,\n+                                                         Diagnostic diagnostic)\n+            throws IOException, WorkspaceDocumentException {\n+        List<TextEdit> fEdits = new ArrayList<>();\n+        String diagnosticMessage = diagnostic.getMessage();\n+        Matcher matcher = CommandConstants.INCOMPATIBLE_TYPE_PATTERN.matcher(diagnosticMessage);\n+\n+        if (!(matcher.find() && matcher.groupCount() > 1)) {\n+            return fEdits;\n+        }\n+        String foundTypeLeft = matcher.group(1)\n+                .replaceAll(refAtCursor.getSymbol().type.tsymbol.pkgID.toString() + \":\",\n+                        \"\");  // variable at left side of the equal sign\n+        String foundTypeRight = matcher.group(2)\n+                .replaceAll(refAtCursor.getSymbol().type.tsymbol.pkgID.toString() + \":\",\n+                        \"\");  // variable at right side of the equal sign\n+\n+        // Insert function call in the code where error is found\n+        BLangNode bLangNode = refAtCursor.getbLangNode();\n+        Position startPos = new Position(bLangNode.pos.sLine - 1, bLangNode.pos.sCol - 1);\n+        Position endPosWithSemiColon = new Position(bLangNode.pos.eLine - 1, bLangNode.pos.eCol);\n+        Range newTextRange = new Range(startPos, endPosWithSemiColon);\n+\n+        BSymbol symbolAtCursor = refAtCursor.getSymbol();\n+        String generatedFunctionName =\n+                String.format(\"map%sTo%s(%s);\", foundTypeRight, foundTypeLeft, symbolAtCursor.name.value);\n+        fEdits.add(new TextEdit(newTextRange, generatedFunctionName));\n+\n+        // Insert function declaration at the bottom of the file\n+        WorkspaceDocumentManager docManager = context.get(DocumentServiceKeys.DOC_MANAGER_KEY);\n+        Optional<Path> filePath = CommonUtil.getPathFromURI(context.get(DocumentServiceKeys.FILE_URI_KEY));\n+        if (filePath.isPresent()) {\n+            String fileContent = docManager.getFileContent(Paths.get(String.valueOf(filePath.get())));\n+            String functionName = String.format(\"map%sTo%s (%s\", foundTypeRight, foundTypeLeft, foundTypeRight);\n+            if (!fileContent.contains(functionName)) {\n+                int numberOfLinesInFile = fileContent.split(\"\\n\").length;\n+                Position startPosOfLastLine = new Position(numberOfLinesInFile + 2, 0);\n+                Position endPosOfLastLine = new Position(numberOfLinesInFile + 2, 1);\n+                Range newFunctionRange = new Range(startPosOfLastLine, endPosOfLastLine);\n+                String generatedRecordMappingFunction =\n+                        getGeneratedRecordMappingFunction(bLangNode, symbolAtCursor, foundTypeLeft, foundTypeRight);\n+                fEdits.add(new TextEdit(newFunctionRange, generatedRecordMappingFunction));\n+            }\n+        }\n+        return fEdits;\n+    }\n+\n+    /**\n+     * Given two record types, this returns a function with mapped schemas.\n+     *\n+     * @param bLangNode      {@link BLangNode}\n+     * @param symbolAtCursor {@link BSymbol}\n+     * @param foundTypeLeft  {@link String}\n+     * @param foundTypeRight {@link String}\n+     * @return function string with mapped schemas\n+     * @throws IOException throws if error occurred when getting mapped function\n+     */\n+    private static String getGeneratedRecordMappingFunction(BLangNode bLangNode, BSymbol symbolAtCursor,\n+                                                            String foundTypeLeft, String foundTypeRight)\n+            throws IOException {\n+        JsonObject rightRecordJSON = new JsonObject();\n+        JsonObject leftRecordJSON = new JsonObject();\n+\n+        // Schema 1\n+        BType variableTypeMappingFrom = symbolAtCursor.type;\n+        if (variableTypeMappingFrom instanceof BRecordType) {\n+            List<BField> rightSchemaFields = new ArrayList<>(((BRecordType) variableTypeMappingFrom).fields.values());\n+            JsonObject rightSchema = (JsonObject) recordToJSON(rightSchemaFields);\n+\n+            rightRecordJSON.addProperty(\"schema\", foundTypeRight);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5Njc4Mg=="}, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTEyMzU1OnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1MToyMVrOG_YAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTowMjoyOFrOG_cXaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNjgwNQ==", "bodyText": "Should be = new HashMap<>();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469106805", "createdAt": "2020-08-12T08:51:21Z", "author": {"login": "anupama-pathirage"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.net.HttpURLConnection;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * This class can be used to send http request.\n+ */\n+public class HttpClientRequest {\n+    private static final Logger LOG = LoggerFactory.getLogger(HttpClientRequest.class);\n+    private static final int DEFAULT_READ_TIMEOUT = 30000;\n+\n+    /**\n+     * Send an HTTP POST request to a service.\n+     *\n+     * @param endpoint - service endpoint\n+     * @param postBody - message payload\n+     * @param headers  http request headers map\n+     * @return - HttpResponse from end point\n+     * @throws IOException If an error occurs while sending the GET request\n+     */\n+    public static HttpResponse doPost(String endpoint, String postBody, Map<String, String> headers)\n+            throws IOException {\n+        HttpURLConnection urlConnection = null;\n+        try {\n+            urlConnection = getURLConnection(endpoint);\n+            setHeadersAndMethod(urlConnection, headers, \"POST\");\n+            try (OutputStream out = urlConnection.getOutputStream();\n+                 Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {\n+                writer.write(postBody);\n+            }\n+            return buildResponse(urlConnection);\n+        } finally {\n+            if (urlConnection != null) {\n+                urlConnection.disconnect();\n+            }\n+        }\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl) throws IOException {\n+        return getURLConnection(requestUrl, DEFAULT_READ_TIMEOUT);\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl, int readTimeout) throws IOException {\n+        URL url = new URL(requestUrl);\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+        conn.setDoOutput(true);\n+        conn.setReadTimeout(readTimeout);\n+        conn.setConnectTimeout(15000);\n+        conn.setDoInput(true);\n+        conn.setUseCaches(true);\n+        conn.setAllowUserInteraction(false);\n+        return conn;\n+    }\n+\n+    private static Map<String, String> readHeaders(URLConnection urlConnection) {\n+        Iterator<String> itr = urlConnection.getHeaderFields().keySet().iterator();\n+        Map<String, String> headers = new HashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3ODIxNg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469178216", "createdAt": "2020-08-12T11:02:28Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.net.HttpURLConnection;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * This class can be used to send http request.\n+ */\n+public class HttpClientRequest {\n+    private static final Logger LOG = LoggerFactory.getLogger(HttpClientRequest.class);\n+    private static final int DEFAULT_READ_TIMEOUT = 30000;\n+\n+    /**\n+     * Send an HTTP POST request to a service.\n+     *\n+     * @param endpoint - service endpoint\n+     * @param postBody - message payload\n+     * @param headers  http request headers map\n+     * @return - HttpResponse from end point\n+     * @throws IOException If an error occurs while sending the GET request\n+     */\n+    public static HttpResponse doPost(String endpoint, String postBody, Map<String, String> headers)\n+            throws IOException {\n+        HttpURLConnection urlConnection = null;\n+        try {\n+            urlConnection = getURLConnection(endpoint);\n+            setHeadersAndMethod(urlConnection, headers, \"POST\");\n+            try (OutputStream out = urlConnection.getOutputStream();\n+                 Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {\n+                writer.write(postBody);\n+            }\n+            return buildResponse(urlConnection);\n+        } finally {\n+            if (urlConnection != null) {\n+                urlConnection.disconnect();\n+            }\n+        }\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl) throws IOException {\n+        return getURLConnection(requestUrl, DEFAULT_READ_TIMEOUT);\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl, int readTimeout) throws IOException {\n+        URL url = new URL(requestUrl);\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+        conn.setDoOutput(true);\n+        conn.setReadTimeout(readTimeout);\n+        conn.setConnectTimeout(15000);\n+        conn.setDoInput(true);\n+        conn.setUseCaches(true);\n+        conn.setAllowUserInteraction(false);\n+        return conn;\n+    }\n+\n+    private static Map<String, String> readHeaders(URLConnection urlConnection) {\n+        Iterator<String> itr = urlConnection.getHeaderFields().keySet().iterator();\n+        Map<String, String> headers = new HashMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNjgwNQ=="}, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTEzNDMzOnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1Mzo1OFrOG_YHCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTowODozOVrOG_ciQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwODQ5MA==", "bodyText": "Why readTimeout is passed as a parameter as it is constant. Also for connect time out also, we have used a constant value(15000) but it is not passed as a parameter or defined as a constant. Can we follow the same convention for all the properties?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469108490", "createdAt": "2020-08-12T08:53:58Z", "author": {"login": "anupama-pathirage"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.net.HttpURLConnection;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * This class can be used to send http request.\n+ */\n+public class HttpClientRequest {\n+    private static final Logger LOG = LoggerFactory.getLogger(HttpClientRequest.class);\n+    private static final int DEFAULT_READ_TIMEOUT = 30000;\n+\n+    /**\n+     * Send an HTTP POST request to a service.\n+     *\n+     * @param endpoint - service endpoint\n+     * @param postBody - message payload\n+     * @param headers  http request headers map\n+     * @return - HttpResponse from end point\n+     * @throws IOException If an error occurs while sending the GET request\n+     */\n+    public static HttpResponse doPost(String endpoint, String postBody, Map<String, String> headers)\n+            throws IOException {\n+        HttpURLConnection urlConnection = null;\n+        try {\n+            urlConnection = getURLConnection(endpoint);\n+            setHeadersAndMethod(urlConnection, headers, \"POST\");\n+            try (OutputStream out = urlConnection.getOutputStream();\n+                 Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {\n+                writer.write(postBody);\n+            }\n+            return buildResponse(urlConnection);\n+        } finally {\n+            if (urlConnection != null) {\n+                urlConnection.disconnect();\n+            }\n+        }\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl) throws IOException {\n+        return getURLConnection(requestUrl, DEFAULT_READ_TIMEOUT);\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl, int readTimeout) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4MDk5NA==", "bodyText": "Made the changes to follow the same convention.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469180994", "createdAt": "2020-08-12T11:08:39Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.net.HttpURLConnection;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * This class can be used to send http request.\n+ */\n+public class HttpClientRequest {\n+    private static final Logger LOG = LoggerFactory.getLogger(HttpClientRequest.class);\n+    private static final int DEFAULT_READ_TIMEOUT = 30000;\n+\n+    /**\n+     * Send an HTTP POST request to a service.\n+     *\n+     * @param endpoint - service endpoint\n+     * @param postBody - message payload\n+     * @param headers  http request headers map\n+     * @return - HttpResponse from end point\n+     * @throws IOException If an error occurs while sending the GET request\n+     */\n+    public static HttpResponse doPost(String endpoint, String postBody, Map<String, String> headers)\n+            throws IOException {\n+        HttpURLConnection urlConnection = null;\n+        try {\n+            urlConnection = getURLConnection(endpoint);\n+            setHeadersAndMethod(urlConnection, headers, \"POST\");\n+            try (OutputStream out = urlConnection.getOutputStream();\n+                 Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {\n+                writer.write(postBody);\n+            }\n+            return buildResponse(urlConnection);\n+        } finally {\n+            if (urlConnection != null) {\n+                urlConnection.disconnect();\n+            }\n+        }\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl) throws IOException {\n+        return getURLConnection(requestUrl, DEFAULT_READ_TIMEOUT);\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl, int readTimeout) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwODQ5MA=="}, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE0MTE0OnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1NTozN1rOG_YLBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMToxMTozNlrOG_cnqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwOTUwOQ==", "bodyText": "We have only one usage of buildResponse function. So why do we need to pass throwError as a parameter which is always false.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469109509", "createdAt": "2020-08-12T08:55:37Z", "author": {"login": "anupama-pathirage"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.net.HttpURLConnection;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * This class can be used to send http request.\n+ */\n+public class HttpClientRequest {\n+    private static final Logger LOG = LoggerFactory.getLogger(HttpClientRequest.class);\n+    private static final int DEFAULT_READ_TIMEOUT = 30000;\n+\n+    /**\n+     * Send an HTTP POST request to a service.\n+     *\n+     * @param endpoint - service endpoint\n+     * @param postBody - message payload\n+     * @param headers  http request headers map\n+     * @return - HttpResponse from end point\n+     * @throws IOException If an error occurs while sending the GET request\n+     */\n+    public static HttpResponse doPost(String endpoint, String postBody, Map<String, String> headers)\n+            throws IOException {\n+        HttpURLConnection urlConnection = null;\n+        try {\n+            urlConnection = getURLConnection(endpoint);\n+            setHeadersAndMethod(urlConnection, headers, \"POST\");\n+            try (OutputStream out = urlConnection.getOutputStream();\n+                 Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {\n+                writer.write(postBody);\n+            }\n+            return buildResponse(urlConnection);\n+        } finally {\n+            if (urlConnection != null) {\n+                urlConnection.disconnect();\n+            }\n+        }\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl) throws IOException {\n+        return getURLConnection(requestUrl, DEFAULT_READ_TIMEOUT);\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl, int readTimeout) throws IOException {\n+        URL url = new URL(requestUrl);\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+        conn.setDoOutput(true);\n+        conn.setReadTimeout(readTimeout);\n+        conn.setConnectTimeout(15000);\n+        conn.setDoInput(true);\n+        conn.setUseCaches(true);\n+        conn.setAllowUserInteraction(false);\n+        return conn;\n+    }\n+\n+    private static Map<String, String> readHeaders(URLConnection urlConnection) {\n+        Iterator<String> itr = urlConnection.getHeaderFields().keySet().iterator();\n+        Map<String, String> headers = new HashMap();\n+        while (itr.hasNext()) {\n+            String key = itr.next();\n+            if (key != null) {\n+                headers.put(key, urlConnection.getHeaderField(key));\n+            }\n+        }\n+        return headers;\n+    }\n+\n+    private static void setHeadersAndMethod(HttpURLConnection conn, Map<String, String> headers, String method)\n+            throws ProtocolException {\n+        for (Map.Entry<String, String> e : headers.entrySet()) {\n+            conn.addRequestProperty(e.getKey(), e.getValue());\n+        }\n+        conn.setRequestMethod(method);\n+    }\n+\n+    private static HttpResponse buildResponse(HttpURLConnection conn) throws IOException {\n+        return buildResponse(conn, defaultResponseBuilder, false);\n+    }\n+\n+    private static HttpResponse buildResponse(HttpURLConnection conn,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4MjM3OQ==", "bodyText": "Removed unwanted parameter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469182379", "createdAt": "2020-08-12T11:11:36Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpClientRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.net.HttpURLConnection;\n+import java.net.ProtocolException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * This class can be used to send http request.\n+ */\n+public class HttpClientRequest {\n+    private static final Logger LOG = LoggerFactory.getLogger(HttpClientRequest.class);\n+    private static final int DEFAULT_READ_TIMEOUT = 30000;\n+\n+    /**\n+     * Send an HTTP POST request to a service.\n+     *\n+     * @param endpoint - service endpoint\n+     * @param postBody - message payload\n+     * @param headers  http request headers map\n+     * @return - HttpResponse from end point\n+     * @throws IOException If an error occurs while sending the GET request\n+     */\n+    public static HttpResponse doPost(String endpoint, String postBody, Map<String, String> headers)\n+            throws IOException {\n+        HttpURLConnection urlConnection = null;\n+        try {\n+            urlConnection = getURLConnection(endpoint);\n+            setHeadersAndMethod(urlConnection, headers, \"POST\");\n+            try (OutputStream out = urlConnection.getOutputStream();\n+                 Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {\n+                writer.write(postBody);\n+            }\n+            return buildResponse(urlConnection);\n+        } finally {\n+            if (urlConnection != null) {\n+                urlConnection.disconnect();\n+            }\n+        }\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl) throws IOException {\n+        return getURLConnection(requestUrl, DEFAULT_READ_TIMEOUT);\n+    }\n+\n+    private static HttpURLConnection getURLConnection(String requestUrl, int readTimeout) throws IOException {\n+        URL url = new URL(requestUrl);\n+        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+        conn.setDoOutput(true);\n+        conn.setReadTimeout(readTimeout);\n+        conn.setConnectTimeout(15000);\n+        conn.setDoInput(true);\n+        conn.setUseCaches(true);\n+        conn.setAllowUserInteraction(false);\n+        return conn;\n+    }\n+\n+    private static Map<String, String> readHeaders(URLConnection urlConnection) {\n+        Iterator<String> itr = urlConnection.getHeaderFields().keySet().iterator();\n+        Map<String, String> headers = new HashMap();\n+        while (itr.hasNext()) {\n+            String key = itr.next();\n+            if (key != null) {\n+                headers.put(key, urlConnection.getHeaderField(key));\n+            }\n+        }\n+        return headers;\n+    }\n+\n+    private static void setHeadersAndMethod(HttpURLConnection conn, Map<String, String> headers, String method)\n+            throws ProtocolException {\n+        for (Map.Entry<String, String> e : headers.entrySet()) {\n+            conn.addRequestProperty(e.getKey(), e.getValue());\n+        }\n+        conn.setRequestMethod(method);\n+    }\n+\n+    private static HttpResponse buildResponse(HttpURLConnection conn) throws IOException {\n+        return buildResponse(conn, defaultResponseBuilder, false);\n+    }\n+\n+    private static HttpResponse buildResponse(HttpURLConnection conn,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwOTUwOQ=="}, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTQ5OTE4OnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozNTo0MVrOG_blog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMToxNDozN1rOG_ctCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTQ3NA==", "bodyText": "Input parameter headers is unused.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469165474", "createdAt": "2020-08-12T10:35:41Z", "author": {"login": "anupama-pathirage"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpResponse.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class is a simple representation of an HTTP response.\n+ */\n+public class HttpResponse {\n+    private String data;\n+    private int responseCode;\n+\n+    /**\n+     * This method set data and response code of a HTTP request response.\n+     * @param data {@link String}\n+     * @param responseCode {@link int}\n+     */\n+    public HttpResponse(String data, int responseCode) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+    }\n+\n+    HttpResponse(String data, int responseCode, Map<String, String> headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4Mzc1Mg==", "bodyText": "Removed unwanted parameters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469183752", "createdAt": "2020-08-12T11:14:37Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/main/java/org/ballerinalang/datamapper/utils/HttpResponse.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n+ *\n+ * This software is the property of WSO2 Inc. and its suppliers, if any.\n+ * Dissemination of any information or reproduction of any material contained\n+ * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n+ * the WSO2 Commercial License available at http://wso2.com/licenses.\n+ * For specific language governing the permissions and limitations under\n+ * this license, please see the license as well as any agreement you\u2019ve\n+ * entered into with WSO2 governing the purchase of this software and any\n+ */\n+package org.ballerinalang.datamapper.utils;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class is a simple representation of an HTTP response.\n+ */\n+public class HttpResponse {\n+    private String data;\n+    private int responseCode;\n+\n+    /**\n+     * This method set data and response code of a HTTP request response.\n+     * @param data {@link String}\n+     * @param responseCode {@link int}\n+     */\n+    public HttpResponse(String data, int responseCode) {\n+        this.data = data;\n+        this.responseCode = responseCode;\n+    }\n+\n+    HttpResponse(String data, int responseCode, Map<String, String> headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTQ3NA=="}, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTUxMzU4OnYy", "diffSide": "RIGHT", "path": "misc/ballerinalang-data-mapper/src/test/resources/codeaction/source/dataMapper1.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0MDoyM1rOG_buVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjowMDo1N1rOG_eCGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NzcwMw==", "bodyText": "Please add license header for all .bal files as well. Check all the places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469167703", "createdAt": "2020-08-12T10:40:23Z", "author": {"login": "anupama-pathirage"}, "path": "misc/ballerinalang-data-mapper/src/test/resources/codeaction/source/dataMapper1.bal", "diffHunk": "@@ -0,0 +1,28 @@\n+type Grades record {|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwNTUyOA==", "bodyText": "Added license headers", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25022#discussion_r469205528", "createdAt": "2020-08-12T12:00:57Z", "author": {"login": "Ayodhya94"}, "path": "misc/ballerinalang-data-mapper/src/test/resources/codeaction/source/dataMapper1.bal", "diffHunk": "@@ -0,0 +1,28 @@\n+type Grades record {|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NzcwMw=="}, "originalCommit": {"oid": "0b74279f2836174fa8ab32341fc0c954995b959c"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 310, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}