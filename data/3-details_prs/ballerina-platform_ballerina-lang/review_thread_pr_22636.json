{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjcxNTQ5", "number": 22636, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjozNDo1M1rOD5RVAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo1NTo1NFrOD6jZ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzc5MzI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjozNDo1M1rOGQcI9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoxODoyMlrOGUkdnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTQ0Ng==", "bodyText": "Is this a valid case, the XML module symbol being null? Shouldn't the XML lang lib always be available by this point? In which case, this is an invalid state", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419891446", "createdAt": "2020-05-05T06:34:53Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1322,4 +1324,48 @@ private boolean isMemberAllowed(SymbolEnv env, BSymbol symbol) {\n                 && env.enclInvokable.symbol.receiverSymbol.type.tsymbol == symbol.owner\n                 || isMemberAllowed(env.enclEnv, symbol));\n     }\n+\n+    public void loadFunctionalConstructors() {\n+        BPackageSymbol xmlModuleSymbol = symTable.langXmlModuleSymbol;\n+        if (xmlModuleSymbol == null) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NTk4MA==", "bodyText": "This[1] is without this exit condition, couldn't figureout why it fails like this\n[1] - https://scans.gradle.com/s/c5uvl2bsschds", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422485980", "createdAt": "2020-05-09T11:39:20Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1322,4 +1324,48 @@ private boolean isMemberAllowed(SymbolEnv env, BSymbol symbol) {\n                 && env.enclInvokable.symbol.receiverSymbol.type.tsymbol == symbol.owner\n                 || isMemberAllowed(env.enclEnv, symbol));\n     }\n+\n+    public void loadFunctionalConstructors() {\n+        BPackageSymbol xmlModuleSymbol = symTable.langXmlModuleSymbol;\n+        if (xmlModuleSymbol == null) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTQ0Ng=="}, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMjExMQ==", "bodyText": "Hmm.. Could it be a Gradle dependency issue? I had a look at the log. createBStringBalo task doesn't seem to have run for the ballerina-lang:xml module. Could it be that?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r424222111", "createdAt": "2020-05-13T07:18:22Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1322,4 +1324,48 @@ private boolean isMemberAllowed(SymbolEnv env, BSymbol symbol) {\n                 && env.enclInvokable.symbol.receiverSymbol.type.tsymbol == symbol.owner\n                 || isMemberAllowed(env.enclEnv, symbol));\n     }\n+\n+    public void loadFunctionalConstructors() {\n+        BPackageSymbol xmlModuleSymbol = symTable.langXmlModuleSymbol;\n+        if (xmlModuleSymbol == null) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTQ0Ng=="}, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzg4MDE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzowOToxOVrOGQc9CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzowOToxOVrOGQc9CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwNDc3Ng==", "bodyText": "Similar comment as above regarding this. Since this method seems to be called only once, will there be a case where the symbols are already defined?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419904776", "createdAt": "2020-05-05T07:09:19Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1322,4 +1324,48 @@ private boolean isMemberAllowed(SymbolEnv env, BSymbol symbol) {\n                 && env.enclInvokable.symbol.receiverSymbol.type.tsymbol == symbol.owner\n                 || isMemberAllowed(env.enclEnv, symbol));\n     }\n+\n+    public void loadFunctionalConstructors() {\n+        BPackageSymbol xmlModuleSymbol = symTable.langXmlModuleSymbol;\n+        if (xmlModuleSymbol == null) {\n+            return;\n+        }\n+\n+        ScopeEntry entry = xmlModuleSymbol.scope.lookup(names.fromString(\"Element\"));\n+        while (entry.symbol != null && entry.symbol != symTable.notFoundSymbol) {\n+            if (entry.symbol.tag == SymTag.CONSTRUCTOR) {\n+                return;\n+            }\n+            entry = entry.next;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk2MTEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/FunctionalConstructorBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzozNjo1OVrOGQdt8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzozNjo1OVrOGQdt8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxNzI5OQ==", "bodyText": "Need to fix the version", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419917299", "createdAt": "2020-05-05T07:36:59Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/FunctionalConstructorBuilder.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.util;\n+\n+\n+import org.ballerinalang.model.symbols.SymbolKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.Scope;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BConstructorSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BPackageSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.SymTag;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.util.Flags;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Build functional constructor symbol.\n+ *\n+ * @since 1.3.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk3OTYyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/xml-internal.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0MzowNVrOGQd5tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0MzowNVrOGQd5tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMDMwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + name - name of element\n          \n          \n            \n            # + attributeMap - optional attribute map\n          \n          \n            \n            # + children - optional children\n          \n          \n            \n            # + return - constructed Element value\n          \n          \n            \n            # + name - Name of element\n          \n          \n            \n            # + attributeMap - Optional attribute map\n          \n          \n            \n            # + children - Optional children\n          \n          \n            \n            # + return - Constructed Element value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419920309", "createdAt": "2020-05-05T07:43:05Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/xml-internal.bal", "diffHunk": "@@ -53,3 +53,30 @@ public function getAttribute(xml x, string attributeName, boolean isOptionalAcce\n # + x - The xml value\n # + return - Element name\n public function getElementNameNilLifting(xml x) returns string|error? = external;\n+\n+# Functional constructor for xml:Element subtype.\n+#\n+# + name - name of element\n+# + attributeMap - optional attribute map\n+# + children - optional children\n+# + return - constructed Element value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk4MzAyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/xml-internal.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NDowMlrOGQd7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NDowMlrOGQd7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMDgyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + target - target potion\n          \n          \n            \n            # + content - content potion\n          \n          \n            \n            # + return - constructed ProcessingInstruction value\n          \n          \n            \n            # + target - Target portion\n          \n          \n            \n            # + content - Content portion\n          \n          \n            \n            # + return - Constructed `ProcessingInstruction` value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419920823", "createdAt": "2020-05-05T07:44:02Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/xml-internal.bal", "diffHunk": "@@ -53,3 +53,30 @@ public function getAttribute(xml x, string attributeName, boolean isOptionalAcce\n # + x - The xml value\n # + return - Element name\n public function getElementNameNilLifting(xml x) returns string|error? = external;\n+\n+# Functional constructor for xml:Element subtype.\n+#\n+# + name - name of element\n+# + attributeMap - optional attribute map\n+# + children - optional children\n+# + return - constructed Element value\n+public function elementCtor(string name, map<string> attributeMap = {}, xml children = textCtor()) returns xml = external;\n+\n+# Functional constructor for xml:ProcessingInstruction subtype.\n+#\n+# + target - target potion\n+# + content - content potion\n+# + return - constructed ProcessingInstruction value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk4MzkyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/xml-internal.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NDoyMVrOGQd8QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NDoyMVrOGQd8QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMDk2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + content - comment content\n          \n          \n            \n            # + return - constructed Comment value\n          \n          \n            \n            # + content - Comment content\n          \n          \n            \n            # + return - Constructed Comment value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419920960", "createdAt": "2020-05-05T07:44:21Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/xml-internal.bal", "diffHunk": "@@ -53,3 +53,30 @@ public function getAttribute(xml x, string attributeName, boolean isOptionalAcce\n # + x - The xml value\n # + return - Element name\n public function getElementNameNilLifting(xml x) returns string|error? = external;\n+\n+# Functional constructor for xml:Element subtype.\n+#\n+# + name - name of element\n+# + attributeMap - optional attribute map\n+# + children - optional children\n+# + return - constructed Element value\n+public function elementCtor(string name, map<string> attributeMap = {}, xml children = textCtor()) returns xml = external;\n+\n+# Functional constructor for xml:ProcessingInstruction subtype.\n+#\n+# + target - target potion\n+# + content - content potion\n+# + return - constructed ProcessingInstruction value\n+public function processingInstructionCtor(string target, string content = \"\") returns xml = external;\n+\n+# Functional constructor for xml:Comment subtype.\n+#\n+# + content - comment content\n+# + return - constructed Comment value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk4NTQ4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/xml-internal.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NDo0N1rOGQd9IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NDo0N1rOGQd9IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMTE4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + charactors - text content\n          \n          \n            \n            # + return - constructed Text value\n          \n          \n            \n            # + charactors - Text content\n          \n          \n            \n            # + return - Constructed Text value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419921185", "createdAt": "2020-05-05T07:44:47Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/xml-internal.bal", "diffHunk": "@@ -53,3 +53,30 @@ public function getAttribute(xml x, string attributeName, boolean isOptionalAcce\n # + x - The xml value\n # + return - Element name\n public function getElementNameNilLifting(xml x) returns string|error? = external;\n+\n+# Functional constructor for xml:Element subtype.\n+#\n+# + name - name of element\n+# + attributeMap - optional attribute map\n+# + children - optional children\n+# + return - constructed Element value\n+public function elementCtor(string name, map<string> attributeMap = {}, xml children = textCtor()) returns xml = external;\n+\n+# Functional constructor for xml:ProcessingInstruction subtype.\n+#\n+# + target - target potion\n+# + content - content potion\n+# + return - constructed ProcessingInstruction value\n+public function processingInstructionCtor(string target, string content = \"\") returns xml = external;\n+\n+# Functional constructor for xml:Comment subtype.\n+#\n+# + content - comment content\n+# + return - constructed Comment value\n+public function commentCtor(string content = \"\") returns xml = external;\n+\n+# Functional constructor for xml:Text subtype.\n+#\n+# + charactors - text content\n+# + return - constructed Text value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk4Nzg2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/CommentCtor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NTozNVrOGQd-lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NTozNVrOGQd-lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMTU1Nw==", "bodyText": "This can never be null right? Just empty?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419921557", "createdAt": "2020-05-05T07:45:35Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/CommentCtor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.internal;\n+\n+import org.ballerinalang.jvm.XMLFactory;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * XML Comment constructor function.\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.__internal\", functionName = \"commentCtor\",\n+        args = {\n+                @Argument(name = \"content\", type = TypeKind.STRING)\n+        },\n+        returnType = {@ReturnType(type = TypeKind.XML)}\n+)\n+public class CommentCtor {\n+\n+    public static XMLValue commentCtor(Strand strand, String content) {\n+        if (content == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk5MDk2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/ElementCtor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NjozOVrOGQeAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NjozOVrOGQeAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMjA2Mg==", "bodyText": "Again, redundant null checks aren't they?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419922062", "createdAt": "2020-05-05T07:46:39Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/ElementCtor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.internal;\n+\n+import org.ballerinalang.jvm.XMLFactory;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLQName;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * XML Element constructor function.\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.__internal\", functionName = \"elementCtor\",\n+        args = {\n+                @Argument(name = \"name\", type = TypeKind.STRING),\n+                @Argument(name = \"attributeMap\", type = TypeKind.MAP),\n+                @Argument(name = \"children\", type = TypeKind.XML)\n+        },\n+        returnType = {@ReturnType(type = TypeKind.XML)}\n+)\n+public class ElementCtor {\n+\n+    public static XMLValue elementCtor(Strand strand, String name, MapValue<String, String> attributeMap,\n+                                       XMLValue children) {\n+        XMLItem xmlElement = (XMLItem) XMLFactory.createXMLElement(new XMLQName(name), (String) null);\n+        if (children != null) {\n+            xmlElement.setChildren(children);\n+        }\n+        if (attributeMap != null) {\n+            xmlElement.setAttributes(attributeMap);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk5MzA0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/ProcessingInstructionCtor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0NzoyMlrOGQeB7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMTozNjo1M1rOGS6fMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMjQxNQ==", "bodyText": "Same comment as the above two", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419922415", "createdAt": "2020-05-05T07:47:22Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/ProcessingInstructionCtor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.internal;\n+\n+import org.ballerinalang.jvm.XMLFactory;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * XML Processing Instruction constructor function.\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.__internal\", functionName = \"processingInstructionCtor\",\n+        args = {\n+                @Argument(name = \"target\", type = TypeKind.STRING),\n+                @Argument(name = \"content\", type = TypeKind.STRING)\n+        },\n+        returnType = {@ReturnType(type = TypeKind.XML)}\n+)\n+public class ProcessingInstructionCtor {\n+\n+    public static XMLValue processingInstructionCtor(Strand strand, String target, String content) {\n+        if (content == null) {\n+            content = \"\";\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NTgxMA==", "bodyText": "Fixed all", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422485810", "createdAt": "2020-05-09T11:36:53Z", "author": {"login": "rdhananjaya"}, "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/ProcessingInstructionCtor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.internal;\n+\n+import org.ballerinalang.jvm.XMLFactory;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * XML Processing Instruction constructor function.\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.__internal\", functionName = \"processingInstructionCtor\",\n+        args = {\n+                @Argument(name = \"target\", type = TypeKind.STRING),\n+                @Argument(name = \"content\", type = TypeKind.STRING)\n+        },\n+        returnType = {@ReturnType(type = TypeKind.XML)}\n+)\n+public class ProcessingInstructionCtor {\n+\n+    public static XMLValue processingInstructionCtor(Strand strand, String target, String content) {\n+        if (content == null) {\n+            content = \"\";\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMjQxNQ=="}, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDYxMTI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzozMjowOVrOGRd0IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoxMzoyMlrOGS4yng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2NzQ1Nw==", "bodyText": "Cant we avoid this extra string processing by having the same name for the ctor? Or at least reduce some of the processing. eg: Can we avoid \"Ctor\" part?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r420967457", "createdAt": "2020-05-06T17:32:09Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3555,6 +3556,13 @@ public void visit(BLangInvocation iExpr) {\n \n         if (iExpr.symbol != null && iExpr.symbol.kind == SymbolKind.ERROR_CONSTRUCTOR) {\n             result = rewriteErrorConstructor(iExpr);\n+        } else if (iExpr.symbol.kind == SymbolKind.FUNCTIONAL_CONSTRUCTOR) {\n+            String name = ((BConstructorSymbol) iExpr.symbol).name.value;\n+\n+            String internalMethodName = name.substring(0, 1).toLowerCase() + name.substring(1) + \"Ctor\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODAxNA==", "bodyText": "In my view having a clear name describing what it does far outweigh the cost of string concat/substring. Especially given that this is not in a hot path.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422458014", "createdAt": "2020-05-09T06:13:22Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3555,6 +3556,13 @@ public void visit(BLangInvocation iExpr) {\n \n         if (iExpr.symbol != null && iExpr.symbol.kind == SymbolKind.ERROR_CONSTRUCTOR) {\n             result = rewriteErrorConstructor(iExpr);\n+        } else if (iExpr.symbol.kind == SymbolKind.FUNCTIONAL_CONSTRUCTOR) {\n+            String name = ((BConstructorSymbol) iExpr.symbol).name.value;\n+\n+            String internalMethodName = name.substring(0, 1).toLowerCase() + name.substring(1) + \"Ctor\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2NzQ1Nw=="}, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzI0MDcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/FunctionalConstructorBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo1NTo1NFrOGSc9fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMTozNjozNlrOGS6fIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwMjA0NQ==", "bodyText": "Think we can provide initial capacity for array list size for new ArrayList<>(params.size())", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422002045", "createdAt": "2020-05-08T07:55:54Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/FunctionalConstructorBuilder.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.util;\n+\n+\n+import org.ballerinalang.model.symbols.SymbolKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.Scope;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BConstructorSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BPackageSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.SymTag;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.util.Flags;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Build functional constructor symbol.\n+ *\n+ * @since 1.3.0\n+ */\n+public class FunctionalConstructorBuilder {\n+    private ArrayList<BVarSymbol> params;\n+    private String name;\n+    private BPackageSymbol langlibPkg;\n+    private BType constructedType;\n+\n+    private FunctionalConstructorBuilder(String name, BPackageSymbol langlibPkg, BType constructedType) {\n+        this.name = name;\n+        this.langlibPkg = langlibPkg;\n+        this.constructedType = constructedType;\n+        this.params = new ArrayList<>();\n+    }\n+\n+    public static FunctionalConstructorBuilder newConstructor(String name,\n+                                                              BPackageSymbol langlibModule,\n+                                                              BType constructedType) {\n+        return new FunctionalConstructorBuilder(name, langlibModule, constructedType);\n+    }\n+\n+    private FunctionalConstructorBuilder addParam(String name, BType type, boolean isDefaultable) {\n+        BVarSymbol paramSymbol = new BVarSymbol(0, new Name(name), langlibPkg.pkgID, type, null);\n+        paramSymbol.defaultableParam = isDefaultable;\n+        params.add(paramSymbol);\n+        return this;\n+    }\n+\n+    public FunctionalConstructorBuilder addParam(String name, BType type) {\n+        return addParam(name, type, false);\n+    }\n+\n+    public FunctionalConstructorBuilder addDefaultableParam(String name, BType type) {\n+        return addParam(name, type, true);\n+    }\n+\n+    public BConstructorSymbol build() {\n+        List<BType> paramTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NTc5Mg==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422485792", "createdAt": "2020-05-09T11:36:36Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/FunctionalConstructorBuilder.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.util;\n+\n+\n+import org.ballerinalang.model.symbols.SymbolKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.Scope;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BConstructorSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BPackageSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.SymTag;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.util.Flags;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Build functional constructor symbol.\n+ *\n+ * @since 1.3.0\n+ */\n+public class FunctionalConstructorBuilder {\n+    private ArrayList<BVarSymbol> params;\n+    private String name;\n+    private BPackageSymbol langlibPkg;\n+    private BType constructedType;\n+\n+    private FunctionalConstructorBuilder(String name, BPackageSymbol langlibPkg, BType constructedType) {\n+        this.name = name;\n+        this.langlibPkg = langlibPkg;\n+        this.constructedType = constructedType;\n+        this.params = new ArrayList<>();\n+    }\n+\n+    public static FunctionalConstructorBuilder newConstructor(String name,\n+                                                              BPackageSymbol langlibModule,\n+                                                              BType constructedType) {\n+        return new FunctionalConstructorBuilder(name, langlibModule, constructedType);\n+    }\n+\n+    private FunctionalConstructorBuilder addParam(String name, BType type, boolean isDefaultable) {\n+        BVarSymbol paramSymbol = new BVarSymbol(0, new Name(name), langlibPkg.pkgID, type, null);\n+        paramSymbol.defaultableParam = isDefaultable;\n+        params.add(paramSymbol);\n+        return this;\n+    }\n+\n+    public FunctionalConstructorBuilder addParam(String name, BType type) {\n+        return addParam(name, type, false);\n+    }\n+\n+    public FunctionalConstructorBuilder addDefaultableParam(String name, BType type) {\n+        return addParam(name, type, true);\n+    }\n+\n+    public BConstructorSymbol build() {\n+        List<BType> paramTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwMjA0NQ=="}, "originalCommit": {"oid": "9fc70929f9823aefef90f84f074147e4d754d848"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3851, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}