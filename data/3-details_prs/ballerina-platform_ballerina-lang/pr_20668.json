{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NjM1Nzcy", "number": 20668, "title": "Xml proposal implementation: XML node structure change", "bodyText": "Purpose\nThis PR adds the new XML node structure, xml parser, xml serializer as a part of revamping xml support. This is a part of #19570\nFixes #19832\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-01-20T04:25:49Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668", "merged": true, "mergeCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "closed": true, "closedAt": "2020-01-28T14:17:23Z", "author": {"login": "rdhananjaya"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbj87wRgH2gAyMzY0NjM1NzcyOmE1OWEzNjZmZTFkMTcwYjdjNmI0MDJjYTQzOWNmMDU0YTY5MDZhMDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9DS8bgFqTM0NzA1OTE1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a59a366fe1d170b7c6b402ca439cf054a6906a09", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a59a366fe1d170b7c6b402ca439cf054a6906a09", "committedDate": "2019-11-06T05:41:51Z", "message": "Initial impl of new xml parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ed963b40324c4c5ca1465caa349ad8b77b1817", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/45ed963b40324c4c5ca1465caa349ad8b77b1817", "committedDate": "2019-11-07T02:50:47Z", "message": "Add comment, pi, and cdata nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33bf6c50e50f247bf604b52a503d598696f93331", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33bf6c50e50f247bf604b52a503d598696f93331", "committedDate": "2019-11-07T13:56:50Z", "message": "Fix syntax errors temporarily and add cdata node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b640b5bd6b548c53ab12a96bbcf4272bf846313", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b640b5bd6b548c53ab12a96bbcf4272bf846313", "committedDate": "2019-11-08T09:25:27Z", "message": "Add initial xml serialization support classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38285f284349864de266d04f2b21bf457826f184", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38285f284349864de266d04f2b21bf457826f184", "committedDate": "2019-11-09T14:05:17Z", "message": "Add initial code for serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eafc954727101d51c4a4907d416e314eac089c7", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1eafc954727101d51c4a4907d416e314eac089c7", "committedDate": "2019-11-13T06:41:59Z", "message": "Improve serialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bc2491676d9b1faff20f1e32d824187e35d9f2f", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5bc2491676d9b1faff20f1e32d824187e35d9f2f", "committedDate": "2019-11-13T09:33:34Z", "message": "Add namespace decl pruning support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ef6ed5b584026d7a3650a822203d713687b0495", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0ef6ed5b584026d7a3650a822203d713687b0495", "committedDate": "2019-11-14T05:10:04Z", "message": "Add support for missing prefix generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4f93d2e5d593a33e6632bf16bf856c8888ac8c0", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4f93d2e5d593a33e6632bf16bf856c8888ac8c0", "committedDate": "2019-11-14T05:58:07Z", "message": "Support handling missing element name prefix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc9caf9cf41afb9aba8bdb92f6dec8ef166898bd", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc9caf9cf41afb9aba8bdb92f6dec8ef166898bd", "committedDate": "2019-11-18T06:44:36Z", "message": "Fix some failing xml tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa56e1abac3830d25741186c3b0b285a3ffe1d1", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fa56e1abac3830d25741186c3b0b285a3ffe1d1", "committedDate": "2019-11-18T09:28:50Z", "message": "Add initial support for xml equivalency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17084a8ba1bb59566808fba2d6b182366c85e20e", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/17084a8ba1bb59566808fba2d6b182366c85e20e", "committedDate": "2019-11-19T01:37:14Z", "message": "Support namespace decl at jvm bytecode level\n\nvia special casing attribute addition method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae0edb5cb971748b8a1204af6eddb15948a42166", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae0edb5cb971748b8a1204af6eddb15948a42166", "committedDate": "2019-11-19T04:52:42Z", "message": "Update namespace prefix generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a2a9e793cf2cbeebfbe59a2baccbf2d71ff9850", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a2a9e793cf2cbeebfbe59a2baccbf2d71ff9850", "committedDate": "2019-11-19T14:27:26Z", "message": "Fix unflushed xml stream issue\n\nOutput stream does not get all characters as internal buffers of\nxml stream was not flushed properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46029392a71063010f002e348bbe74b29782fc37", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46029392a71063010f002e348bbe74b29782fc37", "committedDate": "2019-11-20T03:35:28Z", "message": "Support providing default ns at element creation\n\nAllow XMLFactory.createXMLElement() method to provide default ns for\nthe element being created."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a7a645e99da6220e859f6bcb72f45e70bdfbdff", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a7a645e99da6220e859f6bcb72f45e70bdfbdff", "committedDate": "2019-11-20T07:14:59Z", "message": "Update xml.clone() operation to new impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2b6dff2c243ab77225dbe2156eb4d46b651b128", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2b6dff2c243ab77225dbe2156eb4d46b651b128", "committedDate": "2019-11-20T09:26:29Z", "message": "Implement text node merge in sequence append"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e10a69bd96e0b4956eea097151100bfbf6757c19", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e10a69bd96e0b4956eea097151100bfbf6757c19", "committedDate": "2019-11-20T14:30:29Z", "message": "Remove xml sequence constructor taking array val"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6ab6f0b564db6f46a4ec59fca11909f74f4fca2", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6ab6f0b564db6f46a4ec59fca11909f74f4fca2", "committedDate": "2019-11-21T04:19:51Z", "message": "Remove XMLItem constructor that take string arg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f9b30062eb41d8029093d58375edfd03cd8dc75", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0f9b30062eb41d8029093d58375edfd03cd8dc75", "committedDate": "2019-11-21T04:33:26Z", "message": "Merge branch 'xml-proposal-impl' of github.com:ballerina-platform/ballerina-lang into xml-proposal-impl\n\n\u0001 Conflicts:\n\u0001\tbvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java\n\u0001\tbvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLSequence.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9a0095e15f5cbe8a3549d1a8bde54bf43f05dc6", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a9a0095e15f5cbe8a3549d1a8bde54bf43f05dc6", "committedDate": "2019-11-21T08:30:48Z", "message": "Fix merge conflicts\n\nWith BValue API improvements, a new BXml interface was introduced.\nThis commit fixes  merge conflicts that was created as a result of\nupdating to that new BXml interface related code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22f49a51f8ec9bfb7f4920bb03a87519404b73b5", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22f49a51f8ec9bfb7f4920bb03a87519404b73b5", "committedDate": "2019-11-22T15:54:34Z", "message": "Fix failing test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10ce1ed2c41416e4ede1ab7cc33fa28bcae2c4bf", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10ce1ed2c41416e4ede1ab7cc33fa28bcae2c4bf", "committedDate": "2019-11-25T09:37:06Z", "message": "Improve namespace handling and xml iteration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b91af8fdb9adebf118fc3d018f888504e7a441cc", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b91af8fdb9adebf118fc3d018f888504e7a441cc", "committedDate": "2019-11-25T15:11:09Z", "message": "Fix setChildren of XMLItem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2b92713919ce3c9212ca879d742f5b9cdf265f6", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2b92713919ce3c9212ca879d742f5b9cdf265f6", "committedDate": "2019-11-25T16:35:56Z", "message": "Improve get item type in xml val"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc1e96d9609dacc4c45f675d569a01b3e074901", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2fc1e96d9609dacc4c45f675d569a01b3e074901", "committedDate": "2019-11-26T02:09:23Z", "message": "Improve code readability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87bb6275f70c4f3daecff14088ead37000b36bf6", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87bb6275f70c4f3daecff14088ead37000b36bf6", "committedDate": "2019-11-26T03:55:23Z", "message": "Fix slice, isEmpty, and strip functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079c8422f250edc68968deb6a1be7359a084fd68", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/079c8422f250edc68968deb6a1be7359a084fd68", "committedDate": "2019-11-27T16:30:30Z", "message": "Improve xml tree classes and test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d2081634a701fb8995c37d89dcf5bafff2ac469", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d2081634a701fb8995c37d89dcf5bafff2ac469", "committedDate": "2019-12-06T01:30:22Z", "message": "Fix failing test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a7fdfc393cde0e3b57a48a090ab79331d0e2e4", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5a7fdfc393cde0e3b57a48a090ab79331d0e2e4", "committedDate": "2019-12-06T04:09:22Z", "message": "Temporarily fix table to xml converter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b06f0ec58e3f7194fd63d8d9c256a713130c277", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b06f0ec58e3f7194fd63d8d9c256a713130c277", "committedDate": "2019-12-06T06:32:56Z", "message": "Fix testRuntimeNamespaceLookup test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9642c518c5ea6449b7cacb456c0b6c0ec753e2af", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9642c518c5ea6449b7cacb456c0b6c0ec753e2af", "committedDate": "2020-01-13T06:00:28Z", "message": "Port XML to JSON conversion\n\nto new xml node structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68f6e192177d44890179179fea8ce43af6574835", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/68f6e192177d44890179179fea8ce43af6574835", "committedDate": "2020-01-13T09:00:02Z", "message": "Port JSONToXMLConverter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "950fdf9d1aa0e7b4c12c2461214519ddfac24923", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/950fdf9d1aa0e7b4c12c2461214519ddfac24923", "committedDate": "2020-01-17T08:57:23Z", "message": "Fix failing integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0465c2c06fcc12c38f4fc0ecf21eb8f62fb5305", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0465c2c06fcc12c38f4fc0ecf21eb8f62fb5305", "committedDate": "2020-01-18T02:17:09Z", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into xml-proposal-impl\n\n\u0001 Conflicts:\n\u0001\tbvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLFactory.java\n\u0001\tbvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java\n\u0001\tbvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLSequence.java\n\u0001\tbvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLValue.java\n\u0001\tbvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/api/BValueCreator.java\n\u0001\tbvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/api/BXML.java\n\u0001\tlanglib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java\n\u0001\tlanglib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Elements.java\n\u0001\tlanglib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Filter.java\n\u0001\tlanglib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Map.java\n\u0001\tstdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/request/RequestNativeFunctionNegativeTest.java\n\u0001\tstdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/response/ResponseNativeFunctionNegativeTest.java\n\u0001\tstdlib/io/src/main/java/org/ballerinalang/stdlib/io/nativeimpl/WriteXml.java\n\u0001\tstdlib/jsonutils/src/main/java/org/ballerinalang/stdlib/jsonutils/FromXML.java\n\u0001\tstdlib/xmlutils/src/main/java/org/ballerinalang/stdlib/xmlutils/JSONToXMLConverter.java\n\u0001\tstdlib/xslt/src/main/java/org/ballerinalang/xslt/XsltTransformer.java\n\u0001\ttests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArrayTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b2e5b0ea39f28a0ceda32ca46fe10413b6ac150", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b2e5b0ea39f28a0ceda32ca46fe10413b6ac150", "committedDate": "2020-01-19T22:02:16Z", "message": "Fix failing unit tests after update with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c0e78b0d8565f6bd0cb148bad36c99538222c66", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c0e78b0d8565f6bd0cb148bad36c99538222c66", "committedDate": "2020-01-20T04:10:46Z", "message": "Fix failing test cases and checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dccefbf59d4dc59b53ab828231dfd05b0073ae93", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dccefbf59d4dc59b53ab828231dfd05b0073ae93", "committedDate": "2020-01-20T04:17:22Z", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into xml-proposal-impl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDg4NDkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#pullrequestreview-345088491", "createdAt": "2020-01-20T05:42:39Z", "commit": {"oid": "dccefbf59d4dc59b53ab828231dfd05b0073ae93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTo0MjozOVrOFfT9DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTo0MjozOVrOFfT9DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NzEwMA==", "bodyText": "What if we define throws since this a public method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r368377100", "createdAt": "2020-01-20T05:42:39Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLText;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * XML Serializer for Ballerina XML value trees.\n+ *\n+ * @since 1.1.0\n+ */\n+public class BallerinaXMLSerializer extends OutputStream {\n+    private static final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlStreamWriter;\n+    private Deque<Set<String>> parentNSSet;\n+    private int nsNumber;\n+\n+\n+    public BallerinaXMLSerializer(OutputStream outputStream) {\n+        try {\n+            xmlStreamWriter = xmlOutputFactory.createXMLStreamWriter(outputStream);\n+            parentNSSet = new ArrayDeque<>();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(int b) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public void flush() {\n+        try {\n+            xmlStreamWriter.flush();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        try {\n+            xmlStreamWriter.close();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    public void write(BXML xmlValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dccefbf59d4dc59b53ab828231dfd05b0073ae93"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c35cbb539e9a775d59181e5329a2c4493bd26b8", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c35cbb539e9a775d59181e5329a2c4493bd26b8", "committedDate": "2020-01-21T08:02:37Z", "message": "Fix failing langlib xml unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c796bcde0f6ed49c7d81a7a7cda8ffc712acecc", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c796bcde0f6ed49c7d81a7a7cda8ffc712acecc", "committedDate": "2020-01-21T05:24:32Z", "message": "Fix failing langlib xml unit tests"}, "afterCommit": {"oid": "7c35cbb539e9a775d59181e5329a2c4493bd26b8", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c35cbb539e9a775d59181e5329a2c4493bd26b8", "committedDate": "2020-01-21T08:02:37Z", "message": "Fix failing langlib xml unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6841d300c754e8e9b663faa8a0118d8dda75a23c", "committedDate": "2020-01-22T07:11:41Z", "message": "Fix failing test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MDU5MTUw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#pullrequestreview-347059150", "createdAt": "2020-01-23T05:04:40Z", "commit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTowNDo0MFrOFgy4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNToxNDoyNVrOFgzE9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMjM3Mw==", "bodyText": "Shall we use constants for \"xmlns\", \"\", \"}\", etc.?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369932373", "createdAt": "2020-01-23T05:04:40Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLText;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * XML Serializer for Ballerina XML value trees.\n+ *\n+ * @since 1.1.0\n+ */\n+public class BallerinaXMLSerializer extends OutputStream {\n+    private static final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlStreamWriter;\n+    private Deque<Set<String>> parentNSSet;\n+    private int nsNumber;\n+\n+\n+    public BallerinaXMLSerializer(OutputStream outputStream) {\n+        try {\n+            xmlStreamWriter = xmlOutputFactory.createXMLStreamWriter(outputStream);\n+            parentNSSet = new ArrayDeque<>();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(int b) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public void flush() {\n+        try {\n+            xmlStreamWriter.flush();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        try {\n+            xmlStreamWriter.close();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    public void write(BXML xmlValue) {\n+        if (xmlValue == null) {\n+            return;\n+        }\n+        try {\n+            switch (xmlValue.getNodeType()) {\n+                case SEQUENCE:\n+                    writeSeq((XMLSequence) xmlValue);\n+                    break;\n+                case ELEMENT:\n+                    writeElement((XMLItem) xmlValue);\n+                    break;\n+                case TEXT:\n+                    writeXMLText((XMLText) xmlValue);\n+                    break;\n+                case COMMENT:\n+                    writeXMLComment((XMLComment) xmlValue);\n+                    break;\n+                case PI:\n+                    writeXMLPI((XMLPi) xmlValue);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unexpected value: \" + xmlValue.getNodeType());\n+            }\n+        } catch (XMLStreamException e) {\n+            // todo: need to use these for all the errors that need to be panics\n+            throw new ErrorValue(e.getMessage(), null);\n+        }\n+    }\n+\n+    private void writeXMLPI(XMLPi xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeProcessingInstruction(xmlValue.getTarget(), xmlValue.getData());\n+    }\n+\n+    private void writeXMLComment(XMLComment xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeComment(xmlValue.getTextValue());\n+\n+    }\n+\n+    private void writeXMLText(XMLText xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeCharacters(xmlValue.getTextValue());\n+    }\n+\n+    private void writeElement(XMLItem xmlValue) throws XMLStreamException {\n+        // Setup namespace hierarchy\n+        Set<String> prevNSSet = this.parentNSSet.peek();\n+        HashSet<String> currentNSLevel = prevNSSet == null ? new HashSet<>() : new HashSet<>(prevNSSet);\n+        this.parentNSSet.push(currentNSLevel);\n+\n+        Map<String, String> nsPrefixMap = prefixToNSUri(xmlValue);\n+        QName qName = xmlValue.getQName();\n+        writeStartElement(qName, nsPrefixMap, currentNSLevel);\n+        setMissingElementPrefix(currentNSLevel, nsPrefixMap, qName);\n+\n+        // Write namespaces\n+        writeNamespaceAttributes(currentNSLevel, nsPrefixMap);\n+\n+        // Write attributes\n+        writeAttributes(xmlValue, currentNSLevel);\n+\n+        xmlValue.getChildrenSeq().serialize(this);\n+        xmlStreamWriter.writeEndElement();\n+        // Reset namespace decl hierarchy for this node.\n+        this.parentNSSet.pop();\n+    }\n+\n+    private String setDefaultNamespace(Map<String, String> nsPrefixMap, QName qName, HashSet<String> currentNSLevel)\n+            throws XMLStreamException {\n+        boolean elementNSUsageFoundInAttribute = false;\n+        for (Map.Entry<String, String> entry : nsPrefixMap.entrySet()) {\n+            if (entry.getValue().equals(qName.getNamespaceURI())) {\n+                elementNSUsageFoundInAttribute = true;\n+            }\n+            if (entry.getKey().isEmpty()) {\n+                xmlStreamWriter.setDefaultNamespace(entry.getValue());\n+                return entry.getValue();\n+            }\n+        }\n+        if (!elementNSUsageFoundInAttribute && !qName.getNamespaceURI().isEmpty()) {\n+            xmlStreamWriter.setDefaultNamespace(qName.getNamespaceURI());\n+            return qName.getNamespaceURI();\n+        }\n+\n+        // Undeclare default namespace for this element, if outer elements have redefined default ns and this\n+        // element doesn't have NS URI in it's name.\n+        if ((qName.getNamespaceURI() == null || qName.getNamespaceURI().isEmpty())) {\n+            for (String s : currentNSLevel) {\n+                if (s.startsWith(\"xmlns\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMjU3NA==", "bodyText": "Versions need to be updated?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369932574", "createdAt": "2020-01-23T05:05:56Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLTreeBuilder.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+\n+import static javax.xml.stream.XMLStreamConstants.CDATA;\n+import static javax.xml.stream.XMLStreamConstants.CHARACTERS;\n+import static javax.xml.stream.XMLStreamConstants.COMMENT;\n+import static javax.xml.stream.XMLStreamConstants.DTD;\n+import static javax.xml.stream.XMLStreamConstants.END_DOCUMENT;\n+import static javax.xml.stream.XMLStreamConstants.END_ELEMENT;\n+import static javax.xml.stream.XMLStreamConstants.PROCESSING_INSTRUCTION;\n+import static javax.xml.stream.XMLStreamConstants.START_ELEMENT;\n+\n+/**\n+ * XML tree builder for Ballerina xml node structure using {@code XMLStreamReader}.\n+ *\n+ * @since 1.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMjgyNg==", "bodyText": "I guess the reason should be {ballerina/lang.xml}XxxError", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369932826", "createdAt": "2020-01-23T05:07:35Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLTreeBuilder.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+\n+import static javax.xml.stream.XMLStreamConstants.CDATA;\n+import static javax.xml.stream.XMLStreamConstants.CHARACTERS;\n+import static javax.xml.stream.XMLStreamConstants.COMMENT;\n+import static javax.xml.stream.XMLStreamConstants.DTD;\n+import static javax.xml.stream.XMLStreamConstants.END_DOCUMENT;\n+import static javax.xml.stream.XMLStreamConstants.END_ELEMENT;\n+import static javax.xml.stream.XMLStreamConstants.PROCESSING_INSTRUCTION;\n+import static javax.xml.stream.XMLStreamConstants.START_ELEMENT;\n+\n+/**\n+ * XML tree builder for Ballerina xml node structure using {@code XMLStreamReader}.\n+ *\n+ * @since 1.1.0\n+ */\n+public class XMLTreeBuilder {\n+\n+    // XMLInputFactory2\n+    private static final XMLInputFactory xmlInputFactory;\n+\n+    static {\n+        xmlInputFactory = XMLInputFactory.newInstance();\n+        xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\n+    }\n+\n+    private XMLStreamReader xmlStreamReader;\n+    private Map<String, String> namespaces; // xml ns declarations from Bal source [xmlns \"http://ns.com\" as ns]\n+    private Deque<XMLSequence> seqDeque;\n+    private Deque<List<BXML>> siblingDeque; // we can remove this by opening up children list in XMLSeq\n+\n+    public XMLTreeBuilder(String str) {\n+        this(new StringReader(str));\n+    }\n+\n+    public XMLTreeBuilder(Reader stringReader) {\n+        namespaces = new HashMap<>();\n+        seqDeque = new ArrayDeque<>();\n+        siblingDeque = new ArrayDeque<>();\n+        try {\n+            xmlStreamReader = xmlInputFactory.createXMLStreamReader(stringReader);\n+        } catch (XMLStreamException e) {\n+            handleXMLStreamException(e);\n+        }\n+    }\n+\n+    private void handleXMLStreamException(Exception e) {\n+        // todo: do e.getMessage contain all the information? verify\n+        throw new BallerinaException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMzQ1Mg==", "bodyText": "Error reasons need to be fixed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369933452", "createdAt": "2020-01-23T05:09:32Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLText;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * XML Serializer for Ballerina XML value trees.\n+ *\n+ * @since 1.1.0\n+ */\n+public class BallerinaXMLSerializer extends OutputStream {\n+    private static final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlStreamWriter;\n+    private Deque<Set<String>> parentNSSet;\n+    private int nsNumber;\n+\n+\n+    public BallerinaXMLSerializer(OutputStream outputStream) {\n+        try {\n+            xmlStreamWriter = xmlOutputFactory.createXMLStreamWriter(outputStream);\n+            parentNSSet = new ArrayDeque<>();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMzgxMw==", "bodyText": "Extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369933813", "createdAt": "2020-01-23T05:10:19Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaXMLSerializer.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm;\n+\n+import org.ballerinalang.jvm.util.exceptions.BallerinaException;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.XMLComment;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLPi;\n+import org.ballerinalang.jvm.values.XMLSequence;\n+import org.ballerinalang.jvm.values.XMLText;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * XML Serializer for Ballerina XML value trees.\n+ *\n+ * @since 1.1.0\n+ */\n+public class BallerinaXMLSerializer extends OutputStream {\n+    private static final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();\n+    private XMLStreamWriter xmlStreamWriter;\n+    private Deque<Set<String>> parentNSSet;\n+    private int nsNumber;\n+\n+\n+    public BallerinaXMLSerializer(OutputStream outputStream) {\n+        try {\n+            xmlStreamWriter = xmlOutputFactory.createXMLStreamWriter(outputStream);\n+            parentNSSet = new ArrayDeque<>();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(int b) {\n+        assert false;\n+    }\n+\n+    @Override\n+    public void flush() {\n+        try {\n+            xmlStreamWriter.flush();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        try {\n+            xmlStreamWriter.close();\n+        } catch (XMLStreamException e) {\n+            throw new BallerinaException(e);\n+        }\n+    }\n+\n+    public void write(BXML xmlValue) {\n+        if (xmlValue == null) {\n+            return;\n+        }\n+        try {\n+            switch (xmlValue.getNodeType()) {\n+                case SEQUENCE:\n+                    writeSeq((XMLSequence) xmlValue);\n+                    break;\n+                case ELEMENT:\n+                    writeElement((XMLItem) xmlValue);\n+                    break;\n+                case TEXT:\n+                    writeXMLText((XMLText) xmlValue);\n+                    break;\n+                case COMMENT:\n+                    writeXMLComment((XMLComment) xmlValue);\n+                    break;\n+                case PI:\n+                    writeXMLPI((XMLPi) xmlValue);\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Unexpected value: \" + xmlValue.getNodeType());\n+            }\n+        } catch (XMLStreamException e) {\n+            // todo: need to use these for all the errors that need to be panics\n+            throw new ErrorValue(e.getMessage(), null);\n+        }\n+    }\n+\n+    private void writeXMLPI(XMLPi xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeProcessingInstruction(xmlValue.getTarget(), xmlValue.getData());\n+    }\n+\n+    private void writeXMLComment(XMLComment xmlValue) throws XMLStreamException {\n+        xmlStreamWriter.writeComment(xmlValue.getTextValue());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzNTUyMQ==", "bodyText": "Do we need this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369935521", "createdAt": "2020-01-23T05:13:53Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLNonElementItem.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm.values;\n+\n+import org.apache.axiom.om.OMNode;\n+import org.ballerinalang.jvm.BallerinaXMLSerializer;\n+import org.ballerinalang.jvm.XMLNodeType;\n+import org.ballerinalang.jvm.values.api.BMap;\n+import org.ballerinalang.jvm.values.api.BXML;\n+import org.ballerinalang.jvm.values.freeze.Status;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import static org.ballerinalang.jvm.util.BLangConstants.STRING_NULL_VALUE;\n+\n+/**\n+ * Functionality common to PI, COMMENT and TEXT nodes.\n+ *\n+ * @since 1.2.0\n+ */\n+public abstract class XMLNonElementItem extends XMLValue {\n+    @Override\n+    public abstract boolean isEmpty();\n+\n+    @Override\n+    public boolean isSingleton() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getItemType() {\n+        return getNodeType().value();\n+    }\n+\n+    @Override\n+    public String getElementName() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public abstract String getTextValue();\n+\n+    @Override\n+    public String getAttribute(String localName, String namespace) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getAttribute(String localName, String namespace, String prefix) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setAttribute(String localName, String namespace, String prefix, String value) {\n+\n+    }\n+\n+    @Override\n+    public MapValue<String, String> getAttributesMap() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setAttributes(BMap<String, ?> attributes) {\n+\n+    }\n+\n+    @Override\n+    public BXML elements() {\n+        return new XMLSequence();\n+    }\n+\n+    @Override\n+    public BXML elements(String qname) {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLValue children() {\n+        return new XMLSequence();\n+    }\n+\n+    @Override\n+    public XMLValue children(String qname) {\n+        return new XMLSequence();\n+    }\n+\n+    @Override\n+    public void setChildren(BXML seq) {\n+    }\n+\n+    @Override\n+    @Deprecated\n+    public void addChildren(BXML seq) {\n+    }\n+\n+    @Override\n+    public BXML strip() {\n+        return new XMLText(\"\");\n+    }\n+\n+    @Override\n+    public abstract XMLNodeType getNodeType();\n+\n+    @Override\n+    public BXML slice(long startIndex, long endIndex) {\n+        return null;\n+    }\n+\n+    @Override\n+    public BXML descendants(String qname) {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLValue getItem(int index) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object copy(Map<Object, Object> refs) {\n+        // XMLContentHolderItem is immutable\n+        return this;\n+    }\n+\n+    @Override\n+    public Object frozenCopy(Map<Object, Object> refs) {\n+        return this;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return 1;\n+    }\n+\n+    @Override\n+    public void build() {\n+\n+    }\n+\n+    @Override\n+    public void removeAttribute(String qname) {\n+\n+    }\n+\n+    @Override\n+    @Deprecated\n+    public void removeChildren(String qname) {\n+\n+    }\n+\n+    @Override\n+    public abstract OMNode value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzNTYwNA==", "bodyText": "formatting issue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20668#discussion_r369935604", "createdAt": "2020-01-23T05:14:25Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLText.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm.values;\n+\n+import org.apache.axiom.om.OMNode;\n+import org.apache.axiom.om.impl.llom.CharacterDataImpl;\n+import org.ballerinalang.jvm.XMLNodeType;\n+import org.ballerinalang.jvm.values.api.BXML;\n+\n+import java.util.NoSuchElementException;\n+\n+import static org.ballerinalang.jvm.util.BLangConstants.STRING_NULL_VALUE;\n+\n+/**\n+ * XML nodes containing atomic content such as text, comment and processing instructions.\n+ *\n+ * @since 1.2.0\n+ */\n+public class XMLText extends XMLNonElementItem {\n+\n+    private String data;\n+\n+    public XMLText(String data) {\n+        // data is the content of xml comment or text node\n+        this.data = data;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        if (getNodeType() == XMLNodeType.TEXT) {\n+            return data.isEmpty();\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String getItemType() {\n+        return getNodeType().value();\n+    }\n+\n+    @Override\n+    public String getTextValue() {\n+        return data;\n+    }\n+\n+    @Override\n+    public BXML strip() {\n+        if (!data.trim().isEmpty()) {\n+            return this;\n+        }\n+        return new XMLText(\"\");\n+    }\n+\n+    @Override\n+    public XMLNodeType getNodeType() {\n+        return XMLNodeType.TEXT;\n+    }\n+\n+    @Override\n+    public OMNode value() {\n+            CharacterDataImpl characterData = new CharacterDataImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6841d300c754e8e9b663faa8a0118d8dda75a23c"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4330, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}