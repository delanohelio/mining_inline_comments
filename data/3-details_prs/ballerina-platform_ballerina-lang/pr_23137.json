{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzA2NjYy", "number": 23137, "title": "Update grammar of future and typedesc type descriptors", "bodyText": "Purpose\n\nAccording to the 2019r3 spec, the constraint is optional for future and typedesc type descriptors.\nfuture-type-descriptor := future [type-parameter]\ntypedesc-type-descriptor := typedesc [type-parameter]\n\nFixes #17922\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-06T20:05:54Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137", "merged": true, "mergeCommit": {"oid": "f23ff667276d8796cb0988eecf1f7685d2ec9c8a"}, "closed": true, "closedAt": "2020-05-13T21:22:39Z", "author": {"login": "chiranSachintha"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcenq-hgH2gAyNDE0MzA2NjYyOjUxNzVkYjBjNzNiZDFhNGFmNmI1MWM2YmQwZjkzNzMxNzdiYmY2ZTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg75zwAFqTQxMTExNjg2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5175db0c73bd1a4af6b51c6bd0f9373177bbf6e1", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5175db0c73bd1a4af6b51c6bd0f9373177bbf6e1", "committedDate": "2020-05-06T12:17:03Z", "message": "Update grammar of future and typedesc type descriptors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5e289d3a4743075a054ef74aefc115062e6708c", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5e289d3a4743075a054ef74aefc115062e6708c", "committedDate": "2020-05-06T19:39:56Z", "message": "Initialize constraints of future and typedesc descriptors as any|error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16b94589bf94be385209ab41a453efa75644a3c", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c16b94589bf94be385209ab41a453efa75644a3c", "committedDate": "2020-05-06T20:02:09Z", "message": "Add future and typedesc type tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95afd03ddf59a43f381b7f2aaf6e499e20893649", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95afd03ddf59a43f381b7f2aaf6e499e20893649", "committedDate": "2020-05-06T20:29:30Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-17922\n\n\u0001 Conflicts:\n\u0001\ttests/jballerina-unit-test/src/test/resources/test-src/types/typedesc/typedesc_positive.bal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac860e0aff2a4a4bbc2ae3da8b8bd350355a1bfd", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac860e0aff2a4a4bbc2ae3da8b8bd350355a1bfd", "committedDate": "2020-05-13T12:21:55Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a415a1929625fe3472cb49296e0654bbcee67c91", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a415a1929625fe3472cb49296e0654bbcee67c91", "committedDate": "2020-05-13T12:37:04Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-17922\n\n\u0001 Conflicts:\n\u0001\ttests/jballerina-unit-test/src/test/resources/testng.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ffbdc8406493efd482970388b322ee3a2ab15905", "committedDate": "2020-05-13T12:51:56Z", "message": "Fix the conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDA3MjQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#pullrequestreview-411007245", "createdAt": "2020-05-13T14:52:40Z", "commit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTE2ODY5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#pullrequestreview-411116869", "createdAt": "2020-05-13T16:52:06Z", "commit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MjowN1rOGU6vgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NzowNVrOGU671w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzEzNw==", "bodyText": "Missing the licence header. Let's update it in a separate PR.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r424587137", "createdAt": "2020-05-13T16:52:07Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Nzc5OA==", "bodyText": "Shall we add assertions for result2 and result3 also? Please check for all tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r424587798", "createdAt": "2020-05-13T16:53:10Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {\n+    future<int> f1 = start add(5, 2);\n+    future<boolean> f2 = start status();\n+    future<string> f3 = start concat(\"foo\");\n+\n+    int result1 = wait f1;\n+    boolean result2 = wait f2;\n+    string result3 = wait f3;\n+\n+    assertEquality(7, result1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODk2NQ==", "bodyText": "Given that we are returning an int here, IMO jsonObject is kinda misleading. Shall we call this something like getJson instead?\nAlso, we don't usually use parentheses around the return type.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function jsonObject() returns (json) {\n          \n          \n            \n            function jsonObject() returns json {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r424588965", "createdAt": "2020-05-13T16:55:03Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {\n+    future<int> f1 = start add(5, 2);\n+    future<boolean> f2 = start status();\n+    future<string> f3 = start concat(\"foo\");\n+\n+    int result1 = wait f1;\n+    boolean result2 = wait f2;\n+    string result3 = wait f3;\n+\n+    assertEquality(7, result1);\n+}\n+\n+function testBasicTypesWithoutFutureConstraint() {\n+    future f1 = start add(5, 2);\n+    future f2 = start status();\n+    future f3 = start concat(\"foo\");\n+\n+    any|error result1 = wait f1;\n+    any|error result2 = wait f2;\n+    any|error result3 = wait f3;\n+\n+    assertEquality(7, result1); \n+}\n+\n+function testRefTypes() {\n+    future<xml> a = start xmlFile();\n+    future<json> b = start jsonObject();\n+\n+    xml x = wait a;\n+    json y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());\n+}\n+\n+function testRefTypesWithoutFutureConstraint() {\n+    future a = start xmlFile();\n+    future b = start jsonObject();\n+\n+    any|error x = wait a;\n+    any|error y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());\n+}\n+\n+function testArrayTypes() {\n+    future<int[]> a = start intArray();\n+    \n+    int[] x = wait a;\n+    \n+    assertEquality(intArray(), x);\n+}\n+\n+function testArrayTypesWithoutFutureConstraint() {\n+    future a = start intArray();\n+    \n+    any|error x = wait a;\n+    \n+    assertEquality(intArray(), x);\n+}\n+\n+function testRecordTypes() {\n+    future<Person> a = start getNewPerson();\n+    \n+    Person x = wait a;\n+    \n+    assertEquality(getNewPerson(), x);\n+}\n+\n+function testRecordTypesWithoutFutureConstraint() {\n+    future a = start getNewPerson();\n+    \n+    any|error x = wait a;\n+    \n+    assertEquality(getNewPerson(), x);\n+}\n+\n+function testObjectTypes() {\n+    future<PersonA> a = start getPersonAObject();\n+\n+    PersonA x = wait a;\n+    string name = x.getName();\n+    \n+    assertEquality(\"sample name\", name);\n+}\n+\n+function testObjectTypesWithoutFutureConstraint() {\n+    future a = start getPersonAObject();\n+\n+    any|error x = wait a;\n+    \n+    assertEquality(\"object PersonA\", x.toString());\n+}\n+\n+function testCustomErrorFuture() {\n+    future<error> te = start getError();\n+\n+    error x = wait te;\n+\n+    assertEquality(\"SimpleErrorType\", x.reason());\n+}\n+\n+function testCustomErrorFutureWithoutConstraint() {\n+    future te = start getError();\n+\n+    any|error x = wait te;\n+\n+    assertEquality(getError().toString(), x.toString());\n+}\n+\n+function add(int i, int j) returns int {\n+    int k = i + j;\n+    return k;\n+}\n+\n+function concat(string name) returns string {\n+    return \"hello \" + name;\n+}\n+\n+function status() returns boolean {\n+    return true;\n+}\n+\n+function xmlFile() returns xml {\n+    xml x1 = xml `aaa`;\n+    return x1;\n+}\n+\n+function jsonObject() returns (json) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDI5NQ==", "bodyText": "IMO wherever possible it's always better to test against the exact value instead of a toString() representation since we'll also validate the type.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertEquality(\"5\", y.toString());\n          \n          \n            \n                assertEquality(5, y);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r424590295", "createdAt": "2020-05-13T16:57:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {\n+    future<int> f1 = start add(5, 2);\n+    future<boolean> f2 = start status();\n+    future<string> f3 = start concat(\"foo\");\n+\n+    int result1 = wait f1;\n+    boolean result2 = wait f2;\n+    string result3 = wait f3;\n+\n+    assertEquality(7, result1);\n+}\n+\n+function testBasicTypesWithoutFutureConstraint() {\n+    future f1 = start add(5, 2);\n+    future f2 = start status();\n+    future f3 = start concat(\"foo\");\n+\n+    any|error result1 = wait f1;\n+    any|error result2 = wait f2;\n+    any|error result3 = wait f3;\n+\n+    assertEquality(7, result1); \n+}\n+\n+function testRefTypes() {\n+    future<xml> a = start xmlFile();\n+    future<json> b = start jsonObject();\n+\n+    xml x = wait a;\n+    json y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());\n+}\n+\n+function testRefTypesWithoutFutureConstraint() {\n+    future a = start xmlFile();\n+    future b = start jsonObject();\n+\n+    any|error x = wait a;\n+    any|error y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3401, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}