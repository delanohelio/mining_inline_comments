{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NzY0NDk5", "number": 26387, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMDoyNTozNlrOEu63vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMToxMjo1NlrOEu7eGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NjM0NDkyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/EnvironmentResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMDoyNTozNlrOHjlzxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODo1Njo0NlrOHkEZTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4MTY2OA==", "bodyText": "Are we still depending on BLang AST ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507081668", "createdAt": "2020-10-18T10:25:36Z", "author": {"login": "rasika"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/EnvironmentResolver.java", "diffHunk": "@@ -156,19 +189,19 @@\n \n /**\n  * Visitor to lookup symbols based on the location.\n- * \n+ *\n  * @since 2.0.0\n  */\n public class EnvironmentResolver extends BLangNodeVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzEzMzc0NQ==", "bodyText": "Yes, Compiler API internally depends on it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507133745", "createdAt": "2020-10-18T12:47:21Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/EnvironmentResolver.java", "diffHunk": "@@ -156,19 +189,19 @@\n \n /**\n  * Visitor to lookup symbols based on the location.\n- * \n+ *\n  * @since 2.0.0\n  */\n public class EnvironmentResolver extends BLangNodeVisitor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4MTY2OA=="}, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU4Mjc5Nw==", "bodyText": "Oh this is inside compiler-api", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507582797", "createdAt": "2020-10-19T08:56:46Z", "author": {"login": "rasika"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/EnvironmentResolver.java", "diffHunk": "@@ -156,19 +189,19 @@\n \n /**\n  * Visitor to lookup symbols based on the location.\n- * \n+ *\n  * @since 2.0.0\n  */\n public class EnvironmentResolver extends BLangNodeVisitor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4MTY2OA=="}, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NjM5MjUzOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ErrorTypeParamsNodeContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMDo0NTo1OVrOHjmS1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNToxNToyMlrOHj9aHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4OTYyMQ==", "bodyText": "Please check formatting here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507089621", "createdAt": "2020-10-18T10:45:59Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ErrorTypeParamsNodeContext.java", "diffHunk": "@@ -58,22 +60,26 @@ public ErrorTypeParamsNodeContext() {\n          */\n         NonTerminalNode nodeAtCursor = context.get(CompletionKeys.NODE_AT_CURSOR_KEY);\n \n-        Predicate<Scope.ScopeEntry> predicate = scopeEntry -> {\n-            BSymbol symbol = scopeEntry.symbol;\n-            return symbol instanceof BTypeSymbol\n-                    && (symbol.type.getKind() == TypeKind.MAP || symbol.type.getKind() == TypeKind.RECORD);\n+        Predicate<Symbol> predicate = symbol -> {\n+            if (symbol.kind() != SymbolKind.TYPE) {\n+                return false;\n+            }\n+            BallerinaTypeDescriptor typeDesc = ((TypeSymbol) symbol).typeDescriptor();\n+            return (typeDesc.kind() == TypeDescKind.MAP || typeDesc.kind() == TypeDescKind.RECORD);\n         };\n-        List<Scope.ScopeEntry> mappingTypes;\n+        List<Symbol> mappingTypes;\n         if (this.onQualifiedNameIdentifier(context, nodeAtCursor)) {\n-            mappingTypes = QNameReferenceUtil.getModuleContent(context, (QualifiedNameReferenceNode) nodeAtCursor,\n-                    predicate.and(scopeEntry -> (scopeEntry.symbol.flags & Flags.PUBLIC) == Flags.PUBLIC));\n+            mappingTypes= QNameReferenceUtil.getModuleContent(context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2ODMxOQ==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507468319", "createdAt": "2020-10-19T05:15:22Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ErrorTypeParamsNodeContext.java", "diffHunk": "@@ -58,22 +60,26 @@ public ErrorTypeParamsNodeContext() {\n          */\n         NonTerminalNode nodeAtCursor = context.get(CompletionKeys.NODE_AT_CURSOR_KEY);\n \n-        Predicate<Scope.ScopeEntry> predicate = scopeEntry -> {\n-            BSymbol symbol = scopeEntry.symbol;\n-            return symbol instanceof BTypeSymbol\n-                    && (symbol.type.getKind() == TypeKind.MAP || symbol.type.getKind() == TypeKind.RECORD);\n+        Predicate<Symbol> predicate = symbol -> {\n+            if (symbol.kind() != SymbolKind.TYPE) {\n+                return false;\n+            }\n+            BallerinaTypeDescriptor typeDesc = ((TypeSymbol) symbol).typeDescriptor();\n+            return (typeDesc.kind() == TypeDescKind.MAP || typeDesc.kind() == TypeDescKind.RECORD);\n         };\n-        List<Scope.ScopeEntry> mappingTypes;\n+        List<Symbol> mappingTypes;\n         if (this.onQualifiedNameIdentifier(context, nodeAtCursor)) {\n-            mappingTypes = QNameReferenceUtil.getModuleContent(context, (QualifiedNameReferenceNode) nodeAtCursor,\n-                    predicate.and(scopeEntry -> (scopeEntry.symbol.flags & Flags.PUBLIC) == Flags.PUBLIC));\n+            mappingTypes= QNameReferenceUtil.getModuleContent(context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4OTYyMQ=="}, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NjQyNTg1OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ImplicitNewExpressionNodeContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMTowMjozNVrOHjmn-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMTowMjozNVrOHjmn-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NTAzNQ==", "bodyText": "findAny() will add some randomness into selection criteria even though we expect only one matching symbol. Shall we use findFirst() for the sake of consistent in the event of multiple results.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507095035", "createdAt": "2020-10-18T11:02:35Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ImplicitNewExpressionNodeContext.java", "diffHunk": "@@ -84,47 +83,47 @@ public ImplicitNewExpressionNodeContext() {\n                 return Optional.empty();\n         }\n \n-        Scope.ScopeEntry scopeEntry = null;\n-        List<Scope.ScopeEntry> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n-            if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n+        Optional<Symbol> nameReferenceSymbol = Optional.empty();\n+        List<Symbol> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n+        if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n             QualifiedNameReferenceNode nameReferenceNode = (QualifiedNameReferenceNode) typeDescriptor;\n \n-            Optional<Scope.ScopeEntry> pkgSymbol = CommonUtil.packageSymbolFromAlias(context,\n+            Optional<ModuleSymbol> pkgSymbol = CommonUtil.searchModuleForAlias(context,\n                     QNameReferenceUtil.getAlias(nameReferenceNode));\n-            if (!pkgSymbol.isPresent()) {\n+            if (pkgSymbol.isEmpty()) {\n                 return Optional.empty();\n             }\n-            scopeEntry = ((BPackageSymbol) pkgSymbol.get().symbol).scope.entries.entrySet().stream()\n-                    .filter(entry -> entry.getKey().value.equals(nameReferenceNode.identifier().text()))\n-                    .map(Map.Entry::getValue)\n-                    .findAny()\n-                    .orElse(null);\n+            nameReferenceSymbol = pkgSymbol.get().allSymbols().stream()\n+                    .filter(symbol -> symbol.name().equals(nameReferenceNode.identifier().text()))\n+                    .findAny();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NjQyNjk0OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ImplicitNewExpressionNodeContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMTowMzoxOVrOHjmooQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNToxNDozOFrOHj9YaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NTIwMQ==", "bodyText": "findAny() will add some randomness into selection criteria even though we expect only one matching symbol. Shall we use findFirst() for the sake of consistent in the event of multiple results.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507095201", "createdAt": "2020-10-18T11:03:19Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ImplicitNewExpressionNodeContext.java", "diffHunk": "@@ -84,47 +83,47 @@ public ImplicitNewExpressionNodeContext() {\n                 return Optional.empty();\n         }\n \n-        Scope.ScopeEntry scopeEntry = null;\n-        List<Scope.ScopeEntry> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n-            if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n+        Optional<Symbol> nameReferenceSymbol = Optional.empty();\n+        List<Symbol> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n+        if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n             QualifiedNameReferenceNode nameReferenceNode = (QualifiedNameReferenceNode) typeDescriptor;\n \n-            Optional<Scope.ScopeEntry> pkgSymbol = CommonUtil.packageSymbolFromAlias(context,\n+            Optional<ModuleSymbol> pkgSymbol = CommonUtil.searchModuleForAlias(context,\n                     QNameReferenceUtil.getAlias(nameReferenceNode));\n-            if (!pkgSymbol.isPresent()) {\n+            if (pkgSymbol.isEmpty()) {\n                 return Optional.empty();\n             }\n-            scopeEntry = ((BPackageSymbol) pkgSymbol.get().symbol).scope.entries.entrySet().stream()\n-                    .filter(entry -> entry.getKey().value.equals(nameReferenceNode.identifier().text()))\n-                    .map(Map.Entry::getValue)\n-                    .findAny()\n-                    .orElse(null);\n+            nameReferenceSymbol = pkgSymbol.get().allSymbols().stream()\n+                    .filter(symbol -> symbol.name().equals(nameReferenceNode.identifier().text()))\n+                    .findAny();\n         } else if (typeDescriptor.kind() == SyntaxKind.SIMPLE_NAME_REFERENCE) {\n             SimpleNameReferenceNode nameReferenceNode = (SimpleNameReferenceNode) typeDescriptor;\n-            scopeEntry = visibleSymbols.stream()\n-                    .filter(entry -> entry.symbol.name.value.equals(nameReferenceNode.name().text()))\n-                    .findAny()\n-                    .orElse(null);\n+            nameReferenceSymbol = visibleSymbols.stream()\n+                    .filter(symbol -> symbol.name().equals(nameReferenceNode.name().text()))\n+                    .findAny();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2Nzg4MQ==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507467881", "createdAt": "2020-10-19T05:14:38Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ImplicitNewExpressionNodeContext.java", "diffHunk": "@@ -84,47 +83,47 @@ public ImplicitNewExpressionNodeContext() {\n                 return Optional.empty();\n         }\n \n-        Scope.ScopeEntry scopeEntry = null;\n-        List<Scope.ScopeEntry> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n-            if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n+        Optional<Symbol> nameReferenceSymbol = Optional.empty();\n+        List<Symbol> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n+        if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n             QualifiedNameReferenceNode nameReferenceNode = (QualifiedNameReferenceNode) typeDescriptor;\n \n-            Optional<Scope.ScopeEntry> pkgSymbol = CommonUtil.packageSymbolFromAlias(context,\n+            Optional<ModuleSymbol> pkgSymbol = CommonUtil.searchModuleForAlias(context,\n                     QNameReferenceUtil.getAlias(nameReferenceNode));\n-            if (!pkgSymbol.isPresent()) {\n+            if (pkgSymbol.isEmpty()) {\n                 return Optional.empty();\n             }\n-            scopeEntry = ((BPackageSymbol) pkgSymbol.get().symbol).scope.entries.entrySet().stream()\n-                    .filter(entry -> entry.getKey().value.equals(nameReferenceNode.identifier().text()))\n-                    .map(Map.Entry::getValue)\n-                    .findAny()\n-                    .orElse(null);\n+            nameReferenceSymbol = pkgSymbol.get().allSymbols().stream()\n+                    .filter(symbol -> symbol.name().equals(nameReferenceNode.identifier().text()))\n+                    .findAny();\n         } else if (typeDescriptor.kind() == SyntaxKind.SIMPLE_NAME_REFERENCE) {\n             SimpleNameReferenceNode nameReferenceNode = (SimpleNameReferenceNode) typeDescriptor;\n-            scopeEntry = visibleSymbols.stream()\n-                    .filter(entry -> entry.symbol.name.value.equals(nameReferenceNode.name().text()))\n-                    .findAny()\n-                    .orElse(null);\n+            nameReferenceSymbol = visibleSymbols.stream()\n+                    .filter(symbol -> symbol.name().equals(nameReferenceNode.name().text()))\n+                    .findAny();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NTIwMQ=="}, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NjQzNDk2OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LSAnnotationCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMTowODoxNlrOHjmtqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNToxNDo0OFrOHj9Y0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NjQ5MQ==", "bodyText": "Shall we use Map interface here? Map<ModuleID, List<AnnotationSymbol>> typeAnnotations = new HashMap<>()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507096491", "createdAt": "2020-10-18T11:08:16Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LSAnnotationCache.java", "diffHunk": "@@ -54,26 +57,27 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(LSPackageCache.class);\n \n-    private static HashMap<PackageID, List<BAnnotationSymbol>> typeAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> classAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> objectAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> functionAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> objectMethodAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> resourceAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> parameterAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> returnAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> serviceAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> listenerAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> annotationAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> externalAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> varAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> constAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> workerAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> fieldAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> recordFieldAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> objectFieldAnnotations = new HashMap<>();\n+    private static final HashMap<ModuleID, List<AnnotationSymbol>> typeAnnotations = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2Nzk4NA==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507467984", "createdAt": "2020-10-19T05:14:48Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LSAnnotationCache.java", "diffHunk": "@@ -54,26 +57,27 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(LSPackageCache.class);\n \n-    private static HashMap<PackageID, List<BAnnotationSymbol>> typeAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> classAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> objectAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> functionAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> objectMethodAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> resourceAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> parameterAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> returnAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> serviceAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> listenerAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> annotationAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> externalAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> varAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> constAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> workerAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> fieldAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> recordFieldAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> objectFieldAnnotations = new HashMap<>();\n+    private static final HashMap<ModuleID, List<AnnotationSymbol>> typeAnnotations = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NjQ5MQ=="}, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NjQzNjAxOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LSAnnotationCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMTowODo1MFrOHjmuUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNToxNToxNFrOHj9Zsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NjY1OQ==", "bodyText": "Shall we use Map interface here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507096659", "createdAt": "2020-10-18T11:08:50Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LSAnnotationCache.java", "diffHunk": "@@ -184,13 +152,13 @@ private static void addAttachment(BAnnotationSymbol bAnnotationSymbol,\n             case RETURN_TYPE_DESCRIPTOR:\n                 return returnAnnotations;\n             case OBJECT_FIELD:\n-                HashMap<PackageID, List<BAnnotationSymbol>> objFieldAnnotations = new HashMap<>();\n+                HashMap<ModuleID, List<AnnotationSymbol>> objFieldAnnotations = new HashMap<>();\n                 objFieldAnnotations.putAll(fieldAnnotations);\n                 objFieldAnnotations.putAll(objectFieldAnnotations);\n                 return objFieldAnnotations;\n             case RECORD_FIELD:\n             case RECORD_FIELD_WITH_DEFAULT_VALUE:\n-                HashMap<PackageID, List<BAnnotationSymbol>> recFieldAnnotations = new HashMap<>();\n+                HashMap<ModuleID, List<AnnotationSymbol>> recFieldAnnotations = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2ODIxMQ==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507468211", "createdAt": "2020-10-19T05:15:14Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LSAnnotationCache.java", "diffHunk": "@@ -184,13 +152,13 @@ private static void addAttachment(BAnnotationSymbol bAnnotationSymbol,\n             case RETURN_TYPE_DESCRIPTOR:\n                 return returnAnnotations;\n             case OBJECT_FIELD:\n-                HashMap<PackageID, List<BAnnotationSymbol>> objFieldAnnotations = new HashMap<>();\n+                HashMap<ModuleID, List<AnnotationSymbol>> objFieldAnnotations = new HashMap<>();\n                 objFieldAnnotations.putAll(fieldAnnotations);\n                 objFieldAnnotations.putAll(objectFieldAnnotations);\n                 return objFieldAnnotations;\n             case RECORD_FIELD:\n             case RECORD_FIELD_WITH_DEFAULT_VALUE:\n-                HashMap<PackageID, List<BAnnotationSymbol>> recFieldAnnotations = new HashMap<>();\n+                HashMap<ModuleID, List<AnnotationSymbol>> recFieldAnnotations = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NjY1OQ=="}, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NjQzOTg2OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ReceiveActionNodeContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMToxMTowOFrOHjmwuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNToxNDo1NlrOHj9ZDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NzI3Mg==", "bodyText": "Shall we use List interface here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507097272", "createdAt": "2020-10-18T11:11:08Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ReceiveActionNodeContext.java", "diffHunk": "@@ -46,13 +46,11 @@ public ReceiveActionNodeContext() {\n     @Override\n     public List<LSCompletionItem> getCompletions(LSContext context, ReceiveActionNode node)\n             throws LSCompletionException {\n-        // TODO: Following logic can be generalized\n-        ArrayList<Scope.ScopeEntry> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n-        List<Scope.ScopeEntry> filteredWorkers = visibleSymbols.stream()\n-                .filter(scopeEntry -> (scopeEntry.symbol.flags & Flags.WORKER) == Flags.WORKER)\n+        ArrayList<Symbol> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2ODA0NQ==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507468045", "createdAt": "2020-10-19T05:14:56Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ReceiveActionNodeContext.java", "diffHunk": "@@ -46,13 +46,11 @@ public ReceiveActionNodeContext() {\n     @Override\n     public List<LSCompletionItem> getCompletions(LSContext context, ReceiveActionNode node)\n             throws LSCompletionException {\n-        // TODO: Following logic can be generalized\n-        ArrayList<Scope.ScopeEntry> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n-        List<Scope.ScopeEntry> filteredWorkers = visibleSymbols.stream()\n-                .filter(scopeEntry -> (scopeEntry.symbol.flags & Flags.WORKER) == Flags.WORKER)\n+        ArrayList<Symbol> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NzI3Mg=="}, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NjQ0MzE0OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/RecordFieldWithDefaultValueNodeContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxMToxMjo1NlrOHjmyzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNToxNTowNVrOHj9Zaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NzgwNg==", "bodyText": "Can move into a more meaningfull name like variableFilter. Can't we use symbolKind over instaceOf here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507097806", "createdAt": "2020-10-18T11:12:56Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/RecordFieldWithDefaultValueNodeContext.java", "diffHunk": "@@ -67,11 +67,8 @@ public RecordFieldWithDefaultValueNodeContext() {\n             (2) [module:]TypeName c = module:a<cursor>\n              */\n             QualifiedNameReferenceNode qNameRef = (QualifiedNameReferenceNode) node.expression();\n-            Predicate<Scope.ScopeEntry> filter = scopeEntry -> {\n-                BSymbol symbol = scopeEntry.symbol;\n-                return symbol instanceof BVarSymbol && (symbol.flags & Flags.PUBLIC) == Flags.PUBLIC;\n-            };\n-            List<Scope.ScopeEntry> moduleContent = QNameReferenceUtil.getModuleContent(context, qNameRef, filter);\n+            Predicate<Symbol> filter = symbol -> symbol instanceof VariableSymbol;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2ODEzOQ==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507468139", "createdAt": "2020-10-19T05:15:05Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/RecordFieldWithDefaultValueNodeContext.java", "diffHunk": "@@ -67,11 +67,8 @@ public RecordFieldWithDefaultValueNodeContext() {\n             (2) [module:]TypeName c = module:a<cursor>\n              */\n             QualifiedNameReferenceNode qNameRef = (QualifiedNameReferenceNode) node.expression();\n-            Predicate<Scope.ScopeEntry> filter = scopeEntry -> {\n-                BSymbol symbol = scopeEntry.symbol;\n-                return symbol instanceof BVarSymbol && (symbol.flags & Flags.PUBLIC) == Flags.PUBLIC;\n-            };\n-            List<Scope.ScopeEntry> moduleContent = QNameReferenceUtil.getModuleContent(context, qNameRef, filter);\n+            Predicate<Symbol> filter = symbol -> symbol instanceof VariableSymbol;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NzgwNg=="}, "originalCommit": {"oid": "7eb43be914f90e5a34687561544dbeac700a0945"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4771, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}