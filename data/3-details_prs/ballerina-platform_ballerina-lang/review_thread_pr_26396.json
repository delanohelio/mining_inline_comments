{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MzI4ODY4", "number": 26396, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo0MDo0MVrOEvqinQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1Njo1OFrOEv4yAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDE1NTE3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo0MDo0MVrOHkxMHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTo0NzoxNlrOHkz9HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD(\"spread.field.may.duplicate.already.specified.keys\"),\n          \n          \n            \n                SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS(\"spread.field.may.duplicate.already.specified.keys\"),", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508316701", "createdAt": "2020-10-20T08:40:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -295,6 +295,9 @@\n     DUPLICATE_KEY_IN_RECORD_LITERAL(\"duplicate.key.in.record.literal\"),\n     DUPLICATE_KEY_IN_TABLE_LITERAL(\"duplicate.key.in.table.literal\"),\n     DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP(\"duplicate.key.in.record.literal.spread.op\"),\n+    POSSIBLE_DUPLICATE_OF_FIELD_SPECIFIED_VIA_SPREAD_OP(\"possible.duplicate.of.field.specified.via.spread.op\"),\n+    ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD(\"spread.field.may.duplicate.already.specified.keys\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MjAxMw==", "bodyText": "Oh. missed it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508362013", "createdAt": "2020-10-20T09:47:16Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -295,6 +295,9 @@\n     DUPLICATE_KEY_IN_RECORD_LITERAL(\"duplicate.key.in.record.literal\"),\n     DUPLICATE_KEY_IN_TABLE_LITERAL(\"duplicate.key.in.table.literal\"),\n     DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP(\"duplicate.key.in.record.literal.spread.op\"),\n+    POSSIBLE_DUPLICATE_OF_FIELD_SPECIFIED_VIA_SPREAD_OP(\"possible.duplicate.of.field.specified.via.spread.op\"),\n+    ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD(\"spread.field.may.duplicate.already.specified.keys\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjcwMQ=="}, "originalCommit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDE3NTk3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo0NToyMFrOHkxZBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTowNzowNFrOHk28kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyMDAwNw==", "bodyText": "Shouldn't we continue here, instead of breaking? Please check everywhere break has been introduced. We want the analysis to run for the rest of the fields, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508320007", "createdAt": "2020-10-20T08:45:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,71 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxMTAyNg==", "bodyText": "okay", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508411026", "createdAt": "2020-10-20T11:07:04Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,71 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyMDAwNw=="}, "originalCommit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDIyMjE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1NjoyM1rOHkx1tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1NjoyM1rOHkx1tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNzM0OA==", "bodyText": "Isn't this a possible duplicate?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508327348", "createdAt": "2020-10-20T08:56:23Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,71 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        break;\n+                    }\n+                    inclusiveTypeSpreadField = spreadOpField;\n+\n+                    if (fields.size() > 1) {\n+                        if (names.size() > 0) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD,\n+                                            spreadOpExpr);\n+                            break;\n+                        }\n+                        // Skipping to avoid multiple error messages\n+                        continue;\n+                    }\n+                }\n+\n+                if (spreadFieldTypeTag != TypeTags.RECORD) {\n                     continue;\n                 }\n \n-                for (BField bField : ((BRecordType) spreadOpExpr.type).fields.values()) {\n-                    if (Symbols.isOptional(bField.symbol)) {\n-                        continue;\n+                BRecordType spreadExprRecordType = (BRecordType) spreadOpExprType;\n+                boolean isSpreadExprRecordTypeSealed = spreadExprRecordType.sealed;\n+                if (!isSpreadExprRecordTypeSealed) {\n+                    // More than one spread-field with inclusive-type-descriptors are not allowed.\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                    } else {\n+                        inclusiveTypeSpreadField = spreadOpField;\n+                    }\n+                }\n+\n+                LinkedHashMap<String, BField> fieldsInRecordType = spreadExprRecordType.fields;\n+                for (Object fieldName : names) {\n+                    if (fieldsInRecordType.containsKey(fieldName)) {\n+                        if (fieldsInRecordType.get(fieldName).type.tag != TypeTags.NEVER) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                                            recordLiteral.type.getKind().typeName(), fieldName, spreadOpField);\n+                        }\n+                    } else if (!isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD,\n+                                        spreadOpExpr);\n+                        break;\n                     }\n+                }\n \n+                for (BField bField : fieldsInRecordType.values()) {\n                     String name = bField.name.value;\n                     if (names.contains(name)) {\n-                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                        continue;\n+                    }\n+\n+                    if (bField.type.tag == TypeTags.NEVER) {\n+                        neverTypedKeys.add(name);\n+                        continue;\n+                    }\n+\n+                    if (!neverTypedKeys.remove(name) &&\n+                            inclusiveTypeSpreadField != null && isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos,\n+                                        DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTUwNDUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1ODoxNVrOHk-L4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowNTozMFrOHk-pFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyOTYzMg==", "bodyText": "Shouldn't we continue here also? While this error should only be logged once, we need to log the error in the if block for all definitely duplicate keys.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508529632", "createdAt": "2020-10-20T13:58:15Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,72 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        continue;\n+                    }\n+                    inclusiveTypeSpreadField = spreadOpField;\n+\n+                    if (fields.size() > 1) {\n+                        if (names.size() > 0) {\n+                            this.dlog.error(spreadOpExpr.pos,\n+                                            DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                            spreadOpExpr);\n+                        }\n+                        // Skipping to avoid multiple error messages\n+                        continue;\n+                    }\n+                }\n+\n+                if (spreadFieldTypeTag != TypeTags.RECORD) {\n                     continue;\n                 }\n \n-                for (BField bField : ((BRecordType) spreadOpExpr.type).fields.values()) {\n-                    if (Symbols.isOptional(bField.symbol)) {\n-                        continue;\n+                BRecordType spreadExprRecordType = (BRecordType) spreadOpExprType;\n+                boolean isSpreadExprRecordTypeSealed = spreadExprRecordType.sealed;\n+                if (!isSpreadExprRecordTypeSealed) {\n+                    // More than one spread-field with inclusive-type-descriptors are not allowed.\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                    } else {\n+                        inclusiveTypeSpreadField = spreadOpField;\n                     }\n+                }\n \n+                LinkedHashMap<String, BField> fieldsInRecordType = spreadExprRecordType.fields;\n+                for (Object fieldName : names) {\n+                    if (fieldsInRecordType.containsKey(fieldName)) {\n+                        if (fieldsInRecordType.get(fieldName).type.tag != TypeTags.NEVER) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                                            recordLiteral.type.getKind().typeName(), fieldName, spreadOpField);\n+                        }\n+                    } else if (!isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos,\n+                                        DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                        spreadOpExpr);\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c709cbc7ece1744237b715772d41a319a5a0f8"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzNzExMA==", "bodyText": "Shall we check if we can merge the if condition above (checking never) with the for loop below.\nThat way here we can check !fieldsInRecordType.containsKey(fieldName) && !isSpreadExprRecordTypeSealed and log the error and break here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508537110", "createdAt": "2020-10-20T14:05:30Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,72 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        continue;\n+                    }\n+                    inclusiveTypeSpreadField = spreadOpField;\n+\n+                    if (fields.size() > 1) {\n+                        if (names.size() > 0) {\n+                            this.dlog.error(spreadOpExpr.pos,\n+                                            DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                            spreadOpExpr);\n+                        }\n+                        // Skipping to avoid multiple error messages\n+                        continue;\n+                    }\n+                }\n+\n+                if (spreadFieldTypeTag != TypeTags.RECORD) {\n                     continue;\n                 }\n \n-                for (BField bField : ((BRecordType) spreadOpExpr.type).fields.values()) {\n-                    if (Symbols.isOptional(bField.symbol)) {\n-                        continue;\n+                BRecordType spreadExprRecordType = (BRecordType) spreadOpExprType;\n+                boolean isSpreadExprRecordTypeSealed = spreadExprRecordType.sealed;\n+                if (!isSpreadExprRecordTypeSealed) {\n+                    // More than one spread-field with inclusive-type-descriptors are not allowed.\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                    } else {\n+                        inclusiveTypeSpreadField = spreadOpField;\n                     }\n+                }\n \n+                LinkedHashMap<String, BField> fieldsInRecordType = spreadExprRecordType.fields;\n+                for (Object fieldName : names) {\n+                    if (fieldsInRecordType.containsKey(fieldName)) {\n+                        if (fieldsInRecordType.get(fieldName).type.tag != TypeTags.NEVER) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                                            recordLiteral.type.getKind().typeName(), fieldName, spreadOpField);\n+                        }\n+                    } else if (!isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos,\n+                                        DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                        spreadOpExpr);\n+                        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyOTYzMg=="}, "originalCommit": {"oid": "b1c709cbc7ece1744237b715772d41a319a5a0f8"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjQ4ODM0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1Njo1OFrOHlIARw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzoxODo1NlrOHlI3jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MDUwMw==", "bodyText": "Shall we create an issue to revisit these sets and make them Set<String> if possible?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508690503", "createdAt": "2020-10-20T16:56:58Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2267,6 +2268,7 @@ public void visit(BLangRecordLiteral recordLiteral) {\n         }\n \n         Set<Object> names = new HashSet<>();\n+        Set<Object> neverTypedKeys = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2f681267eb3808cceb98bfaf494e3000dc9c5d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwNDY1Mw==", "bodyText": "Sure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508704653", "createdAt": "2020-10-20T17:18:56Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2267,6 +2268,7 @@ public void visit(BLangRecordLiteral recordLiteral) {\n         }\n \n         Set<Object> names = new HashSet<>();\n+        Set<Object> neverTypedKeys = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MDUwMw=="}, "originalCommit": {"oid": "eb2f681267eb3808cceb98bfaf494e3000dc9c5d"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4777, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}