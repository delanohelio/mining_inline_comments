{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1OTAxMjIy", "number": 27100, "title": "Fix TypeConverter error", "bodyText": "Purpose\n\n$title\nWhen a converting to a record, if a union type is present and the value was convertible to multiple options of the union type converter assumed this is an error.\n\nAlso added test cases to check json with decimal using fromJsonWithType langlib function\nFixes #27549\nApproach\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-11-23T17:56:24Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100", "merged": true, "mergeCommit": {"oid": "5ac28796fa10333f6a3a7b359d6828b39fe948cb"}, "closed": true, "closedAt": "2020-12-21T09:06:06Z", "author": {"login": "dulvinw"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfaJWfAFqTUzNjc3MzEzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoSLBQAFqTU1NjIyNjIyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NzczMTMw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#pullrequestreview-536773130", "createdAt": "2020-11-23T19:16:38Z", "commit": {"oid": "0131e6acee2227ef17352b3c52cb4284a9fc4050"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToxNjozOFrOH4b1AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToxNjozOFrOH4b1AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzODI0MQ==", "bodyText": "Shall we move these tests to org.ballerinalang.langlib.test.LangLibValueTest#testFromJsonWithType?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r528938241", "createdAt": "2020-11-23T19:16:38Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java", "diffHunk": "@@ -133,4 +133,9 @@ public void testConvertMapJsonWithDecimalToOpenRecord() {\n     public void testConvertMapJsonWithDecimalUnionTarget() {\n         BRunUtil.invoke(compileResult, \"testConvertMapJsonWithDecimalUnionTarget\");\n     }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0131e6acee2227ef17352b3c52cb4284a9fc4050"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDU3NjI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#pullrequestreview-548457628", "createdAt": "2020-12-09T18:06:14Z", "commit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNjoxNFrOICiU8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozNzowNVrOICjmUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMDQ4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                json expectedJson = { \"value\": 132 };\n          \n          \n            \n                json expectedJson = {\"value\": 132};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539530481", "createdAt": "2020-12-09T18:06:14Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMDU0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Argument expected = { \"value\": 132 };\n          \n          \n            \n                Argument expected = {\"value\": 132};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539530548", "createdAt": "2020-12-09T18:06:23Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };\n+\n+    Argument expected = { \"value\": 132 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMDg4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else {\n          \n          \n            \n                    assert(actual, expected);\n          \n          \n            \n                }\n          \n          \n            \n                }\n          \n          \n            \n                assert(actual, expected);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539530881", "createdAt": "2020-12-09T18:06:52Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };\n+\n+    Argument expected = { \"value\": 132 };\n+    var actual = expectedJson.cloneWithType(Argument);\n+\n+    if (actual is error) {\n+        panic error(\"`cloneWithType` returned an error.\");\n+    } else {\n+        assert(actual, expected);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMTYwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    name: \"foo\",\n          \n          \n            \n                    factor: 1.23d\n          \n          \n            \n                name: \"foo\",\n          \n          \n            \n                factor: 1.23d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539531609", "createdAt": "2020-12-09T18:07:57Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -78,7 +78,7 @@ type OpenRecordWithUnionTarget record {|\n map<json> mp = {\n         name: \"foo\",\n         factor: 1.23d", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMjgzNg==", "bodyText": "Shouldn't the name reflect that it's conversion with numeric types?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539532836", "createdAt": "2020-12-09T18:09:57Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionWithStampTypesTest.java", "diffHunk": "@@ -133,4 +133,9 @@ public void testConvertMapJsonWithDecimalToOpenRecord() {\n     public void testConvertMapJsonWithDecimalUnionTarget() {\n         BRunUtil.invoke(compileResult, \"testConvertMapJsonWithDecimalUnionTarget\");\n     }\n+\n+    @Test\n+    void testConvertUnion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MjcwMA==", "bodyText": "Were we able to reproduce the original CCE mentioned in #26632? Both this example and the one in the issue seem to result in \"ballerina/lang.typedesc}ConversionError\" errors on slp7.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539542700", "createdAt": "2020-12-09T18:24:41Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/conversion/native-conversion-stampable-values.bal", "diffHunk": "@@ -104,6 +104,25 @@ function testConvertMapJsonWithDecimalUnionTarget() {\n     assert(castedValue[\"name\"], mp[\"name\"]);\n }\n \n+public type Scalar int|string|float|boolean;\n+\n+public type Argument record {|\n+    Scalar value;\n+|};\n+\n+public function testConvertUnion() {\n+    json expectedJson = { \"value\": 132 };\n+\n+    Argument expected = { \"value\": 132 };\n+    var actual = expectedJson.cloneWithType(Argument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MzIxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        name: \"foo\",\n          \n          \n            \n                        factor: 1.23d\n          \n          \n            \n                    name: \"foo\",\n          \n          \n            \n                    factor: 1.23d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539543216", "createdAt": "2020-12-09T18:25:27Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -1245,3 +1245,23 @@ function testEnsureTypeNegative() {\n     assertEquality(\"error(\\\"{ballerina}TypeCastError\\\",message=\\\"incompatible types: '()' cannot be cast to 'int'\\\")\", e5.toString());\n     assertEquality(\"error(\\\"{ballerina/lang.map}KeyNotFound\\\",message=\\\"Key 'children' not found in JSON mapping\\\")\", e6.toString());\n }\n+\n+type OpenRecordWithUnionTarget record {|\n+    string|decimal...;\n+|};\n+\n+function tesFromJsonWithTypeMapWithDecimal() {\n+    map<json> mp = {\n+            name: \"foo\",\n+            factor: 1.23d", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1MTMxNA==", "bodyText": "Don't we still have to check for > 1 convertible types? That should also be an error, right? Let's add a test for the same.\nThe following should fail.\npublic type Maps record {|int i; int...;|}|record {|int i?;|};\n\npublic type Value record {|\n    Maps value;\n|};\n\npublic function main() {\n    json j = {\"value\": <map<int>> {i: 1}};\n    Value res = checkpanic j.cloneWithType(Value);\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r539551314", "createdAt": "2020-12-09T18:37:05Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -355,7 +355,7 @@ private static boolean isConvertibleToRecordType(Object sourceValue, BRecordType\n             } else {\n                 if (targetFieldTypes.containsKey(fieldName)) {\n                     if (getConvertibleTypes(valueEntry.getValue(), targetFieldTypes.get(fieldName),\n-                            unresolvedValues).size() != 1) {\n+                            unresolvedValues).size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6fc093391e79c72eeb48d6a39b3d3967590dc47", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6fc093391e79c72eeb48d6a39b3d3967590dc47", "committedDate": "2020-11-27T07:40:19Z", "message": "Fix TypeConverter\n\nThe method `isConvertibleToRecordType` assumed if one of its members could be convertible to multiple types, its an invalid conversion. This assumption is wrong since a value could be converted to multiple type. As long as the convertible types include the target type, the conversion is possiblex"}, "afterCommit": {"oid": "df92ce608bd51445305a26077874d7c854b6ea76", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df92ce608bd51445305a26077874d7c854b6ea76", "committedDate": "2020-12-17T04:48:54Z", "message": "Fix TypeConverter\n\nWhen converting union types, if one of the member types are the same as the source type, we early return without checking the rest of the types since we do not have to convert the value.\nAdded few more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDM0MDA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#pullrequestreview-556034009", "createdAt": "2020-12-20T16:52:57Z", "commit": {"oid": "95e2e7d77c6e1430eb04a1b2a0d68b007cf43974"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNjo1Mjo1N1rOIJFt6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNjo1Mjo1N1rOIJFt6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwMTc3MQ==", "bodyText": "In L248 shouldn't we directly check io.ballerina.runtime.internal.TypeChecker#checkIsType(java.lang.Object, io.ballerina.runtime.api.types.Type) instead?\nChecking .equals() may not work for subtypes, right? Wouldn't work with structurally equivalent types too.\nLet's also add tests for such scenarios.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546401771", "createdAt": "2020-12-20T16:52:57Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {\n+        Type valueType = TypeChecker.getType(value);\n+        if (valueType.equals(targetType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2e7d77c6e1430eb04a1b2a0d68b007cf43974"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f63d35785e395ec51799ed19fc6059dc665e4c8c", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f63d35785e395ec51799ed19fc6059dc665e4c8c", "committedDate": "2020-12-21T06:06:31Z", "message": "Add fromJsonWithType test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d590ca40bc3883bdb21a79055729f5cecc4f419", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d590ca40bc3883bdb21a79055729f5cecc4f419", "committedDate": "2020-12-21T06:06:31Z", "message": "Fix TypeConverter\n\nThe method `isConvertibleToRecordType` assumed if one of its members could be convertible to multiple types, its an invalid conversion. This assumption is wrong since a value could be converted to multiple type. As long as the convertible types include the target type, the conversion is possiblex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e948204edd1da80cefa1ef8c56421a206e5b61c5", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e948204edd1da80cefa1ef8c56421a206e5b61c5", "committedDate": "2020-12-21T06:06:31Z", "message": "Fix TypeConverter\n\nWhen converting union types, if one of the member types are the same as the source type, we early return without checking the rest of the types since we do not have to convert the value.\nAdded few more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "895bd69fd73003f4914f363b3298d360b4378bea", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/895bd69fd73003f4914f363b3298d360b4378bea", "committedDate": "2020-12-21T06:06:32Z", "message": "Fix NativeConversionWithStampTypeTest\n\nFixed the assert method to accept error values as well"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95e2e7d77c6e1430eb04a1b2a0d68b007cf43974", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95e2e7d77c6e1430eb04a1b2a0d68b007cf43974", "committedDate": "2020-12-17T05:13:12Z", "message": "Fix NativeConversionWithStampTypeTest\n\nFixed the assert method to accept error values as well"}, "afterCommit": {"oid": "16ef515f404bea49b6b71b96518974f4c9feaf26", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16ef515f404bea49b6b71b96518974f4c9feaf26", "committedDate": "2020-12-21T06:55:40Z", "message": "Change type test method\n\nIn the typeChecker checking if the no convert is needed is now done by `==` instead of `.equals`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTY2MTk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#pullrequestreview-556166199", "createdAt": "2020-12-21T07:02:57Z", "commit": {"oid": "16ef515f404bea49b6b71b96518974f4c9feaf26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowMjo1N1rOIJOK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowMjo1N1rOIJOK5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI2MA==", "bodyText": "Shall we call this checkIsSameType instead? Because checkIsType means something else in TypeChecker?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#discussion_r546540260", "createdAt": "2020-12-21T07:02:57Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeConverter.java", "diffHunk": "@@ -267,6 +270,15 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean checkIsType(Object value, Type targetType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef515f404bea49b6b71b96518974f4c9feaf26"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cf7b87752844c0085ac660626dc2a6d82dd266e", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cf7b87752844c0085ac660626dc2a6d82dd266e", "committedDate": "2020-12-21T07:22:34Z", "message": "Change type test method\n\nIn the typeChecker checking if the no convert is needed is now done by `==` instead of `.equals`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16ef515f404bea49b6b71b96518974f4c9feaf26", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16ef515f404bea49b6b71b96518974f4c9feaf26", "committedDate": "2020-12-21T06:55:40Z", "message": "Change type test method\n\nIn the typeChecker checking if the no convert is needed is now done by `==` instead of `.equals`"}, "afterCommit": {"oid": "0cf7b87752844c0085ac660626dc2a6d82dd266e", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cf7b87752844c0085ac660626dc2a6d82dd266e", "committedDate": "2020-12-21T07:22:34Z", "message": "Change type test method\n\nIn the typeChecker checking if the no convert is needed is now done by `==` instead of `.equals`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjI2MjI5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27100#pullrequestreview-556226229", "createdAt": "2020-12-21T09:04:32Z", "commit": {"oid": "0cf7b87752844c0085ac660626dc2a6d82dd266e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4806, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}