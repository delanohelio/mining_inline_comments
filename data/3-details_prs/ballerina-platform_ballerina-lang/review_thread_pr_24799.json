{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNzk1NjE5", "number": 24799, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNTo1NTowNVrOEPZ8IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjozMDo0M1rOEPaajw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTg5MDg4OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/ballerina/src/test/Module.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNTo1NTowNVrOGzGRvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjoyMjowOVrOGzGzCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIzMzQwNw==", "bodyText": "Since the feature is generalized to handle both imported functions and functions in the same module using the test:MockFunction, we don't need this separation now. We can put a general description under the title ### Function Mocking", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24799#discussion_r456233407", "createdAt": "2020-07-17T05:55:05Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-core/src/main/ballerina/src/test/Module.md", "diffHunk": "@@ -114,6 +114,25 @@ function testMockImportedFunction() {\n }\n ```\n \n+Scoping and stubbing of mock functions declared for import functions is also supported\n+\n+```ballerina\n+import ballerina/math;\n+import ballerina/test;\n+\n+@test:Mock {\n+    moduleName : \"ballerina/math\",\n+    functionName : \"absInt\"\n+}\n+test:MockFunction mock_absInt = new();\n+\n+@test:Config {}\n+public function testFunction() {\n+    test:when(mock_absInt).thenReturn(100);\n+    test:assertEquals(math:absInt(-5), 100);\n+}\n+```\n+\n #### Mocking a function in the same module", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49edbf9f1a3e2870b111917b060f9e48b6e5f46c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0MTkzMQ==", "bodyText": "Changed it so that it we use a general description for both", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24799#discussion_r456241931", "createdAt": "2020-07-17T06:22:09Z", "author": {"login": "Ibaqu"}, "path": "misc/testerina/modules/testerina-core/src/main/ballerina/src/test/Module.md", "diffHunk": "@@ -114,6 +114,25 @@ function testMockImportedFunction() {\n }\n ```\n \n+Scoping and stubbing of mock functions declared for import functions is also supported\n+\n+```ballerina\n+import ballerina/math;\n+import ballerina/test;\n+\n+@test:Mock {\n+    moduleName : \"ballerina/math\",\n+    functionName : \"absInt\"\n+}\n+test:MockFunction mock_absInt = new();\n+\n+@test:Config {}\n+public function testFunction() {\n+    test:when(mock_absInt).thenReturn(100);\n+    test:assertEquals(math:absInt(-5), 100);\n+}\n+```\n+\n #### Mocking a function in the same module", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIzMzQwNw=="}, "originalCommit": {"oid": "49edbf9f1a3e2870b111917b060f9e48b6e5f46c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTk2ODc5OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/ballerina/src/test/Module.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjozMDo0M1rOGzG-pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNjozMzozMlrOGzHCUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0NDkwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The annotation `@test:Mock` is used to declare a MockFunction object, with details of the name of the function to be mocked, as well as the module name if an import function is being mocked. The module name value of the annotation is optional if the function being mocked is not an import function.\n          \n          \n            \n            The annotation `@test:Mock {}` is used to declare a `MockFunction` object, with details of the name of the function to be mocked, as well as the module name if an import function is being mocked. The module name value of the annotation is optional if the function being mocked is not an import function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24799#discussion_r456244902", "createdAt": "2020-07-17T06:30:43Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-core/src/main/ballerina/src/test/Module.md", "diffHunk": "@@ -87,38 +87,28 @@ function intAdd(int a, int b) returns (int) {\n The test module provides capabilities to mock a function or an object for unit testing. The mocking features can be used to control the behavior of functions and objects by defining return values or replacing the entire object or function with a user-defined equivalent. This feature will help you to test the Ballerina code independently from other modules and external endpoints.\n \n ### Function Mocking\n-Function mocking allows to control the behavior of a function in the module under test or a function of an imported module. \n+Function mocking allows to control the behavior of a function in the module being tested or a function of an imported module. \n \n-An annotation is used to declare a mock function within which the original function to be mocked should be defined using the annotation parameters. The function specified with this annotation allows to mock an imported function whereas the same annotation specified with the test:MockFunction object allows to mock a function in the module under test.\n-\n-#### Mocking an imported function\n-\n-Mocking an imported function will invoke the mock function every time that the original function is called. Mocking a function will apply the mocked function to every instance of the original function call. It is not limited to the test file where it is being mocked. A compile time error will be thrown in case of a signature mismatch between the mock function and the original.\n+The annotation `@test:Mock` is used to declare a MockFunction object, with details of the name of the function to be mocked, as well as the module name if an import function is being mocked. The module name value of the annotation is optional if the function being mocked is not an import function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60041d459c35492f0bb178bdf8d85e8aaa914a52"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0NTg0Mw==", "bodyText": "Commited suggestion", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24799#discussion_r456245843", "createdAt": "2020-07-17T06:33:32Z", "author": {"login": "Ibaqu"}, "path": "misc/testerina/modules/testerina-core/src/main/ballerina/src/test/Module.md", "diffHunk": "@@ -87,38 +87,28 @@ function intAdd(int a, int b) returns (int) {\n The test module provides capabilities to mock a function or an object for unit testing. The mocking features can be used to control the behavior of functions and objects by defining return values or replacing the entire object or function with a user-defined equivalent. This feature will help you to test the Ballerina code independently from other modules and external endpoints.\n \n ### Function Mocking\n-Function mocking allows to control the behavior of a function in the module under test or a function of an imported module. \n+Function mocking allows to control the behavior of a function in the module being tested or a function of an imported module. \n \n-An annotation is used to declare a mock function within which the original function to be mocked should be defined using the annotation parameters. The function specified with this annotation allows to mock an imported function whereas the same annotation specified with the test:MockFunction object allows to mock a function in the module under test.\n-\n-#### Mocking an imported function\n-\n-Mocking an imported function will invoke the mock function every time that the original function is called. Mocking a function will apply the mocked function to every instance of the original function call. It is not limited to the test file where it is being mocked. A compile time error will be thrown in case of a signature mismatch between the mock function and the original.\n+The annotation `@test:Mock` is used to declare a MockFunction object, with details of the name of the function to be mocked, as well as the module name if an import function is being mocked. The module name value of the annotation is optional if the function being mocked is not an import function.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI0NDkwMg=="}, "originalCommit": {"oid": "60041d459c35492f0bb178bdf8d85e8aaa914a52"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 403, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}