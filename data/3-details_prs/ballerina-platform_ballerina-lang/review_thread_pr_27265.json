{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMDEwMzc2", "number": 27265, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo0NDo0OVrOE_-L3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzoxNTo0OVrOE__nJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTE0NTg5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/spotbugs-exclude.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo0NDo0OVrOH9-OHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMjoyOTowMVrOIAJoIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0NDYwNg==", "bodyText": "Are all of these false positives?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r534744606", "createdAt": "2020-12-03T06:44:49Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/spotbugs-exclude.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<!--\n+  ~  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~  WSO2 Inc. licenses this file to you under the Apache License,\n+  ~  Version 2.0 (the \"License\"); you may not use this file except\n+  ~  in compliance with the License.\n+  ~  You may obtain a copy of the License at\n+  ~\n+  ~    http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~  Unless required by applicable law or agreed to in writing,\n+  ~  software distributed under the License is distributed on an\n+  ~  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~  KIND, either express or implied.  See the License for the\n+  ~  specific language governing permissions and limitations\n+  ~  under the License.\n+  -->\n+\n+<FindBugsFilter>\n+    <Match>\n+        <Package name=\"org.ballerinalang.debugger.test.utils\"/>\n+    </Match>\n+    <Match>\n+        <Bug pattern=\"DM_DEFAULT_ENCODING\" />\n+    </Match>\n+    <Match>\n+        <Bug pattern=\"DLS_DEAD_LOCAL_STORE\" />\n+    </Match>\n+    <Match>\n+        <Bug pattern=\"OS_OPEN_STREAM\" />\n+    </Match>\n+</FindBugsFilter>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyODY0MQ==", "bodyText": "Fixed all of the above spot bug issues.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r537028641", "createdAt": "2020-12-06T12:29:01Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/spotbugs-exclude.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<!--\n+  ~  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~  WSO2 Inc. licenses this file to you under the Apache License,\n+  ~  Version 2.0 (the \"License\"); you may not use this file except\n+  ~  in compliance with the License.\n+  ~  You may obtain a copy of the License at\n+  ~\n+  ~    http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~  Unless required by applicable law or agreed to in writing,\n+  ~  software distributed under the License is distributed on an\n+  ~  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~  KIND, either express or implied.  See the License for the\n+  ~  specific language governing permissions and limitations\n+  ~  under the License.\n+  -->\n+\n+<FindBugsFilter>\n+    <Match>\n+        <Package name=\"org.ballerinalang.debugger.test.utils\"/>\n+    </Match>\n+    <Match>\n+        <Bug pattern=\"DM_DEFAULT_ENCODING\" />\n+    </Match>\n+    <Match>\n+        <Bug pattern=\"DLS_DEAD_LOCAL_STORE\" />\n+    </Match>\n+    <Match>\n+        <Bug pattern=\"OS_OPEN_STREAM\" />\n+    </Match>\n+</FindBugsFilter>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0NDYwNg=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTE1MDcxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/DebugHitListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo0NTo0OVrOH9-Rdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMjozMDozMVrOIAJpBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0NTQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DebugHitListener.connector = connector;\n          \n          \n            \n                    this.connector = connector;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r534745463", "createdAt": "2020-12-03T06:45:49Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/DebugHitListener.java", "diffHunk": "@@ -45,7 +45,7 @@\n     private boolean debugHitFound;\n \n     public DebugHitListener(TestDAPClientConnector connector) {\n-        this.connector = connector;\n+        DebugHitListener.connector = connector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg0NDEzMg==", "bodyText": "connector is a static variable. Therefore I'm accessing here with static DebugHitListener.connector via class DebugHitListener reference instead of accessing via instance reference. Even the IntelliJ IDEA suggests the same.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r535844132", "createdAt": "2020-12-04T05:22:48Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/DebugHitListener.java", "diffHunk": "@@ -45,7 +45,7 @@\n     private boolean debugHitFound;\n \n     public DebugHitListener(TestDAPClientConnector connector) {\n-        this.connector = connector;\n+        DebugHitListener.connector = connector;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0NTQ2Mw=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyODg3MQ==", "bodyText": "Changed to this.connector = connector; after restructuring the test utils.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r537028871", "createdAt": "2020-12-06T12:30:31Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/DebugHitListener.java", "diffHunk": "@@ -45,7 +45,7 @@\n     private boolean debugHitFound;\n \n     public DebugHitListener(TestDAPClientConnector connector) {\n-        this.connector = connector;\n+        DebugHitListener.connector = connector;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0NTQ2Mw=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTIwNDk2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/TestUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1Mzo1OFrOH9-3Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMjozMjo0MVrOIAJqqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1NTEzNA==", "bodyText": "With this implementation using static variables, the framework will not support parallel test execution. Better if we can refactor to have instance variables instead.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r534755134", "createdAt": "2020-12-03T06:53:58Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/TestUtils.java", "diffHunk": "@@ -0,0 +1,563 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.utils;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.utils.client.TestDAPClientConnector;\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BalServer;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.eclipse.lsp4j.debug.ConfigurationDoneArguments;\n+import org.eclipse.lsp4j.debug.ContinueArguments;\n+import org.eclipse.lsp4j.debug.EvaluateArguments;\n+import org.eclipse.lsp4j.debug.EvaluateResponse;\n+import org.eclipse.lsp4j.debug.NextArguments;\n+import org.eclipse.lsp4j.debug.ScopesArguments;\n+import org.eclipse.lsp4j.debug.ScopesResponse;\n+import org.eclipse.lsp4j.debug.SetBreakpointsArguments;\n+import org.eclipse.lsp4j.debug.Source;\n+import org.eclipse.lsp4j.debug.SourceBreakpoint;\n+import org.eclipse.lsp4j.debug.StackFrame;\n+import org.eclipse.lsp4j.debug.StackTraceArguments;\n+import org.eclipse.lsp4j.debug.StackTraceResponse;\n+import org.eclipse.lsp4j.debug.StepInArguments;\n+import org.eclipse.lsp4j.debug.StepOutArguments;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.eclipse.lsp4j.debug.Variable;\n+import org.eclipse.lsp4j.debug.VariablesArguments;\n+import org.eclipse.lsp4j.debug.VariablesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+\n+/**\n+ * Test util class for all debugger integration test cases.\n+ */\n+public class TestUtils {\n+\n+    public static BalServer balServer;\n+    public static TestDAPClientConnector debugClientConnector;\n+    public static List<BallerinaTestDebugPoint> testBreakpoints = new ArrayList<>();\n+    public static boolean isConnected = false;\n+    public static int port;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TestUtils.class);\n+    protected static final int MAX_RETRY_COUNT = 3;\n+    private static BMainInstance balClient = null;\n+    private static Process debuggeeProcess;\n+\n+    public static Path testProjectBaseDir;\n+    public static Path testSingleFileBaseDir;\n+    public static String testProjectPath;\n+    public static String testEntryFilePath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg0MjY2Mg==", "bodyText": "These variables are used in static methods. Therefore cannot used as instance variables. Also all the debug tests are run in sequential, not in parallel.\nPlease refer test.xml", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r535842662", "createdAt": "2020-12-04T05:18:03Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/TestUtils.java", "diffHunk": "@@ -0,0 +1,563 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.utils;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.utils.client.TestDAPClientConnector;\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BalServer;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.eclipse.lsp4j.debug.ConfigurationDoneArguments;\n+import org.eclipse.lsp4j.debug.ContinueArguments;\n+import org.eclipse.lsp4j.debug.EvaluateArguments;\n+import org.eclipse.lsp4j.debug.EvaluateResponse;\n+import org.eclipse.lsp4j.debug.NextArguments;\n+import org.eclipse.lsp4j.debug.ScopesArguments;\n+import org.eclipse.lsp4j.debug.ScopesResponse;\n+import org.eclipse.lsp4j.debug.SetBreakpointsArguments;\n+import org.eclipse.lsp4j.debug.Source;\n+import org.eclipse.lsp4j.debug.SourceBreakpoint;\n+import org.eclipse.lsp4j.debug.StackFrame;\n+import org.eclipse.lsp4j.debug.StackTraceArguments;\n+import org.eclipse.lsp4j.debug.StackTraceResponse;\n+import org.eclipse.lsp4j.debug.StepInArguments;\n+import org.eclipse.lsp4j.debug.StepOutArguments;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.eclipse.lsp4j.debug.Variable;\n+import org.eclipse.lsp4j.debug.VariablesArguments;\n+import org.eclipse.lsp4j.debug.VariablesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+\n+/**\n+ * Test util class for all debugger integration test cases.\n+ */\n+public class TestUtils {\n+\n+    public static BalServer balServer;\n+    public static TestDAPClientConnector debugClientConnector;\n+    public static List<BallerinaTestDebugPoint> testBreakpoints = new ArrayList<>();\n+    public static boolean isConnected = false;\n+    public static int port;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TestUtils.class);\n+    protected static final int MAX_RETRY_COUNT = 3;\n+    private static BMainInstance balClient = null;\n+    private static Process debuggeeProcess;\n+\n+    public static Path testProjectBaseDir;\n+    public static Path testSingleFileBaseDir;\n+    public static String testProjectPath;\n+    public static String testEntryFilePath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1NTEzNA=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyOTI5MA==", "bodyText": "Changed most of the static variables to non-static variables after restructuring the test utils.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r537029290", "createdAt": "2020-12-06T12:32:41Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/TestUtils.java", "diffHunk": "@@ -0,0 +1,563 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.utils;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.utils.client.TestDAPClientConnector;\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BalServer;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.eclipse.lsp4j.debug.ConfigurationDoneArguments;\n+import org.eclipse.lsp4j.debug.ContinueArguments;\n+import org.eclipse.lsp4j.debug.EvaluateArguments;\n+import org.eclipse.lsp4j.debug.EvaluateResponse;\n+import org.eclipse.lsp4j.debug.NextArguments;\n+import org.eclipse.lsp4j.debug.ScopesArguments;\n+import org.eclipse.lsp4j.debug.ScopesResponse;\n+import org.eclipse.lsp4j.debug.SetBreakpointsArguments;\n+import org.eclipse.lsp4j.debug.Source;\n+import org.eclipse.lsp4j.debug.SourceBreakpoint;\n+import org.eclipse.lsp4j.debug.StackFrame;\n+import org.eclipse.lsp4j.debug.StackTraceArguments;\n+import org.eclipse.lsp4j.debug.StackTraceResponse;\n+import org.eclipse.lsp4j.debug.StepInArguments;\n+import org.eclipse.lsp4j.debug.StepOutArguments;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.eclipse.lsp4j.debug.Variable;\n+import org.eclipse.lsp4j.debug.VariablesArguments;\n+import org.eclipse.lsp4j.debug.VariablesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+\n+/**\n+ * Test util class for all debugger integration test cases.\n+ */\n+public class TestUtils {\n+\n+    public static BalServer balServer;\n+    public static TestDAPClientConnector debugClientConnector;\n+    public static List<BallerinaTestDebugPoint> testBreakpoints = new ArrayList<>();\n+    public static boolean isConnected = false;\n+    public static int port;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TestUtils.class);\n+    protected static final int MAX_RETRY_COUNT = 3;\n+    private static BMainInstance balClient = null;\n+    private static Process debuggeeProcess;\n+\n+    public static Path testProjectBaseDir;\n+    public static Path testSingleFileBaseDir;\n+    public static String testProjectPath;\n+    public static String testEntryFilePath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1NTEzNA=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTIyNDU4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/TestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1NjoxOFrOH9_Emw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNToxMzo0MVrOH_BJwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1ODU1NQ==", "bodyText": "Shall we consider renaming this class as DebugTestRunner or DebugTestFramework? WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r534758555", "createdAt": "2020-12-03T06:56:18Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/TestUtils.java", "diffHunk": "@@ -0,0 +1,563 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.utils;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.utils.client.TestDAPClientConnector;\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BalServer;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.eclipse.lsp4j.debug.ConfigurationDoneArguments;\n+import org.eclipse.lsp4j.debug.ContinueArguments;\n+import org.eclipse.lsp4j.debug.EvaluateArguments;\n+import org.eclipse.lsp4j.debug.EvaluateResponse;\n+import org.eclipse.lsp4j.debug.NextArguments;\n+import org.eclipse.lsp4j.debug.ScopesArguments;\n+import org.eclipse.lsp4j.debug.ScopesResponse;\n+import org.eclipse.lsp4j.debug.SetBreakpointsArguments;\n+import org.eclipse.lsp4j.debug.Source;\n+import org.eclipse.lsp4j.debug.SourceBreakpoint;\n+import org.eclipse.lsp4j.debug.StackFrame;\n+import org.eclipse.lsp4j.debug.StackTraceArguments;\n+import org.eclipse.lsp4j.debug.StackTraceResponse;\n+import org.eclipse.lsp4j.debug.StepInArguments;\n+import org.eclipse.lsp4j.debug.StepOutArguments;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.eclipse.lsp4j.debug.Variable;\n+import org.eclipse.lsp4j.debug.VariablesArguments;\n+import org.eclipse.lsp4j.debug.VariablesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+\n+/**\n+ * Test util class for all debugger integration test cases.\n+ */\n+public class TestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg0MTIxNw==", "bodyText": "+1 for DebugTestRunner", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r535841217", "createdAt": "2020-12-04T05:13:41Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/TestUtils.java", "diffHunk": "@@ -0,0 +1,563 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.utils;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.utils.client.TestDAPClientConnector;\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BalServer;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.eclipse.lsp4j.debug.ConfigurationDoneArguments;\n+import org.eclipse.lsp4j.debug.ContinueArguments;\n+import org.eclipse.lsp4j.debug.EvaluateArguments;\n+import org.eclipse.lsp4j.debug.EvaluateResponse;\n+import org.eclipse.lsp4j.debug.NextArguments;\n+import org.eclipse.lsp4j.debug.ScopesArguments;\n+import org.eclipse.lsp4j.debug.ScopesResponse;\n+import org.eclipse.lsp4j.debug.SetBreakpointsArguments;\n+import org.eclipse.lsp4j.debug.Source;\n+import org.eclipse.lsp4j.debug.SourceBreakpoint;\n+import org.eclipse.lsp4j.debug.StackFrame;\n+import org.eclipse.lsp4j.debug.StackTraceArguments;\n+import org.eclipse.lsp4j.debug.StackTraceResponse;\n+import org.eclipse.lsp4j.debug.StepInArguments;\n+import org.eclipse.lsp4j.debug.StepOutArguments;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.eclipse.lsp4j.debug.Variable;\n+import org.eclipse.lsp4j.debug.VariablesArguments;\n+import org.eclipse.lsp4j.debug.VariablesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+\n+/**\n+ * Test util class for all debugger integration test cases.\n+ */\n+public class TestUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1ODU1NQ=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI1ODY1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/client/connection/TestSocketStreamConnectionProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMDoxM1rOH9_ckA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMjozMzowN1rOIAJq7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NDY4OA==", "bodyText": "Shall we check equality of address and port as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r534764688", "createdAt": "2020-12-03T07:00:13Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/client/connection/TestSocketStreamConnectionProvider.java", "diffHunk": "@@ -128,6 +128,11 @@ public void stop() {\n         }\n     }\n \n+    @Override\n+    public boolean equals(Object obj) {\n+        return super.equals(obj);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyOTM1Ng==", "bodyText": "This is done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r537029356", "createdAt": "2020-12-06T12:33:07Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/main/java/org/ballerinalang/debugger/test/utils/client/connection/TestSocketStreamConnectionProvider.java", "diffHunk": "@@ -128,6 +128,11 @@ public void stop() {\n         }\n     }\n \n+    @Override\n+    public boolean equals(Object obj) {\n+        return super.equals(obj);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NDY4OA=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI3MTEzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/CallStackDebugTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMTo0MlrOH9_lhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODozMDoxM1rOIAbK0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2Njk4MA==", "bodyText": "Shall we import the static method instead of using qualified method calls everywhere? Check other places as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r534766980", "createdAt": "2020-12-03T07:01:42Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/CallStackDebugTest.java", "diffHunk": "@@ -32,59 +33,63 @@\n import java.io.File;\n import java.nio.file.Paths;\n \n+import static org.ballerinalang.debugger.test.utils.TestUtils.DebugResumeKind;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testEntryFilePath;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectBaseDir;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectPath;\n+\n /**\n  * Test class for debug hit call stack representation.\n  */\n public class CallStackDebugTest extends DebugAdapterBaseTestCase {\n \n     @BeforeClass\n     public void setup() throws BallerinaTestException {\n-        testProjectName = \"callstack-tests\";\n-        testModuleFileName = \"main.bal\";\n+        String testProjectName = \"callstack-tests\";\n+        String testModuleFileName = \"main.bal\";\n         testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;\n         testEntryFilePath = Paths.get(testProjectPath, testModuleFileName).toString();\n \n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 35));\n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 44));\n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 40));\n-        initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 35));\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 44));\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 40));\n+        TestUtils.initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg0MTA4MQ==", "bodyText": "+1 for importing as static methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r535841081", "createdAt": "2020-12-04T05:13:09Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/CallStackDebugTest.java", "diffHunk": "@@ -32,59 +33,63 @@\n import java.io.File;\n import java.nio.file.Paths;\n \n+import static org.ballerinalang.debugger.test.utils.TestUtils.DebugResumeKind;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testEntryFilePath;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectBaseDir;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectPath;\n+\n /**\n  * Test class for debug hit call stack representation.\n  */\n public class CallStackDebugTest extends DebugAdapterBaseTestCase {\n \n     @BeforeClass\n     public void setup() throws BallerinaTestException {\n-        testProjectName = \"callstack-tests\";\n-        testModuleFileName = \"main.bal\";\n+        String testProjectName = \"callstack-tests\";\n+        String testModuleFileName = \"main.bal\";\n         testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;\n         testEntryFilePath = Paths.get(testProjectPath, testModuleFileName).toString();\n \n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 35));\n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 44));\n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 40));\n-        initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 35));\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 44));\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 40));\n+        TestUtils.initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2Njk4MA=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAzMDA1MA==", "bodyText": "I'm referring debug test utilities(DebugTestRunner) with reference variable. Therefore using debugTestRunner variable now to call the debug test utility methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r537030050", "createdAt": "2020-12-06T12:37:15Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/CallStackDebugTest.java", "diffHunk": "@@ -32,59 +33,63 @@\n import java.io.File;\n import java.nio.file.Paths;\n \n+import static org.ballerinalang.debugger.test.utils.TestUtils.DebugResumeKind;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testEntryFilePath;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectBaseDir;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectPath;\n+\n /**\n  * Test class for debug hit call stack representation.\n  */\n public class CallStackDebugTest extends DebugAdapterBaseTestCase {\n \n     @BeforeClass\n     public void setup() throws BallerinaTestException {\n-        testProjectName = \"callstack-tests\";\n-        testModuleFileName = \"main.bal\";\n+        String testProjectName = \"callstack-tests\";\n+        String testModuleFileName = \"main.bal\";\n         testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;\n         testEntryFilePath = Paths.get(testProjectPath, testModuleFileName).toString();\n \n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 35));\n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 44));\n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 40));\n-        initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 35));\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 44));\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 40));\n+        TestUtils.initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2Njk4MA=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNjA0OA==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r537316048", "createdAt": "2020-12-07T08:30:13Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/CallStackDebugTest.java", "diffHunk": "@@ -32,59 +33,63 @@\n import java.io.File;\n import java.nio.file.Paths;\n \n+import static org.ballerinalang.debugger.test.utils.TestUtils.DebugResumeKind;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testEntryFilePath;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectBaseDir;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectPath;\n+\n /**\n  * Test class for debug hit call stack representation.\n  */\n public class CallStackDebugTest extends DebugAdapterBaseTestCase {\n \n     @BeforeClass\n     public void setup() throws BallerinaTestException {\n-        testProjectName = \"callstack-tests\";\n-        testModuleFileName = \"main.bal\";\n+        String testProjectName = \"callstack-tests\";\n+        String testModuleFileName = \"main.bal\";\n         testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;\n         testEntryFilePath = Paths.get(testProjectPath, testModuleFileName).toString();\n \n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 35));\n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 44));\n-        addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 40));\n-        initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 35));\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 44));\n+        TestUtils.addBreakPoint(new BallerinaTestDebugPoint(testEntryFilePath, 40));\n+        TestUtils.initDebugSession(DebugUtils.DebuggeeExecutionKind.RUN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2Njk4MA=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTM3OTU5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/remote/BallerinaTestRemoteDebugTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzoxNTo0OVrOH-AwPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMjozNzo0MVrOIAJuHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc4NjExMA==", "bodyText": "Why have we extended remote debugging tests from DebuggerAdapterBaseTestCase? remote debugging tests are not using the debug adapter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r534786110", "createdAt": "2020-12-03T07:15:49Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/remote/BallerinaTestRemoteDebugTest.java", "diffHunk": "@@ -27,19 +27,21 @@\n import java.io.File;\n \n import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.balServer;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectBaseDir;\n \n /**\n  * Test class to test positive scenarios of remote debugging ballerina test command.\n  */\n-public class BallerinaTestRemoteDebugTest extends BaseTestCase {\n+public class BallerinaTestRemoteDebugTest extends DebugAdapterBaseTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg0MDkxNg==", "bodyText": "We have moved all the BaseTestCase methods to DebugAdapterBaseTestCase and completely removed BaseTestCase class. Therefore earlier whatever classes extended with BaseTestCase are now extended with DebugAdapterBaseTestCase", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r535840916", "createdAt": "2020-12-04T05:12:32Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/remote/BallerinaTestRemoteDebugTest.java", "diffHunk": "@@ -27,19 +27,21 @@\n import java.io.File;\n \n import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.balServer;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectBaseDir;\n \n /**\n  * Test class to test positive scenarios of remote debugging ballerina test command.\n  */\n-public class BallerinaTestRemoteDebugTest extends BaseTestCase {\n+public class BallerinaTestRemoteDebugTest extends DebugAdapterBaseTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc4NjExMA=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg0NTAyMg==", "bodyText": "Then we need to rename the base class name, as like I mentioned, remote debugging tests are NOT based on debugger adapter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r535845022", "createdAt": "2020-12-04T05:25:44Z", "author": {"login": "NipunaRanasinghe"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/remote/BallerinaTestRemoteDebugTest.java", "diffHunk": "@@ -27,19 +27,21 @@\n import java.io.File;\n \n import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.balServer;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectBaseDir;\n \n /**\n  * Test class to test positive scenarios of remote debugging ballerina test command.\n  */\n-public class BallerinaTestRemoteDebugTest extends BaseTestCase {\n+public class BallerinaTestRemoteDebugTest extends DebugAdapterBaseTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc4NjExMA=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAzMDE3Mw==", "bodyText": "Changed the name back to BaseTestCase", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27265#discussion_r537030173", "createdAt": "2020-12-06T12:37:41Z", "author": {"login": "praveennadarajah"}, "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/remote/BallerinaTestRemoteDebugTest.java", "diffHunk": "@@ -27,19 +27,21 @@\n import java.io.File;\n \n import static org.ballerinalang.debugger.test.utils.DebugUtils.findFreePort;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.balServer;\n+import static org.ballerinalang.debugger.test.utils.TestUtils.testProjectBaseDir;\n \n /**\n  * Test class to test positive scenarios of remote debugging ballerina test command.\n  */\n-public class BallerinaTestRemoteDebugTest extends BaseTestCase {\n+public class BallerinaTestRemoteDebugTest extends DebugAdapterBaseTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc4NjExMA=="}, "originalCommit": {"oid": "b62d96add7a5985bb9f5a30b161926867e897a04"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2814, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}