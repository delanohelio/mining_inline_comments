{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyOTc4MTYw", "number": 26101, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNTozODoxM1rOEo4D_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDozMzo0OFrOEvmCmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjk3MDIzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNTozODoxM1rOHaN87Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNTowMDoyMFrOHeOBgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1MzYxMw==", "bodyText": "Can we check if the node kind of env.node is NodeKind.PACKAGE and then check\n((BLangPackage) node).flagSet.contains(Flag.TESTABLE) instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r497253613", "createdAt": "2020-09-30T05:38:13Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -415,7 +416,7 @@ public BSymbol resolvePrefixSymbol(SymbolEnv env, Name pkgAlias, Name compUnit)\n             entry = entry.next;\n         }\n \n-        if (env.enclEnv != null) {\n+        if (env.enclEnv != null && !(env.node instanceof BLangTestablePackage)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f116f296c640ba36b7af9e7281cae544d65402a1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ0OTA4OQ==", "bodyText": "Removed this check with new logic.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r501449089", "createdAt": "2020-10-08T05:00:20Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -415,7 +416,7 @@ public BSymbol resolvePrefixSymbol(SymbolEnv env, Name pkgAlias, Name compUnit)\n             entry = entry.next;\n         }\n \n-        if (env.enclEnv != null) {\n+        if (env.enclEnv != null && !(env.node instanceof BLangTestablePackage)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1MzYxMw=="}, "originalCommit": {"oid": "f116f296c640ba36b7af9e7281cae544d65402a1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzMxODk4OnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/resources/project-based-tests/predeclared-import-tests/src/importTests/tests/imports-tests.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzo0Njo0MFrOHaRP4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNTowMDo0NFrOHeOB5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNzYxNg==", "bodyText": "Shall we also add a negative test for duplicate imports of langlib modules that have been predeclared?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r497307616", "createdAt": "2020-09-30T07:46:40Z", "author": {"login": "MaryamZi"}, "path": "tests/testerina-integration-test/src/test/resources/project-based-tests/predeclared-import-tests/src/importTests/tests/imports-tests.bal", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/test;\n+import ballerina/lang.'float;\n+import ballerina/lang.'int;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f116f296c640ba36b7af9e7281cae544d65402a1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ0OTE5MA==", "bodyText": "Done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r501449190", "createdAt": "2020-10-08T05:00:44Z", "author": {"login": "chiranSachintha"}, "path": "tests/testerina-integration-test/src/test/resources/project-based-tests/predeclared-import-tests/src/importTests/tests/imports-tests.bal", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/test;\n+import ballerina/lang.'float;\n+import ballerina/lang.'int;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNzYxNg=="}, "originalCommit": {"oid": "f116f296c640ba36b7af9e7281cae544d65402a1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTg2MjU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDowNjo0MFrOHegV9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo0OTo0OVrOHhxsXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0OTIzNg==", "bodyText": "We don't have to do this if the user has an import with this alias, right? Shall we move these two lines to L820?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r501749236", "createdAt": "2020-10-08T14:06:40Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,23 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {\n+                BPackageSymbol symbol = duplicatePackagSymbol(predeclaredModules.get(alias));\n+                symbol.compUnit = new Name(compUnit.name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7c2340c7c11ecf9d38fc63a380217121886d53"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODYxOQ==", "bodyText": "Let's try moving this out to a method and calling it only where necessary.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r503678619", "createdAt": "2020-10-13T05:39:30Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,23 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {\n+                BPackageSymbol symbol = duplicatePackagSymbol(predeclaredModules.get(alias));\n+                symbol.compUnit = new Name(compUnit.name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0OTIzNg=="}, "originalCommit": {"oid": "1b7c2340c7c11ecf9d38fc63a380217121886d53"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3OTIzMQ==", "bodyText": "Done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505179231", "createdAt": "2020-10-15T05:49:49Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,23 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {\n+                BPackageSymbol symbol = duplicatePackagSymbol(predeclaredModules.get(alias));\n+                symbol.compUnit = new Name(compUnit.name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0OTIzNg=="}, "originalCommit": {"oid": "1b7c2340c7c11ecf9d38fc63a380217121886d53"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTg3MzM5OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDowODo0N1rOHegcbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowMzozOFrOHh1Lsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDg5NQ==", "bodyText": "How about changing this to something like\n                if (entry == NOT_FOUND_ENTRY) {\n                    this.env.scope.define(alias, symbol);\n                    continue;\n                }\n\n                while (entry.next != NOT_FOUND_ENTRY) {\n                    entry = entry.next;\n                }\n                entry.next = new ScopeEntry(symbol, NOT_FOUND_ENTRY);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r501750895", "createdAt": "2020-10-08T14:08:47Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,23 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {\n+                BPackageSymbol symbol = duplicatePackagSymbol(predeclaredModules.get(alias));\n+                symbol.compUnit = new Name(compUnit.name);\n+                ScopeEntry entry = this.env.scope.lookup(alias);\n+                if (entry == NOT_FOUND_ENTRY) {\n+                    this.env.scope.define(alias, symbol);\n+                } else {\n+                    while (entry.next != NOT_FOUND_ENTRY) {\n+                        entry = entry.next;\n+                    }\n+                    entry.next = new ScopeEntry(symbol, NOT_FOUND_ENTRY);\n                 }\n-                entry.next = new ScopeEntry(predeclaredModules.get(alias), NOT_FOUND_ENTRY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7c2340c7c11ecf9d38fc63a380217121886d53"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNjQwMg==", "bodyText": "Refactor initPredeclaredModules function as mentioned in #26101 (comment)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505236402", "createdAt": "2020-10-15T07:03:38Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,23 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {\n+                BPackageSymbol symbol = duplicatePackagSymbol(predeclaredModules.get(alias));\n+                symbol.compUnit = new Name(compUnit.name);\n+                ScopeEntry entry = this.env.scope.lookup(alias);\n+                if (entry == NOT_FOUND_ENTRY) {\n+                    this.env.scope.define(alias, symbol);\n+                } else {\n+                    while (entry.next != NOT_FOUND_ENTRY) {\n+                        entry = entry.next;\n+                    }\n+                    entry.next = new ScopeEntry(symbol, NOT_FOUND_ENTRY);\n                 }\n-                entry.next = new ScopeEntry(predeclaredModules.get(alias), NOT_FOUND_ENTRY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDg5NQ=="}, "originalCommit": {"oid": "1b7c2340c7c11ecf9d38fc63a380217121886d53"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDg3Njk2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTozOTowNFrOHgWGCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowMDo0MlrOHh0-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODQ3Mg==", "bodyText": "@chiranSachintha, shall we check if we can switch the loops as discussed during the call?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r503678472", "createdAt": "2020-10-13T05:39:04Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,33 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada5f3692609067e3003518212949c2e891ae313"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MzgzMQ==", "bodyText": "We can switch two loops but still, we need to check whether alias is defined or not after the first iteration. So do we need to switch these two loops?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505183831", "createdAt": "2020-10-15T06:03:18Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,33 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODQ3Mg=="}, "originalCommit": {"oid": "ada5f3692609067e3003518212949c2e891ae313"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4ODQ2Nw==", "bodyText": "What about doing something like\n        for (Name alias : predeclaredModules.keySet()) {\n            int index = 0;\n            ScopeEntry entry = this.env.scope.lookup(alias);\n            if (entry == NOT_FOUND_ENTRY) {\n                this.env.scope.define(alias, dupPackageSymbolAndSetCompUnit(predeclaredModules.get(alias),\n                            new Name(compUnits.get(index++).name)));\n            }\n            for (int i = index; i < compUnits.size(); i++) {\n                boolean isUndefinedModule = true;\n                ...... \n            } \n        }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505188467", "createdAt": "2020-10-15T06:13:45Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,33 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODQ3Mg=="}, "originalCommit": {"oid": "ada5f3692609067e3003518212949c2e891ae313"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzMzEzNQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505233135", "createdAt": "2020-10-15T07:00:42Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,33 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODQ3Mg=="}, "originalCommit": {"oid": "ada5f3692609067e3003518212949c2e891ae313"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDg4MjE0OnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/ImportTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTo0MTozMVrOHgWJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo0ODozOVrOHhxrAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3OTIzMg==", "bodyText": "Missing the @since annotation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r503679232", "createdAt": "2020-10-13T05:41:31Z", "author": {"login": "MaryamZi"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/ImportTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class to test predeclared langlibs using a ballerina project.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada5f3692609067e3003518212949c2e891ae313"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3ODg4Mg==", "bodyText": "Done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505178882", "createdAt": "2020-10-15T05:48:39Z", "author": {"login": "chiranSachintha"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/ImportTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class to test predeclared langlibs using a ballerina project.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3OTIzMg=="}, "originalCommit": {"oid": "ada5f3692609067e3003518212949c2e891ae313"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTU5MTMzOnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/ImportTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTowMjowMFrOHh9org==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1ODoyOVrOHkfb7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3NDg5NA==", "bodyText": "Needs to come after the description.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505374894", "createdAt": "2020-10-15T09:02:00Z", "author": {"login": "MaryamZi"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/ImportTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b7b191a699b6b4b93e612dac1c889388ba8ca"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNTgzOA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r508025838", "createdAt": "2020-10-19T19:58:29Z", "author": {"login": "chiranSachintha"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/ImportTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3NDg5NA=="}, "originalCommit": {"oid": "c96b7b191a699b6b4b93e612dac1c889388ba8ca"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzQxNzg1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDozMzo0OFrOHkqRCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDo1MTo1OVrOHkqi9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwMzI3Mg==", "bodyText": "Shall we extract compUnits.get(i).name out to a variable?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r508203272", "createdAt": "2020-10-20T04:33:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -802,25 +800,40 @@ public void visit(BLangImportPackage importPkgNode) {\n \n         // get a copy of the package symbol, add compilation unit info to it,\n         // and define it in the current package scope\n-        BPackageSymbol symbol = duplicatePackagSymbol(pkgSymbol);\n-        symbol.compUnit = names.fromIdNode(importPkgNode.compUnit);\n+        BPackageSymbol symbol = dupPackageSymbolAndSetCompUnit(pkgSymbol, names.fromIdNode(importPkgNode.compUnit));\n         symbol.scope = pkgSymbol.scope;\n         importPkgNode.symbol = symbol;\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n         for (Name alias : predeclaredModules.keySet()) {\n+            int index = 0;\n             ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n+            if (entry == NOT_FOUND_ENTRY && !compUnits.isEmpty()) {\n+                this.env.scope.define(alias, dupPackageSymbolAndSetCompUnit(predeclaredModules.get(alias),\n+                        new Name(compUnits.get(index++).name)));\n+                entry = this.env.scope.lookup(alias);\n+            }\n+            for (int i = index; i < compUnits.size(); i++) {\n+                boolean isUndefinedModule = true;\n+                if (((BPackageSymbol) entry.symbol).compUnit.value.equals(compUnits.get(i).name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21742dace76a0a19c596f5fd2ac8805e1d835130"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwNzg2Mg==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r508207862", "createdAt": "2020-10-20T04:51:59Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -802,25 +800,40 @@ public void visit(BLangImportPackage importPkgNode) {\n \n         // get a copy of the package symbol, add compilation unit info to it,\n         // and define it in the current package scope\n-        BPackageSymbol symbol = duplicatePackagSymbol(pkgSymbol);\n-        symbol.compUnit = names.fromIdNode(importPkgNode.compUnit);\n+        BPackageSymbol symbol = dupPackageSymbolAndSetCompUnit(pkgSymbol, names.fromIdNode(importPkgNode.compUnit));\n         symbol.scope = pkgSymbol.scope;\n         importPkgNode.symbol = symbol;\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n         for (Name alias : predeclaredModules.keySet()) {\n+            int index = 0;\n             ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n+            if (entry == NOT_FOUND_ENTRY && !compUnits.isEmpty()) {\n+                this.env.scope.define(alias, dupPackageSymbolAndSetCompUnit(predeclaredModules.get(alias),\n+                        new Name(compUnits.get(index++).name)));\n+                entry = this.env.scope.lookup(alias);\n+            }\n+            for (int i = index; i < compUnits.size(); i++) {\n+                boolean isUndefinedModule = true;\n+                if (((BPackageSymbol) entry.symbol).compUnit.value.equals(compUnits.get(i).name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwMzI3Mg=="}, "originalCommit": {"oid": "21742dace76a0a19c596f5fd2ac8805e1d835130"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 45, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}