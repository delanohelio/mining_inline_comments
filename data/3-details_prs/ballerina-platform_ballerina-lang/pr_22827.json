{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDc0MzAx", "number": 22827, "title": "Add floating point literal support", "bodyText": "Purpose\n\nAdd floating point literal support\n\nFixes #22358\nApproach\n\nN/A\n\nSamples\n\nN/A\n\nRemarks\n\nN/A\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-22T06:25:10Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827", "merged": true, "mergeCommit": {"oid": "34452a12f950112629791110bebb3ff4ae2eac20"}, "closed": true, "closedAt": "2020-04-27T15:29:09Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ0SBMAH2gAyNDA3MDc0MzAxOjk3MGI3NjRlNGNkZDNlMjI2YWU1ZWRkNTA0ZWY5MWY4MGRjZGNjNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbuQgbABqjMyNzU0NzM0NzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "970b764e4cdd3e226ae5edd504ef91f80dcdcc50", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/970b764e4cdd3e226ae5edd504ef91f80dcdcc50", "committedDate": "2020-04-21T14:08:56Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "668da066b8448b0fa418708c67c75d7c036aa691", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/668da066b8448b0fa418708c67c75d7c036aa691", "committedDate": "2020-04-21T14:10:34Z", "message": "Add floating point literal support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b9992670c0a0625df47fc027dbf87b1aad3a9c4", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b9992670c0a0625df47fc027dbf87b1aad3a9c4", "committedDate": "2020-04-21T19:26:50Z", "message": "Add float literal starting with dot support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ea87e63a8b5666f68220bc5756d0c60ff87551", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c3ea87e63a8b5666f68220bc5756d0c60ff87551", "committedDate": "2020-04-21T19:28:54Z", "message": "Add more test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ae5a969ba63d7d3eb05dbd834d61e30ddbf9b81", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ae5a969ba63d7d3eb05dbd834d61e30ddbf9b81", "committedDate": "2020-04-21T19:45:55Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c0d56c2935ceb036f83d9e47add0e1b90921cc8", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c0d56c2935ceb036f83d9e47add0e1b90921cc8", "committedDate": "2020-04-22T05:41:38Z", "message": "Fix parserMode for floats starting from dot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ba69fda0b2b2dc1cf63f1225dc053ed993273f", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76ba69fda0b2b2dc1cf63f1225dc053ed993273f", "committedDate": "2020-04-22T05:44:55Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into float-literal-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "464c32fb4574b8c7f8d66af2e47fdb31a1adc501", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/464c32fb4574b8c7f8d66af2e47fdb31a1adc501", "committedDate": "2020-04-22T06:07:13Z", "message": "Add error recovery support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5fa0281c557d76d04d6a32063c64b2f8ee109ae", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5fa0281c557d76d04d6a32063c64b2f8ee109ae", "committedDate": "2020-04-22T06:20:03Z", "message": "Change BLOCK_STATEMENT to FUNCTION_BODY_BLOCK in added test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODgxMjU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#pullrequestreview-397881254", "createdAt": "2020-04-22T06:35:03Z", "commit": {"oid": "f5fa0281c557d76d04d6a32063c64b2f8ee109ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjozNTowM1rOGJlrHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjozNTowM1rOGJlrHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwNzYxNQ==", "bodyText": "I added retreat() method to the charReader.java which does exactly the opposite of advance() method. If it is not acceptable I can mange to do above without calling reader.retreat();. But that will add few more lines, if blocks and a new variables to the processNumericLiteral() and processDecimalFloatLiteral(); methods", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r412707615", "createdAt": "2020-04-22T06:35:03Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -414,15 +414,19 @@ private STNode processEndOfLine() {\n     }\n \n     /**\n-     * Process dot or ellipsis token.\n+     * Process dot, ellipsis or decimal floating point token.\n      * \n-     * @return Dot or ellipsis token\n+     * @return Dot, ellipsis or decimal floating point token\n      */\n-    private STToken parseDotOrEllipsis() {\n+    private STToken processDot() {\n         if (reader.peek() == LexerTerminals.DOT && reader.peek(1) == LexerTerminals.DOT) {\n             reader.advance(2);\n             return getSyntaxToken(SyntaxKind.ELLIPSIS_TOKEN);\n         }\n+        if (this.mode != ParserMode.IMPORT && isDigit(reader.peek())) {\n+            reader.retreat();\n+            return processDecimalFloatLiteral();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fa0281c557d76d04d6a32063c64b2f8ee109ae"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDEyMTI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#pullrequestreview-398012127", "createdAt": "2020-04-22T09:32:26Z", "commit": {"oid": "f5fa0281c557d76d04d6a32063c64b2f8ee109ae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTozMjoyNlrOGJs4tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTo1Nzo0M1rOGJt9YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyNTc4Mw==", "bodyText": "lets use LexerTerminals.DOT everywhere posible", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r412825783", "createdAt": "2020-04-22T09:32:26Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -543,9 +555,133 @@ private STToken processNumericLiteral(int startChar) {\n \n     /**\n      * <p>\n-     * Process and returns a hex integer literal.\n+     * Process and returns a decimal floating point literal.\n      * </p>\n      * <code>\n+     * DecimalFloatingPointNumber :=\n+     *    DecimalNumber Exponent [FloatingPointTypeSuffix]\n+     *    | DottedDecimalNumber [Exponent] [FloatingPointTypeSuffix]\n+     *    | DecimalNumber FloatingPointTypeSuffix\n+     * <br/>\n+     * DottedDecimalNumber := DecimalNumber . Digit* | . Digit+\n+     * <br/>\n+     * FloatingPointTypeSuffix := DecimalTypeSuffix | FloatTypeSuffix\n+     * <br/>\n+     * DecimalTypeSuffix := d | D\n+     * <br/>\n+     * FloatTypeSuffix :=  f | F\n+     * </code>\n+     *\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processDecimalFloatLiteral() {\n+        boolean exponent = false;\n+        boolean dot = false;\n+        int nextChar;\n+        while (true) {\n+            nextChar = peek();\n+            switch (nextChar) {\n+                case 'f':\n+                case 'F':\n+                case 'd':\n+                case 'D':\n+                    reader.advance();\n+                    break;\n+                case 'e':\n+                case 'E':\n+                    if (!exponent) { // Check whether an exponent has been passed previously\n+                        if (processExponent()) {\n+                            exponent = true;\n+                            continue;\n+                        }\n+                    }\n+\n+                    processInvalidToken();\n+                    return readToken();\n+                case '.':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fa0281c557d76d04d6a32063c64b2f8ee109ae"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyNzE1NQ==", "bodyText": "I feel the lexer shouldn't reach here for floating-points.\nHere we start parsing a token from a dot. But a floating-point numeric can never start from a dot right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r412827155", "createdAt": "2020-04-22T09:34:29Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -414,15 +414,19 @@ private STNode processEndOfLine() {\n     }\n \n     /**\n-     * Process dot or ellipsis token.\n+     * Process dot, ellipsis or decimal floating point token.\n      * \n-     * @return Dot or ellipsis token\n+     * @return Dot, ellipsis or decimal floating point token\n      */\n-    private STToken parseDotOrEllipsis() {\n+    private STToken processDot() {\n         if (reader.peek() == LexerTerminals.DOT && reader.peek(1) == LexerTerminals.DOT) {\n             reader.advance(2);\n             return getSyntaxToken(SyntaxKind.ELLIPSIS_TOKEN);\n         }\n+        if (this.mode != ParserMode.IMPORT && isDigit(reader.peek())) {\n+            reader.retreat();\n+            return processDecimalFloatLiteral();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwNzYxNQ=="}, "originalCommit": {"oid": "f5fa0281c557d76d04d6a32063c64b2f8ee109ae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgzMjU2Mw==", "bodyText": "Lets rename:\nexponent -> hasExponent\ndot -> hasDot", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r412832563", "createdAt": "2020-04-22T09:42:16Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -543,9 +555,133 @@ private STToken processNumericLiteral(int startChar) {\n \n     /**\n      * <p>\n-     * Process and returns a hex integer literal.\n+     * Process and returns a decimal floating point literal.\n      * </p>\n      * <code>\n+     * DecimalFloatingPointNumber :=\n+     *    DecimalNumber Exponent [FloatingPointTypeSuffix]\n+     *    | DottedDecimalNumber [Exponent] [FloatingPointTypeSuffix]\n+     *    | DecimalNumber FloatingPointTypeSuffix\n+     * <br/>\n+     * DottedDecimalNumber := DecimalNumber . Digit* | . Digit+\n+     * <br/>\n+     * FloatingPointTypeSuffix := DecimalTypeSuffix | FloatTypeSuffix\n+     * <br/>\n+     * DecimalTypeSuffix := d | D\n+     * <br/>\n+     * FloatTypeSuffix :=  f | F\n+     * </code>\n+     *\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processDecimalFloatLiteral() {\n+        boolean exponent = false;\n+        boolean dot = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fa0281c557d76d04d6a32063c64b2f8ee109ae"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0MzM2MQ==", "bodyText": "Can we avoid these if-conditions, and the flags?\nLooking at the grammar, there are three main components the decimalNumber,  the exponent, and the suffix. These always exists in order. For example: decimalNumber component always the first component. suffix always comes after the decimalNumber, and always before the suffix.\nSo, what I feel is, suppose we have three separate functions to process these three separate components, (say a(), b() and c() ) if we chain these three, then the complexity would be reduced.\nfor e.g: we start from a() and continue till we reach the exponent, and once we reach the exponent, call b(). But never return to a() and process again. Simply finish the processing and exit from b(). So a() never have to worry whether b() was successfully completed or not..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r412843361", "createdAt": "2020-04-22T09:57:43Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -543,9 +555,133 @@ private STToken processNumericLiteral(int startChar) {\n \n     /**\n      * <p>\n-     * Process and returns a hex integer literal.\n+     * Process and returns a decimal floating point literal.\n      * </p>\n      * <code>\n+     * DecimalFloatingPointNumber :=\n+     *    DecimalNumber Exponent [FloatingPointTypeSuffix]\n+     *    | DottedDecimalNumber [Exponent] [FloatingPointTypeSuffix]\n+     *    | DecimalNumber FloatingPointTypeSuffix\n+     * <br/>\n+     * DottedDecimalNumber := DecimalNumber . Digit* | . Digit+\n+     * <br/>\n+     * FloatingPointTypeSuffix := DecimalTypeSuffix | FloatTypeSuffix\n+     * <br/>\n+     * DecimalTypeSuffix := d | D\n+     * <br/>\n+     * FloatTypeSuffix :=  f | F\n+     * </code>\n+     *\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processDecimalFloatLiteral() {\n+        boolean exponent = false;\n+        boolean dot = false;\n+        int nextChar;\n+        while (true) {\n+            nextChar = peek();\n+            switch (nextChar) {\n+                case 'f':\n+                case 'F':\n+                case 'd':\n+                case 'D':\n+                    reader.advance();\n+                    break;\n+                case 'e':\n+                case 'E':\n+                    if (!exponent) { // Check whether an exponent has been passed previously\n+                        if (processExponent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fa0281c557d76d04d6a32063c64b2f8ee109ae"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8fd96261bbd2f845b48d627dc9b841bf422cf99", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8fd96261bbd2f845b48d627dc9b841bf422cf99", "committedDate": "2020-04-22T18:39:22Z", "message": "Refactor floating literal process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7124776e7ea1bce1cf4e3b355626dd3ee90bec11", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7124776e7ea1bce1cf4e3b355626dd3ee90bec11", "committedDate": "2020-04-25T06:44:27Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into float-literal-support\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDk3MDI0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#pullrequestreview-400497024", "createdAt": "2020-04-26T12:11:20Z", "commit": {"oid": "7124776e7ea1bce1cf4e3b355626dd3ee90bec11"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjoxMToyMVrOGMDodw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjozODoxMVrOGMD9nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NTYwNw==", "bodyText": "This code block looks like a duplicate of L#602-L#610. Can we use a single switch-case for both scenarios?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r415295607", "createdAt": "2020-04-26T12:11:21Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -536,9 +547,162 @@ private STToken processNumericLiteral(int startChar) {\n \n     /**\n      * <p>\n-     * Process and returns a hex integer literal.\n+     * Process and returns a decimal floating point literal.\n+     * </p>\n+     * <code>\n+     * DecimalFloatingPointNumber :=\n+     *    DecimalNumber Exponent [FloatingPointTypeSuffix]\n+     *    | DottedDecimalNumber [Exponent] [FloatingPointTypeSuffix]\n+     *    | DecimalNumber FloatingPointTypeSuffix\n+     * <br/>\n+     * DottedDecimalNumber := DecimalNumber . Digit* | . Digit+\n+     * <br/>\n+     * FloatingPointTypeSuffix := DecimalTypeSuffix | FloatTypeSuffix\n+     * <br/>\n+     * DecimalTypeSuffix := d | D\n+     * <br/>\n+     * FloatTypeSuffix :=  f | F\n+     * </code>\n+     *\n+     * @param isDotStart Whether process starts from a dot\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processDecimalFloatLiteral(boolean isDotStart) {\n+        int nextChar = peek();\n+\n+        // Direct process to the dot switch case\n+        if (isDotStart) {\n+            nextChar = LexerTerminals.DOT;\n+        }\n+\n+        switch (nextChar) {\n+            case LexerTerminals.DOT:\n+                if (!isDotStart) { // Advance only if it is not already validated\n+                    reader.advance();\n+                }\n+                nextChar = peek();\n+                while (true) {\n+                    if (isDigit(nextChar)) {\n+                        reader.advance();\n+                        nextChar = peek();\n+                        continue;\n+                    }\n+                    break;\n+                }\n+                switch (nextChar) {\n+                    case 'e':\n+                    case 'E':\n+                        return processExponent(false);\n+                    case 'f':\n+                    case 'F':\n+                    case 'd':\n+                    case 'D':\n+                        return parseFloatingPointTypeSuffix();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7124776e7ea1bce1cf4e3b355626dd3ee90bec11"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NjA3Mw==", "bodyText": "while(isDigit(nextChar))", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r415296073", "createdAt": "2020-04-26T12:13:48Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -536,9 +547,162 @@ private STToken processNumericLiteral(int startChar) {\n \n     /**\n      * <p>\n-     * Process and returns a hex integer literal.\n+     * Process and returns a decimal floating point literal.\n+     * </p>\n+     * <code>\n+     * DecimalFloatingPointNumber :=\n+     *    DecimalNumber Exponent [FloatingPointTypeSuffix]\n+     *    | DottedDecimalNumber [Exponent] [FloatingPointTypeSuffix]\n+     *    | DecimalNumber FloatingPointTypeSuffix\n+     * <br/>\n+     * DottedDecimalNumber := DecimalNumber . Digit* | . Digit+\n+     * <br/>\n+     * FloatingPointTypeSuffix := DecimalTypeSuffix | FloatTypeSuffix\n+     * <br/>\n+     * DecimalTypeSuffix := d | D\n+     * <br/>\n+     * FloatTypeSuffix :=  f | F\n+     * </code>\n+     *\n+     * @param isDotStart Whether process starts from a dot\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processDecimalFloatLiteral(boolean isDotStart) {\n+        int nextChar = peek();\n+\n+        // Direct process to the dot switch case\n+        if (isDotStart) {\n+            nextChar = LexerTerminals.DOT;\n+        }\n+\n+        switch (nextChar) {\n+            case LexerTerminals.DOT:\n+                if (!isDotStart) { // Advance only if it is not already validated\n+                    reader.advance();\n+                }\n+                nextChar = peek();\n+                while (true) {\n+                    if (isDigit(nextChar)) {\n+                        reader.advance();\n+                        nextChar = peek();\n+                        continue;\n+                    }\n+                    break;\n+                }\n+                switch (nextChar) {\n+                    case 'e':\n+                    case 'E':\n+                        return processExponent(false);\n+                    case 'f':\n+                    case 'F':\n+                    case 'd':\n+                    case 'D':\n+                        return parseFloatingPointTypeSuffix();\n+                }\n+                break;\n+            case 'e':\n+            case 'E':\n+                return processExponent(false);\n+            case 'f':\n+            case 'F':\n+            case 'd':\n+            case 'D':\n+                return parseFloatingPointTypeSuffix();\n+        }\n+\n+        return getLiteral(SyntaxKind.DECIMAL_FLOATING_POINT_LITERAL);\n+    }\n+\n+    /**\n+     * <p>\n+     * Process an exponent or hex-exponent.\n+     * </p>\n+     * <code>\n+     * exponent := Exponent | HexExponent\n+     * <br/>\n+     * Exponent := ExponentIndicator [Sign] Digit+\n+     * <br/>\n+     * HexExponent := HexExponentIndicator [Sign] Digit+\n+     * <br/>\n+     * ExponentIndicator := e | E\n+     * <br/>\n+     * HexExponentIndicator := p | P\n+     * <br/>\n+     * Sign := + | -\n+     * <br/>\n+     * Digit := 0 .. 9\n+     * </code>\n+     *\n+     * @param isHex HexExponent or not\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processExponent(boolean isHex) {\n+        // Advance reader as exponent indicator is already validated\n+        reader.advance();\n+        int nextChar = peek();\n+\n+        // Capture if there is a sign\n+        if (nextChar == LexerTerminals.PLUS || nextChar == LexerTerminals.MINUS) {\n+            reader.advance();\n+            nextChar = peek();\n+        }\n+\n+        // Make sure at least one digit is present after the indicator\n+        if (!isDigit(nextChar)) {\n+            processInvalidToken();\n+            return readToken();\n+        }\n+\n+        while (true) {\n+            if (isDigit(nextChar)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7124776e7ea1bce1cf4e3b355626dd3ee90bec11"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NjM4Mw==", "bodyText": "Should we log an error here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r415296383", "createdAt": "2020-04-26T12:15:26Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -536,9 +547,162 @@ private STToken processNumericLiteral(int startChar) {\n \n     /**\n      * <p>\n-     * Process and returns a hex integer literal.\n+     * Process and returns a decimal floating point literal.\n+     * </p>\n+     * <code>\n+     * DecimalFloatingPointNumber :=\n+     *    DecimalNumber Exponent [FloatingPointTypeSuffix]\n+     *    | DottedDecimalNumber [Exponent] [FloatingPointTypeSuffix]\n+     *    | DecimalNumber FloatingPointTypeSuffix\n+     * <br/>\n+     * DottedDecimalNumber := DecimalNumber . Digit* | . Digit+\n+     * <br/>\n+     * FloatingPointTypeSuffix := DecimalTypeSuffix | FloatTypeSuffix\n+     * <br/>\n+     * DecimalTypeSuffix := d | D\n+     * <br/>\n+     * FloatTypeSuffix :=  f | F\n+     * </code>\n+     *\n+     * @param isDotStart Whether process starts from a dot\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processDecimalFloatLiteral(boolean isDotStart) {\n+        int nextChar = peek();\n+\n+        // Direct process to the dot switch case\n+        if (isDotStart) {\n+            nextChar = LexerTerminals.DOT;\n+        }\n+\n+        switch (nextChar) {\n+            case LexerTerminals.DOT:\n+                if (!isDotStart) { // Advance only if it is not already validated\n+                    reader.advance();\n+                }\n+                nextChar = peek();\n+                while (true) {\n+                    if (isDigit(nextChar)) {\n+                        reader.advance();\n+                        nextChar = peek();\n+                        continue;\n+                    }\n+                    break;\n+                }\n+                switch (nextChar) {\n+                    case 'e':\n+                    case 'E':\n+                        return processExponent(false);\n+                    case 'f':\n+                    case 'F':\n+                    case 'd':\n+                    case 'D':\n+                        return parseFloatingPointTypeSuffix();\n+                }\n+                break;\n+            case 'e':\n+            case 'E':\n+                return processExponent(false);\n+            case 'f':\n+            case 'F':\n+            case 'd':\n+            case 'D':\n+                return parseFloatingPointTypeSuffix();\n+        }\n+\n+        return getLiteral(SyntaxKind.DECIMAL_FLOATING_POINT_LITERAL);\n+    }\n+\n+    /**\n+     * <p>\n+     * Process an exponent or hex-exponent.\n+     * </p>\n+     * <code>\n+     * exponent := Exponent | HexExponent\n+     * <br/>\n+     * Exponent := ExponentIndicator [Sign] Digit+\n+     * <br/>\n+     * HexExponent := HexExponentIndicator [Sign] Digit+\n+     * <br/>\n+     * ExponentIndicator := e | E\n+     * <br/>\n+     * HexExponentIndicator := p | P\n+     * <br/>\n+     * Sign := + | -\n+     * <br/>\n+     * Digit := 0 .. 9\n+     * </code>\n+     *\n+     * @param isHex HexExponent or not\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processExponent(boolean isHex) {\n+        // Advance reader as exponent indicator is already validated\n+        reader.advance();\n+        int nextChar = peek();\n+\n+        // Capture if there is a sign\n+        if (nextChar == LexerTerminals.PLUS || nextChar == LexerTerminals.MINUS) {\n+            reader.advance();\n+            nextChar = peek();\n+        }\n+\n+        // Make sure at least one digit is present after the indicator\n+        if (!isDigit(nextChar)) {\n+            processInvalidToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7124776e7ea1bce1cf4e3b355626dd3ee90bec11"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NzU0Ng==", "bodyText": "Add a comment saying that we wouldn't be reaching here, if the floating-point starts with a dot.\nOtherwise, anyone who will check this code later, might think this was a mistake :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r415297546", "createdAt": "2020-04-26T12:21:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -494,24 +499,31 @@ private STToken processEqualOperator() {\n     private STToken processNumericLiteral(int startChar) {\n         int nextChar = peek();\n         if (isHexIndicator(startChar, nextChar)) {\n-            return processHexIntLiteral();\n+            return processHexLiteral();\n         }\n \n         int len = 1;\n         while (true) {\n             switch (nextChar) {\n-                case '.':\n+                case LexerTerminals.DOT:\n                 case 'e':\n                 case 'E':\n+                case 'f':\n+                case 'F':\n+                case 'd':\n+                case 'D':\n                     // In sem-var mode, only decimal integer literals are supported\n                     if (this.mode == ParserMode.IMPORT) {\n                         break;\n                     }\n \n-                    // TODO: handle float\n-                    reader.advance();\n-                    processInvalidToken();\n-                    return readToken();\n+                    // Integer part of the float cannot have a leading zero\n+                    if (startChar == '0' && len > 1) {\n+                        processInvalidToken();\n+                        return readToken();\n+                    }\n+\n+                    return processDecimalFloatLiteral(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7124776e7ea1bce1cf4e3b355626dd3ee90bec11"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTQwMw==", "bodyText": "can we get rid of this isDotStart flag? Why does this method needs to know whether the numeric started with a dot?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r415299403", "createdAt": "2020-04-26T12:30:33Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -536,9 +547,162 @@ private STToken processNumericLiteral(int startChar) {\n \n     /**\n      * <p>\n-     * Process and returns a hex integer literal.\n+     * Process and returns a decimal floating point literal.\n+     * </p>\n+     * <code>\n+     * DecimalFloatingPointNumber :=\n+     *    DecimalNumber Exponent [FloatingPointTypeSuffix]\n+     *    | DottedDecimalNumber [Exponent] [FloatingPointTypeSuffix]\n+     *    | DecimalNumber FloatingPointTypeSuffix\n+     * <br/>\n+     * DottedDecimalNumber := DecimalNumber . Digit* | . Digit+\n+     * <br/>\n+     * FloatingPointTypeSuffix := DecimalTypeSuffix | FloatTypeSuffix\n+     * <br/>\n+     * DecimalTypeSuffix := d | D\n+     * <br/>\n+     * FloatTypeSuffix :=  f | F\n+     * </code>\n+     *\n+     * @param isDotStart Whether process starts from a dot\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processDecimalFloatLiteral(boolean isDotStart) {\n+        int nextChar = peek();\n+\n+        // Direct process to the dot switch case\n+        if (isDotStart) {\n+            nextChar = LexerTerminals.DOT;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7124776e7ea1bce1cf4e3b355626dd3ee90bec11"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMDI2MA==", "bodyText": "What if this method always accepts the starting char as the input? Will that solve this complexity?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r415300260", "createdAt": "2020-04-26T12:34:21Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -536,9 +547,162 @@ private STToken processNumericLiteral(int startChar) {\n \n     /**\n      * <p>\n-     * Process and returns a hex integer literal.\n+     * Process and returns a decimal floating point literal.\n+     * </p>\n+     * <code>\n+     * DecimalFloatingPointNumber :=\n+     *    DecimalNumber Exponent [FloatingPointTypeSuffix]\n+     *    | DottedDecimalNumber [Exponent] [FloatingPointTypeSuffix]\n+     *    | DecimalNumber FloatingPointTypeSuffix\n+     * <br/>\n+     * DottedDecimalNumber := DecimalNumber . Digit* | . Digit+\n+     * <br/>\n+     * FloatingPointTypeSuffix := DecimalTypeSuffix | FloatTypeSuffix\n+     * <br/>\n+     * DecimalTypeSuffix := d | D\n+     * <br/>\n+     * FloatTypeSuffix :=  f | F\n+     * </code>\n+     *\n+     * @param isDotStart Whether process starts from a dot\n+     * @return The decimal floating point literal.\n+     */\n+    private STToken processDecimalFloatLiteral(boolean isDotStart) {\n+        int nextChar = peek();\n+\n+        // Direct process to the dot switch case\n+        if (isDotStart) {\n+            nextChar = LexerTerminals.DOT;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5OTQwMw=="}, "originalCommit": {"oid": "7124776e7ea1bce1cf4e3b355626dd3ee90bec11"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwMTAyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            while (true) {\n          \n          \n            \n                                if (isHexDigit(nextChar)) {\n          \n          \n            \n                            while (isHexDigit(nextChar)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r415301020", "createdAt": "2020-04-26T12:38:11Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -547,22 +711,64 @@ private STToken processNumericLiteral(int startChar) {\n      * <br/>\n      * HexDigit := Digit | a .. f | A .. F\n      * <br/>\n+     * HexFloatingPointLiteral := HexIndicator HexFloatingPointNumber\n+     * <br/>\n+     * HexFloatingPointNumber := HexNumber HexExponent | DottedHexNumber [HexExponent]\n+     * <br/>\n+     * DottedHexNumber := HexDigit+ . HexDigit* | . HexDigit+\n      * </code>\n-     * \n-     * @return\n+     *\n+     * @return The hex literal.\n      */\n-    private STToken processHexIntLiteral() {\n+    private STToken processHexLiteral() {\n         reader.advance();\n+\n+        // Make sure at least one hex-digit present if processing started from a dot\n+        if (peek() == LexerTerminals.DOT) {\n+            if (!isHexDigit(reader.peek(1))) {\n+                reader.advance();\n+                processInvalidToken();\n+                return readToken();\n+            }\n+        }\n+\n+        int nextChar;\n         while (isHexDigit(peek())) {\n             reader.advance();\n         }\n+        nextChar = peek();\n \n-        return getLiteral(SyntaxKind.HEX_INTEGER_LITERAL);\n+        switch (nextChar) {\n+            case LexerTerminals.DOT:\n+                reader.advance();\n+                nextChar = peek();\n+                while (true) {\n+                    if (isHexDigit(nextChar)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7124776e7ea1bce1cf4e3b355626dd3ee90bec11"}, "originalPosition": 290}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ab171d4843da8c18499ddb9cb742fcb60ec069d", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ab171d4843da8c18499ddb9cb742fcb60ec069d", "committedDate": "2020-04-27T05:08:01Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into float-literal-support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7528e9f61fb8367f2037c598b96d3b06aa4f6b8", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7528e9f61fb8367f2037c598b96d3b06aa4f6b8", "committedDate": "2020-04-27T06:55:59Z", "message": "Refactor floating literal processing"}, "afterCommit": {"oid": "3016312bfe3eb8a2d18099cbf3f6379ef3244934", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3016312bfe3eb8a2d18099cbf3f6379ef3244934", "committedDate": "2020-04-27T07:02:45Z", "message": "Refactor floating literal processing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3016312bfe3eb8a2d18099cbf3f6379ef3244934", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3016312bfe3eb8a2d18099cbf3f6379ef3244934", "committedDate": "2020-04-27T07:02:45Z", "message": "Refactor floating literal processing"}, "afterCommit": {"oid": "bdfffac16ed4824607bc42f9f0eea6151c618f29", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdfffac16ed4824607bc42f9f0eea6151c618f29", "committedDate": "2020-04-27T07:09:28Z", "message": "Refactor floating literal processing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdfffac16ed4824607bc42f9f0eea6151c618f29", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdfffac16ed4824607bc42f9f0eea6151c618f29", "committedDate": "2020-04-27T07:09:28Z", "message": "Refactor floating literal processing"}, "afterCommit": {"oid": "0c057ffc4cad13fc885de020fd67f0d73f4a946d", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c057ffc4cad13fc885de020fd67f0d73f4a946d", "committedDate": "2020-04-27T07:12:25Z", "message": "Refactor floating literal processing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjg0MjMx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#pullrequestreview-400684231", "createdAt": "2020-04-27T07:18:09Z", "commit": {"oid": "0c057ffc4cad13fc885de020fd67f0d73f4a946d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxODowOVrOGMUVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxODowOVrOGMUVHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2OTE4Mg==", "bodyText": "Saw a bug here. SIMPLE_NAME_REFERENCE added and fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22827#discussion_r415569182", "createdAt": "2020-04-27T07:18:09Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3047,6 +3051,7 @@ private boolean isValidLVExpr(STNode expression) {\n         switch (expression.kind) {\n             case IDENTIFIER_TOKEN:\n             case QUALIFIED_NAME_REFERENCE:\n+            case SIMPLE_NAME_REFERENCE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c057ffc4cad13fc885de020fd67f0d73f4a946d"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c057ffc4cad13fc885de020fd67f0d73f4a946d", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c057ffc4cad13fc885de020fd67f0d73f4a946d", "committedDate": "2020-04-27T07:12:25Z", "message": "Refactor floating literal processing"}, "afterCommit": {"oid": "f58bc440d3c1187742c07b370b1313a49b23fae8", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f58bc440d3c1187742c07b370b1313a49b23fae8", "committedDate": "2020-04-27T07:24:19Z", "message": "Refactor floating literal processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9e1b2e23af7aa5c2b680e453dd720ac30685970", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9e1b2e23af7aa5c2b680e453dd720ac30685970", "committedDate": "2020-04-27T07:29:29Z", "message": "Refactor floating literal processing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f58bc440d3c1187742c07b370b1313a49b23fae8", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f58bc440d3c1187742c07b370b1313a49b23fae8", "committedDate": "2020-04-27T07:24:19Z", "message": "Refactor floating literal processing"}, "afterCommit": {"oid": "b9e1b2e23af7aa5c2b680e453dd720ac30685970", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9e1b2e23af7aa5c2b680e453dd720ac30685970", "committedDate": "2020-04-27T07:29:29Z", "message": "Refactor floating literal processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe4c9c8256009cde1c1a0288e7b393b3ddfde09f", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe4c9c8256009cde1c1a0288e7b393b3ddfde09f", "committedDate": "2020-04-27T11:19:18Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into float-literal-support\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0cb502a9126b9498108a065a0d3ae2c755cb6bf", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0cb502a9126b9498108a065a0d3ae2c755cb6bf", "committedDate": "2020-04-27T12:15:17Z", "message": "Fix small merging issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "800e264509f69378d75664449e283458fc257f1f", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/800e264509f69378d75664449e283458fc257f1f", "committedDate": "2020-04-27T12:06:37Z", "message": "Fix small merging issue"}, "afterCommit": {"oid": "f0cb502a9126b9498108a065a0d3ae2c755cb6bf", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0cb502a9126b9498108a065a0d3ae2c755cb6bf", "committedDate": "2020-04-27T12:15:17Z", "message": "Fix small merging issue"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3420, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}