{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NzAwMzky", "number": 27428, "title": "Improve `configurable` variable support for basic types", "bodyText": "Purpose\n$subject\nFixes #27131\nFixes #27129\nApproach\n\nThe parsing and map population methods are updated with the new TOML parser .\nAdded validations and value creation methods for decimal and array of basic types.\n\nSamples\nRemarks\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-12-10T06:41:59Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428", "merged": true, "mergeCommit": {"oid": "9fab956c186e5a0761487e67de2802b804cafbbf"}, "closed": true, "closedAt": "2021-01-05T07:36:21Z", "author": {"login": "HindujaB"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlKgPdAFqTU1MDI0ODc1Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtF5lZgFqTU2MTU2NzY5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjQ4NzU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#pullrequestreview-550248757", "createdAt": "2020-12-11T16:26:42Z", "commit": {"oid": "0b52d6119257f73af7131914b0571be5dbd21550"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoyNjo0MlrOIEAMgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoyNjo0MlrOIEAMgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2ODQxOQ==", "bodyText": "Can we remove the com.moandjiezana.toml:toml4j:0.7.2 dependency with this change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#discussion_r541068419", "createdAt": "2020-12-11T16:26:42Z", "author": {"login": "sameerajayasoma"}, "path": "bvm/ballerina-rt/build.gradle", "diffHunk": "@@ -84,6 +84,7 @@ dependencies {\n     dist 'org.slf4j:slf4j-api:1.7.22'\n     dist 'com.moandjiezana.toml:toml4j:0.7.2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b52d6119257f73af7131914b0571be5dbd21550"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjUwMDYz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#pullrequestreview-550250063", "createdAt": "2020-12-11T16:28:15Z", "commit": {"oid": "0b52d6119257f73af7131914b0571be5dbd21550"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoyODoxNVrOIEARAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoyODoxNVrOIEARAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2OTU3MA==", "bodyText": "As explained by Hinduja, this is a duplication of the following class.\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/io/ballerina/projects/TomlDocument.java\n    \n    \n         Line 36\n      in\n      6aa2190\n    \n    \n    \n    \n\n        \n          \n           public abstract class TomlDocument { \n        \n    \n  \n\n\n@HindujaB Can you please create an issue to fix this? We need to bring this class to some other module.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#discussion_r541069570", "createdAt": "2020-12-11T16:28:15Z", "author": {"login": "sameerajayasoma"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigToml.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlTransformer;\n+import io.ballerina.toml.syntax.tree.DocumentNode;\n+import io.ballerina.toml.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+\n+/**\n+ * Represents configuration TOML document for `configurable` variables.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ConfigToml {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b52d6119257f73af7131914b0571be5dbd21550"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b52d6119257f73af7131914b0571be5dbd21550", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b52d6119257f73af7131914b0571be5dbd21550", "committedDate": "2020-12-10T06:50:41Z", "message": "Fix checkstyle errors"}, "afterCommit": {"oid": "f560fd4751f71d24799cee56e4b923b0f49e26a9", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f560fd4751f71d24799cee56e4b923b0f49e26a9", "committedDate": "2020-12-12T15:07:01Z", "message": "Remove toml dependency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTg1Njg2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#pullrequestreview-552185686", "createdAt": "2020-12-15T07:57:10Z", "commit": {"oid": "f560fd4751f71d24799cee56e4b923b0f49e26a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzo1NzoxMFrOIF9k_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzo1NzoxMFrOIF9k_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyMjY4NA==", "bodyText": "can we replace with\ncreateArray.<TomlType.BOOLEAN>(...)\n...\npublic static <T> ListInitialValueEntry.ExpressionEntry[] createArray(....) {\n        T rv = (T)o;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#discussion_r543122684", "createdAt": "2020-12-15T07:57:10Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -47,88 +64,171 @@\n \n     static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n \n-    private static Toml getConfigurationData() throws TomlException {\n+    private TomlParser() {\n+    }\n+\n+    private static TomlTableNode getConfigurationData() throws TomlException {\n         if (!Files.exists(CONFIG_FILE_PATH)) {\n             throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n         }\n-        try {\n-            return new Toml().read(CONFIG_FILE_PATH.toFile());\n-        } catch (RuntimeException exception) {\n-            throw new TomlException(INVALID_TOML_FILE + exception.getCause().getMessage());\n-        }\n+        ConfigToml configToml = new ConfigToml(CONFIG_FILE_PATH);\n+        return configToml.tomlAstNode();\n     }\n \n     public static void populateConfigMap(Map<Module, VariableKey[]> configurationData) throws TomlException {\n         if (configurationData.isEmpty()) {\n             return;\n         }\n-        Toml toml = getConfigurationData();\n-        if (toml.isEmpty()) {\n+        TomlTableNode tomlNode = getConfigurationData();\n+        if (tomlNode.entries().isEmpty()) {\n             //No values provided at toml file\n             return;\n         }\n         for (Map.Entry<Module, VariableKey[]> moduleEntry : configurationData.entrySet()) {\n             String orgName = moduleEntry.getKey().getOrg();\n             String moduleName = moduleEntry.getKey().getName();\n-            Toml orgToml = orgName.equals(ANON_ORG) ? toml : extractOrganizationTable(toml, orgName);\n-            Toml moduleToml = moduleName.equals(DEFAULT_MODULE) ? orgToml : extractModuleTable(orgToml, moduleName);\n+            TomlTableNode orgNode = orgName.equals(ANON_ORG) ? tomlNode : extractOrganizationNode(tomlNode, orgName);\n+            TomlTableNode moduleNode = moduleName.equals(DEFAULT_MODULE) ? orgNode : extractModuleNode(orgNode,\n+                    moduleName);\n             for (VariableKey key : moduleEntry.getValue()) {\n-                if (!moduleToml.contains(key.variable)) {\n+                if (!moduleNode.entries().containsKey(key.variable)) {\n                     //It is an optional configurable variable\n-                    break;\n+                    continue;\n                 }\n-                Object value = validateAndExtractValue(key, moduleToml);\n+                Object value = validateNodeAndExtractValue(key, moduleNode.entries());\n                 ConfigurableMap.put(key, value);\n             }\n         }\n     }\n \n-    private static Object validateAndExtractValue(VariableKey key, Toml moduleToml) throws TomlException {\n+    private static Object validateNodeAndExtractValue(VariableKey key, Map<String, TopLevelNode> valueMap) {\n         String variableName = key.variable;\n+        TomlValueNode tomlValue = ((TomlKeyValueNode) valueMap.get(variableName)).value();\n         Type type = key.type;\n         Object value;\n         try {\n             switch (type.getTag()) {\n                 case TypeTags.INT_TAG:\n-                    value = moduleToml.getLong(variableName);\n+                    checkTypeAndthrowError(TomlType.INTEGER,  tomlValue.kind(), variableName, type);\n+                    value = ((TomlLongValueNode) tomlValue).getValue();\n                     break;\n                 case TypeTags.BOOLEAN_TAG:\n-                    value = moduleToml.getBoolean(variableName);\n+                    checkTypeAndthrowError(TomlType.BOOLEAN,  tomlValue.kind(), variableName, type);\n+                    value = ((TomlBooleanValueNode) tomlValue).getValue();\n                     break;\n                 case TypeTags.FLOAT_TAG:\n-                    value = moduleToml.getDouble(variableName);\n+                    checkTypeAndthrowError(TomlType.DOUBLE,  tomlValue.kind(), variableName, type);\n+                    value = ((TomlDoubleValueNodeNode) tomlValue).getValue();\n                     break;\n                 case TypeTags.STRING_TAG:\n-                    value = StringUtils.fromString(moduleToml.getString(variableName));\n+                    checkTypeAndthrowError(TomlType.STRING,  tomlValue.kind(), variableName, type);\n+                    value = StringUtils.fromString(((TomlStringValueNode) tomlValue).getValue());\n+                    break;\n+                case TypeTags.DECIMAL_TAG:\n+                    checkTypeAndthrowError(TomlType.DOUBLE,  tomlValue.kind(), variableName, type);\n+                    value =\n+                            ValueCreator.createDecimalValue(\n+                                    BigDecimal.valueOf(((TomlDoubleValueNodeNode) tomlValue).getValue()));\n+                    break;\n+                case TypeTags.INTERSECTION_TAG:\n+                    Type effectiveType = ((BIntersectionType) type).getEffectiveType();\n+                    if (effectiveType.getTag() != TypeTags.ARRAY_TAG) {\n+                        throw new TomlException(String.format(CONFIGURATION_NOT_SUPPORTED, effectiveType.toString()));\n+                    }\n+                    checkTypeAndthrowError(TomlType.ARRAY,  tomlValue.kind(), variableName, effectiveType);\n+                    value = retrieveArrayValues((TomlArrayValueNode) tomlValue, variableName,\n+                            (ArrayType) effectiveType);\n                     break;\n                 default:\n-                    throw new TomlException(String.format(\"Configurable feature is yet to be supported for type '%s'\",\n-                            type.toString()));\n+                    throw new TomlException(String.format(CONFIGURATION_NOT_SUPPORTED, type.toString()));\n             }\n         } catch (ClassCastException e) {\n-            throw new TomlException(INVALID_TOML_FILE + String.format(INVALID_VARIABLE_TYPE, variableName,\n-                    type.toString()));\n+            throw new TomlException(INVALID_TOML_FILE, e);\n         }\n         return value;\n     }\n \n-    private static Toml extractModuleTable(Toml modules, String module) {\n-        Toml moduleToml = modules;\n-        int subModuleIndex = module.indexOf(SUBMODULE_DELIMITER);\n+    private static Object retrieveArrayValues(TomlArrayValueNode arrayNode, String variableName,\n+                                              ArrayType effectiveType) {\n+        Type elementType = effectiveType.getElementType();\n+        List<TomlValueNode> arrayList = arrayNode.elements();\n+        int arraySize = arrayList.size();\n+        ListInitialValueEntry.ExpressionEntry[] arrayEntries =\n+                new ListInitialValueEntry.ExpressionEntry[arraySize];\n+        TomlType retrievedType = arrayList.get(0).kind();\n+        try {\n+            switch (elementType.getTag()) {\n+                case TypeTags.INT_TAG:\n+                    checkTypeAndthrowError(TomlType.INTEGER, retrievedType, variableName, elementType);\n+                    for (int i = 0; i < arraySize; i++) {\n+                        arrayEntries[i] = new ListInitialValueEntry.ExpressionEntry(\n+                                ((TomlLongValueNode) arrayList.get(i)).getValue());\n+                    }\n+                    break;\n+                case TypeTags.BOOLEAN_TAG:\n+                    checkTypeAndthrowError(TomlType.BOOLEAN, retrievedType, variableName, elementType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f560fd4751f71d24799cee56e4b923b0f49e26a9"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5abfee62d9a7089f848c3ae7b573080a7c45dbcc", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5abfee62d9a7089f848c3ae7b573080a7c45dbcc", "committedDate": "2020-12-16T03:30:34Z", "message": "Migrate to native toml-parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ebcc4aae4aed38b2d4ae3b74f3d1680f8b94c03", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ebcc4aae4aed38b2d4ae3b74f3d1680f8b94c03", "committedDate": "2020-12-16T03:30:34Z", "message": "Improve error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a35651fc968a75f4f5754271a48089bd43aa75c", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a35651fc968a75f4f5754271a48089bd43aa75c", "committedDate": "2020-12-16T03:30:34Z", "message": "Add `configurable` support for other basic types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e09cd4bc503519f42295adbb3bf1b432cfd0eaec", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e09cd4bc503519f42295adbb3bf1b432cfd0eaec", "committedDate": "2020-12-16T03:30:34Z", "message": "Fix checkstyle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b33017f5ea78479605dac54f7d7c66fd9d16d3d", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b33017f5ea78479605dac54f7d7c66fd9d16d3d", "committedDate": "2020-12-16T03:30:34Z", "message": "Remove toml dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "458d187e9fd87f63aa1aac63f09e5afb3908fafb", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/458d187e9fd87f63aa1aac63f09e5afb3908fafb", "committedDate": "2020-12-16T03:30:34Z", "message": "Remove duplicating logic using generic methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f560fd4751f71d24799cee56e4b923b0f49e26a9", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f560fd4751f71d24799cee56e4b923b0f49e26a9", "committedDate": "2020-12-12T15:07:01Z", "message": "Remove toml dependency"}, "afterCommit": {"oid": "458d187e9fd87f63aa1aac63f09e5afb3908fafb", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/458d187e9fd87f63aa1aac63f09e5afb3908fafb", "committedDate": "2020-12-16T03:30:34Z", "message": "Remove duplicating logic using generic methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNTY3Njk0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#pullrequestreview-561567694", "createdAt": "2021-01-05T07:36:15Z", "commit": {"oid": "458d187e9fd87f63aa1aac63f09e5afb3908fafb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4790, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}