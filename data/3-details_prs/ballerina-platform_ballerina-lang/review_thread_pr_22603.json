{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMDkzNzM4", "number": 22603, "reviewThreads": {"totalCount": 141, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDoyOFrODyJgVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMjo1MFrODyJs5Q==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExMTI1OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDoyOFrOGGBr2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDoyOFrOGGBr2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjI0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes a given json to the given channel.\n          \n          \n            \n            # Writes a given JSON to the given channel.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972248", "createdAt": "2020-04-15T16:24:28Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content\n+# + return - Content length that written, or else `Error`\n     public function write(string content, int startOffset) returns int|Error {\n         return writeExtern(self, java:fromString(content), startOffset);\n     }\n \n-    # Writes a given json to the given channel.\n-    #\n-    # + content - The json which should be written\n-    # + return - If an `Error` occurred while writing\n+# Writes a given json to the given channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExMTc4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDozN1rOGGBsMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDozN1rOGGBsMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjMzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + content - The json which should be written\n          \n          \n            \n            # + content - The JSON, which should be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972339", "createdAt": "2020-04-15T16:24:37Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content\n+# + return - Content length that written, or else `Error`\n     public function write(string content, int startOffset) returns int|Error {\n         return writeExtern(self, java:fromString(content), startOffset);\n     }\n \n-    # Writes a given json to the given channel.\n-    #\n-    # + content - The json which should be written\n-    # + return - If an `Error` occurred while writing\n+# Writes a given json to the given channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n+# ```\n+#\n+# + content - The json which should be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExMjUxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDo0N1rOGGBsrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDo0N1rOGGBsrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes a given xml to the channel.\n          \n          \n            \n            # Writes a given XML to the channel.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972462", "createdAt": "2020-04-15T16:24:47Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content\n+# + return - Content length that written, or else `Error`\n     public function write(string content, int startOffset) returns int|Error {\n         return writeExtern(self, java:fromString(content), startOffset);\n     }\n \n-    # Writes a given json to the given channel.\n-    #\n-    # + content - The json which should be written\n-    # + return - If an `Error` occurred while writing\n+# Writes a given json to the given channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n+# ```\n+#\n+# + content - The json which should be written\n+# + return - If an `Error` occurred while writing\n     public function writeJson(json content) returns Error? {\n         return writeJsonExtern(self, content);\n     }\n \n-    # Writes a given xml to the channel.\n-    #\n-    # + content - The XML which should be written\n-    # + return - Nil or `Error` if any error occurred\n+# Writes a given xml to the channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExMjc5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDo1NFrOGGBs6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDo1NFrOGGBs6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjUyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + content - The XML which should be written\n          \n          \n            \n            # + content - The XML, which should be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972521", "createdAt": "2020-04-15T16:24:54Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content\n+# + return - Content length that written, or else `Error`\n     public function write(string content, int startOffset) returns int|Error {\n         return writeExtern(self, java:fromString(content), startOffset);\n     }\n \n-    # Writes a given json to the given channel.\n-    #\n-    # + content - The json which should be written\n-    # + return - If an `Error` occurred while writing\n+# Writes a given json to the given channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n+# ```\n+#\n+# + content - The json which should be written\n+# + return - If an `Error` occurred while writing\n     public function writeJson(json content) returns Error? {\n         return writeJsonExtern(self, content);\n     }\n \n-    # Writes a given xml to the channel.\n-    #\n-    # + content - The XML which should be written\n-    # + return - Nil or `Error` if any error occurred\n+# Writes a given xml to the channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeXml(inputXml, 0);\n+# ```\n+# \n+# + content - The XML which should be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExMzUxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNTowNFrOGGBtXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNTowNFrOGGBtXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjYzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Nil, or else `Error` if any error occurred\n          \n          \n            \n            # + return - `()` or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972638", "createdAt": "2020-04-15T16:25:04Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content\n+# + return - Content length that written, or else `Error`\n     public function write(string content, int startOffset) returns int|Error {\n         return writeExtern(self, java:fromString(content), startOffset);\n     }\n \n-    # Writes a given json to the given channel.\n-    #\n-    # + content - The json which should be written\n-    # + return - If an `Error` occurred while writing\n+# Writes a given json to the given channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n+# ```\n+#\n+# + content - The json which should be written\n+# + return - If an `Error` occurred while writing\n     public function writeJson(json content) returns Error? {\n         return writeJsonExtern(self, content);\n     }\n \n-    # Writes a given xml to the channel.\n-    #\n-    # + content - The XML which should be written\n-    # + return - Nil or `Error` if any error occurred\n+# Writes a given xml to the channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeXml(inputXml, 0);\n+# ```\n+# \n+# + content - The XML which should be written\n+# + return - Nil, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExMzkyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNToxMVrOGGBtqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNToxMVrOGGBtqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjcxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Closes a given WritableCharacterChannel channel.\n          \n          \n            \n            # Closes a given `WritableCharacterChannel` channel.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972712", "createdAt": "2020-04-15T16:25:11Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content\n+# + return - Content length that written, or else `Error`\n     public function write(string content, int startOffset) returns int|Error {\n         return writeExtern(self, java:fromString(content), startOffset);\n     }\n \n-    # Writes a given json to the given channel.\n-    #\n-    # + content - The json which should be written\n-    # + return - If an `Error` occurred while writing\n+# Writes a given json to the given channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n+# ```\n+#\n+# + content - The json which should be written\n+# + return - If an `Error` occurred while writing\n     public function writeJson(json content) returns Error? {\n         return writeJsonExtern(self, content);\n     }\n \n-    # Writes a given xml to the channel.\n-    #\n-    # + content - The XML which should be written\n-    # + return - Nil or `Error` if any error occurred\n+# Writes a given xml to the channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeXml(inputXml, 0);\n+# ```\n+# \n+# + content - The XML which should be written\n+# + return - Nil, or else `Error` if any error occurred\n     public function writeXml(xml content) returns Error? {\n         return writeXmlExtern(self, content);\n     }\n \n-    # Closes a given WritableCharacterChannel channel.\n-    #\n-    # + return - Nil or `Error` if any error occurred\n+# Closes a given WritableCharacterChannel channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExNDczOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNToyNlrOGGBuQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNToyNlrOGGBuQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mjg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Nil, or else `Error` if any error occurred\n          \n          \n            \n            # + return - `()` or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972865", "createdAt": "2020-04-15T16:25:26Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content\n+# + return - Content length that written, or else `Error`\n     public function write(string content, int startOffset) returns int|Error {\n         return writeExtern(self, java:fromString(content), startOffset);\n     }\n \n-    # Writes a given json to the given channel.\n-    #\n-    # + content - The json which should be written\n-    # + return - If an `Error` occurred while writing\n+# Writes a given json to the given channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n+# ```\n+#\n+# + content - The json which should be written\n+# + return - If an `Error` occurred while writing\n     public function writeJson(json content) returns Error? {\n         return writeJsonExtern(self, content);\n     }\n \n-    # Writes a given xml to the channel.\n-    #\n-    # + content - The XML which should be written\n-    # + return - Nil or `Error` if any error occurred\n+# Writes a given xml to the channel.\n+# ```ballerina\n+# io:Error? err = writableCharChannel.writeXml(inputXml, 0);\n+# ```\n+# \n+# + content - The XML which should be written\n+# + return - Nil, or else `Error` if any error occurred\n     public function writeXml(xml content) returns Error? {\n         return writeXmlExtern(self, content);\n     }\n \n-    # Closes a given WritableCharacterChannel channel.\n-    #\n-    # + return - Nil or `Error` if any error occurred\n+# Closes a given WritableCharacterChannel channel.\n+# ```ballerina\n+# io:Error err = writableCharChannel.close();\n+# ```\n+#\n+# + return - Nil, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExNTI0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNTozOFrOGGBuoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNTozOFrOGGBuoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mjk2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Constructs a CSV channel from a CharacterChannel to read/write CSV records.\n          \n          \n            \n                # Constructs a CSV channel from a `CharacterChannel` to read/write CSV records.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972960", "createdAt": "2020-04-15T16:25:38Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "diffHunk": "@@ -32,7 +32,7 @@ public type WritableCSVChannel object {\n     private WritableTextRecordChannel? dc;\n \n     # Constructs a CSV channel from a CharacterChannel to read/write CSV records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExNjA4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNTo0OFrOGGBvGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNTo0OFrOGGBvGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzA4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + CharacterChannel - The CharacterChannel, which will represent the content in the CSV file\n          \n          \n            \n                # + CharacterChannel - The `CharacterChannel`, which will represent the content in the CSV file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408973080", "createdAt": "2020-04-15T16:25:48Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "diffHunk": "@@ -32,7 +32,7 @@ public type WritableCSVChannel object {\n     private WritableTextRecordChannel? dc;\n \n     # Constructs a CSV channel from a CharacterChannel to read/write CSV records.\n-\n+    # \n     # + CharacterChannel - The CharacterChannel, which will represent the content in the CSV file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExNjk0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjowMVrOGGBvsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjowMVrOGGBvsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzIzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + fs - Field separator, which will separate between the records in the CSV\n          \n          \n            \n                # + fs - Field separator, which will separate the records in the CSV", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408973235", "createdAt": "2020-04-15T16:26:01Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "diffHunk": "@@ -32,7 +32,7 @@ public type WritableCSVChannel object {\n     private WritableTextRecordChannel? dc;\n \n     # Constructs a CSV channel from a CharacterChannel to read/write CSV records.\n-\n+    # \n     # + CharacterChannel - The CharacterChannel, which will represent the content in the CSV file\n     # + fs - Field separator, which will separate between the records in the CSV", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExNzU0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjoxMlrOGGBwIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMToyMlrOGGDfFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzM0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `Error` if the record could not be written properly\n          \n          \n            \n            # + return - An `Error` if the record could not be written properly\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408973346", "createdAt": "2020-04-15T16:26:12Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "diffHunk": "@@ -47,10 +47,13 @@ public type WritableCSVChannel object {\n         }\n     }\n \n-    # Writes the record to a given CSV file.\n-\n-    # + csvRecord - A record to be written to the channel\n-    # + return - Returns an `Error` if the record could not be written properly\n+# Writes the record to a given CSV file.\n+# ```ballerina\n+# io:Error err = csvChannel.write(record);\n+# ```\n+# \n+# + csvRecord - A record to be written to the channel\n+# + return - An `Error` if the record could not be written properly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTc0OA==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409001748", "createdAt": "2020-04-15T17:11:22Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "diffHunk": "@@ -47,10 +47,13 @@ public type WritableCSVChannel object {\n         }\n     }\n \n-    # Writes the record to a given CSV file.\n-\n-    # + csvRecord - A record to be written to the channel\n-    # + return - Returns an `Error` if the record could not be written properly\n+# Writes the record to a given CSV file.\n+# ```ballerina\n+# io:Error err = csvChannel.write(record);\n+# ```\n+# \n+# + csvRecord - A record to be written to the channel\n+# + return - An `Error` if the record could not be written properly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzM0Ng=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExNzkzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjoxOVrOGGBwZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjoxOVrOGGBwZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzQxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Closes a given CSVChannel.\n          \n          \n            \n            # Closes a given `CSVChannel`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408973415", "createdAt": "2020-04-15T16:26:19Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "diffHunk": "@@ -59,9 +62,11 @@ public type WritableCSVChannel object {\n         return ();\n     }\n \n-    # Closes a given CSVChannel.\n-\n-    # + return - Nil or `Error` if any error occurred\n+# Closes a given CSVChannel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExODI4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjoyNVrOGGBwqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMTozMlrOGGDfbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzQ4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Nil, or else `Error` if any error occurred\n          \n          \n            \n            # + return - Nil, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408973481", "createdAt": "2020-04-15T16:26:25Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "diffHunk": "@@ -59,9 +62,11 @@ public type WritableCSVChannel object {\n         return ();\n     }\n \n-    # Closes a given CSVChannel.\n-\n-    # + return - Nil or `Error` if any error occurred\n+# Closes a given CSVChannel.\n+# ```ballerina\n+# io:Error? err = csvChannel.close();\n+# ```\n+# + return - Nil, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTgzNg==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409001836", "createdAt": "2020-04-15T17:11:32Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_csv_channel.bal", "diffHunk": "@@ -59,9 +62,11 @@ public type WritableCSVChannel object {\n         return ();\n     }\n \n-    # Closes a given CSVChannel.\n-\n-    # + return - Nil or `Error` if any error occurred\n+# Closes a given CSVChannel.\n+# ```ballerina\n+# io:Error? err = csvChannel.close();\n+# ```\n+# + return - Nil, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzQ4MQ=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExODc2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjozM1rOGGBw_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjozM1rOGGBw_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzU2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes 16 bit integer.\n          \n          \n            \n            # Writes a 16 bit integer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408973567", "createdAt": "2020-04-15T16:26:33Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExOTI5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjo0MlrOGGBxWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNjo0MlrOGGBxWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzY1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + value - integer which will be written\n          \n          \n            \n            # + value - The integer, which will be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408973659", "createdAt": "2020-04-15T16:26:42Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyMDM1OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzowMFrOGGByFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzowMFrOGGByFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mzg0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - nill if the content is written successfully, or else `Error` if any error occurred\n          \n          \n            \n            # + return - `()` if the content is written successfully or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408973846", "createdAt": "2020-04-15T16:27:00Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyMTA5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzoxMFrOGGByfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzoxMFrOGGByfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mzk1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes 32 bit integer.\n          \n          \n            \n            # Writes a 32 bit integer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408973951", "createdAt": "2020-04-15T16:27:10Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyMTcxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzoxOVrOGGBy7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzoxOVrOGGBy7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDA2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + value - integer which will be written\n          \n          \n            \n            # + value - The integer, which will be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408974061", "createdAt": "2020-04-15T16:27:19Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyMjIyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzoyN1rOGGBzOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMTo0NFrOGGDf7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDEzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - nill if the content is written successfully, or else `Error` if any error occurred\n          \n          \n            \n            # + return - nill if the content is written successfully, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408974138", "createdAt": "2020-04-15T16:27:27Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTk2NQ==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409001965", "createdAt": "2020-04-15T17:11:44Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDEzOA=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyMjgzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzozNVrOGGBzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzozNVrOGGBzmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDIzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes 64 bit integer.\n          \n          \n            \n            # Writes a 64 bit integer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408974235", "createdAt": "2020-04-15T16:27:35Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyMzI2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzo0NFrOGGBz4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzo0NFrOGGBz4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDMwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + value - integer which will be written\n          \n          \n            \n            # + value - The integer, which will be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408974307", "createdAt": "2020-04-15T16:27:44Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyNDU2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODowNVrOGGB0xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMTo1OVrOGGDgfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDUzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - nill if the content is written successfully, or else `Error` if any error occurred\n          \n          \n            \n            # + return - nill if the content is written successfully, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408974535", "createdAt": "2020-04-15T16:28:05Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjExMA==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409002110", "createdAt": "2020-04-15T17:11:59Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDUzNQ=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyNTAzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODoxNVrOGGB1IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODoxNVrOGGB1IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDYyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes 32 bit float.\n          \n          \n            \n            # Writes a 32 bit float.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408974625", "createdAt": "2020-04-15T16:28:15Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyNTY0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODoyM1rOGGB1fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODoyM1rOGGB1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDcxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + value - float which will be written\n          \n          \n            \n            # + value - The float, which will be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408974717", "createdAt": "2020-04-15T16:28:23Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyNjIyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODozMVrOGGB11A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMjowOVrOGGDg3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - nill if the float is written successfully, or else `Error` if any error occurred\n          \n          \n            \n            # + return - nill if the float is written successfully, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408974804", "createdAt": "2020-04-15T16:28:31Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjIwNQ==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409002205", "createdAt": "2020-04-15T17:12:09Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDgwNA=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyNjgwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODozOVrOGGB2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODozOVrOGGB2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDg5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes 64 bit float.\n          \n          \n            \n            # Writes a 64 bit float.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408974897", "createdAt": "2020-04-15T16:28:39Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyNzU5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODo0OFrOGGB2qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODo0OFrOGGB2qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTAxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + value - float which will be written\n          \n          \n            \n            # + value - The float, which will be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408975017", "createdAt": "2020-04-15T16:28:48Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEyODE2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyODo1NVrOGGB3BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMjoyMFrOGGDhTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTEwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - nill if the float is written successfully, or else `Error` if any error occurred\n          \n          \n            \n            # + return - nill if the float is written successfully, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408975108", "createdAt": "2020-04-15T16:28:55Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjMxNw==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409002317", "createdAt": "2020-04-15T17:12:20Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTEwOA=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzMzc2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDoxNFrOGGB6cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDoxNFrOGGB6cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes boolean.\n          \n          \n            \n            # Writes a boolean.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408975987", "createdAt": "2020-04-15T16:30:14Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzNDQzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDoyNFrOGGB61g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDoyNFrOGGB61g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjA4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + value - boolean which will be written\n          \n          \n            \n            # + value - The boolean, which will be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408976086", "createdAt": "2020-04-15T16:30:24Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzNDczOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDozMFrOGGB7CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMjozMlrOGGDh3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjEzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - nill if the content is written successfully, or else `Error` if any error occurred\n          \n          \n            \n            # + return - nill if the content is written successfully, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408976137", "createdAt": "2020-04-15T16:30:30Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjQ2Mg==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409002462", "createdAt": "2020-04-15T17:12:32Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjEzNw=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzNTQ4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDo0MlrOGGB7hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDo0MlrOGGB7hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjI2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + value - the value which should be written\n          \n          \n            \n            # + value - The value, which should be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408976262", "createdAt": "2020-04-15T16:30:42Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeBool(boolean value) returns Error? {\n         return writeBoolExtern(self, value);\n     }\n \n-    # Writes a given string value to the respective channel.\n-    #\n-    # + value - the value which should be written\n-    # + encoding - the encoding which will represent the value string\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes a given string value to the respective channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeString(record);\n+# ```\n+#\n+# + value - the value which should be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzNzQwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMToxN1rOGGB83Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMToxN1rOGGB83Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjYwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + encoding - the encoding which will represent the value string\n          \n          \n            \n            # + encoding - The encoding, which will represent the value string\n          \n      \n    \n    \n  \n\nPlease check if all parameter descriptions start with a capital letter in all occurrences.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408976605", "createdAt": "2020-04-15T16:31:17Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeBool(boolean value) returns Error? {\n         return writeBoolExtern(self, value);\n     }\n \n-    # Writes a given string value to the respective channel.\n-    #\n-    # + value - the value which should be written\n-    # + encoding - the encoding which will represent the value string\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes a given string value to the respective channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeString(record);\n+# ```\n+#\n+# + value - the value which should be written\n+# + encoding - the encoding which will represent the value string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzNzk1OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMToyNVrOGGB9Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMjo0N1rOGGDibw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjY4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - nill if the content is written successfully, or else `Error` if any error occurred\n          \n          \n            \n            # + return - nill if the content is written successfully, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408976687", "createdAt": "2020-04-15T16:31:25Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeBool(boolean value) returns Error? {\n         return writeBoolExtern(self, value);\n     }\n \n-    # Writes a given string value to the respective channel.\n-    #\n-    # + value - the value which should be written\n-    # + encoding - the encoding which will represent the value string\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes a given string value to the respective channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeString(record);\n+# ```\n+#\n+# + value - the value which should be written\n+# + encoding - the encoding which will represent the value string\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjYwNw==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409002607", "createdAt": "2020-04-15T17:12:47Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeBool(boolean value) returns Error? {\n         return writeBoolExtern(self, value);\n     }\n \n-    # Writes a given string value to the respective channel.\n-    #\n-    # + value - the value which should be written\n-    # + encoding - the encoding which will represent the value string\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes a given string value to the respective channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeString(record);\n+# ```\n+#\n+# + value - the value which should be written\n+# + encoding - the encoding which will represent the value string\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjY4Nw=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzODQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMTozNFrOGGB9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMTozNFrOGGB9gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Njc3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes a variable length integer.\n          \n          \n            \n            # Writes a variable-length integer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408976770", "createdAt": "2020-04-15T16:31:34Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeBool(boolean value) returns Error? {\n         return writeBoolExtern(self, value);\n     }\n \n-    # Writes a given string value to the respective channel.\n-    #\n-    # + value - the value which should be written\n-    # + encoding - the encoding which will represent the value string\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes a given string value to the respective channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeString(record);\n+# ```\n+#\n+# + value - the value which should be written\n+# + encoding - the encoding which will represent the value string\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeString(string value, string encoding) returns Error? {\n         return writeStringExtern(self, java:fromString(value), java:fromString(encoding));\n     }\n \n-    # Writes a variable length integer.\n-    #\n-    # + value - int which will be written\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Writes a variable length integer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzODg5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMTo0M1rOGGB9zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMTo0M1rOGGB9zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Njg0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + value - int which will be written\n          \n          \n            \n            # + value - The int, which will be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408976846", "createdAt": "2020-04-15T16:31:43Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeBool(boolean value) returns Error? {\n         return writeBoolExtern(self, value);\n     }\n \n-    # Writes a given string value to the respective channel.\n-    #\n-    # + value - the value which should be written\n-    # + encoding - the encoding which will represent the value string\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes a given string value to the respective channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeString(record);\n+# ```\n+#\n+# + value - the value which should be written\n+# + encoding - the encoding which will represent the value string\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeString(string value, string encoding) returns Error? {\n         return writeStringExtern(self, java:fromString(value), java:fromString(encoding));\n     }\n \n-    # Writes a variable length integer.\n-    #\n-    # + value - int which will be written\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Writes a variable length integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeVarInt(length);\n+# ```\n+#\n+# + value - int which will be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzOTg2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMTo1OFrOGGB-YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMTo1OFrOGGB-YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Njk5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - value of the integer which is written, or else `Error` if any error occurred\n          \n          \n            \n            # + return - Value of the integer, which is written or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408976993", "createdAt": "2020-04-15T16:31:58Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeBool(boolean value) returns Error? {\n         return writeBoolExtern(self, value);\n     }\n \n-    # Writes a given string value to the respective channel.\n-    #\n-    # + value - the value which should be written\n-    # + encoding - the encoding which will represent the value string\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes a given string value to the respective channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeString(record);\n+# ```\n+#\n+# + value - the value which should be written\n+# + encoding - the encoding which will represent the value string\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeString(string value, string encoding) returns Error? {\n         return writeStringExtern(self, java:fromString(value), java:fromString(encoding));\n     }\n \n-    # Writes a variable length integer.\n-    #\n-    # + value - int which will be written\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Writes a variable length integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeVarInt(length);\n+# ```\n+#\n+# + value - int which will be written\n+# + return - value of the integer which is written, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTE0MDY3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMjoxMFrOGGB-2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMjoxMFrOGGB-2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzExMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - nill if the channel is closed successfully, or else `Error` if any error occurred\n          \n          \n            \n            # + return - `()` if the channel is closed successfully, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408977113", "createdAt": "2020-04-15T16:32:10Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_data_channel.bal", "diffHunk": "@@ -42,74 +42,101 @@ public type WritableDataChannel object {\n         initWritableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    # Writes 16 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 16 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt16(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt16(int value) returns Error? {\n         return writeInt16Extern(self, value);\n     }\n \n-    # Writes 32 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 32 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt32(length);\n+# ```\n+# \n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt32(int value) returns Error? {\n         return writeInt32Extern(self, value);\n     }\n \n-    # Writes 64 bit integer.\n-    #\n-    # + value - integer which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes 64 bit integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - integer which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeInt64(int value) returns Error? {\n         return writeInt64Extern(self, value);\n     }\n \n-    # Writes 32 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 32 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat32(float value) returns Error? {\n         return writeFloat32Extern(self, value);\n     }\n \n-    # Writes 64 bit float.\n-    #\n-    # + value - float which will be written\n-    # + return - nill if the float is written successfully or `Error` if any error occurred\n+# Writes 64 bit float.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeFloat32(3.12);\n+# ```\n+#\n+# + value - float which will be written\n+# + return - nill if the float is written successfully, or else `Error` if any error occurred\n     public function writeFloat64(float value) returns Error? {\n         return writeFloat64Extern(self, value);\n     }\n \n-    # Writes boolean.\n-    #\n-    # + value - boolean which will be written\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes boolean.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeInt64(length);\n+# ```\n+#\n+# + value - boolean which will be written\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeBool(boolean value) returns Error? {\n         return writeBoolExtern(self, value);\n     }\n \n-    # Writes a given string value to the respective channel.\n-    #\n-    # + value - the value which should be written\n-    # + encoding - the encoding which will represent the value string\n-    # + return - nill if the content is written successfully or `Error` if any error occurred\n+# Writes a given string value to the respective channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeString(record);\n+# ```\n+#\n+# + value - the value which should be written\n+# + encoding - the encoding which will represent the value string\n+# + return - nill if the content is written successfully, or else `Error` if any error occurred\n     public function writeString(string value, string encoding) returns Error? {\n         return writeStringExtern(self, java:fromString(value), java:fromString(encoding));\n     }\n \n-    # Writes a variable length integer.\n-    #\n-    # + value - int which will be written\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Writes a variable length integer.\n+# ```ballerina\n+# io:Error? err = dataChannel.writeVarInt(length);\n+# ```\n+#\n+# + value - int which will be written\n+# + return - value of the integer which is written, or else `Error` if any error occurred\n     public function writeVarInt(int value) returns Error? {\n         return writeVarIntExtern(self, value);\n     }\n \n-    # Closes the data channel.\n-    #\n-    # + return - nill if the channel is closed successfully or `Error` if any error occurred\n+# Closes the data channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.close();\n+# ```\n+#\n+# + return - nill if the channel is closed successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTE0MTY4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_record_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMjoyM1rOGGB_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMjoyM1rOGGB_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + characterChannel - WritableCharacterChannel, which will point to the input/output resource\n          \n          \n            \n                # + characterChannel - The `WritableCharacterChannel`, which will point to the input/output resource", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408977266", "createdAt": "2020-04-15T16:32:23Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_record_channel.bal", "diffHunk": "@@ -27,10 +27,10 @@ public type WritableTextRecordChannel object {\n     # + characterChannel - WritableCharacterChannel, which will point to the input/output resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTE0Mjc0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_record_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMjo0M1rOGGCAHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowNzo1MVrOGGDWVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzQzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `Error` if the records could not be written properly, or else ()\n          \n          \n            \n            # + return - An `Error` if the records could not be written properly, or else ()\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408977439", "createdAt": "2020-04-15T16:32:43Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_record_channel.bal", "diffHunk": "@@ -39,10 +39,13 @@ public type WritableTextRecordChannel object {\n         initWritableTextRecordChannel(self, characterChannel, java:fromString(fs), java:fromString(rs), java:fromString(fmt));\n     }\n \n-    # Writes records to a given output resource.\n-\n-    # + textRecord - List of fields to be written\n-    # + return - An `Error` if the records could not be written properly\n+# Writes records to a given output resource.\n+# ```ballerina\n+# io:Error? err = writableChannel.write(records);\n+# ```\n+# \n+# + textRecord - List of fields to be written\n+# + return - An `Error` if the records could not be written properly, or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTUwOQ==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408999509", "createdAt": "2020-04-15T17:07:51Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_record_channel.bal", "diffHunk": "@@ -39,10 +39,13 @@ public type WritableTextRecordChannel object {\n         initWritableTextRecordChannel(self, characterChannel, java:fromString(fs), java:fromString(rs), java:fromString(fmt));\n     }\n \n-    # Writes records to a given output resource.\n-\n-    # + textRecord - List of fields to be written\n-    # + return - An `Error` if the records could not be written properly\n+# Writes records to a given output resource.\n+# ```ballerina\n+# io:Error? err = writableChannel.write(records);\n+# ```\n+# \n+# + textRecord - List of fields to be written\n+# + return - An `Error` if the records could not be written properly, or else ()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzQzOQ=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTE0MzQxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_record_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMjo1MFrOGGCAgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowNzo0MFrOGGDV2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzUzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `Error` if the record channel could not be closed properly, or else ()\n          \n          \n            \n            # + return - An `Error` if the record channel could not be closed properly, or else ()\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408977536", "createdAt": "2020-04-15T16:32:50Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_record_channel.bal", "diffHunk": "@@ -51,9 +54,12 @@ public type WritableTextRecordChannel object {\n         return writeRecordExtern(self, records);\n     }\n \n-    # Closes a given record channel.\n-\n-    # + return - An `Error` if the record channel could not be closed properly\n+# Closes a given record channel.\n+# ```ballerina\n+# io:Error? err = writableChannel.close();\n+# ```\n+# \n+# + return - An `Error` if the record channel could not be closed properly, or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTM4Nw==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408999387", "createdAt": "2020-04-15T17:07:40Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_record_channel.bal", "diffHunk": "@@ -51,9 +54,12 @@ public type WritableTextRecordChannel object {\n         return writeRecordExtern(self, records);\n     }\n \n-    # Closes a given record channel.\n-\n-    # + return - An `Error` if the record channel could not be closed properly\n+# Closes a given record channel.\n+# ```ballerina\n+# io:Error? err = writableChannel.close();\n+# ```\n+# \n+# + return - An `Error` if the record channel could not be closed properly, or else ()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzUzNg=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk0MjYxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0NDozN1rOGGAA0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0NDozN1rOGGAA0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NDg1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n          \n          \n            \n            A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408944851", "createdAt": "2020-04-15T15:44:37Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk0MzE4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0NDo0NFrOGGABLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0NDo0NFrOGGABLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NDk0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            writing, respectively.\n          \n          \n            \n            writing respectively.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408944940", "createdAt": "2020-04-15T15:44:44Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n writing, respectively.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk2Njg3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MDowMVrOGGAP9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MDowMVrOGGAP9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0ODcyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on `ByteChannel` see [Byte I/O Example](https://ballerina.io/v1-2/learn/by-example/byte-io.html).\n          \n          \n            \n            The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on the `ByteChannel`, see the [Byte I/O Example](https://ballerina.io/learn/by-example/byte-io.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408948725", "createdAt": "2020-04-15T15:50:01Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n writing, respectively.\n-### Byte channels\n-The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes.\n-\n-```ballerina\n-// Open a file in read mode.\n-io:ReadableByteChannel | io:Error readableChannel = io:openReadableFile(\"file.txt\");\n-\n-// Here is how 100 bytes are read from the channel.\n-if (readableChannel is io:ReadableByteChannel) {\n-    byte[] | io:Error result = readableChannel.read(100);\n-}\n-\n-// Open a file in write mode.\n-io:WritableByteChannel | io:Error writableByteChannel = io:openWritableFile(\"file.txt\");\n \n-// Write some content to the beginning of the file.\n-if (writableByteChannel is io:WritableByteChannel) {\n-    string someContent = \"some cont\";\n-    byte[] content = someContent.toBytes();\n-    int | io:Error writeResult = writableByteChannel.write(content, 0);\n-}\n+### Byte channels\n+The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on `ByteChannel` see [Byte I/O Example](https://ballerina.io/v1-2/learn/by-example/byte-io.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk2ODM2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MDoxOVrOGGAQ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MDoxOVrOGGAQ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0ODk1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the `CharacterChannel`. For example on `CharacterChannel` see [Read/Write Files Example](https://ballerina.io/v1-2/learn/by-example/character-io.html).\n          \n          \n            \n            The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the `CharacterChannel`. For an example on the `CharacterChannel`, see the [Read/Write Files Example](https://ballerina.io/learn/by-example/character-io.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408948958", "createdAt": "2020-04-15T15:50:19Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n writing, respectively.\n-### Byte channels\n-The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes.\n-\n-```ballerina\n-// Open a file in read mode.\n-io:ReadableByteChannel | io:Error readableChannel = io:openReadableFile(\"file.txt\");\n-\n-// Here is how 100 bytes are read from the channel.\n-if (readableChannel is io:ReadableByteChannel) {\n-    byte[] | io:Error result = readableChannel.read(100);\n-}\n-\n-// Open a file in write mode.\n-io:WritableByteChannel | io:Error writableByteChannel = io:openWritableFile(\"file.txt\");\n \n-// Write some content to the beginning of the file.\n-if (writableByteChannel is io:WritableByteChannel) {\n-    string someContent = \"some cont\";\n-    byte[] content = someContent.toBytes();\n-    int | io:Error writeResult = writableByteChannel.write(content, 0);\n-}\n+### Byte channels\n+The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on `ByteChannel` see [Byte I/O Example](https://ballerina.io/v1-2/learn/by-example/byte-io.html).\n \n-```\n ### Character channels\n-The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the\n-`CharacterChannel`.\n-\n- ```ballerina\n-// Create a `ReadableCharacterChannel` from the `ReadableByteChannel`.\n-io:ReadableCharacterChannel | io:Error readableCharChannel = \n-        new io:ReadableCharacterChannel(readableChannel, \"UTF-8\");\n-```\n+The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the `CharacterChannel`. For example on `CharacterChannel` see [Read/Write Files Example](https://ballerina.io/v1-2/learn/by-example/character-io.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk2OTI5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MDozMlrOGGARgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MDozMlrOGGARgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0OTEyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If a `ReadableCharacterChannel` points to a JSON or XML source, it can be read and then written, directly into a variable of\n          \n          \n            \n            If a `ReadableCharacterChannel` points to a JSON or XML source, it can be read and then written directly into a variable of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408949120", "createdAt": "2020-04-15T15:50:32Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n writing, respectively.\n-### Byte channels\n-The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes.\n-\n-```ballerina\n-// Open a file in read mode.\n-io:ReadableByteChannel | io:Error readableChannel = io:openReadableFile(\"file.txt\");\n-\n-// Here is how 100 bytes are read from the channel.\n-if (readableChannel is io:ReadableByteChannel) {\n-    byte[] | io:Error result = readableChannel.read(100);\n-}\n-\n-// Open a file in write mode.\n-io:WritableByteChannel | io:Error writableByteChannel = io:openWritableFile(\"file.txt\");\n \n-// Write some content to the beginning of the file.\n-if (writableByteChannel is io:WritableByteChannel) {\n-    string someContent = \"some cont\";\n-    byte[] content = someContent.toBytes();\n-    int | io:Error writeResult = writableByteChannel.write(content, 0);\n-}\n+### Byte channels\n+The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on `ByteChannel` see [Byte I/O Example](https://ballerina.io/v1-2/learn/by-example/byte-io.html).\n \n-```\n ### Character channels\n-The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the\n-`CharacterChannel`.\n-\n- ```ballerina\n-// Create a `ReadableCharacterChannel` from the `ReadableByteChannel`.\n-io:ReadableCharacterChannel | io:Error readableCharChannel = \n-        new io:ReadableCharacterChannel(readableChannel, \"UTF-8\");\n-```\n+The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the `CharacterChannel`. For example on `CharacterChannel` see [Read/Write Files Example](https://ballerina.io/v1-2/learn/by-example/character-io.html).\n \n If a `ReadableCharacterChannel` points to a JSON or XML source, it can be read and then written, directly into a variable of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk3MDg0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MDo1NFrOGGASfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MDo1NFrOGGASfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0OTM3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the respective type. For examples on reading/writing JSON or XML sources see [JSON I/O](https://ballerina.io/v1-2/learn/by-example/json-io.html), and [XML I/O](https://ballerina.io/v1-2/learn/by-example/xml-io.html).\n          \n          \n            \n            the respective type. For examples on reading/writing JSON or XML sources, see the [JSON I/O Example](https://ballerina.io/learn/by-example/json-io.html) and [XML I/O Example](https://ballerina.io/learn/by-example/xml-io.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408949373", "createdAt": "2020-04-15T15:50:54Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n writing, respectively.\n-### Byte channels\n-The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes.\n-\n-```ballerina\n-// Open a file in read mode.\n-io:ReadableByteChannel | io:Error readableChannel = io:openReadableFile(\"file.txt\");\n-\n-// Here is how 100 bytes are read from the channel.\n-if (readableChannel is io:ReadableByteChannel) {\n-    byte[] | io:Error result = readableChannel.read(100);\n-}\n-\n-// Open a file in write mode.\n-io:WritableByteChannel | io:Error writableByteChannel = io:openWritableFile(\"file.txt\");\n \n-// Write some content to the beginning of the file.\n-if (writableByteChannel is io:WritableByteChannel) {\n-    string someContent = \"some cont\";\n-    byte[] content = someContent.toBytes();\n-    int | io:Error writeResult = writableByteChannel.write(content, 0);\n-}\n+### Byte channels\n+The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on `ByteChannel` see [Byte I/O Example](https://ballerina.io/v1-2/learn/by-example/byte-io.html).\n \n-```\n ### Character channels\n-The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the\n-`CharacterChannel`.\n-\n- ```ballerina\n-// Create a `ReadableCharacterChannel` from the `ReadableByteChannel`.\n-io:ReadableCharacterChannel | io:Error readableCharChannel = \n-        new io:ReadableCharacterChannel(readableChannel, \"UTF-8\");\n-```\n+The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the `CharacterChannel`. For example on `CharacterChannel` see [Read/Write Files Example](https://ballerina.io/v1-2/learn/by-example/character-io.html).\n \n If a `ReadableCharacterChannel` points to a JSON or XML source, it can be read and then written, directly into a variable of\n-the respective type.\n-\n-```ballerina\n-// Reading a JSON.\n-json | io:Error result = readableCharChannel.readJson();\n-```\n-```ballerina\n-// Reading an XML.\n-xml | io:Error result = readableCharChannel.readXml();\n-```\n-\n-```ballerina\n-// Create a `WritableCharacterChannel` from the `WritableByteChannel`.\n-io:WritableCharacterChannel | io:Error writableCharChannel = \n-            new io:WritableCharacterChannel(writableByteChannel, \"UTF-8\");\n-```\n-\n-```ballerina\n-// Writing a JSON.\n-json content = {fname: \"Jhon\", lname: \"Doe\", age: 40};\n-var writeResult = writableCharChannel.writeJson(content);\n-if (writeResult is io:Error) {\n-    return writeResult;\n-} else {\n-    io:println(\"JSON content written successfully.\");\n-}\n-```\n+the respective type. For examples on reading/writing JSON or XML sources see [JSON I/O](https://ballerina.io/v1-2/learn/by-example/json-io.html), and [XML I/O](https://ballerina.io/v1-2/learn/by-example/xml-io.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk3NDU3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MTo0NVrOGGAU0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MTo0NVrOGGAU0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0OTk3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Ballerina also supports I/O for delimited records. For example on reading on records in text file see [Record I/O](https://ballerina.io/v1-2/learn/by-example/record-io.html).\n          \n          \n            \n            Also, Ballerina supports I/O for delimited records. For an example on reading the records in a text file, see the [Record I/O Example](https://ballerina.io/learn/by-example/record-io.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408949970", "createdAt": "2020-04-15T15:51:45Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n writing, respectively.\n-### Byte channels\n-The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes.\n-\n-```ballerina\n-// Open a file in read mode.\n-io:ReadableByteChannel | io:Error readableChannel = io:openReadableFile(\"file.txt\");\n-\n-// Here is how 100 bytes are read from the channel.\n-if (readableChannel is io:ReadableByteChannel) {\n-    byte[] | io:Error result = readableChannel.read(100);\n-}\n-\n-// Open a file in write mode.\n-io:WritableByteChannel | io:Error writableByteChannel = io:openWritableFile(\"file.txt\");\n \n-// Write some content to the beginning of the file.\n-if (writableByteChannel is io:WritableByteChannel) {\n-    string someContent = \"some cont\";\n-    byte[] content = someContent.toBytes();\n-    int | io:Error writeResult = writableByteChannel.write(content, 0);\n-}\n+### Byte channels\n+The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on `ByteChannel` see [Byte I/O Example](https://ballerina.io/v1-2/learn/by-example/byte-io.html).\n \n-```\n ### Character channels\n-The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the\n-`CharacterChannel`.\n-\n- ```ballerina\n-// Create a `ReadableCharacterChannel` from the `ReadableByteChannel`.\n-io:ReadableCharacterChannel | io:Error readableCharChannel = \n-        new io:ReadableCharacterChannel(readableChannel, \"UTF-8\");\n-```\n+The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the `CharacterChannel`. For example on `CharacterChannel` see [Read/Write Files Example](https://ballerina.io/v1-2/learn/by-example/character-io.html).\n \n If a `ReadableCharacterChannel` points to a JSON or XML source, it can be read and then written, directly into a variable of\n-the respective type.\n-\n-```ballerina\n-// Reading a JSON.\n-json | io:Error result = readableCharChannel.readJson();\n-```\n-```ballerina\n-// Reading an XML.\n-xml | io:Error result = readableCharChannel.readXml();\n-```\n-\n-```ballerina\n-// Create a `WritableCharacterChannel` from the `WritableByteChannel`.\n-io:WritableCharacterChannel | io:Error writableCharChannel = \n-            new io:WritableCharacterChannel(writableByteChannel, \"UTF-8\");\n-```\n-\n-```ballerina\n-// Writing a JSON.\n-json content = {fname: \"Jhon\", lname: \"Doe\", age: 40};\n-var writeResult = writableCharChannel.writeJson(content);\n-if (writeResult is io:Error) {\n-    return writeResult;\n-} else {\n-    io:println(\"JSON content written successfully.\");\n-}\n-```\n+the respective type. For examples on reading/writing JSON or XML sources see [JSON I/O](https://ballerina.io/v1-2/learn/by-example/json-io.html), and [XML I/O](https://ballerina.io/v1-2/learn/by-example/xml-io.html).\n \n ### Record channels\n-Ballerina also supports I/O for delimited records.\n-\n-```ballerina\n-// Create a `ReadableTextRecordChannel` from the `ReadableCharacterChannel`.\n-// Records are separated using a new line.\n-// Fields of a record are separated using a comma.\n-var readableRecordsChannel = \n-        new io:ReadableTextRecordChannel(readableCharChannel, fs = \",\", rs = \"\\n\");\n-\n-// Read few records.\n-while (readableRecordsChannel.hasNext()) {\n-    var result = readableRecordsChannel.getNext();\n-    if (result is string[]) {\n-        io:println(result); // Retrieved a record.\n-    } else {\n-        return result; // An IO error occurred when reading the records.\n-    }\n-}\n-```\n-\n-A `.CSV` file can be read and written directly into a `CSVChannel`, as shown in this code snippet.\n \n-```ballerina\n-// Create a `ReadableCSVChannel` from the `ReadableCharacterChannel`.\n-var readableCSVChannel = new io:ReadableCSVChannel(readableCharChannel);\n-```\n+Ballerina also supports I/O for delimited records. For example on reading on records in text file see [Record I/O](https://ballerina.io/v1-2/learn/by-example/record-io.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk3OTAzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1Mjo0MlrOGGAXpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1Mjo0MlrOGGAXpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MDY5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A `.CSV` file can be read and written directly into a `CSVChannel`, as shown in this [CSV I/O Example](https://ballerina.io/v1-2/learn/by-example/csv-io.html).\n          \n          \n            \n            A `.CSV` file can be read and written directly into a `CSVChannel` as shown in this [CSV I/O Example](https://ballerina.io/learn/by-example/csv-io.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408950695", "createdAt": "2020-04-15T15:52:42Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n writing, respectively.\n-### Byte channels\n-The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes.\n-\n-```ballerina\n-// Open a file in read mode.\n-io:ReadableByteChannel | io:Error readableChannel = io:openReadableFile(\"file.txt\");\n-\n-// Here is how 100 bytes are read from the channel.\n-if (readableChannel is io:ReadableByteChannel) {\n-    byte[] | io:Error result = readableChannel.read(100);\n-}\n-\n-// Open a file in write mode.\n-io:WritableByteChannel | io:Error writableByteChannel = io:openWritableFile(\"file.txt\");\n \n-// Write some content to the beginning of the file.\n-if (writableByteChannel is io:WritableByteChannel) {\n-    string someContent = \"some cont\";\n-    byte[] content = someContent.toBytes();\n-    int | io:Error writeResult = writableByteChannel.write(content, 0);\n-}\n+### Byte channels\n+The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on `ByteChannel` see [Byte I/O Example](https://ballerina.io/v1-2/learn/by-example/byte-io.html).\n \n-```\n ### Character channels\n-The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the\n-`CharacterChannel`.\n-\n- ```ballerina\n-// Create a `ReadableCharacterChannel` from the `ReadableByteChannel`.\n-io:ReadableCharacterChannel | io:Error readableCharChannel = \n-        new io:ReadableCharacterChannel(readableChannel, \"UTF-8\");\n-```\n+The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the `CharacterChannel`. For example on `CharacterChannel` see [Read/Write Files Example](https://ballerina.io/v1-2/learn/by-example/character-io.html).\n \n If a `ReadableCharacterChannel` points to a JSON or XML source, it can be read and then written, directly into a variable of\n-the respective type.\n-\n-```ballerina\n-// Reading a JSON.\n-json | io:Error result = readableCharChannel.readJson();\n-```\n-```ballerina\n-// Reading an XML.\n-xml | io:Error result = readableCharChannel.readXml();\n-```\n-\n-```ballerina\n-// Create a `WritableCharacterChannel` from the `WritableByteChannel`.\n-io:WritableCharacterChannel | io:Error writableCharChannel = \n-            new io:WritableCharacterChannel(writableByteChannel, \"UTF-8\");\n-```\n-\n-```ballerina\n-// Writing a JSON.\n-json content = {fname: \"Jhon\", lname: \"Doe\", age: 40};\n-var writeResult = writableCharChannel.writeJson(content);\n-if (writeResult is io:Error) {\n-    return writeResult;\n-} else {\n-    io:println(\"JSON content written successfully.\");\n-}\n-```\n+the respective type. For examples on reading/writing JSON or XML sources see [JSON I/O](https://ballerina.io/v1-2/learn/by-example/json-io.html), and [XML I/O](https://ballerina.io/v1-2/learn/by-example/xml-io.html).\n \n ### Record channels\n-Ballerina also supports I/O for delimited records.\n-\n-```ballerina\n-// Create a `ReadableTextRecordChannel` from the `ReadableCharacterChannel`.\n-// Records are separated using a new line.\n-// Fields of a record are separated using a comma.\n-var readableRecordsChannel = \n-        new io:ReadableTextRecordChannel(readableCharChannel, fs = \",\", rs = \"\\n\");\n-\n-// Read few records.\n-while (readableRecordsChannel.hasNext()) {\n-    var result = readableRecordsChannel.getNext();\n-    if (result is string[]) {\n-        io:println(result); // Retrieved a record.\n-    } else {\n-        return result; // An IO error occurred when reading the records.\n-    }\n-}\n-```\n-\n-A `.CSV` file can be read and written directly into a `CSVChannel`, as shown in this code snippet.\n \n-```ballerina\n-// Create a `ReadableCSVChannel` from the `ReadableCharacterChannel`.\n-var readableCSVChannel = new io:ReadableCSVChannel(readableCharChannel);\n-```\n+Ballerina also supports I/O for delimited records. For example on reading on records in text file see [Record I/O](https://ballerina.io/v1-2/learn/by-example/record-io.html).\n \n-Records of the `.CSV` file can read directly into a table of a matching type.\n-\n- ```ballerina\n-// First let\u2019s define a type that matches a record in the CSV file.\n-type Employee record {\n-    string id;\n-    string name;\n-    float salary;\n-};\n-\n-// Now read the CSV file as a table of Employees and compute total salary.\n-float total = 0.0;\n-var tableResult = readableCSVChannel.getTable(Employee);\n-if (tableResult is table<Employee>) {\n-     foreach var x in tableResult {\n-       total = total + x.salary;\n-     }\n-     return total;\n-} else {\n-     return tableResult; //Return the error back to the caller\n-}\n-```\n+A `.CSV` file can be read and written directly into a `CSVChannel`, as shown in this [CSV I/O Example](https://ballerina.io/v1-2/learn/by-example/csv-io.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk3OTY0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1Mjo0OVrOGGAYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1Mjo0OVrOGGAYDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MDc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Ballerina supports performing data i/o operations\n          \n          \n            \n            Ballerina supports performing data i/o operations.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408950798", "createdAt": "2020-04-15T15:52:49Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n writing, respectively.\n-### Byte channels\n-The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes.\n-\n-```ballerina\n-// Open a file in read mode.\n-io:ReadableByteChannel | io:Error readableChannel = io:openReadableFile(\"file.txt\");\n-\n-// Here is how 100 bytes are read from the channel.\n-if (readableChannel is io:ReadableByteChannel) {\n-    byte[] | io:Error result = readableChannel.read(100);\n-}\n-\n-// Open a file in write mode.\n-io:WritableByteChannel | io:Error writableByteChannel = io:openWritableFile(\"file.txt\");\n \n-// Write some content to the beginning of the file.\n-if (writableByteChannel is io:WritableByteChannel) {\n-    string someContent = \"some cont\";\n-    byte[] content = someContent.toBytes();\n-    int | io:Error writeResult = writableByteChannel.write(content, 0);\n-}\n+### Byte channels\n+The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on `ByteChannel` see [Byte I/O Example](https://ballerina.io/v1-2/learn/by-example/byte-io.html).\n \n-```\n ### Character channels\n-The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the\n-`CharacterChannel`.\n-\n- ```ballerina\n-// Create a `ReadableCharacterChannel` from the `ReadableByteChannel`.\n-io:ReadableCharacterChannel | io:Error readableCharChannel = \n-        new io:ReadableCharacterChannel(readableChannel, \"UTF-8\");\n-```\n+The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the `CharacterChannel`. For example on `CharacterChannel` see [Read/Write Files Example](https://ballerina.io/v1-2/learn/by-example/character-io.html).\n \n If a `ReadableCharacterChannel` points to a JSON or XML source, it can be read and then written, directly into a variable of\n-the respective type.\n-\n-```ballerina\n-// Reading a JSON.\n-json | io:Error result = readableCharChannel.readJson();\n-```\n-```ballerina\n-// Reading an XML.\n-xml | io:Error result = readableCharChannel.readXml();\n-```\n-\n-```ballerina\n-// Create a `WritableCharacterChannel` from the `WritableByteChannel`.\n-io:WritableCharacterChannel | io:Error writableCharChannel = \n-            new io:WritableCharacterChannel(writableByteChannel, \"UTF-8\");\n-```\n-\n-```ballerina\n-// Writing a JSON.\n-json content = {fname: \"Jhon\", lname: \"Doe\", age: 40};\n-var writeResult = writableCharChannel.writeJson(content);\n-if (writeResult is io:Error) {\n-    return writeResult;\n-} else {\n-    io:println(\"JSON content written successfully.\");\n-}\n-```\n+the respective type. For examples on reading/writing JSON or XML sources see [JSON I/O](https://ballerina.io/v1-2/learn/by-example/json-io.html), and [XML I/O](https://ballerina.io/v1-2/learn/by-example/xml-io.html).\n \n ### Record channels\n-Ballerina also supports I/O for delimited records.\n-\n-```ballerina\n-// Create a `ReadableTextRecordChannel` from the `ReadableCharacterChannel`.\n-// Records are separated using a new line.\n-// Fields of a record are separated using a comma.\n-var readableRecordsChannel = \n-        new io:ReadableTextRecordChannel(readableCharChannel, fs = \",\", rs = \"\\n\");\n-\n-// Read few records.\n-while (readableRecordsChannel.hasNext()) {\n-    var result = readableRecordsChannel.getNext();\n-    if (result is string[]) {\n-        io:println(result); // Retrieved a record.\n-    } else {\n-        return result; // An IO error occurred when reading the records.\n-    }\n-}\n-```\n-\n-A `.CSV` file can be read and written directly into a `CSVChannel`, as shown in this code snippet.\n \n-```ballerina\n-// Create a `ReadableCSVChannel` from the `ReadableCharacterChannel`.\n-var readableCSVChannel = new io:ReadableCSVChannel(readableCharChannel);\n-```\n+Ballerina also supports I/O for delimited records. For example on reading on records in text file see [Record I/O](https://ballerina.io/v1-2/learn/by-example/record-io.html).\n \n-Records of the `.CSV` file can read directly into a table of a matching type.\n-\n- ```ballerina\n-// First let\u2019s define a type that matches a record in the CSV file.\n-type Employee record {\n-    string id;\n-    string name;\n-    float salary;\n-};\n-\n-// Now read the CSV file as a table of Employees and compute total salary.\n-float total = 0.0;\n-var tableResult = readableCSVChannel.getTable(Employee);\n-if (tableResult is table<Employee>) {\n-     foreach var x in tableResult {\n-       total = total + x.salary;\n-     }\n-     return total;\n-} else {\n-     return tableResult; //Return the error back to the caller\n-}\n-```\n+A `.CSV` file can be read and written directly into a `CSVChannel`, as shown in this [CSV I/O Example](https://ballerina.io/v1-2/learn/by-example/csv-io.html).\n \n ### Data Channels\n Ballerina supports performing data i/o operations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk4MDc4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MzowNFrOGGAYvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1MzowNFrOGGAYvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MDk3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Person object could be serialized into a file or a network socket as seen in [Data I/O Example](https://ballerina.io/v1-2/learn/by-example/data-io.html).\n          \n          \n            \n            A Person object could be serialized into a file or a network socket as seen in the [Data I/O Example](https://ballerina.io/learn/by-example/data-io.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408950974", "createdAt": "2020-04-15T15:53:04Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/Module.md", "diffHunk": "@@ -8,187 +8,25 @@ or non-blocking manner.\n ### Channels\n A channel represents an I/O source or sink of some bytes, characters, or records that are opened for reading, or\n writing, respectively.\n-### Byte channels\n-The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes.\n-\n-```ballerina\n-// Open a file in read mode.\n-io:ReadableByteChannel | io:Error readableChannel = io:openReadableFile(\"file.txt\");\n-\n-// Here is how 100 bytes are read from the channel.\n-if (readableChannel is io:ReadableByteChannel) {\n-    byte[] | io:Error result = readableChannel.read(100);\n-}\n-\n-// Open a file in write mode.\n-io:WritableByteChannel | io:Error writableByteChannel = io:openWritableFile(\"file.txt\");\n \n-// Write some content to the beginning of the file.\n-if (writableByteChannel is io:WritableByteChannel) {\n-    string someContent = \"some cont\";\n-    byte[] content = someContent.toBytes();\n-    int | io:Error writeResult = writableByteChannel.write(content, 0);\n-}\n+### Byte channels\n+The most primitive channel is the `ByteChannel` which reads and writes 8-bit bytes. For an example on `ByteChannel` see [Byte I/O Example](https://ballerina.io/v1-2/learn/by-example/byte-io.html).\n \n-```\n ### Character channels\n-The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the\n-`CharacterChannel`.\n-\n- ```ballerina\n-// Create a `ReadableCharacterChannel` from the `ReadableByteChannel`.\n-io:ReadableCharacterChannel | io:Error readableCharChannel = \n-        new io:ReadableCharacterChannel(readableChannel, \"UTF-8\");\n-```\n+The `CharacterChannel` is used to read and write characters. The charset encoding is specified when creating the `CharacterChannel`. For example on `CharacterChannel` see [Read/Write Files Example](https://ballerina.io/v1-2/learn/by-example/character-io.html).\n \n If a `ReadableCharacterChannel` points to a JSON or XML source, it can be read and then written, directly into a variable of\n-the respective type.\n-\n-```ballerina\n-// Reading a JSON.\n-json | io:Error result = readableCharChannel.readJson();\n-```\n-```ballerina\n-// Reading an XML.\n-xml | io:Error result = readableCharChannel.readXml();\n-```\n-\n-```ballerina\n-// Create a `WritableCharacterChannel` from the `WritableByteChannel`.\n-io:WritableCharacterChannel | io:Error writableCharChannel = \n-            new io:WritableCharacterChannel(writableByteChannel, \"UTF-8\");\n-```\n-\n-```ballerina\n-// Writing a JSON.\n-json content = {fname: \"Jhon\", lname: \"Doe\", age: 40};\n-var writeResult = writableCharChannel.writeJson(content);\n-if (writeResult is io:Error) {\n-    return writeResult;\n-} else {\n-    io:println(\"JSON content written successfully.\");\n-}\n-```\n+the respective type. For examples on reading/writing JSON or XML sources see [JSON I/O](https://ballerina.io/v1-2/learn/by-example/json-io.html), and [XML I/O](https://ballerina.io/v1-2/learn/by-example/xml-io.html).\n \n ### Record channels\n-Ballerina also supports I/O for delimited records.\n-\n-```ballerina\n-// Create a `ReadableTextRecordChannel` from the `ReadableCharacterChannel`.\n-// Records are separated using a new line.\n-// Fields of a record are separated using a comma.\n-var readableRecordsChannel = \n-        new io:ReadableTextRecordChannel(readableCharChannel, fs = \",\", rs = \"\\n\");\n-\n-// Read few records.\n-while (readableRecordsChannel.hasNext()) {\n-    var result = readableRecordsChannel.getNext();\n-    if (result is string[]) {\n-        io:println(result); // Retrieved a record.\n-    } else {\n-        return result; // An IO error occurred when reading the records.\n-    }\n-}\n-```\n-\n-A `.CSV` file can be read and written directly into a `CSVChannel`, as shown in this code snippet.\n \n-```ballerina\n-// Create a `ReadableCSVChannel` from the `ReadableCharacterChannel`.\n-var readableCSVChannel = new io:ReadableCSVChannel(readableCharChannel);\n-```\n+Ballerina also supports I/O for delimited records. For example on reading on records in text file see [Record I/O](https://ballerina.io/v1-2/learn/by-example/record-io.html).\n \n-Records of the `.CSV` file can read directly into a table of a matching type.\n-\n- ```ballerina\n-// First let\u2019s define a type that matches a record in the CSV file.\n-type Employee record {\n-    string id;\n-    string name;\n-    float salary;\n-};\n-\n-// Now read the CSV file as a table of Employees and compute total salary.\n-float total = 0.0;\n-var tableResult = readableCSVChannel.getTable(Employee);\n-if (tableResult is table<Employee>) {\n-     foreach var x in tableResult {\n-       total = total + x.salary;\n-     }\n-     return total;\n-} else {\n-     return tableResult; //Return the error back to the caller\n-}\n-```\n+A `.CSV` file can be read and written directly into a `CSVChannel`, as shown in this [CSV I/O Example](https://ballerina.io/v1-2/learn/by-example/csv-io.html).\n \n ### Data Channels\n Ballerina supports performing data i/o operations\n \n-Person object could be serialized into a file or a network socket in the following manner.\n-\n-```ballerina\n-public type Person record {|\n-    string name;\n-    int age;\n-    float income;\n-    boolean isMarried;\n-|};\n+Person object could be serialized into a file or a network socket as seen in [Data I/O Example](https://ballerina.io/v1-2/learn/by-example/data-io.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk4Njg0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NDoxNlrOGGAcag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NDoxNlrOGGAcag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MTkxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves a ReadableByteChannel from a given file path.\n          \n          \n            \n            # Retrieves a `ReadableByteChannel` from a given file path.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408951914", "createdAt": "2020-04-15T15:54:16Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -17,9 +17,12 @@\n import ballerina/java;\n \n # Retrieves a ReadableByteChannel from a given file path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk4OTczOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NDo1M1rOGGAeRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NDo1M1rOGGAeRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MjM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - ByteChannel representation of the file resource, or else `Error` if any error occurred\n          \n          \n            \n            # + return - The `ByteChannel` representation of the file resource or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408952388", "createdAt": "2020-04-15T15:54:53Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -17,9 +17,12 @@\n import ballerina/java;\n \n # Retrieves a ReadableByteChannel from a given file path.\n+#```ballerina\n+# io:ReadableByteChannel readableFieldResult = check io:openReadableFile(\"./files/sample.txt\");\n+#```\n #\n # + path - Relative/absolute path string to locate the file\n-# + return - ByteChannel representation of the file resource or `Error` if any error occurred\n+# + return - ByteChannel representation of the file resource, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk5MDQ3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NTowMlrOGGAetg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NTowMlrOGGAetg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MjUwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves a WritableByteChannel from a given file path.\n          \n          \n            \n            # Retrieves a `WritableByteChannel` from a given file path.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408952502", "createdAt": "2020-04-15T15:55:02Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -30,10 +33,13 @@ function openReadableFileExtern(@untainted handle path) returns @tainted Readabl\n } external;\n \n # Retrieves a WritableByteChannel from a given file path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk5MTYxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NToxNlrOGGAfaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NToxNlrOGGAfaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MjY4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + append - Whether to append to end of file.\n          \n          \n            \n            # + append - Whether to append to the end of file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408952683", "createdAt": "2020-04-15T15:55:16Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -30,10 +33,13 @@ function openReadableFileExtern(@untainted handle path) returns @tainted Readabl\n } external;\n \n # Retrieves a WritableByteChannel from a given file path.\n+#```ballerina\n+# io:WritableByteChannel writableFileResult = check io:openWritableFile(\"./files/sampleResponse.txt\");\n+# ```\n #\n # + path - Relative/absolute path string to locate the file\n-# + append - Append to end of file.\n-# + return - ByteChannel representation of the file resource or `Error` if any error occurred\n+# + append - Whether to append to end of file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk5MzQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NTo0M1rOGGAgjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NTo0M1rOGGAgjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1Mjk3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - ByteChannel representation of the file resource, or else `Error` if any error occurred\n          \n          \n            \n            # + return - The `ByteChannel` representation of the file resource or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nNeed to specify the error type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408952975", "createdAt": "2020-04-15T15:55:43Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -30,10 +33,13 @@ function openReadableFileExtern(@untainted handle path) returns @tainted Readabl\n } external;\n \n # Retrieves a WritableByteChannel from a given file path.\n+#```ballerina\n+# io:WritableByteChannel writableFileResult = check io:openWritableFile(\"./files/sampleResponse.txt\");\n+# ```\n #\n # + path - Relative/absolute path string to locate the file\n-# + append - Append to end of file.\n-# + return - ByteChannel representation of the file resource or `Error` if any error occurred\n+# + append - Whether to append to end of file.\n+# + return - ByteChannel representation of the file resource, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk5OTgxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NzoxN1rOGGAkwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NzoxN1rOGGAkwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NDA1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Creates an in-memory channel which will reference stream of bytes.\n          \n          \n            \n            # Creates an in-memory channel, which will be a reference stream of bytes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408954050", "createdAt": "2020-04-15T15:57:17Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -46,9 +52,12 @@ function openWritableFileExtern(@untainted handle path, boolean append)\n } external;\n \n # Creates an in-memory channel which will reference stream of bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwMDM5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NzoyNlrOGGAlJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1NzoyNlrOGGAlJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NDE0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + content - Content which should be exposed as channel\n          \n          \n            \n            # + content - Content, which should be exposed as a channel", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408954148", "createdAt": "2020-04-15T15:57:26Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -46,9 +52,12 @@ function openWritableFileExtern(@untainted handle path, boolean append)\n } external;\n \n # Creates an in-memory channel which will reference stream of bytes.\n+# ```ballerina\n+# var byteChannel = io:createReadableChannel(content);\n+# ```\n #\n # + content - Content which should be exposed as channel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwMjAyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1Nzo1M1rOGGAmVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1Nzo1M1rOGGAmVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NDQ1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - ByteChannel representation to read the memory content, or else `Error` if any error occurred\n          \n          \n            \n            # + return - The `ByteChannel` representation to read the memory content or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408954452", "createdAt": "2020-04-15T15:57:53Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -46,9 +52,12 @@ function openWritableFileExtern(@untainted handle path, boolean append)\n } external;\n \n # Creates an in-memory channel which will reference stream of bytes.\n+# ```ballerina\n+# var byteChannel = io:createReadableChannel(content);\n+# ```\n #\n # + content - Content which should be exposed as channel\n-# + return - ByteChannel representation to read the memory content or `Error` if any error occurred\n+# + return - ByteChannel representation to read the memory content, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwMjUzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODowMVrOGGAmog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODowMVrOGGAmog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NDUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves a readable CSV channel from a give file path.\n          \n          \n            \n            # Retrieves a readable CSV channel from a given file path.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408954530", "createdAt": "2020-04-15T15:58:01Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -59,12 +68,15 @@ function createReadableChannelExtern(byte[] content) returns ReadableByteChannel\n } external;\n \n # Retrieves a readable CSV channel from a give file path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwMzExOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODowOVrOGGAnAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODowOVrOGGAnAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NDYyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - File path which describes the location of the CSV\n          \n          \n            \n            # + path - File path, which describes the location of the CSV", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408954626", "createdAt": "2020-04-15T15:58:09Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -59,12 +68,15 @@ function createReadableChannelExtern(byte[] content) returns ReadableByteChannel\n } external;\n \n # Retrieves a readable CSV channel from a give file path.\n+# ```ballerina\n+# io:ReadableCSVChannel rCsvChannel = check io:openReadableCsvFile(srcFileName);\n+# ```\n #\n # + path - File path which describes the location of the CSV", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwMzcyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODoxNlrOGGAnaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODoxNlrOGGAnaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NDcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + fieldSeparator - CSV record separator (i.e comma or tab)\n          \n          \n            \n            # + fieldSeparator - CSV record separator (i.e., comma or tab)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408954728", "createdAt": "2020-04-15T15:58:16Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -59,12 +68,15 @@ function createReadableChannelExtern(byte[] content) returns ReadableByteChannel\n } external;\n \n # Retrieves a readable CSV channel from a give file path.\n+# ```ballerina\n+# io:ReadableCSVChannel rCsvChannel = check io:openReadableCsvFile(srcFileName);\n+# ```\n #\n # + path - File path which describes the location of the CSV\n # + fieldSeparator - CSV record separator (i.e comma or tab)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwNTQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODozN1rOGGAofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODozN1rOGGAofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTAwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + charset - Encoding characters in the file represents\n          \n          \n            \n            # + charset - Representation of the encoding characters in the file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408955005", "createdAt": "2020-04-15T15:58:37Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -59,12 +68,15 @@ function createReadableChannelExtern(byte[] content) returns ReadableByteChannel\n } external;\n \n # Retrieves a readable CSV channel from a give file path.\n+# ```ballerina\n+# io:ReadableCSVChannel rCsvChannel = check io:openReadableCsvFile(srcFileName);\n+# ```\n #\n # + path - File path which describes the location of the CSV\n # + fieldSeparator - CSV record separator (i.e comma or tab)\n # + charset - Encoding characters in the file represents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwNjA0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODo0NFrOGGAo0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1ODo0NFrOGGAo0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTA5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + skipHeaders - Number of headers which should be skipped\n          \n          \n            \n            # + skipHeaders - Number of headers, which should be skipped", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408955091", "createdAt": "2020-04-15T15:58:44Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -59,12 +68,15 @@ function createReadableChannelExtern(byte[] content) returns ReadableByteChannel\n } external;\n \n # Retrieves a readable CSV channel from a give file path.\n+# ```ballerina\n+# io:ReadableCSVChannel rCsvChannel = check io:openReadableCsvFile(srcFileName);\n+# ```\n #\n # + path - File path which describes the location of the CSV\n # + fieldSeparator - CSV record separator (i.e comma or tab)\n # + charset - Encoding characters in the file represents\n # + skipHeaders - Number of headers which should be skipped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwNzQ3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OTowMFrOGGAppA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OTowMFrOGGAppA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTMwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - ReadableCSVChannel which could be used to iterate through the CSV records, or else `Error` if any error occurred.\n          \n          \n            \n            # + return - The `ReadableCSVChannel`, which could be used to iterate through the CSV records or else an `Error` if any error occurred.\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408955300", "createdAt": "2020-04-15T15:59:00Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -59,12 +68,15 @@ function createReadableChannelExtern(byte[] content) returns ReadableByteChannel\n } external;\n \n # Retrieves a readable CSV channel from a give file path.\n+# ```ballerina\n+# io:ReadableCSVChannel rCsvChannel = check io:openReadableCsvFile(srcFileName);\n+# ```\n #\n # + path - File path which describes the location of the CSV\n # + fieldSeparator - CSV record separator (i.e comma or tab)\n # + charset - Encoding characters in the file represents\n # + skipHeaders - Number of headers which should be skipped\n-# + return - ReadableCSVChannel which could be used to iterate through the CSV records\n+# + return - ReadableCSVChannel which could be used to iterate through the CSV records, or else `Error` if any error occurred.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwODA4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OTowOFrOGGAqBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OTowOFrOGGAqBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTM5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves a writable CSV channel from a give file path.\n          \n          \n            \n            # Retrieves a writable CSV channel from a given file path.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408955398", "createdAt": "2020-04-15T15:59:08Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -75,12 +87,15 @@ public function openReadableCsvFile(@untainted string path,\n }\n \n # Retrieves a writable CSV channel from a give file path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwODU3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OToxNlrOGGAqUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OToxNlrOGGAqUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - File path which describes the location of the CSV\n          \n          \n            \n            # + path - File path, which describes the location of the CSV", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408955474", "createdAt": "2020-04-15T15:59:16Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -75,12 +87,15 @@ public function openReadableCsvFile(@untainted string path,\n }\n \n # Retrieves a writable CSV channel from a give file path.\n-#\n+# ```ballerina\n+# io:WritableCSVChannel wCsvChannel = check io:openWritableCsvFile(srcFileName);\n+# ```\n+# \n # + path - File path which describes the location of the CSV", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAwOTAyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OToyMlrOGGAqqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OToyMlrOGGAqqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTU2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + fieldSeparator - CSV record separator (i.e comma or tab)\n          \n          \n            \n            # + fieldSeparator - CSV record separator (i.e., comma or tab)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408955560", "createdAt": "2020-04-15T15:59:22Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -75,12 +87,15 @@ public function openReadableCsvFile(@untainted string path,\n }\n \n # Retrieves a writable CSV channel from a give file path.\n-#\n+# ```ballerina\n+# io:WritableCSVChannel wCsvChannel = check io:openWritableCsvFile(srcFileName);\n+# ```\n+# \n # + path - File path which describes the location of the CSV\n # + fieldSeparator - CSV record separator (i.e comma or tab)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAxMDA4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OTozOFrOGGArZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OTozOFrOGGArZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTc0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + charset - Encoding characters in the file represents\n          \n          \n            \n            # + charset - Representation of the encoding characters in the file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408955749", "createdAt": "2020-04-15T15:59:38Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -75,12 +87,15 @@ public function openReadableCsvFile(@untainted string path,\n }\n \n # Retrieves a writable CSV channel from a give file path.\n-#\n+# ```ballerina\n+# io:WritableCSVChannel wCsvChannel = check io:openWritableCsvFile(srcFileName);\n+# ```\n+# \n # + path - File path which describes the location of the CSV\n # + fieldSeparator - CSV record separator (i.e comma or tab)\n # + charset - Encoding characters in the file represents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAxMDU2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OTo0NVrOGGArtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OTo0NVrOGGArtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + skipHeaders - Number of headers which should be skipped\n          \n          \n            \n            # + skipHeaders - Number of headers, which should be skipped", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408955831", "createdAt": "2020-04-15T15:59:45Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -75,12 +87,15 @@ public function openReadableCsvFile(@untainted string path,\n }\n \n # Retrieves a writable CSV channel from a give file path.\n-#\n+# ```ballerina\n+# io:WritableCSVChannel wCsvChannel = check io:openWritableCsvFile(srcFileName);\n+# ```\n+# \n # + path - File path which describes the location of the CSV\n # + fieldSeparator - CSV record separator (i.e comma or tab)\n # + charset - Encoding characters in the file represents\n # + skipHeaders - Number of headers which should be skipped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAxMzM0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMDoyNVrOGGAtkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMDoyNVrOGGAtkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NjMwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - WritableCSVChannel which could be used to write CSV records, or else `Error` if any error occurred\n          \n          \n            \n            # + return - The `WritableCSVChannel`, which could be used to write the CSV records or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408956305", "createdAt": "2020-04-15T16:00:25Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/open.bal", "diffHunk": "@@ -75,12 +87,15 @@ public function openReadableCsvFile(@untainted string path,\n }\n \n # Retrieves a writable CSV channel from a give file path.\n-#\n+# ```ballerina\n+# io:WritableCSVChannel wCsvChannel = check io:openWritableCsvFile(srcFileName);\n+# ```\n+# \n # + path - File path which describes the location of the CSV\n # + fieldSeparator - CSV record separator (i.e comma or tab)\n # + charset - Encoding characters in the file represents\n # + skipHeaders - Number of headers which should be skipped\n-# + return - WritableCSVChannel which could be used to write CSV records or `Error` if any error occurred\n+# + return - WritableCSVChannel which could be used to write CSV records, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyNjExOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/print.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMzo0MFrOGGA2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMzo0MFrOGGA2Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODUxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + args   - Arguments referenced by the format specifiers in the format string\n          \n          \n            \n            # + args   - Arguments referred by the format specifiers in the format string", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408958511", "createdAt": "2020-04-15T16:03:40Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/print.bal", "diffHunk": "@@ -46,9 +54,13 @@ public function println((any|error)... values) = @java:Method {\n #\n # s - string (This specifier is applicable for any of the supported types in Ballerina.\n #             These values will be converted to their string representation.)\n+# \n+# ```ballerina\n+# string s8 = io:sprintf(\"%s scored %d for %s and has an average of %.2f.\", name, marks, subjects[0], average);\n+# ```\n #\n # + format - A format string\n-# + args   - Arguments referenced by the format specifiers in the format string.\n+# + args   - Arguments referenced by the format specifiers in the format string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyNjczOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/print.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMzo0OVrOGGA2mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMzo0OVrOGGA2mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODYxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Formatted string\n          \n          \n            \n            # + return - The formatted string", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408958618", "createdAt": "2020-04-15T16:03:49Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/print.bal", "diffHunk": "@@ -46,9 +54,13 @@ public function println((any|error)... values) = @java:Method {\n #\n # s - string (This specifier is applicable for any of the supported types in Ballerina.\n #             These values will be converted to their string representation.)\n+# \n+# ```ballerina\n+# string s8 = io:sprintf(\"%s scored %d for %s and has an average of %.2f.\", name, marks, subjects[0], average);\n+# ```\n #\n # + format - A format string\n-# + args   - Arguments referenced by the format specifiers in the format string.\n+# + args   - Arguments referenced by the format specifiers in the format string\n # + return - Formatted string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyNzIwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/read.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMzo1NlrOGGA26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowMzo1NlrOGGA26A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODY5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves the input read from STDIN.\n          \n          \n            \n            # Retrieves the input read from the STDIN.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408958696", "createdAt": "2020-04-15T16:03:56Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/read.bal", "diffHunk": "@@ -16,10 +16,13 @@\n \n import ballerina/java;\n \n-# Returns the input read from STDIN.\n+# Retrieves the input read from STDIN.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyODg3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoyMFrOGGA37w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoyMFrOGGA37w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n          \n          \n            \n            # Source bytes from a given input/output resource. The number of bytes returned will be < 0 if the file reached its end.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408958959", "createdAt": "2020-04-15T16:04:20Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyOTcyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDozNlrOGGA4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDozNlrOGGA4fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1OTEwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n          \n          \n            \n            # This operation will be asynchronous in which the total number of required bytes might not be returned at a given", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408959101", "createdAt": "2020-04-15T16:04:36Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAzMDg0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDo1M1rOGGA5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDo1M1rOGGA5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1OTI4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # time. `io:EofError` will return once channel reach to it end.\n          \n          \n            \n            # time. An `io:EofError` will return once the channel reaches the end.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408959285", "createdAt": "2020-04-15T16:04:53Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n+# time. `io:EofError` will return once channel reach to it end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAzMTc5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNTowNVrOGGA5xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNTowNVrOGGA5xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1OTQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + nBytes - Positive integer. Represents the number of bytes which should be read\n          \n          \n            \n            # + nBytes - A positive integer. Represents the number of bytes, which should be read", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408959430", "createdAt": "2020-04-15T16:05:05Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n+# time. `io:EofError` will return once channel reach to it end.\n+# ```ballerina\n+# byte[]|io:Error result = readableByteChannel.read(1000);\n+# ```\n+# \n+# + nBytes - Positive integer. Represents the number of bytes which should be read", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAzNTA2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNjowM1rOGGA7_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNjowM1rOGGA7_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1OTk5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Content, the number of bytes read or `EofError` once channel reach to it end, or else `Error`\n          \n          \n            \n            # + return - Content (the number of bytes) read, an `EofError` once the channel reaches the end, or else an `Error`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408959998", "createdAt": "2020-04-15T16:06:03Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n+# time. `io:EofError` will return once channel reach to it end.\n+# ```ballerina\n+# byte[]|io:Error result = readableByteChannel.read(1000);\n+# ```\n+# \n+# + nBytes - Positive integer. Represents the number of bytes which should be read\n+# + return - Content, the number of bytes read or `EofError` once channel reach to it end, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAzNTgzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNjoxNlrOGGA8jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNjoxNlrOGGA8jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDE0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Encodes a given ReadableByteChannel with Base64 encoding scheme.\n          \n          \n            \n            # Encodes a given `ReadableByteChannel` using the Base64 encoding scheme.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408960141", "createdAt": "2020-04-15T16:06:16Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n+# time. `io:EofError` will return once channel reach to it end.\n+# ```ballerina\n+# byte[]|io:Error result = readableByteChannel.read(1000);\n+# ```\n+# \n+# + nBytes - Positive integer. Represents the number of bytes which should be read\n+# + return - Content, the number of bytes read or `EofError` once channel reach to it end, or else `Error`\n     public function read(@untainted int nBytes) returns @tainted byte[]|Error {\n         return byteReadExtern(self, nBytes);\n     }\n \n-    # Encodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return an encoded ReadableByteChannel or `Error` if any error occurred\n+# Encodes a given ReadableByteChannel with Base64 encoding scheme.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAzNzc5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNjo0NlrOGGA92g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNjo0NlrOGGA92g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An encoded ReadableByteChannel, or else `Error`\n          \n          \n            \n            # + return - An encoded `ReadableByteChannel` or else an `Error`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408960474", "createdAt": "2020-04-15T16:06:46Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n+# time. `io:EofError` will return once channel reach to it end.\n+# ```ballerina\n+# byte[]|io:Error result = readableByteChannel.read(1000);\n+# ```\n+# \n+# + nBytes - Positive integer. Represents the number of bytes which should be read\n+# + return - Content, the number of bytes read or `EofError` once channel reach to it end, or else `Error`\n     public function read(@untainted int nBytes) returns @tainted byte[]|Error {\n         return byteReadExtern(self, nBytes);\n     }\n \n-    # Encodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return an encoded ReadableByteChannel or `Error` if any error occurred\n+# Encodes a given ReadableByteChannel with Base64 encoding scheme.\n+# ```ballerina\n+# ReadableByteChannel|Error encodedChannel = readableByteChannel.base64Encode();\n+# ```\n+# \n+# + return - An encoded ReadableByteChannel, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAzODU5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNjo1OFrOGGA-Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNjo1OFrOGGA-Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDYwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Decodes a given ReadableByteChannel with Base64 encoding scheme.\n          \n          \n            \n            # Decodes a given `ReadableByteChannel` using the Base64 encoding scheme.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408960602", "createdAt": "2020-04-15T16:06:58Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n+# time. `io:EofError` will return once channel reach to it end.\n+# ```ballerina\n+# byte[]|io:Error result = readableByteChannel.read(1000);\n+# ```\n+# \n+# + nBytes - Positive integer. Represents the number of bytes which should be read\n+# + return - Content, the number of bytes read or `EofError` once channel reach to it end, or else `Error`\n     public function read(@untainted int nBytes) returns @tainted byte[]|Error {\n         return byteReadExtern(self, nBytes);\n     }\n \n-    # Encodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return an encoded ReadableByteChannel or `Error` if any error occurred\n+# Encodes a given ReadableByteChannel with Base64 encoding scheme.\n+# ```ballerina\n+# ReadableByteChannel|Error encodedChannel = readableByteChannel.base64Encode();\n+# ```\n+# \n+# + return - An encoded ReadableByteChannel, or else `Error`\n     public function base64Encode() returns ReadableByteChannel|Error {\n         return base64EncodeExtern(self);\n     }\n \n-    # Decodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return a decoded ReadableByteChannel or `Error` if any error occurred\n+# Decodes a given ReadableByteChannel with Base64 encoding scheme.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAzOTIxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzoxMFrOGGA-wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzoxMFrOGGA-wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A decoded ReadableByteChannel, or else `Error`\n          \n          \n            \n            # + return - A decoded `ReadableByteChannel` or else an `Error`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408960705", "createdAt": "2020-04-15T16:07:10Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n+# time. `io:EofError` will return once channel reach to it end.\n+# ```ballerina\n+# byte[]|io:Error result = readableByteChannel.read(1000);\n+# ```\n+# \n+# + nBytes - Positive integer. Represents the number of bytes which should be read\n+# + return - Content, the number of bytes read or `EofError` once channel reach to it end, or else `Error`\n     public function read(@untainted int nBytes) returns @tainted byte[]|Error {\n         return byteReadExtern(self, nBytes);\n     }\n \n-    # Encodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return an encoded ReadableByteChannel or `Error` if any error occurred\n+# Encodes a given ReadableByteChannel with Base64 encoding scheme.\n+# ```ballerina\n+# ReadableByteChannel|Error encodedChannel = readableByteChannel.base64Encode();\n+# ```\n+# \n+# + return - An encoded ReadableByteChannel, or else `Error`\n     public function base64Encode() returns ReadableByteChannel|Error {\n         return base64EncodeExtern(self);\n     }\n \n-    # Decodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return a decoded ReadableByteChannel or `Error` if any error occurred\n+# Decodes a given ReadableByteChannel with Base64 encoding scheme.\n+# ```ballerina\n+# ReadableByteChannel|Error encodedChannel = readableByteChannel.base64Decode();\n+# ```\n+# \n+# + return - A decoded ReadableByteChannel, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA0MDcwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzoyNlrOGGA_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzoyNlrOGGA_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDkyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Closes a given ReadableByteChannel.\n          \n          \n            \n            # Closes a given `ReadableByteChannel`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408960921", "createdAt": "2020-04-15T16:07:26Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n+# time. `io:EofError` will return once channel reach to it end.\n+# ```ballerina\n+# byte[]|io:Error result = readableByteChannel.read(1000);\n+# ```\n+# \n+# + nBytes - Positive integer. Represents the number of bytes which should be read\n+# + return - Content, the number of bytes read or `EofError` once channel reach to it end, or else `Error`\n     public function read(@untainted int nBytes) returns @tainted byte[]|Error {\n         return byteReadExtern(self, nBytes);\n     }\n \n-    # Encodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return an encoded ReadableByteChannel or `Error` if any error occurred\n+# Encodes a given ReadableByteChannel with Base64 encoding scheme.\n+# ```ballerina\n+# ReadableByteChannel|Error encodedChannel = readableByteChannel.base64Encode();\n+# ```\n+# \n+# + return - An encoded ReadableByteChannel, or else `Error`\n     public function base64Encode() returns ReadableByteChannel|Error {\n         return base64EncodeExtern(self);\n     }\n \n-    # Decodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return a decoded ReadableByteChannel or `Error` if any error occurred\n+# Decodes a given ReadableByteChannel with Base64 encoding scheme.\n+# ```ballerina\n+# ReadableByteChannel|Error encodedChannel = readableByteChannel.base64Decode();\n+# ```\n+# \n+# + return - A decoded ReadableByteChannel, or else `Error`\n     public function base64Decode() returns ReadableByteChannel|Error {\n         return base64DecodeExtern(self);\n     }\n \n-    # Closes a given ReadableByteChannel.\n-    #\n-    # + return - Will return () if there's no error\n+# Closes a given ReadableByteChannel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA0MTQwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzozNVrOGGBACw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzozNVrOGGBACw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Will return () if there's no error\n          \n          \n            \n            # + return - Will return `()` if there is no error", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408961035", "createdAt": "2020-04-15T16:07:35Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_byte_channel.bal", "diffHunk": "@@ -22,39 +22,45 @@ public type ReadableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Source bytes from a given input/output resource.\n-    #\n-    # Number of bytes returned will be < 0 if the file reached its end.\n-    #\n-    # This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n-    # time.\n-    #\n-    # `io:EofError` will return once channel reach to it end.\n-    #\n-    # + nBytes - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content, the number of bytes read or `EofError` once channel reach to it end.\n-    #            `Error` if any error occurred.\n+# Source bytes from a given input/output resource.Number of bytes returned will be < 0 if the file reached its end.\n+# This operation will be asynchronous, where the total number of required bytes might not be returned at a given\n+# time. `io:EofError` will return once channel reach to it end.\n+# ```ballerina\n+# byte[]|io:Error result = readableByteChannel.read(1000);\n+# ```\n+# \n+# + nBytes - Positive integer. Represents the number of bytes which should be read\n+# + return - Content, the number of bytes read or `EofError` once channel reach to it end, or else `Error`\n     public function read(@untainted int nBytes) returns @tainted byte[]|Error {\n         return byteReadExtern(self, nBytes);\n     }\n \n-    # Encodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return an encoded ReadableByteChannel or `Error` if any error occurred\n+# Encodes a given ReadableByteChannel with Base64 encoding scheme.\n+# ```ballerina\n+# ReadableByteChannel|Error encodedChannel = readableByteChannel.base64Encode();\n+# ```\n+# \n+# + return - An encoded ReadableByteChannel, or else `Error`\n     public function base64Encode() returns ReadableByteChannel|Error {\n         return base64EncodeExtern(self);\n     }\n \n-    # Decodes a given ReadableByteChannel with Base64 encoding scheme.\n-    #\n-    # + return - Return a decoded ReadableByteChannel or `Error` if any error occurred\n+# Decodes a given ReadableByteChannel with Base64 encoding scheme.\n+# ```ballerina\n+# ReadableByteChannel|Error encodedChannel = readableByteChannel.base64Decode();\n+# ```\n+# \n+# + return - A decoded ReadableByteChannel, or else `Error`\n     public function base64Decode() returns ReadableByteChannel|Error {\n         return base64DecodeExtern(self);\n     }\n \n-    # Closes a given ReadableByteChannel.\n-    #\n-    # + return - Will return () if there's no error\n+# Closes a given ReadableByteChannel.\n+# ```ballerina\n+# io:Error? err = readableByteChannel.close();\n+# ```\n+#\n+# + return - Will return () if there's no error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA0MjY3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzo1MVrOGGBAyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzo1MVrOGGBAyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTIyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Constructs a ReadableCharacterChannel from a given ReadableByteChannel and Charset.\n          \n          \n            \n                # Constructs a `ReadableCharacterChannel` from a given `ReadableByteChannel` and `Charset`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408961226", "createdAt": "2020-04-15T16:07:51Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -23,7 +23,7 @@ public type ReadableCharacterChannel object {\n     private string charset;\n \n     # Constructs a ReadableCharacterChannel from a given ReadableByteChannel and Charset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA0MzIzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowODowMVrOGGBBLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowODowMVrOGGBBLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTMyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + byteChannel - ReadableByteChannel, which would be used to read the characters\n          \n          \n            \n                # + byteChannel - The `ReadableByteChannel`, which would be used to read the characters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408961324", "createdAt": "2020-04-15T16:08:01Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -23,7 +23,7 @@ public type ReadableCharacterChannel object {\n     private string charset;\n \n     # Constructs a ReadableCharacterChannel from a given ReadableByteChannel and Charset.\n-\n+    # \n     # + byteChannel - ReadableByteChannel, which would be used to read the characters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA0NDQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowODoxOVrOGGBB-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowODoxOVrOGGBB-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTUyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + charset - Character-Set which would be used to encode/decode the given bytes to characters\n          \n          \n            \n                # + charset - The character set, which would be used to encode/decode the given bytes to characters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408961529", "createdAt": "2020-04-15T16:08:19Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -23,7 +23,7 @@ public type ReadableCharacterChannel object {\n     private string charset;\n \n     # Constructs a ReadableCharacterChannel from a given ReadableByteChannel and Charset.\n-\n+    # \n     # + byteChannel - ReadableByteChannel, which would be used to read the characters\n     # + charset - Character-Set which would be used to encode/decode the given bytes to characters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1MDMyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowOTozOVrOGGBFdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowOTozOVrOGGBFdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjQyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads a given number of characters. This will attempt to read up to `numberOfChars` characters of the channel.\n          \n          \n            \n            # Reads a given number of characters. This will attempt to read up to the `numberOfChars` characters of the channel.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408962422", "createdAt": "2020-04-15T16:09:39Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -32,11 +32,14 @@ public type ReadableCharacterChannel object {\n         initReadableCharacterChannel(self, byteChannel, java:fromString(charset));\n     }\n \n-    # Reads a given number of characters. This will attempt to read up to `numberOfChars` characters of the channel.\n-    # `io:EofError` will return once the channel reaches the end.\n-    #\n-    # + numberOfChars - Number of characters, which should be read\n-    # + return - Content, which is read or `EofError` once channel reaches the end. `Error` if any error occurred.\n+# Reads a given number of characters. This will attempt to read up to `numberOfChars` characters of the channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1MTAzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowOTo0OFrOGGBF3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowOTo0OFrOGGBF3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjUyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `io:EofError` will return once the channel reaches the end.\n          \n          \n            \n            # An `io:EofError` will return once the channel reaches the end.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408962525", "createdAt": "2020-04-15T16:09:48Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -32,11 +32,14 @@ public type ReadableCharacterChannel object {\n         initReadableCharacterChannel(self, byteChannel, java:fromString(charset));\n     }\n \n-    # Reads a given number of characters. This will attempt to read up to `numberOfChars` characters of the channel.\n-    # `io:EofError` will return once the channel reaches the end.\n-    #\n-    # + numberOfChars - Number of characters, which should be read\n-    # + return - Content, which is read or `EofError` once channel reaches the end. `Error` if any error occurred.\n+# Reads a given number of characters. This will attempt to read up to `numberOfChars` characters of the channel.\n+# `io:EofError` will return once the channel reaches the end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1Njk3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMTowNFrOGGBJeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMTowNFrOGGBJeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MzQ0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Content, which is read or `EofError` once channel reaches the end, or else `Error`\n          \n          \n            \n            # + return - Content, which is read, an `EofError` once the channel reaches the end, or else an `Error`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408963448", "createdAt": "2020-04-15T16:11:04Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -32,11 +32,14 @@ public type ReadableCharacterChannel object {\n         initReadableCharacterChannel(self, byteChannel, java:fromString(charset));\n     }\n \n-    # Reads a given number of characters. This will attempt to read up to `numberOfChars` characters of the channel.\n-    # `io:EofError` will return once the channel reaches the end.\n-    #\n-    # + numberOfChars - Number of characters, which should be read\n-    # + return - Content, which is read or `EofError` once channel reaches the end. `Error` if any error occurred.\n+# Reads a given number of characters. This will attempt to read up to `numberOfChars` characters of the channel.\n+# `io:EofError` will return once the channel reaches the end.\n+# ```ballerina\n+# string|io:Error result = readableCharChannel.read(1000);\n+# ```\n+#\n+# + numberOfChars - Number of characters, which should be read\n+# + return - Content, which is read or `EofError` once channel reaches the end, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1ODA1OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMToxNlrOGGBKCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMToxNlrOGGBKCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MzU5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The read JSON string, or else `Error`\n          \n          \n            \n            # + return - The read JSON string or else an `Error`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408963595", "createdAt": "2020-04-15T16:11:16Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -46,23 +49,32 @@ public type ReadableCharacterChannel object {\n         }\n     }\n \n-    # Reads a JSON from the given channel.\n-    #\n-    # + return - the read JSON string or `Error` if any error occurred\n+# Reads a JSON from the given channel.\n+# ```ballerina\n+# json|io:Error result = readableCharChannel.readJson();\n+# ```\n+#\n+# + return - The read JSON string, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1ODgwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMToyNlrOGGBKgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMToyNlrOGGBKgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MzcxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The read XML, or else `Error`\n          \n          \n            \n            # + return - The read XML or else an `Error`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408963715", "createdAt": "2020-04-15T16:11:26Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -46,23 +49,32 @@ public type ReadableCharacterChannel object {\n         }\n     }\n \n-    # Reads a JSON from the given channel.\n-    #\n-    # + return - the read JSON string or `Error` if any error occurred\n+# Reads a JSON from the given channel.\n+# ```ballerina\n+# json|io:Error result = readableCharChannel.readJson();\n+# ```\n+#\n+# + return - The read JSON string, or else `Error`\n     public function readJson() returns @tainted json|Error {\n         return readJsonExtern(self);\n     }\n \n-    # Reads an XML from the given channel.\n-    #\n-    # + return - The read XML or `Error` if any error occurred\n+# Reads an XML from the given channel.\n+# ```ballerina\n+# json|io:Error result = readableCharChannel.readXml();\n+# ```\n+#\n+# + return - The read XML, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1OTgyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMTo0M1rOGGBLKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMTo0M1rOGGBLKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2Mzg4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + nHeaders - Number of headers which should be skipped\n          \n          \n            \n            # + nHeaders - The number of headers, which should be skipped", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408963881", "createdAt": "2020-04-15T16:11:43Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "diffHunk": "@@ -38,9 +38,12 @@ public type ReadableCSVChannel object {\n         self.skipHeaders(nHeaders);\n     }\n \n-    # Skips the given number of headers.\n-    #\n-    # + nHeaders - Number of headers which should be skipped\n+# Skips the given number of headers.\n+# ```ballerina\n+# readableCSVChannel.skipHeaders(5);\n+# ```\n+#\n+# + nHeaders - Number of headers which should be skipped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2MDMzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMTo1MFrOGGBLcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMTo1MFrOGGBLcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2Mzk1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Indicates whether there's another record which could be read.\n          \n          \n            \n            # Indicates whether there's another record, which could be read.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408963955", "createdAt": "2020-04-15T16:11:50Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "diffHunk": "@@ -49,9 +52,12 @@ public type ReadableCSVChannel object {\n         }\n     }\n \n-    # Indicates whether there's another record which could be read.\n-    #\n-    # + return - True if there's a record\n+# Indicates whether there's another record which could be read.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2MTQzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMjowNFrOGGBMHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMjowNFrOGGBMHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NDEyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - List of fields in the CSV, or else `Error`\n          \n          \n            \n            # + return - List of fields in the CSV or else an `Error`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408964124", "createdAt": "2020-04-15T16:12:04Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "diffHunk": "@@ -62,9 +68,12 @@ public type ReadableCSVChannel object {\n         }\n     }\n \n-    # Gets the next record from the CSV file.\n-    #\n-    # + return - List of fields in the CSV or `Error` if any error occurred\n+# Gets the next record from the CSV file.\n+# ```ballerina\n+# string[]|io:Error record = readableCSVChannel.getNext();\n+# ```\n+#\n+# + return - List of fields in the CSV, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2MjEwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMjoxMlrOGGBMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMjoxMlrOGGBMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NDIzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Closes a given CSVChannel.\n          \n          \n            \n            # Closes a given `CSVChannel`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408964235", "createdAt": "2020-04-15T16:12:12Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "diffHunk": "@@ -73,9 +82,12 @@ public type ReadableCSVChannel object {\n         return ();\n     }\n \n-    # Closes a given CSVChannel.\n-    #\n-    # + return - Returns `Error` if any error occurred\n+# Closes a given CSVChannel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2MjYxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMjoxOFrOGGBM3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowODoyNVrOGGDXqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NDMxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `Error` if any error occurred\n          \n          \n            \n            # + return - `Error` if any error occurred\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408964317", "createdAt": "2020-04-15T16:12:18Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "diffHunk": "@@ -73,9 +82,12 @@ public type ReadableCSVChannel object {\n         return ();\n     }\n \n-    # Closes a given CSVChannel.\n-    #\n-    # + return - Returns `Error` if any error occurred\n+# Closes a given CSVChannel.\n+# ```ballerina\n+# io:Error? err = readableCSVChannel.close();\n+# ```\n+# \n+# + return - `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTg0OA==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408999848", "createdAt": "2020-04-15T17:08:25Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "diffHunk": "@@ -73,9 +82,12 @@ public type ReadableCSVChannel object {\n         return ();\n     }\n \n-    # Closes a given CSVChannel.\n-    #\n-    # + return - Returns `Error` if any error occurred\n+# Closes a given CSVChannel.\n+# ```ballerina\n+# io:Error? err = readableCSVChannel.close();\n+# ```\n+# \n+# + return - `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NDMxNw=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2MzIwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMjoyOFrOGGBNOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMjoyOFrOGGBNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NDQwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns a table which corresponds to the CSV records.\n          \n          \n            \n            # Returns a table, which corresponds to the CSV records.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408964409", "createdAt": "2020-04-15T16:12:28Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "diffHunk": "@@ -84,10 +96,13 @@ public type ReadableCSVChannel object {\n         return ();\n     }\n \n-    # Returns a table which corresponds to the CSV records.\n-    #\n-    # + structType - The object the CSV records should be deserialized\n-    # + return - Table which represents CSV records or `Error` if any error occurred\n+# Returns a table which corresponds to the CSV records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2NDUxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMjo0NlrOGGBOCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMjo0NlrOGGBOCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NDYxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + structType - The object the CSV records should be deserialized\n          \n          \n            \n            # + structType - The object in which the CSV records should be deserialized", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408964617", "createdAt": "2020-04-15T16:12:46Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "diffHunk": "@@ -84,10 +96,13 @@ public type ReadableCSVChannel object {\n         return ();\n     }\n \n-    # Returns a table which corresponds to the CSV records.\n-    #\n-    # + structType - The object the CSV records should be deserialized\n-    # + return - Table which represents CSV records or `Error` if any error occurred\n+# Returns a table which corresponds to the CSV records.\n+# ```ballerina\n+# var tblResult = readableCSVChannel.getTable(Employee);\n+# ```\n+#\n+# + structType - The object the CSV records should be deserialized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2NTUzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzowMVrOGGBOnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzowMVrOGGBOnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NDc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Table which represents CSV records, or else `Error`\n          \n          \n            \n            # + return - Table, which represents the CSV records or else an `Error`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408964764", "createdAt": "2020-04-15T16:13:01Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_csv_channel.bal", "diffHunk": "@@ -84,10 +96,13 @@ public type ReadableCSVChannel object {\n         return ();\n     }\n \n-    # Returns a table which corresponds to the CSV records.\n-    #\n-    # + structType - The object the CSV records should be deserialized\n-    # + return - Table which represents CSV records or `Error` if any error occurred\n+# Returns a table which corresponds to the CSV records.\n+# ```ballerina\n+# var tblResult = readableCSVChannel.getTable(Employee);\n+# ```\n+#\n+# + structType - The object the CSV records should be deserialized\n+# + return - Table which represents CSV records, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2NjA4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzowOVrOGGBO7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzowOVrOGGBO7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NDg0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #Initializes data channel.\n          \n          \n            \n                #Initializes the data channel.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408964845", "createdAt": "2020-04-15T16:13:09Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -20,7 +20,7 @@ import ballerina/java;\n public type ReadableDataChannel object {\n \n     #Initializes data channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2Njc5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzoxOFrOGGBPXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzoxOFrOGGBPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NDk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # +byteChannel - channel which would represent the source to read/write data\n          \n          \n            \n                # +byteChannel - The channel, which would represent the source to read/write data", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408964959", "createdAt": "2020-04-15T16:13:18Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -20,7 +20,7 @@ import ballerina/java;\n public type ReadableDataChannel object {\n \n     #Initializes data channel.\n-\n+    # \n     # +byteChannel - channel which would represent the source to read/write data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2ODE1OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzozNFrOGGBQLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzozNFrOGGBQLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NTE2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - value of the integer which is read, or else `Error` if any error occurred\n          \n          \n            \n            # + return - value of the integer, which is read or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408965166", "createdAt": "2020-04-15T16:13:34Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA2ODkwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzo0N1rOGGBQwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMzo0N1rOGGBQwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NTMxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - value of the integer which is read, or else `Error` if any error occurred\n          \n          \n            \n            # + return - value of the integer, which is read or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408965312", "createdAt": "2020-04-15T16:13:47Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA3NzY1OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNjowMlrOGGBWXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNjowMlrOGGBWXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2Njc0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - value of the integer which is read, or else `Error` if any error occurred\n          \n          \n            \n            # + return - value of the integer, which is read or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408966749", "createdAt": "2020-04-15T16:16:02Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA3ODQyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNjoxM1rOGGBWzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNjoxM1rOGGBWzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2Njg2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads 32 bit float.\n          \n          \n            \n            # Reads a 32 bit float.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408966862", "createdAt": "2020-04-15T16:16:13Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA3ODk5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNjoyM1rOGGBXNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowODozOVrOGGDYMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2Njk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - value of the float which is read, or else `Error` if any error occurred\n          \n          \n            \n            # + return - value of the float which is read, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408966966", "createdAt": "2020-04-15T16:16:23Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTk4Nw==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408999987", "createdAt": "2020-04-15T17:08:39Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2Njk2Ng=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA3OTU4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNjozM1rOGGBXkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNjozM1rOGGBXkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzA1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads 64 bit float.\n          \n          \n            \n            # Reads a 64 bit float.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408967059", "createdAt": "2020-04-15T16:16:33Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4MDQ2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNjo0NVrOGGBYHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowODo1MFrOGGDYxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzE5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - value of the float which is read, or else `Error` if any error occurred\n          \n          \n            \n            # + return - value of the float which is read, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408967197", "createdAt": "2020-04-15T16:16:45Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat64();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDEzMg==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409000132", "createdAt": "2020-04-15T17:08:50Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat64();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzE5Nw=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4MTg0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzowN1rOGGBY7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzowN1rOGGBY7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzQwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads 1 byte and convert it's value to boolean.\n          \n          \n            \n            # Reads a byte and convert its value to boolean.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408967406", "createdAt": "2020-04-15T16:17:07Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat64();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat64() returns float|Error {\n         return readFloat64Extern(self);\n     }\n \n-    # Reads 1 byte and convert it's value to boolean.\n-\n-    # + return - boolean value which is read or `Error` if any error occurred\n+# Reads 1 byte and convert it's value to boolean.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4MjMzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzoxM1rOGGBZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowOToxMlrOGGDZ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzQ3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - boolean value which is read, or else `Error` if any error occurred\n          \n          \n            \n            # + return - boolean value which is read, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408967477", "createdAt": "2020-04-15T16:17:13Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat64();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat64() returns float|Error {\n         return readFloat64Extern(self);\n     }\n \n-    # Reads 1 byte and convert it's value to boolean.\n-\n-    # + return - boolean value which is read or `Error` if any error occurred\n+# Reads 1 byte and convert it's value to boolean.\n+# ```ballerina\n+# boolean|io:Error result = dataChannel.readBool();\n+# ```\n+# \n+# + return - boolean value which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDQwMw==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409000403", "createdAt": "2020-04-15T17:09:12Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat64();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat64() returns float|Error {\n         return readFloat64Extern(self);\n     }\n \n-    # Reads 1 byte and convert it's value to boolean.\n-\n-    # + return - boolean value which is read or `Error` if any error occurred\n+# Reads 1 byte and convert it's value to boolean.\n+# ```ballerina\n+# boolean|io:Error result = dataChannel.readBool();\n+# ```\n+# \n+# + return - boolean value which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzQ3Nw=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4MzA2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzoyNlrOGGBZpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzoyNlrOGGBZpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzU5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads string value represented through the provided number of bytes.\n          \n          \n            \n            # Reads the string value represented through the provided number of bytes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408967590", "createdAt": "2020-04-15T16:17:26Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat64();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat64() returns float|Error {\n         return readFloat64Extern(self);\n     }\n \n-    # Reads 1 byte and convert it's value to boolean.\n-\n-    # + return - boolean value which is read or `Error` if any error occurred\n+# Reads 1 byte and convert it's value to boolean.\n+# ```ballerina\n+# boolean|io:Error result = dataChannel.readBool();\n+# ```\n+# \n+# + return - boolean value which is read, or else `Error` if any error occurred\n     public function readBool() returns boolean|Error {\n         return readBoolExtern(self);\n     }\n \n-    # Reads string value represented through the provided number of bytes.\n-\n-    # + nBytes - specifies the number of bytes which represents the string\n-    # + encoding - specifies the char-set encoding of the string\n-    # + return - value of the string or an error\n+# Reads string value represented through the provided number of bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4MzUzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzozNFrOGGBZ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzozNFrOGGBZ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzY3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + nBytes - Specifies the number of bytes which represents the string\n          \n          \n            \n            # + nBytes - Specifies the number of bytes, which represents the string", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408967673", "createdAt": "2020-04-15T16:17:34Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat64();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat64() returns float|Error {\n         return readFloat64Extern(self);\n     }\n \n-    # Reads 1 byte and convert it's value to boolean.\n-\n-    # + return - boolean value which is read or `Error` if any error occurred\n+# Reads 1 byte and convert it's value to boolean.\n+# ```ballerina\n+# boolean|io:Error result = dataChannel.readBool();\n+# ```\n+# \n+# + return - boolean value which is read, or else `Error` if any error occurred\n     public function readBool() returns boolean|Error {\n         return readBoolExtern(self);\n     }\n \n-    # Reads string value represented through the provided number of bytes.\n-\n-    # + nBytes - specifies the number of bytes which represents the string\n-    # + encoding - specifies the char-set encoding of the string\n-    # + return - value of the string or an error\n+# Reads string value represented through the provided number of bytes.\n+# ```ballerina\n+# string|io:Error string = dataChannel.readString(10, \"UTF-8\");\n+# ```\n+# \n+# + nBytes - Specifies the number of bytes which represents the string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4Mzk4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzo0MVrOGGBaQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowOToyM1rOGGDaUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2Nzc0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - value of the string, or else `Error` if any error occurred\n          \n          \n            \n            # + return - value of the string, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408967745", "createdAt": "2020-04-15T16:17:41Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat64();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat64() returns float|Error {\n         return readFloat64Extern(self);\n     }\n \n-    # Reads 1 byte and convert it's value to boolean.\n-\n-    # + return - boolean value which is read or `Error` if any error occurred\n+# Reads 1 byte and convert it's value to boolean.\n+# ```ballerina\n+# boolean|io:Error result = dataChannel.readBool();\n+# ```\n+# \n+# + return - boolean value which is read, or else `Error` if any error occurred\n     public function readBool() returns boolean|Error {\n         return readBoolExtern(self);\n     }\n \n-    # Reads string value represented through the provided number of bytes.\n-\n-    # + nBytes - specifies the number of bytes which represents the string\n-    # + encoding - specifies the char-set encoding of the string\n-    # + return - value of the string or an error\n+# Reads string value represented through the provided number of bytes.\n+# ```ballerina\n+# string|io:Error string = dataChannel.readString(10, \"UTF-8\");\n+# ```\n+# \n+# + nBytes - Specifies the number of bytes which represents the string\n+# + encoding - Specifies the char-set encoding of the string\n+# + return - value of the string, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDUzMA==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409000530", "createdAt": "2020-04-15T17:09:23Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -29,53 +29,74 @@ public type ReadableDataChannel object {\n         initReadableDataChannel(self, byteChannel, java:fromString(temp));\n     }\n \n-    #Reads a 16 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 16 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt16();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt16() returns int|Error {\n         return readInt16Extern(self);\n     }\n \n-    # Reads a 32 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 32 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt32();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt32() returns int|Error {\n         return readInt32Extern(self);\n     }\n \n-    # Reads a 64 bit integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a 64 bit integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readInt64();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readInt64() returns int|Error {\n         return readInt64Extern(self);\n     }\n \n-    # Reads 32 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 32 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat32();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat32() returns float|Error {\n         return readFloat32Extern(self);\n     }\n \n-    # Reads 64 bit float.\n-\n-    # + return - value of the float which is read or `Error` if any error occurred\n+# Reads 64 bit float.\n+# ```ballerina\n+# float|io:Error result = dataChannel.readFloat64();\n+# ```\n+# \n+# + return - value of the float which is read, or else `Error` if any error occurred\n     public function readFloat64() returns float|Error {\n         return readFloat64Extern(self);\n     }\n \n-    # Reads 1 byte and convert it's value to boolean.\n-\n-    # + return - boolean value which is read or `Error` if any error occurred\n+# Reads 1 byte and convert it's value to boolean.\n+# ```ballerina\n+# boolean|io:Error result = dataChannel.readBool();\n+# ```\n+# \n+# + return - boolean value which is read, or else `Error` if any error occurred\n     public function readBool() returns boolean|Error {\n         return readBoolExtern(self);\n     }\n \n-    # Reads string value represented through the provided number of bytes.\n-\n-    # + nBytes - specifies the number of bytes which represents the string\n-    # + encoding - specifies the char-set encoding of the string\n-    # + return - value of the string or an error\n+# Reads string value represented through the provided number of bytes.\n+# ```ballerina\n+# string|io:Error string = dataChannel.readString(10, \"UTF-8\");\n+# ```\n+# \n+# + nBytes - Specifies the number of bytes which represents the string\n+# + encoding - Specifies the char-set encoding of the string\n+# + return - value of the string, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2Nzc0NQ=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4NDYzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxNzo0OFrOGGBanw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowOTozMlrOGGDaoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzgzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - value of the integer which is read, or else `Error` if any error occurred\n          \n          \n            \n            # + return - value of the integer which is read, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408967839", "createdAt": "2020-04-15T16:17:48Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -85,16 +106,21 @@ public type ReadableDataChannel object {\n         }\n     }\n \n-    # Reads a variable length integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a variable length integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readVarInt();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDYwOA==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409000608", "createdAt": "2020-04-15T17:09:32Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -85,16 +106,21 @@ public type ReadableDataChannel object {\n         }\n     }\n \n-    # Reads a variable length integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a variable length integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readVarInt();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NzgzOQ=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4NTc0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxODowNVrOGGBbWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxODowNVrOGGBbWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODAyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - nill if the channel is closed successfully, or else `Error` if any error occurred\n          \n          \n            \n            # + return - '()' if the channel is closed successfully or else an `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408968025", "createdAt": "2020-04-15T16:18:05Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_data_channel.bal", "diffHunk": "@@ -85,16 +106,21 @@ public type ReadableDataChannel object {\n         }\n     }\n \n-    # Reads a variable length integer.\n-\n-    # + return - value of the integer which is read or `Error` if any error occurred\n+# Reads a variable length integer.\n+# ```ballerina\n+# int|io:Error result = dataChannel.readVarInt();\n+# ```\n+# \n+# + return - value of the integer which is read, or else `Error` if any error occurred\n     public function readVarInt() returns int|Error {\n         return readVarIntExtern(self);\n     }\n \n-    # Closes the data channel.\n-\n-    # + return - nill if the channel is closed successfully or `Error` if any error occurred\n+# Closes the data channel.\n+# ```ballerina\n+# io:Error? err = dataChannel.close();\n+# ```\n+# + return - nill if the channel is closed successfully, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4NjUyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_record_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxODoxOFrOGGBb5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxODoxOFrOGGBb5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODE2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Get next record from the input/output resource.\n          \n          \n            \n            # Get the next record from the input/output resource.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408968164", "createdAt": "2020-04-15T16:18:18Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_record_channel.bal", "diffHunk": "@@ -36,16 +36,22 @@ public type ReadableTextRecordChannel object {\n         initReadableTextRecordChannel(self, charChannel, java:fromString(fs), java:fromString(rs), java:fromString(fmt));\n     }\n \n-    # Checks whether there's a record left to be read.\n-    #\n-    # + return - True if there's a record left to be read\n+# Checks whether there's a record left to be read.\n+# ```ballerina\n+# boolean hasNext = readableRecChannel.hasNext();\n+# ```\n+#\n+# + return - True if there's a record left to be read\n     public function hasNext() returns boolean {\n         return hasNextExtern(self);\n     }\n \n-    # Get next record from the input/output resource.\n-    #\n-    # + return - Set of fields included in the record or `Error` if any error occurred\n+# Get next record from the input/output resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4NjkzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_record_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxODoyNVrOGGBcKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowOTo0MlrOGGDbAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODIzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Set of fields included in the record, or else `Error`\n          \n          \n            \n            # + return - Set of fields included in the record, or else `Error`\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408968235", "createdAt": "2020-04-15T16:18:25Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_record_channel.bal", "diffHunk": "@@ -36,16 +36,22 @@ public type ReadableTextRecordChannel object {\n         initReadableTextRecordChannel(self, charChannel, java:fromString(fs), java:fromString(rs), java:fromString(fmt));\n     }\n \n-    # Checks whether there's a record left to be read.\n-    #\n-    # + return - True if there's a record left to be read\n+# Checks whether there's a record left to be read.\n+# ```ballerina\n+# boolean hasNext = readableRecChannel.hasNext();\n+# ```\n+#\n+# + return - True if there's a record left to be read\n     public function hasNext() returns boolean {\n         return hasNextExtern(self);\n     }\n \n-    # Get next record from the input/output resource.\n-    #\n-    # + return - Set of fields included in the record or `Error` if any error occurred\n+# Get next record from the input/output resource.\n+# ```ballerina\n+# string[]|io:Error record = readableRecChannel.getNext();\n+# ```\n+#\n+# + return - Set of fields included in the record, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDcwNQ==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409000705", "createdAt": "2020-04-15T17:09:42Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_record_channel.bal", "diffHunk": "@@ -36,16 +36,22 @@ public type ReadableTextRecordChannel object {\n         initReadableTextRecordChannel(self, charChannel, java:fromString(fs), java:fromString(rs), java:fromString(fmt));\n     }\n \n-    # Checks whether there's a record left to be read.\n-    #\n-    # + return - True if there's a record left to be read\n+# Checks whether there's a record left to be read.\n+# ```ballerina\n+# boolean hasNext = readableRecChannel.hasNext();\n+# ```\n+#\n+# + return - True if there's a record left to be read\n     public function hasNext() returns boolean {\n         return hasNextExtern(self);\n     }\n \n-    # Get next record from the input/output resource.\n-    #\n-    # + return - Set of fields included in the record or `Error` if any error occurred\n+# Get next record from the input/output resource.\n+# ```ballerina\n+# string[]|io:Error record = readableRecChannel.getNext();\n+# ```\n+#\n+# + return - Set of fields included in the record, or else `Error`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODIzNQ=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4ODA5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/readable_record_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxODo0MVrOGGBc5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowOTo1OFrOGGDbxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `Error` if the record channel could not be closed properly\n          \n          \n            \n            # + return - An `Error` if the record channel could not be closed properly\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408968420", "createdAt": "2020-04-15T16:18:41Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_record_channel.bal", "diffHunk": "@@ -59,9 +65,12 @@ public type ReadableTextRecordChannel object {\n         }\n     }\n \n-    # Closes a given record channel.\n-    #\n-    # + return - An `Error` if the record channel could not be closed properly\n+# Closes a given record channel.\n+# ```ballerina\n+# io:Error err = readableRecChannel.close();\n+# ```\n+#\n+# + return - An `Error` if the record channel could not be closed properly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDkwMQ==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409000901", "createdAt": "2020-04-15T17:09:58Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/readable_record_channel.bal", "diffHunk": "@@ -59,9 +65,12 @@ public type ReadableTextRecordChannel object {\n         }\n     }\n \n-    # Closes a given record channel.\n-    #\n-    # + return - An `Error` if the record channel could not be closed properly\n+# Closes a given record channel.\n+# ```ballerina\n+# io:Error err = readableRecChannel.close();\n+# ```\n+#\n+# + return - An `Error` if the record channel could not be closed properly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODQyMA=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA4ODUxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxODo0OFrOGGBdLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxODo0OFrOGGBdLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODQ5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + content - The content which should be written\n          \n          \n            \n                # + content - The content, which should be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408968492", "createdAt": "2020-04-15T16:18:48Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -20,17 +20,21 @@ public type StringReader object {\n \n     # Constructs a channel to read string.\n     #\n-    # + content - content which should be written\n-    # + encoding - encoding of the characters of the content\n+    # + content - The content which should be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5MDUxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxOToxMlrOGGBedA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxOToxMlrOGGBedA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODgyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads string as json from reader.\n          \n          \n            \n            # Reads string as JSON using the reader.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408968820", "createdAt": "2020-04-15T16:19:12Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -20,17 +20,21 @@ public type StringReader object {\n \n     # Constructs a channel to read string.\n     #\n-    # + content - content which should be written\n-    # + encoding - encoding of the characters of the content\n+    # + content - The content which should be written\n+    # + encoding - Encoding of the characters of the content\n     public function __init(string content, public string encoding = \"UTF-8\") {\n         byte[] contentBytes = content.toBytes();\n         ReadableByteChannel byteChannel = checkpanic createReadableChannel(contentBytes);\n         self.charChannel = new ReadableCharacterChannel(byteChannel, encoding);\n     }\n \n-    # Reads string as json from reader.\n-    #\n-    # + return - json or `Error` if any error occurred\n+# Reads string as json from reader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5MDkzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxOToyMFrOGGBevg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMDowOFrOGGDcJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODg5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - JSON, or else `Error` if any error occurred\n          \n          \n            \n            # + return - JSON, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408968894", "createdAt": "2020-04-15T16:19:20Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -20,17 +20,21 @@ public type StringReader object {\n \n     # Constructs a channel to read string.\n     #\n-    # + content - content which should be written\n-    # + encoding - encoding of the characters of the content\n+    # + content - The content which should be written\n+    # + encoding - Encoding of the characters of the content\n     public function __init(string content, public string encoding = \"UTF-8\") {\n         byte[] contentBytes = content.toBytes();\n         ReadableByteChannel byteChannel = checkpanic createReadableChannel(contentBytes);\n         self.charChannel = new ReadableCharacterChannel(byteChannel, encoding);\n     }\n \n-    # Reads string as json from reader.\n-    #\n-    # + return - json or `Error` if any error occurred\n+# Reads string as json from reader.\n+# ```ballerina\n+# io:StringReader reader = new(\"{\\\"name\\\": \\\"Alice\\\"}\");\n+# json|io:Error? person = reader.readJson();\n+# ```\n+#\n+# + return - JSON, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDk5Ng==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409000996", "createdAt": "2020-04-15T17:10:08Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -20,17 +20,21 @@ public type StringReader object {\n \n     # Constructs a channel to read string.\n     #\n-    # + content - content which should be written\n-    # + encoding - encoding of the characters of the content\n+    # + content - The content which should be written\n+    # + encoding - Encoding of the characters of the content\n     public function __init(string content, public string encoding = \"UTF-8\") {\n         byte[] contentBytes = content.toBytes();\n         ReadableByteChannel byteChannel = checkpanic createReadableChannel(contentBytes);\n         self.charChannel = new ReadableCharacterChannel(byteChannel, encoding);\n     }\n \n-    # Reads string as json from reader.\n-    #\n-    # + return - json or `Error` if any error occurred\n+# Reads string as json from reader.\n+# ```ballerina\n+# io:StringReader reader = new(\"{\\\"name\\\": \\\"Alice\\\"}\");\n+# json|io:Error? person = reader.readJson();\n+# ```\n+#\n+# + return - JSON, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODg5NA=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5MjQyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxOTo0NlrOGGBf1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxOTo0NlrOGGBf1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTE3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads string as XML from reader.\n          \n          \n            \n            # Reads a string as XML using the reader.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408969172", "createdAt": "2020-04-15T16:19:46Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -39,9 +43,13 @@ public type StringReader object {\n         return ();\n     }\n \n-    # Reads string as XML from reader\n-    #\n-    # + return -\n+# Reads string as XML from reader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5Mjg5OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxOTo1MlrOGGBgDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMDoxOVrOGGDclQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTIzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - XML, or else `Error` if any error occurred\n          \n          \n            \n            # + return - XML, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408969231", "createdAt": "2020-04-15T16:19:52Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -39,9 +43,13 @@ public type StringReader object {\n         return ();\n     }\n \n-    # Reads string as XML from reader\n-    #\n-    # + return -\n+# Reads string as XML from reader.\n+# ```ballerina\n+# io:StringReader reader = new(\"<Person><Name>Alice</Name></Person>\");\n+# xml|io:Error? person = reader.readXml();\n+# ```\n+# \n+# + return - XML, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTEwOQ==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409001109", "createdAt": "2020-04-15T17:10:19Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -39,9 +43,13 @@ public type StringReader object {\n         return ();\n     }\n \n-    # Reads string as XML from reader\n-    #\n-    # + return -\n+# Reads string as XML from reader.\n+# ```ballerina\n+# io:StringReader reader = new(\"<Person><Name>Alice</Name></Person>\");\n+# xml|io:Error? person = reader.readXml();\n+# ```\n+# \n+# + return - XML, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTIzMQ=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5MzMyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDowMFrOGGBgTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDowMFrOGGBgTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTI5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads characters from the given string.\n          \n          \n            \n            # Reads the characters from the given string.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408969294", "createdAt": "2020-04-15T16:20:00Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -50,10 +58,14 @@ public type StringReader object {\n         return ();\n     }\n \n-    # Reads characters from the given string.\n-    #\n-    # + nCharacters - read specific number of characters\n-    # + return - string or `Error` if any error occurred\n+# Reads characters from the given string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5MzczOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDowNlrOGGBgjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMDoyOVrOGGDdCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTM1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - String, or else `Error` if any error occurred\n          \n          \n            \n            # + return - String, or else `Error` if any error occurred\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408969356", "createdAt": "2020-04-15T16:20:06Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -50,10 +58,14 @@ public type StringReader object {\n         return ();\n     }\n \n-    # Reads characters from the given string.\n-    #\n-    # + nCharacters - read specific number of characters\n-    # + return - string or `Error` if any error occurred\n+# Reads characters from the given string.\n+# ```ballerina\n+# io:StringReader reader = new(\"Some text\");\n+# string|io:Error? person = reader.readChar(4);\n+# ```\n+#\n+# + nCharacters - Number of characters to be read\n+# + return - String, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTIyNg==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409001226", "createdAt": "2020-04-15T17:10:29Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -50,10 +58,14 @@ public type StringReader object {\n         return ();\n     }\n \n-    # Reads characters from the given string.\n-    #\n-    # + nCharacters - read specific number of characters\n-    # + return - string or `Error` if any error occurred\n+# Reads characters from the given string.\n+# ```ballerina\n+# io:StringReader reader = new(\"Some text\");\n+# string|io:Error? person = reader.readChar(4);\n+# ```\n+#\n+# + nCharacters - Number of characters to be read\n+# + return - String, or else `Error` if any error occurred", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTM1Ng=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5NDE2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDoxM1rOGGBg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDoxM1rOGGBg0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTQyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Closes reader.\n          \n          \n            \n            # Closes the reader.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408969427", "createdAt": "2020-04-15T16:20:13Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -62,9 +74,12 @@ public type StringReader object {\n         return ();\n     }\n \n-    # Closes reader.\n-    #\n-    # + return - An `Error` if could not close the channel.\n+# Closes reader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5NjQwOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDo0OFrOGGBiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDo0OFrOGGBiQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTc5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `Error` if could not close the channel, or else nil.\n          \n          \n            \n            # + return - An `Error` if could not close the channel, or else '()'.\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408969792", "createdAt": "2020-04-15T16:20:48Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/strings.bal", "diffHunk": "@@ -62,9 +74,12 @@ public type StringReader object {\n         return ();\n     }\n \n-    # Closes reader.\n-    #\n-    # + return - An `Error` if could not close the channel.\n+# Closes reader.\n+# ```ballerina\n+# io:Error? err = reader.close();\n+# ```\n+#\n+# + return - An `Error` if could not close the channel, or else nil.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5NzA1OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDo1N1rOGGBirA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMDo1N1rOGGBirA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTkwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Sink bytes from a given input/output resource.\n          \n          \n            \n            # Sinks bytes from a given input/output resource.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408969900", "createdAt": "2020-04-15T16:20:57Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "diffHunk": "@@ -22,21 +22,26 @@ public type WritableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Sink bytes from a given input/output resource.\n-    #\n-    # This operation will be asynchronous, write might return without writing all the content.\n-    #\n-    # + content - Block of bytes which should be written\n-    # + offset - Start offset\n-    # + return - Offset which should be kept when writing bytes.\n-    #            Number of bytes written or `Error` if any error occurred\n+# Sink bytes from a given input/output resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5ODg1OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMToyNVrOGGBj3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMToyNVrOGGBj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # This operation will be asynchronous, write might return without writing all the content.\n          \n          \n            \n            # This operation will be asynchronous. Writing might return without writing all the content.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408970206", "createdAt": "2020-04-15T16:21:25Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "diffHunk": "@@ -22,21 +22,26 @@ public type WritableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Sink bytes from a given input/output resource.\n-    #\n-    # This operation will be asynchronous, write might return without writing all the content.\n-    #\n-    # + content - Block of bytes which should be written\n-    # + offset - Start offset\n-    # + return - Offset which should be kept when writing bytes.\n-    #            Number of bytes written or `Error` if any error occurred\n+# Sink bytes from a given input/output resource.\n+#\n+# This operation will be asynchronous, write might return without writing all the content.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5OTQyOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTozMlrOGGBkQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTozMlrOGGBkQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDMwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + content - Block of bytes which should be written\n          \n          \n            \n            # + content - Block of bytes, which should be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408970306", "createdAt": "2020-04-15T16:21:32Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "diffHunk": "@@ -22,21 +22,26 @@ public type WritableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Sink bytes from a given input/output resource.\n-    #\n-    # This operation will be asynchronous, write might return without writing all the content.\n-    #\n-    # + content - Block of bytes which should be written\n-    # + offset - Start offset\n-    # + return - Offset which should be kept when writing bytes.\n-    #            Number of bytes written or `Error` if any error occurred\n+# Sink bytes from a given input/output resource.\n+#\n+# This operation will be asynchronous, write might return without writing all the content.\n+# ```ballerina\n+# int|io:Error result = writableByteChannel.write(record, 0);\n+# ```\n+#\n+# + content - Block of bytes which should be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA5OTg4OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTo0MVrOGGBknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTo0MVrOGGBknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + offset - Offset which should be kept when writing bytes.\n          \n          \n            \n            # + offset - Offset, which should be kept when writing bytes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408970397", "createdAt": "2020-04-15T16:21:41Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "diffHunk": "@@ -22,21 +22,26 @@ public type WritableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Sink bytes from a given input/output resource.\n-    #\n-    # This operation will be asynchronous, write might return without writing all the content.\n-    #\n-    # + content - Block of bytes which should be written\n-    # + offset - Start offset\n-    # + return - Offset which should be kept when writing bytes.\n-    #            Number of bytes written or `Error` if any error occurred\n+# Sink bytes from a given input/output resource.\n+#\n+# This operation will be asynchronous, write might return without writing all the content.\n+# ```ballerina\n+# int|io:Error result = writableByteChannel.write(record, 0);\n+# ```\n+#\n+# + content - Block of bytes which should be written\n+# + offset - Offset which should be kept when writing bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEwMDI2OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTo0OFrOGGBk4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMDo0MVrOGGDdgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDQ2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Number of bytes written, or else `Error`\n          \n          \n            \n            # + return - Number of bytes written, or else `Error`\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408970467", "createdAt": "2020-04-15T16:21:48Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "diffHunk": "@@ -22,21 +22,26 @@ public type WritableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Sink bytes from a given input/output resource.\n-    #\n-    # This operation will be asynchronous, write might return without writing all the content.\n-    #\n-    # + content - Block of bytes which should be written\n-    # + offset - Start offset\n-    # + return - Offset which should be kept when writing bytes.\n-    #            Number of bytes written or `Error` if any error occurred\n+# Sink bytes from a given input/output resource.\n+#\n+# This operation will be asynchronous, write might return without writing all the content.\n+# ```ballerina\n+# int|io:Error result = writableByteChannel.write(record, 0);\n+# ```\n+#\n+# + content - Block of bytes which should be written\n+# + offset - Offset which should be kept when writing bytes.\n+# + return - Number of bytes written, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTM0Ng==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409001346", "createdAt": "2020-04-15T17:10:41Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "diffHunk": "@@ -22,21 +22,26 @@ public type WritableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Sink bytes from a given input/output resource.\n-    #\n-    # This operation will be asynchronous, write might return without writing all the content.\n-    #\n-    # + content - Block of bytes which should be written\n-    # + offset - Start offset\n-    # + return - Offset which should be kept when writing bytes.\n-    #            Number of bytes written or `Error` if any error occurred\n+# Sink bytes from a given input/output resource.\n+#\n+# This operation will be asynchronous, write might return without writing all the content.\n+# ```ballerina\n+# int|io:Error result = writableByteChannel.write(record, 0);\n+# ```\n+#\n+# + content - Block of bytes which should be written\n+# + offset - Offset which should be kept when writing bytes.\n+# + return - Number of bytes written, or else `Error`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDQ2Nw=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEwMDYzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTo1NVrOGGBlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMDo1NFrOGGDeBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDU0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `Error`, or else ()\n          \n          \n            \n            # + return - `Error`, or else ()\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408970542", "createdAt": "2020-04-15T16:21:55Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "diffHunk": "@@ -22,21 +22,26 @@ public type WritableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Sink bytes from a given input/output resource.\n-    #\n-    # This operation will be asynchronous, write might return without writing all the content.\n-    #\n-    # + content - Block of bytes which should be written\n-    # + offset - Start offset\n-    # + return - Offset which should be kept when writing bytes.\n-    #            Number of bytes written or `Error` if any error occurred\n+# Sink bytes from a given input/output resource.\n+#\n+# This operation will be asynchronous, write might return without writing all the content.\n+# ```ballerina\n+# int|io:Error result = writableByteChannel.write(record, 0);\n+# ```\n+#\n+# + content - Block of bytes which should be written\n+# + offset - Offset which should be kept when writing bytes.\n+# + return - Number of bytes written, or else `Error`\n     public function write(byte[] content, int offset) returns int|Error {\n         return byteWriteExtern(self, content, offset);\n     }\n \n-    # Closes a given byte channel.\n-    #\n-    # + return - Will return () if there's no error\n+# Closes a given byte channel.\n+# ```ballerina\n+# io:Error err = writableByteChannel.close();\n+# ```\n+#\n+# + return - `Error`, or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTQ3Ng==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409001476", "createdAt": "2020-04-15T17:10:54Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_byte_channel.bal", "diffHunk": "@@ -22,21 +22,26 @@ public type WritableByteChannel object {\n     # Adding default __init function to prevent object getting initialized from the user code.\n     function __init() {}\n \n-    # Sink bytes from a given input/output resource.\n-    #\n-    # This operation will be asynchronous, write might return without writing all the content.\n-    #\n-    # + content - Block of bytes which should be written\n-    # + offset - Start offset\n-    # + return - Offset which should be kept when writing bytes.\n-    #            Number of bytes written or `Error` if any error occurred\n+# Sink bytes from a given input/output resource.\n+#\n+# This operation will be asynchronous, write might return without writing all the content.\n+# ```ballerina\n+# int|io:Error result = writableByteChannel.write(record, 0);\n+# ```\n+#\n+# + content - Block of bytes which should be written\n+# + offset - Offset which should be kept when writing bytes.\n+# + return - Number of bytes written, or else `Error`\n     public function write(byte[] content, int offset) returns int|Error {\n         return byteWriteExtern(self, content, offset);\n     }\n \n-    # Closes a given byte channel.\n-    #\n-    # + return - Will return () if there's no error\n+# Closes a given byte channel.\n+# ```ballerina\n+# io:Error err = writableByteChannel.close();\n+# ```\n+#\n+# + return - `Error`, or else ()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDU0Mg=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEwNjY1OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMzoyNlrOGGBpIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMzoyNlrOGGBpIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Constructs a WritableByteChannel from a given WritableByteChannel and Charset.\n          \n          \n            \n                # Constructs a `WritableByteChannel` from a given `WritableByteChannel` and `Charset`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408971554", "createdAt": "2020-04-15T16:23:26Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -23,7 +23,7 @@ public type WritableCharacterChannel object {\n     private string charset;\n \n     # Constructs a WritableByteChannel from a given WritableByteChannel and Charset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEwNzYzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMzozOVrOGGBpuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMzozOVrOGGBpuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTcwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + bChannel - WritableByteChannel which would be used to write characters\n          \n          \n            \n                # + bChannel - The `WritableByteChannel`, which would be used to write the characters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408971707", "createdAt": "2020-04-15T16:23:39Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -23,7 +23,7 @@ public type WritableCharacterChannel object {\n     private string charset;\n \n     # Constructs a WritableByteChannel from a given WritableByteChannel and Charset.\n-\n+    # \n     # + bChannel - WritableByteChannel which would be used to write characters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEwODgxOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMzo1NFrOGGBqYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMzo1NFrOGGBqYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTg3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + charset - Character-Set which would be used to encode given bytes to characters\n          \n          \n            \n                # + charset - The character set, which would be used to encode the given bytes to characters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408971874", "createdAt": "2020-04-15T16:23:54Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -23,7 +23,7 @@ public type WritableCharacterChannel object {\n     private string charset;\n \n     # Constructs a WritableByteChannel from a given WritableByteChannel and Charset.\n-\n+    # \n     # + bChannel - WritableByteChannel which would be used to write characters\n     # + charset - Character-Set which would be used to encode given bytes to characters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEwOTM0OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDowM1rOGGBqsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDowM1rOGGBqsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + content - Content which should be written\n          \n          \n            \n            # + content - Content, which should be written", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408971953", "createdAt": "2020-04-15T16:24:03Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExMDIzOnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDoxM1rOGGBrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDoxM1rOGGBrJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + startOffset - Number of characters which should be offset when writing content\n          \n          \n            \n            # + startOffset - Number of characters, which should be offset when writing the content", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972068", "createdAt": "2020-04-15T16:24:13Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTExMDc3OnYy", "diffSide": "RIGHT", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNDoyMFrOGGBrgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMToxMFrOGGDerA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjE2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Content length that written, or else `Error`\n          \n          \n            \n            # + return - Content length that written, or else `Error`\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r408972160", "createdAt": "2020-04-15T16:24:20Z", "author": {"login": "praneesha"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content\n+# + return - Content length that written, or else `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTY0NA==", "bodyText": "Fixed in 668cfca", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22603#discussion_r409001644", "createdAt": "2020-04-15T17:11:10Z", "author": {"login": "niveathika"}, "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,34 +32,46 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, java:fromString(charset));\n     }\n \n-    # Writes a given sequence of characters (string).\n-    #\n-    # + content - Content which should be written\n-    # + startOffset - Number of characters which should be offset when writing content\n-    # + return - Content length that written or `Error` if any error occurred\n+# Writes a given sequence of characters (string).\n+# ```ballerina\n+# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+# ```\n+#\n+# + content - Content which should be written\n+# + startOffset - Number of characters which should be offset when writing content\n+# + return - Content length that written, or else `Error`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjE2MA=="}, "originalCommit": {"oid": "e3d3f8a58882d4c4059f47b31252598b67ed50c2"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4359, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}