{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjAzODg1", "number": 25524, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNToyMDo1MFrOEgPp7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzowMTowN1rOEhiLKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjQ2MzgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNToyMDo1MFrOHM_9Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTo1Njo0NlrOHNHgkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5MjgwMw==", "bodyText": "is it possible to handle the cursor position without converting to a diagnostic position?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483392803", "createdAt": "2020-09-04T05:20:50Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -71,12 +80,19 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n         Map<Name, List<Scope.ScopeEntry>> scopeSymbols =\n                 symbolResolver.getAllVisibleInScopeSymbols(lookupVisitor.lookUp(this.compilationUnit));\n \n-        for (Entry<Name, List<ScopeEntry>> entry : scopeSymbols.entrySet()) {\n+        DiagnosticPos cursorPos = new DiagnosticPos(new BDiagnosticSource(bLangPackage.packageID, compilationUnit.name),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNjU2MA==", "bodyText": "Will see. Did this conversion to make it easier to compare the user provided line position with the positions in BSymbol", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483516560", "createdAt": "2020-09-04T09:56:46Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -71,12 +80,19 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n         Map<Name, List<Scope.ScopeEntry>> scopeSymbols =\n                 symbolResolver.getAllVisibleInScopeSymbols(lookupVisitor.lookUp(this.compilationUnit));\n \n-        for (Entry<Name, List<ScopeEntry>> entry : scopeSymbols.entrySet()) {\n+        DiagnosticPos cursorPos = new DiagnosticPos(new BDiagnosticSource(bLangPackage.packageID, compilationUnit.name),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5MjgwMw=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjU3NDc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjoxNzoxMFrOHNA-Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoyNjoxOFrOHO6J_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ==", "bodyText": "Apparently SYMBOL_POSITION constant is redundant and the name is misleading here. Shall we just use 0 for the clarity.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483409499", "createdAt": "2020-09-04T06:17:10Z", "author": {"login": "rasika"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -99,4 +115,16 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n     public List<Diagnostic> diagnostics(TextRange range) {\n         return new ArrayList<>();\n     }\n+\n+    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+        return symbol.origin == SOURCE &&\n+                (cursorPos.compareTo(symbol.pos) > SYMBOL_POSITION ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMjY5OA==", "bodyText": "Yeah, I agree the name doesn't reflect the actual position of the symbol. Thought of introducing a constant instead of using 0 since the use of 0 kinda seemed to make it a bit unclear what that comparison is about", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483522698", "createdAt": "2020-09-04T10:09:36Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -99,4 +115,16 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n     public List<Diagnostic> diagnostics(TextRange range) {\n         return new ArrayList<>();\n     }\n+\n+    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+        return symbol.origin == SOURCE &&\n+                (cursorPos.compareTo(symbol.pos) > SYMBOL_POSITION ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NzcxOQ==", "bodyText": "What do we check here anyway?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485377719", "createdAt": "2020-09-09T06:50:58Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -99,4 +115,16 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n     public List<Diagnostic> diagnostics(TextRange range) {\n         return new ArrayList<>();\n     }\n+\n+    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+        return symbol.origin == SOURCE &&\n+                (cursorPos.compareTo(symbol.pos) > SYMBOL_POSITION ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5MDQyNQ==", "bodyText": "This basically compares whether the cursor position is before or after the position of a given symbol", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485390425", "createdAt": "2020-09-09T07:17:46Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -99,4 +115,16 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n     public List<Diagnostic> diagnostics(TextRange range) {\n         return new ArrayList<>();\n     }\n+\n+    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+        return symbol.origin == SOURCE &&\n+                (cursorPos.compareTo(symbol.pos) > SYMBOL_POSITION ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5NDk0Mw==", "bodyText": "Oh okay. So this is an object compare.\nI also feel 0 is more natural in that case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485394943", "createdAt": "2020-09-09T07:26:18Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -99,4 +115,16 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n     public List<Diagnostic> diagnostics(TextRange range) {\n         return new ArrayList<>();\n     }\n+\n+    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+        return symbol.origin == SOURCE &&\n+                (cursorPos.compareTo(symbol.pos) > SYMBOL_POSITION ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjU4MzM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/symbols/BallerinaModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjoyMDo0N1rOHNBDUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDoxMDoyOVrOHNH6Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxMDc3MQ==", "bodyText": "Any specific reason to use FQCN org.ballerinalang.model.symbols.SymbolKind.FUNCTION here? or else shall we just use SymbolKind.FUNCTION for better readability", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483410771", "createdAt": "2020-09-04T06:20:47Z", "author": {"login": "rasika"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/symbols/BallerinaModule.java", "diffHunk": "@@ -71,9 +74,10 @@ protected BallerinaModule(String name, PackageID moduleID, BPackageSymbol packag\n         List<FunctionSymbol> functions = new ArrayList<>();\n         for (Map.Entry<Name, ScopeEntry> entry : this.packageSymbol.scope.entries.entrySet()) {\n             ScopeEntry scopeEntry = entry.getValue();\n-            if (scopeEntry.symbol instanceof BInvokableSymbol &&\n-                    (scopeEntry.symbol.flags & Flags.PUBLIC) == Flags.PUBLIC &&\n-                    scopeEntry.symbol.kind != org.ballerinalang.model.symbols.SymbolKind.ERROR_CONSTRUCTOR) {\n+            if (scopeEntry.symbol != null\n+                    && scopeEntry.symbol.kind == org.ballerinalang.model.symbols.SymbolKind.FUNCTION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMzE3MA==", "bodyText": "There's SymbolKind class in the API package too. So had to use the FQ name to refer to the one in the lang module", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483523170", "createdAt": "2020-09-04T10:10:29Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/symbols/BallerinaModule.java", "diffHunk": "@@ -71,9 +74,10 @@ protected BallerinaModule(String name, PackageID moduleID, BPackageSymbol packag\n         List<FunctionSymbol> functions = new ArrayList<>();\n         for (Map.Entry<Name, ScopeEntry> entry : this.packageSymbol.scope.entries.entrySet()) {\n             ScopeEntry scopeEntry = entry.getValue();\n-            if (scopeEntry.symbol instanceof BInvokableSymbol &&\n-                    (scopeEntry.symbol.flags & Flags.PUBLIC) == Flags.PUBLIC &&\n-                    scopeEntry.symbol.kind != org.ballerinalang.model.symbols.SymbolKind.ERROR_CONSTRUCTOR) {\n+            if (scopeEntry.symbol != null\n+                    && scopeEntry.symbol.kind == org.ballerinalang.model.symbols.SymbolKind.FUNCTION", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxMDc3MQ=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzQ0MjQxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaModuleID.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDo1NDoxMFrOHNJIUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTo0OTo1N1rOHN8Y2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0MzEyMg==", "bodyText": "Will this be fixed sometime soon? Or do we need to create an issue specifying how this can be improved?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483543122", "createdAt": "2020-09-04T10:54:10Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaModuleID.java", "diffHunk": "@@ -66,4 +66,24 @@ public String toString() {\n         }\n         return this.orgName() + \"/\" + this.moduleName() + \":\" + this.version();\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        // TODO: Improve this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4MjkzOQ==", "bodyText": "Yes, planning on fixing these in this PR itself.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r484382939", "createdAt": "2020-09-07T11:49:57Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaModuleID.java", "diffHunk": "@@ -66,4 +66,24 @@ public String toString() {\n         }\n         return this.orgName() + \"/\" + this.moduleName() + \":\" + this.version();\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        // TODO: Improve this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0MzEyMg=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzQ0OTEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDo1NjoyMFrOHNJMJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDo1NjoyMFrOHNJMJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0NDEwMA==", "bodyText": "Can we check if owner kind is SymbolKind.PACKAGE instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483544100", "createdAt": "2020-09-04T10:56:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -99,4 +115,16 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n     public List<Diagnostic> diagnostics(TextRange range) {\n         return new ArrayList<>();\n     }\n+\n+    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+        return symbol.origin == SOURCE &&\n+                (cursorPos.compareTo(symbol.pos) > SYMBOL_POSITION ||\n+                        symbol.owner instanceof BPackageSymbol ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzQ3NjEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-compiler-api/build.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTowNTo1M1rOHNJcMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzowMDo0MVrOHO5Y1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0ODIxMQ==", "bodyText": "Can we test without ballerina/io? Just wondering if we have the requirement for this to be independent of stdlib modules.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483548211", "createdAt": "2020-09-04T11:05:53Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-compiler-api/build.gradle", "diffHunk": "@@ -27,6 +27,11 @@ dependencies {\n \n     testCompile 'org.testng:testng'\n     testCompile project(path: ':ballerina-test-utils', configuration: 'shadow')\n+    testCompile project(':ballerina-io')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NDAwNw==", "bodyText": "This is just for the tests. That should be fine right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r484384007", "createdAt": "2020-09-07T11:52:16Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-compiler-api/build.gradle", "diffHunk": "@@ -27,6 +27,11 @@ dependencies {\n \n     testCompile 'org.testng:testng'\n     testCompile project(path: ':ballerina-test-utils', configuration: 'shadow')\n+    testCompile project(':ballerina-io')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0ODIxMQ=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2MjkxOQ==", "bodyText": "Even that we usually try to avoid, right? Wouldn't it be an issue with the stdlib migration anyway?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485362919", "createdAt": "2020-09-09T06:17:13Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-compiler-api/build.gradle", "diffHunk": "@@ -27,6 +27,11 @@ dependencies {\n \n     testCompile 'org.testng:testng'\n     testCompile project(path: ':ballerina-test-utils', configuration: 'shadow')\n+    testCompile project(':ballerina-io')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0ODIxMQ=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MjM1OA==", "bodyText": "Yeah, had a chat with Supun as well. Will replace this with a balo test.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485382358", "createdAt": "2020-09-09T07:00:41Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-compiler-api/build.gradle", "diffHunk": "@@ -27,6 +27,11 @@ dependencies {\n \n     testCompile 'org.testng:testng'\n     testCompile project(path: ':ballerina-test-utils', configuration: 'shadow')\n+    testCompile project(':ballerina-io')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0ODIxMQ=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzUxNjU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/symbols/SymbolOrigin.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToyMDo1OVrOHNJ0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoxODoyNFrOHO55jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1NDQ3NA==", "bodyText": "Is this correct or should this be SOURCE?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483554474", "createdAt": "2020-09-04T11:20:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/symbols/SymbolOrigin.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerinalang.model.symbols;\n+\n+/**\n+ * Represents the various origination points of a symbol.\n+ *\n+ * @since 2.0.0\n+ */\n+public enum SymbolOrigin {\n+\n+    /**\n+     * These are symbols which are defined internally by the compiler. e.g., symbols defined in the symbol table,\n+     * symbols defined in lang lib\n+     */\n+    BUILTIN {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return BUILTIN;\n+        }\n+\n+        @Override\n+        public byte value() {\n+            return 1;\n+        }\n+    },\n+\n+    /**\n+     * These are symbols for which there is a corresponding construct in the source file written by the user.\n+     */\n+    SOURCE {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return COMPILED_SOURCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NDgyNQ==", "bodyText": "This is the intended value. The idea was to set a symbol's origin to COMPILED_SOURCE if it's coming from the BIR. So any SOURCE symbols become COMPILED_SOURCE symbols once the compilation is finished.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r484384825", "createdAt": "2020-09-07T11:54:02Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/symbols/SymbolOrigin.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerinalang.model.symbols;\n+\n+/**\n+ * Represents the various origination points of a symbol.\n+ *\n+ * @since 2.0.0\n+ */\n+public enum SymbolOrigin {\n+\n+    /**\n+     * These are symbols which are defined internally by the compiler. e.g., symbols defined in the symbol table,\n+     * symbols defined in lang lib\n+     */\n+    BUILTIN {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return BUILTIN;\n+        }\n+\n+        @Override\n+        public byte value() {\n+            return 1;\n+        }\n+    },\n+\n+    /**\n+     * These are symbols for which there is a corresponding construct in the source file written by the user.\n+     */\n+    SOURCE {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return COMPILED_SOURCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1NDQ3NA=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2MjEyMg==", "bodyText": "Would a comment explaining this help?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485362122", "createdAt": "2020-09-09T06:15:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/symbols/SymbolOrigin.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerinalang.model.symbols;\n+\n+/**\n+ * Represents the various origination points of a symbol.\n+ *\n+ * @since 2.0.0\n+ */\n+public enum SymbolOrigin {\n+\n+    /**\n+     * These are symbols which are defined internally by the compiler. e.g., symbols defined in the symbol table,\n+     * symbols defined in lang lib\n+     */\n+    BUILTIN {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return BUILTIN;\n+        }\n+\n+        @Override\n+        public byte value() {\n+            return 1;\n+        }\n+    },\n+\n+    /**\n+     * These are symbols for which there is a corresponding construct in the source file written by the user.\n+     */\n+    SOURCE {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return COMPILED_SOURCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1NDQ3NA=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5MDczNQ==", "bodyText": "Ack, will add a comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485390735", "createdAt": "2020-09-09T07:18:24Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/symbols/SymbolOrigin.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerinalang.model.symbols;\n+\n+/**\n+ * Represents the various origination points of a symbol.\n+ *\n+ * @since 2.0.0\n+ */\n+public enum SymbolOrigin {\n+\n+    /**\n+     * These are symbols which are defined internally by the compiler. e.g., symbols defined in the symbol table,\n+     * symbols defined in lang lib\n+     */\n+    BUILTIN {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return BUILTIN;\n+        }\n+\n+        @Override\n+        public byte value() {\n+            return 1;\n+        }\n+    },\n+\n+    /**\n+     * These are symbols for which there is a corresponding construct in the source file written by the user.\n+     */\n+    SOURCE {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return COMPILED_SOURCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1NDQ3NA=="}, "originalCommit": {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTg5MDkwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/SemanticModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjoyOTo1M1rOHO4hPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjoyOTo1M1rOHO4hPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2ODEyNQ==", "bodyText": "how about srcFile --> documentName or fileName?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485368125", "createdAt": "2020-09-09T06:29:53Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -35,10 +35,11 @@\n     /**\n      * Lookup the visible symbols at the given location.\n      *\n+     * @param srcFile  path for the file in which we need to look up symbols, relative to the source root path\n      * @param position text position in the source\n      * @return {@link List} of visible symbols in the given location\n      */\n-    List<Symbol> visibleSymbols(LinePosition position);\n+    List<Symbol> visibleSymbols(String srcFile, LinePosition position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cea0942eb0122f76d937a375538c3035139d5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTk2OTk0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo1NjoyMlrOHO5Qyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo1NjoyMlrOHO5Qyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MDI5OQ==", "bodyText": "Shall we create an issue for this and remove the TODO? I think we will not be addressing this along with the semantic API changes..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485380299", "createdAt": "2020-09-09T06:56:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -216,31 +220,31 @@ private SymbolTable(CompilerContext context) {\n         this.rootPkgSymbol.scope = this.rootScope;\n         this.rootPkgSymbol.pos = this.builtinPos;\n \n-        this.notFoundSymbol = new BSymbol(SymTag.NIL, Flags.PUBLIC, Names.INVALID,\n-                                          rootPkgSymbol.pkgID, noType, rootPkgSymbol, builtinPos);\n+        this.notFoundSymbol = new BSymbol(SymTag.NIL, Flags.PUBLIC, Names.INVALID, rootPkgSymbol.pkgID, noType,\n+                                          rootPkgSymbol, builtinPos, SymbolOrigin.VIRTUAL);\n         // Initialize built-in types in Ballerina\n-        initializeType(intType, TypeKind.INT.typeName());\n-        initializeType(byteType, TypeKind.BYTE.typeName());\n-        initializeType(floatType, TypeKind.FLOAT.typeName());\n-        initializeType(decimalType, TypeKind.DECIMAL.typeName());\n-        initializeType(stringType, TypeKind.STRING.typeName());\n-        initializeType(booleanType, TypeKind.BOOLEAN.typeName());\n-        initializeType(jsonType, TypeKind.JSON.typeName());\n-        initializeType(xmlType, TypeKind.XML.typeName());\n-        initializeType(streamType, TypeKind.STREAM.typeName());\n-        initializeType(tableType, TypeKind.TABLE.typeName());\n-        initializeType(mapType, TypeKind.MAP.typeName());\n-        initializeType(mapStringType, TypeKind.MAP.typeName());\n-        initializeType(mapAnydataType, TypeKind.MAP.typeName());\n-        initializeType(futureType, TypeKind.FUTURE.typeName());\n-        initializeType(anyType, TypeKind.ANY.typeName());\n-        initializeType(anydataType, TypeKind.ANYDATA.typeName());\n-        initializeType(nilType, TypeKind.NIL.typeName());\n-        initializeType(neverType, TypeKind.NEVER.typeName());\n-        initializeType(anyServiceType, TypeKind.SERVICE.typeName());\n-        initializeType(handleType, TypeKind.HANDLE.typeName());\n-        initializeType(typeDesc, TypeKind.TYPEDESC.typeName());\n-        initializeType(readonlyType, TypeKind.READONLY.typeName());\n+        initializeType(intType, TypeKind.INT.typeName(), BUILTIN);\n+        initializeType(byteType, TypeKind.BYTE.typeName(), BUILTIN);\n+        initializeType(floatType, TypeKind.FLOAT.typeName(), BUILTIN);\n+        initializeType(decimalType, TypeKind.DECIMAL.typeName(), BUILTIN);\n+        initializeType(stringType, TypeKind.STRING.typeName(), BUILTIN);\n+        initializeType(booleanType, TypeKind.BOOLEAN.typeName(), BUILTIN);\n+        initializeType(jsonType, TypeKind.JSON.typeName(), BUILTIN);\n+        initializeType(xmlType, TypeKind.XML.typeName(), BUILTIN);\n+        initializeType(streamType, TypeKind.STREAM.typeName(), BUILTIN);\n+        initializeType(tableType, TypeKind.TABLE.typeName(), BUILTIN);\n+        initializeType(mapType, TypeKind.MAP.typeName(), VIRTUAL); // TODO: Do we need these map types to be defined?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cea0942eb0122f76d937a375538c3035139d5"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTk4Mzc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzowMTowN1rOHO5Zjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzowMTowN1rOHO5Zjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MjU0Mw==", "bodyText": "Shall we convert these TODOs to issues, and remove the comments?\nHaving people references in a public code-base is a bit weird.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485382543", "createdAt": "2020-09-09T07:01:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -1493,7 +1497,7 @@ private boolean isRestDetailBindingAvailable(BLangErrorVariable errorVariable) {\n \n     private BTypeSymbol createTypeSymbol(int type) {\n         return new BTypeSymbol(type, Flags.PUBLIC, Names.EMPTY, env.enclPkg.packageID,\n-                               null, env.scope.owner, symTable.builtinPos); // TODO: Check with Dhananjaya\n+                               null, env.scope.owner, symTable.builtinPos, VIRTUAL); // TODO: Check with Dhananjaya", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cea0942eb0122f76d937a375538c3035139d5"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 143, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}