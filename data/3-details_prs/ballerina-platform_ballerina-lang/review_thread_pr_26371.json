{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MTg1MjU4", "number": 26371, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNToxMzo0NVrOFN_SCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNTo1OTo1M1rOFO95Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjEyNjE2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BTableType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNToxMzo0NVrOISf1iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNToxMzo0NVrOISf1iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2Njg5MQ==", "bodyText": "Missing licence header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r556266891", "createdAt": "2021-01-13T05:13:45Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BTableType.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.ballerinalang.core.model.types;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d357a294fab92b861f7c248e2927a970622b01"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTYwMzgxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BUnionType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDoyNjowNVrOITA0Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNDozOTowN1rOIUA7Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwNzIxOQ==", "bodyText": "Can this.typeName be null when resolving is true? Wouldn't resolving be true only for a cyclic union, which in turn has to have a name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r556807219", "createdAt": "2021-01-13T20:26:05Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BUnionType.java", "diffHunk": "@@ -91,8 +92,27 @@ public int getTag() {\n \n     @Override\n     public String toString() {\n-        List<String> list = memberTypes.stream().map(BType::toString).collect(Collectors.toList());\n-        return String.join(\"|\", list);\n+        String cachedToString;\n+        if (resolving) {\n+            if (this.typeName != null) {\n+                return this.typeName;\n+            } else {\n+                return \"...\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1NzYyMw==", "bodyText": "Not necessarily if someone creates one programmatically.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557857623", "createdAt": "2021-01-15T04:39:07Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BUnionType.java", "diffHunk": "@@ -91,8 +92,27 @@ public int getTag() {\n \n     @Override\n     public String toString() {\n-        List<String> list = memberTypes.stream().map(BType::toString).collect(Collectors.toList());\n-        return String.join(\"|\", list);\n+        String cachedToString;\n+        if (resolving) {\n+            if (this.typeName != null) {\n+                return this.typeName;\n+            } else {\n+                return \"...\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwNzIxOQ=="}, "originalCommit": {"oid": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTYwODQwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BUnionType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDoyNzoyM1rOITA2-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNToxNDowMFrOIUBdbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwNzkzMQ==", "bodyText": "Can toString get called when memberTypes is null?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r556807931", "createdAt": "2021-01-13T20:27:23Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BUnionType.java", "diffHunk": "@@ -91,8 +92,27 @@ public int getTag() {\n \n     @Override\n     public String toString() {\n-        List<String> list = memberTypes.stream().map(BType::toString).collect(Collectors.toList());\n-        return String.join(\"|\", list);\n+        String cachedToString;\n+        if (resolving) {\n+            if (this.typeName != null) {\n+                return this.typeName;\n+            } else {\n+                return \"...\";\n+            }\n+        }\n+        resolving = true;\n+        StringBuilder sb = new StringBuilder();\n+        int size = memberTypes != null ? memberTypes.size() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2NjM0OQ==", "bodyText": "I have added setMemberTypes which returns if members list is null given to it. But looks like there is no way for this to happen now. But shall we keep this for now. I think if members are empty we don't need to create a member list at runtime. An example is below.\nI would like to create an issue for this. What do you think?\ntype EmptyUnion never|never;\nEmptyUnion x = 3;\nERROR [t2.bal:(2:16,2:17)] incompatible types: expected '', found 'int'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557866349", "createdAt": "2021-01-15T05:14:00Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BUnionType.java", "diffHunk": "@@ -91,8 +92,27 @@ public int getTag() {\n \n     @Override\n     public String toString() {\n-        List<String> list = memberTypes.stream().map(BType::toString).collect(Collectors.toList());\n-        return String.join(\"|\", list);\n+        String cachedToString;\n+        if (resolving) {\n+            if (this.typeName != null) {\n+                return this.typeName;\n+            } else {\n+                return \"...\";\n+            }\n+        }\n+        resolving = true;\n+        StringBuilder sb = new StringBuilder();\n+        int size = memberTypes != null ? memberTypes.size() : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwNzkzMQ=="}, "originalCommit": {"oid": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTYxOTgyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDozMDo0OFrOITA9zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNDo0OToxNlrOIUBFFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwOTY3OQ==", "bodyText": "What about table<map<anydata>>?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r556809679", "createdAt": "2021-01-13T20:30:48Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -163,17 +159,82 @@\n     public static final IteratorType TYPE_ITERATOR = new BIteratorType(TypeConstants.ITERATOR_TNAME, EMPTY_MODULE);\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n-    public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    private static final MapType TYPE_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE);\n-    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(TYPE_DETAIL);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_DETAIL);\n+\n+    public static final JsonType TYPE_JSON;\n+    public static final JsonType TYPE_READONLY_JSON;\n+    public static final ArrayType TYPE_JSON_ARRAY;\n+    public static final AnydataType TYPE_ANYDATA;\n+    public static final AnydataType TYPE_READONLY_ANYDATA;\n+    public static final MapType TYPE_DETAIL;\n+    public static final Type TYPE_ERROR_DETAIL;\n+    public static final ErrorType TYPE_ERROR;\n+    public static final BUnionType TYPE_CLONEABLE;\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n     public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n             .createIteratorNextReturnType(\n                     new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n \n-    private PredefinedTypes() {\n+    // type anydata =  ()|boolean|int|float|decimal|string|xml|anydata[]|map<anydata>|table<map<anydata>>\n+    static {\n+        ArrayList<Type> members = new ArrayList<>();\n+        members.add(TYPE_NULL);\n+        members.add(TYPE_BOOLEAN);\n+        members.add(TYPE_INT);\n+        members.add(TYPE_FLOAT);\n+        members.add(TYPE_DECIMAL);\n+        members.add(TYPE_STRING);\n+        members.add(TYPE_XML);\n+        BAnydataType anydataType = new BAnydataType(new BUnionType(TypeConstants.ANYDATA_TNAME, EMPTY_MODULE,\n+                members), TypeConstants.ANYDATA_TNAME, false);\n+        anydataType.isCyclic = true;\n+        MapType internalAnydataMap = new BMapType(TypeConstants.MAP_TNAME, anydataType, EMPTY_MODULE);\n+        ArrayType internalAnydataArray = new BArrayType(anydataType);\n+        members.add(internalAnydataArray);\n+        members.add(internalAnydataMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2MDExNg==", "bodyText": "added 632ec68", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557860116", "createdAt": "2021-01-15T04:49:16Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -163,17 +159,82 @@\n     public static final IteratorType TYPE_ITERATOR = new BIteratorType(TypeConstants.ITERATOR_TNAME, EMPTY_MODULE);\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n-    public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    private static final MapType TYPE_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE);\n-    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(TYPE_DETAIL);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_DETAIL);\n+\n+    public static final JsonType TYPE_JSON;\n+    public static final JsonType TYPE_READONLY_JSON;\n+    public static final ArrayType TYPE_JSON_ARRAY;\n+    public static final AnydataType TYPE_ANYDATA;\n+    public static final AnydataType TYPE_READONLY_ANYDATA;\n+    public static final MapType TYPE_DETAIL;\n+    public static final Type TYPE_ERROR_DETAIL;\n+    public static final ErrorType TYPE_ERROR;\n+    public static final BUnionType TYPE_CLONEABLE;\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n     public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n             .createIteratorNextReturnType(\n                     new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n \n-    private PredefinedTypes() {\n+    // type anydata =  ()|boolean|int|float|decimal|string|xml|anydata[]|map<anydata>|table<map<anydata>>\n+    static {\n+        ArrayList<Type> members = new ArrayList<>();\n+        members.add(TYPE_NULL);\n+        members.add(TYPE_BOOLEAN);\n+        members.add(TYPE_INT);\n+        members.add(TYPE_FLOAT);\n+        members.add(TYPE_DECIMAL);\n+        members.add(TYPE_STRING);\n+        members.add(TYPE_XML);\n+        BAnydataType anydataType = new BAnydataType(new BUnionType(TypeConstants.ANYDATA_TNAME, EMPTY_MODULE,\n+                members), TypeConstants.ANYDATA_TNAME, false);\n+        anydataType.isCyclic = true;\n+        MapType internalAnydataMap = new BMapType(TypeConstants.MAP_TNAME, anydataType, EMPTY_MODULE);\n+        ArrayType internalAnydataArray = new BArrayType(anydataType);\n+        members.add(internalAnydataArray);\n+        members.add(internalAnydataMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwOTY3OQ=="}, "originalCommit": {"oid": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjEyMTM2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzozMDoyN1rOIT_5Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzozMDoyN1rOIT_5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MDc0Mw==", "bodyText": "Shall we introduce a separate method checkFillerValue method for BUnionType instead? We have several other similar methods too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557840743", "createdAt": "2021-01-15T03:30:27Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -2862,44 +2875,49 @@ private static boolean hasFillerValue(Type type, List<Type> unanalyzedTypes) {\n                 BTupleType tupleType = (BTupleType) type;\n                 return tupleType.getTupleTypes().stream().allMatch(TypeChecker::hasFillerValue);\n             case TypeTags.UNION_TAG:\n-                return checkFillerValue((BUnionType) type);\n+                return checkFillerValue((BUnionType) type, unanalyzedTypes);\n             default:\n                 return false;\n         }\n     }\n \n-    private static boolean checkFillerValue(BUnionType type) {\n-        // NIL is a member.\n-        if (type.isNullable()) {\n-            return true;\n-        }\n-        // All members are of same type.\n-        Iterator<Type> iterator = type.getMemberTypes().iterator();\n-        Type firstMember;\n-        for (firstMember = iterator.next(); iterator.hasNext(); ) {\n-            if (!isSameType(firstMember, iterator.next())) {\n-                return false;\n-            }\n-        }\n-        // Control reaching this point means there is only one type in the union.\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n-    }\n+    private static boolean checkFillerValue(BType type, List<Type> unAnalyzedTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjEzNTg2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BUnionType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzozOTowMlrOIUABkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNDozMDoxOFrOIUAzfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MjgzNQ==", "bodyText": "Can we do this change now or should we create an issue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557842835", "createdAt": "2021-01-15T03:39:02Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BUnionType.java", "diffHunk": "@@ -53,21 +64,219 @@ public BUnionType() {\n         this.readonly = false;\n     }\n \n+    /**\n+     * Create a {@code BUnionType} which represents the union type.\n+     *\n+     * @param memberTypes of the union type\n+     * @param typeFlags flags associated with the type\n+     */\n+    public BUnionType(List<Type> memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic,\n+                      Set<Type> unresolvedTypes) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n     public BUnionType(List<Type> memberTypes) {\n         this(memberTypes, false);\n     }\n \n+    public BUnionType(List<Type> memberTypes, String typeName, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(typeName, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.isCyclic = isCyclic;\n+        setMemberTypes(memberTypes);\n+        this.typeName = typeName;\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, List<Type> memberTypes) {\n+        super(typeName, pkg, Object.class);\n+        this.readonly = false;\n+        setMemberTypes(memberTypes);\n+    }\n+\n     public BUnionType(List<Type> memberTypes, boolean readonly) {\n-        this(memberTypes, 0, readonly);\n-        boolean nilable = false;\n-        boolean isAnydata = true;\n-        boolean isPureType = true;\n+        this(memberTypes, 0, readonly, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, boolean readonly, boolean isCyclic, Set<Type> unresolvedTypes) {\n+        this(memberTypes, 0, readonly, isCyclic, unresolvedTypes);\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, boolean readonly, Class<? extends Object> valueClass) {\n+        super(typeName, pkg, valueClass);\n+        this.readonly = readonly;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), typeFlags, readonly, isCyclic);\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = new ArrayList<>(2);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     */\n+    public BUnionType(BUnionType unionType) {\n+        super(unionType.typeName, unionType.pkg, unionType.valueClass);\n+        this.typeFlags = unionType.typeFlags;\n+        this.readonly = unionType.readonly;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     * @param typeName typename associated with the type\n+     */\n+    public BUnionType(BUnionType unionType, String typeName) {\n+        super(typeName, unionType.pkg, unionType.valueClass);\n+        this.readonly = unionType.readonly;\n+        this.typeFlags = unionType.typeFlags;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param name typename\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(name, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = null;\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), name, typeFlags, readonly, isCyclic);\n+    }\n+\n+    public void setMemberTypes(Type[] members) {\n+        if (members == null) {\n+            return;\n+        }\n+        this.memberTypes = readonly ? getReadOnlyTypes(members) : Arrays.asList(members);\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, new HashSet<>(members.size())) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members, Set<Type> unresolvedTypes) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, unresolvedTypes) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setCyclic(boolean isCyclic) {\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public boolean isNilable() {\n+        if (memberTypes == null || memberTypes.isEmpty()) {\n+            return true;\n+        }\n+\n+        if (this.resolving) {\n+            return false;\n+        }\n+\n+        // TODO: use the flag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1NTYxNQ==", "bodyText": "This is an existing TODO note. Let's create an issue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557855615", "createdAt": "2021-01-15T04:30:18Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BUnionType.java", "diffHunk": "@@ -53,21 +64,219 @@ public BUnionType() {\n         this.readonly = false;\n     }\n \n+    /**\n+     * Create a {@code BUnionType} which represents the union type.\n+     *\n+     * @param memberTypes of the union type\n+     * @param typeFlags flags associated with the type\n+     */\n+    public BUnionType(List<Type> memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic,\n+                      Set<Type> unresolvedTypes) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n     public BUnionType(List<Type> memberTypes) {\n         this(memberTypes, false);\n     }\n \n+    public BUnionType(List<Type> memberTypes, String typeName, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(typeName, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.isCyclic = isCyclic;\n+        setMemberTypes(memberTypes);\n+        this.typeName = typeName;\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, List<Type> memberTypes) {\n+        super(typeName, pkg, Object.class);\n+        this.readonly = false;\n+        setMemberTypes(memberTypes);\n+    }\n+\n     public BUnionType(List<Type> memberTypes, boolean readonly) {\n-        this(memberTypes, 0, readonly);\n-        boolean nilable = false;\n-        boolean isAnydata = true;\n-        boolean isPureType = true;\n+        this(memberTypes, 0, readonly, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, boolean readonly, boolean isCyclic, Set<Type> unresolvedTypes) {\n+        this(memberTypes, 0, readonly, isCyclic, unresolvedTypes);\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, boolean readonly, Class<? extends Object> valueClass) {\n+        super(typeName, pkg, valueClass);\n+        this.readonly = readonly;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), typeFlags, readonly, isCyclic);\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = new ArrayList<>(2);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     */\n+    public BUnionType(BUnionType unionType) {\n+        super(unionType.typeName, unionType.pkg, unionType.valueClass);\n+        this.typeFlags = unionType.typeFlags;\n+        this.readonly = unionType.readonly;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     * @param typeName typename associated with the type\n+     */\n+    public BUnionType(BUnionType unionType, String typeName) {\n+        super(typeName, unionType.pkg, unionType.valueClass);\n+        this.readonly = unionType.readonly;\n+        this.typeFlags = unionType.typeFlags;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param name typename\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(name, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = null;\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), name, typeFlags, readonly, isCyclic);\n+    }\n+\n+    public void setMemberTypes(Type[] members) {\n+        if (members == null) {\n+            return;\n+        }\n+        this.memberTypes = readonly ? getReadOnlyTypes(members) : Arrays.asList(members);\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, new HashSet<>(members.size())) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members, Set<Type> unresolvedTypes) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, unresolvedTypes) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setCyclic(boolean isCyclic) {\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public boolean isNilable() {\n+        if (memberTypes == null || memberTypes.isEmpty()) {\n+            return true;\n+        }\n+\n+        if (this.resolving) {\n+            return false;\n+        }\n+\n+        // TODO: use the flag", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MjgzNQ=="}, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjEzNjU5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BUnionType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzozOTozNVrOIUAB_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzozOTozNVrOIUAB_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0Mjk0MQ==", "bodyText": "Shall we avoid single character variable names?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557842941", "createdAt": "2021-01-15T03:39:35Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BUnionType.java", "diffHunk": "@@ -53,21 +64,219 @@ public BUnionType() {\n         this.readonly = false;\n     }\n \n+    /**\n+     * Create a {@code BUnionType} which represents the union type.\n+     *\n+     * @param memberTypes of the union type\n+     * @param typeFlags flags associated with the type\n+     */\n+    public BUnionType(List<Type> memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic,\n+                      Set<Type> unresolvedTypes) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n     public BUnionType(List<Type> memberTypes) {\n         this(memberTypes, false);\n     }\n \n+    public BUnionType(List<Type> memberTypes, String typeName, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(typeName, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.isCyclic = isCyclic;\n+        setMemberTypes(memberTypes);\n+        this.typeName = typeName;\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, List<Type> memberTypes) {\n+        super(typeName, pkg, Object.class);\n+        this.readonly = false;\n+        setMemberTypes(memberTypes);\n+    }\n+\n     public BUnionType(List<Type> memberTypes, boolean readonly) {\n-        this(memberTypes, 0, readonly);\n-        boolean nilable = false;\n-        boolean isAnydata = true;\n-        boolean isPureType = true;\n+        this(memberTypes, 0, readonly, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, boolean readonly, boolean isCyclic, Set<Type> unresolvedTypes) {\n+        this(memberTypes, 0, readonly, isCyclic, unresolvedTypes);\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, boolean readonly, Class<? extends Object> valueClass) {\n+        super(typeName, pkg, valueClass);\n+        this.readonly = readonly;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), typeFlags, readonly, isCyclic);\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = new ArrayList<>(2);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     */\n+    public BUnionType(BUnionType unionType) {\n+        super(unionType.typeName, unionType.pkg, unionType.valueClass);\n+        this.typeFlags = unionType.typeFlags;\n+        this.readonly = unionType.readonly;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     * @param typeName typename associated with the type\n+     */\n+    public BUnionType(BUnionType unionType, String typeName) {\n+        super(typeName, unionType.pkg, unionType.valueClass);\n+        this.readonly = unionType.readonly;\n+        this.typeFlags = unionType.typeFlags;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param name typename\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(name, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = null;\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), name, typeFlags, readonly, isCyclic);\n+    }\n+\n+    public void setMemberTypes(Type[] members) {\n+        if (members == null) {\n+            return;\n+        }\n+        this.memberTypes = readonly ? getReadOnlyTypes(members) : Arrays.asList(members);\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, new HashSet<>(members.size())) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members, Set<Type> unresolvedTypes) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, unresolvedTypes) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setCyclic(boolean isCyclic) {\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public boolean isNilable() {\n+        if (memberTypes == null || memberTypes.isEmpty()) {\n+            return true;\n+        }\n+\n+        if (this.resolving) {\n+            return false;\n+        }\n+\n+        // TODO: use the flag\n+        if (nullable == null) {\n+            nullable = checkNillable(memberTypes);\n+        }\n+        return nullable;\n+    }\n+\n+    private boolean checkNillable(List<Type> memberTypes) {\n+        this.resolving = true;\n+        for (Type t : memberTypes) {\n+            if (t.isNilable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjEzODMzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/ReadOnlyUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0MDo0M1rOIUAC-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0MDo0M1rOIUAC-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzE5Mg==", "bodyText": "Can we remove this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557843192", "createdAt": "2021-01-15T03:40:43Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/ReadOnlyUtils.java", "diffHunk": "@@ -238,9 +272,15 @@ private static BIntersectionType setImmutableIntersectionType(Type type, Set<Typ\n                 return (BIntersectionType) type.getImmutableType();\n             default:\n                 BUnionType origUnionType = (BUnionType) type;\n+\n+\n                 Type resultantImmutableType;\n \n                 List<Type> readOnlyMemTypes = new ArrayList<>();\n+//                resultantImmutableType = new BUnionType(null, true);\n+//                BUnionType unionImmutableType = (BUnionType) resultantImmutableType;\n+//                unionImmutableType.setMemberTypes(readOnlyMemTypes);\n+//                unionImmutableType.isCyclic = origUnionType.isCyclic;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjEzOTkyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/elements/MarkdownDocAttachment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0MTo1NFrOIUAD6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0MTo1NFrOIUAD6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzQzNA==", "bodyText": "Shall we remove this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557843434", "createdAt": "2021-01-15T03:41:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/elements/MarkdownDocAttachment.java", "diffHunk": "@@ -32,8 +32,12 @@\n     public List<Parameter> parameters;\n     public String returnValueDescription;\n \n-    public MarkdownDocAttachment() {\n-        this.parameters = new ArrayList<>();\n+//    public MarkdownDocAttachment() {\n+//        this.parameters = new ArrayList<>();\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjE0MjA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/CompilerDriver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0MzoxN1rOIUAFDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0MzoxN1rOIUAFDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzcyNw==", "bodyText": "Why do we need this? Error shouldn't depend on value, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557843727", "createdAt": "2021-01-15T03:43:17Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/CompilerDriver.java", "diffHunk": "@@ -225,7 +231,11 @@ void loadLangModules(List<PackageID> pkgIdList) {\n             symbolTable.langErrorModuleSymbol = pkgLoader.loadPackageSymbol(ERROR, null, null);\n         }\n \n-        symResolver.reloadIntRangeType();\n+        if (langLib.equals(ERROR)) {\n+            symbolTable.langValueModuleSymbol = pkgLoader.loadPackageSymbol(VALUE, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjE0MzMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0NDowOFrOIUAFxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQwNzo1MToyMFrOJBZk9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzkwOA==", "bodyText": "Missing licence header. Please check other new files too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557843908", "createdAt": "2021-01-15T03:44:08Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "diffHunk": "@@ -0,0 +1,343 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTQ0NzQxMg==", "bodyText": "These files are still missing license headers", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r605447412", "createdAt": "2021-04-01T07:51:20Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "diffHunk": "@@ -0,0 +1,343 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzkwOA=="}, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjE0NDIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0NDozMlrOIUAGOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0NDozMlrOIUAGOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDAyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since slp4\n          \n          \n            \n             * @since 2.0.0\n          \n      \n    \n    \n  \n\nPlease check wherever applicable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557844024", "createdAt": "2021-01-15T03:44:32Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "diffHunk": "@@ -0,0 +1,343 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;\n+\n+import org.wso2.ballerinalang.compiler.semantics.model.UniqueTypeVisitor;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnnotationType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnyType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnydataType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BBuiltInRefType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BErrorType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BField;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFiniteType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFutureType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BHandleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntersectionType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BJSONType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BMapType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNeverType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNoType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BPackageType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BParameterizedType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStreamType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStructureType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTupleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTypedescType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLType;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+import java.util.HashSet;\n+\n+/**\n+ * IsAnydataUniqueVisitor to check if a type is anydata.\n+ *\n+ * This is introduced to handle cyclic unions.\n+ * @since slp4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjE0NTA4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0NTowN1rOIUAGtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0NTowN1rOIUAGtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDE1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean isanydata(BType type) {\n          \n          \n            \n                private boolean isAnydata(BType type) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557844150", "createdAt": "2021-01-15T03:45:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "diffHunk": "@@ -0,0 +1,343 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;\n+\n+import org.wso2.ballerinalang.compiler.semantics.model.UniqueTypeVisitor;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnnotationType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnyType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnydataType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BBuiltInRefType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BErrorType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BField;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFiniteType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFutureType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BHandleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntersectionType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BJSONType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BMapType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNeverType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNoType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BPackageType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BParameterizedType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStreamType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStructureType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTupleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTypedescType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLType;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+import java.util.HashSet;\n+\n+/**\n+ * IsAnydataUniqueVisitor to check if a type is anydata.\n+ *\n+ * This is introduced to handle cyclic unions.\n+ * @since slp4\n+ */\n+public class IsAnydataUniqueVisitor implements UniqueTypeVisitor<Boolean> {\n+\n+    private HashSet<BType> visited;\n+    private boolean isAnydata;\n+\n+    public IsAnydataUniqueVisitor() {\n+        visited = new HashSet<>();\n+        isAnydata = true;\n+    }\n+\n+    public IsAnydataUniqueVisitor(HashSet<BType> visited) {\n+        this.visited = visited;\n+        isAnydata = true;\n+    }\n+\n+    private boolean isanydata(BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjE0ODI5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/builtinoperations/CloneOperationTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0NjozNFrOIUAIVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNDo1NzoyMlrOIUBMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDU2Ng==", "bodyText": "Why are we commenting these out? These are valid errors, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557844566", "createdAt": "2021-01-15T03:46:34Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/builtinoperations/CloneOperationTest.java", "diffHunk": "@@ -317,11 +317,11 @@ public void testCloneMap() {\n \n     @Test\n     public void testCloneNegative() {\n-        Assert.assertEquals(negativeResult.getErrorCount(), 3);\n+        Assert.assertEquals(negativeResult.getErrorCount(), 1);\n         BAssertUtil.validateError(negativeResult, 0, \"too many arguments in call to 'clone()'\", 19, 13);\n-        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n-                                  24, 23);\n-        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);\n+//        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n+//                                  24, 23);\n+//        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1ODY2Ng==", "bodyText": "Since Cloneable support readonly we support type we support typedesc and error as selectively immutable basic types. These are not errors now right ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557858666", "createdAt": "2021-01-15T04:43:41Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/builtinoperations/CloneOperationTest.java", "diffHunk": "@@ -317,11 +317,11 @@ public void testCloneMap() {\n \n     @Test\n     public void testCloneNegative() {\n-        Assert.assertEquals(negativeResult.getErrorCount(), 3);\n+        Assert.assertEquals(negativeResult.getErrorCount(), 1);\n         BAssertUtil.validateError(negativeResult, 0, \"too many arguments in call to 'clone()'\", 19, 13);\n-        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n-                                  24, 23);\n-        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);\n+//        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n+//                                  24, 23);\n+//        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDU2Ng=="}, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2MDgyOQ==", "bodyText": "Ah yes, my bad. Forgot we were changing the param type for these methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557860829", "createdAt": "2021-01-15T04:52:12Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/builtinoperations/CloneOperationTest.java", "diffHunk": "@@ -317,11 +317,11 @@ public void testCloneMap() {\n \n     @Test\n     public void testCloneNegative() {\n-        Assert.assertEquals(negativeResult.getErrorCount(), 3);\n+        Assert.assertEquals(negativeResult.getErrorCount(), 1);\n         BAssertUtil.validateError(negativeResult, 0, \"too many arguments in call to 'clone()'\", 19, 13);\n-        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n-                                  24, 23);\n-        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);\n+//        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n+//                                  24, 23);\n+//        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDU2Ng=="}, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2MjAyNw==", "bodyText": "We should remove these though. Instead of commenting them out.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557862027", "createdAt": "2021-01-15T04:57:22Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/builtinoperations/CloneOperationTest.java", "diffHunk": "@@ -317,11 +317,11 @@ public void testCloneMap() {\n \n     @Test\n     public void testCloneNegative() {\n-        Assert.assertEquals(negativeResult.getErrorCount(), 3);\n+        Assert.assertEquals(negativeResult.getErrorCount(), 1);\n         BAssertUtil.validateError(negativeResult, 0, \"too many arguments in call to 'clone()'\", 19, 13);\n-        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n-                                  24, 23);\n-        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);\n+//        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n+//                                  24, 23);\n+//        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDU2Ng=="}, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjE1MzY1OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo0OToxMlrOIUALNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNjowMDozNFrOIUCO5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NTMwMA==", "bodyText": "Unnecessary changes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557845300", "createdAt": "2021-01-15T03:49:12Z", "author": {"login": "MaryamZi"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -456,7 +456,8 @@ public class Entity {\n     #\n     # + return - All header names as a `string[]`\n     public function getHeaderNames() returns @tainted string[] {\n-        return self.headerNames.clone();\n+        return <string[]>self.headerNames.clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3OTAxNA==", "bodyText": "reverted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557879014", "createdAt": "2021-01-15T06:00:34Z", "author": {"login": "KRVPerera"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -456,7 +456,8 @@ public class Entity {\n     #\n     # + return - All header names as a `string[]`\n     public function getHeaderNames() returns @tainted string[] {\n-        return self.headerNames.clone();\n+        return <string[]>self.headerNames.clone();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NTMwMA=="}, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjE1NTg5OnYy", "diffSide": "LEFT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo1MDozMFrOIUAMeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNDoyMTo1N1rOIUArMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NTYyNQ==", "bodyText": "This too is a valid error?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557845625", "createdAt": "2021-01-15T03:50:30Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -40,8 +40,6 @@ public void testTypeParamNegative() {\n         CompileResult result = BCompileUtil.compile(\"test-src/type-param/type_param_test_negative.bal\");\n         int err = 0;\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'boolean[]', found 'int[]'\", 21, 20);\n-        BAssertUtil.validateError(result, err++, \"incompatible types: expected 'anydata', found 'function (string) \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1MzQ5MA==", "bodyText": "readonly support \"function\" type right. readonly being part of Cloneable shouldn't we support it now.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557853490", "createdAt": "2021-01-15T04:21:57Z", "author": {"login": "KRVPerera"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -40,8 +40,6 @@ public void testTypeParamNegative() {\n         CompileResult result = BCompileUtil.compile(\"test-src/type-param/type_param_test_negative.bal\");\n         int err = 0;\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'boolean[]', found 'int[]'\", 21, 20);\n-        BAssertUtil.validateError(result, err++, \"incompatible types: expected 'anydata', found 'function (string) \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NTYyNQ=="}, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjE1OTI2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.error/src/main/ballerina/error.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMzo1Mjo1NFrOIUAObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNDoxNzoxMlrOIUAmWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NjEyNQ==", "bodyText": "There's a duplicate Cloneable definition in the spec for the error module.\nhttps://github.com/ballerina-platform/ballerina-spec/blob/master/lang/lib/error.bal#L21", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557846125", "createdAt": "2021-01-15T03:52:54Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.error/src/main/ballerina/error.bal", "diffHunk": "@@ -15,10 +15,14 @@\n // under the License.\n \n import ballerina/java;\n+import ballerina/lang.'value as value;\n+\n+# The type of value to which `clone` and `cloneReadOnly` can be applied.\n+type __Cloneable1 readonly|xml|__Cloneable1[]|map<__Cloneable1>|table<map<__Cloneable1>>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1MjI1MA==", "bodyText": "Yes, but we cannot create a copy because Cloneable is already defined as a public type. I am getting redefinition errors.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557852250", "createdAt": "2021-01-15T04:17:12Z", "author": {"login": "KRVPerera"}, "path": "langlib/lang.error/src/main/ballerina/error.bal", "diffHunk": "@@ -15,10 +15,14 @@\n // under the License.\n \n import ballerina/java;\n+import ballerina/lang.'value as value;\n+\n+# The type of value to which `clone` and `cloneReadOnly` can be applied.\n+type __Cloneable1 readonly|xml|__Cloneable1[]|map<__Cloneable1>|table<map<__Cloneable1>>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NjEyNQ=="}, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjI3NzMwOnYy", "diffSide": "RIGHT", "path": "docs/bir-spec/src/main/resources/kaitai/bir.ksy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNTowMTozNVrOIUBQ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNTowMTozNVrOIUBQ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2MzEzMA==", "bodyText": "I belive this one and the below one need if condition. if:  has_name == 1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557863130", "createdAt": "2021-01-15T05:01:35Z", "author": {"login": "rdhananjaya"}, "path": "docs/bir-spec/src/main/resources/kaitai/bir.ksy", "diffHunk": "@@ -273,6 +273,14 @@ types:\n         type: s4\n   type_union:\n     seq:\n+      - id: is_cyclic\n+        type: u1\n+      - id: has_name\n+        type: s1\n+      - id: pkd_id_cp_index", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMjM4NDQ2OnYy", "diffSide": "RIGHT", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNTo1OTo1M1rOIUCOBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNTo1OTo1M1rOIUCOBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3ODc5MA==", "bodyText": "need to cleanup", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557878790", "createdAt": "2021-01-15T05:59:53Z", "author": {"login": "KRVPerera"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -456,7 +456,7 @@ public class Entity {\n     #\n     # + return - All header names as a `string[]`\n     public function getHeaderNames() returns @tainted string[] {\n-        return <string[]>self.headerNames.clone();\n+        return self.headerNames.clone();\n         //return self.headerNames.clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b98bfb0338955e173d88c5f76a3acb7f0af84b"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4747, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}