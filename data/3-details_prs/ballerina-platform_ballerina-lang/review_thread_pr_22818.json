{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzE2NzE0", "number": 22818, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMzoxNzo1NFrOD2a3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOToxMTo0NFrOD8M5DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mzg5ODAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMzoxNzo1NFrOGMLgkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNToxMFrOGMRS-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNDY1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (node.getKind() == NodeKind.FUNCTION &&\n          \n          \n            \n                            Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return node.getKind() == NodeKind.FUNCTION &&\n          \n          \n            \n                            Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415424656", "createdAt": "2020-04-26T23:17:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQ4MQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519481", "createdAt": "2020-04-27T05:25:10Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNDY1Ng=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzkxOTQ5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMzozMTowOVrOGMLqQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNTowNFrOGMRS2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzEzNw==", "bodyText": "Shall we replace this with a simple for-each loop?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415427137", "createdAt": "2020-04-26T23:31:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQ0OA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519448", "createdAt": "2020-04-27T05:25:04Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzEzNw=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzkyMDE1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMzozMToyOVrOGMLqjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNTowMlrOGMRS0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzIxNQ==", "bodyText": "Shouldn't this be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void checkForUninitializedGlobalVar(List<BLangSimpleVariable> globalVars) {\n          \n          \n            \n                private void checkForUninitializedGlobalVars(List<BLangSimpleVariable> globalVars) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415427215", "createdAt": "2020-04-26T23:31:29Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private void analyzeModuleInitFunc(BLangFunction funcNode) {\n+        this.currDependentSymbol.push(funcNode.symbol);\n+        SymbolEnv funcEnv = SymbolEnv.createFunctionEnv(funcNode, funcNode.symbol.scope, env);\n+        analyzeNode(funcNode.body, funcEnv);\n+        this.currDependentSymbol.pop();\n+    }\n+\n+    private void checkForUninitializedGlobalVar(List<BLangSimpleVariable> globalVars) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQ0MQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519441", "createdAt": "2020-04-27T05:25:02Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private void analyzeModuleInitFunc(BLangFunction funcNode) {\n+        this.currDependentSymbol.push(funcNode.symbol);\n+        SymbolEnv funcEnv = SymbolEnv.createFunctionEnv(funcNode, funcNode.symbol.scope, env);\n+        analyzeNode(funcNode.body, funcEnv);\n+        this.currDependentSymbol.pop();\n+    }\n+\n+    private void checkForUninitializedGlobalVar(List<BLangSimpleVariable> globalVars) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzIxNQ=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mzk0MjA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMzo0NToxMlrOGML0tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNTowMFrOGMRSxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyOTgxNA==", "bodyText": "Shall we rename the existing UNINITIALIZED_VARIABLE (https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java#L269) error to something like USAGE_OF_UNINITIALIZED_VARIABLE and call this UNINITIALIZED_VARIABLE instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415429814", "createdAt": "2020-04-26T23:45:12Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -267,6 +267,7 @@\n     INVALID_PATTERN_CLAUSES_IN_MATCH_STMT(\"invalid.pattern.clauses.in.match.stmt\"),\n     STATIC_MATCH_ONLY_SUPPORTS_ANYDATA(\"static.value.match.only.supports.anydata\"),\n     UNINITIALIZED_VARIABLE(\"uninitialized.variable\"),\n+    UNINITIALIZED_MODULE_VARIABLE(\"uninitialized.module.variable\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQyOQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519429", "createdAt": "2020-04-27T05:25:00Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -267,6 +267,7 @@\n     INVALID_PATTERN_CLAUSES_IN_MATCH_STMT(\"invalid.pattern.clauses.in.match.stmt\"),\n     STATIC_MATCH_ONLY_SUPPORTS_ANYDATA(\"static.value.match.only.supports.anydata\"),\n     UNINITIALIZED_VARIABLE(\"uninitialized.variable\"),\n+    UNINITIALIZED_MODULE_VARIABLE(\"uninitialized.module.variable\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyOTgxNA=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Mzk1MzgwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMzo1MjoxMFrOGML6Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNDo1NVrOGMRSqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMTE3NQ==", "bodyText": "Shouldn't this be done irrespective of whether a user-specified module init exists?\nThe following two scenarios would produce two different sets of errors atm?\nCase I\nint i;\n\nfunction __init() {\n\n}\n\npublic function main() {\n   int j = i;\n}\nCase II\nint i;\n\npublic function main() {\n   int j = i;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415431175", "createdAt": "2020-04-26T23:52:10Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQwMg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519402", "createdAt": "2020-04-27T05:24:55Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMTE3NQ=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDA0Mzg2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMDo0NToxNlrOGMMj1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNDo1NFrOGMRSog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTg3Nw==", "bodyText": "Incorrect version.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415441877", "createdAt": "2020-04-27T00:45:16Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Class to test module variable declaration negative.\n+ *\n+ * @since 1.2.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTM5NA==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519394", "createdAt": "2020-04-27T05:24:54Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Class to test module variable declaration negative.\n+ *\n+ * @since 1.2.2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTg3Nw=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDA0NDYzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module-var-declare.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMDo0NTozOFrOGMMkNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNDo1MlrOGMRSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTk3Mg==", "bodyText": "Missing a new line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415441972", "createdAt": "2020-04-27T00:45:38Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module-var-declare.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+int i;\n+string s;\n+int a;\n+int b;\n+error er;\n+\n+const ERROR_REASON = \"Error Reason\";\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function __init() {\n+    i = 10;\n+    s = \"Test string\";\n+    int x = 2;\n+    a = x + 10;\n+    b = 31 + foo();\n+    er = error(ERROR_REASON, message = \"error message\");\n+}\n+\n+function foo() returns int {\n+    return 1;\n+}\n+\n+function testModuleVarDeclaration() {\n+    if (i == 10 && s == \"Test string\" && a == 12 && b == 32) {\n+        return;\n+    }\n+\n+    string? msg = er.detail()?.message;\n+    if (msg is string && <string> msg == \"error message\") {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON, message = \"expected 'true', found 'false'\");\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTM4Mg==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519382", "createdAt": "2020-04-27T05:24:52Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module-var-declare.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+int i;\n+string s;\n+int a;\n+int b;\n+error er;\n+\n+const ERROR_REASON = \"Error Reason\";\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function __init() {\n+    i = 10;\n+    s = \"Test string\";\n+    int x = 2;\n+    a = x + 10;\n+    b = 31 + foo();\n+    er = error(ERROR_REASON, message = \"error message\");\n+}\n+\n+function foo() returns int {\n+    return 1;\n+}\n+\n+function testModuleVarDeclaration() {\n+    if (i == 10 && s == \"Test string\" && a == 12 && b == 32) {\n+        return;\n+    }\n+\n+    string? msg = er.detail()?.message;\n+    if (msg is string && <string> msg == \"error message\") {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON, message = \"expected 'true', found 'false'\");\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTk3Mg=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDA0NzEyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module-var-declare.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMDo0Njo1MVrOGMMlWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNDo0NVrOGMRSeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjI2Nw==", "bodyText": "Missing the licence header.\nWe also usually use _ for bal file names.\nPlease fix in the other bal file too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415442267", "createdAt": "2020-04-27T00:46:51Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module-var-declare.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+int i;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTM1Mw==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519353", "createdAt": "2020-04-27T05:24:45Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module-var-declare.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+int i;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjI2Nw=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDA0NzY5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMDo0NzoxOFrOGMMlow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNTo0OTo1M1rOGTFTXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjMzOQ==", "bodyText": "Do we need a new class anyway? Can't we have these in GlobalVarNegativeTest?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415442339", "createdAt": "2020-04-27T00:47:18Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Class to test module variable declaration negative.\n+ *\n+ * @since 1.2.2\n+ */\n+public class ModuleVarDeclareNegative {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzAwNQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r422663005", "createdAt": "2020-05-10T15:49:53Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Class to test module variable declaration negative.\n+ *\n+ * @since 1.2.2\n+ */\n+public class ModuleVarDeclareNegative {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjMzOQ=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDA3NDI1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMTowMTozMlrOGMMyHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNDo0MVrOGMRSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NTUzMw==", "bodyText": "Why do we do a separate analysis for the module init?\nAnyway, we're missing annotation validations from visit(BLangFunction funcNode).\nFor example,\nannotation map<int> Foo on function;\n\nint i; // uninitialized variable 'i'\n\n@Foo {\n    i // NO error, expected `variable 'i' is not initialized`\n}\nfunction __init() {\n}\n\n@Foo {\n    i // variable 'i' is not initialized\n}\npublic function main() {\n   int j = i; // variable 'i' is not initialized\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415445533", "createdAt": "2020-04-27T01:01:32Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private void analyzeModuleInitFunc(BLangFunction funcNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTMyNw==", "bodyText": "In current implementation Analyse function call the analyzeBranch method and it does not modify uninitializedVars. Because module-level variables cannot be initialized in function (same as __init() in the object).  But in this scenario, if we see some variable is initialized we need to update that map. Annotations are validated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519327", "createdAt": "2020-04-27T05:24:41Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private void analyzeModuleInitFunc(BLangFunction funcNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NTUzMw=="}, "originalCommit": {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDEzMzAwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDo0MToyMFrOGNCP8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1MzoxMlrOGUt8dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyMTUyMA==", "bodyText": "we need to analyze the init function before any other function.\nConsider blow\nimport ballerina/io;\n\npublic function main() {\n    io:println(\"hello\");\n    io:println(s);\n}\n\nfunction __init() {\n    s = \"hello\";\n}\nstring s;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r416321520", "createdAt": "2020-04-28T04:41:20Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        for (TopLevelNode topLevelNode : sortedListOfNodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54dee5e12c75c7c9fb9e1d5340500d34709106a1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NzQ2Mw==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424377463", "createdAt": "2020-05-13T11:53:12Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        for (TopLevelNode topLevelNode : sortedListOfNodes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyMTUyMA=="}, "originalCommit": {"oid": "54dee5e12c75c7c9fb9e1d5340500d34709106a1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzEwMTgzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/globalvar/GlobalVarNegativeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoyODo0MVrOGUxl4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozMzowMlrOGUxyIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzNzIxNg==", "bodyText": "This test-case is failing intermittently. Shall I disable it for now?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424437216", "createdAt": "2020-05-13T13:28:41Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/globalvar/GlobalVarNegativeTest.java", "diffHunk": "@@ -33,12 +33,38 @@\n     public void testGlobalVarNegatives() {\n         CompileResult resultNegative = BCompileUtil.compile(\n                 \"test-src/statements/variabledef/global_variable_negative.bal\");\n-        Assert.assertEquals(resultNegative.getErrorCount(), 6);\n+        Assert.assertEquals(resultNegative.getErrorCount(), 4);\n         BAssertUtil.validateError(resultNegative, 0, \"invalid token 'int'\", 27, 8);\n         BAssertUtil.validateError(resultNegative, 1, \"invalid token 'int'\", 29, 8);\n-        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 32);\n-        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 27);\n-        BAssertUtil.validateError(resultNegative, 4, \"mismatched input ';'. expecting '='\", 35, 46);\n-        BAssertUtil.validateError(resultNegative, 5, \"mismatched input ';'. expecting '='\", 37, 59);\n+        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 46);\n+        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 59);\n+    }\n+\n+    @Test\n+    void testGlobalVariableInitNegative() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/statements/variabledef/global_variable_init_negative\" +\n+                \".bal\");\n+\n+        Assert.assertEquals(result.getErrorCount(), 8);\n+        int i = 0;\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'i'\", 17, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 's'\", 18, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'a'\", 19, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'b'\", 20, 1);\n+        BAssertUtil.validateError(result, i++, \"variable 'i' is not initialized\", 25, 5);\n+        BAssertUtil.validateError(result, i++, \"variable 'i' is not initialized\", 31, 5);\n+        BAssertUtil.validateError(result, i++, \"variable 'a' is not initialized\", 39, 13);\n+        BAssertUtil.validateError(result, i, \"variable 's' is not initialized\", 40, 18);\n+    }\n+\n+    @Test\n+    void testGlobalVariableInitWithInvocationNegative() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/statements/variabledef\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDM1Mg==", "bodyText": "created #23211 to track this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424440352", "createdAt": "2020-05-13T13:33:02Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/globalvar/GlobalVarNegativeTest.java", "diffHunk": "@@ -33,12 +33,38 @@\n     public void testGlobalVarNegatives() {\n         CompileResult resultNegative = BCompileUtil.compile(\n                 \"test-src/statements/variabledef/global_variable_negative.bal\");\n-        Assert.assertEquals(resultNegative.getErrorCount(), 6);\n+        Assert.assertEquals(resultNegative.getErrorCount(), 4);\n         BAssertUtil.validateError(resultNegative, 0, \"invalid token 'int'\", 27, 8);\n         BAssertUtil.validateError(resultNegative, 1, \"invalid token 'int'\", 29, 8);\n-        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 32);\n-        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 27);\n-        BAssertUtil.validateError(resultNegative, 4, \"mismatched input ';'. expecting '='\", 35, 46);\n-        BAssertUtil.validateError(resultNegative, 5, \"mismatched input ';'. expecting '='\", 37, 59);\n+        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 46);\n+        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 59);\n+    }\n+\n+    @Test\n+    void testGlobalVariableInitNegative() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/statements/variabledef/global_variable_init_negative\" +\n+                \".bal\");\n+\n+        Assert.assertEquals(result.getErrorCount(), 8);\n+        int i = 0;\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'i'\", 17, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 's'\", 18, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'a'\", 19, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'b'\", 20, 1);\n+        BAssertUtil.validateError(result, i++, \"variable 'i' is not initialized\", 25, 5);\n+        BAssertUtil.validateError(result, i++, \"variable 'i' is not initialized\", 31, 5);\n+        BAssertUtil.validateError(result, i++, \"variable 'a' is not initialized\", 39, 13);\n+        BAssertUtil.validateError(result, i, \"variable 's' is not initialized\", 40, 18);\n+    }\n+\n+    @Test\n+    void testGlobalVariableInitWithInvocationNegative() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/statements/variabledef\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzNzIxNg=="}, "originalCommit": {"oid": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDEyNDgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaLexer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMjozNlrOGU74NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMjozNlrOGU74NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNTc0OQ==", "bodyText": "Invalid changes. Will be fixed in the consolidated PR with d687c13.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424605749", "createdAt": "2020-05-13T17:22:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaLexer.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaLexer.g4 by ANTLR 4.5.3\n+// Generated from /home/kavindu/WSO2-GIT/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaLexer.g4 by ANTLR 4.5.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDM3OTc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozMTowM1rOGU-aHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozMTowM1rOGU-aHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0NzE5OA==", "bodyText": "Can't we avoid iterating through all the nodes twice + checking for existence by doing something like\n        for (TopLevelNode node : pkgNode.topLevelNodes) {\n            if (isModuleInitFunction((BLangNode) node)) {\n                sortedListOfNodes.add(0, node);\n                continue;\n            }\n\n            sortedListOfNodes.add(node);\n        }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424647198", "createdAt": "2020-05-13T18:31:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -268,19 +268,64 @@ public void visit(BLangPackage pkgNode) {\n \n         // Rearrange the top level nodes so that global variables come on top\n         List<TopLevelNode> sortedListOfNodes = new ArrayList<>(pkgNode.globalVars);\n-        pkgNode.topLevelNodes.forEach(topLevelNode -> {\n-            if (!sortedListOfNodes.contains(topLevelNode)) {\n-                sortedListOfNodes.add(topLevelNode);\n+        addModuleInitToSortedNodeList(pkgNode, sortedListOfNodes);\n+        addNodesToSortedNodeList(pkgNode, sortedListOfNodes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDQ0MDM0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0Nzo1OFrOGU_AkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0Nzo1OFrOGU_AkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NzA0MA==", "bodyText": "We can check the inverse and return early\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (env.isModuleInit) {\n          \n          \n            \n                        boolean isFirstUninitializedField = true;\n          \n          \n            \n                        StringBuilder uninitializedFields = new StringBuilder();\n          \n          \n            \n                        for (BSymbol symbol : this.uninitializedVars.keySet()) {\n          \n          \n            \n                            if (isFirstUninitializedField) {\n          \n          \n            \n                                uninitializedFields = new StringBuilder(symbol.getName().value);\n          \n          \n            \n                                isFirstUninitializedField = false;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                uninitializedFields.append(\", \").append(symbol.getName().value);\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        if (uninitializedFields.length() != 0) {\n          \n          \n            \n                            this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\n          \n          \n            \n                                    uninitializedFields.toString());\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    if (!env.isModuleInit) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    boolean isFirstUninitializedField = true;\n          \n          \n            \n                    StringBuilder uninitializedFields = new StringBuilder();\n          \n          \n            \n                    for (BSymbol symbol : this.uninitializedVars.keySet()) {\n          \n          \n            \n                        if (isFirstUninitializedField) {\n          \n          \n            \n                            uninitializedFields = new StringBuilder(symbol.getName().value);\n          \n          \n            \n                            isFirstUninitializedField = false;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            uninitializedFields.append(\", \").append(symbol.getName().value);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (uninitializedFields.length() != 0) {\n          \n          \n            \n                        this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\n          \n          \n            \n                                        uninitializedFields.toString());\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    return true;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424657040", "createdAt": "2020-05-13T18:47:58Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -877,6 +926,27 @@ private boolean isFieldsInitializedForSelfInvocation(List<BLangExpression> argEx\n         return true;\n     }\n \n+    private boolean isGlobalVarsInitialized(DiagnosticPos pos) {\n+        if (env.isModuleInit) {\n+            boolean isFirstUninitializedField = true;\n+            StringBuilder uninitializedFields = new StringBuilder();\n+            for (BSymbol symbol : this.uninitializedVars.keySet()) {\n+                if (isFirstUninitializedField) {\n+                    uninitializedFields = new StringBuilder(symbol.getName().value);\n+                    isFirstUninitializedField = false;\n+                } else {\n+                    uninitializedFields.append(\", \").append(symbol.getName().value);\n+                }\n+            }\n+            if (uninitializedFields.length() != 0) {\n+                this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\n+                        uninitializedFields.toString());\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDQ3MTU5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/variabledef/global_variable_init_in_reverse_order.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1NjoyMFrOGU_UPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1NjoyMFrOGU_UPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MjA3OQ==", "bodyText": "With this change, even module level final variables can be initialized in the __init() method right? Does that work? Can we add tests for the same?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424662079", "createdAt": "2020-05-13T18:56:20Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/variabledef/global_variable_init_in_reverse_order.bal", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public function testReverseOrderInitialization() {\n+    if (s == \"hello\" && a == 5) {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON, message = \"expected 'true', found 'false'\");\n+}\n+\n+function __init() {\n+    s = \"hello\";\n+    int x = 2;\n+    a = x + 3;\n+}\n+\n+string s;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDUyMzY1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolEnv.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOToxMTo0NFrOGU_1dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOToxMTo0NFrOGU_1dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MDU4Mg==", "bodyText": "Why are we adding this to the SymbolEnv? IMO this doesn't belong here.\nLooking at the usage, can't we just use a boolean in the DataflowAnalyzer which we set and unset in analyzeModuleInitFunc? Like we generally do in CodeAnalyzer? \n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n    \n    \n         Line 252\n      in\n      6fc33a0\n    \n    \n    \n    \n\n        \n          \n           private boolean isJSONContext;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424670582", "createdAt": "2020-05-13T19:11:44Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolEnv.java", "diffHunk": "@@ -75,6 +75,8 @@\n \n     public int relativeEnvCount;\n \n+    public boolean isModuleInit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3909, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}