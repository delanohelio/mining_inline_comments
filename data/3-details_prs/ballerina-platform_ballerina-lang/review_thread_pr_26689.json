{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMzM4NzYx", "number": 26689, "reviewThreads": {"totalCount": 58, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMDowMlrOE0u8AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNjoxNDo0NlrOFNwf1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzMwNDMyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/values/XMLText.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMDowMlrOHsnfLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0ODoyOVrOH3D16Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjM1MA==", "bodyText": "Since an XML text value is inherently immutable, can't we check if data is empty, and set xml<never> as the type in the constructor of XMLText itself?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516546350", "createdAt": "2020-11-03T10:00:02Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/values/XMLText.java", "diffHunk": "@@ -142,6 +142,9 @@ public int hashCode() {\n \n     @Override\n     public Type getType() {\n+        if (this.data.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0MDA4Mg==", "bodyText": "Checks like :\nstring empty = \"\";\n'xml:Text a = xml `${empty}`;\nany y = a;\nassertEquality(y is xml<never>, true);\n\nfail if it is put in the constructor. The values seem to be getting resolved after the constructor is called.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r521240082", "createdAt": "2020-11-11T09:51:23Z", "author": {"login": "suleka96"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/values/XMLText.java", "diffHunk": "@@ -142,6 +142,9 @@ public int hashCode() {\n \n     @Override\n     public Type getType() {\n+        if (this.data.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjM1MA=="}, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NjY4MQ==", "bodyText": "Wouldn't adding\nthis.type = data.isEmpty() ? PredefinedTypes.TYPE_XML_NEVER : PredefinedTypes.TYPE_TEXT;\nto the constructor and updating getType as\n    @Override\n    public Type getType() {\n        return this.type;\n    }\nwork?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527496681", "createdAt": "2020-11-20T07:48:29Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/values/XMLText.java", "diffHunk": "@@ -142,6 +142,9 @@ public int hashCode() {\n \n     @Override\n     public Type getType() {\n+        if (this.data.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjM1MA=="}, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzMwNDk4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMDoxNFrOHsnfrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMDoxNFrOHsnfrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjQ3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (TypeTags.isXMLTypeTag(sourceTag)) {\n          \n          \n            \n                    } \n          \n          \n            \n                    \n          \n          \n            \n                    if (TypeTags.isXMLTypeTag(sourceTag)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516546478", "createdAt": "2020-11-03T10:00:14Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "diffHunk": "@@ -896,8 +898,14 @@ private static boolean checkIsXMLType(Type sourceType, Type targetType, List<Typ\n             }\n             return checkIsType(((BXMLType) sourceType).constraint, targetConstraint,\n                     unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n-            return checkIsType(sourceType, target.constraint, unresolvedTypes);\n+        } else if (TypeTags.isXMLTypeTag(sourceTag)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzMwNjU2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMDozNlrOHsngrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMDozNlrOHsngrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjczNQ==", "bodyText": "How about\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final XMLType TYPE_TEXT_NEVER = new BXMLType(TypeConstants.XML_TEXT,\n          \n          \n            \n                public static final XMLType TYPE_XML_NEVER = new BXMLType(TypeConstants.XML_TEXT,\n          \n      \n    \n    \n  \n\ninstead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516546735", "createdAt": "2020-11-03T10:00:36Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -140,6 +140,10 @@\n                                                          new Module(BALLERINA_BUILTIN_PKG_PREFIX, XML_LANG_LIB, null),\n                                                          TypeTags.XML_TEXT_TAG, true);\n \n+    public static final XMLType TYPE_TEXT_NEVER = new BXMLType(TypeConstants.XML_TEXT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzMxMjIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMjowNVrOHsnkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNTowMTozMlrOHtzn6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzY0NA==", "bodyText": "Shall we undo this change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516547644", "createdAt": "2020-11-03T10:02:05Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-*  Unless required by applicable law or agreed to in writing,\n-*  software distributed under the License is distributed on an\n-*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-*  KIND, either express or implied.  See the License for the\n-*  specific language governing permissions and limitations\n-*  under the License.\n-*/\n+ *  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEzODM3MA==", "bodyText": "@MaryamZi isn't this the correct formatting?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r517138370", "createdAt": "2020-11-04T07:21:12Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-*  Unless required by applicable law or agreed to in writing,\n-*  software distributed under the License is distributed on an\n-*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-*  KIND, either express or implied.  See the License for the\n-*  specific language governing permissions and limitations\n-*  under the License.\n-*/\n+ *  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzY0NA=="}, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc5Mzc3MQ==", "bodyText": "Sorry, should've mentioned why. In this case since it is just one file and it's a change to the licence header, we can even go ahead with this change.\nBut generally it could be better to separate out unrelated formatting changes to a separate PR and keep a PR as concise and relevant as possible. Especially in scenarios like this where the only change to a file is a formatting change.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r517793771", "createdAt": "2020-11-05T05:01:32Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1,20 +1,20 @@\n /*\n-*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-*  Unless required by applicable law or agreed to in writing,\n-*  software distributed under the License is distributed on an\n-*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-*  KIND, either express or implied.  See the License for the\n-*  specific language governing permissions and limitations\n-*  under the License.\n-*/\n+ *  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzY0NA=="}, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzMxNDkzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/binaryoperations/type-test-expr.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMjo0OFrOHsnl5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMjo0OFrOHsnl5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0ODA2OQ==", "bodyText": "Works without the import also now, since we pre-declare the lang.xml import.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516548069", "createdAt": "2020-11-03T10:02:48Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/binaryoperations/type-test-expr.bal", "diffHunk": "@@ -13,6 +13,7 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n+import ballerina/lang.'xml;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzMyOTA3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/binaryoperations/type-test-expr.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowNjozNFrOHsnuiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowNjozNFrOHsnuiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1MDI4Mw==", "bodyText": "The spec says\n\nA shape belongs to type xml<T> if all of its constituent items belong to T. So, for example, xml<xml:Element> is the type for xml values containing only elements. Note that xml<xml<T>> is the same as xml<T> and that xml<xml:Text> is the same as xml:Text.\n\nShouldn't the following also work?\npublic function main() {\n    xml<never> x1 = xml ``; // works\n    xml<xml<never>> x2 = xml ``; // incompatible types: expected 'xml<xml<never>>', found 'xml<never>'\n\n    xml<'xml:Text> x3 = xml ``; // works\n    xml<xml<'xml:Text>> x4 = xml ``; // incompatible types: expected 'xml<xml<xml:Text>>', found 'xml<never>'\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516550283", "createdAt": "2020-11-03T10:06:34Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/binaryoperations/type-test-expr.bal", "diffHunk": "@@ -1052,6 +1053,39 @@ public function testMapAsRecord() {\n     assertTrue(det is record {| string message; |});\n }\n \n+// ========================== XML ==========================\n+\n+public function testXMLNeverType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzMzMDEwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/binaryoperations/TypeTestExprTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowNjo1MFrOHsnvKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowNjo1MFrOHsnvKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1MDQ0MQ==", "bodyText": "Shall we also add some negative tests?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516550441", "createdAt": "2020-11-03T10:06:50Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/binaryoperations/TypeTestExprTest.java", "diffHunk": "@@ -363,6 +363,11 @@ public void testSimpleArrays() {\n         Assert.assertTrue(((BBoolean) returns[4]).booleanValue());\n     }\n \n+    @Test\n+    public void testXMLNeverType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQwOTk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNjoyOFrOHsofTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNjoyOFrOHsofTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2Mjc2NA==", "bodyText": "Shouldn't this be true only when it is part of xml? Probably part of isXMLTypeAssignable.\nThe following is also allowed due to this change.\n    never[] arr = [];\n    'xml:Text text = arr[0]; // should fail", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516562764", "createdAt": "2020-11-03T10:26:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -588,6 +589,10 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n             return true;\n         }\n \n+        if (sourceTag == TypeTags.NEVER && targetTag == TypeTags.XML_TEXT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQxNzE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyODoyN1rOHsojrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyODoyN1rOHsojrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2Mzg4Ng==", "bodyText": "Why do we need these separate variables?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516563886", "createdAt": "2020-11-03T10:28:27Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4387,6 +4397,21 @@ private BLangIdentifier createIdentifier(DiagnosticPos pos, String value, Set<Wh\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createSimpleLiteral(TemplateExpressionNode expressionNode) {\n+        BLangLiteral bLiteral = (BLangLiteral) TreeBuilder.createLiteralExpression();\n+\n+        int typeTag = TypeTags.STRING;\n+        Object value = \"\";\n+        String originalValue = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQzODg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozMzo0OFrOHsowzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozMzo0OFrOHsowzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzI0Ng==", "bodyText": "Can't we check isEmpty instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516567246", "createdAt": "2020-11-03T10:33:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2105,7 +2105,12 @@ public BLangNode transform(TemplateExpressionNode expressionNode) {\n         SyntaxKind kind = expressionNode.kind();\n         switch (kind) {\n             case XML_TEMPLATE_EXPRESSION:\n-                SyntaxKind contentKind = expressionNode.content().get(0).kind();\n+                SyntaxKind contentKind;\n+                if (expressionNode.content().size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQ0MDg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNDoxNlrOHsoyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNDoxNlrOHsoyDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzU2NQ==", "bodyText": "Shall we check by node kind instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516567565", "createdAt": "2020-11-03T10:34:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3943,7 +3944,16 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n-        resultType = types.checkType(bLangXMLTextLiteral, symTable.xmlTextType, expType);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0) instanceof BLangLiteral) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQ0Mjg2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNDo1MlrOHsozSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNDo1MlrOHsozSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2Nzg4MA==", "bodyText": "We don't need a separate variable, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516567880", "createdAt": "2020-11-03T10:34:52Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3943,7 +3944,16 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n-        resultType = types.checkType(bLangXMLTextLiteral, symTable.xmlTextType, expType);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0) instanceof BLangLiteral) {\n+            if (((String) ((BLangLiteral) literalValues.get(0)).value).isEmpty()) {\n+                resultType = types.checkType(bLangXMLTextLiteral,\n+                        createXMLNeverType(null, bLangXMLTextLiteral), expType);\n+                return;\n+            }\n+        }\n+        BXMLSubType actualType = symTable.xmlTextType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQ0NTE5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNToyN1rOHso0ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNToyN1rOHso0ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2ODI1OQ==", "bodyText": "We can merge these two if checks.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516568259", "createdAt": "2020-11-03T10:35:27Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3943,7 +3944,16 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n-        resultType = types.checkType(bLangXMLTextLiteral, symTable.xmlTextType, expType);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0) instanceof BLangLiteral) {\n+            if (((String) ((BLangLiteral) literalValues.get(0)).value).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQ1MjY0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNzoxNFrOHso5Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNzoxNFrOHso5Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTQxOQ==", "bodyText": "Instead of creating a new type, we can have a xmlNeverType in the symbol table and reuse it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516569419", "createdAt": "2020-11-03T10:37:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5193,8 +5203,32 @@ private BSymbol getLangLibMethod(BLangInvocation iExpr, BType bType) {\n         return funcSymbol;\n     }\n \n+    private BType createXMLNeverType(BLangInvocation iExpr, BLangXMLTextLiteral bLangXMLTextLiteral) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQ1NTYxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozODowOVrOHso7Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1Mzo1NlrOH3GKHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTkzNA==", "bodyText": "What is the scenario we're trying to handle here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r516569934", "createdAt": "2020-11-03T10:38:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5193,8 +5203,32 @@ private BSymbol getLangLibMethod(BLangInvocation iExpr, BType bType) {\n         return funcSymbol;\n     }\n \n+    private BType createXMLNeverType(BLangInvocation iExpr, BLangXMLTextLiteral bLangXMLTextLiteral) {\n+        Scope.ScopeEntry entry = symTable.rootScope.lookup(names.fromTypeKind(TypeKind.NEVER));\n+        BType constraintType = (entry.symbol).type;\n+        BType constrainedType = new BXMLType(constraintType, null);\n+        BType type = (symTable.rootScope.lookup(names.fromTypeKind(TypeKind.XML))).symbol.type;\n+        BTypeSymbol typeSymbol = type.tsymbol;\n+        if (iExpr != null) {\n+            constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                    typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                    iExpr.pos, SOURCE);\n+            return constrainedType;\n+        }\n+        constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                bLangXMLTextLiteral.pos, SOURCE);\n+        return constrainedType;\n+    }\n+\n     private void checkInvocationParamAndReturnType(BLangInvocation iExpr) {\n         BType actualType = checkInvocationParam(iExpr);\n+        if (actualType.tag == symTable.xmlTextType.tag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyMDcwMw==", "bodyText": "To handle  xml<never> b = 'xml:createText(\"\"); kind of scenarios.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r521120703", "createdAt": "2020-11-11T05:25:29Z", "author": {"login": "suleka96"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5193,8 +5203,32 @@ private BSymbol getLangLibMethod(BLangInvocation iExpr, BType bType) {\n         return funcSymbol;\n     }\n \n+    private BType createXMLNeverType(BLangInvocation iExpr, BLangXMLTextLiteral bLangXMLTextLiteral) {\n+        Scope.ScopeEntry entry = symTable.rootScope.lookup(names.fromTypeKind(TypeKind.NEVER));\n+        BType constraintType = (entry.symbol).type;\n+        BType constrainedType = new BXMLType(constraintType, null);\n+        BType type = (symTable.rootScope.lookup(names.fromTypeKind(TypeKind.XML))).symbol.type;\n+        BTypeSymbol typeSymbol = type.tsymbol;\n+        if (iExpr != null) {\n+            constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                    typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                    iExpr.pos, SOURCE);\n+            return constrainedType;\n+        }\n+        constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                bLangXMLTextLiteral.pos, SOURCE);\n+        return constrainedType;\n+    }\n+\n     private void checkInvocationParamAndReturnType(BLangInvocation iExpr) {\n         BType actualType = checkInvocationParam(iExpr);\n+        if (actualType.tag == symTable.xmlTextType.tag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTkzNA=="}, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMzY0OA==", "bodyText": "I don't think we should be supporting this.\nAllowing this means that we are in a way calling this function and evaluating the expression at compile-time, which we do not do for function calls.\nThe static type of 'xml:createText(...) at compile-time is always 'xml:Text. So if the user wants to do this they have to say\nxml<never> b = <xml<never>> 'xml:createText(\"\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527533648", "createdAt": "2020-11-20T08:52:06Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5193,8 +5203,32 @@ private BSymbol getLangLibMethod(BLangInvocation iExpr, BType bType) {\n         return funcSymbol;\n     }\n \n+    private BType createXMLNeverType(BLangInvocation iExpr, BLangXMLTextLiteral bLangXMLTextLiteral) {\n+        Scope.ScopeEntry entry = symTable.rootScope.lookup(names.fromTypeKind(TypeKind.NEVER));\n+        BType constraintType = (entry.symbol).type;\n+        BType constrainedType = new BXMLType(constraintType, null);\n+        BType type = (symTable.rootScope.lookup(names.fromTypeKind(TypeKind.XML))).symbol.type;\n+        BTypeSymbol typeSymbol = type.tsymbol;\n+        if (iExpr != null) {\n+            constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                    typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                    iExpr.pos, SOURCE);\n+            return constrainedType;\n+        }\n+        constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                bLangXMLTextLiteral.pos, SOURCE);\n+        return constrainedType;\n+    }\n+\n     private void checkInvocationParamAndReturnType(BLangInvocation iExpr) {\n         BType actualType = checkInvocationParam(iExpr);\n+        if (actualType.tag == symTable.xmlTextType.tag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTkzNA=="}, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNDYyMQ==", "bodyText": "The compiler crashes for the following btw.\npublic function main(string s) {\n    xml<never> b = 'xml:createText(s);\n}\nballerina-internal.log\n[2020-11-20 14:22:36,824] SEVERE {b7a.log.crash} - class org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef cannot be cast to class org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral (org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef and org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral are in unnamed module of loader 'app') \njava.lang.ClassCastException: class org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef cannot be cast to class org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral (org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef and org.wso2.ballerinalang.compiler.tree.expressions.BLangLiteral are in unnamed module of loader 'app')\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.checkInvocationParamAndReturnType(TypeChecker.java:5283)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.checkFunctionInvocationExpr(TypeChecker.java:4890)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.visit(TypeChecker.java:2639)\n\tat org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation.accept(BLangInvocation.java:115)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.checkExpr(TypeChecker.java:365)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeChecker.checkExpr(TypeChecker.java:344)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:683)\n\tat org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable.accept(BLangSimpleVariable.java:53)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2957)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2925)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeDef(SemanticAnalyzer.java:2917)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:1699)\n\tat org.wso2.ballerinalang.compiler.tree.statements.BLangSimpleVariableDef.accept(BLangSimpleVariableDef.java:46)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2957)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2925)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeStmt(SemanticAnalyzer.java:2921)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:389)\n\tat org.wso2.ballerinalang.compiler.tree.BLangBlockFunctionBody.accept(BLangBlockFunctionBody.java:58)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2957)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:361)\n\tat org.wso2.ballerinalang.compiler.tree.BLangFunction.accept(BLangFunction.java:73)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2957)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:2925)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeDef(SemanticAnalyzer.java:2917)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:277)\n\tat org.wso2.ballerinalang.compiler.tree.BLangPackage.accept(BLangPackage.java:163)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyze(SemanticAnalyzer.java:251)\n\tat io.ballerina.projects.internal.CompilerPhaseRunner.typeCheck(CompilerPhaseRunner.java:214)\n\tat io.ballerina.projects.internal.CompilerPhaseRunner.performTypeCheckPhases(CompilerPhaseRunner.java:113)\n\tat io.ballerina.projects.ModuleContext.compileInternal(ModuleContext.java:325)\n\tat io.ballerina.projects.ModuleCompilationState$3.compile(ModuleCompilationState.java:100)\n\tat io.ballerina.projects.ModuleCompilationState$3.generatePlatformSpecificCode(ModuleCompilationState.java:108)\n\tat io.ballerina.projects.ModuleContext.generatePlatformSpecificCode(ModuleContext.java:252)\n\tat io.ballerina.projects.JBallerinaBackend.performCodeGen(JBallerinaBackend.java:118)\n\tat io.ballerina.projects.JBallerinaBackend.<init>(JBallerinaBackend.java:108)\n\tat io.ballerina.projects.JBallerinaBackend.lambda$from$0(JBallerinaBackend.java:90)\n\tat java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1133)\n\tat io.ballerina.projects.PackageCompilation.getCompilerBackend(PackageCompilation.java:174)\n\tat io.ballerina.projects.JBallerinaBackend.from(JBallerinaBackend.java:89)\n\tat io.ballerina.cli.task.CompileTask.execute(CompileTask.java:64)\n\tat io.ballerina.cli.TaskExecutor.executeTasks(TaskExecutor.java:40)\n\tat io.ballerina.cli.cmd.RunCommand.execute(RunCommand.java:173)\n\tat java.base/java.util.Optional.ifPresent(Optional.java:183)\n\tat org.ballerinalang.tool.Main.main(Main.java:57)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527534621", "createdAt": "2020-11-20T08:53:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5193,8 +5203,32 @@ private BSymbol getLangLibMethod(BLangInvocation iExpr, BType bType) {\n         return funcSymbol;\n     }\n \n+    private BType createXMLNeverType(BLangInvocation iExpr, BLangXMLTextLiteral bLangXMLTextLiteral) {\n+        Scope.ScopeEntry entry = symTable.rootScope.lookup(names.fromTypeKind(TypeKind.NEVER));\n+        BType constraintType = (entry.symbol).type;\n+        BType constrainedType = new BXMLType(constraintType, null);\n+        BType type = (symTable.rootScope.lookup(names.fromTypeKind(TypeKind.XML))).symbol.type;\n+        BTypeSymbol typeSymbol = type.tsymbol;\n+        if (iExpr != null) {\n+            constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                    typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                    iExpr.pos, SOURCE);\n+            return constrainedType;\n+        }\n+        constrainedType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n+                typeSymbol.pkgID, constrainedType, typeSymbol.owner,\n+                bLangXMLTextLiteral.pos, SOURCE);\n+        return constrainedType;\n+    }\n+\n     private void checkInvocationParamAndReturnType(BLangInvocation iExpr) {\n         BType actualType = checkInvocationParam(iExpr);\n+        if (actualType.tag == symTable.xmlTextType.tag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTkzNA=="}, "originalCommit": {"oid": "cd78b7d130e189596b2fe9a4548042d35c48065c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzk4Njc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDowNTozNVrOH3JKZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDowNTozNVrOH3JKZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4Mzg0NQ==", "bodyText": "Shall we rename this to something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private BLangLiteral createSimpleLiteral(TemplateExpressionNode expressionNode) {\n          \n          \n            \n                private BLangLiteral createEmptyStringLiteral(TemplateExpressionNode expressionNode) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527583845", "createdAt": "2020-11-20T10:05:35Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4443,6 +4453,17 @@ private BLangIdentifier createIdentifier(Location pos, String value, Set<Whitesp\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createSimpleLiteral(TemplateExpressionNode expressionNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5deafab100ae0ccbce988ef5a22b65cd6375126f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzk5OTY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDowOToxM1rOH3JSJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDowOToxM1rOH3JSJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4NTgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        resultType = types.checkType(bLangXMLTextLiteral,\n          \n          \n            \n                                symTable.xmlNeverType, expType);\n          \n          \n            \n                        resultType = types.checkType(bLangXMLTextLiteral, symTable.xmlNeverType, expType);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527585831", "createdAt": "2020-11-20T10:09:13Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4020,6 +4020,13 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0).getKind() == NodeKind.LITERAL &&\n+                ((String) ((BLangLiteral) literalValues.get(0)).value).isEmpty()) {\n+            resultType = types.checkType(bLangXMLTextLiteral,\n+                    symTable.xmlNeverType, expType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODAwMzM0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoxMDowOVrOH3JUTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoxMDowOVrOH3JUTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4NjM4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n          \n          \n            \n                    List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n          \n          \n            \n                    List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n          \n          \n            \n                    checkStringTemplateExprs(literalValues, false);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527586381", "createdAt": "2020-11-20T10:10:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4020,6 +4020,13 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODAzNjc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoxODo1NlrOH3JoVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoxODo1NlrOH3JoVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5MTUwOQ==", "bodyText": "Shall we extract literalValues.get(0) out to a variable?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527591509", "createdAt": "2020-11-20T10:18:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4020,6 +4020,13 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0).getKind() == NodeKind.LITERAL &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODA2ODI0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoyNjo1OVrOH3J7AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoyNjo1OVrOH3J7AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5NjI4OA==", "bodyText": "Don't we also have to check if  literalValues.size() == 1?\nThe following also seems to be allowed atm\npublic function main() {\n    string x = \"foo\";\n    xml<never> b = xml `${\"\"} ${x}`;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527596288", "createdAt": "2020-11-20T10:26:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4020,6 +4020,13 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n         checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        if (literalValues.get(0).getKind() == NodeKind.LITERAL &&\n+                ((String) ((BLangLiteral) literalValues.get(0)).value).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODA4Njc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDozMTo1MFrOH3KGCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDozMTo1MFrOH3KGCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5OTExNA==", "bodyText": "Isn't this different from how we've modeled xml<never> at runtime? At runtime it is an xml:Text with never as the constraint, but at compile-time it is an xml with never as the constraint? Shall we stick to one approach?\nGiven that we don't have constraints for compile-time types, we'll probably have to change the runtime representation?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527599114", "createdAt": "2020-11-20T10:31:50Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -168,6 +168,7 @@\n     public final BXMLSubType xmlPIType = new BXMLSubType(TypeTags.XML_PI, Names.XML_PI);\n     public final BXMLSubType xmlCommentType = new BXMLSubType(TypeTags.XML_COMMENT, Names.XML_COMMENT);\n     public final BXMLSubType xmlTextType = new BXMLSubType(TypeTags.XML_TEXT, Names.XML_TEXT, Flags.READONLY);\n+    public final BType xmlNeverType = new BXMLType(neverType,  null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODEwMDM0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/binaryoperations/TypeTestExprTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDozNTowNFrOH3KN1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNDo0MTozMVrOH3m7Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMTEwOA==", "bodyText": "Given that the following is allowed\n    xml<never> x = xml ``;\n    'xml:Text t = x;\n    string s1 = t;\nshouldn't the following also be allowed?\n    xml<never> x = xml ``;\n    string s2 = x;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527601108", "createdAt": "2020-11-20T10:35:04Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/binaryoperations/TypeTestExprTest.java", "diffHunk": "@@ -125,9 +125,18 @@ public void testTypeTestExprNegative() {\n                 \"unnecessary condition: expression will always evaluate to 'true'\", 246, 9);\n         BAssertUtil.validateError(negativeResult, i++,\n                 \"incompatible types: 'foo|bar' will not be matched to 'baz|2'\", 255, 9);\n-        BAssertUtil.validateError(negativeResult, i,\n+        BAssertUtil.validateError(negativeResult, i++,\n                 \"incompatible types: '(string|int)' will not be matched to '(float|boolean)'\",\n                 262, 9);\n+        BAssertUtil.validateError(negativeResult, i++,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5MjgxNA==", "bodyText": "The spec doesn't talk about sub types of xml:Text being implicitly castable to string right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r527992814", "createdAt": "2020-11-20T21:58:00Z", "author": {"login": "suleka96"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/binaryoperations/TypeTestExprTest.java", "diffHunk": "@@ -125,9 +125,18 @@ public void testTypeTestExprNegative() {\n                 \"unnecessary condition: expression will always evaluate to 'true'\", 246, 9);\n         BAssertUtil.validateError(negativeResult, i++,\n                 \"incompatible types: 'foo|bar' will not be matched to 'baz|2'\", 255, 9);\n-        BAssertUtil.validateError(negativeResult, i,\n+        BAssertUtil.validateError(negativeResult, i++,\n                 \"incompatible types: '(string|int)' will not be matched to '(float|boolean)'\",\n                 262, 9);\n+        BAssertUtil.validateError(negativeResult, i++,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMTEwOA=="}, "originalCommit": {"oid": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3MTQ0Nw==", "bodyText": "Whatever works for T should generally work for subtypes of T too.\nSo since xml<never> is a subtype of xml:Text and xml:Text can be implicitly converted to string, xml<never> should be implicitly converted to string.\nThe spec also explicitly mentions the empty xml value under \"Casting and conversion\"\n\nIf a value of type xml:Text is the empty xml value, then it is implicitly converted to the empty string; otherwise the value is implicitly converted to a string that has a constituent character for each singleton item in the xml:Text sequence.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528071447", "createdAt": "2020-11-21T04:41:31Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/binaryoperations/TypeTestExprTest.java", "diffHunk": "@@ -125,9 +125,18 @@ public void testTypeTestExprNegative() {\n                 \"unnecessary condition: expression will always evaluate to 'true'\", 246, 9);\n         BAssertUtil.validateError(negativeResult, i++,\n                 \"incompatible types: 'foo|bar' will not be matched to 'baz|2'\", 255, 9);\n-        BAssertUtil.validateError(negativeResult, i,\n+        BAssertUtil.validateError(negativeResult, i++,\n                 \"incompatible types: '(string|int)' will not be matched to '(float|boolean)'\",\n                 262, 9);\n+        BAssertUtil.validateError(negativeResult, i++,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMTEwOA=="}, "originalCommit": {"oid": "d71d6f3ae13c8883458cc1c89b6ab725f0f478c5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDM4ODY3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjo0MjoyNlrOH4AvAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjo0MjoyNlrOH4AvAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NDMzNw==", "bodyText": "We need to check the target type too right? The following evaluates to true with this change.\npublic function main() {\n    xml x = xml ``;\n\n    boolean b = <any> x is byte; // becomes true\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528494337", "createdAt": "2020-11-23T06:42:26Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -655,6 +655,9 @@ public static boolean checkIsType(Type sourceType, Type targetType, List<TypePai\n                 if (sourceTypeTag == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n+                if (sourceTypeTag == TypeTags.XML_TAG) {\n+                    return ((BXmlType) sourceType).constraint.getTag() == TypeTags.NEVER_TAG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDM4OTU0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjo0MzowNFrOH4AvdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjo0MzowNFrOH4AvdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NDQ1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return checkIsType(source.constraint, targetConstraint,\n          \n          \n            \n                                unresolvedTypes);\n          \n          \n            \n                        return checkIsType(source.constraint, targetConstraint, unresolvedTypes);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528494453", "createdAt": "2020-11-23T06:43:04Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +896,27 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                return target.getTag() == TypeTags.XML_TAG;\n+            }\n+            return checkIsType(source.constraint, targetConstraint,\n+                    unresolvedTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDQwMTU3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjo0OToyMlrOH4A11w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjo0OToyMlrOH4A11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NjA4Nw==", "bodyText": "Shouldn't we check the target constraint here?\nShouldn't the following type test evaluate to false?\npublic function main() {\n    xml x = xml ``;\n\n    boolean b = <any> x is xml<'xml:Element>; // becomes true\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528496087", "createdAt": "2020-11-23T06:49:22Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +896,27 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                return target.getTag() == TypeTags.XML_TAG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDQyMzYzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzowMDo1NVrOH4BCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzowMDo1NVrOH4BCEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5OTIxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (expressionNode.content().size() == 0) {\n          \n          \n            \n                    if (expressionNode.content().isEmpty()) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528499219", "createdAt": "2020-11-23T07:00:55Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3236,6 +3241,11 @@ public BLangNode transform(XMLTextNode xmlTextNode) {\n \n     private BLangNode createXMLLiteral(TemplateExpressionNode expressionNode) {\n         BLangXMLTextLiteral xmlTextLiteral = (BLangXMLTextLiteral) TreeBuilder.createXMLTextLiteralNode();\n+        if (expressionNode.content().size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDQzNTA1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzowNTo1N1rOH4BIUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzowNTo1N1rOH4BIUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMDgxOA==", "bodyText": "Shouldn't we handle the union scenario also?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528500818", "createdAt": "2020-11-23T07:05:57Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -925,13 +926,47 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isConversionExprXMLNever(BLangTypeConversionExpr conversionExpr) {\n+        if (conversionExpr.expr.type.tag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration\n+            while (conversionExpressionType.constraint.tag == TypeTags.XML) {\n+                conversionExpressionType = (BXMLType) conversionExpressionType.constraint;\n+            }\n+            if (conversionExpressionType.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return false;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDQ0NTg3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzoxMToxNFrOH4BOSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzoxMzoyMFrOH4BROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMjM0NA==", "bodyText": "May have to check the scenario where the actualType is a union of xml too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528502344", "createdAt": "2020-11-23T07:11:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1897,6 +1932,8 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMzA5Ng==", "bodyText": "The following panics at runtime.\npublic function main() {\n    xml<never>|'xml:Text x = xml `hello`;\n    string str = x;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528503096", "createdAt": "2020-11-23T07:13:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1897,6 +1932,8 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMjM0NA=="}, "originalCommit": {"oid": "b42acb4b33c89d25f38e44aeb991c32e8dd3037a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjUxNzA2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjowODowNlrOH4Unwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjowODowNlrOH4Unwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMDE2Mg==", "bodyText": "Given that this logic is relevant only for string, I think we should have the case for STRING_TAG separately and move this logic and the sourceTypeTag == targetTypeTag check there.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528820162", "createdAt": "2020-11-23T16:08:06Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -655,6 +655,9 @@ public static boolean checkIsType(Type sourceType, Type targetType, List<TypePai\n                 if (sourceTypeTag == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n+                if (sourceTypeTag == TypeTags.XML_TAG && targetTypeTag == TypeTags.STRING_TAG) {\n+                    return ((BXmlType) sourceType).constraint.getTag() == TypeTags.NEVER_TAG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjUyNTk5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxMDowN1rOH4UtJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzo1MzozMVrOH6PWUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMTU0MQ==", "bodyText": "We need to check the members of the union right? Just being a union is not enough?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528821541", "createdAt": "2020-11-23T16:10:07Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +896,28 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                return targetConstraint.getTag() == TypeTags.UNION_TAG ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0MDE1OA==", "bodyText": "Can there be types like xml<'xml:Text | `xml: Element>  where the constraint is a user defined union?\nif not then this is correct right? constraint is a union only when it is of type xml", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528840158", "createdAt": "2020-11-23T16:35:39Z", "author": {"login": "suleka96"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +896,28 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                return targetConstraint.getTag() == TypeTags.UNION_TAG ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMTU0MQ=="}, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzMDkzMQ==", "bodyText": "There can be, right? For example, the following type test evaluates to true atm.\npublic function main() {\n    xml x = xml ``;\n\n    boolean b = <any> x is xml<'xml:Element|'xml:Comment>; // becomes true\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530830931", "createdAt": "2020-11-26T07:53:31Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +896,28 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                return targetConstraint.getTag() == TypeTags.UNION_TAG ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMTU0MQ=="}, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjU2MDExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNzoyMlrOH4VB8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODozMTo1NFrOH6Ql4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNjg2NQ==", "bodyText": "Shouldn't we be calling isConversionExprXMLNeverUnion recursively for all members here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528826865", "createdAt": "2020-11-23T16:17:22Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,51 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isConversionExprXMLNeverUnion(BLangTypeConversionExpr conversionExpr) {\n+        if (conversionExpr.expr.type.tag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration\n+            while (conversionExpressionType.constraint.tag == TypeTags.XML) {\n+                conversionExpressionType = (BXMLType) conversionExpressionType.constraint;\n+            }\n+            if (conversionExpressionType.constraint.tag == TypeTags.NEVER ||\n+                    conversionExpressionType.constraint.tag == TypeTags.XML_TEXT) {\n+                return true;\n+            }\n+            return false;\n+        }\n+        if (conversionExpr.expr.type.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) conversionExpr.expr.type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1OTQzMw==", "bodyText": "We should just check if each member is assignable to xmlTextType right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528859433", "createdAt": "2020-11-23T17:03:03Z", "author": {"login": "suleka96"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,51 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isConversionExprXMLNeverUnion(BLangTypeConversionExpr conversionExpr) {\n+        if (conversionExpr.expr.type.tag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration\n+            while (conversionExpressionType.constraint.tag == TypeTags.XML) {\n+                conversionExpressionType = (BXMLType) conversionExpressionType.constraint;\n+            }\n+            if (conversionExpressionType.constraint.tag == TypeTags.NEVER ||\n+                    conversionExpressionType.constraint.tag == TypeTags.XML_TEXT) {\n+                return true;\n+            }\n+            return false;\n+        }\n+        if (conversionExpr.expr.type.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) conversionExpr.expr.type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNjg2NQ=="}, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg1MTI5Ng==", "bodyText": "Added a comment for isAllXMLMembers, the name seems to be misleading.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530851296", "createdAt": "2020-11-26T08:31:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,51 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isConversionExprXMLNeverUnion(BLangTypeConversionExpr conversionExpr) {\n+        if (conversionExpr.expr.type.tag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration\n+            while (conversionExpressionType.constraint.tag == TypeTags.XML) {\n+                conversionExpressionType = (BXMLType) conversionExpressionType.constraint;\n+            }\n+            if (conversionExpressionType.constraint.tag == TypeTags.NEVER ||\n+                    conversionExpressionType.constraint.tag == TypeTags.XML_TEXT) {\n+                return true;\n+            }\n+            return false;\n+        }\n+        if (conversionExpr.expr.type.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) conversionExpr.expr.type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNjg2NQ=="}, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjU2MjgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNzo1NFrOH4VDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNzo1NFrOH4VDkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNzI4Mg==", "bodyText": "Is the name accurate here if we are checking for text also?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528827282", "createdAt": "2020-11-23T16:17:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,51 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isConversionExprXMLNeverUnion(BLangTypeConversionExpr conversionExpr) {\n+        if (conversionExpr.expr.type.tag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration\n+            while (conversionExpressionType.constraint.tag == TypeTags.XML) {\n+                conversionExpressionType = (BXMLType) conversionExpressionType.constraint;\n+            }\n+            if (conversionExpressionType.constraint.tag == TypeTags.NEVER ||\n+                    conversionExpressionType.constraint.tag == TypeTags.XML_TEXT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjU2OTM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxOToxOFrOH4VHgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjo1MDoxMFrOH4WeAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyODI4OA==", "bodyText": "What are we trying to check here? Why do we need to go into the cast and check the expression?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528828288", "createdAt": "2020-11-23T16:19:18Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4958,7 +4958,8 @@ public void visit(BLangTypeConversionExpr conversionExpr) {\n             return;\n         }\n         conversionExpr.typeNode = rewrite(conversionExpr.typeNode, env);\n-        if (conversionExpr.type.tag == TypeTags.STRING && conversionExpr.expr.type.tag == TypeTags.XML_TEXT) {\n+        if (conversionExpr.type.tag == TypeTags.STRING && (conversionExpr.expr.type.tag == TypeTags.XML_TEXT ||\n+                types.isConversionExprXMLNeverUnion(conversionExpr))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MDQzMg==", "bodyText": "To  make sure we rewrite the xml for implicit casting", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r528850432", "createdAt": "2020-11-23T16:50:10Z", "author": {"login": "suleka96"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4958,7 +4958,8 @@ public void visit(BLangTypeConversionExpr conversionExpr) {\n             return;\n         }\n         conversionExpr.typeNode = rewrite(conversionExpr.typeNode, env);\n-        if (conversionExpr.type.tag == TypeTags.STRING && conversionExpr.expr.type.tag == TypeTags.XML_TEXT) {\n+        if (conversionExpr.type.tag == TypeTags.STRING && (conversionExpr.expr.type.tag == TypeTags.XML_TEXT ||\n+                types.isConversionExprXMLNeverUnion(conversionExpr))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyODI4OA=="}, "originalCommit": {"oid": "78e51fa1f881672486cca38261db490362facf36"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTQxODAwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODowNTozNFrOH6Ptcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoxMToxMlrOH6P4ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzNjg1MQ==", "bodyText": "The following fails since we don't add  Flags.READONLY for xmlNeverType.\npublic function main() {\n    xml<never> w =  xml ``;\n    string|'xml:Text x = w;\n}\nWe should probably also update the isInherentlyImmutableType methods at compile-time and runtime to return true for xml<never>.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530836851", "createdAt": "2020-11-26T08:05:34Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -168,6 +168,7 @@\n     public final BXMLSubType xmlPIType = new BXMLSubType(TypeTags.XML_PI, Names.XML_PI);\n     public final BXMLSubType xmlCommentType = new BXMLSubType(TypeTags.XML_COMMENT, Names.XML_COMMENT);\n     public final BXMLSubType xmlTextType = new BXMLSubType(TypeTags.XML_TEXT, Names.XML_TEXT, Flags.READONLY);\n+    public final BType xmlNeverType = new BXMLType(neverType,  null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzOTcxMA==", "bodyText": "The following should also work.\npublic function main() {\n    xml<never> & readonly w =  xml ``;\n}\nFails with\nERROR [test.bal:(2:32,2:38)] incompatible types: expected 'xml<other> & readonly', found 'xml<never>'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530839710", "createdAt": "2020-11-26T08:11:12Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -168,6 +168,7 @@\n     public final BXMLSubType xmlPIType = new BXMLSubType(TypeTags.XML_PI, Names.XML_PI);\n     public final BXMLSubType xmlCommentType = new BXMLSubType(TypeTags.XML_COMMENT, Names.XML_COMMENT);\n     public final BXMLSubType xmlTextType = new BXMLSubType(TypeTags.XML_TEXT, Names.XML_TEXT, Flags.READONLY);\n+    public final BType xmlNeverType = new BXMLType(neverType,  null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzNjg1MQ=="}, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTQyNTc0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODowNzo0MFrOH6PxyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODowNzo0MFrOH6PxyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzNzk2MA==", "bodyText": "Shall we use a different variable name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530837960", "createdAt": "2020-11-26T08:07:40Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4026,7 +4026,15 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n     }\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n-        checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        checkStringTemplateExprs(literalValues, false);\n+        BLangExpression langExpression = literalValues.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTQ1Nzg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoxNzoxNVrOH6QFSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoxNzoxNVrOH6QFSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0Mjk1Mg==", "bodyText": "We try avoid using streams due to the impact on performance for trivial usage. Shall we replace this with a simple for loop?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530842952", "createdAt": "2020-11-26T08:17:15Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1898,6 +1941,17 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {\n+            return isXMLTypeAssignable(actualType, targetType, new HashSet<>());\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) actualType);\n+        }\n+        return false;\n+    }\n+\n+    public boolean isAllXMLMembers(BUnionType actualType) {\n+        if (actualType.getMemberTypes().stream().allMatch(t -> TypeTags.isXMLTypeTag(t.tag))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTQ2MTk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoxODozNFrOH6QH1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoxODozNFrOH6QH1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0MzYwNQ==", "bodyText": "The method name is misleading here, right? The check is if everything is an 'xml:Text?\nAlso, why do we need to check if it is xml first, before checking this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530843605", "createdAt": "2020-11-26T08:18:34Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1898,6 +1941,17 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {\n+            return isXMLTypeAssignable(actualType, targetType, new HashSet<>());\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) actualType);\n+        }\n+        return false;\n+    }\n+\n+    public boolean isAllXMLMembers(BUnionType actualType) {\n+        if (actualType.getMemberTypes().stream().allMatch(t -> TypeTags.isXMLTypeTag(t.tag))) {\n+            return actualType.getMemberTypes().stream().allMatch(t -> isAssignable(t, symTable.xmlTextType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTQ3MDI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoyMDo1MFrOH6QM2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoyMDo1MFrOH6QM2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0NDg5MQ==", "bodyText": "Can't we check if\nTypeTags.isXMLTypeTag(sourceTag) && (TypeTags.isXMLTypeTag(targetTag) || targetTag == TypeTags.STRING)\nand move the subsequent checks into isXMLTypeAssignable instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530844891", "createdAt": "2020-11-26T08:20:50Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -614,7 +614,8 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n             return true;\n         }\n \n-        if (TypeTags.isXMLTypeTag(sourceTag) && TypeTags.isXMLTypeTag(targetTag)) {\n+        if ((TypeTags.isXMLTypeTag(sourceTag) && TypeTags.isXMLTypeTag(targetTag)) ||\n+                (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTQ3NjY1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoyMjozNFrOH6QQng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoyMjozNFrOH6QQng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0NTg1NA==", "bodyText": "Shall we refactor this like\nif (sourceTag == TypeTags.XML) {\n   ............\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530845854", "createdAt": "2020-11-26T08:22:34Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,55 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTQ5OTE5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoyODozNVrOH6QeOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoyODozNVrOH6QeOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0OTMzOA==", "bodyText": "Can't we clean this up also as\n} else if (targetType.tag == TypeTags.STRING) {\n\n}\n\nand move all the xml checks into it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530849338", "createdAt": "2020-11-26T08:28:35Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1898,6 +1941,17 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {\n+            return isXMLTypeAssignable(actualType, targetType, new HashSet<>());\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) actualType);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTUwNDU3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODozMDowM1rOH6QhpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODozMDowM1rOH6QhpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg1MDIxMw==", "bodyText": "Shouldn't this check return true when checking source string|'xml:Text vs target string.\nThe following panics at runtime atm.\npublic function main() {\n    'xml:Text w =  xml ``;\n    string|'xml:Text x = w;\n\n    string y = x;\n}\nballerina-internal.log\n[2020-11-26 13:59:34,798] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app') \njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.XmlText cannot be cast to class io.ballerina.runtime.api.values.BString (io.ballerina.runtime.internal.values.XmlText and io.ballerina.runtime.api.values.BString are in unnamed module of loader 'app')\n\tat test.main(test.bal:5)\n\tat $_init.$lambda$main$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\nSame applies when it's xml<never> instead of 'xml:Text.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530850213", "createdAt": "2020-11-26T08:30:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1898,6 +1941,17 @@ public boolean isImplicityCastable(BType actualType, BType targetType) {\n             return true;\n         } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML_TEXT) {\n             return true;\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.XML) {\n+            return isXMLTypeAssignable(actualType, targetType, new HashSet<>());\n+        } else if (targetType.tag == TypeTags.STRING && actualType.tag == TypeTags.UNION) {\n+            return isAllXMLMembers((BUnionType) actualType);\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTgwOTk3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0NDo0MVrOH6Tc0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0NDo0MVrOH6Tc0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5ODEzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //Revisit and check xml<xml<constraint>>> on chained iteration\n          \n          \n            \n                        // Revisit and check xml<xml<constraint>>> on chained iteration.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530898130", "createdAt": "2020-11-26T09:44:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -926,13 +927,55 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (targetTag == TypeTags.XML_TEXT && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint != null) {\n+                return source.constraint.tag == TypeTags.NEVER;\n+            }\n+        }\n+        if (targetTag == TypeTags.STRING && sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (source.constraint.tag == TypeTags.NEVER) {\n+                return true;\n+            }\n+            return isAssignable(source.constraint, targetType, unresolvedTypes);\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLConversionExprCastableToString(BLangTypeConversionExpr conversionExpr) {\n+        int exprTag = conversionExpr.expr.type.tag;\n+        if (exprTag == TypeTags.XML_TEXT) {\n+            return true;\n+        }\n+        if (exprTag == TypeTags.XML) {\n+            BXMLType conversionExpressionType = (BXMLType) conversionExpr.expr.type;\n+            //Revisit and check xml<xml<constraint>>> on chained iteration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTgyNTYzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0ODozNFrOH6TmuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0OTowMVrOH6Tn2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDY2NQ==", "bodyText": "I think we need to improve this a bit to handle scenarios where the target may also be a union. Basically we need a method that accepts the source and the target, and checks if the target has a subtype of string and the source has a subtype of xml:Text.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530900665", "createdAt": "2020-11-26T09:48:34Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4958,7 +4958,7 @@ public void visit(BLangTypeConversionExpr conversionExpr) {\n             return;\n         }\n         conversionExpr.typeNode = rewrite(conversionExpr.typeNode, env);\n-        if (conversionExpr.type.tag == TypeTags.STRING && conversionExpr.expr.type.tag == TypeTags.XML_TEXT) {\n+        if (conversionExpr.type.tag == TypeTags.STRING && types.isXMLConversionExprCastableToString(conversionExpr)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDk1Mw==", "bodyText": "The following also doesn't work atm.\ntype FooBar \"foo\"|\"bar\";\n\npublic function main() {\n    'xml:Text t = xml `foo`;\n    FooBar u = <FooBar> t;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r530900953", "createdAt": "2020-11-26T09:49:01Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4958,7 +4958,7 @@ public void visit(BLangTypeConversionExpr conversionExpr) {\n             return;\n         }\n         conversionExpr.typeNode = rewrite(conversionExpr.typeNode, env);\n-        if (conversionExpr.type.tag == TypeTags.STRING && conversionExpr.expr.type.tag == TypeTags.XML_TEXT) {\n+        if (conversionExpr.type.tag == TypeTags.STRING && types.isXMLConversionExprCastableToString(conversionExpr)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDY2NQ=="}, "originalCommit": {"oid": "5fb6a48903ce773c3cb34094f31a9a2541280e99"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzMwOTU4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNDowMzowNFrOIKQhHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNDowMzowNFrOIKQhHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNzI5Mg==", "bodyText": "Shall we fix the alignment here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547627292", "createdAt": "2020-12-23T04:03:04Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -138,6 +138,9 @@\n                                                          new Module(BALLERINA_BUILTIN_PKG_PREFIX, XML_LANG_LIB, null),\n                                                          TypeTags.XML_TEXT_TAG, true);\n \n+    public static final Type TYPE_XML_NEVER = new BXmlType(TypeConstants.XML_TNAME, new BNeverType(EMPTY_MODULE),\n+                                                EMPTY_MODULE, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDA5ODI2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozNTo0NlrOIKYb5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwODoyMjoxMFrOINo0UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NzAyOQ==", "bodyText": "Shouldn't we handle the xml:Text scenario here?\nThe following results in a bad, sad error btw.\npublic function main() {\n    'xml:Text t = \"foo\";\n\n    boolean b = <any> t is string;\n}\nballerina-internal.log\n[2020-12-23 13:03:40,964] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app') \njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.BmpStringValue cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.BmpStringValue and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app')\n\tat test.main(test.bal:2)\n\tat $_init.$lambda$main$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\n\tat java.base/java.lang.Thread.run(Thread.java:834)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547757029", "createdAt": "2020-12-23T07:35:46Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -656,6 +656,14 @@ public static boolean checkIsType(Type sourceType, Type targetType, List<TypePai\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n                 return sourceTypeTag == targetTypeTag;\n+            case TypeTags.STRING_TAG:\n+                if (sourceTypeTag == TypeTags.FINITE_TYPE_TAG) {\n+                    return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n+                }\n+                if (sourceTypeTag == TypeTags.XML_TAG) {\n+                    return ((BXmlType) sourceType).constraint.getTag() == TypeTags.NEVER_TAG;\n+                }\n+                return sourceTypeTag == targetTypeTag;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NzY1NA==", "bodyText": "There's also a separate issue here (not introduce by this PR) when type checking unions against simple basic types - #27627", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547757654", "createdAt": "2020-12-23T07:36:28Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -656,6 +656,14 @@ public static boolean checkIsType(Type sourceType, Type targetType, List<TypePai\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n                 return sourceTypeTag == targetTypeTag;\n+            case TypeTags.STRING_TAG:\n+                if (sourceTypeTag == TypeTags.FINITE_TYPE_TAG) {\n+                    return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n+                }\n+                if (sourceTypeTag == TypeTags.XML_TAG) {\n+                    return ((BXmlType) sourceType).constraint.getTag() == TypeTags.NEVER_TAG;\n+                }\n+                return sourceTypeTag == targetTypeTag;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NzAyOQ=="}, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE3MTE1Mw==", "bodyText": "@suleka96, like you pointed out 'xml:Text t = \"foo\"; should have resulted in a compilation error.\nBut can you also check the runtime behaviour here when t is 'xml:Text t = xml `foo`;?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r551171153", "createdAt": "2021-01-04T08:22:10Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -656,6 +656,14 @@ public static boolean checkIsType(Type sourceType, Type targetType, List<TypePai\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n                 return sourceTypeTag == targetTypeTag;\n+            case TypeTags.STRING_TAG:\n+                if (sourceTypeTag == TypeTags.FINITE_TYPE_TAG) {\n+                    return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n+                }\n+                if (sourceTypeTag == TypeTags.XML_TAG) {\n+                    return ((BXmlType) sourceType).constraint.getTag() == TypeTags.NEVER_TAG;\n+                }\n+                return sourceTypeTag == targetTypeTag;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NzAyOQ=="}, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDE1MDg0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0Njo1MlrOIKY-SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0Njo1MlrOIKY-SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2NTgzMg==", "bodyText": "Why are we checking for an exact match here?\nb3 below should also be true, right?\npublic function main() {\n    xml<never> x = xml ``;\n    any a = x;\n\n    boolean b1 = a is 'xml:Text; // true\n    boolean b2 = a is xml; // true\n\n    xml<'xml:Text|'xml:Comment> x2 = x; // allowed at compile-time\n    boolean b3 = a is xml<'xml:Text|'xml:Comment>; // false\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547765832", "createdAt": "2020-12-23T07:46:52Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +901,33 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                if (targetConstraint.getTag() == TypeTags.UNION_TAG) {\n+                    List<Type> constraintTypes = ((BUnionType) targetConstraint).getMemberTypes();\n+                    List<Type> builtinXMLConstraintTypes = ((BUnionType) ((BXmlType)\n+                            TYPE_XML).constraint).getMemberTypes();\n+                    return builtinXMLConstraintTypes.equals(constraintTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDE3OTAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1Mjo0MVrOIKZQng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1Mjo0MVrOIKZQng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3MDUyNg==", "bodyText": "I think we can make this the first check here and skip the rest of the checks sooner.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547770526", "createdAt": "2020-12-23T07:52:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4036,7 +4036,15 @@ private boolean isXmlNamespaceAttribute(BLangXMLAttribute attribute) {\n     }\n \n     public void visit(BLangXMLTextLiteral bLangXMLTextLiteral) {\n-        checkStringTemplateExprs(bLangXMLTextLiteral.textFragments, false);\n+        List<BLangExpression> literalValues = bLangXMLTextLiteral.textFragments;\n+        checkStringTemplateExprs(literalValues, false);\n+        BLangExpression xmlExpression = literalValues.get(0);\n+        if (xmlExpression.getKind() == NodeKind.LITERAL &&\n+                ((String) ((BLangLiteral) xmlExpression).value).isEmpty() &&\n+                literalValues.size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDIwNTQzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1NzozOFrOIKZiBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1NzozOFrOIKZiBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NDk4Mg==", "bodyText": "Shall we change the name of the parameter? conversionExprType isn't quite relevant here, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547774982", "createdAt": "2020-12-23T07:57:38Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n+            return true;\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLExprCastableToString(BType target, BType source) {\n+        if (target.tag == TypeTags.STRING && isXMLSourceCastableToString(source)) {\n+            return true;\n+        }\n+        if (target.tag == TypeTags.UNION || target.tag == TypeTags.FINITE) {\n+            return isAssignable(target, symTable.stringType) && isXMLSourceCastableToString(source);\n+        }\n+        return false;\n+    }\n+\n+    public boolean isXMLSourceCastableToString(BType conversionExprType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDIxNDUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1OToyNVrOIKZn2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODowMDowOVrOIKZpqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NjQ3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n          \n          \n            \n                    } else if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547776475", "createdAt": "2020-12-23T07:59:25Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NjkzOA==", "bodyText": "This change is not needed if we definitely return in the if block above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547776938", "createdAt": "2020-12-23T08:00:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NjQ3NQ=="}, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDMwOTUxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoxODoxMVrOIKalHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoxODoxMVrOIKalHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc5MjE1Ng==", "bodyText": "If source.constraint == null can't we return false here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547792156", "createdAt": "2020-12-23T08:18:11Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDMzMDExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoyMTo0NFrOIKayWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoyMTo0NFrOIKayWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc5NTU0Nw==", "bodyText": "Just for consistency with other methods shall we switch the parameters here?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean isXMLExprCastableToString(BType target, BType source) {\n          \n          \n            \n                public boolean isXMLExprCastableToString(BType source, BType target) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547795547", "createdAt": "2020-12-23T08:21:44Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n+            return true;\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLExprCastableToString(BType target, BType source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDM2MDI0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoyNzozNlrOIKbF6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoyNzozNlrOIKbF6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgwMDU1Mg==", "bodyText": "I'm not sure if the first part of this check is correct in the case of a union? Shouldn't we check if  at least one member of the target union is assignable to string instead (e.g., int|string)?\nPlease add tests to cover the same.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547800552", "createdAt": "2020-12-23T08:27:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n+            return true;\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLExprCastableToString(BType target, BType source) {\n+        if (target.tag == TypeTags.STRING && isXMLSourceCastableToString(source)) {\n+            return true;\n+        }\n+        if (target.tag == TypeTags.UNION || target.tag == TypeTags.FINITE) {\n+            return isAssignable(target, symTable.stringType) && isXMLSourceCastableToString(source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDM4NDcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODozMjoxOVrOIKbWQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODozMjoxOVrOIKbWQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgwNDczOQ==", "bodyText": "Can't we directly check isAssignable(source, symTable.xmlTextType); instead of isXMLSourceCastableToString(source)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r547804739", "createdAt": "2020-12-23T08:32:19Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -921,13 +917,74 @@ private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<Type\n                     return isAssignable(sourceType, target.constraint, unresolvedTypes);\n                 }\n                 BXMLType source = (BXMLType) sourceType;\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    if (sourceTag == targetTag) {\n+                        return true;\n+                    }\n+                    return isAssignable(source, target.constraint, unresolvedTypes);\n+                }\n                 return isAssignable(source.constraint, target.constraint, unresolvedTypes);\n             }\n             return true;\n         }\n+        if (sourceTag == TypeTags.XML) {\n+            BXMLType source = (BXMLType) sourceType;\n+            if (targetTag == TypeTags.XML_TEXT) {\n+                if (source.constraint != null) {\n+                    return source.constraint.tag == TypeTags.NEVER;\n+                }\n+            }\n+            if (targetTag == TypeTags.STRING) {\n+                if (source.constraint.tag == TypeTags.NEVER) {\n+                    return true;\n+                }\n+                return isAssignable(source.constraint, targetType, unresolvedTypes);\n+            }\n+        }\n+        if (sourceTag == TypeTags.XML_TEXT && targetTag == TypeTags.STRING) {\n+            return true;\n+        }\n         return sourceTag == targetTag;\n     }\n \n+    public boolean isXMLExprCastableToString(BType target, BType source) {\n+        if (target.tag == TypeTags.STRING && isXMLSourceCastableToString(source)) {\n+            return true;\n+        }\n+        if (target.tag == TypeTags.UNION || target.tag == TypeTags.FINITE) {\n+            return isAssignable(target, symTable.stringType) && isXMLSourceCastableToString(source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfc96c6f444cbed9ac8b821c614ad1ead8418e9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDA5ODMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMjo1OTo1MlrOIRUUMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMjo1OTo1MlrOIRUUMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAyOTU1NA==", "bodyText": "shall we extract the method from this switch-case, something like createXmlTemplateLiteral", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555029554", "createdAt": "2021-01-11T12:59:52Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2158,7 +2158,12 @@ public BLangNode transform(TemplateExpressionNode expressionNode) {\n         SyntaxKind kind = expressionNode.kind();\n         switch (kind) {\n             case XML_TEMPLATE_EXPRESSION:\n-                SyntaxKind contentKind = expressionNode.content().get(0).kind();\n+                SyntaxKind contentKind;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f5ec847ea62986316413fd98451371644eb061"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDExNzAyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzowNTozOFrOIRUf7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzowNTozOFrOIRUf7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAzMjU1OQ==", "bodyText": "shall we directly pass the position, it feels weired to send in an expression to a function that create empty string literal.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555032559", "createdAt": "2021-01-11T13:05:38Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4601,6 +4611,17 @@ private BLangIdentifier createIdentifier(Location pos, String value, Set<Whitesp\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createEmptyStringLiteral(TemplateExpressionNode expressionNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f5ec847ea62986316413fd98451371644eb061"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NzMxMDk5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNTo0MDozOFrOIRymFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNTo0MDozOFrOIRymFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUyNTY1Mw==", "bodyText": "shall we directly call checkIsUnionType", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555525653", "createdAt": "2021-01-12T05:40:38Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -893,20 +907,30 @@ private static boolean checkIsMapType(MapValue sourceVal, BRecordType sourceType\n     }\n \n     private static boolean checkIsXMLType(Type sourceType, Type targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n+        int sourceTag = sourceType.getTag();\n+        if (sourceTag == TypeTags.FINITE_TYPE_TAG) {\n             return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n         }\n+\n         BXmlType target = ((BXmlType) targetType);\n-        if (sourceType.getTag() == TypeTags.XML_TAG) {\n+        if (sourceTag == TypeTags.XML_TAG) {\n             Type targetConstraint = target.constraint;\n             // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n             while (target.constraint.getTag() == TypeTags.XML_TAG) {\n                 target = (BXmlType) target.constraint;\n                 targetConstraint = target.constraint;\n             }\n-            return checkIsType(((BXmlType) sourceType).constraint, targetConstraint,\n-                               unresolvedTypes);\n-        } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+            BXmlType source = (BXmlType) sourceType;\n+            if (source.constraint.getTag() == TypeTags.NEVER_TAG) {\n+                if (targetConstraint.getTag() == TypeTags.UNION_TAG) {\n+                    return checkIsType(source, targetConstraint, unresolvedTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f5ec847ea62986316413fd98451371644eb061"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5OTMzNjMwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNTowMTowMlrOISFmXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNTowMTowMlrOISFmXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgzNzAyMA==", "bodyText": "Can't we just do, bLiteral.type = symTable.stringType;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555837020", "createdAt": "2021-01-12T15:01:02Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4601,6 +4615,17 @@ private BLangIdentifier createIdentifier(Location pos, String value, Set<Whitesp\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createEmptyStringLiteral(Location pos) {\n+        BLangLiteral bLiteral = (BLangLiteral) TreeBuilder.createLiteralExpression();\n+        int typeTag = TypeTags.STRING;\n+        bLiteral.pos = pos;\n+        bLiteral.type = symTable.getTypeFromTag(typeTag);\n+        bLiteral.type.tag = typeTag;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe5655e7ff9b24b475341f8c743ec5706c53e09"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5OTcwMzkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNjoxNDo0NlrOISJKvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNjoxNDo0NlrOISJKvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg5NTQ4NQ==", "bodyText": "It is not needed to set the tag here. symTable.stringType contains the tag. Please check it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26689#discussion_r555895485", "createdAt": "2021-01-12T16:14:46Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4633,6 +4647,16 @@ private BLangIdentifier createIdentifier(Location pos, String value, Set<Whitesp\n         return bLIdentifer;\n     }\n \n+    private BLangLiteral createEmptyStringLiteral(Location pos) {\n+        BLangLiteral bLiteral = (BLangLiteral) TreeBuilder.createLiteralExpression();\n+        bLiteral.pos = pos;\n+        bLiteral.type = symTable.stringType;\n+        bLiteral.type.tag = TypeTags.STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e99abecb2fe501c557cb26da91025ab18a068e"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4701, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}