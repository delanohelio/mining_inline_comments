{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjcyMzAx", "number": 23319, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjowOTo1MVrOD9QIHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoxMjowOVrOD-GxKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTUzOTQ4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjowOTo1MVrOGWoqcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTozNTo0MFrOGWzNOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4ODA4Mw==", "bodyText": "In here we have to check whether next tokens belong to a type-cast-expr. It seems it is not possible unless we process up to the >. i.e. next token being an @ or isTypeStartingToken does not always imply a type-cast-expr start.\nEven if we processed up to >, still there's ambiguity.\ne.g.  a <<b> c  could mean either a << (b > c) or a < (<b> c)\nSo feel like it is better not  allow a <<int> b; to be parsed as a type-cast-expr.\nOnly  a < <int> b; is allowed. That way we don't need nodes for <<, >>, >>> at parser level. WDT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426388083", "createdAt": "2020-05-18T06:09:51Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3684,6 +3700,17 @@ private STNode parseExpressionRhs(SyntaxKind tokenKind, OperatorPrecedence curre\n             }\n         }\n \n+        // TODO: Add a good comment\n+        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {\n+            tokenKind = SyntaxKind.DOUBLE_LT_TOKEN;\n+        } else if (tokenKind == SyntaxKind.GT_TOKEN && peek(2).kind == SyntaxKind.GT_TOKEN) {\n+            if (peek(3).kind == SyntaxKind.GT_TOKEN) {\n+                tokenKind = SyntaxKind.TRIPPLE_GT_TOKEN;\n+            } else {\n+                tokenKind = SyntaxKind.DOUBLE_GT_TOKEN;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2MDgyNw==", "bodyText": "According to the spec, type-cast has higher-precedence over shift/compare expressions. So a <<b> c is correct to be parsed as a <(<b> c). If the user wants the other behaviour, he can use parenthesis.\nBut yea, like you've said, we have to go and parse the component after < to determine the operator. Let me have a look and get back.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426560827", "createdAt": "2020-05-18T11:35:40Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3684,6 +3700,17 @@ private STNode parseExpressionRhs(SyntaxKind tokenKind, OperatorPrecedence curre\n             }\n         }\n \n+        // TODO: Add a good comment\n+        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {\n+            tokenKind = SyntaxKind.DOUBLE_LT_TOKEN;\n+        } else if (tokenKind == SyntaxKind.GT_TOKEN && peek(2).kind == SyntaxKind.GT_TOKEN) {\n+            if (peek(3).kind == SyntaxKind.GT_TOKEN) {\n+                tokenKind = SyntaxKind.TRIPPLE_GT_TOKEN;\n+            } else {\n+                tokenKind = SyntaxKind.DOUBLE_GT_TOKEN;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4ODA4Mw=="}, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzE3MDM5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowMTowM1rOGW4ioA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODowMDowN1rOGX_tSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0ODIyNA==", "bodyText": "Can we merge this code, with the below switch case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426648224", "createdAt": "2020-05-18T14:01:03Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3684,6 +3700,17 @@ private STNode parseExpressionRhs(SyntaxKind tokenKind, OperatorPrecedence curre\n             }\n         }\n \n+        // TODO: Add a good comment\n+        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNDIxOA==", "bodyText": "We hv operator precedence check in between which decides whether to return from method or continue below. We have to process >>, >>> before that check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427814218", "createdAt": "2020-05-20T08:00:07Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3684,6 +3700,17 @@ private STNode parseExpressionRhs(SyntaxKind tokenKind, OperatorPrecedence curre\n             }\n         }\n \n+        // TODO: Add a good comment\n+        if (tokenKind == SyntaxKind.LT_TOKEN && peek(2).kind == SyntaxKind.LT_TOKEN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0ODIyNA=="}, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzE4MDM3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowMzoyM1rOGW4pCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowMzoyM1rOGW4pCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0OTg2Nw==", "bodyText": "we need to validate whether there are any whitespaces/trivia between the tokens. Can log an error and continue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426649867", "createdAt": "2020-05-18T14:03:23Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8782,4 +8821,38 @@ private STNode parseSelectKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse double-LT token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseDoubleLTToken() {\n+        STNode openLTToken = parseLTToken();\n+        STNode endLTToken = parseLTToken();\n+        return STNodeFactory.createDoubleLTTokenNode(openLTToken, endLTToken);\n+    }\n+\n+    /**\n+     * Parse double-GT token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseDoubleGTToken() {\n+        STNode openGTToken = parseGTToken();\n+        STNode endLGToken = parseGTToken();\n+        return STNodeFactory.createDoubleGTTokenNode(openGTToken, endLGToken);\n+    }\n+\n+    /**\n+     * Parse tripple-GT token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTrippleGTToken() {\n+        STNode openGTToken = parseGTToken();\n+        STNode middleLGToken = parseGTToken();\n+        STNode endLGToken = parseGTToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzE4MjI2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowMzo1MVrOGW4qSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODowNDozNlrOGX_3WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MDE4NA==", "bodyText": "why a semicolon is needed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426650184", "createdAt": "2020-05-18T14:03:51Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "diffHunk": "@@ -41,13 +41,18 @@ public void testTypeCast() {\n         test(\"<@foo:bar{a:b} @bar{} int> c + d\", \"type-cast-expr/type_cast_expr_assert_07.json\");\n     }\n \n+    @Test\n+    public void testTypeCastOpPrecedence() {\n+        test(\"<int> a + <int> b\", \"type-cast-expr/type_cast_expr_assert_19.json\");\n+    }\n+\n     // Recovery tests\n \n     @Test\n     public void testTypeCastWithMissingExpr() {\n-        test(\"<int>\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n-        test(\"<@foo{}>\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n-        test(\"<@foo{} int>\", \"type-cast-expr/type_cast_expr_assert_10.json\");\n+        test(\"<int>;\", \"type-cast-expr/type_cast_expr_assert_08.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNjc5Mg==", "bodyText": "In type-cast-expr recovery type-cast-ctx ends after > token is passed in errorhandler. But I had accidentally pased expression also under type-cast ctx in parser which is now fixed in this PR. Refer #23287\nWithout the ; above test cases passed with that mistake.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427816792", "createdAt": "2020-05-20T08:04:36Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "diffHunk": "@@ -41,13 +41,18 @@ public void testTypeCast() {\n         test(\"<@foo:bar{a:b} @bar{} int> c + d\", \"type-cast-expr/type_cast_expr_assert_07.json\");\n     }\n \n+    @Test\n+    public void testTypeCastOpPrecedence() {\n+        test(\"<int> a + <int> b\", \"type-cast-expr/type_cast_expr_assert_19.json\");\n+    }\n+\n     // Recovery tests\n \n     @Test\n     public void testTypeCastWithMissingExpr() {\n-        test(\"<int>\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n-        test(\"<@foo{}>\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n-        test(\"<@foo{} int>\", \"type-cast-expr/type_cast_expr_assert_10.json\");\n+        test(\"<int>;\", \"type-cast-expr/type_cast_expr_assert_08.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MDE4NA=="}, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzE4ODUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowNToxNFrOGW4uAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODowNjowMlrOGX_6sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MTEzOA==", "bodyText": "there  shouldn't be  any difference even without the whitespace right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426651138", "createdAt": "2020-05-18T14:05:14Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java", "diffHunk": "@@ -73,7 +73,7 @@ public void testInValidErrorTypeMissingErrorTypeParams() {\n \n     @Test\n     public void testInValidErrorTypeExtraGt() {\n-        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_02.json\");\n+        test(\"error<NO_MATCHING_OBJECT> > a;\", \"error-type/error_type_assert_10.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNzY1MQ==", "bodyText": "yeah. This was before I moved >>, >>> parsing from lexer. It is now fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427817651", "createdAt": "2020-05-20T08:06:02Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java", "diffHunk": "@@ -73,7 +73,7 @@ public void testInValidErrorTypeMissingErrorTypeParams() {\n \n     @Test\n     public void testInValidErrorTypeExtraGt() {\n-        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_02.json\");\n+        test(\"error<NO_MATCHING_OBJECT> > a;\", \"error-type/error_type_assert_10.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MTEzOA=="}, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzIwNDQ1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowOTowMFrOGW44NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODowNjoyNFrOGX_7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1Mzc0OA==", "bodyText": "Are there any test for things like a <<b> c, <map<map<int>>> x, etc?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r426653748", "createdAt": "2020-05-18T14:09:00Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "diffHunk": "@@ -41,13 +41,18 @@ public void testTypeCast() {\n         test(\"<@foo:bar{a:b} @bar{} int> c + d\", \"type-cast-expr/type_cast_expr_assert_07.json\");\n     }\n \n+    @Test\n+    public void testTypeCastOpPrecedence() {\n+        test(\"<int> a + <int> b\", \"type-cast-expr/type_cast_expr_assert_19.json\");\n+    }\n+\n     // Recovery tests\n \n     @Test\n     public void testTypeCastWithMissingExpr() {\n-        test(\"<int>\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n-        test(\"<@foo{}>\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n-        test(\"<@foo{} int>\", \"type-cast-expr/type_cast_expr_assert_10.json\");\n+        test(\"<int>;\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n+        test(\"<@foo{}>;\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n+        test(\"<@foo{} int>;\", \"type-cast-expr/type_cast_expr_assert_10.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNzg2NA==", "bodyText": "few new test cases added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427817864", "createdAt": "2020-05-20T08:06:24Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/TypeCastExpressionTest.java", "diffHunk": "@@ -41,13 +41,18 @@ public void testTypeCast() {\n         test(\"<@foo:bar{a:b} @bar{} int> c + d\", \"type-cast-expr/type_cast_expr_assert_07.json\");\n     }\n \n+    @Test\n+    public void testTypeCastOpPrecedence() {\n+        test(\"<int> a + <int> b\", \"type-cast-expr/type_cast_expr_assert_19.json\");\n+    }\n+\n     // Recovery tests\n \n     @Test\n     public void testTypeCastWithMissingExpr() {\n-        test(\"<int>\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n-        test(\"<@foo{}>\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n-        test(\"<@foo{} int>\", \"type-cast-expr/type_cast_expr_assert_10.json\");\n+        test(\"<int>;\", \"type-cast-expr/type_cast_expr_assert_08.json\");\n+        test(\"<@foo{}>;\", \"type-cast-expr/type_cast_expr_assert_09.json\");\n+        test(\"<@foo{} int>;\", \"type-cast-expr/type_cast_expr_assert_10.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1Mzc0OA=="}, "originalCommit": {"oid": "191c6694d610bff01f2363730d8449bf376f2f9e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDQ4MTc0OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-parser/src/test/resources/expressions/func-call/func_call_assert_11.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODowOToyMVrOGYACNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjozNjoyNlrOGYJcLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxOTU3NQ==", "bodyText": "With ... rage operator first var-arg in\nfoo( bar(5, a, age  baz() ...subjects), 5, a, age = 18, ...subjects) is now recovered as range expression.\n(age  baz() ...subjects part.)\nIs it alright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427819575", "createdAt": "2020-05-20T08:09:21Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/resources/expressions/func-call/func_call_assert_11.json", "diffHunk": "@@ -58,52 +58,47 @@\n                                                     \"kind\": \"BINARY_EXPRESSION\",\n                                                     \"children\": [\n                                                         {\n-                                                            \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                            \"value\": \"age\"\n-                                                        },\n-                                                        {\n-                                                            \"kind\": \"PLUS_TOKEN\",\n-                                                            \"isMissing\": true\n-                                                        },\n-                                                        {\n-                                                            \"kind\": \"FUNCTION_CALL\",\n+                                                            \"kind\": \"BINARY_EXPRESSION\",\n                                                             \"children\": [\n                                                                 {\n                                                                     \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                                    \"value\": \"baz\"\n+                                                                    \"value\": \"age\"\n                                                                 },\n                                                                 {\n-                                                                    \"kind\": \"OPEN_PAREN_TOKEN\"\n+                                                                    \"kind\": \"PLUS_TOKEN\",\n+                                                                    \"isMissing\": true\n                                                                 },\n                                                                 {\n-                                                                    \"kind\": \"LIST\",\n+                                                                    \"kind\": \"FUNCTION_CALL\",\n                                                                     \"children\": [\n+                                                                        {\n+                                                                            \"kind\": \"IDENTIFIER_TOKEN\",\n+                                                                            \"value\": \"baz\"\n+                                                                        },\n+                                                                        {\n+                                                                            \"kind\": \"OPEN_PAREN_TOKEN\"\n+                                                                        },\n+                                                                        {\n+                                                                            \"kind\": \"LIST\",\n+                                                                            \"children\": []\n+                                                                        },\n+                                                                        {\n+                                                                            \"kind\": \"CLOSE_PAREN_TOKEN\"\n+                                                                        }\n                                                                     ]\n-                                                                },\n-                                                                {\n-                                                                    \"kind\": \"CLOSE_PAREN_TOKEN\"\n                                                                 }\n                                                             ]\n+                                                        },\n+                                                        {\n+                                                            \"kind\": \"ELLIPSIS_TOKEN\"\n+                                                        },\n+                                                        {\n+                                                            \"kind\": \"IDENTIFIER_TOKEN\",\n+                                                            \"value\": \"subjects\"\n                                                         }\n                                                     ]\n                                                 }\n                                             ]\n-                                        },\n-                                        {\n-                                            \"kind\": \"REST_ARG\",\n-                                            \"children\": [\n-                                                {\n-                                                    \"kind\": \"COMMA_TOKEN\",\n-                                                    \"isMissing\": true\n-                                                },\n-                                                {\n-                                                    \"kind\": \"ELLIPSIS_TOKEN\"\n-                                                },\n-                                                {\n-                                                    \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                    \"value\": \"subjects\"\n-                                                }\n-                                            ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk3MzY3Nw==", "bodyText": "should be fine", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427973677", "createdAt": "2020-05-20T12:36:26Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/expressions/func-call/func_call_assert_11.json", "diffHunk": "@@ -58,52 +58,47 @@\n                                                     \"kind\": \"BINARY_EXPRESSION\",\n                                                     \"children\": [\n                                                         {\n-                                                            \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                            \"value\": \"age\"\n-                                                        },\n-                                                        {\n-                                                            \"kind\": \"PLUS_TOKEN\",\n-                                                            \"isMissing\": true\n-                                                        },\n-                                                        {\n-                                                            \"kind\": \"FUNCTION_CALL\",\n+                                                            \"kind\": \"BINARY_EXPRESSION\",\n                                                             \"children\": [\n                                                                 {\n                                                                     \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                                    \"value\": \"baz\"\n+                                                                    \"value\": \"age\"\n                                                                 },\n                                                                 {\n-                                                                    \"kind\": \"OPEN_PAREN_TOKEN\"\n+                                                                    \"kind\": \"PLUS_TOKEN\",\n+                                                                    \"isMissing\": true\n                                                                 },\n                                                                 {\n-                                                                    \"kind\": \"LIST\",\n+                                                                    \"kind\": \"FUNCTION_CALL\",\n                                                                     \"children\": [\n+                                                                        {\n+                                                                            \"kind\": \"IDENTIFIER_TOKEN\",\n+                                                                            \"value\": \"baz\"\n+                                                                        },\n+                                                                        {\n+                                                                            \"kind\": \"OPEN_PAREN_TOKEN\"\n+                                                                        },\n+                                                                        {\n+                                                                            \"kind\": \"LIST\",\n+                                                                            \"children\": []\n+                                                                        },\n+                                                                        {\n+                                                                            \"kind\": \"CLOSE_PAREN_TOKEN\"\n+                                                                        }\n                                                                     ]\n-                                                                },\n-                                                                {\n-                                                                    \"kind\": \"CLOSE_PAREN_TOKEN\"\n                                                                 }\n                                                             ]\n+                                                        },\n+                                                        {\n+                                                            \"kind\": \"ELLIPSIS_TOKEN\"\n+                                                        },\n+                                                        {\n+                                                            \"kind\": \"IDENTIFIER_TOKEN\",\n+                                                            \"value\": \"subjects\"\n                                                         }\n                                                     ]\n                                                 }\n                                             ]\n-                                        },\n-                                        {\n-                                            \"kind\": \"REST_ARG\",\n-                                            \"children\": [\n-                                                {\n-                                                    \"kind\": \"COMMA_TOKEN\",\n-                                                    \"isMissing\": true\n-                                                },\n-                                                {\n-                                                    \"kind\": \"ELLIPSIS_TOKEN\"\n-                                                },\n-                                                {\n-                                                    \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                    \"value\": \"subjects\"\n-                                                }\n-                                            ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxOTU3NQ=="}, "originalCommit": {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDQ5MTkzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoxMjowOVrOGYAIeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoxMjowOVrOGYAIeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyMTE3Ng==", "bodyText": "error_type_assert_02.json is also used in another test case as well. So I added 10.json here which is identical to 02.json", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23319#discussion_r427821176", "createdAt": "2020-05-20T08:12:09Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ErrorTypeTest.java", "diffHunk": "@@ -73,7 +73,7 @@ public void testInValidErrorTypeMissingErrorTypeParams() {\n \n     @Test\n     public void testInValidErrorTypeExtraGt() {\n-        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_02.json\");\n+        test(\"error<NO_MATCHING_OBJECT>> a;\", \"error-type/error_type_assert_10.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4094607ff7eb1cdaba900a54088e8578c2899623"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3662, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}