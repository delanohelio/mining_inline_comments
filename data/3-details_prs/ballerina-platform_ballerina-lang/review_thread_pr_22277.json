{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTQ1MDcz", "number": 22277, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDozNjo0OVrODsgfiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDo0MDo0OVrODsghuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTk2Mjk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDozNjo0OVrOF9ZV7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDozNjo0OVrOF9ZV7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMjY2OQ==", "bodyText": "Shouldn't this be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                !isAssignable(targetRecType.restFieldType, field.type)) {\n          \n          \n            \n                                !isAssignable(sourceMapType.constraint, field.type)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22277#discussion_r399922669", "createdAt": "2020-03-30T04:36:49Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -631,6 +627,21 @@ private boolean recordFieldsAssignableToMap(BRecordType recordType, BMapType tar\n         return recordType.fields.stream().allMatch(field -> isAssignable(field.type, targetMapType.constraint));\n     }\n \n+    private boolean isAssignableMapType(BMapType sourceMapType, BRecordType targetRecType) {\n+        if (targetRecType.sealed) {\n+            return false;\n+        }\n+\n+        for (BField field : targetRecType.fields) {\n+            if (!Symbols.isFlagOn(field.symbol.flags, Flags.OPTIONAL) ||\n+                    !isAssignable(targetRecType.restFieldType, field.type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1dff90bcf6cf092e9c70792e33efb04e76781e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTk2NDU4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/map_to_record_negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDozODowMlrOF9ZW1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDozODowMlrOF9ZW1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMjkwMA==", "bodyText": "Missing a new line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22277#discussion_r399922900", "createdAt": "2020-03-30T04:38:02Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/map_to_record_negative.bal", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function testMapToRecordNegative() {\n+    map<int> mInt = {\"a\": 1, \"b\": 2};\n+    record {| string...; |} rInt = mInt;\n+\n+    map<any> mAny = {\"a\": 1, \"b\": \"Foo\"};\n+    record {} rAnydata = mAny;\n+\n+    map<string> m = {\"a\":\"aaa\", \"b\":\"bbb\"};\n+\n+    record {|\n+        string a; // Map assignment not allowed for record types with required fields\n+        string...;\n+    |} r = m;\n+}\n+\n+type Foo record {|\n+    int a;\n+    int...;\n+|};\n+\n+type Bar record {|\n+    int a;\n+|};\n+\n+type Baz record {|\n+    int a;\n+    int b?;\n+    int...;\n+|};\n+\n+function testSubtyping() {\n+    map<Foo> m1 = {\"bb\": {a: 10}};\n+\n+    record {|\n+        Bar...;\n+    |} r1 = m1;\n+\n+    map<Bar> m2 = {\"bb\": {a: 10}, \"x\": {a: 20}};\n+    record {|\n+        Baz x?;\n+        Foo...;\n+    |} r2 = m2;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1dff90bcf6cf092e9c70792e33efb04e76781e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTk2ODU2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/map_to_record.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDo0MDo0OVrOF9ZZIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDo0MDo0OVrOF9ZZIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMzQ4OA==", "bodyText": "Shall we use a simple literal (e.g., AssertionError) and use the current reason as the message of the detail?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22277#discussion_r399923488", "createdAt": "2020-03-30T04:40:49Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/map_to_record.bal", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function testBasicDataTypeMaps() {\n+    map<int> mInt = {\"a\": 1, \"b\": 2};\n+    record {| int...; |} rInt = mInt;\n+    rInt[\"c\"] = 3;\n+    assert(<record {| int...; |}>{\"a\": 1, \"b\": 2, \"c\": 3}, rInt);\n+\n+    map<float> mFloat = {\"a\": 1.2, \"b\": 2.3};\n+    record {| float...; |} rFloat = mFloat;\n+    rFloat[\"c\"] = 3.4;\n+    assert(<record {| float...; |}>{\"a\": 1.2, \"b\": 2.3, \"c\": 3.4}, rFloat);\n+\n+    map<decimal> mDecimal = {\"a\": 1.2, \"b\": 2.3};\n+    record {| decimal...; |} rDecimal = mDecimal;\n+    rDecimal[\"c\"] = 3.4;\n+    assert(<record {| decimal...; |}>{\"a\": 1.2, \"b\": 2.3, \"c\": 3.4}, rDecimal);\n+\n+    map<boolean> mBoolean = {\"a\": true, \"b\": false};\n+    record {| boolean...; |} rBoolean = mBoolean;\n+    rBoolean[\"c\"] = true;\n+    assert(<record {| boolean...; |}>{\"a\": true, \"b\": false, \"c\": true}, rBoolean);\n+\n+    map<string> mString = {\"a\": \"foo\", \"b\": \"bar\"};\n+    record {| string...; |} rString = mString;\n+    rString[\"c\"] = \"baz\";\n+    assert(<record {| string...; |}>{\"a\": \"foo\", \"b\": \"bar\", \"c\": \"baz\"}, rString);\n+\n+    map<json> mJson = {\"a\": {\"foo\": \"bar\"}};\n+    record {| json...; |} rJson = mJson;\n+    rJson[\"b\"] = {\"baz\": \"qux\"};\n+    assert(<record {| json...; |}>{\"a\": {\"foo\": \"bar\"}, \"b\": {\"baz\": \"qux\"}}, rJson);\n+\n+    // TODO: disabled due to https://github.com/ballerina-platform/ballerina-lang/issues/22276\n+    //map<xml> mXml = {\"a\": xml `<book>The Lost World</book>`};\n+    //record {| xml...; |} rXml = mXml;\n+    //rXml[\"b\"] = xml `<book>Sherlock Holmes</book>`;\n+    //assert(<record {| xml...; |}>{\"a\": xml `<book>The Lost World</book>`, \"b\": xml `<book>Sherlock Holmes</book>`},\n+    //       rXml);\n+}\n+\n+function testInclusiveRecordTypes() {\n+    map<int> mInt = {\"a\": 1, \"b\": 2};\n+    record {} rInt = mInt;\n+    rInt[\"c\"] = 3;\n+    assert(<record {}>{\"a\": 1, \"b\": 2, \"c\": 3}, rInt);\n+\n+    map<float> mFloat = {\"a\": 1.2, \"b\": 2.3};\n+    record {} rFloat = mFloat;\n+    rFloat[\"c\"] = 3.4;\n+    assert(<record {}>{\"a\": 1.2, \"b\": 2.3, \"c\": 3.4}, rFloat);\n+\n+    map<decimal> mDecimal = {\"a\": 1.2d, \"b\": 2.3d};\n+    record {} rDecimal = mDecimal;\n+    rDecimal[\"c\"] = 3.4d;\n+    assert(<record {}>{\"a\": 1.2d, \"b\": 2.3d, \"c\": 3.4d}, rDecimal);\n+\n+    map<boolean> mBoolean = {\"a\": true, \"b\": false};\n+    record {} rBoolean = mBoolean;\n+    rBoolean[\"c\"] = true;\n+    assert(<record {}>{\"a\": true, \"b\": false, \"c\": true}, rBoolean);\n+\n+    map<string> mString = {\"a\": \"foo\", \"b\": \"bar\"};\n+    record {} rString = mString;\n+    rString[\"c\"] = \"baz\";\n+    assert(<record {}>{\"a\": \"foo\", \"b\": \"bar\", \"c\": \"baz\"}, rString);\n+\n+    map<json> mJson = {\"a\": {\"foo\": \"bar\"}};\n+    record {} rJson = mJson;\n+    rJson[\"b\"] = <json>{\"baz\": \"qux\"};\n+    assert(<record {}>{\"a\": {\"foo\": \"bar\"}, \"b\": {\"baz\": \"qux\"}}, rJson);\n+\n+    // TODO: disabled due to https://github.com/ballerina-platform/ballerina-lang/issues/22276\n+    //map<xml> mXml = {\"a\": xml `<book>The Lost World</book>`};\n+    //record {} rXml = mXml;\n+    //rXml[\"b\"] = xml `<book>Sherlock Holmes</book>`;\n+    //assert(<record {}>{\"a\": xml `<book>The Lost World</book>`, \"b\": xml `<book>Sherlock Holmes</book>`},\n+    //       rXml);\n+}\n+\n+function testInherentTypeViolationInInclusiveRecords() {\n+    map<decimal> mDecimal = {\"a\": 1.2, \"b\": 2.3};\n+    record {} rDecimal = mDecimal;\n+    rDecimal[\"c\"] = 3.4; // this panics\n+}\n+\n+function testInherentTypeViolationInExclusiveRecords() {\n+    map<int> mInt = {\"a\": 1, \"b\": 2};\n+    record {| (int|string)...; |} r = mInt;\n+    r[\"c\"] = \"foo\"; // this panics\n+}\n+\n+function testRecordsWithOptionalFields() {\n+    map<string> m = {\"a\":\"aaa\", \"b\":\"bbb\"};\n+\n+    record {|\n+        string a?;\n+        string c?;\n+        string...;\n+    |} r = m;\n+\n+    assert(\"aaa\", r?.a);\n+    assert((), r?.c);\n+\n+    r.a = \"AA\";\n+    r.c = \"CC\";\n+\n+    assert(<record {| string a?; string c?; string...; |}>{\"a\": \"AA\", \"b\": \"bbb\", \"c\": \"CC\"}, r);\n+}\n+\n+type Foo record {|\n+    int a;\n+    int...;\n+|};\n+\n+type Bar record {|\n+    int a;\n+|};\n+\n+function testSubtyping() {\n+    map<Bar> m1 = {\"bb\": {a: 10}};\n+\n+    record {|\n+        Foo...;\n+    |} r1 = m1;\n+\n+    Foo f1 = r1.get(\"bb\");\n+\n+    assert(<Foo>{a: 10}, f1);\n+    assert(<Bar>{a: 10}, f1);\n+\n+    f1[\"cc\"] = 20; // this panics\n+}\n+\n+type Baz record {|\n+    *Bar;\n+    int b?;\n+    int...;\n+|};\n+\n+type SuperTypeOfAll record {|\n+    int...;\n+|};\n+\n+// Bar is a subtype of Foo\n+map<Bar> gM = {\"bb\": {a: 10}, \"x\": {a: 20}};\n+\n+record {|\n+    SuperTypeOfAll x?;\n+    Foo...;\n+|} gR = gM;\n+\n+function testComplexSubtyping() {\n+    // Fails since although the literal {a:10} is a valid value, its type is Bar.\n+    Baz b1 = <Baz>gR.get(\"x\");\n+}\n+\n+function testComplexSubtyping2() {\n+    record {| int c; |} rC = {c: 50};\n+\n+    // Compile time allowed since rC's type is a subtype of SuperTypeOfAll. But fails at run time since gR is actually\n+    // a Bar map value.\n+    gR.x = rC;\n+}\n+\n+\n+// Util functions\n+\n+function assert(anydata expected, anydata actual) {\n+    if (expected != actual) {\n+        typedesc<anydata> expT = typeof expected;\n+        typedesc<anydata> actT = typeof actual;\n+        string reason = \"expected [\" + expected.toString() + \"] of type [\" + expT.toString()\n+                            + \"], but found [\" + actual.toString() + \"] of type [\" + actT.toString() + \"]\";\n+        panic error(reason);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1dff90bcf6cf092e9c70792e33efb04e76781e"}, "originalPosition": 189}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4610, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}