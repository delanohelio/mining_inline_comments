{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NzM5MzQx", "number": 25837, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowOToxOVrOEkEtEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowOToxOVrOEkEtEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjYxMjY2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowOToxOVrOHSytsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowOToxOVrOHSytsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2NzMxNQ==", "bodyText": "I think this should be named is last clause", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25837#discussion_r489467315", "createdAt": "2020-09-16T14:09:19Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -569,9 +571,53 @@ public void visit(BLangIf ifNode) {\n \n     @Override\n     public void visit(BLangMatchStatement matchStatement) {\n+\n+        analyzeNode(matchStatement.expr, env);\n         if (matchStatement.onFailClause != null) {\n             analyzeNode(matchStatement.onFailClause, env);\n         }\n+\n+        Map<BSymbol, InitStatus> uninitVars = new HashMap<>();\n+        BranchResult lastPatternResult = null;\n+        for (int i = 0; i < matchStatement.getMatchClauses().size(); i++) {\n+            BLangMatchClause matchClause = matchStatement.getMatchClauses().get(i);\n+            if (isLastPatternContainsIn(matchClause)) {\n+                lastPatternResult = analyzeBranch(matchClause, env);\n+            } else {\n+                BranchResult result = analyzeBranch(matchClause, env);\n+                // If the flow was terminated within the block, then that branch should not be considered for\n+                // analyzing the data-flow for the downstream code.\n+                if (result.flowTerminated) {\n+                    continue;\n+                }\n+                uninitVars = mergeUninitializedVars(uninitVars, result.uninitializedVars);\n+            }\n+        }\n+\n+        if (lastPatternResult != null) {\n+            // only if last pattern is present, uninitializedVars should be updated\n+            uninitVars = mergeUninitializedVars(uninitVars, lastPatternResult.uninitializedVars);\n+            this.uninitializedVars = uninitVars;\n+            return;\n+        }\n+        uninitVars = mergeUninitializedVars(new HashMap<>(), this.uninitializedVars);\n+        this.uninitializedVars = uninitVars;\n+    }\n+\n+    @Override\n+    public void visit(BLangMatchClause matchClause) {\n+\n+        analyzeNode(matchClause.blockStmt, env);\n+    }\n+\n+    private boolean isLastPatternContainsIn(BLangMatchClause matchClause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8307cbb2cb866c7eee2f408151ca145ca2964c"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 127, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}