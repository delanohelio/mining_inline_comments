{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTA5MTcw", "number": 22841, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzoyMTozMFrOD3awDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo0ODozNlrOD77kvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDM2NTU3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzoyMTozMFrOGNqjSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODoyNDo1NFrOGPuUOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MTgzNA==", "bodyText": "Wondering if we should iterate through the entries and you the name at L586. Applicable in several places here and in JvmValueGen.java.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r416981834", "createdAt": "2020-04-28T23:21:30Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -571,13 +572,13 @@ private static void createRecordType(MethodVisitor mv, BRecordType recordType, B\n      * @param mv     method visitor\n      * @param fields record fields to be added\n      */\n-    private static void addRecordFields(MethodVisitor mv, @Nilable List<BField> fields) {\n+    private static void addRecordFields(MethodVisitor mv, @Nilable Map<String, BField> fields) {\n         // Create the fields map\n         mv.visitTypeInsn(NEW, LINKED_HASH_MAP);\n         mv.visitInsn(DUP);\n         mv.visitMethodInsn(INVOKESPECIAL, LINKED_HASH_MAP, \"<init>\", \"()V\", false);\n \n-        for (BField optionalField : fields) {\n+        for (BField optionalField : fields.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6489eec7dbf8c580fa57810dd1291682feff59ca"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MDY2NQ==", "bodyText": "Used values() since the value contains all the info we need + if iterating through the entry set, will have to refer to the field as .value() each time", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r419140665", "createdAt": "2020-05-03T18:24:54Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -571,13 +572,13 @@ private static void createRecordType(MethodVisitor mv, BRecordType recordType, B\n      * @param mv     method visitor\n      * @param fields record fields to be added\n      */\n-    private static void addRecordFields(MethodVisitor mv, @Nilable List<BField> fields) {\n+    private static void addRecordFields(MethodVisitor mv, @Nilable Map<String, BField> fields) {\n         // Create the fields map\n         mv.visitTypeInsn(NEW, LINKED_HASH_MAP);\n         mv.visitInsn(DUP);\n         mv.visitMethodInsn(INVOKESPECIAL, LINKED_HASH_MAP, \"<init>\", \"()V\", false);\n \n-        for (BField optionalField : fields) {\n+        for (BField optionalField : fields.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MTgzNA=="}, "originalCommit": {"oid": "6489eec7dbf8c580fa57810dd1291682feff59ca"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDM3MjE1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzoyNDowMlrOGNqnCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODoyMTowM1rOGPuSYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4Mjc5NQ==", "bodyText": "Can't we use fieldNameStr?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            fields.put(fieldName.value, new BField(fieldName, bindingPatternVariable.pos, fieldSymbol));\n          \n          \n            \n                            fields.put(fieldNameStr, new BField(fieldName, bindingPatternVariable.pos, fieldSymbol));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r416982795", "createdAt": "2020-04-28T23:24:02Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5487,7 +5488,7 @@ private BType getStructuredBindingPatternType(BLangVariable bindingPatternVariab\n                         env.enclPkg.symbol.pkgID, fieldType, recordSymbol);\n \n                 //TODO check below field position\n-                fields.add(new BField(fieldName, bindingPatternVariable.pos, fieldSymbol));\n+                fields.put(fieldName.value, new BField(fieldName, bindingPatternVariable.pos, fieldSymbol));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6489eec7dbf8c580fa57810dd1291682feff59ca"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MDE5NQ==", "bodyText": "Can, but doesn't make much of a difference right? Used fieldName.value since fieldName is what is used when creating the field.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r419140195", "createdAt": "2020-05-03T18:21:03Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -5487,7 +5488,7 @@ private BType getStructuredBindingPatternType(BLangVariable bindingPatternVariab\n                         env.enclPkg.symbol.pkgID, fieldType, recordSymbol);\n \n                 //TODO check below field position\n-                fields.add(new BField(fieldName, bindingPatternVariable.pos, fieldSymbol));\n+                fields.put(fieldName.value, new BField(fieldName, bindingPatternVariable.pos, fieldSymbol));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4Mjc5NQ=="}, "originalCommit": {"oid": "6489eec7dbf8c580fa57810dd1291682feff59ca"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTY2MDA1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjozODoyNFrOGUjWdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDozMjo1NVrOGU0j0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMzg5Mw==", "bodyText": "Formatting issue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r424203893", "createdAt": "2020-05-13T06:38:24Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -317,20 +317,20 @@ private void createLambdas(ClassWriter cw, LambdaMetadata lambdaGenMetadata) {\n         }\n     }\n \n-    private void createObjectFields(ClassWriter cw, List<BField> fields) {\n+        private void createObjectFields(ClassWriter cw, Map<String, BField> fields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1654495a58c33c6baae7c7467e2a80fb78d7a0f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNDM0Mg==", "bodyText": "Seems to be the case with multiple changes in this class.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r424204342", "createdAt": "2020-05-13T06:39:29Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -317,20 +317,20 @@ private void createLambdas(ClassWriter cw, LambdaMetadata lambdaGenMetadata) {\n         }\n     }\n \n-    private void createObjectFields(ClassWriter cw, List<BField> fields) {\n+        private void createObjectFields(ClassWriter cw, Map<String, BField> fields) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMzg5Mw=="}, "originalCommit": {"oid": "1654495a58c33c6baae7c7467e2a80fb78d7a0f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NTg0Mw==", "bodyText": "Ah damn.. There were a lot of formatting changes when resolving a conflict. I think these were introduced when resolving them.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r424485843", "createdAt": "2020-05-13T14:32:55Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -317,20 +317,20 @@ private void createLambdas(ClassWriter cw, LambdaMetadata lambdaGenMetadata) {\n         }\n     }\n \n-    private void createObjectFields(ClassWriter cw, List<BField> fields) {\n+        private void createObjectFields(ClassWriter cw, Map<String, BField> fields) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMzg5Mw=="}, "originalCommit": {"oid": "1654495a58c33c6baae7c7467e2a80fb78d7a0f7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTY2OTA3OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/HttpFiltersDesugar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo0MTo0M1rOGUjb_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo0MTo0M1rOGUjb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNTMxMQ==", "bodyText": "The previous constants can be removed now right? Unused?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r424205311", "createdAt": "2020-05-13T06:41:43Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/HttpFiltersDesugar.java", "diffHunk": "@@ -321,7 +321,7 @@ private void addAssignmentAndForEach(BLangFunction resourceNode, BLangSimpleVari\n         filterContextName.type = symTable.stringType;\n         filterContextName.pos = resourceNode.pos;\n \n-        BField filterContextVal = ((BObjectType) endpointVar.type).fields.get(FILTER_CONTEXT_FIELD_INDEX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1654495a58c33c6baae7c7467e2a80fb78d7a0f7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTY3NTM4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo0NDoyM1rOGUjgAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowODoxM1rOGU2QgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNjMzOQ==", "bodyText": "Can we fix this in this PR itself?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r424206339", "createdAt": "2020-05-13T06:44:23Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -1823,13 +1822,15 @@ private void checkRecordVarRefEquivalency(DiagnosticPos pos, BLangRecordVarRef l\n         BRecordType rhsRecordType = (BRecordType) rhsType;\n \n         // check if all fields in record var ref are found in rhs record type\n-        lhsVarRef.recordRefFields.stream()\n-                .filter(lhsField -> rhsRecordType.fields.stream()\n-                        .noneMatch(rhsField -> lhsField.variableName.value.equals(rhsField.name.toString())))\n-                .forEach(lhsField -> dlog.error(pos, DiagnosticCode.INVALID_FIELD_IN_RECORD_BINDING_PATTERN,\n-                        lhsField.variableName.value, rhsType));\n+        for (BLangRecordVarRefKeyValue lhsField : lhsVarRef.recordRefFields) {\n+            if (!rhsRecordType.fields.containsKey(lhsField.variableName.value)) {\n+                dlog.error(pos, DiagnosticCode.INVALID_FIELD_IN_RECORD_BINDING_PATTERN,\n+                           lhsField.variableName.value, rhsType);\n+            }\n+        }\n \n-        for (BField rhsField : rhsRecordType.fields) {\n+        for (BField rhsField : rhsRecordType.fields.values()) {\n+            // TOOD 22/04/2020: Refactor this. No need to do this in each iteration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1654495a58c33c6baae7c7467e2a80fb78d7a0f7"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMzY2NQ==", "bodyText": "It looks like this is necessary. For example,\ntype Person record {\n    string name;\n    int age;\n    string country;\n};\n\n\npublic function main() {    \n    string firstName;\n    int personAge;\n    int personAge2;\n    map<anydata|error> otherDetails = {};\n\n    {name: firstName, age: personAge, age: personAge2, ...otherDetails} = getPerson();\n}\n\nfunction getPerson() returns Person {\n    Person person = {\n        name: \"Peter\",\n        age: 28,\n        country: \"Sri Lanka\",\n        \"occupation\": \"Software Engineer\"\n    };\n    return person;\n}\nI can't recall the reason for this comment, maybe I misread the code \ud83d\ude05  Will remove the comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r424513665", "createdAt": "2020-05-13T15:08:13Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -1823,13 +1822,15 @@ private void checkRecordVarRefEquivalency(DiagnosticPos pos, BLangRecordVarRef l\n         BRecordType rhsRecordType = (BRecordType) rhsType;\n \n         // check if all fields in record var ref are found in rhs record type\n-        lhsVarRef.recordRefFields.stream()\n-                .filter(lhsField -> rhsRecordType.fields.stream()\n-                        .noneMatch(rhsField -> lhsField.variableName.value.equals(rhsField.name.toString())))\n-                .forEach(lhsField -> dlog.error(pos, DiagnosticCode.INVALID_FIELD_IN_RECORD_BINDING_PATTERN,\n-                        lhsField.variableName.value, rhsType));\n+        for (BLangRecordVarRefKeyValue lhsField : lhsVarRef.recordRefFields) {\n+            if (!rhsRecordType.fields.containsKey(lhsField.variableName.value)) {\n+                dlog.error(pos, DiagnosticCode.INVALID_FIELD_IN_RECORD_BINDING_PATTERN,\n+                           lhsField.variableName.value, rhsType);\n+            }\n+        }\n \n-        for (BField rhsField : rhsRecordType.fields) {\n+        for (BField rhsField : rhsRecordType.fields.values()) {\n+            // TOOD 22/04/2020: Refactor this. No need to do this in each iteration.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNjMzOQ=="}, "originalCommit": {"oid": "1654495a58c33c6baae7c7467e2a80fb78d7a0f7"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTY4NjM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo0ODozNlrOGUjmwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo0ODozNlrOGUjmwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwODA2Ng==", "bodyText": "Here and in the next change can't we just do\n            allFieldSet.addAll(((BRecordType) memType).fields.values());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22841#discussion_r424208066", "createdAt": "2020-05-13T06:48:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -834,13 +838,13 @@ private BType inferTableMemberType(List<BType> memTypes, BLangTableConstructorEx\n         BLangTableKeySpecifier keySpecifier = tableConstructorExpr.tableKeySpecifier;\n         Set<BField> allFieldSet = new LinkedHashSet<>();\n         for (BType memType : memTypes) {\n-            List<BField> fields = ((BRecordType) memType).fields;\n+            Collection<BField> fields = ((BRecordType) memType).fields.values();\n             allFieldSet.addAll(fields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1654495a58c33c6baae7c7467e2a80fb78d7a0f7"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3762, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}