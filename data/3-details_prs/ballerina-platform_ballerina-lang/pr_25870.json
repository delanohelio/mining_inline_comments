{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDk1MDQ4", "number": 25870, "title": "Revamp code action to use new parser api and restruct", "bodyText": "Purpose\n\nDescribe the problems, issues, or needs driving this feature/fix and include links to related issues.\n\nFixes #\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-09-17T08:22:52Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870", "merged": true, "mergeCommit": {"oid": "71598e6dd9c4a1991bc2c21f65f31290159851aa"}, "closed": true, "closedAt": "2020-09-18T02:23:51Z", "author": {"login": "rasika"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJsoB7AH2gAyNDg4NDk1MDQ4OmU4NGZhMDA0ZTkxMzQxYzUyZjk0ZDAyYmQ3NDQ5NmE5MDQ3ZTNjNmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJ0ZBigFqTQ5MDgyNzI1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e84fa004e91341c52f94d02bd74496a9047e3c6e", "committedDate": "2020-09-17T08:22:06Z", "message": "Revamp code actions implementations\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDA2MTkw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#pullrequestreview-490406190", "createdAt": "2020-09-17T09:23:56Z", "commit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOToyMzo1N1rOHTZWbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo0NTowNFrOHTaJUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMDMzMw==", "bodyText": "Shall we try to destruct the logics into separate methods?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490100333", "createdAt": "2020-09-17T09:23:57Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/DiagBasedCodeAction.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.langserver.common.ImportsAcceptor;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.common.utils.FunctionGenerator;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.LSCodeActionProviderException;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel.Reference;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.tree.TopLevelNode;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.IndexBasedAccessNode;\n+import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.analyzer.Types;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTupleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangBinaryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangListConstructorExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangQueryExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangRecordTypeNode;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Interface for diagnostics based code actions.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface DiagBasedCodeAction {\n+\n+    List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context)\n+            throws LSCodeActionProviderException;\n+\n+\n+    static Pair<List<String>, List<String>> getPossibleTypesAndNames(LSContext context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMzc4OQ==", "bodyText": "let's return empty List for the consistency", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490103789", "createdAt": "2020-09-17T09:29:13Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateFunctionTestCodeAction.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeAction;\n+import org.ballerinalang.langserver.command.executors.CreateTestExecutor;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.CodeActionNodeType;\n+import org.ballerinalang.langserver.commons.command.CommandArgument;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentManager;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.langserver.util.references.TokenOrSymbolNotFoundException;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Command;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeAction.isTopLevelNode;\n+\n+/**\n+ * Code Action for generating test case for function.\n+ *\n+ * @since 1.2.0\n+ */\n+public class CreateFunctionTestCodeAction implements NodeBasedCodeAction {\n+\n+    @Override\n+    public List<CodeAction> get(CodeActionNodeType nodeType, List<Diagnostic> allDiagnostics, LSContext context) {\n+        try {\n+            String docUri = context.get(DocumentServiceKeys.FILE_URI_KEY);\n+            List<CodeAction> actions = new ArrayList<>();\n+            List<Object> args = new ArrayList<>();\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_DOC_URI, docUri));\n+            Position position = context.get(DocumentServiceKeys.POSITION_KEY).getPosition();\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_NODE_LINE, \"\" + position.getLine()));\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_NODE_COLUMN, \"\" + position.getCharacter()));\n+\n+            WorkspaceDocumentManager documentManager = context.get(DocumentServiceKeys.DOC_MANAGER_KEY);\n+            if (!isTopLevelNode(docUri, documentManager, context, position)) {\n+                return actions;\n+            }\n+\n+            CodeAction action = new CodeAction(CommandConstants.CREATE_TEST_FUNC_TITLE);\n+            action.setCommand(new Command(CommandConstants.CREATE_TEST_FUNC_TITLE, CreateTestExecutor.COMMAND, args));\n+            actions.add(action);\n+            return actions;\n+        } catch (WorkspaceDocumentException | CompilationFailedException | TokenOrSymbolNotFoundException e) {\n+            // ignore\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwNDExNw==", "bodyText": "Let's return empty list for the consistency", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490104117", "createdAt": "2020-09-17T09:29:45Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateServiceTestCodeAction.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeAction;\n+import org.ballerinalang.langserver.command.executors.CreateTestExecutor;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.CodeActionNodeType;\n+import org.ballerinalang.langserver.commons.command.CommandArgument;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentManager;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.langserver.util.references.TokenOrSymbolNotFoundException;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Command;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.ballerinalang.langserver.codeaction.builder.NodeBasedCodeAction.isTopLevelNode;\n+\n+/**\n+ * Code Action for generating test case for service.\n+ *\n+ * @since 1.2.0\n+ */\n+public class CreateServiceTestCodeAction implements NodeBasedCodeAction {\n+\n+    @Override\n+    public List<CodeAction> get(CodeActionNodeType nodeType, List<Diagnostic> allDiagnostics, LSContext context) {\n+        try {\n+            String docUri = context.get(DocumentServiceKeys.FILE_URI_KEY);\n+            List<CodeAction> actions = new ArrayList<>();\n+            List<Object> args = new ArrayList<>();\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_DOC_URI, docUri));\n+            Position position = context.get(DocumentServiceKeys.POSITION_KEY).getPosition();\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_NODE_LINE, \"\" + position.getLine()));\n+            args.add(new CommandArgument(CommandConstants.ARG_KEY_NODE_COLUMN, \"\" + position.getCharacter()));\n+\n+            WorkspaceDocumentManager documentManager = context.get(DocumentServiceKeys.DOC_MANAGER_KEY);\n+            if (!isTopLevelNode(docUri, documentManager, context, position)) {\n+                return actions;\n+            }\n+\n+            CodeAction action = new CodeAction(CommandConstants.CREATE_TEST_SERVICE_TITLE);\n+            action.setCommand(new Command(CommandConstants.CREATE_TEST_SERVICE_TITLE,\n+                                          CreateTestExecutor.COMMAND, args));\n+            actions.add(action);\n+            return actions;\n+\n+        } catch (WorkspaceDocumentException | CompilationFailedException | TokenOrSymbolNotFoundException e) {\n+            // ignore\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwNDgxMA==", "bodyText": "Let's remove the extra new lines", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490104810", "createdAt": "2020-09-17T09:30:48Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel.Reference;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BObjectTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction.getPossibleTypesAndNames;\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+\n+/**\n+ * Code Action for variable assignment.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateVariableCodeAction implements DiagBasedCodeAction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwNzk0Nw==", "bodyText": "Shall we move this to a private util and is there a specific reason for the type length of 10? If so let's add a small comment as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490107947", "createdAt": "2020-09-17T09:36:06Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/CreateVariableCodeAction.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel.Reference;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BObjectTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction.getPossibleTypesAndNames;\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+\n+/**\n+ * Code Action for variable assignment.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateVariableCodeAction implements DiagBasedCodeAction {\n+    private SymbolReferencesModel.Reference refAtCursor;\n+\n+    public CreateVariableCodeAction(SymbolReferencesModel.Reference refAtCursor) {\n+        this.refAtCursor = refAtCursor;\n+    }\n+\n+    @Override\n+    public List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context) {\n+        String uri = context.get(DocumentServiceKeys.FILE_URI_KEY);\n+        Position position = diagnostic.getRange().getStart();\n+        BSymbol symbolAtCursor = refAtCursor.getSymbol();\n+        boolean hasDefaultInitFunction = false;\n+        boolean hasCustomInitFunction = false;\n+        boolean isAsync = false;\n+        if (refAtCursor.getbLangNode() instanceof BLangInvocation) {\n+            hasDefaultInitFunction = symbolAtCursor instanceof BObjectTypeSymbol;\n+            hasCustomInitFunction = symbolAtCursor instanceof BInvokableSymbol &&\n+                    symbolAtCursor.name.value.endsWith(\"init\");\n+            isAsync = ((BLangInvocation) refAtCursor.getbLangNode()).isAsync();\n+        }\n+\n+        // Find enclosing function node\n+        BLangNode bLangNode = refAtCursor.getbLangNode();\n+        BLangFunction enclosedFunc = null;\n+        while (!(bLangNode instanceof BLangPackage)) {\n+            if (bLangNode instanceof BLangFunction) {\n+                enclosedFunc = (BLangFunction) bLangNode;\n+                break;\n+            }\n+            bLangNode = bLangNode.parent;\n+        }\n+\n+        return getCreateVariableCodeActions(context, uri, enclosedFunc, position, refAtCursor,\n+                                            hasDefaultInitFunction, hasCustomInitFunction, isAsync);\n+    }\n+\n+\n+    private static List<CodeAction> getCreateVariableCodeActions(LSContext context, String uri,\n+                                                                 BLangFunction enclosedFunc, Position position,\n+                                                                 Reference referenceAtCursor,\n+                                                                 boolean hasDefaultInitFunction,\n+                                                                 boolean hasCustomInitFunction, boolean isAsync) {\n+        List<CodeAction> actions = new ArrayList<>();\n+\n+\n+        BLangNode bLangNode = referenceAtCursor.getbLangNode();\n+        CompilerContext compilerContext = context.get(DocumentServiceKeys.COMPILER_CONTEXT_KEY);\n+\n+\n+        List<TextEdit> importEdits = new ArrayList<>();\n+        Pair<List<String>, List<String>> typesAndNames = getPossibleTypesAndNames(context, referenceAtCursor,\n+                                                                                  hasDefaultInitFunction,\n+                                                                                  hasCustomInitFunction, isAsync,\n+                                                                                  bLangNode,\n+                                                                                  importEdits, compilerContext);\n+\n+        List<String> types = typesAndNames.getLeft();\n+        List<String> names = typesAndNames.getRight();\n+\n+        for (int i = 0; i < types.size(); i++) {\n+            String type = types.get(i);\n+            String name = names.get(i);\n+            String commandTitle = CommandConstants.CREATE_VARIABLE_TITLE;\n+            if (types.size() > 1) {\n+                String typeLabel = (type.startsWith(\"[\") && type.endsWith(\"]\") && !type.endsWith(\"[]\") &&\n+                        type.length() > 10) ? \"Tuple\" : type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwODQyNg==", "bodyText": "Change the year", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490108426", "createdAt": "2020-09-17T09:36:58Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/ErrorTypeCodeAction.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMDMwNg==", "bodyText": "We might need to rethink this bit wider, along with the latest class and object changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490110306", "createdAt": "2020-09-17T09:40:07Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/ImplementFunctionsCodeAction.java", "diffHunk": "@@ -128,7 +96,7 @@ private static CodeAction getNoImplementationFoundCommand(Diagnostic diagnostic,\n \n         if (!edits.isEmpty()) {\n             String commandTitle = CommandConstants.IMPLEMENT_FUNCS_TITLE;\n-            return createQuickFixCodeAction(commandTitle, edits, uri);\n+            return Collections.singletonList(createQuickFixCodeAction(commandTitle, edits, uri));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMTAwOQ==", "bodyText": "Let's disable this code action since we do not have abstract code actions anymore", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490111009", "createdAt": "2020-09-17T09:41:12Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeAbstractObjectCodeAction.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.LSCodeActionProviderException;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.model.Whitespace;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+\n+/**\n+ * Code Action for making object abstract type.\n+ *\n+ * @since 1.2.0\n+ */\n+public class MakeAbstractObjectCodeAction implements DiagBasedCodeAction {\n+\n+    @Override\n+    public List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMTg5NQ==", "bodyText": "Need to disable this code action since we do not have abstract objects anymore. Let's keep this disabled until we finalise the object and class related code actions", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490111895", "createdAt": "2020-09-17T09:42:39Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/MakeNonAbstractObjectCodeAction.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.LSCodeActionProviderException;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.model.Whitespace;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+\n+/**\n+ * Code Action for making object non abstract type.\n+ *\n+ * @since 1.2.0\n+ */\n+public class MakeNonAbstractObjectCodeAction implements DiagBasedCodeAction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMzM2Mg==", "bodyText": "Is it ok that we don not use the platform specific line separator?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#discussion_r490113362", "createdAt": "2020-09-17T09:45:04Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/builder/impl/TypeGuardCodeAction.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.builder.impl;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.ballerinalang.langserver.codeaction.builder.DiagBasedCodeAction;\n+import org.ballerinalang.langserver.command.CommandUtil;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.LSCodeActionProviderException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentManager;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel;\n+import org.ballerinalang.langserver.util.references.SymbolReferencesModel.Reference;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BObjectTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BErrorType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.util.Flags;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static org.ballerinalang.langserver.codeaction.providers.AbstractCodeActionProvider.createQuickFixCodeAction;\n+import static org.ballerinalang.langserver.common.utils.CommonUtil.LINE_SEPARATOR;\n+\n+/**\n+ * Code Action for type guard variable assignment.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TypeGuardCodeAction implements DiagBasedCodeAction {\n+    private SymbolReferencesModel.Reference refAtCursor;\n+\n+    public TypeGuardCodeAction(SymbolReferencesModel.Reference refAtCursor) {\n+        this.refAtCursor = refAtCursor;\n+    }\n+\n+    @Override\n+    public List<CodeAction> get(Diagnostic diagnostic, List<Diagnostic> allDiagnostics, LSContext context)\n+            throws LSCodeActionProviderException {\n+        String uri = context.get(DocumentServiceKeys.FILE_URI_KEY);\n+        BSymbol symbolAtCursor = refAtCursor.getSymbol();\n+        boolean isInvocation = symbolAtCursor instanceof BInvokableSymbol;\n+        boolean isRemoteInvocation =\n+                symbolAtCursor != null && (symbolAtCursor.flags & Flags.REMOTE) == Flags.REMOTE;\n+\n+        boolean hasDefaultInitFunction = false;\n+        boolean hasCustomInitFunction = false;\n+        if (refAtCursor.getbLangNode() instanceof BLangInvocation) {\n+            hasDefaultInitFunction = symbolAtCursor instanceof BObjectTypeSymbol;\n+            hasCustomInitFunction = symbolAtCursor instanceof BInvokableSymbol &&\n+                    symbolAtCursor.name.value.endsWith(\"init\");\n+        }\n+        boolean isInitInvocation = hasDefaultInitFunction || hasCustomInitFunction;\n+\n+        String commandTitle;\n+        try {\n+            if (isInvocation || isInitInvocation) {\n+                BType returnType;\n+                if (hasDefaultInitFunction) {\n+                    returnType = symbolAtCursor.type;\n+                } else if (hasCustomInitFunction) {\n+                    returnType = symbolAtCursor.owner.type;\n+                } else {\n+                    returnType = ((BInvokableSymbol) symbolAtCursor).retType;\n+                }\n+                if (returnType instanceof BUnionType) {\n+                    BUnionType unionType = (BUnionType) returnType;\n+                    if (!isRemoteInvocation) {\n+                        // Add type guard code action\n+                        commandTitle = String.format(CommandConstants.TYPE_GUARD_TITLE, symbolAtCursor.name);\n+                        List<TextEdit> tEdits = getTypeGuardCodeActionEdits(context, uri, refAtCursor, unionType);\n+                        if (!tEdits.isEmpty()) {\n+                            return Collections.singletonList(createQuickFixCodeAction(commandTitle, tEdits, uri));\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (IOException | WorkspaceDocumentException e) {\n+            throw new LSCodeActionProviderException(\"\", e);\n+        }\n+\n+        return new ArrayList<>();\n+    }\n+\n+    private static List<TextEdit> getTypeGuardCodeActionEdits(LSContext context, String uri,\n+                                                              Reference referenceAtCursor,\n+                                                              BUnionType unionType)\n+            throws WorkspaceDocumentException, IOException {\n+        WorkspaceDocumentManager docManager = context.get(DocumentServiceKeys.DOC_MANAGER_KEY);\n+        BLangNode bLangNode = referenceAtCursor.getbLangNode();\n+        Position startPos = new Position(bLangNode.pos.sLine - 1, bLangNode.pos.sCol - 1);\n+        Position endPosWithSemiColon = new Position(bLangNode.pos.eLine - 1, bLangNode.pos.eCol);\n+        Position endPos = new Position(bLangNode.pos.eLine - 1, bLangNode.pos.eCol - 1);\n+        Range newTextRange = new Range(startPos, endPosWithSemiColon);\n+\n+        List<TextEdit> edits = new ArrayList<>();\n+        String spaces = StringUtils.repeat('\\t', bLangNode.pos.sCol - 1);\n+        String padding = LINE_SEPARATOR + LINE_SEPARATOR + spaces;\n+        String content = CommandUtil.getContentOfRange(docManager, uri, new Range(startPos, endPos));\n+        // Remove last line feed\n+        while (content.endsWith(\"\\n\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84fa004e91341c52f94d02bd74496a9047e3c6e"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c6c80efbb32d0f136787a064b9085e5e26a41e2", "committedDate": "2020-09-17T17:15:19Z", "message": "Add review changes\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c1d21bc783190cbaafd22cc56cb05fc914cb1ac", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c1d21bc783190cbaafd22cc56cb05fc914cb1ac", "committedDate": "2020-09-17T17:13:26Z", "message": "Add review changes\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}, "afterCommit": {"oid": "5c6c80efbb32d0f136787a064b9085e5e26a41e2", "author": {"user": {"login": "rasika", "name": "Rasika Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c6c80efbb32d0f136787a064b9085e5e26a41e2", "committedDate": "2020-09-17T17:15:19Z", "message": "Add review changes\n\nSigned-off-by: Rasika <info.rasika@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODI3MjU4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25870#pullrequestreview-490827258", "createdAt": "2020-09-17T17:24:57Z", "commit": {"oid": "5c6c80efbb32d0f136787a064b9085e5e26a41e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4592, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}