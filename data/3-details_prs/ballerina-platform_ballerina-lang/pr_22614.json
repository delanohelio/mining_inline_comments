{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTM0OTY1", "number": 22614, "title": "Add test cases for query expressions", "bodyText": "Purpose\n\nTo cover additional test scenarios identified for query expressions\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-15T04:32:22Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22614", "merged": true, "mergeCommit": {"oid": "4d76081be3ef444d9ce46f8e03ed73dcefb4cb83"}, "closed": true, "closedAt": "2020-04-17T08:49:57Z", "author": {"login": "lasinicl"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXIHS8gH2gAyNDAzNTM0OTY1OjBmNGY5NmRhM2U4M2VkYWY2Yjc4MDlkNzMzNjMyZTBkOTZhZWRkYzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYdUc5gFqTM5NTI3NDUyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0f4f96da3e83edaf6b7809d733632e0d96aeddc9", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0f4f96da3e83edaf6b7809d733632e0d96aeddc9", "committedDate": "2020-04-13T05:33:33Z", "message": "Add additional test scenarios"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDc2ODYz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22614#pullrequestreview-393476863", "createdAt": "2020-04-15T06:03:03Z", "commit": {"oid": "0f4f96da3e83edaf6b7809d733632e0d96aeddc9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjowMzowM1rOGFq8Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjozNTo1OFrOGFrpYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTYzNQ==", "bodyText": "Add license headers. Refer already added class", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22614#discussion_r408599635", "createdAt": "2020-04-15T06:03:03Z", "author": {"login": "pcnfernando"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/AdditionalNegativeScenariosTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.ballerinalang.test.query;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4f96da3e83edaf6b7809d733632e0d96aeddc9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMTAwOQ==", "bodyText": "Line length should be less than 120", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22614#discussion_r408601009", "createdAt": "2020-04-15T06:07:24Z", "author": {"login": "pcnfernando"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/AdditionalNegativeScenariosTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.ballerinalang.test.query;\n+\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import static org.ballerinalang.test.util.BAssertUtil.validateError;\n+\n+public class AdditionalNegativeScenariosTest {\n+\t\n+    @Test\n+    public void testAllAdditionalNegativeScenarios() {\n+        CompileResult compileResult = BCompileUtil.compile(\"test-src/query/additional-negative-scenarios.bal\");\n+        Assert.assertEquals(compileResult.getErrorCount(), 9);\n+        int index = 0;\n+\n+        validateError(compileResult, index++, \"missing non-defaultable required record field 'lastName'\",33, 10);\n+        validateError(compileResult, index++, \"incompatible types: expected 'float', found 'int'\", 54, 13);\n+        validateError(compileResult, index++, \"undefined function 'calculateScore'\", 69, 22);\n+        validateError(compileResult, index++, \"invalid record binding pattern; unknown field 'fname' in record type 'Student'\", 106, 12);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4f96da3e83edaf6b7809d733632e0d96aeddc9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMTEwNQ==", "bodyText": "Remove unnecessary new lines", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22614#discussion_r408601105", "createdAt": "2020-04-15T06:07:45Z", "author": {"login": "pcnfernando"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/AdditionalNegativeScenariosTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.ballerinalang.test.query;\n+\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import static org.ballerinalang.test.util.BAssertUtil.validateError;\n+\n+public class AdditionalNegativeScenariosTest {\n+\t\n+    @Test\n+    public void testAllAdditionalNegativeScenarios() {\n+        CompileResult compileResult = BCompileUtil.compile(\"test-src/query/additional-negative-scenarios.bal\");\n+        Assert.assertEquals(compileResult.getErrorCount(), 9);\n+        int index = 0;\n+\n+        validateError(compileResult, index++, \"missing non-defaultable required record field 'lastName'\",33, 10);\n+        validateError(compileResult, index++, \"incompatible types: expected 'float', found 'int'\", 54, 13);\n+        validateError(compileResult, index++, \"undefined function 'calculateScore'\", 69, 22);\n+        validateError(compileResult, index++, \"invalid record binding pattern; unknown field 'fname' in record type 'Student'\", 106, 12);\n+        validateError(compileResult, index++, \"undefined symbol 'fname'\", 108, 15);\n+        validateError(compileResult, index++, \"incompatible types: expected 'Student', found '(string|float)'\", 123, 10);\n+        validateError(compileResult, index++, \"cannot assign a value to final 'twiceScore'\", 140, 10);\n+        validateError(compileResult, index++, \"incompatible types: expected 'FullName[]', found 'error?'\", 147, 13);\n+        validateError(compileResult, index, \"incompatible types: expected 'Address', found 'map<string>'\", 164, 13);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4f96da3e83edaf6b7809d733632e0d96aeddc9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMTE3MQ==", "bodyText": "Add a new line at end of file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22614#discussion_r408611171", "createdAt": "2020-04-15T06:35:58Z", "author": {"login": "pcnfernando"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/additional-negative-scenarios.bal", "diffHunk": "@@ -0,0 +1,168 @@\n+type Student record{|\n+    string firstName;\n+    string lastName;\n+    float score;\n+|};\n+\n+type FullName record{|\n+\tstring firstName;\n+\tstring lastName;\n+|};\n+\n+type Person record {|\n+   string firstName;\n+   string lastName;\n+   string deptAccess;\n+   Address address;\n+|};\n+\n+type Address record{|\n+    string city;\n+    string country;\n+|};\n+\n+function testMissingRequiredRecordField() returns Student[]{\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 82.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 90.6};\n+\n+    Student[] studentList = [s1, s2];\n+\n+\tStudent[] outputStudentList=\n+\t\tfrom var student in studentList\n+\t\tselect {\n+\t\t\tfirstName: student.firstName,\n+\t\t\tscore:student.score\n+\t\t};\n+\n+    return  outputStudentList;\n+}\n+\n+function testInvalidFieldValueInSelect() returns Student[]{\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 82.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 90.6};\n+\n+    Student[] studentList = [s1, s2];\n+\n+\tStudent[] outputStudentList=\n+    \tfrom var student in studentList\n+    \tlet int invalidScore=90\n+    \tselect {\n+    \t\tfirstName: student.firstName,\n+    \t\tlastName:student.lastName,\n+    \t\tscore:invalidScore\n+    \t};\n+\n+    return  outputStudentList;\n+}\n+\n+function testUndefinedFunctionInLet() returns Student[]{\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 82.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 90.6};\n+\n+    Student[] studentList = [s1, s2];\n+\n+    Student[] outputStudentList=\n+\t\tfrom var student in studentList\n+\t\tlet float avgScore=calculateScore()\n+\t\tselect {\n+\t\t\tfirstName: student.firstName,\n+\t\t\tlastName:student.lastName,\n+\t\t\tscore:avgScore\n+\t\t};\n+\n+    return  outputStudentList;\n+}\n+\n+function testDuplicateKeyInSelect() returns Student[]{\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 82.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 90.6};\n+\n+    Student[] studentList = [s1, s2];\n+\n+\tStudent[] outputStudentList=\n+\t\tfrom var student in studentList\n+\t\tselect {\n+\t\t    firstName: student.firstName,\n+        \tlastName:student.lastName,\n+        \tscore:student.score,\n+        \tlastName:student.lastName\n+\t\t};\n+\n+    return  outputStudentList;\n+}\n+\n+function testInvalidRecordBindingPattern() returns Student[]{\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 82.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 90.6};\n+\n+    Student[] studentList = [s1, s2];\n+\n+    Student[] outputStudentList=\n+\t\tfrom var {fname,lastName,score} in studentList\n+\t\tselect {\n+\t\t\tfirstName: fname,\n+\t\t\tlastName: lastName,\n+\t\t\tscore: score\n+\t\t};\n+\n+    return  outputStudentList;\n+}\n+\n+function testIncompatibleTypesInFrom() returns Student[]{\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 82.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 90.6};\n+\n+\tStudent[] outputStudentList=\n+\t\tfrom var student in s1\n+\t\tselect student;\n+\n+    return  outputStudentList;\n+}\n+\n+function testReassignValueInLet() returns FullName[]{\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 82.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 90.6};\n+\n+    Student[] studentList = [s1, s2];\n+\tFullName[] nameList = [];\n+\n+\tvar outputNameList =\n+\t    from var student in studentList\n+\t    let float twiceScore = (student.score*2)\n+\t    do {\n+\t        twiceScore = 1000;\n+\t        if(twiceScore<50){\n+\t            FullName fullname = {firstName:student.firstName,lastName:student.lastName};\n+\t            nameList.push(fullname);\n+\t        }\n+\t    };\n+\n+    return  outputNameList;\n+}\n+\n+function testMapAssignmetToRecordTypesWithRequiredFields() returns Person[]{\n+\n+    Person p1 = {firstName: \"Alex\", lastName: \"George\", deptAccess: \"XYZ\", address:{city:\"NY\", country:\"America\"}};\n+    Person p2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", deptAccess: \"XYZ\", address:{city:\"NY\", country:\"America\"}};\n+\n+    Person[] personList = [p1, p2];\n+\tmap<string> addr1 = {city:\"Manchester\",country:\"UK\"};\n+\n+    Person[] outputPersonList=\n+\t\tfrom var person in personList\n+\t\tselect {\n+\t\t\tfirstName: person.firstName,\n+\t\t\tlastName: person.lastName,\n+\t\t\tdeptAccess: person.deptAccess,\n+\t\t\taddress: addr1\n+\t\t};\n+\n+    return  outputPersonList;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4f96da3e83edaf6b7809d733632e0d96aeddc9"}, "originalPosition": 168}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ebb63eddfeecab04c61c2edfc1adc200526c79b", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ebb63eddfeecab04c61c2edfc1adc200526c79b", "committedDate": "2020-04-15T08:19:51Z", "message": "Include license header and reformat code fragments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTY4NjMw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22614#pullrequestreview-393568630", "createdAt": "2020-04-15T08:37:57Z", "commit": {"oid": "2ebb63eddfeecab04c61c2edfc1adc200526c79b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozNzo1N1rOGFvjow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozNzo1N1rOGFvjow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3NTIzNQ==", "bodyText": "Let's move the tests to existing negative test classes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22614#discussion_r408675235", "createdAt": "2020-04-15T08:37:57Z", "author": {"login": "pcnfernando"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/AdditionalNegativeScenariosTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.query;\n+\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import static org.ballerinalang.test.util.BAssertUtil.validateError;\n+\n+/**\n+ * Additional negative test cases for query expressions and query actions\n+ *\n+ * @since 1.2.0\n+ */\n+public class AdditionalNegativeScenariosTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebb63eddfeecab04c61c2edfc1adc200526c79b"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe25c1f036c18ba8f9100d0af4ae1401ff2e69f", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbe25c1f036c18ba8f9100d0af4ae1401ff2e69f", "committedDate": "2020-04-15T14:08:55Z", "message": "Include test cases to existing classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77ba760da27975ed8e5ee68fb055adac7fc0b652", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/77ba760da27975ed8e5ee68fb055adac7fc0b652", "committedDate": "2020-04-15T14:15:05Z", "message": "Update MultipleFromClauseTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "262d413b48eed3164bc3cc3c3107a9fd92e0c702", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/262d413b48eed3164bc3cc3c3107a9fd92e0c702", "committedDate": "2020-04-15T14:25:08Z", "message": "Update QueryNegativeTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6896d6812caf13330d68480da66d5671ba8064bb", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6896d6812caf13330d68480da66d5671ba8064bb", "committedDate": "2020-04-15T16:05:08Z", "message": "Remove tab characters in MultipleFromClauseTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc1b6440cf21c55e6fad9984454b41a33824088f", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dc1b6440cf21c55e6fad9984454b41a33824088f", "committedDate": "2020-04-15T16:08:15Z", "message": "Remove tabs in SimpleQryExprWithDefinedTypeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "052ad0326dcb4a2ee8cce97cf3f3eb0d686ba2db", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/052ad0326dcb4a2ee8cce97cf3f3eb0d686ba2db", "committedDate": "2020-04-15T17:47:09Z", "message": "Update MultipleFromClauseTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d845b3192ca5dccbb7407c4ca4efa613c37c45e", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d845b3192ca5dccbb7407c4ca4efa613c37c45e", "committedDate": "2020-04-15T17:48:04Z", "message": "Update MultipleWhereClauseTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1Mjc0NTIw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22614#pullrequestreview-395274520", "createdAt": "2020-04-17T08:49:51Z", "commit": {"oid": "3d845b3192ca5dccbb7407c4ca4efa613c37c45e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4063, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}