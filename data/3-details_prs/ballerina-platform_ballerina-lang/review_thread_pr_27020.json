{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzODc1MTQ3", "number": 27020, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNDo1ODoyNFrOE8EbwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1Mjo0NFrOE8NBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDIyNjU3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/scheduling/Scheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNDo1ODoyNFrOH3_ZEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNTowMjoyMlrOH3_b6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MjMzNg==", "bodyText": "listenerSet.remove(listener) only invoked if isListenerDeclarationFound is false, is that the correct thing?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27020#discussion_r528472336", "createdAt": "2020-11-23T04:58:24Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/scheduling/Scheduler.java", "diffHunk": "@@ -465,6 +473,45 @@ public void poison() {\n             runnableList.add(POISON_PILL);\n         }\n     }\n+\n+    public void setListenerDeclarationFound(boolean listenerDeclarationFound) {\n+        this.listenerDeclarationFound = listenerDeclarationFound;\n+        if (listenerDeclarationFound) {\n+            setImmortal(true);\n+        }\n+    }\n+\n+    public boolean isListenerDeclarationFound() {\n+        return listenerDeclarationFound;\n+    }\n+\n+    public ListenerRegistry getListenerRegistry() {\n+        return listenerRegistry;\n+    }\n+\n+    /**\n+     * The registry for runtime dynamic listeners.\n+     */\n+    public class ListenerRegistry {\n+        private final Set<BObject> listenerSet = new HashSet<>();\n+\n+        public synchronized void registerListener(BObject listener) {\n+            listenerSet.add(listener);\n+            setImmortal(true);\n+        }\n+\n+        public synchronized void deregisterListener(BObject listener) {\n+            if (!isListenerDeclarationFound() && listenerSet.remove(listener) && listenerSet.isEmpty()) {\n+                setImmortal(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "670ac236f0e27f2ca628733d26568609374b508e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MzA2NA==", "bodyText": "will fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27020#discussion_r528473064", "createdAt": "2020-11-23T05:02:22Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/scheduling/Scheduler.java", "diffHunk": "@@ -465,6 +473,45 @@ public void poison() {\n             runnableList.add(POISON_PILL);\n         }\n     }\n+\n+    public void setListenerDeclarationFound(boolean listenerDeclarationFound) {\n+        this.listenerDeclarationFound = listenerDeclarationFound;\n+        if (listenerDeclarationFound) {\n+            setImmortal(true);\n+        }\n+    }\n+\n+    public boolean isListenerDeclarationFound() {\n+        return listenerDeclarationFound;\n+    }\n+\n+    public ListenerRegistry getListenerRegistry() {\n+        return listenerRegistry;\n+    }\n+\n+    /**\n+     * The registry for runtime dynamic listeners.\n+     */\n+    public class ListenerRegistry {\n+        private final Set<BObject> listenerSet = new HashSet<>();\n+\n+        public synchronized void registerListener(BObject listener) {\n+            listenerSet.add(listener);\n+            setImmortal(true);\n+        }\n+\n+        public synchronized void deregisterListener(BObject listener) {\n+            if (!isListenerDeclarationFound() && listenerSet.remove(listener) && listenerSet.isEmpty()) {\n+                setImmortal(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MjMzNg=="}, "originalCommit": {"oid": "670ac236f0e27f2ca628733d26568609374b508e"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTQ5OTIzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/ShutDownListenerGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjoxNTowOVrOH4K5lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjoxNTowOVrOH4K5lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY2MDg4Nw==", "bodyText": "Missing since annotation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27020#discussion_r528660887", "createdAt": "2020-11-23T12:15:09Z", "author": {"login": "warunalakshitha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/ShutDownListenerGen.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.codegen;\n+\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import java.util.Map;\n+\n+import static org.objectweb.asm.ClassWriter.COMPUTE_FRAMES;\n+import static org.objectweb.asm.Opcodes.ACC_PRIVATE;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+import static org.objectweb.asm.Opcodes.V1_8;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.JAVA_THREAD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.JVM_INIT_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_STOP;\n+\n+/**\n+ * Generate the thread for the addShutDownHook.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a650217e47a1a261d77871fdb95f3ce18d3ecf"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTUwNjM1OnYy", "diffSide": "RIGHT", "path": "langlib/lang.runtime/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjoxNjo1NlrOH4K9qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjoxNjo1NlrOH4K9qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY2MTkzMA==", "bodyText": "Licence year 2020", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27020#discussion_r528661930", "createdAt": "2020-11-23T12:16:56Z", "author": {"login": "warunalakshitha"}, "path": "langlib/lang.runtime/build.gradle", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a650217e47a1a261d77871fdb95f3ce18d3ecf"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTUxMjcxOnYy", "diffSide": "LEFT", "path": "language-server/modules/langserver-core/src/test/resources/completion/new/class_def/config/config1.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjoxODozMlrOH4LBOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjozMjo0OFrOH4LfPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY2Mjg0MA==", "bodyText": "Do we need these config json changes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27020#discussion_r528662840", "createdAt": "2020-11-23T12:18:32Z", "author": {"login": "warunalakshitha"}, "path": "language-server/modules/langserver-core/src/test/resources/completion/new/class_def/config/config1.json", "diffHunk": "@@ -289,10 +289,10 @@\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.transaction\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a650217e47a1a261d77871fdb95f3ce18d3ecf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY3MDUyNg==", "bodyText": "These are for lang server tests. When the tests failed I regenerated these json files to support the runtime module", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27020#discussion_r528670526", "createdAt": "2020-11-23T12:32:48Z", "author": {"login": "riyafa"}, "path": "language-server/modules/langserver-core/src/test/resources/completion/new/class_def/config/config1.json", "diffHunk": "@@ -289,10 +289,10 @@\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.transaction\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY2Mjg0MA=="}, "originalCommit": {"oid": "a3a650217e47a1a261d77871fdb95f3ce18d3ecf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTYzMzY1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/MainMethodGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1Mjo0NFrOH4MJug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1Mjo0NFrOH4MJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTQwMg==", "bodyText": "Why do we have Var suffix in only initFuture variable? Shall we make all three names consistent as they are for similar purpose?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27020#discussion_r528681402", "createdAt": "2020-11-23T12:52:44Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/MainMethodGen.java", "diffHunk": "@@ -69,6 +69,9 @@\n  */\n public class MainMethodGen {\n \n+    public static final String INIT_FUTURE_VAR = \"initFutureVar\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa11fcb70d9a6f0ec040ff29f6db522d015dfa32"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3035, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}