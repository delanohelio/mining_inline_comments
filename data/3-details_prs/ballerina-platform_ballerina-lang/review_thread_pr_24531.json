{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyODU3MTM1", "number": 24531, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOToxNjo1MlrOENu1Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOToxNjo1MlrOENu1Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODM0MjQ3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/StaticMethods.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOToxNjo1MlrOGwgEqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzowNjozMVrOGx9K_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUxMDMxNA==", "bodyText": "Can't we avoid creating this array type each time this is called?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24531#discussion_r453510314", "createdAt": "2020-07-13T09:16:52Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/StaticMethods.java", "diffHunk": "@@ -392,4 +395,36 @@ public static BFuture getFutureOnly(BFuture future) {\n     public static BTypedesc getTypeDescOnly(BTypedesc typeDesc) {\n         return typeDesc;\n     }\n+\n+    public static ArrayValue getValues(MapValue<BString, Long> intMap, MapValue<BString, BString> stringMap) {\n+        int length = intMap.size() + stringMap.size();\n+        ListInitialValueEntry[] entries = new ListInitialValueEntry[length];\n+\n+        int index = 0;\n+\n+        for (Map.Entry<BString, Long> intEntry : intMap.entrySet()) {\n+            entries[index++] = new ListInitialValueEntry.ExpressionEntry(intEntry.getValue());\n+        }\n+\n+        for (Map.Entry<BString, BString> stringEntry : stringMap.entrySet()) {\n+            entries[index++] = new ListInitialValueEntry.ExpressionEntry(stringEntry.getValue());\n+        }\n+\n+        return new ArrayValueImpl(new BArrayType(new BUnionType(new ArrayList(2) {{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b9861acf55b8ed3ceb5e8faaede54ff45a5dcce"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyMjU2OA==", "bodyText": "The size which is passed to the BArrayType constructor depends on the actual map value arguments, so we can't create the array type just once. We could maybe extract out the union type, but this method is just called twice via a single test, so I'm not sure if there's much to gain by doing so. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24531#discussion_r454622568", "createdAt": "2020-07-14T20:25:00Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/StaticMethods.java", "diffHunk": "@@ -392,4 +395,36 @@ public static BFuture getFutureOnly(BFuture future) {\n     public static BTypedesc getTypeDescOnly(BTypedesc typeDesc) {\n         return typeDesc;\n     }\n+\n+    public static ArrayValue getValues(MapValue<BString, Long> intMap, MapValue<BString, BString> stringMap) {\n+        int length = intMap.size() + stringMap.size();\n+        ListInitialValueEntry[] entries = new ListInitialValueEntry[length];\n+\n+        int index = 0;\n+\n+        for (Map.Entry<BString, Long> intEntry : intMap.entrySet()) {\n+            entries[index++] = new ListInitialValueEntry.ExpressionEntry(intEntry.getValue());\n+        }\n+\n+        for (Map.Entry<BString, BString> stringEntry : stringMap.entrySet()) {\n+            entries[index++] = new ListInitialValueEntry.ExpressionEntry(stringEntry.getValue());\n+        }\n+\n+        return new ArrayValueImpl(new BArrayType(new BUnionType(new ArrayList(2) {{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUxMDMxNA=="}, "originalCommit": {"oid": "9b9861acf55b8ed3ceb5e8faaede54ff45a5dcce"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNTY0Nw==", "bodyText": "Ah just now I noticed that this is a test file. No need then", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24531#discussion_r455035647", "createdAt": "2020-07-15T13:06:31Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/StaticMethods.java", "diffHunk": "@@ -392,4 +395,36 @@ public static BFuture getFutureOnly(BFuture future) {\n     public static BTypedesc getTypeDescOnly(BTypedesc typeDesc) {\n         return typeDesc;\n     }\n+\n+    public static ArrayValue getValues(MapValue<BString, Long> intMap, MapValue<BString, BString> stringMap) {\n+        int length = intMap.size() + stringMap.size();\n+        ListInitialValueEntry[] entries = new ListInitialValueEntry[length];\n+\n+        int index = 0;\n+\n+        for (Map.Entry<BString, Long> intEntry : intMap.entrySet()) {\n+            entries[index++] = new ListInitialValueEntry.ExpressionEntry(intEntry.getValue());\n+        }\n+\n+        for (Map.Entry<BString, BString> stringEntry : stringMap.entrySet()) {\n+            entries[index++] = new ListInitialValueEntry.ExpressionEntry(stringEntry.getValue());\n+        }\n+\n+        return new ArrayValueImpl(new BArrayType(new BUnionType(new ArrayList(2) {{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUxMDMxNA=="}, "originalCommit": {"oid": "9b9861acf55b8ed3ceb5e8faaede54ff45a5dcce"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3203, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}