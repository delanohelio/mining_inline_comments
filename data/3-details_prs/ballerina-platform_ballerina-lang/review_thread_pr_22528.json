{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMTgyMzg0", "number": 22528, "reviewThreads": {"totalCount": 71, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1Mjo1MVrODwPshA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyMToyN1rODyGEow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE1Mzk2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1Mjo1MVrOGDIsFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1Mjo1MVrOGDIsFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `client endpoint` is used to connect to and interact with a socket server. The client can only send the data to the server and client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n          \n          \n            \n            The `client endpoint` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941271", "createdAt": "2020-04-09T03:52:51Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,35 @@\n-## Module overview\n-\n This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n \n-## Samples\n+### Client endpoints\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n-```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n+There are two types of client endpoints. They are`TCP Client endpoints` and `UDP Client endpoints`.\n \n-listener socket:Listener server = new(61598);\n+#### TCP Client endpoints\n+The `client endpoint` is used to connect to and interact with a socket server. The client can only send the data to the server and client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE1NTE4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1MzozMFrOGDIsvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1MzozMFrOGDIsvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTQzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n          \n          \n            \n            The `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941438", "createdAt": "2020-04-09T03:53:30Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,35 @@\n-## Module overview\n-\n This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n \n-## Samples\n+### Client endpoints\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n-```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n+There are two types of client endpoints. They are`TCP Client endpoints` and `UDP Client endpoints`.\n \n-listener socket:Listener server = new(61598);\n+#### TCP Client endpoints\n+The `client endpoint` is used to connect to and interact with a socket server. The client can only send the data to the server and client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n+A Client endpoint can be defined by providing host and port as follows:\n \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+```ballerina\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `UDP client endpoint` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;\n ```\n-### UDP Client endpoints\n-UDP client endpoint is used to interact with the remote UDP host.\n \n+### Listener endpoints\n+The `Listener` is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n+`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE1NTk5OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1NDowMFrOGDItNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1NDowMFrOGDItNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + content - The content that wish to send to the client socket\n          \n          \n            \n                # + content - The content, which will be sent to the client socket", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941558", "createdAt": "2020-04-09T03:54:00Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -48,9 +39,10 @@ public type Client client object {\n     }\n \n     # Writes given data to the client socket.\n+    # ```ballerina int|Error writeResult = socketClient:write(payloadByte); ```\n     #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE1NjUwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1NDoxN1rOGDIthQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1NDoxN1rOGDIthQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The number of bytes got written or an `Error` if encounters an error while writing\n          \n          \n            \n                # + return - The number of bytes that got written or an `Error` if encounters an error while writing\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941637", "createdAt": "2020-04-09T03:54:17Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -48,9 +39,10 @@ public type Client client object {\n     }\n \n     # Writes given data to the client socket.\n+    # ```ballerina int|Error writeResult = socketClient:write(payloadByte); ```\n     #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE1NjczOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1NDoyOVrOGDItrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1NDoyOVrOGDItrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + length - Represents the number of bytes which should be read\n          \n          \n            \n                # + length - Represents the number of bytes, which should be read", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941678", "createdAt": "2020-04-09T03:54:29Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2MjUyOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1ODoyM1rOGDIxEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1ODoyM1rOGDIxEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MjU0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n          \n          \n            \n                # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942544", "createdAt": "2020-04-09T03:58:23Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2MzQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1ODozOVrOGDIxhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1ODozOVrOGDIxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MjY2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `Error` if encounters an error while closing the connection or `nil`\n          \n          \n            \n                # + return - An `Error` if encounters an error while closing the connection or `nil`\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942660", "createdAt": "2020-04-09T03:58:39Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - An `Error` if encounters an error while closing the connection or `nil`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2Mzg3OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1ODo0N1rOGDIxtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1ODo0N1rOGDIxtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MjcxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`\n          \n          \n            \n                # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942710", "createdAt": "2020-04-09T03:58:47Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - An `Error` if encounters an error while closing the connection or `nil`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n     # Shutdowns the further read from socket.\n+    # ```ballerina Error? result = socketClient->shutdownRead(); ```\n     #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+    # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2NDQwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1ODo1NlrOGDIx8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1ODo1NlrOGDIx8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0Mjc3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `Error` if encounters an error while shutdown the write from socket or `nil`\n          \n          \n            \n                # + return - An `Error` if encounters an error while shutdown the write from socket or `nil`\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942771", "createdAt": "2020-04-09T03:58:56Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - An `Error` if encounters an error while closing the connection or `nil`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n     # Shutdowns the further read from socket.\n+    # ```ballerina Error? result = socketClient->shutdownRead(); ```\n     #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+    # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n     # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+    # ```ballerina Error? result = socketClient->shutdownWrite(); ```\n+    # + return - An `Error` if encounters an error while shutdown the write from socket or `nil`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2NTEyOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1OToyNlrOGDIyWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1OToyNlrOGDIyWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0Mjg3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + readTimeoutInMillis - The socket read timeout value to be used in milliseconds. If this is not set,\n          \n          \n            \n            # + readTimeoutInMillis - The socket reading timeout value to be used in milliseconds. If this is not set,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942875", "createdAt": "2020-04-09T03:59:26Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - An `Error` if encounters an error while closing the connection or `nil`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n     # Shutdowns the further read from socket.\n+    # ```ballerina Error? result = socketClient->shutdownRead(); ```\n     #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+    # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n     # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+    # ```ballerina Error? result = socketClient->shutdownWrite(); ```\n+    # + return - An `Error` if encounters an error while shutdown the write from socket or `nil`\n     public remote function shutdownWrite() returns Error? {\n         return externShutdownWrite(self);\n     }\n };\n \n-# Configuration for socket client endpoint.\n+# Configurations for socket client endpoint.\n #\n-# + host - Target service URL\n-# + port - Port number of the remote service\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n-# + callbackService - The callback service for the client. Resources in this service gets called on receipt of messages from the server.\n+# + host - The target service URL\n+# + port - The port number of the remote service\n+# + readTimeoutInMillis - The socket read timeout value to be used in milliseconds. If this is not set,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2NjA2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMDowNVrOGDIy6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMDowNVrOGDIy6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzAxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + interface - The interface for the server with to bind\n          \n          \n            \n            # + interface - The interface for the server to be bound", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943017", "createdAt": "2020-04-09T04:00:05Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -54,8 +53,9 @@ public type Listener object {\n \n # Represents the socket server configuration.\n #\n-# + interface - the interface that server with to bind\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n+# + interface - The interface for the server with to bind", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2NjIyOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMDoxMlrOGDIy_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMDoxMlrOGDIy_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzAzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + readTimeoutInMillis - The socket read timeout value to be used in milliseconds. If this is not set,\n          \n          \n            \n            # + readTimeoutInMillis - The socket reading timeout value to be used in milliseconds. If this is not set,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943038", "createdAt": "2020-04-09T04:00:12Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -54,8 +53,9 @@ public type Listener object {\n \n # Represents the socket server configuration.\n #\n-# + interface - the interface that server with to bind\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n+# + interface - The interface for the server with to bind\n+# + readTimeoutInMillis - The socket read timeout value to be used in milliseconds. If this is not set,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2NjY1OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/socket_error.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMDoyOVrOGDIzRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMDoyOVrOGDIzRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzExMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cause - The cause of the error; If this error occurred due to another error\n          \n          \n            \n            # + cause - The cause of the error if this error occurred due to another error", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943110", "createdAt": "2020-04-09T04:00:29Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/socket_error.bal", "diffHunk": "@@ -16,8 +16,8 @@\n \n # Record type to hold the details of an error.\n #\n-# + message - Specific error message of the error.\n-# + cause - Any other error, which causes this error.\n+# + message - The specific error message for the error.\n+# + cause - The cause of the error; If this error occurred due to another error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2NzA2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMDo1MlrOGDIzig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMDo1MlrOGDIzig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzE3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + content - The content that wish to send to the client socket\n          \n          \n            \n                # + content - The content to be sent to the client socket", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943178", "createdAt": "2020-04-09T04:00:52Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2NzMwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMTowMlrOGDIzrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMTowMlrOGDIzrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzIxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The number of bytes got written or an `Error` if encounters an error while writing\n          \n          \n            \n                # + return - The number of bytes got written or an `Error` if encounters an error while writing\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943215", "createdAt": "2020-04-09T04:01:02Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2NzUwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMToxMlrOGDIz1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMToxMlrOGDIz1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzI1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + length - Represents the number of bytes which should be read\n          \n          \n            \n                # + length - Represents the number of bytes, which should be read", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943255", "createdAt": "2020-04-09T04:01:12Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n     # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n     # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n     # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+    # ```ballerina [byte[], int, Address]|ReadTimedOutError result = socketClient->receiveFrom(); ```\n     #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2ODE0OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMTozNFrOGDI0Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMTozNFrOGDI0Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzMzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The content as a byte array, the number of bytes read and the address of the sender\n          \n          \n            \n                # + return - The content as a byte array, the number of bytes read, the address of the sender,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943339", "createdAt": "2020-04-09T04:01:34Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n     # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n     # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n     # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+    # ```ballerina [byte[], int, Address]|ReadTimedOutError result = socketClient->receiveFrom(); ```\n     #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - The content as a byte array, the number of bytes read and the address of the sender", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2ODIyOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMTo0MlrOGDI0PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMTo0MlrOGDI0PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzM1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            or an `Error` if encounters an error while reading\n          \n          \n            \n                #            or an `Error` if encounters an error while reading\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943357", "createdAt": "2020-04-09T04:01:42Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n     # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n     # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n     # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+    # ```ballerina [byte[], int, Address]|ReadTimedOutError result = socketClient->receiveFrom(); ```\n     #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - The content as a byte array, the number of bytes read and the address of the sender\n+    #            or an `Error` if encounters an error while reading", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2ODc1OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMTo1MlrOGDI0hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMTo1MlrOGDI0hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzQyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - an `Error` if encounters an error while closing the connection or `nil`\n          \n          \n            \n                # + return - an `Error` if encounters an error while closing the connection or `nil`\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943428", "createdAt": "2020-04-09T04:01:52Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n     # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n     # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n     # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+    # ```ballerina [byte[], int, Address]|ReadTimedOutError result = socketClient->receiveFrom(); ```\n     #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - The content as a byte array, the number of bytes read and the address of the sender\n+    #            or an `Error` if encounters an error while reading\n     public remote function receiveFrom(int length = -100) returns [byte[], int, Address]|ReadTimedOutError {\n         return externReceiveFrom(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - an `Error` if encounters an error while closing the connection or `nil`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTE2OTAyOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMjowMVrOGDI0pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowMjowMVrOGDI0pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configurations for UDP client.\n          \n          \n            \n            # Configurations for the UDP client.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943463", "createdAt": "2020-04-09T04:02:01Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -82,9 +79,10 @@ public type Address record {|\n     int port;\n |};\n \n-# Configuration for UDP client.\n+# Configurations for UDP client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc4MDk4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0MDoxMFrOGD99pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozOTo0MVrOGD_fmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNDExNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n          \n          \n            \n            This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n          \n      \n    \n    \n  \n\nNeed to add the below sentence and link to any existing BBEs.\nFor information on the operations, which you can perform with this module, see the below Functions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406814117", "createdAt": "2020-04-10T15:40:10Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40306bf77de9a2c65d1c213033155fe8fbb45717"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTIyMQ==", "bodyText": "I think, I already added. Do you mention https://github.com/ballerina-platform/ballerina-lang/pull/22528/files#diff-9b7e561f4f3218cb1989b22fbbd2a70eR29?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406831221", "createdAt": "2020-04-10T16:20:27Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNDExNw=="}, "originalCommit": {"oid": "40306bf77de9a2c65d1c213033155fe8fbb45717"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzOTE5NA==", "bodyText": "Reviewed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406839194", "createdAt": "2020-04-10T16:39:41Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNDExNw=="}, "originalCommit": {"oid": "40306bf77de9a2c65d1c213033155fe8fbb45717"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc4MjA3OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0MDozNVrOGD9-WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0MDozNVrOGD9-WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNDI5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if client can't be closed the connection or else `nil`\n          \n          \n            \n            # + return - A `socket:Error` if client can't be closed the connection or else `nil`\n          \n      \n    \n    \n  \n\nPlease replace all occurrences of \"nil\" with \"()\".", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406814297", "createdAt": "2020-04-10T15:40:35Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `nil`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40306bf77de9a2c65d1c213033155fe8fbb45717"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDgwNTAwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0ODo1OVrOGD-Mjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0ODo1OVrOGD-Mjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzkzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + config - Configurations related to consumer endpoint\n          \n          \n            \n                # + config - Configurations related to the consumer endpoint", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406817934", "createdAt": "2020-04-10T15:48:59Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -18,34 +18,55 @@ import ballerina/lang.'object as lang;\n import ballerina/java;\n \n # Represents service endpoint where socket server service registered and start.\n-#\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to consumer endpoint", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40306bf77de9a2c65d1c213033155fe8fbb45717"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDk0MTg2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozOToyMlrOGD_fHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozOToyMlrOGD_fHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzOTA3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * [Basic TCP Socket](https://ballerina.io/learn/by-example/tcp-socket-listener-client.html)\n          \n          \n            \n             * [Basic TCP Socket Example](https://ballerina.io/learn/by-example/tcp-socket-listener-client.html)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406839071", "createdAt": "2020-04-10T16:39:22Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;\n ```\n-### UDP Client endpoints\n-UDP client endpoint is used to interact with the remote UDP host.\n \n+### Listener endpoints\n+The `socket:Listener` is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n+The `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n+\n+A `socket:Listener` endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n+listener socket:Listener server = new(61598);\n+```\n \n-public function main() {\n-    socket:UdpClient socketClient = new;\n-    string msg = \"Hello from UDP client\";\n-    byte[] c1 = msg.toBytes();\n-    var sendResult =\n-        socketClient->sendTo(c1, { host: \"localhost\", port: 48826 });\n-    if (sendResult is int) {\n-        io:println(\"Number of bytes written: \", sendResult);\n-    } else {\n-        panic sendResult;\n-    }\n-    var result = socketClient->receiveFrom();\n-    if (result is [byte[], int, socket:Address]) {\n-        var [content, length, address] = result;\n-        io:ReadableByteChannel byteChannel \n-                = checkpanic io:createReadableChannel(content);\n-        io:ReadableCharacterChannel characterChannel \n-                = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-        var str = characterChannel.read(60);\n-        if (str is string) {\n-            io:println(\"Received: \", <@untainted> str);\n-        } else {\n-            io:println(str.detail()[\"message\"]);\n-        }\n-    } else {\n-        io:println(\"An error occurred while receiving the data \", result);\n-    }\n-    var closeResult = socketClient->close();\n-    if (closeResult is error) {\n-        io:println(\"An error occurred while closing the connection \", \n-                    closeResult);\n-    }\n-}\n-```\n\\ No newline at end of file\n+For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the following.\n+ * [Basic TCP Socket](https://ballerina.io/learn/by-example/tcp-socket-listener-client.html)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1710aed573392b2aabbb4e303c4428b1bd5516"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDk0MjExOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozOTozMFrOGD_fSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozOTozMFrOGD_fSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzOTExNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * [Basic UDP Client Socket](https://ballerina.io/learn/by-example/udp-socket-client.html).\n          \n          \n            \n             * [Basic UDP Client Socket Example](https://ballerina.io/learn/by-example/udp-socket-client.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406839114", "createdAt": "2020-04-10T16:39:30Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;\n ```\n-### UDP Client endpoints\n-UDP client endpoint is used to interact with the remote UDP host.\n \n+### Listener endpoints\n+The `socket:Listener` is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n+The `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n+\n+A `socket:Listener` endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n+listener socket:Listener server = new(61598);\n+```\n \n-public function main() {\n-    socket:UdpClient socketClient = new;\n-    string msg = \"Hello from UDP client\";\n-    byte[] c1 = msg.toBytes();\n-    var sendResult =\n-        socketClient->sendTo(c1, { host: \"localhost\", port: 48826 });\n-    if (sendResult is int) {\n-        io:println(\"Number of bytes written: \", sendResult);\n-    } else {\n-        panic sendResult;\n-    }\n-    var result = socketClient->receiveFrom();\n-    if (result is [byte[], int, socket:Address]) {\n-        var [content, length, address] = result;\n-        io:ReadableByteChannel byteChannel \n-                = checkpanic io:createReadableChannel(content);\n-        io:ReadableCharacterChannel characterChannel \n-                = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-        var str = characterChannel.read(60);\n-        if (str is string) {\n-            io:println(\"Received: \", <@untainted> str);\n-        } else {\n-            io:println(str.detail()[\"message\"]);\n-        }\n-    } else {\n-        io:println(\"An error occurred while receiving the data \", result);\n-    }\n-    var closeResult = socketClient->close();\n-    if (closeResult is error) {\n-        io:println(\"An error occurred while closing the connection \", \n-                    closeResult);\n-    }\n-}\n-```\n\\ No newline at end of file\n+For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the following.\n+ * [Basic TCP Socket](https://ballerina.io/learn/by-example/tcp-socket-listener-client.html)\n+ * [Basic UDP Client Socket](https://ballerina.io/learn/by-example/udp-socket-client.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1710aed573392b2aabbb4e303c4428b1bd5516"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIyNTE1OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowMDo1NlrOGELAwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowMDo1NlrOGELAwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNzkwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n          \n          \n            \n            This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407027905", "createdAt": "2020-04-11T07:00:56Z", "author": {"login": "chamil321"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIyOTY4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowNzowMlrOGELCzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowNzowMlrOGELCzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODQyOA==", "bodyText": "Shall we concatenate this sentence to above to get rid of this endpoint part?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407028428", "createdAt": "2020-04-11T07:07:02Z", "author": {"login": "chamil321"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzMTU2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowOToxNVrOGELDog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowOToxNVrOGELDog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODY0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A `socket:Listener` endpoint can be defined as follows:\n          \n          \n            \n            A `socket:Listener` can be defined as follows:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407028642", "createdAt": "2020-04-11T07:09:15Z", "author": {"login": "chamil321"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;\n ```\n-### UDP Client endpoints\n-UDP client endpoint is used to interact with the remote UDP host.\n \n+### Listener endpoints\n+The `socket:Listener` is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n+The `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n+\n+A `socket:Listener` endpoint can be defined as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0NDY1OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyNjoyMFrOGELJkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyNjoyMFrOGELJkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDE2Mg==", "bodyText": "Add code snippets, Check following LC methods as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030162", "createdAt": "2020-04-11T07:26:20Z", "author": {"login": "chamil321"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -18,34 +18,55 @@ import ballerina/lang.'object as lang;\n import ballerina/java;\n \n # Represents service endpoint where socket server service registered and start.\n-#\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the consumer endpoint\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the `socket:Listener`.\n+    #", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0ODgzOnYy", "diffSide": "LEFT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMjo1MFrOGELLgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMjo1MFrOGELLgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDY1Nw==", "bodyText": "This API change cannot be pushed with a patch release. Either we have to undo this change from the PR or push these changes to a minor release", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030657", "createdAt": "2020-04-11T07:32:50Z", "author": {"login": "chamil321"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -18,19 +18,10 @@ import ballerina/java;\n \n # Represents socket client and related remote functions.\n #\n-# + remotePort - the remote port number to which this socket is connected\n-# + localPort - the local port number to which this socket is bound\n-# + remoteAddress - the remote IP address string in textual presentation to which the socket is connected\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + id - a unique identifier to identify each client\n+# + config - The configurations for the socket client endpoint\n public type Client client object {\n \n     private ClientConfig? config = ();\n-    public int remotePort = 0;\n-    public int localPort = 0;\n-    public string? remoteAddress = ();\n-    public string? localAddress = ();\n-    public int id = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MDAxOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNDoyN1rOGELMCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNDoyN1rOGELMCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDc5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `socket:UdpClient` is used to interact with the remote UDP host. \n          \n          \n            \n            The `socket:UdpClient` is used to interact with the remote UDP host", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030794", "createdAt": "2020-04-11T07:34:27Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MDIyOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNDo0NVrOGELMJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNDo0NVrOGELMJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDgyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This endpoint can be defined as follows:\n          \n          \n            \n            and it can be defined as follows:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030820", "createdAt": "2020-04-11T07:34:45Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MDkxOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNTo1MlrOGELMdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNTo1MlrOGELMdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDkwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A Client endpoint can be defined by providing host and port as follows:\n          \n          \n            \n            A Client endpoint can be defined by providing the host and port as follows:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030903", "createdAt": "2020-04-11T07:35:52Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MTI4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNjo0MlrOGELMoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNjo0MlrOGELMoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDk0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents socket client and related remote functions.\n          \n          \n            \n            # Represents the socket client and related remote functions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030945", "createdAt": "2020-04-11T07:36:42Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -18,19 +18,10 @@ import ballerina/java;\n \n # Represents socket client and related remote functions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MTcxOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNzoxMlrOGELMzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNzoxMlrOGELMzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDk5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + config - The configurations for the socket client endpoint\n          \n          \n            \n            # + config - The configurations for the socket client \n          \n      \n    \n    \n  \n\nRemoving as per @chamil321's comment above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030991", "createdAt": "2020-04-11T07:37:12Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -18,19 +18,10 @@ import ballerina/java;\n \n # Represents socket client and related remote functions.\n #\n-# + remotePort - the remote port number to which this socket is connected\n-# + localPort - the local port number to which this socket is bound\n-# + remoteAddress - the remote IP address string in textual presentation to which the socket is connected\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + id - a unique identifier to identify each client\n+# + config - The configurations for the socket client endpoint", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MTc1OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNzoyNFrOGELM1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozNzoyNFrOGELM1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDk5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes given data to the client socket.\n          \n          \n            \n            # Writes the given data to the client socket.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030998", "createdAt": "2020-04-11T07:37:24Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MjIyOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozODowMFrOGELNDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozODowMFrOGELNDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n          \n          \n            \n            # + return - Content as a byte array, the number of bytes read, or else a `socket:ReadTimedOutError` if the data", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031052", "createdAt": "2020-04-11T07:38:00Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MjQ4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozODozMFrOGELNLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozODozMFrOGELNLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if client can't be closed the connection or else `()`\n          \n          \n            \n            # + return - A `socket:Error` if the client can't close the connection or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031086", "createdAt": "2020-04-11T07:38:30Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MjkyOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozODo1NVrOGELNYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozODo1NVrOGELNYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTEzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Shutdowns the further read from socket.\n          \n          \n            \n            # Shuts down any further reading from the socket.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031136", "createdAt": "2020-04-11T07:38:55Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shutdowns the further read from socket.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MzU3OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozOTozOVrOGELNrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozOTozOVrOGELNrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTIxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if client can't be shutdown the read from socket or else `()`\n          \n          \n            \n            # + return - A `socket:Error` if the client can't be shut down to stop reading from the socket or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031213", "createdAt": "2020-04-11T07:39:39Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shutdowns the further read from socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be shutdown the read from socket or else `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1Mzg2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MDowMFrOGELNzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MDowMFrOGELNzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTI0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Shutdowns the further write from socket.\n          \n          \n            \n            # Shuts down any further writing from the socket.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031245", "createdAt": "2020-04-11T07:40:00Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shutdowns the further read from socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be shutdown the read from socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shutdowns the further write from socket.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1NDExOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MDoyOFrOGELN6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MDoyOFrOGELN6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTI3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if client can't be shutdown the write from socket or else `()`\n          \n          \n            \n            # + return - A `socket:Error` if the client can't shut down to stop the writing to the socket or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031272", "createdAt": "2020-04-11T07:40:28Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shutdowns the further read from socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be shutdown the read from socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shutdowns the further write from socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownWrite();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be shutdown the write from socket or else `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1NDQ4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MToxM1rOGELOGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MToxM1rOGELOGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTMyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents service endpoint where socket server service registered and start.\n          \n          \n            \n            # Represents the service endpoint on which the socket server service is registered and started.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031320", "createdAt": "2020-04-11T07:41:13Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -18,34 +18,55 @@ import ballerina/lang.'object as lang;\n import ballerina/java;\n \n # Represents service endpoint where socket server service registered and start.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1NTE3OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MjoxM1rOGELOag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MjoxM1rOGELOag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTQwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents UDP socket client and related remote functions.\n          \n          \n            \n            # Represents the UDP socket client and related remote functions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031402", "createdAt": "2020-04-11T07:42:13Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -18,21 +18,15 @@ import ballerina/java;\n \n # Represents UDP socket client and related remote functions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1NTI4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MjozMFrOGELOeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MjozMFrOGELOeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTQxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Initialize the UDP client based on provided configuration.\n          \n          \n            \n                # Initializes the UDP client based on the provided configurations.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031416", "createdAt": "2020-04-11T07:42:30Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -18,21 +18,15 @@ import ballerina/java;\n \n # Represents UDP socket client and related remote functions.\n #\n-# + localPort - the local port number to which this socket is bound\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + interface - network interface to bind to\n-# + id - a unique identifier to identify each client\n+# + localAddress - The local IP address string in textual presentation to which the socket is bound\n public type UdpClient client object {\n \n     private Address? localAddress = ();\n-    public int localPort = 0;\n-    public string? interface = ();\n-    public int id = 0;\n \n     # Initialize the UDP client based on provided configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1NTUwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0Mjo0MVrOGELOkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0Mjo0MVrOGELOkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTQ0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + localAddress - Locally binding interface and port\n          \n          \n            \n                # + localAddress - Local binding of the interface and port", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031441", "createdAt": "2020-04-11T07:42:41Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -18,21 +18,15 @@ import ballerina/java;\n \n # Represents UDP socket client and related remote functions.\n #\n-# + localPort - the local port number to which this socket is bound\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + interface - network interface to bind to\n-# + id - a unique identifier to identify each client\n+# + localAddress - The local IP address string in textual presentation to which the socket is bound\n public type UdpClient client object {\n \n     private Address? localAddress = ();\n-    public int localPort = 0;\n-    public string? interface = ();\n-    public int id = 0;\n \n     # Initialize the UDP client based on provided configuration.\n     #\n     # + localAddress - Locally binding interface and port", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1NTgwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0Mjo1N1rOGELOsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0Mjo1N1rOGELOsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTQ3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Send given data to the specified remote client.\n          \n          \n            \n            # Sends the given data to the specified remote client.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031473", "createdAt": "2020-04-11T07:42:57Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +39,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Send given data to the specified remote client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1NjI3OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MzozMVrOGELO5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MzozMVrOGELO5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTUyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n          \n          \n            \n            # are received from the client. Else, return the data available in the OS buffer or wait until data is received.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031526", "createdAt": "2020-04-11T07:43:31Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +39,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Send given data to the specified remote client.\n+# ```ballerina\n+# int|socket:Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826});\n+# ```\n+#\n+# + content - The content to be sent to the client socket\n+# + address - The address of the remote client socket\n+# + return - The number of bytes got written or else a `socket:Error` if the given data can't be sent\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n-    # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n-    # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n-    #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+# Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer or wait until data receive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1NjcwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0NDowMlrOGELPHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0NDowMlrOGELPHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTU4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if can't be closed the connection or else `()`\n          \n          \n            \n            # + return - A `socket:Error` if it can't close the connection or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031580", "createdAt": "2020-04-11T07:44:02Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +39,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Send given data to the specified remote client.\n+# ```ballerina\n+# int|socket:Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826});\n+# ```\n+#\n+# + content - The content to be sent to the client socket\n+# + address - The address of the remote client socket\n+# + return - The number of bytes got written or else a `socket:Error` if the given data can't be sent\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n-    # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n-    # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n-    #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+# Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n+# If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+# ```ballerina\n+# [byte[], int, Address]|socket:ReadTimedOutError result = socketClient->receiveFrom();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - The content as a byte array, the number of bytes read, the address of the sender,\n+#            or else a `socket:Error` if the data can't be read from the client\n     public remote function receiveFrom(int length = -100) returns [byte[], int, Address]|ReadTimedOutError {\n         return externReceiveFrom(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if can't be closed the connection or else `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a743aef03e706feab31f7b4fca5761857c863e35"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjgwMTYzOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODo1Nzo0OVrOGEPUoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODo1Nzo0OVrOGEPUoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODUyOA==", "bodyText": "\"provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request\"\n^ The above doesn't sound right. Need to be rephrased properly.\nAlso, the \"endpoint\" terminology was dropped some time back. Again, needs to be rephrased in a better way", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407098528", "createdAt": "2020-04-11T18:57:49Z", "author": {"login": "pubudu91"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a052f59524c13d21762eeb3a92fb615053a3aa66"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjgwMjI5OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODo1ODo0MVrOGEPU8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODo1OTowMVrOGEPVKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODYxMA==", "bodyText": "Drop the use of the term endpoint.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407098610", "createdAt": "2020-04-11T18:58:41Z", "author": {"login": "pubudu91"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a052f59524c13d21762eeb3a92fb615053a3aa66"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODY2Nw==", "bodyText": "Applies to other places as well, where clients and listeners are referred to as endpoints", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407098667", "createdAt": "2020-04-11T18:59:01Z", "author": {"login": "pubudu91"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODYxMA=="}, "originalCommit": {"oid": "a052f59524c13d21762eeb3a92fb615053a3aa66"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjgwNTE2OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTowMjowOVrOGEPWRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTowMjowOVrOGEPWRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODk1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n          \n          \n            \n            The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's call-back service can retrieve the data from the server and do multiple requests/responses between the client and the server.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407098951", "createdAt": "2020-04-11T19:02:09Z", "author": {"login": "pubudu91"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a052f59524c13d21762eeb3a92fb615053a3aa66"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjc4NzU0OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo1MDo0N1rOGFElSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo1MjowN1rOGFEocg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MTE0Ng==", "bodyText": "We need to mention the callback service as well here. template of the callback service.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407971146", "createdAt": "2020-04-14T08:50:47Z", "author": {"login": "daneshk"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+A Client endpoint can be defined by providing the host and port as follows:\n \n-## Samples\n-\n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a052f59524c13d21762eeb3a92fb615053a3aa66"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MTk1NA==", "bodyText": "And how the client can be used. following lines\n    string msg = \"Hello Ballerina\\n\";\n    byte[] c1 = msg.toBytes();\n    var writeResult = socketClient->write(c1);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407971954", "createdAt": "2020-04-14T08:52:07Z", "author": {"login": "daneshk"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+A Client endpoint can be defined by providing the host and port as follows:\n \n-## Samples\n-\n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MTE0Ng=="}, "originalCommit": {"oid": "a052f59524c13d21762eeb3a92fb615053a3aa66"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjc5ODAzOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo1MzozM1rOGFEr7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo1OTo0M1rOGFE8Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3Mjg0NQ==", "bodyText": "We need to add code snippets and describe the usage of this client", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407972845", "createdAt": "2020-04-14T08:53:33Z", "author": {"login": "daneshk"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+A Client endpoint can be defined by providing the host and port as follows:\n \n-## Samples\n-\n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n-\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host and it can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a052f59524c13d21762eeb3a92fb615053a3aa66"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NTkyMQ==", "bodyText": "like https://github.com/daneshk/ballerina/blob/nats-docs-updates/stdlib/messaging/nats/src/main/ballerina/src/nats/Module.md", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407975921", "createdAt": "2020-04-14T08:58:07Z", "author": {"login": "daneshk"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+A Client endpoint can be defined by providing the host and port as follows:\n \n-## Samples\n-\n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n-\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host and it can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3Mjg0NQ=="}, "originalCommit": {"oid": "a052f59524c13d21762eeb3a92fb615053a3aa66"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NzAwNw==", "bodyText": "It doesn't need to be complete code. only specify the important codes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407977007", "createdAt": "2020-04-14T08:59:43Z", "author": {"login": "daneshk"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+A Client endpoint can be defined by providing the host and port as follows:\n \n-## Samples\n-\n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n-\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host and it can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3Mjg0NQ=="}, "originalCommit": {"oid": "a052f59524c13d21762eeb3a92fb615053a3aa66"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY1OTAwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowMjoxOVrOGFp38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowMjoxOVrOGFp38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MjEzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + id - An unique identifier to identify each client\n          \n          \n            \n            # + id - A unique identifier to identify each client\n          \n      \n    \n    \n  \n\nhttps://www.quora.com/Which-is-the-correct-grammar-usage-a-unique-or-an-unique", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408582130", "createdAt": "2020-04-15T05:02:19Z", "author": {"login": "chamil321"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -16,23 +16,23 @@\n \n import ballerina/java;\n \n-# Represents UDP socket client and related remote functions.\n+# Initializes the UDP client based on the provided configurations.\n #\n-# + localPort - the local port number to which this socket is bound\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + interface - network interface to bind to\n-# + id - a unique identifier to identify each client\n+# + localPort - The local port number to which this socket is bound\n+# + localAddress - The local IP address string in textual presentation to which the socket is bound\n+# + interface - The network interface to bind to\n+# + id - An unique identifier to identify each client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY2MjM4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNDoxN1rOGFp55w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNDoxN1rOGFp55w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MjYzMQ==", "bodyText": "socket server or socket listener the proper term here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408582631", "createdAt": "2020-04-15T05:04:17Z", "author": {"login": "chamil321"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket server on which the socket server service is registered and started.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY2MzAzOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNDo0M1rOGFp6UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNDo0M1rOGFp6UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MjczNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configurations for the socket client endpoint.\n          \n          \n            \n            # Configurations for the socket client.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408582737", "createdAt": "2020-04-15T05:04:43Z", "author": {"login": "chamil321"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array and the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't close the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shuts down any further reading from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't be shut down to stop reading from the socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shuts down any further writing from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownWrite();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't shut down to stop the writing to the socket or else `()`\n     public remote function shutdownWrite() returns Error? {\n         return externShutdownWrite(self);\n     }\n };\n \n-# Configuration for socket client endpoint.\n+# Configurations for the socket client endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY2Nzk4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNzoyOVrOGFp9MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTozMjowN1rOGFqXNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MzQ3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides an implementation for sending/receiving messages to/from another application process (local or remote) for both connection-oriented and connectionless protocols.\n          \n          \n            \n            This module provides an implementation for sending/receiving messages to/from another application process (local or remote) for both connection-oriented and connectionless protocols. The module facilitates a TCP `Client` and a TCP `Listener`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408583472", "createdAt": "2020-04-15T05:07:29Z", "author": {"login": "chamil321"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,56 @@\n-## Module overview\n+This module provides an implementation for sending/receiving messages to/from another application process (local or remote) for both connection-oriented and connectionless protocols.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MDEzMg==", "bodyText": "Connection-oriented and connectionless protocols indicate TCP and UDP. So, I think, Don't need to update this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408590132", "createdAt": "2020-04-15T05:32:07Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,56 @@\n-## Module overview\n+This module provides an implementation for sending/receiving messages to/from another application process (local or remote) for both connection-oriented and connectionless protocols.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MzQ3Mg=="}, "originalCommit": {"oid": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUyMDc4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxNTozM1rOGF7zvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxNTozM1rOGF7zvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NTk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A Client can be defined by providing the host, port and callbackService as follows:\n          \n          \n            \n            A Client can be defined by providing the host, port, and callbackService as follows.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408875966", "createdAt": "2020-04-15T14:15:33Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,56 @@\n-## Module overview\n+This module provides an implementation for sending/receiving messages to/from another application process (local or remote) for both connection-oriented and connectionless protocols.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client\n \n-## Samples\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's call-back service can retrieve the data from the server and do multiple requests/responses between the client and the server.\n+\n+A Client can be defined by providing the host, port and callbackService as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUyNzYwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxNzowM1rOGF73-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxNzowM1rOGF73-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NzA0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n          \n          \n            \n            # Reads data from the client socket. If the data has the specified length, then it waits until that number of bytes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408877048", "createdAt": "2020-04-15T14:17:03Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUyODI5OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxNzoxMlrOGF74Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxNzoxMlrOGF74Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NzE1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # are received from the client. Else, return the data available in the OS buffer.\n          \n          \n            \n            # are received from the client. Else, it returns the data available in the OS buffer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408877151", "createdAt": "2020-04-15T14:17:12Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUzMzA4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODoxMVrOGF77bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODoxMVrOGF77bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NzkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + callbackService - The callback service for the client. Resources in this service gets called on receipt\n          \n          \n            \n            # + callbackService - The callback service for the client. Resources in this service gets called on the receipt", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408877935", "createdAt": "2020-04-15T14:18:11Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array and the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't close the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shuts down any further reading from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't be shut down to stop reading from the socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shuts down any further writing from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownWrite();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't shut down to stop the writing to the socket or else `()`\n     public remote function shutdownWrite() returns Error? {\n         return externShutdownWrite(self);\n     }\n };\n \n-# Configuration for socket client endpoint.\n+# Configurations for the socket client.\n #\n-# + host - Target service URL\n-# + port - Port number of the remote service\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n-# + callbackService - The callback service for the client. Resources in this service gets called on receipt of messages from the server.\n+# + host - The target service URL\n+# + port - The port number of the remote service\n+# + readTimeoutInMillis - The socket reading timeout value to be used in milliseconds. If this is not set,\n+#                         the default value of 300000 milliseconds (5 minutes) will be used.\n+# + callbackService - The callback service for the client. Resources in this service gets called on receipt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUzMzUzOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODoxOFrOGF77vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODoxOFrOGF77vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                     of messages from the server.\n          \n          \n            \n            #                     of the messages from the server.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878013", "createdAt": "2020-04-15T14:18:18Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array and the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't close the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shuts down any further reading from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't be shut down to stop reading from the socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shuts down any further writing from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownWrite();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't shut down to stop the writing to the socket or else `()`\n     public remote function shutdownWrite() returns Error? {\n         return externShutdownWrite(self);\n     }\n };\n \n-# Configuration for socket client endpoint.\n+# Configurations for the socket client.\n #\n-# + host - Target service URL\n-# + port - Port number of the remote service\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n-# + callbackService - The callback service for the client. Resources in this service gets called on receipt of messages from the server.\n+# + host - The target service URL\n+# + port - The port number of the remote service\n+# + readTimeoutInMillis - The socket reading timeout value to be used in milliseconds. If this is not set,\n+#                         the default value of 300000 milliseconds (5 minutes) will be used.\n+# + callbackService - The callback service for the client. Resources in this service gets called on receipt\n+#                     of messages from the server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUzNTAxOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODozNVrOGF78wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODozNVrOGF78wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODI3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - () or else a `socket:Error` upon failure to start the listener\n          \n          \n            \n            # + return - `()` or else a `socket:Error` upon failure to start the listener", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878274", "createdAt": "2020-04-15T14:18:35Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUzNTc5OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODo0N1rOGF79Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODo0N1rOGF79Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODQwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Gracefully stops the `socket:Listener`.\n          \n          \n            \n            # Stops the `socket:Listener` gracefully.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878402", "createdAt": "2020-04-15T14:18:47Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+# Gracefully stops the `socket:Listener`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUzNjcwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODo1N1rOGF79wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxODo1N1rOGF79wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODUyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - () or else a `socket:Error` upon failure to stop the listener\n          \n          \n            \n            # + return - `()` or else a `socket:Error` upon failure to stop the listener", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878529", "createdAt": "2020-04-15T14:18:57Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+# Gracefully stops the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__gracefulStop();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to stop the listener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUzNzQ1OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxOTowNlrOGF7-Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxOTowNlrOGF7-Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODYzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Forcefully stops the `socket:Listener`.\n          \n          \n            \n            # Stops the `socket:Listener` forcefully.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878639", "createdAt": "2020-04-15T14:19:06Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+# Gracefully stops the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__gracefulStop();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to stop the listener\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+# Forcefully stops the `socket:Listener`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODUzODA3OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxOToxNVrOGF7-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxOToxNVrOGF7-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - () or else a `socket:Error` upon failure to stop the listener\n          \n          \n            \n            # + return - `()` or else a `socket:Error` upon failure to stop the listener", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878751", "createdAt": "2020-04-15T14:19:15Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+# Gracefully stops the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__gracefulStop();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to stop the listener\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+# Forcefully stops the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__immediateStop();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to stop the listener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU0NTk4OnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyMDo0OVrOGF8DxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyMDo0OVrOGF8DxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MDA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + interface - The network interface to bind to\n          \n          \n            \n            # + interface - The network interface to bind", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408880068", "createdAt": "2020-04-15T14:20:49Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -16,23 +16,23 @@\n \n import ballerina/java;\n \n-# Represents UDP socket client and related remote functions.\n+# Initializes the UDP client based on the provided configurations.\n #\n-# + localPort - the local port number to which this socket is bound\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + interface - network interface to bind to\n-# + id - a unique identifier to identify each client\n+# + localPort - The local port number to which this socket is bound\n+# + localAddress - The local IP address string in textual presentation to which the socket is bound\n+# + interface - The network interface to bind to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU0ODAwOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyMToxNVrOGF8FBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyMToxNVrOGF8FBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MDM4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n          \n          \n            \n            # Reads data from the remote client. If the data has the specified length, then it waits until that number of bytes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408880389", "createdAt": "2020-04-15T14:21:15Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +45,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Sends the given data to the specified remote client.\n+# ```ballerina\n+# int|socket:Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826});\n+# ```\n+#\n+# + content - The content to be sent to the client socket\n+# + address - The address of the remote client socket\n+# + return - The number of bytes got written or else a `socket:Error` if the given data can't be sent\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n-    # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n-    # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n-    #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+# Reads data from the remote client. If the data has the specified length, then wait until that number of bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU0ODgzOnYy", "diffSide": "RIGHT", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyMToyN1rOGF8Fjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyMToyN1rOGF8Fjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MDUyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # are received from the client. Else, return the data available in the OS buffer or wait until data is received.\n          \n          \n            \n            # are received from the client. Else, it returns the data available in the OS buffer or waits until the data is received.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408880527", "createdAt": "2020-04-15T14:21:27Z", "author": {"login": "praneesha"}, "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +45,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Sends the given data to the specified remote client.\n+# ```ballerina\n+# int|socket:Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826});\n+# ```\n+#\n+# + content - The content to be sent to the client socket\n+# + address - The address of the remote client socket\n+# + return - The number of bytes got written or else a `socket:Error` if the given data can't be sent\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n-    # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n-    # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n-    #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+# Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer or wait until data is received.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4068, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}