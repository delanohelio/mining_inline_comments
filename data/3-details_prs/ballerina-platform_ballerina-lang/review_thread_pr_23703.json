{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MjM0NDky", "number": 23703, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozNDozNFrOEDkxzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1OTo1N1rOEFKT1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTgzNzU2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozNDozNFrOGgq_JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozNDozNFrOGgq_JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMTkwOA==", "bodyText": "Missing EOF line here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23703#discussion_r436911908", "createdAt": "2020-06-08T18:34:34Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "diffHunk": "@@ -166,3 +166,70 @@ function testUnionLhsWithDiscriminatedFloatDecimalLiterals() returns [(float|dec\n     float|decimal c = 1.0d;\n     return [a, b, c];\n }\n+\n+type Employee abstract object {\n+    public int age;\n+    public string firstName;\n+    public string lastName;\n+\n+    function getFullName() returns string;\n+};\n+\n+type Engineer object {\n+    public int age;\n+    public string firstName;\n+    public string lastName;\n+\n+    function __init(int age, string firstName, string lastName) {\n+        self.age = age;\n+        self.firstName = firstName;\n+        self.lastName = lastName;\n+    }\n+\n+    function getFullName() returns string {\n+        return self.firstName + self.lastName;\n+    }\n+\n+};\n+\n+type Manager object {\n+    int age;\n+    string firstName;\n+    string lastName;\n+\n+    function __init(int age, string firstName, string lastName) {\n+        self.age = age;\n+        self.firstName = firstName;\n+        self.lastName = lastName;\n+    }\n+};\n+\n+function testUnionTypeWithFunctionPointerAccess() {\n+    Engineer engineer = new Engineer(20, \"John\", \"Doe\");\n+    Employee employee = new Engineer(20, \"Jane\", \"Doe\");\n+\n+    Engineer|Manager person1 = engineer;\n+    Employee|Manager person2 = employee;\n+\n+    person1.age = 25;\n+    person2.age = 25;\n+\n+    var setAge = function () {\n+        person1.age = 30;\n+        person2.age = 30;\n+    };\n+    setAge();\n+    assertEquality(30, person1.age);\n+    assertEquality(30, person2.age);\n+}\n+\n+function assertEquality(any|error expected, any|error actual) {\n+    if expected is anydata && actual is anydata && expected == actual {\n+        return;\n+    }\n+    if expected === actual {\n+        return;\n+    }\n+    panic error(ASSERTION_ERR_REASON,\n+                message = \"expected '\" + expected.toString() + \"', found '\" + actual.toString () + \"'\");\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9dda84f67500ae9b82db54ab0cb6cc8f751f0e8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzk3MDU0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo0MDoyMVrOGhmziA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjo0MDoyMVrOGhmziA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg5MTk3Ng==", "bodyText": "Thinking out loud, the closure map is a map<any|error> right?\nLooking at the comments and the logic, it seems like there' some legacy code (based on simple basic types vs ref types in the BVM) which may not be valid now.\nSo basically what I believe we've tried to do here is if it is a simple assignment like x = 1; where the ref we're working is on the LHS, we use any|error as the type of index-based access for simple basic types with an eventual cast on the RHS, whereas for ref types we're using the original types (which were compatible with the ref type impl). IIRC, we used to need this in the BVM based implementation (boxing), I'm not sure if we still need to do it in the front-end.\nWhere we have the closure map map<any|error> $innerMap$1.\nx = 1;\nbecomes\n$innerMap$1[\"x\"] = <any> 1;\nThen we have the access on the RHS, where in L1118 we've added a cast to the expected type. Basically, we access the relevant value from the map<any|error> and cast to the expected type.\nint i = x;\nbecomes\nint i = <int> $innerMap$1[\"x\"] ;\nSo coming back to the problem we're trying to solve,\n    var fn = function () {\n        fb.i = 3;\n    };\nit seems like even for this, it goes in the lhsVar path, without the cast. We seem to be returning $innerMap$1[\"fb\"] instead of <Foo|Bar> $innerMap$1[\"fb\"].\nIMO we can do one of the following.\n\nSemantically, a map (map<T>) access on the RHS returns T? so if someone writes this code in Ballerina, the type of access expr will be T on the LHS, but T? on the RHS. With the current changes, we're changing this for both LHS and RHS to T, but I guess i's OK since we know that value is always present in the map. If we are going ahead with this though let's check\na) if this works as expected for simple basic types (int, byte, float, etc.)\nb) if we need the desugar.addConversionExprIfRequired(accessExpr, varRefExpr.type) anymore since the access expression's type is now varRefExpr.type\n\nor\n\nwe need to figure out if we can add the cast on the LHS side also if the current var ref is part of a compound expression.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23703#discussion_r437891976", "createdAt": "2020-06-10T06:40:21Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -1122,28 +1118,6 @@ private void updateClosureVars(BLangSimpleVarRef varRefExpr, BVarSymbol mapSymbo\n         result = rewriteExpr(desugar.addConversionExprIfRequired(accessExpr, varRefExpr.type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86b9ed6d905074e6f674693fe8d7c463972f0cbc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQ3MjUyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1OTo1N1rOGjOprg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxODoxNjozN1rOGjYtWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MzM5MA==", "bodyText": "Are we not testing Manager type here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23703#discussion_r439593390", "createdAt": "2020-06-12T18:59:57Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "diffHunk": "@@ -166,3 +166,70 @@ function testUnionLhsWithDiscriminatedFloatDecimalLiterals() returns [(float|dec\n     float|decimal c = 1.0d;\n     return [a, b, c];\n }\n+\n+type Employee abstract object {\n+    public int age;\n+    public string firstName;\n+    public string lastName;\n+\n+    function getFullName() returns string;\n+};\n+\n+type Engineer object {\n+    public int age;\n+    public string firstName;\n+    public string lastName;\n+\n+    function init(int age, string firstName, string lastName) {\n+        self.age = age;\n+        self.firstName = firstName;\n+        self.lastName = lastName;\n+    }\n+\n+    function getFullName() returns string {\n+        return self.firstName + self.lastName;\n+    }\n+\n+};\n+\n+type Manager object {\n+    int age;\n+    string firstName;\n+    string lastName;\n+\n+    function init(int age, string firstName, string lastName) {\n+        self.age = age;\n+        self.firstName = firstName;\n+        self.lastName = lastName;\n+    }\n+};\n+\n+function testUnionTypeWithFunctionPointerAccess() {\n+    Engineer engineer = new Engineer(20, \"John\", \"Doe\");\n+    Employee employee = new Engineer(20, \"Jane\", \"Doe\");\n+\n+    Engineer|Manager person1 = engineer;\n+    Employee|Manager person2 = employee;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "536c244b1d7fc6ddd162ee0774d7f17628bd1ad3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwNTcxMA==", "bodyText": "It works same as the engineer type. We can remove it and use only the 'employee' and 'engineer' types. Is it the concern?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23703#discussion_r439705710", "createdAt": "2020-06-13T03:45:05Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "diffHunk": "@@ -166,3 +166,70 @@ function testUnionLhsWithDiscriminatedFloatDecimalLiterals() returns [(float|dec\n     float|decimal c = 1.0d;\n     return [a, b, c];\n }\n+\n+type Employee abstract object {\n+    public int age;\n+    public string firstName;\n+    public string lastName;\n+\n+    function getFullName() returns string;\n+};\n+\n+type Engineer object {\n+    public int age;\n+    public string firstName;\n+    public string lastName;\n+\n+    function init(int age, string firstName, string lastName) {\n+        self.age = age;\n+        self.firstName = firstName;\n+        self.lastName = lastName;\n+    }\n+\n+    function getFullName() returns string {\n+        return self.firstName + self.lastName;\n+    }\n+\n+};\n+\n+type Manager object {\n+    int age;\n+    string firstName;\n+    string lastName;\n+\n+    function init(int age, string firstName, string lastName) {\n+        self.age = age;\n+        self.firstName = firstName;\n+        self.lastName = lastName;\n+    }\n+};\n+\n+function testUnionTypeWithFunctionPointerAccess() {\n+    Engineer engineer = new Engineer(20, \"John\", \"Doe\");\n+    Employee employee = new Engineer(20, \"Jane\", \"Doe\");\n+\n+    Engineer|Manager person1 = engineer;\n+    Employee|Manager person2 = employee;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MzM5MA=="}, "originalCommit": {"oid": "536c244b1d7fc6ddd162ee0774d7f17628bd1ad3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1ODE2OQ==", "bodyText": "Removed the unnecessary object type in the test case", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23703#discussion_r439758169", "createdAt": "2020-06-13T18:16:37Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "diffHunk": "@@ -166,3 +166,70 @@ function testUnionLhsWithDiscriminatedFloatDecimalLiterals() returns [(float|dec\n     float|decimal c = 1.0d;\n     return [a, b, c];\n }\n+\n+type Employee abstract object {\n+    public int age;\n+    public string firstName;\n+    public string lastName;\n+\n+    function getFullName() returns string;\n+};\n+\n+type Engineer object {\n+    public int age;\n+    public string firstName;\n+    public string lastName;\n+\n+    function init(int age, string firstName, string lastName) {\n+        self.age = age;\n+        self.firstName = firstName;\n+        self.lastName = lastName;\n+    }\n+\n+    function getFullName() returns string {\n+        return self.firstName + self.lastName;\n+    }\n+\n+};\n+\n+type Manager object {\n+    int age;\n+    string firstName;\n+    string lastName;\n+\n+    function init(int age, string firstName, string lastName) {\n+        self.age = age;\n+        self.firstName = firstName;\n+        self.lastName = lastName;\n+    }\n+};\n+\n+function testUnionTypeWithFunctionPointerAccess() {\n+    Engineer engineer = new Engineer(20, \"John\", \"Doe\");\n+    Employee employee = new Engineer(20, \"Jane\", \"Doe\");\n+\n+    Engineer|Manager person1 = engineer;\n+    Employee|Manager person2 = employee;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MzM5MA=="}, "originalCommit": {"oid": "536c244b1d7fc6ddd162ee0774d7f17628bd1ad3"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3423, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}