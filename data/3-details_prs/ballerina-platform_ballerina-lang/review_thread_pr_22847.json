{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NzE1NzU0", "number": 22847, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjowNzo1NlrOD1QAJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjowNzo1NlrOD1QAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTYzMzAwOnYy", "diffSide": "RIGHT", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_validator.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjowNzo1NlrOGKl42A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjowNzo1NlrOGKl42A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1OTcwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (jwtComponents.length() < 2 || jwtComponents.length() > 3) {\n          \n          \n            \n                if (jwtComponents.length() != 2) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22847#discussion_r413759704", "createdAt": "2020-04-23T12:07:56Z", "author": {"login": "daneshk"}, "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_validator.bal", "diffHunk": "@@ -61,76 +61,74 @@ public type InboundJwtCacheEntry record {|\n # jwt:JwtPayload|jwt:error result = jwt:validateJwt(jwt, validatorConfig);\n # ```\n #\n-# + jwtToken - JWT that needs to be validated\n+# + jwt - JWT that needs to be validated\n # + config - JWT validator config record\n # + return - JWT payload or else a `jwt:Error` if token validation fails\n-public function validateJwt(string jwtToken, JwtValidatorConfig config) returns @tainted (JwtPayload|Error) {\n-    [JwtHeader, JwtPayload] [header, payload] = check decodeJwt(jwtToken);\n-    return validateJwtRecords(jwtToken, header, payload, config) ?: payload;\n-}\n-\n-function getJwtComponents(string jwtToken) returns string[]|Error {\n-    string[] jwtComponents = stringutils:split(jwtToken, \"\\\\.\");\n-    if (jwtComponents.length() < 2 || jwtComponents.length() > 3) {\n-        return prepareError(\"Invalid JWT token.\");\n-    }\n-    return jwtComponents;\n+public function validateJwt(string jwt, JwtValidatorConfig config) returns @tainted (JwtPayload|Error) {\n+    [JwtHeader, JwtPayload] [header, payload] = check decodeJwt(jwt);\n+    return validateJwtRecords(jwt, header, payload, config) ?: payload;\n }\n \n # Decodes the given JWT string.\n # ```ballerina\n-# [jwt:JwtHeader, jwt:JwtPayload]|jwt:Error [header, payload] = jwt:decodeJwt(jwtToken);\n+# [jwt:JwtHeader, jwt:JwtPayload]|jwt:Error [header, payload] = jwt:decodeJwt(jwt);\n # ```\n #\n-# + jwtToken - JWT that needs to be decoded\n+# + jwt - JWT that needs to be decoded\n # + return - The JWT header and payload tuple or else a `jwt:Error` if token decoding fails\n-public function decodeJwt(string jwtToken) returns @tainted ([JwtHeader, JwtPayload]|Error) {\n-    string[] encodedJwtComponents = check getJwtComponents(jwtToken);\n-    [map<json>, map<json>] [headerJson, payloadJson] = check getDecodedJwtComponents(encodedJwtComponents);\n-    JwtHeader jwtHeader = parseHeader(headerJson);\n-    JwtPayload jwtPayload = check parsePayload(payloadJson);\n+public function decodeJwt(string jwt) returns @tainted ([JwtHeader, JwtPayload]|Error) {\n+    string[] encodedJwtComponents = check getJwtComponents(jwt);\n+    JwtHeader jwtHeader = check getJwtHeader(encodedJwtComponents[0]);\n+    JwtPayload jwtPayload = check getJwtPayload(encodedJwtComponents[1]);\n     return [jwtHeader, jwtPayload];\n }\n \n-function getDecodedJwtComponents(string[] encodedJwtComponents) returns @tainted ([map<json>, map<json>]|Error) {\n-    string jwtHeader;\n-    string jwtPayload;\n+function getJwtComponents(string jwt) returns string[]|Error {\n+    string[] jwtComponents = stringutils:split(jwt, \"\\\\.\");\n+    if (jwtComponents.length() < 2 || jwtComponents.length() > 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b007dd7e3e25e7d4186583c195d2dca47dbac2"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3767, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}