{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODk2NDk2", "number": 26010, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDo1MToxOFrOEmXk0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMjo1N1rOEpIZBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjY3NjAxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDo1MToxOFrOHWWRjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODozMzo1M1rOHWdaNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NTY2Mw==", "bodyText": "Shall we not have the packagePath in package model. It should be a derived value from project path using project API.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26010#discussion_r493195663", "createdAt": "2020-09-23T04:51:18Z", "author": {"login": "hevayo"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -100,7 +109,7 @@ public void resolveDependencies() {\n         return packageContext.packageDependencies();\n     }\n \n-//    public BallerinaToml ballerinaToml() {\n-//        return this.packageContext.ballerinaToml();\n-//    }\n+    public Path packagePath() {\n+        return packageContext.packagePath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42f8b667afe9c8ef54c036abb940f6461e54283"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMxMjU2NQ==", "bodyText": "Added Project instead of Package as a parameter to Balo write method in 47a602a", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26010#discussion_r493312565", "createdAt": "2020-09-23T08:33:53Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -100,7 +109,7 @@ public void resolveDependencies() {\n         return packageContext.packageDependencies();\n     }\n \n-//    public BallerinaToml ballerinaToml() {\n-//        return this.packageContext.ballerinaToml();\n-//    }\n+    public Path packagePath() {\n+        return packageContext.packagePath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NTY2Mw=="}, "originalCommit": {"oid": "e42f8b667afe9c8ef54c036abb940f6461e54283"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjcyOTIyOnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNToyMDoxN1rOHWWv_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODozNDowMFrOHWdapQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwMzQ1NA==", "bodyText": "Can we move this to util since this will be needed in other places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26010#discussion_r493203454", "createdAt": "2020-09-23T05:20:17Z", "author": {"login": "hevayo"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -0,0 +1,390 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.writers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import io.ballerina.projects.Package;\n+import io.ballerina.projects.model.BaloJson;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.model.adaptors.JsonCollectionsAdaptor;\n+import io.ballerina.projects.model.adaptors.JsonStringsAdaptor;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.compiler.BLangCompilerException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.file.AccessDeniedException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * {@code BaloWriter} writes a package to balo format.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloWriter {\n+\n+    private BaloWriter() {}\n+\n+    /**\n+     * Write a package to a .balo and return the created .balo path.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n+     * @param path Directory where the .balo should be created.\n+     * @return Newly created balo path\n+     */\n+    public static Path write(Package pkg, Path path) throws AccessDeniedException {\n+        // todo check if the given package is compiled properly\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new AccessDeniedException(\"No write access to create balo:\" + path);\n+        }\n+\n+        Path balo = path.resolve(\n+                getBaloName(pkg.packageOrg().toString(), pkg.packageName().toString(), pkg.packageVersion().toString(),\n+                        null));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, pkg);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n+        return balo;\n+    }\n+\n+    private static String getBaloName(String org, String pkgName, String version, String platform) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42f8b667afe9c8ef54c036abb940f6461e54283"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMxMjY3Nw==", "bodyText": "Added in 47a602a", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26010#discussion_r493312677", "createdAt": "2020-09-23T08:34:00Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/writers/BaloWriter.java", "diffHunk": "@@ -0,0 +1,390 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.writers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import io.ballerina.projects.Package;\n+import io.ballerina.projects.model.BaloJson;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.model.adaptors.JsonCollectionsAdaptor;\n+import io.ballerina.projects.model.adaptors.JsonStringsAdaptor;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.compiler.BLangCompilerException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.file.AccessDeniedException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * {@code BaloWriter} writes a package to balo format.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloWriter {\n+\n+    private BaloWriter() {}\n+\n+    /**\n+     * Write a package to a .balo and return the created .balo path.\n+     *\n+     * @param pkg  Package to be written as a .balo.\n+     * @param path Directory where the .balo should be created.\n+     * @return Newly created balo path\n+     */\n+    public static Path write(Package pkg, Path path) throws AccessDeniedException {\n+        // todo check if the given package is compiled properly\n+\n+        // Check if the path is a directory\n+        if (!path.toFile().isDirectory()) {\n+            throw new RuntimeException(\"Given path is not a directory: \" + path);\n+        }\n+\n+        if (!path.toFile().canWrite()) {\n+            throw new AccessDeniedException(\"No write access to create balo:\" + path);\n+        }\n+\n+        Path balo = path.resolve(\n+                getBaloName(pkg.packageOrg().toString(), pkg.packageName().toString(), pkg.packageVersion().toString(),\n+                        null));\n+\n+        // Create the archive over write if exists\n+        try (FileSystem baloFS = createBaloArchive(balo)) {\n+            // Now lets put stuff in\n+            populateBaloArchive(baloFS, pkg);\n+        } catch (IOException e) {\n+            throw new BLangCompilerException(\"Failed to create balo :\" + e.getMessage(), e);\n+        } catch (BLangCompilerException be) {\n+            // clean up if an error occur\n+            try {\n+                Files.delete(balo);\n+            } catch (IOException e) {\n+                // We ignore this error and throw out the original blang compiler error to the user\n+            }\n+            throw be;\n+        }\n+        return balo;\n+    }\n+\n+    private static String getBaloName(String org, String pkgName, String version, String platform) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwMzQ1NA=="}, "originalCommit": {"oid": "e42f8b667afe9c8ef54c036abb940f6461e54283"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTU5NTgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoxMToxMVrOHanbZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODo1NToyM1rOHbXF2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3MTAxMw==", "bodyText": "We shouldn't be exposing the packageContext from the API. We should keep this package-private.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26010#discussion_r497671013", "createdAt": "2020-09-30T17:11:11Z", "author": {"login": "azinneera"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -40,10 +40,14 @@ static Package from(Project project, PackageConfig packageConfig) {\n         return new Package(packageContext, project);\n     }\n \n-    PackageContext packageContext() {\n+    public PackageContext packageContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9cb445a1ed18f136d7f88c18e89e7f055f1811a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1MTkyOQ==", "bodyText": "Made it package private", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26010#discussion_r498451929", "createdAt": "2020-10-01T18:55:23Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/Package.java", "diffHunk": "@@ -40,10 +40,14 @@ static Package from(Project project, PackageConfig packageConfig) {\n         return new Package(packageContext, project);\n     }\n \n-    PackageContext packageContext() {\n+    public PackageContext packageContext() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3MTAxMw=="}, "originalCommit": {"oid": "f9cb445a1ed18f136d7f88c18e89e7f055f1811a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY0NTUxOnYy", "diffSide": "RIGHT", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMjo1N1rOHan66Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODo1NTozOVrOHbXGcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3OTA4MQ==", "bodyText": "There is already a constant defined for \".balo\" in ProjectDirConstants. Lets copy that to ProjectConstants and use it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26010#discussion_r497679081", "createdAt": "2020-09-30T17:22:57Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java", "diffHunk": "@@ -108,5 +108,14 @@ static Path createTargetDirectoryStructure(Path sourceRoot) throws IOException {\n \n         return targetDir;\n     }\n+\n+    public static String getBaloName(String org, String pkgName, String version, String platform) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return org + \"-\" + pkgName + \"-\" + platform + \"-\" + version + \".balo\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9cb445a1ed18f136d7f88c18e89e7f055f1811a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1MjA4MA==", "bodyText": "Used constant", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26010#discussion_r498452080", "createdAt": "2020-10-01T18:55:39Z", "author": {"login": "pramodya1994"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/utils/ProjectUtils.java", "diffHunk": "@@ -108,5 +108,14 @@ static Path createTargetDirectoryStructure(Path sourceRoot) throws IOException {\n \n         return targetDir;\n     }\n+\n+    public static String getBaloName(String org, String pkgName, String version, String platform) {\n+        // <orgname>-<packagename>-<platform>-<version>.balo\n+        if (platform == null || \"\".equals(platform)) {\n+            platform = \"any\";\n+        }\n+        return org + \"-\" + pkgName + \"-\" + platform + \"-\" + version + \".balo\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3OTA4MQ=="}, "originalCommit": {"oid": "f9cb445a1ed18f136d7f88c18e89e7f055f1811a"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 16, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}