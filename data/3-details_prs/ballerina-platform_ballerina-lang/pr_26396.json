{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MzI4ODY4", "number": 26396, "title": "Align mapping constructor spread-expr analysis with the spec", "bodyText": "Purpose\nThe spec now includes the spread-expr - see https://ballerina.io/spec/lang/2020R1/#mapping-constructor-expr.\nThe spec says\nIt is a compile-time error if the static type of the expression in a spread-field allows a field that duplicates a specific-field or that could also occur in another spread-field. Note that a spread-field with an inclusive record type of record { never x?; } cannot duplicate a specific field for x.\nFixes #22504\nPrevious PR: #25124 (closed)\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-10-17T18:39:32Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396", "merged": true, "mergeCommit": {"oid": "ada2b9b357132f8fc9d05502c36aaa3f28243b87"}, "closed": true, "closedAt": "2020-10-20T17:18:46Z", "author": {"login": "dulajdilshan"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTeaEEgH2gAyNTA1MzI4ODY4OjdhOGUxMWUyZjU3YWY2MDI3ODlmN2FiMjA1Y2EwNjA3NGVhMjI0OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUb-kdAFqTUxMjk0NTEzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7a8e11e2f57af602789f7ab205ca06074ea2248d", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a8e11e2f57af602789f7ab205ca06074ea2248d", "committedDate": "2020-10-17T17:27:25Z", "message": "Disallow record with optional field to use with spread operator when have duplicate fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09ab45ec6c6cbd163df6d92740e81d9de600a828", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/09ab45ec6c6cbd163df6d92740e81d9de600a828", "committedDate": "2020-10-17T17:27:25Z", "message": "Disallow to have multiple inclusive types in mapping constructor expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6c71af072e30114a6fbe56cf2342dc79bc6864e", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6c71af072e30114a6fbe56cf2342dc79bc6864e", "committedDate": "2020-10-17T17:27:25Z", "message": "Align mapping constructor spread-expr analysis with the spec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbccea262e62034672b8f56855af5042cd98f75d", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fbccea262e62034672b8f56855af5042cd98f75d", "committedDate": "2020-10-17T17:27:25Z", "message": "Remove and change affected tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b95d5ceb8baf014c0f9bf603ffc5dd278f246c52", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b95d5ceb8baf014c0f9bf603ffc5dd278f246c52", "committedDate": "2020-10-17T17:27:25Z", "message": "Fix checkstyle error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa0015c3410821b343bd58331707a1d7c96d0559", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa0015c3410821b343bd58331707a1d7c96d0559", "committedDate": "2020-10-17T17:27:25Z", "message": "Address requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60728af1bb46269d1e65da214759a73ac3e91334", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60728af1bb46269d1e65da214759a73ac3e91334", "committedDate": "2020-10-17T17:27:25Z", "message": "Correct invalid ballerina implementation in lang.query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a5b47eae81a99e6496d12d667af8b8cc2cb223", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/88a5b47eae81a99e6496d12d667af8b8cc2cb223", "committedDate": "2020-10-17T17:27:25Z", "message": "Align previous tests with the spec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1718cb06a31f77b94959102ae9e68f5087e2a5b", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a1718cb06a31f77b94959102ae9e68f5087e2a5b", "committedDate": "2020-10-17T17:27:25Z", "message": "Add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNDY3NTk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#pullrequestreview-512467595", "createdAt": "2020-10-20T08:40:41Z", "commit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo0MDo0MVrOHkxMHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1NjoyM1rOHkx1tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjcwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD(\"spread.field.may.duplicate.already.specified.keys\"),\n          \n          \n            \n                SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS(\"spread.field.may.duplicate.already.specified.keys\"),", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508316701", "createdAt": "2020-10-20T08:40:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -295,6 +295,9 @@\n     DUPLICATE_KEY_IN_RECORD_LITERAL(\"duplicate.key.in.record.literal\"),\n     DUPLICATE_KEY_IN_TABLE_LITERAL(\"duplicate.key.in.table.literal\"),\n     DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP(\"duplicate.key.in.record.literal.spread.op\"),\n+    POSSIBLE_DUPLICATE_OF_FIELD_SPECIFIED_VIA_SPREAD_OP(\"possible.duplicate.of.field.specified.via.spread.op\"),\n+    ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD(\"spread.field.may.duplicate.already.specified.keys\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyMDAwNw==", "bodyText": "Shouldn't we continue here, instead of breaking? Please check everywhere break has been introduced. We want the analysis to run for the rest of the fields, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508320007", "createdAt": "2020-10-20T08:45:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,71 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNzM0OA==", "bodyText": "Isn't this a possible duplicate?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508327348", "createdAt": "2020-10-20T08:56:23Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,71 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        break;\n+                    }\n+                    inclusiveTypeSpreadField = spreadOpField;\n+\n+                    if (fields.size() > 1) {\n+                        if (names.size() > 0) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD,\n+                                            spreadOpExpr);\n+                            break;\n+                        }\n+                        // Skipping to avoid multiple error messages\n+                        continue;\n+                    }\n+                }\n+\n+                if (spreadFieldTypeTag != TypeTags.RECORD) {\n                     continue;\n                 }\n \n-                for (BField bField : ((BRecordType) spreadOpExpr.type).fields.values()) {\n-                    if (Symbols.isOptional(bField.symbol)) {\n-                        continue;\n+                BRecordType spreadExprRecordType = (BRecordType) spreadOpExprType;\n+                boolean isSpreadExprRecordTypeSealed = spreadExprRecordType.sealed;\n+                if (!isSpreadExprRecordTypeSealed) {\n+                    // More than one spread-field with inclusive-type-descriptors are not allowed.\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                    } else {\n+                        inclusiveTypeSpreadField = spreadOpField;\n+                    }\n+                }\n+\n+                LinkedHashMap<String, BField> fieldsInRecordType = spreadExprRecordType.fields;\n+                for (Object fieldName : names) {\n+                    if (fieldsInRecordType.containsKey(fieldName)) {\n+                        if (fieldsInRecordType.get(fieldName).type.tag != TypeTags.NEVER) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                                            recordLiteral.type.getKind().typeName(), fieldName, spreadOpField);\n+                        }\n+                    } else if (!isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.ALREADY_SPECIFIED_KEYS_IN_SPREAD_FIELD,\n+                                        spreadOpExpr);\n+                        break;\n                     }\n+                }\n \n+                for (BField bField : fieldsInRecordType.values()) {\n                     String name = bField.name.value;\n                     if (names.contains(name)) {\n-                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                        continue;\n+                    }\n+\n+                    if (bField.type.tag == TypeTags.NEVER) {\n+                        neverTypedKeys.add(name);\n+                        continue;\n+                    }\n+\n+                    if (!neverTypedKeys.remove(name) &&\n+                            inclusiveTypeSpreadField != null && isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos,\n+                                        DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552"}, "originalPosition": 97}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1841abdb8d3c4696ab0cabf660bfa0e4970bc552", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1841abdb8d3c4696ab0cabf660bfa0e4970bc552", "committedDate": "2020-10-17T18:02:00Z", "message": "Refactor according to the review"}, "afterCommit": {"oid": "0434b5cb12ded11b72f19594a6021ac5fffa5e47", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0434b5cb12ded11b72f19594a6021ac5fffa5e47", "committedDate": "2020-10-20T11:44:52Z", "message": "Refactor according to the review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0434b5cb12ded11b72f19594a6021ac5fffa5e47", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0434b5cb12ded11b72f19594a6021ac5fffa5e47", "committedDate": "2020-10-20T11:44:52Z", "message": "Refactor according to the review"}, "afterCommit": {"oid": "b1c709cbc7ece1744237b715772d41a319a5a0f8", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1c709cbc7ece1744237b715772d41a319a5a0f8", "committedDate": "2020-10-20T12:38:46Z", "message": "Refactor according to the review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNzQ2ODUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#pullrequestreview-512746853", "createdAt": "2020-10-20T13:58:15Z", "commit": {"oid": "b1c709cbc7ece1744237b715772d41a319a5a0f8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1ODoxNVrOHk-L4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowNTozMFrOHk-pFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyOTYzMg==", "bodyText": "Shouldn't we continue here also? While this error should only be logged once, we need to log the error in the if block for all definitely duplicate keys.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508529632", "createdAt": "2020-10-20T13:58:15Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,72 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        continue;\n+                    }\n+                    inclusiveTypeSpreadField = spreadOpField;\n+\n+                    if (fields.size() > 1) {\n+                        if (names.size() > 0) {\n+                            this.dlog.error(spreadOpExpr.pos,\n+                                            DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                            spreadOpExpr);\n+                        }\n+                        // Skipping to avoid multiple error messages\n+                        continue;\n+                    }\n+                }\n+\n+                if (spreadFieldTypeTag != TypeTags.RECORD) {\n                     continue;\n                 }\n \n-                for (BField bField : ((BRecordType) spreadOpExpr.type).fields.values()) {\n-                    if (Symbols.isOptional(bField.symbol)) {\n-                        continue;\n+                BRecordType spreadExprRecordType = (BRecordType) spreadOpExprType;\n+                boolean isSpreadExprRecordTypeSealed = spreadExprRecordType.sealed;\n+                if (!isSpreadExprRecordTypeSealed) {\n+                    // More than one spread-field with inclusive-type-descriptors are not allowed.\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                    } else {\n+                        inclusiveTypeSpreadField = spreadOpField;\n                     }\n+                }\n \n+                LinkedHashMap<String, BField> fieldsInRecordType = spreadExprRecordType.fields;\n+                for (Object fieldName : names) {\n+                    if (fieldsInRecordType.containsKey(fieldName)) {\n+                        if (fieldsInRecordType.get(fieldName).type.tag != TypeTags.NEVER) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                                            recordLiteral.type.getKind().typeName(), fieldName, spreadOpField);\n+                        }\n+                    } else if (!isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos,\n+                                        DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                        spreadOpExpr);\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c709cbc7ece1744237b715772d41a319a5a0f8"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzNzExMA==", "bodyText": "Shall we check if we can merge the if condition above (checking never) with the for loop below.\nThat way here we can check !fieldsInRecordType.containsKey(fieldName) && !isSpreadExprRecordTypeSealed and log the error and break here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508537110", "createdAt": "2020-10-20T14:05:30Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2286,18 +2289,72 @@ public void visit(BLangRecordLiteral recordLiteral) {\n                 BLangExpression spreadOpExpr = spreadOpField.expr;\n \n                 analyzeExpr(spreadOpExpr);\n-                if (spreadOpExpr.type.tag != TypeTags.RECORD) {\n+\n+                BType spreadOpExprType = spreadOpExpr.type;\n+                int spreadFieldTypeTag = spreadOpExprType.tag;\n+                if (spreadFieldTypeTag == TypeTags.MAP) {\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                        continue;\n+                    }\n+                    inclusiveTypeSpreadField = spreadOpField;\n+\n+                    if (fields.size() > 1) {\n+                        if (names.size() > 0) {\n+                            this.dlog.error(spreadOpExpr.pos,\n+                                            DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                            spreadOpExpr);\n+                        }\n+                        // Skipping to avoid multiple error messages\n+                        continue;\n+                    }\n+                }\n+\n+                if (spreadFieldTypeTag != TypeTags.RECORD) {\n                     continue;\n                 }\n \n-                for (BField bField : ((BRecordType) spreadOpExpr.type).fields.values()) {\n-                    if (Symbols.isOptional(bField.symbol)) {\n-                        continue;\n+                BRecordType spreadExprRecordType = (BRecordType) spreadOpExprType;\n+                boolean isSpreadExprRecordTypeSealed = spreadExprRecordType.sealed;\n+                if (!isSpreadExprRecordTypeSealed) {\n+                    // More than one spread-field with inclusive-type-descriptors are not allowed.\n+                    if (inclusiveTypeSpreadField != null) {\n+                        this.dlog.error(spreadOpExpr.pos, DiagnosticCode.MULTIPLE_INCLUSIVE_TYPES);\n+                    } else {\n+                        inclusiveTypeSpreadField = spreadOpField;\n                     }\n+                }\n \n+                LinkedHashMap<String, BField> fieldsInRecordType = spreadExprRecordType.fields;\n+                for (Object fieldName : names) {\n+                    if (fieldsInRecordType.containsKey(fieldName)) {\n+                        if (fieldsInRecordType.get(fieldName).type.tag != TypeTags.NEVER) {\n+                            this.dlog.error(spreadOpExpr.pos, DiagnosticCode.DUPLICATE_KEY_IN_RECORD_LITERAL_SPREAD_OP,\n+                                            recordLiteral.type.getKind().typeName(), fieldName, spreadOpField);\n+                        }\n+                    } else if (!isSpreadExprRecordTypeSealed) {\n+                        this.dlog.error(spreadOpExpr.pos,\n+                                        DiagnosticCode.SPREAD_FIELD_MAY_DULPICATE_ALREADY_SPECIFIED_KEYS,\n+                                        spreadOpExpr);\n+                        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyOTYzMg=="}, "originalCommit": {"oid": "b1c709cbc7ece1744237b715772d41a319a5a0f8"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3428a364efc23d3e169516f302d4e0135ff2d704", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3428a364efc23d3e169516f302d4e0135ff2d704", "committedDate": "2020-10-20T15:36:35Z", "message": "Refactor according to the review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1c709cbc7ece1744237b715772d41a319a5a0f8", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1c709cbc7ece1744237b715772d41a319a5a0f8", "committedDate": "2020-10-20T12:38:46Z", "message": "Refactor according to the review"}, "afterCommit": {"oid": "3428a364efc23d3e169516f302d4e0135ff2d704", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3428a364efc23d3e169516f302d4e0135ff2d704", "committedDate": "2020-10-20T15:36:35Z", "message": "Refactor according to the review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb2f681267eb3808cceb98bfaf494e3000dc9c5d", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb2f681267eb3808cceb98bfaf494e3000dc9c5d", "committedDate": "2020-10-20T16:35:42Z", "message": "Merge branch 'master' into map-con-spread-expr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyOTQ1MTMw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#pullrequestreview-512945130", "createdAt": "2020-10-20T16:56:58Z", "commit": {"oid": "eb2f681267eb3808cceb98bfaf494e3000dc9c5d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1Njo1OFrOHlIARw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1Njo1OFrOHlIARw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MDUwMw==", "bodyText": "Shall we create an issue to revisit these sets and make them Set<String> if possible?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26396#discussion_r508690503", "createdAt": "2020-10-20T16:56:58Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2267,6 +2268,7 @@ public void visit(BLangRecordLiteral recordLiteral) {\n         }\n \n         Set<Object> names = new HashSet<>();\n+        Set<Object> neverTypedKeys = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2f681267eb3808cceb98bfaf494e3000dc9c5d"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4409, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}