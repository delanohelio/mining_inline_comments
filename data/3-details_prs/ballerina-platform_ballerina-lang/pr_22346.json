{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Mjc0MjM0", "number": 22346, "title": "Narrow type bound to union type parameters", "bodyText": "Purpose\n\nDescribe the problems, issues, or needs driving this feature/fix and include links to related issues.\n\nFixes #16828\nFixes #22137\nApproach\nAdd logic to TypeParamAnalyser. Union and union with arrays will be flattened and merged as a union again.\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nCase 1\nint[]|float[] arr = <int[]>[1, 2];\n[int, int][] y = arr.enumerate();\nPrevious output\nerror: .::t3.bal:5:30: incompatible types: expected '[int,int][]', found '[int,(any|error)][]'\noutput after PR\nerror: .::t3_bad.bal:5:22: incompatible types: expected '[int,int][]', found '[int,(int|float)][]'\nCorrect code must be [int, (int | float)][] y = arr.enumerate();\nCase 2\nmap<int>|map<Person> m = <map<int>>{\"1\": 1};\nint|Person x = m.get(\"1\");\nPrevious output\nerror: .::t1.bal:7:20: incompatible types: expected '(int|Person)', found '(any|error)'\noutput after PR\ncompiles correctly\nCase 3\nint[]|string[] arr = [1, 2];\narr.push(true);\nPrevious output\nballerina: Oh no, something really went wrong.\noutput after PR\nerror: .::tt2.bal:4:14: incompatible types: expected '(int|string)', found 'boolean'\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-31T11:40:49Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346", "merged": true, "mergeCommit": {"oid": "2c55e8606af6834fd326c1480eeaaa133cb14015"}, "closed": true, "closedAt": "2020-05-13T21:22:54Z", "author": {"login": "KRVPerera"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTGyRXgBqjMxODQ0NTQ3ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccR0jagH2gAyMzk2Mjc0MjM0OjEyZmM5ODYwMTgwZmI3NWY1YzdmZjQ0OWFjNTc3OWNkMWE2YjFhMjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ef3163bd1f1a7f423b437eeec4c513b4a932b5c", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ef3163bd1f1a7f423b437eeec4c513b4a932b5c", "committedDate": "2020-03-31T11:46:34Z", "message": "Fix return type narrowing for arrays of union type\n\n[ci skip] test\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "43903cccb5551f313ccf567b3cbb1171428096b7", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43903cccb5551f313ccf567b3cbb1171428096b7", "committedDate": "2020-03-31T17:44:37Z", "message": "Fix return type narrowing for arrays of union type\n\n[ci skip] test\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c6a7f0f767b6b52d00e933a0b9d973596cd2e67", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c6a7f0f767b6b52d00e933a0b9d973596cd2e67", "committedDate": "2020-03-31T20:55:02Z", "message": "Fix return type narrowing for arrays of union type\n\nAdd support for union of maps\n[ci skip] test\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "651e4db7be450f776bce11c7cb72722157ff2dc1", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/651e4db7be450f776bce11c7cb72722157ff2dc1", "committedDate": "2020-03-31T21:15:50Z", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "651e4db7be450f776bce11c7cb72722157ff2dc1", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/651e4db7be450f776bce11c7cb72722157ff2dc1", "committedDate": "2020-03-31T21:15:50Z", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "0be2748a3cf91cf12e6dfd592c854fb8627d6f5a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0be2748a3cf91cf12e6dfd592c854fb8627d6f5a", "committedDate": "2020-03-31T22:37:49Z", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0be2748a3cf91cf12e6dfd592c854fb8627d6f5a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0be2748a3cf91cf12e6dfd592c854fb8627d6f5a", "committedDate": "2020-03-31T22:37:49Z", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "c61ee01fbb5ab7f6949f255474b256194e12b7c0", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c61ee01fbb5ab7f6949f255474b256194e12b7c0", "committedDate": "2020-03-31T22:39:48Z", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDM2ODI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#pullrequestreview-388036827", "createdAt": "2020-04-06T08:33:12Z", "commit": {"oid": "c61ee01fbb5ab7f6949f255474b256194e12b7c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTMyNDE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#pullrequestreview-389132417", "createdAt": "2020-04-07T13:47:12Z", "commit": {"oid": "c61ee01fbb5ab7f6949f255474b256194e12b7c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0NzoxM1rOGCEX5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0NzoxM1rOGCEX5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTk4OA==", "bodyText": "I don't think this else branch will ever get hit when all members of the union are arrays. The same goes for the map case below.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r404821988", "createdAt": "2020-04-07T13:47:13Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,34 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        for (BType type : actualType.getMemberTypes()) {\n+            if (type.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c61ee01fbb5ab7f6949f255474b256194e12b7c0"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTExODEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#pullrequestreview-389911813", "createdAt": "2020-04-08T12:08:49Z", "commit": {"oid": "41a8b883de93e15548d1f90cbc4abeaa63428c69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowODo0OVrOGCsNUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowODo0OVrOGCsNUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NDY0Mw==", "bodyText": "Shall we add a few more negative test cases with incompatible unions?\nSuch as on (int[]|string[]|float), (int[]|map)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405474643", "createdAt": "2020-04-08T12:08:49Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -67,13 +67,9 @@ public void testTypeParamNegative() {\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'int', found 'float'\", 119, 21);\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'byte', found 'int'\", 122, 31);\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'byte', found 'int'\", 125, 26);\n-\n-        // Disabled due to https://github.com/ballerina-platform/ballerina-lang/issues/22137\n-        // BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'int'\", 130,\n-        // 14);\n-        // BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'float'\", 131,\n-        //                           24);\n-\n+        BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'boolean'\", 130,\n+                                  14);\n+        BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'float'\", 131, 24);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8b883de93e15548d1f90cbc4abeaa63428c69"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDY5Mjkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#pullrequestreview-390069291", "createdAt": "2020-04-08T15:11:27Z", "commit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMToyOFrOGCz1_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMToyOFrOGCz1_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5OTc0Mw==", "bodyText": "The issue we are trying to solve is not only for lists and maps. I think you have to handle the union scenarios for pretty much each case here.\nFor example, for streams also it fails atm.\ntype Foo record {\n    string id;\n};\n\ntype Bar record {\n    int id;\n};\n\n\npublic function main() { \n    \n    Foo[] fooList = [{id: \"1234\"}, {id: \"5678\"}];\n        \n    stream<Foo> fooStream = fooList.toStream();\n\n    stream<Foo>|stream<Bar> fooBarStream = fooStream;\n\n    record {|Foo|Bar value;|}|error? res = fooBarStream.next(); \n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405599743", "createdAt": "2020-04-08T15:11:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -306,6 +309,10 @@ private void findTypeParam(DiagnosticPos pos, BType expType, BType actualType, S\n                     findTypeParamInMapForRecord(pos, (BMapType) expType, (BRecordType) actualType, env, resolvedTypes,\n                                                 result);\n                 }\n+                if (actualType.tag == TypeTags.UNION) {\n+                    findTypeParamInUnionForMap(pos, (BMapType) expType, (BUnionType) actualType, env, resolvedTypes,\n+                                               result);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTE1NDc1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#pullrequestreview-390115475", "createdAt": "2020-04-08T16:02:07Z", "commit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowMjowN1rOGC2HdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowODozMlrOGC2YVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzNjk4MQ==", "bodyText": "I don't think we need this, we won't get to this point if there are errors.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405636981", "createdAt": "2020-04-08T16:02:07Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -111,4 +109,14 @@ public void testLangLibImports() {\n         Assert.assertEquals(ret2[0].stringValue(), \"100\");\n     }\n \n+    @Test(description = \"Tests for type narrowing for union return parameters\")\n+    public void testTypeNarrowingForUnionReturnParameters() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/type-param/type_param_narrowing_for_union_return.bal\");\n+        BRunUtil.invoke(result, \"testSimpleUnionReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testUnionOfMapsReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testStringIntFloatSimpleAndArrayUnionReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testIntFloatSimpleAndMapUnionReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testIntFloatSimpleArrayMapUnionReturnParameterNarrowing\");\n+        Assert.assertEquals(result.getErrorCount(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzNzcxMw==", "bodyText": "We don't add spaces around the | in unions now. Please fix everywhere.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int[] | string[] arr = [1, 2];\n          \n          \n            \n                int[]|string[] arr = [1, 2];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405637713", "createdAt": "2020-04-08T16:03:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/type-param/type_param_test_negative.bal", "diffHunk": "@@ -126,7 +126,14 @@ function testInvalidArgForBoundRequiredParam() {\n }\n \n function testInvalidArgOnUnionTypedValue() {\n-    int[]|string[] arr = [1, 2];\n+    int[] | string[] arr = [1, 2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzODI0NQ==", "bodyText": "Please add the licence.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405638245", "createdAt": "2020-04-08T16:03:55Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/type-param/type_param_narrowing_for_union_return.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+function testSimpleUnionReturnParameterNarrowing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MTMwMg==", "bodyText": "While these are not tests for the langlib methods themselves (enumerate, get, etc.) IMO it'll still be useful to assert something from the result to verify correct runtime behaviour.\nFor example here we can assert\nassertTrue(y[0][1] is int);\nassertEquals(1, y[0][1]);\nassertTrue(y[1][1] is int);\nassertEquals(2, y[1][1]);\nShall we replace the assertTrue(true)s with proper assertions for type and value?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405641302", "createdAt": "2020-04-08T16:08:32Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/type-param/type_param_narrowing_for_union_return.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+function testSimpleUnionReturnParameterNarrowing() {\n+    int[]|float[] arr = <int[]>[1, 2];\n+    [int, (int|float)][] y = arr.enumerate();\n+    assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTcxMDE0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#pullrequestreview-390171014", "createdAt": "2020-04-08T17:11:57Z", "commit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxMTo1N1rOGC453g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozNjo0MFrOGC5z1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MjY1NA==", "bodyText": "Can we call this something like memberTypes instead? L422 too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405682654", "createdAt": "2020-04-08T17:11:57Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzI4NA==", "bodyText": "I think we can generalize this and findTypeParamInUnionForMap.\n    private void findTypeParamInUnion(DiagnosticPos pos, BType expType, BUnionType actualType,\n                                      SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n        LinkedHashSet<BType> memTypes = new LinkedHashSet<>();\n        for (BType type : actualType.getMemberTypes()) {\n            switch (type.tag) {\n                case TypeTags.ARRAY:\n                    memTypes.add(((BArrayType) type).eType);\n                    break;\n                case TypeTags.MAP:\n                    memTypes.add(((BMapType) type).constraint);\n                    break;\n            }\n        }\n        BUnionType unionType = BUnionType.create(null, memTypes);\n        findTypeParam(pos, expType, unionType, env, resolvedTypes, result);\n    }\nTo this we can pass as expType the array element type or map constraint type.\ne.g.,\nfindTypeParamInUnion(pos, ((BArrayType) expType).eType, (BUnionType) actualType, env, resolvedTypes, \n                     result);\nI think this will be the cleaner approach when we're adding checks for the rest of the cases in findTypeParam too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405697284", "createdAt": "2020-04-08T17:36:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzQ5NA==", "bodyText": "What about tuples, and similarly records for maps?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405697494", "createdAt": "2020-04-08T17:36:40Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        for (BType type : actualType.getMemberTypes()) {\n+            if (type.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6331b7b063d11e1456dcb2909c85139cc435937c", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6331b7b063d11e1456dcb2909c85139cc435937c", "committedDate": "2020-04-18T20:28:33Z", "message": "Merge branch 'type_narror_params' of github.com:KRVPerera/ballerina-lang into type_narror_params"}, "afterCommit": {"oid": "b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "committedDate": "2020-04-20T10:23:52Z", "message": "Refactor TypeParamAnalyzer.java\n\nAdd more test cases. Changed the code formatting of .bal test cases.\nRefactor the code to merger two union based type param narrowing codes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b21e6fb76428e32e05074d87b6bab1cc0a70b3d3", "committedDate": "2020-04-20T10:23:52Z", "message": "Refactor TypeParamAnalyzer.java\n\nAdd more test cases. Changed the code formatting of .bal test cases.\nRefactor the code to merger two union based type param narrowing codes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "f6c7beba529e5e0948209ffe7860346d0c0ab0ff", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6c7beba529e5e0948209ffe7860346d0c0ab0ff", "committedDate": "2020-04-27T12:25:57Z", "message": "Refactor TypeParamAnalyzer.java\n\nAdd more test cases. Changed the code formatting of .bal test cases.\nRefactor the code to merger two union based type param narrowing codes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "698c1bbe3ec6e901fff919c9add2acf621f68cea", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/698c1bbe3ec6e901fff919c9add2acf621f68cea", "committedDate": "2020-04-27T15:27:41Z", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into type_narror_params"}, "afterCommit": {"oid": "59e55b88180f08341883333697bdbd9431c800e3", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59e55b88180f08341883333697bdbd9431c800e3", "committedDate": "2020-04-27T15:45:25Z", "message": "Improve test case testSimpleUnionReturnParameterNarrowing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95ccff47770621491213e7fa700ec6b0417f1016", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95ccff47770621491213e7fa700ec6b0417f1016", "committedDate": "2020-04-27T15:53:56Z", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c17701db95d0e111c2d7b955982df0fd9fa320ec", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c17701db95d0e111c2d7b955982df0fd9fa320ec", "committedDate": "2020-04-27T15:53:56Z", "message": "Refactor : TypeParamAnalyzer.java remove dead code\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6c2693cf918ca569879bd3c8feb96370673825b", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6c2693cf918ca569879bd3c8feb96370673825b", "committedDate": "2020-04-27T15:53:56Z", "message": "Add more tests for narrowing union type parameters\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e783d65e97ce5f884e8d4c1237a7bde53f8d0d", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87e783d65e97ce5f884e8d4c1237a7bde53f8d0d", "committedDate": "2020-04-27T15:53:56Z", "message": "Refactor TypeParamAnalyzer.java\n\nAdd more test cases. Changed the code formatting of .bal test cases.\nRefactor the code to merger two union based type param narrowing codes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67a090c77e17b1cdf04538b06feff337b99d44c9", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67a090c77e17b1cdf04538b06feff337b99d44c9", "committedDate": "2020-04-27T15:53:56Z", "message": "Remove spaces around `|` in unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "260dce8dce941a22daf79e92e9d0157fe9cc4fab", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/260dce8dce941a22daf79e92e9d0157fe9cc4fab", "committedDate": "2020-04-27T15:53:56Z", "message": "Fix return type narrowing for union type\n\nAdd type narrowing support for union of maps and union arrays\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef3db4223642ea7a316dac22510a8e3688794e4", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ef3db4223642ea7a316dac22510a8e3688794e4", "committedDate": "2020-04-27T15:53:56Z", "message": "Refactor : TypeParamAnalyzer.java remove dead code\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01473fe59abf2833b72e0322498ca4af385f8318", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01473fe59abf2833b72e0322498ca4af385f8318", "committedDate": "2020-04-27T15:53:56Z", "message": "Refactor TypeParamAnalyzer.java\n\nAdd more test cases. Changed the code formatting of .bal test cases.\nRefactor the code to merger two union based type param narrowing codes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee04c8c0fefec2093ad731ab0748abfe29c8e47c", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee04c8c0fefec2093ad731ab0748abfe29c8e47c", "committedDate": "2020-04-27T15:53:56Z", "message": "Improve test case testSimpleUnionReturnParameterNarrowing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59e55b88180f08341883333697bdbd9431c800e3", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59e55b88180f08341883333697bdbd9431c800e3", "committedDate": "2020-04-27T15:45:25Z", "message": "Improve test case testSimpleUnionReturnParameterNarrowing"}, "afterCommit": {"oid": "ee04c8c0fefec2093ad731ab0748abfe29c8e47c", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee04c8c0fefec2093ad731ab0748abfe29c8e47c", "committedDate": "2020-04-27T15:53:56Z", "message": "Improve test case testSimpleUnionReturnParameterNarrowing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be2c139cce0633e59c063c070504303977e043c7", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be2c139cce0633e59c063c070504303977e043c7", "committedDate": "2020-04-28T05:48:53Z", "message": "Fix type param narrowing of union of maps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6319d1da7ef666585122037bd3cba119c29e55ed", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6319d1da7ef666585122037bd3cba119c29e55ed", "committedDate": "2020-04-28T08:30:10Z", "message": "Fix code formatting : Line too long"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d617fd7cae953123c47176d6b7bbb38f2d3fecae", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d617fd7cae953123c47176d6b7bbb38f2d3fecae", "committedDate": "2020-04-29T03:24:32Z", "message": "Handle type narrowing of union of records"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12fc9860180fb75f5c7ff449ac5779cd1a6b1a27", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/12fc9860180fb75f5c7ff449ac5779cd1a6b1a27", "committedDate": "2020-04-29T05:41:45Z", "message": "Add support for type param narrowing for tuples"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4111, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}