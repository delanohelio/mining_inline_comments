{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MTUxMzkz", "number": 27245, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxOTo0OFrOFAriiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxOTo0OFrOFAriiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU3NjcyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxOTo0OFrOH_FrQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxOTo0OFrOH_FrQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNTMyOQ==", "bodyText": "add more comments with desugaring", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27245#discussion_r535915329", "createdAt": "2020-12-04T08:19:48Z", "author": {"login": "pcnfernando"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3757,28 +3996,203 @@ public void visit(BLangUnLockStmt unLockStmt) {\n         result = unLockStmt;\n     }\n \n+\n+    private BLangOnFailClause createTrxInternalOnFail(Location pos, BLangSimpleVarRef shouldPanicRef) {\n+        BLangOnFailClause trxOnFailClause = (BLangOnFailClause) TreeBuilder.createOnFailClauseNode();\n+        trxOnFailClause.pos = pos;\n+        trxOnFailClause.body = ASTBuilderUtil.createBlockStmt(pos);\n+        trxOnFailClause.body.scope = new Scope(env.scope.owner);\n+        trxOnFailClause.isInternal = true;\n+\n+        BVarSymbol trxOnFailErrorSym = new BVarSymbol(0, names.fromString(\"$trxError$\"),\n+                env.scope.owner.pkgID, symTable.errorType, env.scope.owner, pos, VIRTUAL);\n+        BLangSimpleVariable trxOnFailError = ASTBuilderUtil.createVariable(pos,\n+                \"$trxError$\", symTable.errorType, null, trxOnFailErrorSym);\n+        trxOnFailClause.variableDefinitionNode = ASTBuilderUtil.createVariableDef(pos,\n+                trxOnFailError);\n+        trxOnFailClause.body.scope.define(trxOnFailErrorSym.name, trxOnFailErrorSym);\n+        transactionDesugar.createRollbackIfFailed(pos, trxOnFailClause.body, trxOnFailErrorSym, trxBlockId);\n+\n+        BLangGroupExpr shouldNotPanic = new BLangGroupExpr();\n+        shouldNotPanic.type = symTable.booleanType;\n+        shouldNotPanic.expression = createNotBinaryExpression(pos, shouldPanicRef);\n+\n+        BLangSimpleVarRef caughtError =  ASTBuilderUtil.createVariableRef(pos, trxOnFailErrorSym);\n+\n+        BLangBlockStmt failBlock = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangPanic panicNode = (BLangPanic) TreeBuilder.createPanicNode();\n+        panicNode.pos = pos;\n+        panicNode.expr = caughtError;\n+\n+        BLangIf exitIf = ASTBuilderUtil.createIfElseStmt(pos, shouldNotPanic, failBlock, panicNode);\n+        trxOnFailClause.body.stmts.add(exitIf);\n+\n+        BLangFail failStmt = (BLangFail) TreeBuilder.createFailNode();\n+        failStmt.pos = pos;\n+        failStmt.expr = caughtError;\n+        failBlock.stmts.add(failStmt);\n+        trxOnFailClause.bodyContainsFail = true;\n+\n+        return trxOnFailClause;\n+    }\n+\n     @Override\n     public void visit(BLangTransaction transactionNode) {\n-        BLangOnFailClause currentOnFailClause = this.onFailClause;\n-        BLangSimpleVariableDef currentOnFailCallDef = this.onFailCallFuncDef;\n-        analyzeOnFailClause(transactionNode.onFailClause, transactionNode.transactionBody);\n-        BLangStatementExpression transactionStmtExpr = transactionDesugar.rewrite(transactionNode, env,\n-                onFailClause != null);\n-        result = createExpressionStatement(transactionNode.pos, transactionStmtExpr,\n-                transactionNode.statementBlockReturns, env);\n-        swapAndResetEnclosingOnFail(currentOnFailClause, currentOnFailCallDef);\n+        if (transactionNode.onFailClause != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "944a89b342400d6fac837b476fa00265856028f5"}, "originalPosition": 716}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2997, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}