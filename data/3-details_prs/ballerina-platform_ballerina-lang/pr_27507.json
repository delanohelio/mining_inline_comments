{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNDE3ODc4", "number": 27507, "title": "Include maven resolver task", "bodyText": "Purpose\n\nInclude maven resolver task", "createdAt": "2020-12-15T17:02:12Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507", "merged": true, "mergeCommit": {"oid": "6c00196aee0f8134916543f3d330c6411f2c1aa7"}, "closed": true, "closedAt": "2020-12-22T14:55:08Z", "author": {"login": "keizer619"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm4W3agFqTU1NDE5MTIyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdorGT4gFqTU1NzEwMzA1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTkxMjI0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#pullrequestreview-554191224", "createdAt": "2020-12-17T00:26:01Z", "commit": {"oid": "166e64357241a310dee538a5478d7f75e19b1c29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoyNjowMVrOIHfEtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDoyNjowMVrOIHfEtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyMDA1NA==", "bodyText": "Can we remove this section since it is already handled by the next if block?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#discussion_r544720054", "createdAt": "2020-12-17T00:26:01Z", "author": {"login": "IrushiL"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/ResolveMavenDependenciesTask.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.JdkVersion;\n+import io.ballerina.projects.PackageManifest;\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.maven.Dependency;\n+import org.ballerinalang.maven.MavenResolver;\n+import org.ballerinalang.maven.Utils;\n+import org.ballerinalang.maven.exceptions.MavenResolverException;\n+\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Resolve maven dependencies.\n+ */\n+public class ResolveMavenDependenciesTask implements Task {\n+    private final transient PrintStream out;\n+\n+    public ResolveMavenDependenciesTask(PrintStream out) {\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        PackageManifest.Platform platform = project.currentPackage().manifest().platform(JdkVersion.JAVA_11.code());\n+\n+        if (platform == null) {\n+            return;\n+        }\n+\n+        List<Map<String, Object>> platformLibraries = platform.dependencies();\n+        //List<Repository> mavenCustomRepos = manifest.getPlatform().getRepositories();\n+        List<Map<String, Object>> mavenDependencies = new ArrayList<>();\n+        if (platformLibraries == null) {\n+            return;\n+        }\n+\n+        String targetRepo = project.sourceRoot().toString() + File.separator + \"target\" + File.separator\n+                + \"platform-libs\";\n+        MavenResolver resolver = new MavenResolver(targetRepo);\n+\n+//        if (mavenCustomRepos != null && mavenCustomRepos.size() > 0) {\n+//            for (Repository repository : mavenCustomRepos) {\n+//                String id = repository.getId();\n+//                String url = repository.getUrl();\n+//                if (id == null && url == null) {\n+//                    throw LauncherUtils\n+//                            .createLauncherException(\"custom maven repository properties are not specified for \" +\n+//                            \"given platform repository.\");\n+//                }\n+//\n+//                String username = repository.getUsername();\n+//                String password = repository.getPassword();\n+//                if (username != null && password != null) {\n+//                    resolver.addRepository(id, url, username, password);\n+//                    continue;\n+//                }\n+//                resolver.addRepository(id, url);\n+//            }\n+//        }\n+\n+        for (Map<String, Object> library : platformLibraries) {\n+            if (library.get(\"path\") == null) {\n+                if (library.get(\"version\") == null) {\n+                    throw createLauncherException(\"path or maven dependency properties are not specified for \" +\n+                            \"given platform library dependency.\");\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166e64357241a310dee538a5478d7f75e19b1c29"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea808763c248bed338ffa39ef77c2e3bcb0c1f04", "author": {"user": {"login": "keizer619", "name": "Tharik Kanaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea808763c248bed338ffa39ef77c2e3bcb0c1f04", "committedDate": "2020-12-22T05:47:45Z", "message": "Include maven resolver task"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "166e64357241a310dee538a5478d7f75e19b1c29", "author": {"user": {"login": "keizer619", "name": "Tharik Kanaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/166e64357241a310dee538a5478d7f75e19b1c29", "committedDate": "2020-12-15T17:01:31Z", "message": "Include maven resolver task"}, "afterCommit": {"oid": "ea808763c248bed338ffa39ef77c2e3bcb0c1f04", "author": {"user": {"login": "keizer619", "name": "Tharik Kanaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea808763c248bed338ffa39ef77c2e3bcb0c1f04", "committedDate": "2020-12-22T05:47:45Z", "message": "Include maven resolver task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07b325920f7801954fdbf58ccddf62385096b314", "author": {"user": {"login": "keizer619", "name": "Tharik Kanaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07b325920f7801954fdbf58ccddf62385096b314", "committedDate": "2020-12-22T06:49:15Z", "message": "Remove extra version check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f66dca50033e862c00adf9598bad149ce1be1af", "author": {"user": {"login": "keizer619", "name": "Tharik Kanaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f66dca50033e862c00adf9598bad149ce1be1af", "committedDate": "2020-12-22T09:46:26Z", "message": "Update references"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTY5Mjc0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#pullrequestreview-556969274", "createdAt": "2020-12-22T10:17:14Z", "commit": {"oid": "8f66dca50033e862c00adf9598bad149ce1be1af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoxNzoxNFrOIJ14jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoxNzoxNFrOIJ14jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MDkyNA==", "bodyText": "Shall we enable this in the RunCommand, TestCommand, and the DocCommand  also?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#discussion_r547190924", "createdAt": "2020-12-22T10:17:14Z", "author": {"login": "IrushiL"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/BuildCommand.java", "diffHunk": "@@ -224,7 +225,7 @@ public void execute() {\n         TaskExecutor taskExecutor = new TaskExecutor.TaskBuilder()\n                 .addTask(new CleanTargetDirTask(), isSingleFileBuild)   // clean the target directory(projects only)\n                 .addTask(new CreateTargetDirTask()) // create target directory\n-//                .addTask(new ResolveMavenDependenciesTask()) // resolve maven dependencies in Ballerina.toml\n+                .addTask(new ResolveMavenDependenciesTask(outStream)) // resolve maven dependencies in Ballerina.toml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f66dca50033e862c00adf9598bad149ce1be1af"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23376141a189e7ea12d00f599255b488f4b405fd", "author": {"user": {"login": "keizer619", "name": "Tharik Kanaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23376141a189e7ea12d00f599255b488f4b405fd", "committedDate": "2020-12-22T13:42:12Z", "message": "Enable maven resolver"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDk4NzEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#pullrequestreview-557098713", "createdAt": "2020-12-22T14:00:24Z", "commit": {"oid": "23376141a189e7ea12d00f599255b488f4b405fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTAzMDUx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#pullrequestreview-557103051", "createdAt": "2020-12-22T14:07:01Z", "commit": {"oid": "23376141a189e7ea12d00f599255b488f4b405fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDowNzowMVrOIJ8V6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDowNzowMVrOIJ8V6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5Njc0NA==", "bodyText": "These needs to be enabled with maven repository support in toml file. For that new issue has been created\n#27622", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#discussion_r547296744", "createdAt": "2020-12-22T14:07:01Z", "author": {"login": "keizer619"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/ResolveMavenDependenciesTask.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.JvmTarget;\n+import io.ballerina.projects.PackageManifest;\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.maven.Dependency;\n+import org.ballerinalang.maven.MavenResolver;\n+import org.ballerinalang.maven.Utils;\n+import org.ballerinalang.maven.exceptions.MavenResolverException;\n+\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.ballerina.cli.launcher.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Resolve maven dependencies.\n+ */\n+public class ResolveMavenDependenciesTask implements Task {\n+    private final transient PrintStream out;\n+\n+    public ResolveMavenDependenciesTask(PrintStream out) {\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        PackageManifest.Platform platform = project.currentPackage().manifest().platform(JvmTarget.JAVA_11.code());\n+\n+        if (platform == null) {\n+            return;\n+        }\n+\n+        List<Map<String, Object>> platformLibraries = platform.dependencies();\n+        //List<Repository> mavenCustomRepos = manifest.getPlatform().getRepositories();\n+        List<Map<String, Object>> mavenDependencies = new ArrayList<>();\n+        if (platformLibraries == null) {\n+            return;\n+        }\n+\n+        String targetRepo = project.sourceRoot().toString() + File.separator + \"target\" + File.separator\n+                + \"platform-libs\";\n+        MavenResolver resolver = new MavenResolver(targetRepo);\n+\n+//        if (mavenCustomRepos != null && mavenCustomRepos.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23376141a189e7ea12d00f599255b488f4b405fd"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4613, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}