{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODMzNTM0", "number": 21213, "title": "Enable BBE test automation", "bodyText": "Purpose\n\nBBE Test automation\n\nApproach\n\nCreated a tool to test the output of each ballerina file with the provided output .\nBallerina files which cannot be tested using the tool are mentioned separately.", "createdAt": "2020-02-24T06:45:08Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213", "merged": true, "mergeCommit": {"oid": "10d61a73dd8316683de31f5ec414a3f7649dad24"}, "closed": true, "closedAt": "2020-03-13T15:18:36Z", "author": {"login": "ramithaYO"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHX8j3gBqjMwNjQyNTAyNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNNaCNAFqTM3NDE3NzY0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ead2eb26294c82b23d3dcf102824a190e384f7ca", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ead2eb26294c82b23d3dcf102824a190e384f7ca", "committedDate": "2020-02-24T06:19:33Z", "message": "initial commit"}, "afterCommit": {"oid": "32d55501e7f913f3efffeeda506c3a05e33c6386", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/32d55501e7f913f3efffeeda506c3a05e33c6386", "committedDate": "2020-02-24T06:54:59Z", "message": "update: BBE test automation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32d55501e7f913f3efffeeda506c3a05e33c6386", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/32d55501e7f913f3efffeeda506c3a05e33c6386", "committedDate": "2020-02-24T06:54:59Z", "message": "update: BBE test automation"}, "afterCommit": {"oid": "c6014f37ce6c451d5daed6e2c93fe0ccad0c28d6", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6014f37ce6c451d5daed6e2c93fe0ccad0c28d6", "committedDate": "2020-02-24T10:51:23Z", "message": "Enable BBE test automation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6014f37ce6c451d5daed6e2c93fe0ccad0c28d6", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6014f37ce6c451d5daed6e2c93fe0ccad0c28d6", "committedDate": "2020-02-24T10:51:23Z", "message": "Enable BBE test automation"}, "afterCommit": {"oid": "38c17e89290b0f4db8565a0d286c1ae0a50be7f6", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38c17e89290b0f4db8565a0d286c1ae0a50be7f6", "committedDate": "2020-02-26T04:30:01Z", "message": "Enable BBE test automation by reducing the number of lists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjM0MzMx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#pullrequestreview-364634331", "createdAt": "2020-02-26T05:42:04Z", "commit": {"oid": "38c17e89290b0f4db8565a0d286c1ae0a50be7f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0MjowNFrOFue2qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0MjowNFrOFue2qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NDMzMQ==", "bodyText": "I think instead of casting to error, it would be better if we change this to\n    if (tblResult is table<record {}>) {\n        table<Employee> empTable = <table<Employee>> tblResult;\n        foreach var rec in empTable {\n            io:println(rec);\n        }\n    } else {\n        log:printError(\"An error occurred while creating table: \",\n                        err = tblResult);\n    }\nor even\n    if (tblResult is table<record {}>) {\n        foreach var rec in tblResult {\n            io:println(rec);\n        }\n    } else {\n        log:printError(\"An error occurred while creating table: \",\n                        err = tblResult);\n    }\n@anupama-pathirage WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#discussion_r384284331", "createdAt": "2020-02-26T05:42:04Z", "author": {"login": "MaryamZi"}, "path": "examples/csv-io/csv_io.bal", "diffHunk": "@@ -61,7 +61,7 @@ public function main() returns @tainted error? {\n         }\n     } else {\n         log:printError(\"An error occurred while creating table: \",\n-                        err = tblResult);\n+                        err = <error>tblResult);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c17e89290b0f4db8565a0d286c1ae0a50be7f6"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NzA1MzA1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#pullrequestreview-364705305", "createdAt": "2020-02-26T08:41:10Z", "commit": {"oid": "38c17e89290b0f4db8565a0d286c1ae0a50be7f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MToxMVrOFuiVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MToxMVrOFuiVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MTMwNg==", "bodyText": "Shall we include context by specifying which BBE test has failed and how?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#discussion_r384341306", "createdAt": "2020-02-26T08:41:11Z", "author": {"login": "keizer619"}, "path": "tests/ballerina-examples-test/build.gradle", "diffHunk": "@@ -29,114 +29,340 @@ configurations {\n }\n \n dependencies {\n-    ballerinaTools project(path: ':ballerina-tools', configuration: 'unzipped')\n+    ballerinaTools project(path: ':jballerina-tools', configuration: 'unzipped')\n }\n \n task copyDistribution() {\n-    dependsOn \":ballerina-tools:build\"\n+    dependsOn \":jballerina-tools:build\"\n     doFirst {\n         copy {\n             from file(configurations.ballerinaTools.asPath)\n             into \"$buildDir/extractedDistribution\"\n         }\n     }\n }\n+def distPath = \"$buildDir/extractedDistribution\"\n+def bbeList = []\n \n-task test {\n-    dependsOn copyDistribution\n-    def distPath = \"$buildDir/extractedDistribution\"\n-    mustRunAfter ':jballerina-integration-test:test'\n-    outputs.dir(\"${distPath}/examples/target\")\n-    outputs.dir(\"${distPath}/examples/.ballerina/repo/\")\n-    outputs.cacheIf{ true }\n+def IgnoreList = [\n+        'proto-to-ballerina',\n+        'swagger-to-ballerina',\n+        'taint-checking',\n+        'websub-hub-client-sample',\n+        'websub-remote-hub-sample',\n+        'config-api',\n+        'testerina-function-mocks',\n+        'jdbc-client-crud-operations',\n+        'jdbc-client-batch-update',\n+        'jdbc-client-call-procedures',\n+        'streaming-big-dataset',\n+        'docker-deployment',\n+        'kubernetes-deployment',\n+        'awslambda-deployment',\n+        'openshift-deployment',\n+        'grpc-server-streaming',\n+        'transactions-distributed',\n+        'local-transactions',\n+        'local-transactions-with-participants',\n+        'xa-transactions',\n+        'secured-client-with-oauth2',\n+        'gauge-metrics',\n+        'counter-metrics',\n+        'xml-functions',\n+        'openapi-to-ballerina',\n+        'kafka_message_consumer_group_service',\n+        'kafka_message_consumer_simple',\n+        'kafka_message_consumer_service',\n+        'kafka_message_producer',\n+        'kafka_message_producer_transactional',\n+        'grpc-secured-unary',\n+        'grpc-bidirectional-streaming',\n+        'grpc-client-streaming',\n+        'grpc-unary-non-blocking',\n+        'grpc-unary-blocking',\n+        'nats-streaming-start-position',\n+        'nats-streaming-queue-group',\n+        'nats-streaming-durable-subscriptions',\n+        'nats-streaming-consumer-with-data-binding',\n+        'nats-streaming-client',\n+        'nats-basic-client',\n+        'jdbc-streaming-big-dataset',\n+        'testerina-guarantee-test-execution-order',\n+        'testerina-data-driven-tests',\n+        'testerina-before-and-after-suite',\n+        'testerina-before-each-test',\n+        'testerina-before-and-after-test',\n+        'testerina-assertions',\n+        'taint-checking',\n+        'websocket-chat-application',\n+        'secured-service-with-basic-auth',\n+        'secured-service-with-jwt',\n+        'http-caching-client',\n+        'response-with-multiparts',\n+        'http-data-binding',\n+        'http-1.1-to-2.0-protocol-switch',\n+        'websocket-basic-sample',\n+        'http-to-websocket-upgrade',\n+        'websocket-proxy-server',\n+        'http-redirects',\n+        'tracing',\n+        'secured-client-with-basic-auth',\n+        'secured-client-with-jwt-auth',\n+        'http-2.0-server-push',\n+        'worker-interaction',\n+        'workers',\n+        'hello-world-parallel',\n+        'the-main-function',\n+        'task-scheduler-appointment',\n+        'task-scheduler-timer',\n+        'checkpanic',\n+        'type-cast',\n+        'async',\n+        'panic',\n+        'time',\n+        'log-api',\n+        'crypto',\n+        'http-client-endpoint',\n+        'type-conversion',\n+        'record-io'\n+]\n \n-    PatternSet patternSet = new PatternSet();\n-    patternSet.exclude(\"**/.ballerina/**\");\n-    patternSet.exclude(\"**/Ballerina.toml\");\n-    patternSet.exclude(\"**/Ballerina.lock\");\n-    patternSet.exclude(\"**/ballerina-internal.log\")\n-    inputs.files(files(\"${distPath}/examples\").asFileTree.matching(patternSet))\n-    \n+def MockList = [\n+        'filepath',\n+        'strings',\n+        'math-functions',\n+        'cache',\n+        'fork-variable-access',\n+        'fork',\n+        'user-defined-error',\n+        'trap',\n+        'check',\n+        'error-handling',\n+        'error-destructure-binding-pattern',\n+        'record-destructure-binding-pattern',\n+        'tuple-destructure-binding-pattern',\n+        'error-typed-binding-pattern',\n+        'record-typed-binding-pattern',\n+        'tuple-typed-binding-pattern',\n+        'xml-access',\n+        'xml-namespaces',\n+        'xml-attributes',\n+        'xml-literal',\n+        'xml',\n+        'json-to-xml-conversion',\n+        'json-record-map-conversion',\n+        'json-access',\n+        'json-arrays',\n+        'json-objects',\n+        'json',\n+        'immutable-values',\n+        'clone',\n+        'optional-field-access',\n+        'length',\n+        'equality',\n+        'compound-assignment-operators',\n+        'object-type-reference',\n+        'anonymous-objects',\n+        'abstract-objects',\n+        'object-assignability',\n+        'object-methods',\n+        'objects',\n+        'record-type-reference',\n+        'record-optional-fields',\n+        'anonymous-records',\n+        'records',\n+        'string-template',\n+        'range-expressions',\n+        'constants',\n+        'any-type',\n+        'anydata-type',\n+        'optional-type',\n+        'byte-type',\n+        'union-type',\n+        'table',\n+        'maps',\n+        'tuple-type',\n+        'arrays',\n+        'values',\n+        'elvis-operator',\n+        'type-guard',\n+        'type-test-expression',\n+        'error-match-statement',\n+        'record-match-statement',\n+        'tuple-match-statement',\n+        'match',\n+        'foreach',\n+        'while',\n+        'if-else',\n+        'functional-iteration',\n+        'closures',\n+        'anonymous-functions',\n+        'function-pointers',\n+        'quoted-identifiers',\n+        'functions-with-rest-parameter',\n+        'functions-with-defaultable-parameters',\n+        'functions-with-required-parameters',\n+        'functions',\n+        'var',\n+        'variables',\n+        'modules',\n+        'hello-world-client',\n+        'hello-world'\n+]\n+\n+\n+task createProject {\n+    dependsOn copyDistribution\n     doFirst {\n         exec {\n             //Initialize Ballerina project\n             if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n                 //TODO: Need to verify with windows\n-                workingDir \"${distPath}/examples\"\n-                commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'init'\n+                workingDir \"${buildDir}/\"\n+                commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'new', 'TestProject'\n             } else {\n-                workingDir \"${distPath}/examples\"\n-                commandLine \"${distPath}/bin/./ballerina\", 'init'\n+                workingDir \"${buildDir}/\"\n+                commandLine \"${distPath}/bin/./ballerina\", 'new', 'TestProject'\n             }\n         }\n-\n     }\n-\n-    doLast {\n-        // TODO: run examples list as dynamic tasks\n-        //List of BBEs excluded from building\n-        def ignoreList = [ 'proto-to-ballerina',\n-                           'swagger-to-ballerina',\n-                           'taint-checking',\n-                           'websub-hub-client-sample',\n-                           'websub-remote-hub-sample',\n-                           'config-api',\n-                           'testerina-function-mocks',\n-                           'jdbc-client-crud-operations',\n-                           'jdbc-client-batch-update',\n-                           'jdbc-client-call-procedures',\n-                           'streaming-big-dataset',\n-                           'docker-deployment',\n-                           'kubernetes-deployment',\n-                           'awslambda-deployment',\n-                           'openshift-deployment',\n-                           'grpc-server-streaming',\n-                           'transactions-distributed',\n-                           'local-transactions',\n-                           'local-transactions-with-participants',\n-                           'xa-transactions',\n-                           'secured-client-with-oauth2',\n-                           'gauge-metrics',\n-                           'counter-metrics',\n-                           'xml-functions',\n-                           'openapi-to-ballerina',\n-                           'rabbitmq-simple-consumer',\n-                           'rabbitmq-simple-producer'\n-                           ]\n-\n-        def inputFile = new File( \"${distPath}/examples/index.json\")\n+    doFirst {\n+        def inputFile = new File(\"${distPath}/examples/index.json\")\n         def categories = new JsonSlurper().parseText(inputFile.text)\n-        def bbeList = []\n         categories.each { category ->\n             def examples = category.samples\n             examples.each { example ->\n                 bbeList.push(\"$example.url\")\n-\n             }\n         }\n+    }\n+    doLast {\n+        bbeList.each { String bbe ->\n+            def src = \"${project.rootDir}/examples/${bbe}\"\n+            def dis = \"${buildDir}/TestProject/src/${bbe}_test/\"\n+            copy {\n+                from(src) {}\n+                into dis\n+            }\n+        }\n+    }\n+}\n \n-        // Remove excludes\n-        ignoreList.each { ignoreItem ->\n-            bbeList.remove(\"$ignoreItem\")\n+task TestWithTool {\n+    doFirst {\n+        MockList.each { String bbe ->\n+            println bbe\n+            bbe = \"${bbe}_test\"\n+            def outputarry = []\n+            if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n+                //TODO: Need to verify with windows\n+                exec {\n+                    workingDir \"${buildDir}/TestProject\"\n+                    commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'build', '--skip-tests', '--experimental', bbe\n+                }\n+            } else {\n+                exec {\n+                    workingDir \"${buildDir}/TestProject\"\n+                    commandLine \"${distPath}/bin/./ballerina\", 'build', '--skip-tests', '--experimental', bbe\n+                }\n+            }\n+            new ByteArrayOutputStream().withStream { os ->\n+                if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n+                    //TODO: Need to verify with windows\n+                    exec {\n+                        workingDir \"${buildDir}/TestProject/target/bin\"\n+                        commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'run', \"${bbe}.jar\"\n+                        standardOutput = os\n+                    }\n+                } else {\n+                    exec {\n+                        workingDir \"${buildDir}/TestProject/target/bin\"\n+                        commandLine \"${distPath}/bin/./ballerina\", 'run', \"${bbe}.jar\"\n+                        standardOutput = os\n+                    }\n+                }\n+                outputarry.add(os.toString())\n+                println outputarry[0]\n+            }\n+            def lines = \"${outputarry[0]}\".split('\\n')\n+            def variable = bbe - \"_test\"\n+            variable = variable.replace('-', '_')\n+            File file = file(\"${buildDir}/TestProject/src/${bbe}/${variable}.out\")\n+            def fileout = []\n+            file.readLines().each {\n+                def str2 = it.toString()\n+                str2 = str2.trim()\n+                if (str2?.trim()) {\n+                    if (str2[0] != '#') {\n+                        fileout.add(str2)\n+                    }\n+                }\n+            }\n+            def newlines = []\n+            for (int i = 0; i < lines.size(); i++) {\n+                def str1 = lines[i].toString()\n+                str1 = str1.trim()\n+                if (str1?.trim()) {\n+                    newlines.add(str1)\n+                }\n+            }\n+            def index = fileout.findIndexOf { it == newlines[0] }\n+            if (index == -1) {\n+                throw new GradleException('Error occurred')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c17e89290b0f4db8565a0d286c1ae0a50be7f6"}, "originalPosition": 352}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NzA1Nzk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#pullrequestreview-364705799", "createdAt": "2020-02-26T08:41:58Z", "commit": {"oid": "38c17e89290b0f4db8565a0d286c1ae0a50be7f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MTo1OFrOFuiW0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MTo1OFrOFuiW0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MTcxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @test:Config { }\n          \n          \n            \n            @test:Config {}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#discussion_r384341712", "createdAt": "2020-02-26T08:41:58Z", "author": {"login": "anupama-pathirage"}, "path": "examples/basic-https-listener-client/tests/basic_https_listener_client_test.bal", "diffHunk": "@@ -1,7 +1,7 @@\n import ballerina/http;\n import ballerina/test;\n \n-@test:Config\n+@test:Config { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c17e89290b0f4db8565a0d286c1ae0a50be7f6"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38c17e89290b0f4db8565a0d286c1ae0a50be7f6", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38c17e89290b0f4db8565a0d286c1ae0a50be7f6", "committedDate": "2020-02-26T04:30:01Z", "message": "Enable BBE test automation by reducing the number of lists"}, "afterCommit": {"oid": "1fa8cce743488e836eb6d745d8239d5ec9443b37", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1fa8cce743488e836eb6d745d8239d5ec9443b37", "committedDate": "2020-02-27T16:25:44Z", "message": "Update the BBE test fail message"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fa8cce743488e836eb6d745d8239d5ec9443b37", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1fa8cce743488e836eb6d745d8239d5ec9443b37", "committedDate": "2020-02-27T16:25:44Z", "message": "Update the BBE test fail message"}, "afterCommit": {"oid": "6c4ecff012c5a79f64df502513e4b5517b74a9fb", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6c4ecff012c5a79f64df502513e4b5517b74a9fb", "committedDate": "2020-02-28T02:32:11Z", "message": "Enable BBE test automation by reducing the number of lists"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c4ecff012c5a79f64df502513e4b5517b74a9fb", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6c4ecff012c5a79f64df502513e4b5517b74a9fb", "committedDate": "2020-02-28T02:32:11Z", "message": "Enable BBE test automation by reducing the number of lists"}, "afterCommit": {"oid": "474eede0225ea62d95b6330404ec26b19052aa8a", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/474eede0225ea62d95b6330404ec26b19052aa8a", "committedDate": "2020-02-28T04:30:46Z", "message": "Update BBE test fail message"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "474eede0225ea62d95b6330404ec26b19052aa8a", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/474eede0225ea62d95b6330404ec26b19052aa8a", "committedDate": "2020-02-28T04:30:46Z", "message": "Update BBE test fail message"}, "afterCommit": {"oid": "1966cfdcc3cbb80c25f9c78eae83b017b5b021eb", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1966cfdcc3cbb80c25f9c78eae83b017b5b021eb", "committedDate": "2020-03-03T04:50:23Z", "message": "Improve BBE test automation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea568c790fe8bb3cf3f47cd50b70b79d08bb4953", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea568c790fe8bb3cf3f47cd50b70b79d08bb4953", "committedDate": "2020-03-03T04:57:38Z", "message": "Improve BBE test automation"}, "afterCommit": {"oid": "9b18c52e8534b9396073573ee5de627c221bf076", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b18c52e8534b9396073573ee5de627c221bf076", "committedDate": "2020-03-03T10:55:15Z", "message": "Ignore failing BBE"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b18c52e8534b9396073573ee5de627c221bf076", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b18c52e8534b9396073573ee5de627c221bf076", "committedDate": "2020-03-03T10:55:15Z", "message": "Ignore failing BBE"}, "afterCommit": {"oid": "2183e5a45e0d7eb241fa1e2b87e8c99a6bb657fa", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2183e5a45e0d7eb241fa1e2b87e8c99a6bb657fa", "committedDate": "2020-03-04T03:20:18Z", "message": "Improve BBE test automation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2183e5a45e0d7eb241fa1e2b87e8c99a6bb657fa", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2183e5a45e0d7eb241fa1e2b87e8c99a6bb657fa", "committedDate": "2020-03-04T03:20:18Z", "message": "Improve BBE test automation"}, "afterCommit": {"oid": "c1e400deb64bb01e526061c83a485656420749ca", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1e400deb64bb01e526061c83a485656420749ca", "committedDate": "2020-03-04T04:27:50Z", "message": "Update BBE test fail message"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "484040d3ffd7863f8e88fdaa2da56ac61754c873", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/484040d3ffd7863f8e88fdaa2da56ac61754c873", "committedDate": "2020-03-04T04:39:42Z", "message": "Update BBE test"}, "afterCommit": {"oid": "0fe3e6d0778ed547ec4d4dd04d5d29055cdb22b4", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fe3e6d0778ed547ec4d4dd04d5d29055cdb22b4", "committedDate": "2020-03-04T06:08:12Z", "message": "Disable mock testing task"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fe3e6d0778ed547ec4d4dd04d5d29055cdb22b4", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fe3e6d0778ed547ec4d4dd04d5d29055cdb22b4", "committedDate": "2020-03-04T06:08:12Z", "message": "Disable mock testing task"}, "afterCommit": {"oid": "b0ccab89ad148a148e492304eef8f2912498acc3", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0ccab89ad148a148e492304eef8f2912498acc3", "committedDate": "2020-03-04T09:47:41Z", "message": "Update BBE test fail message"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0ccab89ad148a148e492304eef8f2912498acc3", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0ccab89ad148a148e492304eef8f2912498acc3", "committedDate": "2020-03-04T09:47:41Z", "message": "Update BBE test fail message"}, "afterCommit": {"oid": "67401040b4e7da5dc79696ca5158f8b27776b878", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67401040b4e7da5dc79696ca5158f8b27776b878", "committedDate": "2020-03-05T05:04:38Z", "message": "Improve BBE test automation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67401040b4e7da5dc79696ca5158f8b27776b878", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67401040b4e7da5dc79696ca5158f8b27776b878", "committedDate": "2020-03-05T05:04:38Z", "message": "Improve BBE test automation"}, "afterCommit": {"oid": "ff808ce71f34585c1fd603b997d51b69ec25aa6c", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff808ce71f34585c1fd603b997d51b69ec25aa6c", "committedDate": "2020-03-07T17:13:56Z", "message": "Update BBE test fail message"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff808ce71f34585c1fd603b997d51b69ec25aa6c", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff808ce71f34585c1fd603b997d51b69ec25aa6c", "committedDate": "2020-03-07T17:13:56Z", "message": "Update BBE test fail message"}, "afterCommit": {"oid": "731c87463c3288ecb3455085cf205576bed1752c", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/731c87463c3288ecb3455085cf205576bed1752c", "committedDate": "2020-03-08T08:39:52Z", "message": "Improve BBE test automation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "731c87463c3288ecb3455085cf205576bed1752c", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/731c87463c3288ecb3455085cf205576bed1752c", "committedDate": "2020-03-08T08:39:52Z", "message": "Improve BBE test automation"}, "afterCommit": {"oid": "3cb188b156fa3ea3605a89b7178160c961a5d45a", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cb188b156fa3ea3605a89b7178160c961a5d45a", "committedDate": "2020-03-08T08:39:51Z", "message": "Update BBE test fail message"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a694e99d609accad128ed1e81bb791c9a90cf5b", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a694e99d609accad128ed1e81bb791c9a90cf5b", "committedDate": "2020-03-08T16:41:15Z", "message": "Enable BBE test with integration"}, "afterCommit": {"oid": "3cb188b156fa3ea3605a89b7178160c961a5d45a", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cb188b156fa3ea3605a89b7178160c961a5d45a", "committedDate": "2020-03-08T08:39:51Z", "message": "Update BBE test fail message"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3cb188b156fa3ea3605a89b7178160c961a5d45a", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cb188b156fa3ea3605a89b7178160c961a5d45a", "committedDate": "2020-03-08T08:39:51Z", "message": "Update BBE test fail message"}, "afterCommit": {"oid": "6110b1bc1194a5392e1de3d89250ff9012569f2c", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6110b1bc1194a5392e1de3d89250ff9012569f2c", "committedDate": "2020-03-09T03:49:49Z", "message": "Enable BBE test with integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "089a216c213812bd37e24750861ee249b297dd92", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/089a216c213812bd37e24750861ee249b297dd92", "committedDate": "2020-03-09T04:31:19Z", "message": "Improve BBE test automation"}, "afterCommit": {"oid": "17a000c44679843984adfc6d65e0ab2a3cface20", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/17a000c44679843984adfc6d65e0ab2a3cface20", "committedDate": "2020-03-09T03:49:49Z", "message": "Update BBE test fail message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDY2NjUw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#pullrequestreview-372466650", "createdAt": "2020-03-11T04:16:05Z", "commit": {"oid": "dce37801773f993b495aab7d6672ae535937e51d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDoxNjowNlrOF0ovHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDoxNjowNlrOF0ovHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczNzY5Mg==", "bodyText": "@ramithaYO Shall we remove this extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#discussion_r390737692", "createdAt": "2020-03-11T04:16:06Z", "author": {"login": "keizer619"}, "path": "tests/ballerina-examples-test/build.gradle", "diffHunk": "@@ -45,98 +45,382 @@ task copyDistribution() {\n task test {\n     dependsOn copyDistribution\n     def distPath = \"$buildDir/extractedDistribution\"\n+    def bbeList = []\n+\n     mustRunAfter ':jballerina-integration-test:test'\n     outputs.dir(\"${distPath}/examples/target\")\n     outputs.dir(\"${distPath}/examples/.ballerina/repo/\")\n-    outputs.cacheIf{ true }\n+    outputs.cacheIf { true }\n \n     PatternSet patternSet = new PatternSet();\n     patternSet.exclude(\"**/.ballerina/**\");\n     patternSet.exclude(\"**/Ballerina.toml\");\n     patternSet.exclude(\"**/Ballerina.lock\");\n     patternSet.exclude(\"**/ballerina-internal.log\")\n     inputs.files(files(\"${distPath}/examples\").asFileTree.matching(patternSet))\n-    \n+    def ignoreList = [\n+            'proto-to-ballerina',\n+            'swagger-to-ballerina',\n+            'taint-checking',\n+            'websub-hub-client-sample',\n+            'websub-remote-hub-sample',\n+            'config-api',\n+            'testerina-function-mocks',\n+            'jdbc-client-crud-operations',\n+            'jdbc-client-batch-update',\n+            'jdbc-client-call-procedures',\n+            'streaming-big-dataset',\n+            'docker-deployment',\n+            'kubernetes-deployment',\n+            'awslambda-deployment',\n+            'openshift-deployment',\n+            'grpc-server-streaming',\n+            'transactions-distributed',\n+            'local-transactions',\n+            'local-transactions-with-participants',\n+            'xa-transactions',\n+            'secured-client-with-oauth2',\n+            'gauge-metrics',\n+            'counter-metrics',\n+            'openapi-to-ballerina',\n+            'kafka_message_consumer_group_service',\n+            'kafka_message_consumer_simple',\n+            'kafka_message_consumer_service',\n+            'kafka_message_producer',\n+            'kafka_message_producer_transactional',\n+            'grpc-secured-unary',\n+            'grpc-bidirectional-streaming',\n+            'grpc-client-streaming',\n+            'grpc-unary-non-blocking',\n+            'grpc-unary-blocking',\n+            'nats-streaming-start-position',\n+            'nats-streaming-queue-group',\n+            'nats-streaming-durable-subscriptions',\n+            'nats-streaming-consumer-with-data-binding',\n+            'nats-streaming-client',\n+            'nats-basic-client',\n+            'jdbc-streaming-big-dataset',\n+            'testerina-guarantee-test-execution-order',\n+            'testerina-data-driven-tests',\n+            'testerina-before-and-after-suite',\n+            'testerina-before-each-test',\n+            'testerina-before-and-after-test',\n+            'testerina-assertions',\n+            'taint-checking',\n+            'websocket-chat-application',\n+            'secured-service-with-basic-auth',\n+            'secured-service-with-jwt',\n+            'http-caching-client',\n+            'response-with-multiparts',\n+            'http-data-binding',\n+            'http-1.1-to-2.0-protocol-switch',\n+            'websocket-basic-sample',\n+            'http-to-websocket-upgrade',\n+            'websocket-proxy-server',\n+            'http-redirects',\n+            'tracing',\n+            'secured-client-with-basic-auth',\n+            'secured-client-with-jwt-auth',\n+            'log-api',\n+            'http-2.0-server-push',\n+            'the-main-function',\n+            'task-scheduler-appointment',\n+            'task-scheduler-timer',\n+            'time',\n+            'crypto',\n+            'xml-functions',\n+            'xml-literal',\n+            'tuple-typed-binding-pattern',\n+            'xml-access',\n+            'xml-namespaces',\n+            'xml-attributes',\n+            'xml',\n+            'tuple-match-statement',\n+            'ballerina-to-openapi',\n+            'http-timeout',\n+            'http-retry',\n+            'http-failover',\n+            'http-load-balancer',\n+            'http-circuit-breaker',\n+            'content-based-routing',\n+            'header-based-routing',\n+            'http-filters',\n+            'http-compression',\n+            'http-100-continue',\n+            'http-access-logs',\n+            'http-cors',\n+            'request-with-multiparts',\n+            'mutual-ssl',\n+            'basic-https-listener-client',\n+            'https-listener',\n+            'http-disable-chunking',\n+            'base-path-and-path',\n+            'hello-world-service',\n+            'tuple-match-statement'\n+    ]\n+    def mockList = [\n+            'strings',\n+            'math-functions',\n+            'cache',\n+            'user-defined-error',\n+            'trap',\n+            'check',\n+            'error-handling',\n+            'error-destructure-binding-pattern',\n+            'record-destructure-binding-pattern',\n+            'tuple-destructure-binding-pattern',\n+            'error-typed-binding-pattern',\n+            'record-typed-binding-pattern',\n+            'tuple-typed-binding-pattern',\n+            'json-to-xml-conversion',\n+            'json-record-map-conversion',\n+            'json-access',\n+            'json-arrays',\n+            'json-objects',\n+            'json',\n+            'immutable-values',\n+            'clone',\n+            'optional-field-access',\n+            'length',\n+            'equality',\n+            'compound-assignment-operators',\n+            'object-type-reference',\n+            'anonymous-objects',\n+            'abstract-objects',\n+            'object-assignability',\n+            'object-methods',\n+            'objects',\n+            'record-type-reference',\n+            'record-optional-fields',\n+            'anonymous-records',\n+            'records',\n+            'string-template',\n+            'range-expressions',\n+            'constants',\n+            'any-type',\n+            'anydata-type',\n+            'optional-type',\n+            'byte-type',\n+            'union-type',\n+            'table',\n+            'maps',\n+            'tuple-type',\n+            'arrays',\n+            'values',\n+            'elvis-operator',\n+            'type-guard',\n+            'type-test-expression',\n+            'error-match-statement',\n+            'record-match-statement',\n+            'match',\n+            'foreach',\n+            'while',\n+            'if-else',\n+            'functional-iteration',\n+            'closures',\n+            'anonymous-functions',\n+            'function-pointers',\n+            'quoted-identifiers',\n+            'functions-with-rest-parameter',\n+            'functions-with-defaultable-parameters',\n+            'functions-with-required-parameters',\n+            'functions',\n+            'var',\n+            'variables',\n+            'modules',\n+            'hello-world-client',\n+            'hello-world'\n+    ]\n+    def stdEMock = [\n+            'worker-interaction',\n+            'workers',\n+            'fork-variable-access',\n+            'fork',\n+            'hello-world-parallel',\n+            'type-conversion',\n+            'filepath',\n+            'record-io',\n+            'checkpanic',\n+            'type-cast',\n+            'panic',\n+            'http-client-endpoint',\n+            'async'\n+    ]\n     doFirst {\n         exec {\n             //Initialize Ballerina project\n             if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n                 //TODO: Need to verify with windows\n-                workingDir \"${distPath}/examples\"\n-                commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'init'\n+                workingDir \"${buildDir}/\"\n+                commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'new', 'TestProject'\n             } else {\n-                workingDir \"${distPath}/examples\"\n-                commandLine \"${distPath}/bin/./ballerina\", 'init'\n+                workingDir \"${buildDir}/\"\n+                commandLine \"${distPath}/bin/./ballerina\", 'new', 'TestProject'\n             }\n         }\n-\n-    }\n-\n-    doLast {\n-        // TODO: run examples list as dynamic tasks\n-        //List of BBEs excluded from building\n-        def ignoreList = [ 'proto-to-ballerina',\n-                           'swagger-to-ballerina',\n-                           'taint-checking',\n-                           'websub-hub-client-sample',\n-                           'websub-remote-hub-sample',\n-                           'config-api',\n-                           'testerina-function-mocks',\n-                           'jdbc-client-crud-operations',\n-                           'jdbc-client-batch-update',\n-                           'jdbc-client-call-procedures',\n-                           'streaming-big-dataset',\n-                           'docker-deployment',\n-                           'kubernetes-deployment',\n-                           'awslambda-deployment',\n-                           'openshift-deployment',\n-                           'grpc-server-streaming',\n-                           'transactions-distributed',\n-                           'local-transactions',\n-                           'local-transactions-with-participants',\n-                           'xa-transactions',\n-                           'secured-client-with-oauth2',\n-                           'gauge-metrics',\n-                           'counter-metrics',\n-                           'xml-functions',\n-                           'openapi-to-ballerina',\n-                           'rabbitmq-simple-consumer',\n-                           'rabbitmq-simple-producer'\n-                           ]\n-\n-        def inputFile = new File( \"${distPath}/examples/index.json\")\n+        def inputFile = new File(\"${distPath}/examples/index.json\")\n         def categories = new JsonSlurper().parseText(inputFile.text)\n-        def bbeList = []\n         categories.each { category ->\n             def examples = category.samples\n             examples.each { example ->\n                 bbeList.push(\"$example.url\")\n-\n             }\n         }\n-\n-        // Remove excludes\n-        ignoreList.each { ignoreItem ->\n-            bbeList.remove(\"$ignoreItem\")\n+        def src = \"${project.rootDir}/examples/\"\n+        def dis = \"${buildDir}/TestProject/src/\"\n+        copy {\n+            from(src)\n+            into dis\n         }\n \n+    }\n+    doLast {\n+        def ListOfItem = stdEMock + mockList\n+        ListOfItem.each { String bbe ->\n+            if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n+                exec {\n+                    workingDir \"${buildDir}/TestProject\"\n+                    commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'build', '--skip-tests', '--experimental', bbe\n+                }\n+            } else {\n+                exec {\n+                    workingDir \"${buildDir}/TestProject\"\n+                    commandLine \"${distPath}/bin/./ballerina\", 'build', '--skip-tests', '--experimental', bbe\n+                }\n+            }\n+        }\n+        mockList.each { String bbe ->\n+            def bbeOut = []\n+            def fileOut = []\n+            def cmdOutAry = []\n+            def balName = bbe.replace('-', '_')\n+            def str = \"\"\n+            new ByteArrayOutputStream().withStream { os ->\n+                if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n+                    exec {\n+                        workingDir \"${buildDir}/TestProject/target/bin\"\n+                        commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'run', \"${bbe}.jar\"\n+                        standardOutput = os\n+                    }\n+                } else {\n+                    exec {\n+                        workingDir \"${buildDir}/TestProject/target/bin\"\n+                        commandLine \"${distPath}/bin/./ballerina\", 'run', \"${bbe}.jar\"\n+                        standardOutput = os\n+                    }\n+                }\n+                cmdOutAry.add(os.toString())\n+            }\n+            File file = file(\"${buildDir}/TestProject/src/${bbe}/${balName}.out\")\n+            file.readLines().each {\n+                str = it.trim()\n+                if (str?.trim()) {\n+                    if (str[0] != '#') {\n+                        fileOut.add(str)\n+                    }\n+                }\n+            }\n+            def lines = \"${cmdOutAry[0]}\".split('\\n')\n+            for (int i = 0; i < lines.size(); i++) {\n+                str = lines[i].trim()\n+                if (str?.trim()) {\n+                    bbeOut.add(str)\n+                }\n+            }\n+            def index = fileOut.findIndexOf { it == bbeOut[0] }\n+            if (index == -1) {\n+                throw new GradleException(\"Ballerina example test failed: ${balName}\")\n+            }\n+            for (int i = 0; i < bbeOut.size(); i++) {\n+                if (bbeOut[i] != fileOut[index + i]) {\n+                    throw new GradleException(\"Ballerina example test failed: ${balName}\")\n+                }\n+            }\n+            println \"Ballerina example test passed: ${balName}\"\n+        }\n+        stdEMock.each { String bbe ->\n+            def balName = bbe.replace('-', '_')\n+            def str = \"\"\n+            def fileOut = []\n+            def bbeOut = []\n+            def cmdOutAry = []\n+            def errOut = new ByteArrayOutputStream()\n+            new ByteArrayOutputStream().withStream { os ->\n+                if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n+                    exec {\n+                        workingDir \"${buildDir}/TestProject/src/${bbe}\"\n+                        commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'run', \"${balName}.bal\"\n+                        ignoreExitValue true\n+                        standardOutput = os\n+                        errorOutput = errOut\n+                    }\n+                } else {\n+                    exec {\n+                        workingDir \"${buildDir}/TestProject/src/${bbe}\"\n+                        commandLine \"${distPath}/bin/./ballerina\", 'run', \"${balName}.bal\"\n+                        ignoreExitValue true\n+                        standardOutput = os\n+                        errorOutput = errOut\n+                    }\n+                }\n+                cmdOutAry.add(os.toString())\n+                cmdOutAry.add(errOut.toString())\n+            }\n+            File file = file(\"${buildDir}/TestProject/src/${bbe}/${balName}.out\")\n+            def arg1 = \"user-agent\"\n+            file.readLines().each {\n+                str = it.trim()\n+                if (str?.trim()) {\n+                    if (str[0] != '#') {\n+                        str = str.replaceAll(\"${arg1}=\\\\S*\", \"${arg1}=V\")\n+                        str = str.replaceAll(\"${arg1}\\\"\\\\S*\", \"${arg1}\\\":\\\"V\\\",\")\n+                        fileOut.add(str)\n+                    }\n+                }\n+            }\n+            def lines = \"${cmdOutAry[0]}\".split('\\n')\n+            lines = lines + \"${cmdOutAry[1]}\".split('\\n')\n+            lines.each {\n+                str = it.trim()\n+                str = str.replaceAll(\"${arg1}=\\\\S*\", \"${arg1}=V\")\n+                str = str.replaceAll(\"${arg1}\\\"\\\\S*\", \"${arg1}\\\":\\\"V\\\",\")\n+                if (str == \"Compiling source\" || str == \"${balName}.bal\" || str == \"Running executables\" || str == \"\") {\n+                } else {\n+                    bbeOut.add(str)\n+                }\n+            }\n+            for (int i = 0; i < bbeOut.size(); i++) {\n+                def index = fileOut.findIndexOf { it == bbeOut[i] }\n+                if (index == -1) {\n+                    throw new GradleException(\"Ballerina example test failed: ${balName}\")\n+                }\n+            }\n+            println \"Ballerina example test passed: ${balName}\"\n+        }\n+    }\n+    doLast {\n+        def bbeIgnoreList = ignoreList + mockList + stdEMock\n+        bbeIgnoreList.each { String elements ->\n+            bbeList.remove(\"$elements\")\n+        }\n         bbeList.each { String bbe ->\n             if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n                 //TODO: Need to verify with windows\n                 exec {\n-                    workingDir \"${distPath}/examples\"\n-                    commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'build', bbe, '--experimental'\n+                    workingDir \"${buildDir}/TestProject\"\n+                    commandLine 'cmd', '/c', \"${distPath}/bin/ballerina.bat\", 'build', '--experimental', \"${bbe}\"\n                 }\n             } else {\n                 exec {\n-                    workingDir \"${distPath}/examples\"\n-                    commandLine \"${distPath}/bin/./ballerina\", 'build', bbe, '--experimental'\n+                    workingDir \"${buildDir}/TestProject\"\n+                    commandLine \"${buildDir}/extractedDistribution/bin/./ballerina\", 'build', '--experimental', \"${bbe}\"\n                 }\n             }\n         }\n-   }\n+    }\n }\n \n build {\n     dependsOn test\n }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dce37801773f993b495aab7d6672ae535937e51d"}, "originalPosition": 458}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDY2ODk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#pullrequestreview-372466896", "createdAt": "2020-03-11T04:17:07Z", "commit": {"oid": "dce37801773f993b495aab7d6672ae535937e51d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDoxNzowOFrOF0ov-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDoxNzowOFrOF0ov-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczNzkxNQ==", "bodyText": "@ramithaYO Shall we add comments for these lists and mention what will be done with these lists?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#discussion_r390737915", "createdAt": "2020-03-11T04:17:08Z", "author": {"login": "keizer619"}, "path": "tests/ballerina-examples-test/build.gradle", "diffHunk": "@@ -45,98 +45,382 @@ task copyDistribution() {\n task test {\n     dependsOn copyDistribution\n     def distPath = \"$buildDir/extractedDistribution\"\n+    def bbeList = []\n+\n     mustRunAfter ':jballerina-integration-test:test'\n     outputs.dir(\"${distPath}/examples/target\")\n     outputs.dir(\"${distPath}/examples/.ballerina/repo/\")\n-    outputs.cacheIf{ true }\n+    outputs.cacheIf { true }\n \n     PatternSet patternSet = new PatternSet();\n     patternSet.exclude(\"**/.ballerina/**\");\n     patternSet.exclude(\"**/Ballerina.toml\");\n     patternSet.exclude(\"**/Ballerina.lock\");\n     patternSet.exclude(\"**/ballerina-internal.log\")\n     inputs.files(files(\"${distPath}/examples\").asFileTree.matching(patternSet))\n-    \n+    def ignoreList = [\n+            'proto-to-ballerina',\n+            'swagger-to-ballerina',\n+            'taint-checking',\n+            'websub-hub-client-sample',\n+            'websub-remote-hub-sample',\n+            'config-api',\n+            'testerina-function-mocks',\n+            'jdbc-client-crud-operations',\n+            'jdbc-client-batch-update',\n+            'jdbc-client-call-procedures',\n+            'streaming-big-dataset',\n+            'docker-deployment',\n+            'kubernetes-deployment',\n+            'awslambda-deployment',\n+            'openshift-deployment',\n+            'grpc-server-streaming',\n+            'transactions-distributed',\n+            'local-transactions',\n+            'local-transactions-with-participants',\n+            'xa-transactions',\n+            'secured-client-with-oauth2',\n+            'gauge-metrics',\n+            'counter-metrics',\n+            'openapi-to-ballerina',\n+            'kafka_message_consumer_group_service',\n+            'kafka_message_consumer_simple',\n+            'kafka_message_consumer_service',\n+            'kafka_message_producer',\n+            'kafka_message_producer_transactional',\n+            'grpc-secured-unary',\n+            'grpc-bidirectional-streaming',\n+            'grpc-client-streaming',\n+            'grpc-unary-non-blocking',\n+            'grpc-unary-blocking',\n+            'nats-streaming-start-position',\n+            'nats-streaming-queue-group',\n+            'nats-streaming-durable-subscriptions',\n+            'nats-streaming-consumer-with-data-binding',\n+            'nats-streaming-client',\n+            'nats-basic-client',\n+            'jdbc-streaming-big-dataset',\n+            'testerina-guarantee-test-execution-order',\n+            'testerina-data-driven-tests',\n+            'testerina-before-and-after-suite',\n+            'testerina-before-each-test',\n+            'testerina-before-and-after-test',\n+            'testerina-assertions',\n+            'taint-checking',\n+            'websocket-chat-application',\n+            'secured-service-with-basic-auth',\n+            'secured-service-with-jwt',\n+            'http-caching-client',\n+            'response-with-multiparts',\n+            'http-data-binding',\n+            'http-1.1-to-2.0-protocol-switch',\n+            'websocket-basic-sample',\n+            'http-to-websocket-upgrade',\n+            'websocket-proxy-server',\n+            'http-redirects',\n+            'tracing',\n+            'secured-client-with-basic-auth',\n+            'secured-client-with-jwt-auth',\n+            'log-api',\n+            'http-2.0-server-push',\n+            'the-main-function',\n+            'task-scheduler-appointment',\n+            'task-scheduler-timer',\n+            'time',\n+            'crypto',\n+            'xml-functions',\n+            'xml-literal',\n+            'tuple-typed-binding-pattern',\n+            'xml-access',\n+            'xml-namespaces',\n+            'xml-attributes',\n+            'xml',\n+            'tuple-match-statement',\n+            'ballerina-to-openapi',\n+            'http-timeout',\n+            'http-retry',\n+            'http-failover',\n+            'http-load-balancer',\n+            'http-circuit-breaker',\n+            'content-based-routing',\n+            'header-based-routing',\n+            'http-filters',\n+            'http-compression',\n+            'http-100-continue',\n+            'http-access-logs',\n+            'http-cors',\n+            'request-with-multiparts',\n+            'mutual-ssl',\n+            'basic-https-listener-client',\n+            'https-listener',\n+            'http-disable-chunking',\n+            'base-path-and-path',\n+            'hello-world-service',\n+            'tuple-match-statement'\n+    ]\n+    def mockList = [\n+            'strings',\n+            'math-functions',\n+            'cache',\n+            'user-defined-error',\n+            'trap',\n+            'check',\n+            'error-handling',\n+            'error-destructure-binding-pattern',\n+            'record-destructure-binding-pattern',\n+            'tuple-destructure-binding-pattern',\n+            'error-typed-binding-pattern',\n+            'record-typed-binding-pattern',\n+            'tuple-typed-binding-pattern',\n+            'json-to-xml-conversion',\n+            'json-record-map-conversion',\n+            'json-access',\n+            'json-arrays',\n+            'json-objects',\n+            'json',\n+            'immutable-values',\n+            'clone',\n+            'optional-field-access',\n+            'length',\n+            'equality',\n+            'compound-assignment-operators',\n+            'object-type-reference',\n+            'anonymous-objects',\n+            'abstract-objects',\n+            'object-assignability',\n+            'object-methods',\n+            'objects',\n+            'record-type-reference',\n+            'record-optional-fields',\n+            'anonymous-records',\n+            'records',\n+            'string-template',\n+            'range-expressions',\n+            'constants',\n+            'any-type',\n+            'anydata-type',\n+            'optional-type',\n+            'byte-type',\n+            'union-type',\n+            'table',\n+            'maps',\n+            'tuple-type',\n+            'arrays',\n+            'values',\n+            'elvis-operator',\n+            'type-guard',\n+            'type-test-expression',\n+            'error-match-statement',\n+            'record-match-statement',\n+            'match',\n+            'foreach',\n+            'while',\n+            'if-else',\n+            'functional-iteration',\n+            'closures',\n+            'anonymous-functions',\n+            'function-pointers',\n+            'quoted-identifiers',\n+            'functions-with-rest-parameter',\n+            'functions-with-defaultable-parameters',\n+            'functions-with-required-parameters',\n+            'functions',\n+            'var',\n+            'variables',\n+            'modules',\n+            'hello-world-client',\n+            'hello-world'\n+    ]\n+    def stdEMock = [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dce37801773f993b495aab7d6672ae535937e51d"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDY3MTU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#pullrequestreview-372467155", "createdAt": "2020-03-11T04:18:12Z", "commit": {"oid": "dce37801773f993b495aab7d6672ae535937e51d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDoxODoxMlrOF0ow0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDoxODoxMlrOF0ow0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczODEzMA==", "bodyText": "@ramithaYO No need to have extra line space. Lets keep with other includes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#discussion_r390738130", "createdAt": "2020-03-11T04:18:12Z", "author": {"login": "keizer619"}, "path": "settings.gradle", "diffHunk": "@@ -115,7 +115,8 @@ include(':ballerina-cli-module')\n include(':ballerina-jsonutils')\n include(':testerina:testerina-runtime')\n include(':testerina-integration-test')\n-// include(':examples-test')\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dce37801773f993b495aab7d6672ae535937e51d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "436f342ae332777799ab8c5ab8c9eed2f4d95bb2", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/436f342ae332777799ab8c5ab8c9eed2f4d95bb2", "committedDate": "2020-03-11T06:38:41Z", "message": "Enable bString tests\n\nstill breaking due to indexOf method in lang lib"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dce37801773f993b495aab7d6672ae535937e51d", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dce37801773f993b495aab7d6672ae535937e51d", "committedDate": "2020-03-09T15:11:44Z", "message": "Enable BBE test automation with integration"}, "afterCommit": {"oid": "5fb9a6def71443416919bdbd9ee1b7de01d0bdc3", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5fb9a6def71443416919bdbd9ee1b7de01d0bdc3", "committedDate": "2020-03-11T07:59:10Z", "message": "Refactor BBE test automation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fb50c8da279cc0a3a2f6fec87467a095c647ea0", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2fb50c8da279cc0a3a2f6fec87467a095c647ea0", "committedDate": "2020-03-11T09:15:41Z", "message": "Fix compilation error in langlib\n\nFor some reasons this error was not reported during build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f0cba1182846827fff1cc6dc7b02351e4a8aed3", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f0cba1182846827fff1cc6dc7b02351e4a8aed3", "committedDate": "2020-03-11T09:16:31Z", "message": "Fix calling functions with bstring args"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9601f7b2569d89d2237efd137a61010efc3233d1", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9601f7b2569d89d2237efd137a61010efc3233d1", "committedDate": "2020-03-11T09:17:02Z", "message": "Add error langlib dependency to bString tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60dc528abd39269b66b31021d42a3724f0057b68", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60dc528abd39269b66b31021d42a3724f0057b68", "committedDate": "2020-03-11T10:11:09Z", "message": "Refactor BString logic to remove 'useBString' param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f964e14a4dbb90ca9c9cf465fc2b52d703ed7a2", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f964e14a4dbb90ca9c9cf465fc2b52d703ed7a2", "committedDate": "2020-03-11T10:29:33Z", "message": "Merge remote-tracking branch 'origin/master' into fix-bstring-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15e33b863930aaaf43b9da3a83f947d53346c4b9", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15e33b863930aaaf43b9da3a83f947d53346c4b9", "committedDate": "2020-03-11T11:18:15Z", "message": "Fix bString test module dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ae32c936591f287fcc4f3ea6b2cd2ca8a2e500", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/99ae32c936591f287fcc4f3ea6b2cd2ca8a2e500", "committedDate": "2020-03-11T18:10:56Z", "message": "Merge remote-tracking branch 'origin/master' into fix-bstring-tests\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCastGen.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmInstructionGen.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499aeaa9c1ff06473c4506a7c3ad5dab31a8694d", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/499aeaa9c1ff06473c4506a7c3ad5dab31a8694d", "committedDate": "2020-03-12T03:18:30Z", "message": "Merge remote-tracking branch 'origin/master' into fix-bstring-tests\n\n# Conflicts:\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmInstructionGen.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java\n#\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55f69eeb18b77c974a6d9f1645e7944badab1cb8", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/55f69eeb18b77c974a6d9f1645e7944badab1cb8", "committedDate": "2020-03-12T04:49:11Z", "message": "Merge pull request #21657 from manuranga/fix-bstring-tests\n\nFix BString tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6261cfaaf1da991a1cd6042e044ea37f2b9ea77f", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6261cfaaf1da991a1cd6042e044ea37f2b9ea77f", "committedDate": "2020-03-12T06:06:27Z", "message": "Enable BBE test automation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95227052ed4c5271bab9d93b8e220bf6b701e70b", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95227052ed4c5271bab9d93b8e220bf6b701e70b", "committedDate": "2020-03-12T06:06:27Z", "message": "Enable BBE test automation by reducing the number of lists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "709b72b51ae51d2453f2a03e9d0e3d66bd17d0c8", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/709b72b51ae51d2453f2a03e9d0e3d66bd17d0c8", "committedDate": "2020-03-12T06:06:27Z", "message": "Update BBE test fail message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd0cde4607b66c4000e4f4c2d661beec3b3d1b09", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd0cde4607b66c4000e4f4c2d661beec3b3d1b09", "committedDate": "2020-03-12T06:06:28Z", "message": "Enable BBE test automation with integration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fb9a6def71443416919bdbd9ee1b7de01d0bdc3", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5fb9a6def71443416919bdbd9ee1b7de01d0bdc3", "committedDate": "2020-03-11T07:59:10Z", "message": "Refactor BBE test automation"}, "afterCommit": {"oid": "cd0cde4607b66c4000e4f4c2d661beec3b3d1b09", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd0cde4607b66c4000e4f4c2d661beec3b3d1b09", "committedDate": "2020-03-12T06:06:28Z", "message": "Enable BBE test automation with integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "014f7bf2a9fbf329a4f88c9db47d5a03063c2f59", "author": {"user": {"login": "ramithaYO", "name": "Ramitha Opanayaka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/014f7bf2a9fbf329a4f88c9db47d5a03063c2f59", "committedDate": "2020-03-12T06:12:20Z", "message": "Refactor BBE test automation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTczODQy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#pullrequestreview-374173842", "createdAt": "2020-03-13T09:58:28Z", "commit": {"oid": "014f7bf2a9fbf329a4f88c9db47d5a03063c2f59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTc3NjQ2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21213#pullrequestreview-374177646", "createdAt": "2020-03-13T10:04:18Z", "commit": {"oid": "014f7bf2a9fbf329a4f88c9db47d5a03063c2f59"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4157, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}