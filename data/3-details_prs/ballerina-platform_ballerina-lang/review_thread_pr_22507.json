{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjMyMDgx", "number": 22507, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjozNToxOFrODv-NNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjozNToxOFrODv-NNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjI4ODUyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjozNToxOFrOGCtHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo0NDoyN1rOGC6Fzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTU4Nw==", "bodyText": "Can we delegate this to a common method? something like: validateNodes(Node... nodes) that loops through and validates", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22507#discussion_r405489587", "createdAt": "2020-04-08T12:35:18Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+import io.ballerinalang.compiler.internal.parser.tree.STNodeFactory;\n+import io.ballerinalang.compiler.internal.parser.tree.STToken;\n+import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * A factory for creating nodes in the syntax tree.\n+ *\n+ * @since 1.3.0\n+ */\n+public class NodeFactory {\n+\n+    private NodeFactory() {\n+    }\n+\n+    public static ModulePart createModulePart(NodeList<ImportDeclaration> imports,\n+                                              NodeList<ModuleMemberDeclaration> members,\n+                                              Token eofToken) {\n+        Objects.requireNonNull(imports, \"imports must not be null\");\n+        Objects.requireNonNull(members, \"members must not be null\");\n+        Objects.requireNonNull(eofToken, \"eofToken must not be null\");\n+        STNode stModulePart = STNodeFactory.createModulePart(imports.underlyingListNode().internalNode(),\n+                members.underlyingListNode().internalNode(), eofToken.internalNode());\n+        return stModulePart.createUnlinkedFacade();\n+    }\n+\n+    public static FunctionDefinitionNode createFunctionDefinitionNode(Token visibilityQualifier,\n+                                                                      Token functionKeyword,\n+                                                                      Identifier functionName,\n+                                                                      Token openParenToken,\n+                                                                      NodeList<Parameter> parameters,\n+                                                                      Token closeParenToken,\n+                                                                      Node returnTypeDesc,\n+                                                                      BlockStatement functionBody) {\n+        Objects.requireNonNull(visibilityQualifier, \"visibilityQualifier must not be null\");\n+        Objects.requireNonNull(functionKeyword, \"functionKeyword must not be null\");\n+        Objects.requireNonNull(functionName, \"functionName must not be null\");\n+        Objects.requireNonNull(openParenToken, \"openParenToken must not be null\");\n+        Objects.requireNonNull(parameters, \"parameters must not be null\");\n+        Objects.requireNonNull(closeParenToken, \"closeParenToken must not be null\");\n+        Objects.requireNonNull(returnTypeDesc, \"returnTypeDesc must not be null\");\n+        Objects.requireNonNull(functionBody, \"functionBody must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474dabbf49b572e752a5526598b16f61b56c4201"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3NDE0NA==", "bodyText": "Can do that Supun? I\u2019ve done that in each \u201cmodify\u201d methods in nodes.\nBut, if we do that, we won\u2019t be able to provide precise error messages. That is why I wanted to do a null check for each parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22507#discussion_r405574144", "createdAt": "2020-04-08T14:36:41Z", "author": {"login": "sameerajayasoma"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+import io.ballerinalang.compiler.internal.parser.tree.STNodeFactory;\n+import io.ballerinalang.compiler.internal.parser.tree.STToken;\n+import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * A factory for creating nodes in the syntax tree.\n+ *\n+ * @since 1.3.0\n+ */\n+public class NodeFactory {\n+\n+    private NodeFactory() {\n+    }\n+\n+    public static ModulePart createModulePart(NodeList<ImportDeclaration> imports,\n+                                              NodeList<ModuleMemberDeclaration> members,\n+                                              Token eofToken) {\n+        Objects.requireNonNull(imports, \"imports must not be null\");\n+        Objects.requireNonNull(members, \"members must not be null\");\n+        Objects.requireNonNull(eofToken, \"eofToken must not be null\");\n+        STNode stModulePart = STNodeFactory.createModulePart(imports.underlyingListNode().internalNode(),\n+                members.underlyingListNode().internalNode(), eofToken.internalNode());\n+        return stModulePart.createUnlinkedFacade();\n+    }\n+\n+    public static FunctionDefinitionNode createFunctionDefinitionNode(Token visibilityQualifier,\n+                                                                      Token functionKeyword,\n+                                                                      Identifier functionName,\n+                                                                      Token openParenToken,\n+                                                                      NodeList<Parameter> parameters,\n+                                                                      Token closeParenToken,\n+                                                                      Node returnTypeDesc,\n+                                                                      BlockStatement functionBody) {\n+        Objects.requireNonNull(visibilityQualifier, \"visibilityQualifier must not be null\");\n+        Objects.requireNonNull(functionKeyword, \"functionKeyword must not be null\");\n+        Objects.requireNonNull(functionName, \"functionName must not be null\");\n+        Objects.requireNonNull(openParenToken, \"openParenToken must not be null\");\n+        Objects.requireNonNull(parameters, \"parameters must not be null\");\n+        Objects.requireNonNull(closeParenToken, \"closeParenToken must not be null\");\n+        Objects.requireNonNull(returnTypeDesc, \"returnTypeDesc must not be null\");\n+        Objects.requireNonNull(functionBody, \"functionBody must not be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTU4Nw=="}, "originalCommit": {"oid": "474dabbf49b572e752a5526598b16f61b56c4201"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMjA5NQ==", "bodyText": "On a different thought, I think we can do what you suggested if we store field names such as \"visibilityQualifier\", \"functionKeyword\", \"functionName\" etc. As we discussed during the call, Syntax Tree to diagram generator needs field names.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22507#discussion_r405702095", "createdAt": "2020-04-08T17:44:27Z", "author": {"login": "sameerajayasoma"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+import io.ballerinalang.compiler.internal.parser.tree.STNodeFactory;\n+import io.ballerinalang.compiler.internal.parser.tree.STToken;\n+import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+/**\n+ * A factory for creating nodes in the syntax tree.\n+ *\n+ * @since 1.3.0\n+ */\n+public class NodeFactory {\n+\n+    private NodeFactory() {\n+    }\n+\n+    public static ModulePart createModulePart(NodeList<ImportDeclaration> imports,\n+                                              NodeList<ModuleMemberDeclaration> members,\n+                                              Token eofToken) {\n+        Objects.requireNonNull(imports, \"imports must not be null\");\n+        Objects.requireNonNull(members, \"members must not be null\");\n+        Objects.requireNonNull(eofToken, \"eofToken must not be null\");\n+        STNode stModulePart = STNodeFactory.createModulePart(imports.underlyingListNode().internalNode(),\n+                members.underlyingListNode().internalNode(), eofToken.internalNode());\n+        return stModulePart.createUnlinkedFacade();\n+    }\n+\n+    public static FunctionDefinitionNode createFunctionDefinitionNode(Token visibilityQualifier,\n+                                                                      Token functionKeyword,\n+                                                                      Identifier functionName,\n+                                                                      Token openParenToken,\n+                                                                      NodeList<Parameter> parameters,\n+                                                                      Token closeParenToken,\n+                                                                      Node returnTypeDesc,\n+                                                                      BlockStatement functionBody) {\n+        Objects.requireNonNull(visibilityQualifier, \"visibilityQualifier must not be null\");\n+        Objects.requireNonNull(functionKeyword, \"functionKeyword must not be null\");\n+        Objects.requireNonNull(functionName, \"functionName must not be null\");\n+        Objects.requireNonNull(openParenToken, \"openParenToken must not be null\");\n+        Objects.requireNonNull(parameters, \"parameters must not be null\");\n+        Objects.requireNonNull(closeParenToken, \"closeParenToken must not be null\");\n+        Objects.requireNonNull(returnTypeDesc, \"returnTypeDesc must not be null\");\n+        Objects.requireNonNull(functionBody, \"functionBody must not be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTU4Nw=="}, "originalCommit": {"oid": "474dabbf49b572e752a5526598b16f61b56c4201"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3957, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}