{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1Nzc2MTgw", "number": 23640, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjozMDoyOVrOEBQj2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozODoxNVrOEBq51Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzU1MzU0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjozMDoyOVrOGdAGGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjozMDoyOVrOGdAGGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA2MzQ0OQ==", "bodyText": "I'm not sure if this is the correct fix. IMO, we should only be creating a union type if there's at least two members. So ideally we wouldn't have a union with no members.\nThis is the approach we usually take in the compiler too. See https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java#L3831", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433063449", "createdAt": "2020-06-01T06:30:29Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -2193,6 +2193,9 @@ private static boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n+        if (type.getMemberTypes().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05eb7439b2cec87b430590e313b3b8087fbf070e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzU1NDMyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/ForeachArrayTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjozMDo1MFrOGdAGiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjozMDo1MFrOGdAGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA2MzU2MA==", "bodyText": "Shall we move the assertion logic to the bal source?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433063560", "createdAt": "2020-06-01T06:30:50Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/ForeachArrayTests.java", "diffHunk": "@@ -218,4 +218,11 @@ public void testArrayWithNullElements() {\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(), \"0:d0 1: 2:d2 3: \");\n     }\n+\n+    @Test\n+    public void testEmptyArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05eb7439b2cec87b430590e313b3b8087fbf070e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODQ4NjI4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjozNzoxNlrOGdI9Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTowNDo1MlrOGdN4ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwODY0Mw==", "bodyText": "Wouldn't this cause issues when the source type has just a rest-descriptor?\nI think the following will produce an incorrect result with this change.\nimport ballerina/io;\n\npublic function main() {\n    [int...] x = [1, 2];\n    any y = x;\n    io:println(y is string[]);\n}\nWe should ideally have tests for the same too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433208643", "createdAt": "2020-06-01T12:37:16Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -974,6 +974,9 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             sourceArrayType = (BArrayType) sourceType;\n         } else {\n             BTupleType sourceTupleType = (BTupleType) sourceType;\n+            if (sourceTupleType.getTupleTypes().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e0c2e28805d28933678430762c262fc271cab"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4OTMxNw==", "bodyText": "Thanks fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433289317", "createdAt": "2020-06-01T15:04:52Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -974,6 +974,9 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             sourceArrayType = (BArrayType) sourceType;\n         } else {\n             BTupleType sourceTupleType = (BTupleType) sourceType;\n+            if (sourceTupleType.getTupleTypes().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwODY0Mw=="}, "originalCommit": {"oid": "6f6e0c2e28805d28933678430762c262fc271cab"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTE5MDQ3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjowNzoxN1rOGdjRtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODoyMjowNFrOGdnKQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzOTg2MA==", "bodyText": "This will not work for something like\nimport ballerina/io;\n\npublic function main() {\n    var x = [];\n\n    any a = x;\n    io:println(x is int[2]); // should be false\n}\nI think if tupleTypes.isEmpty() we should return true only if the target array state is ArrayState.UNSEALED or the target size is also 0.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433639860", "createdAt": "2020-06-02T06:07:17Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -978,6 +978,9 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             if (sourceTupleType.getRestType() != null) {\n                 tupleTypes.add(sourceTupleType.getRestType());\n             }\n+            if (tupleTypes.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f69ee4fd6e574be68101a7ebee52b083d74ba21"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwMzQ5MQ==", "bodyText": "Fixed thanks.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433703491", "createdAt": "2020-06-02T08:22:04Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -978,6 +978,9 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             if (sourceTupleType.getRestType() != null) {\n                 tupleTypes.add(sourceTupleType.getRestType());\n             }\n+            if (tupleTypes.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzOTg2MA=="}, "originalCommit": {"oid": "7f69ee4fd6e574be68101a7ebee52b083d74ba21"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg2ODAyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozNzo1NFrOGdp79g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyNToxMlrOGePSgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODk4Mg==", "bodyText": "Not due to the changes you introduced, but this should also fail. :( Seems like there are issues in the checkIsTupleType logic too.\nThe is check looks for the belongs-to relationship\n\na value belongs to a type if it looks like the type, and it will necessarily continue to look like the type no matter how the value is mutated.\n\nShould we fix that check in this PR too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433748982", "createdAt": "2020-06-02T09:37:54Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2ODcyNg==", "bodyText": "so only this needs to be true? y is [int...]", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433768726", "createdAt": "2020-06-02T10:12:59Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODk4Mg=="}, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc3MTQ1Nw==", "bodyText": "And y is int[]", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433771457", "createdAt": "2020-06-02T10:18:22Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODk4Mg=="}, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc3Mzc3NA==", "bodyText": "both y is int[] and y is int[0] return false now. Are rest types considered arrays as well as tuples?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433773774", "createdAt": "2020-06-02T10:22:54Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODk4Mg=="}, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc4MDM0MQ==", "bodyText": "y is int[] should be true, y is int[0] should be false.\nArrays and tuples both represent lists. The difference being in an array all the members are of the same type whereas for tuples they may be of different types. Arrays and tuples can be used interchangeably given that they fulfill \"belongs-to\" criteria.\nThe types have to match and when it comes to the size,\nint[2] is the same as [int, int] - list of two int members\nint[] is the same as [int...] - list of zero or more int members\nint[2] is assignable to [int, int, int...] because [int, int, int...] represents a list of at least two int members, and int[2] is always that.\nBut you can't assign a [int, int, int...] to int[2] since it may have more than 2 members which will violate the inherent type of int[2].", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433780341", "createdAt": "2020-06-02T10:36:11Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODk4Mg=="}, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MzgyNg==", "bodyText": "Shall I create a different issue to fix this and remove the above test case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433853826", "createdAt": "2020-06-02T12:57:28Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODk4Mg=="}, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzMDcyMg==", "bodyText": "Okay I guess, since it's a different path. Shall we create one with high priority though, since this would lead to unexpected errors?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433930722", "createdAt": "2020-06-02T14:42:24Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODk4Mg=="}, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NjkzNQ==", "bodyText": "Created issue #23676 . Please verify if it captures the requirements \ud83d\ude42", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r434266935", "createdAt": "2020-06-03T01:57:26Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODk4Mg=="}, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MDk2Mg==", "bodyText": "LGTM, thanks.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r434360962", "createdAt": "2020-06-03T07:25:12Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODk4Mg=="}, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg2OTY1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozODoxNVrOGdp83g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozODoxNVrOGdp83g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0OTIxNA==", "bodyText": "Extra new line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23640#discussion_r433749214", "createdAt": "2020-06-02T09:38:15Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,6 +157,31 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testRestType() {\n+    [int...] x = [1, 2];\n+    any y = x;\n+    assertEquality(y is string[], false);\n+    assertEquality(y is [int], true);\n+}\n+\n+public function testEmptyArrayType() {\n+    var x = [];\n+    any a = x;\n+    assertEquality(a is int[2], false);\n+    assertEquality(a is int[], true);\n+\n+    string[] sa = [];\n+    any arr = sa;\n+    assertEquality(arr is string[], true);\n+    assertEquality(arr is int[], false);\n+\n+    int[0] ia = [];\n+    any iarr = ia;\n+    assertEquality(iarr is int[0], true);\n+    assertEquality(iarr is int[], true);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e48b9c3cee705277c1357c5bfeb6fb81b1c44afc"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3539, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}