{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTQ5NjQ5", "number": 24112, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNDozNjoxMFrOEFU13w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNDo0NDo1NFrOEFU4JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDE5ODA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNDozNjoxMFrOGjdeXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo0ODozN1rOGjlJlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNjI1Mw==", "bodyText": "no need to do replaceAll, which may be slower, also why are there , commas between chars.\n. replaceFirst(\"[fd]$\", \"\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24112#discussion_r439836253", "createdAt": "2020-06-14T14:36:10Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3655,8 +3662,13 @@ private BLangLiteral createSimpleLiteral(Node literal, SyntaxKind sign) {\n         } else if (type == SyntaxKind.DECIMAL_FLOATING_POINT_LITERAL) {\n             //TODO: Check effect of mapping negative(-) numbers as unary-expr\n             typeTag = NumericLiteralSupport.isDecimalDiscriminated(textValue) ? TypeTags.DECIMAL : TypeTags.FLOAT;\n-            value = textValue;\n-            originalValue = textValue;\n+            if (isFiniteType) {\n+                value = textValue.replaceAll(\"[f,d,/+]\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f20d2538f0e7f7141c4aed331c1c492513e39d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNjQyMA==", "bodyText": "Oh is this replacing the leading + as well? and what about / I though escaping is done by \\\\", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24112#discussion_r439836420", "createdAt": "2020-06-14T14:38:12Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3655,8 +3662,13 @@ private BLangLiteral createSimpleLiteral(Node literal, SyntaxKind sign) {\n         } else if (type == SyntaxKind.DECIMAL_FLOATING_POINT_LITERAL) {\n             //TODO: Check effect of mapping negative(-) numbers as unary-expr\n             typeTag = NumericLiteralSupport.isDecimalDiscriminated(textValue) ? TypeTags.DECIMAL : TypeTags.FLOAT;\n-            value = textValue;\n-            originalValue = textValue;\n+            if (isFiniteType) {\n+                value = textValue.replaceAll(\"[f,d,/+]\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNjI1Mw=="}, "originalCommit": {"oid": "06f20d2538f0e7f7141c4aed331c1c492513e39d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2MjAwNA==", "bodyText": "removed comma and /. :-)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24112#discussion_r439962004", "createdAt": "2020-06-15T06:48:37Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3655,8 +3662,13 @@ private BLangLiteral createSimpleLiteral(Node literal, SyntaxKind sign) {\n         } else if (type == SyntaxKind.DECIMAL_FLOATING_POINT_LITERAL) {\n             //TODO: Check effect of mapping negative(-) numbers as unary-expr\n             typeTag = NumericLiteralSupport.isDecimalDiscriminated(textValue) ? TypeTags.DECIMAL : TypeTags.FLOAT;\n-            value = textValue;\n-            originalValue = textValue;\n+            if (isFiniteType) {\n+                value = textValue.replaceAll(\"[f,d,/+]\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNjI1Mw=="}, "originalCommit": {"oid": "06f20d2538f0e7f7141c4aed331c1c492513e39d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDIwMTU1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/finite/FiniteTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNDo0MjowNFrOGjdgOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo0ODo1MVrOGjlKCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNjcyOQ==", "bodyText": "Any reason for commenting out?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24112#discussion_r439836729", "createdAt": "2020-06-14T14:42:04Z", "author": {"login": "SupunS"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/finite/FiniteTypeTest.java", "diffHunk": "@@ -362,11 +362,11 @@ public void testFiniteTypeWithDiscriminatedMembers() {\n         Assert.assertEquals(returns[1], new BDecimal(\"1.0\"));\n     }\n \n-    @Test(description = \"Test finite type where typename is espaed identifier\", groups = { \"brokenOnSpecDeviation\" })\n-    public void testEscapedTypeName() {\n-        BValue[] returns = BRunUtil.invoke(result, \"testEscapedTypeName\");\n-        Assert.assertEquals(returns[0].stringValue(), \"-\");\n-    }\n+//    @Test(description = \"Test finite type where typename is espaed identifier\", groups = { \"brokenOnSpecDeviation\" })\n+//    public void testEscapedTypeName() {\n+//        BValue[] returns = BRunUtil.invoke(result, \"testEscapedTypeName\");\n+//        Assert.assertEquals(returns[0].stringValue(), \"-\");\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f20d2538f0e7f7141c4aed331c1c492513e39d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2MjEyMw==", "bodyText": "Uncommented", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24112#discussion_r439962123", "createdAt": "2020-06-15T06:48:51Z", "author": {"login": "rdulmina"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/finite/FiniteTypeTest.java", "diffHunk": "@@ -362,11 +362,11 @@ public void testFiniteTypeWithDiscriminatedMembers() {\n         Assert.assertEquals(returns[1], new BDecimal(\"1.0\"));\n     }\n \n-    @Test(description = \"Test finite type where typename is espaed identifier\", groups = { \"brokenOnSpecDeviation\" })\n-    public void testEscapedTypeName() {\n-        BValue[] returns = BRunUtil.invoke(result, \"testEscapedTypeName\");\n-        Assert.assertEquals(returns[0].stringValue(), \"-\");\n-    }\n+//    @Test(description = \"Test finite type where typename is espaed identifier\", groups = { \"brokenOnSpecDeviation\" })\n+//    public void testEscapedTypeName() {\n+//        BValue[] returns = BRunUtil.invoke(result, \"testEscapedTypeName\");\n+//        Assert.assertEquals(returns[0].stringValue(), \"-\");\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNjcyOQ=="}, "originalCommit": {"oid": "06f20d2538f0e7f7141c4aed331c1c492513e39d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDIwMzg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNDo0NDo1NFrOGjdhZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjo0OTowM1rOGjlKYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzAyOA==", "bodyText": "I think this is already handled inside createSimpleLiteral() method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24112#discussion_r439837028", "createdAt": "2020-06-14T14:44:54Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -630,7 +630,14 @@ public BLangNode transform(UnionTypeDescriptorNode unionTypeDescriptorNode) {\n         BLangFiniteTypeNode bLangFiniteTypeNode = (BLangFiniteTypeNode) TreeBuilder.createFiniteTypeNode();\n         for (TypeDescriptorNode finiteTypeEl : finiteTypeElements) {\n             SingletonTypeDescriptorNode singletonTypeNode = (SingletonTypeDescriptorNode) finiteTypeEl;\n-            BLangLiteral literal = createSimpleLiteral(singletonTypeNode.simpleContExprNode());\n+            BLangLiteral literal;\n+            Node simpleContExprNode = singletonTypeNode.simpleContExprNode();\n+            if (simpleContExprNode.kind() == SyntaxKind.UNARY_EXPRESSION) {\n+                UnaryExpressionNode unaryExpr = (UnaryExpressionNode) simpleContExprNode;\n+                literal = createSimpleLiteral(unaryExpr.expression(), unaryExpr.unaryOperator().kind(), true);\n+            } else {\n+                literal = createSimpleLiteral(simpleContExprNode, SyntaxKind.NONE, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f20d2538f0e7f7141c4aed331c1c492513e39d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2MjIwOQ==", "bodyText": "removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24112#discussion_r439962209", "createdAt": "2020-06-15T06:49:03Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -630,7 +630,14 @@ public BLangNode transform(UnionTypeDescriptorNode unionTypeDescriptorNode) {\n         BLangFiniteTypeNode bLangFiniteTypeNode = (BLangFiniteTypeNode) TreeBuilder.createFiniteTypeNode();\n         for (TypeDescriptorNode finiteTypeEl : finiteTypeElements) {\n             SingletonTypeDescriptorNode singletonTypeNode = (SingletonTypeDescriptorNode) finiteTypeEl;\n-            BLangLiteral literal = createSimpleLiteral(singletonTypeNode.simpleContExprNode());\n+            BLangLiteral literal;\n+            Node simpleContExprNode = singletonTypeNode.simpleContExprNode();\n+            if (simpleContExprNode.kind() == SyntaxKind.UNARY_EXPRESSION) {\n+                UnaryExpressionNode unaryExpr = (UnaryExpressionNode) simpleContExprNode;\n+                literal = createSimpleLiteral(unaryExpr.expression(), unaryExpr.unaryOperator().kind(), true);\n+            } else {\n+                literal = createSimpleLiteral(simpleContExprNode, SyntaxKind.NONE, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzAyOA=="}, "originalCommit": {"oid": "06f20d2538f0e7f7141c4aed331c1c492513e39d"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3382, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}