{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzODI0Mzc1", "number": 25720, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjo1NDoxMVrOEiXLjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNTo1NzoxOFrOEi4v_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDY2ODMwOnYy", "diffSide": "RIGHT", "path": "stdlib/release/src/release/trigger_workflows.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjo1NDoxMVrOHQMdog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjo1NDoxMVrOHQMdog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MzQ1OA==", "bodyText": "Shouldn't we return/panic if it's an error?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                return;\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486743458", "createdAt": "2020-09-11T02:54:11Z", "author": {"login": "chamil321"}, "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDY4MjQyOnYy", "diffSide": "RIGHT", "path": "stdlib/release/src/release/trigger_workflows.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzowMTo0OFrOHQMlsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzowMTo0OFrOHQMlsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NTUyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    string errInfo = \"Modlue: \" + moduleName + \" Status Code: \" + statusCode.toString();\n          \n          \n            \n                    string errInfo = \"Module: \" + moduleName + \" Status Code: \" + statusCode.toString();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486745520", "createdAt": "2020-09-11T03:01:48Z", "author": {"login": "chamil321"}, "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }\n+    json jsonFile = <json>result;\n+    json[] modules = <json[]>jsonFile.modules;\n+    int level = -1;\n+    foreach json module in modules {\n+        int nextLevel = <int>module.level;\n+        if (nextLevel > level && nextLevel != 0) {\n+            runtime:sleep(WAIT_TIME_TO_BUILD);\n+            level = nextLevel;\n+        }\n+        processModule(<map<json>>module, httpClient, request);\n+    }\n+}\n+\n+function processModule(map<json> module, http:Client httpClient, http:Request request) {\n+    boolean ballerinaRelease = <boolean>module[BALLERINA_RELEASE];\n+    boolean githubRelease = <boolean>module[GITHUB_RELEASE];\n+    if (githubRelease) {\n+        releaseToGithub(module, httpClient, request);\n+    } else if (ballerinaRelease) {\n+        releaseToBallerina(module, httpClient, request);\n+    }\n+}\n+\n+function releaseToGithub(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    string branch = module.branch.toString();\n+    string notes = module.notes.toString();\n+\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Github. Version: \" + 'version);\n+\n+    // TODO: Adding draft and prerelease options. These aren't necessary for now.\n+    json payload = {\n+        tag_name: \"v\" + 'version,\n+        target_commitish: branch,\n+        name: 'version,\n+        notes: notes\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/releases\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function releaseToBallerina(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Ballerina Central Version: \" + 'version);\n+\n+    // TODO: Add branch as a payload parameter, then checkout the needed branch at the destination.\n+    json payload = {\n+        event_type: EVENT_TYPE,\n+        client_payload: {\n+            'version: 'version\n+        }\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/dispatches\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function validateResponse(http:Response response, string moduleName) {\n+    int statusCode = response.statusCode;\n+    if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {\n+        string errMessage = \"Error response received from the module: \";\n+        string errInfo = \"Modlue: \" + moduleName + \" Status Code: \" + statusCode.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDY4NjI5OnYy", "diffSide": "RIGHT", "path": "stdlib/release/src/release/trigger_workflows.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzowNDoxNFrOHQMn7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzowNDoxNFrOHQMn7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NjA5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                request.addHeader(ACCEPT_HEADER_KEY, ACCEPT_HEADER_VALUE);\n          \n          \n            \n                request.setHeader(ACCEPT_HEADER_KEY, ACCEPT_HEADER_VALUE);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486746092", "createdAt": "2020-09-11T03:04:14Z", "author": {"login": "chamil321"}, "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }\n+    json jsonFile = <json>result;\n+    json[] modules = <json[]>jsonFile.modules;\n+    int level = -1;\n+    foreach json module in modules {\n+        int nextLevel = <int>module.level;\n+        if (nextLevel > level && nextLevel != 0) {\n+            runtime:sleep(WAIT_TIME_TO_BUILD);\n+            level = nextLevel;\n+        }\n+        processModule(<map<json>>module, httpClient, request);\n+    }\n+}\n+\n+function processModule(map<json> module, http:Client httpClient, http:Request request) {\n+    boolean ballerinaRelease = <boolean>module[BALLERINA_RELEASE];\n+    boolean githubRelease = <boolean>module[GITHUB_RELEASE];\n+    if (githubRelease) {\n+        releaseToGithub(module, httpClient, request);\n+    } else if (ballerinaRelease) {\n+        releaseToBallerina(module, httpClient, request);\n+    }\n+}\n+\n+function releaseToGithub(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    string branch = module.branch.toString();\n+    string notes = module.notes.toString();\n+\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Github. Version: \" + 'version);\n+\n+    // TODO: Adding draft and prerelease options. These aren't necessary for now.\n+    json payload = {\n+        tag_name: \"v\" + 'version,\n+        target_commitish: branch,\n+        name: 'version,\n+        notes: notes\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/releases\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function releaseToBallerina(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Ballerina Central Version: \" + 'version);\n+\n+    // TODO: Add branch as a payload parameter, then checkout the needed branch at the destination.\n+    json payload = {\n+        event_type: EVENT_TYPE,\n+        client_payload: {\n+            'version: 'version\n+        }\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/dispatches\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function validateResponse(http:Response response, string moduleName) {\n+    int statusCode = response.statusCode;\n+    if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {\n+        string errMessage = \"Error response received from the module: \";\n+        string errInfo = \"Modlue: \" + moduleName + \" Status Code: \" + statusCode.toString();\n+        log:printInfo(errInfo);\n+        log:printInfo(response.getJsonPayload().toString());\n+        // TODO: Shall we panic here?\n+        // panic error(errMessage + moduleName + \" workflow. Code: \" + statusCode.toString());\n+    }\n+}\n+\n+function createRequest(string accessTokenHeaderValue) returns http:Request {\n+    http:Request request = new;\n+    request.addHeader(ACCEPT_HEADER_KEY, ACCEPT_HEADER_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDY4Njc0OnYy", "diffSide": "RIGHT", "path": "stdlib/release/src/release/trigger_workflows.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzowNDozNlrOHQMoNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzowNDozNlrOHQMoNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NjE2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                request.addHeader(AUTH_HEADER_KEY, accessTokenHeaderValue);\n          \n          \n            \n                request.setHeader(AUTH_HEADER_KEY, accessTokenHeaderValue);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486746164", "createdAt": "2020-09-11T03:04:36Z", "author": {"login": "chamil321"}, "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }\n+    json jsonFile = <json>result;\n+    json[] modules = <json[]>jsonFile.modules;\n+    int level = -1;\n+    foreach json module in modules {\n+        int nextLevel = <int>module.level;\n+        if (nextLevel > level && nextLevel != 0) {\n+            runtime:sleep(WAIT_TIME_TO_BUILD);\n+            level = nextLevel;\n+        }\n+        processModule(<map<json>>module, httpClient, request);\n+    }\n+}\n+\n+function processModule(map<json> module, http:Client httpClient, http:Request request) {\n+    boolean ballerinaRelease = <boolean>module[BALLERINA_RELEASE];\n+    boolean githubRelease = <boolean>module[GITHUB_RELEASE];\n+    if (githubRelease) {\n+        releaseToGithub(module, httpClient, request);\n+    } else if (ballerinaRelease) {\n+        releaseToBallerina(module, httpClient, request);\n+    }\n+}\n+\n+function releaseToGithub(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    string branch = module.branch.toString();\n+    string notes = module.notes.toString();\n+\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Github. Version: \" + 'version);\n+\n+    // TODO: Adding draft and prerelease options. These aren't necessary for now.\n+    json payload = {\n+        tag_name: \"v\" + 'version,\n+        target_commitish: branch,\n+        name: 'version,\n+        notes: notes\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/releases\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function releaseToBallerina(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Ballerina Central Version: \" + 'version);\n+\n+    // TODO: Add branch as a payload parameter, then checkout the needed branch at the destination.\n+    json payload = {\n+        event_type: EVENT_TYPE,\n+        client_payload: {\n+            'version: 'version\n+        }\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/dispatches\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function validateResponse(http:Response response, string moduleName) {\n+    int statusCode = response.statusCode;\n+    if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {\n+        string errMessage = \"Error response received from the module: \";\n+        string errInfo = \"Modlue: \" + moduleName + \" Status Code: \" + statusCode.toString();\n+        log:printInfo(errInfo);\n+        log:printInfo(response.getJsonPayload().toString());\n+        // TODO: Shall we panic here?\n+        // panic error(errMessage + moduleName + \" workflow. Code: \" + statusCode.toString());\n+    }\n+}\n+\n+function createRequest(string accessTokenHeaderValue) returns http:Request {\n+    http:Request request = new;\n+    request.addHeader(ACCEPT_HEADER_KEY, ACCEPT_HEADER_VALUE);\n+    request.addHeader(AUTH_HEADER_KEY, accessTokenHeaderValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDcwMzg4OnYy", "diffSide": "RIGHT", "path": "stdlib/release/src/release/trigger_workflows.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxNToxMFrOHQMyfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxNToxMFrOHQMyfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODc5Ng==", "bodyText": "Shall we move this request creation into another function and call it whenever we want the request? I see that the request is being used at #L55 and #L80.\nAlso, we can use separate requests for each call rather than reusing the same request if you do so.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486748796", "createdAt": "2020-09-11T03:15:10Z", "author": {"login": "chamil321"}, "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDcwNzk0OnYy", "diffSide": "RIGHT", "path": "stdlib/release/src/release/trigger_workflows.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxNzozOVrOHQM0yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxNzozOVrOHQM0yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTM4Nw==", "bodyText": "Shall we move these two variables to the global scope? So we can avoid them being passed as function params", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486749387", "createdAt": "2020-09-11T03:17:39Z", "author": {"login": "chamil321"}, "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDcyNDAyOnYy", "diffSide": "RIGHT", "path": "stdlib/release/src/release/trigger_workflows.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoyNzoxOFrOHQM99A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoyNzoxOFrOHQM99A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MTczMg==", "bodyText": "Check this logic\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {\n          \n          \n            \n                if (statusCode != 200 && statusCode != 201 && statusCode != 202 && statusCode != 204) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486751732", "createdAt": "2020-09-11T03:27:18Z", "author": {"login": "chamil321"}, "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }\n+    json jsonFile = <json>result;\n+    json[] modules = <json[]>jsonFile.modules;\n+    int level = -1;\n+    foreach json module in modules {\n+        int nextLevel = <int>module.level;\n+        if (nextLevel > level && nextLevel != 0) {\n+            runtime:sleep(WAIT_TIME_TO_BUILD);\n+            level = nextLevel;\n+        }\n+        processModule(<map<json>>module, httpClient, request);\n+    }\n+}\n+\n+function processModule(map<json> module, http:Client httpClient, http:Request request) {\n+    boolean ballerinaRelease = <boolean>module[BALLERINA_RELEASE];\n+    boolean githubRelease = <boolean>module[GITHUB_RELEASE];\n+    if (githubRelease) {\n+        releaseToGithub(module, httpClient, request);\n+    } else if (ballerinaRelease) {\n+        releaseToBallerina(module, httpClient, request);\n+    }\n+}\n+\n+function releaseToGithub(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    string branch = module.branch.toString();\n+    string notes = module.notes.toString();\n+\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Github. Version: \" + 'version);\n+\n+    // TODO: Adding draft and prerelease options. These aren't necessary for now.\n+    json payload = {\n+        tag_name: \"v\" + 'version,\n+        target_commitish: branch,\n+        name: 'version,\n+        notes: notes\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/releases\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function releaseToBallerina(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Ballerina Central Version: \" + 'version);\n+\n+    // TODO: Add branch as a payload parameter, then checkout the needed branch at the destination.\n+    json payload = {\n+        event_type: EVENT_TYPE,\n+        client_payload: {\n+            'version: 'version\n+        }\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/dispatches\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function validateResponse(http:Response response, string moduleName) {\n+    int statusCode = response.statusCode;\n+    if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDE2ODI4OnYy", "diffSide": "RIGHT", "path": "stdlib/release/src/release/trigger_workflows.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNTo1NzoxOFrOHQ9cww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNTo1NzoxOFrOHQ9cww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NjA1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logAndPanicError(\"Error occurred whie reading the file\", result);\n          \n          \n            \n                    logAndPanicError(\"Error occurred while reading the config file\", result);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r487546051", "createdAt": "2020-09-13T15:57:18Z", "author": {"login": "chamil321"}, "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,188 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+http:Client httpClient = new (API_PATH);\n+string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+\n+public function main() {\n+    json[] modulesJson = getModuleJsonArray();\n+    Module[] modules = getModuleArray(modulesJson);\n+    handleRelease(modules);\n+}\n+\n+function getModuleJsonArray() returns json[] {\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        logAndPanicError(\"Error occurred whie reading the file\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55a323aceb1f60da19ae1f10d335071b71b7c1a5"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 71, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}