{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDY1Nzc2", "number": 22805, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzoyNDo0OVrOD0Ft4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzoyNDo0OVrOD0Ft4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTQ2MjEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzoyNDo0OVrOGI2qqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzozNDowMlrOGI3C2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzNzQ1MQ==", "bodyText": "Is this an optional filed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22805#discussion_r411937451", "createdAt": "2020-04-21T07:24:49Z", "author": {"login": "sameerajayasoma"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java", "diffHunk": "@@ -1155,5 +1155,132 @@ public static NilLiteralNode createNilLiteralNode(\n                 closeParenToken.internalNode());\n         return stNilLiteralNode.createUnlinkedFacade();\n     }\n+\n+    public static AnnotationDeclarationNode createAnnotationDeclarationNode(\n+            MetadataNode metadata,\n+            Token visibilityQualifier,\n+            Token constKeyword,\n+            Token annotationKeyword,\n+            Node typeDescriptor,\n+            Token annotationTag,\n+            Token onKeyword,\n+            SeparatedNodeList<Node> attachPoints,\n+            Token semicolonToken) {\n+        Objects.requireNonNull(metadata, \"metadata must not be null\");\n+        Objects.requireNonNull(visibilityQualifier, \"visibilityQualifier must not be null\");\n+        Objects.requireNonNull(constKeyword, \"constKeyword must not be null\");\n+        Objects.requireNonNull(annotationKeyword, \"annotationKeyword must not be null\");\n+        Objects.requireNonNull(typeDescriptor, \"typeDescriptor must not be null\");\n+        Objects.requireNonNull(annotationTag, \"annotationTag must not be null\");\n+        Objects.requireNonNull(onKeyword, \"onKeyword must not be null\");\n+        Objects.requireNonNull(attachPoints, \"attachPoints must not be null\");\n+        Objects.requireNonNull(semicolonToken, \"semicolonToken must not be null\");\n+\n+        STNode stAnnotationDeclarationNode = STNodeFactory.createAnnotationDeclarationNode(\n+                metadata.internalNode(),\n+                visibilityQualifier.internalNode(),\n+                constKeyword.internalNode(),\n+                annotationKeyword.internalNode(),\n+                typeDescriptor.internalNode(),\n+                annotationTag.internalNode(),\n+                onKeyword.internalNode(),\n+                attachPoints.underlyingListNode().internalNode(),\n+                semicolonToken.internalNode());\n+        return stAnnotationDeclarationNode.createUnlinkedFacade();\n+    }\n+\n+    public static AnnotationAttachPointNode createAnnotationAttachPointNode(\n+            Token sourceKeyword,\n+            Token firstIdent,\n+            Token secondIdent) {\n+        Objects.requireNonNull(sourceKeyword, \"sourceKeyword must not be null\");\n+        Objects.requireNonNull(firstIdent, \"firstIdent must not be null\");\n+        Objects.requireNonNull(secondIdent, \"secondIdent must not be null\");\n+\n+        STNode stAnnotationAttachPointNode = STNodeFactory.createAnnotationAttachPointNode(\n+                sourceKeyword.internalNode(),\n+                firstIdent.internalNode(),\n+                secondIdent.internalNode());\n+        return stAnnotationAttachPointNode.createUnlinkedFacade();\n+    }\n+\n+    public static XMLNamespaceDeclarationNode createXMLNamespaceDeclarationNode(\n+            Token xmlnsKeyword,\n+            ExpressionNode namespaceuri,\n+            Token asKeyword,\n+            IdentifierToken namespacePrefix,\n+            Token semicolonToken) {\n+        Objects.requireNonNull(xmlnsKeyword, \"xmlnsKeyword must not be null\");\n+        Objects.requireNonNull(namespaceuri, \"namespaceuri must not be null\");\n+        Objects.requireNonNull(asKeyword, \"asKeyword must not be null\");\n+        Objects.requireNonNull(namespacePrefix, \"namespacePrefix must not be null\");\n+        Objects.requireNonNull(semicolonToken, \"semicolonToken must not be null\");\n+\n+        STNode stXMLNamespaceDeclarationNode = STNodeFactory.createXMLNamespaceDeclarationNode(\n+                xmlnsKeyword.internalNode(),\n+                namespaceuri.internalNode(),\n+                asKeyword.internalNode(),\n+                namespacePrefix.internalNode(),\n+                semicolonToken.internalNode());\n+        return stXMLNamespaceDeclarationNode.createUnlinkedFacade();\n+    }\n+\n+    public static FunctionBodyBlockNode createFunctionBodyBlockNode(\n+            Token openBraceToken,\n+            NamedWorkerDeclarator namedWorkerDeclarator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f39fc9c3abf819b37d38fc24356dec8b60c34a2"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk0MzY0MQ==", "bodyText": "yes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22805#discussion_r411943641", "createdAt": "2020-04-21T07:34:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java", "diffHunk": "@@ -1155,5 +1155,132 @@ public static NilLiteralNode createNilLiteralNode(\n                 closeParenToken.internalNode());\n         return stNilLiteralNode.createUnlinkedFacade();\n     }\n+\n+    public static AnnotationDeclarationNode createAnnotationDeclarationNode(\n+            MetadataNode metadata,\n+            Token visibilityQualifier,\n+            Token constKeyword,\n+            Token annotationKeyword,\n+            Node typeDescriptor,\n+            Token annotationTag,\n+            Token onKeyword,\n+            SeparatedNodeList<Node> attachPoints,\n+            Token semicolonToken) {\n+        Objects.requireNonNull(metadata, \"metadata must not be null\");\n+        Objects.requireNonNull(visibilityQualifier, \"visibilityQualifier must not be null\");\n+        Objects.requireNonNull(constKeyword, \"constKeyword must not be null\");\n+        Objects.requireNonNull(annotationKeyword, \"annotationKeyword must not be null\");\n+        Objects.requireNonNull(typeDescriptor, \"typeDescriptor must not be null\");\n+        Objects.requireNonNull(annotationTag, \"annotationTag must not be null\");\n+        Objects.requireNonNull(onKeyword, \"onKeyword must not be null\");\n+        Objects.requireNonNull(attachPoints, \"attachPoints must not be null\");\n+        Objects.requireNonNull(semicolonToken, \"semicolonToken must not be null\");\n+\n+        STNode stAnnotationDeclarationNode = STNodeFactory.createAnnotationDeclarationNode(\n+                metadata.internalNode(),\n+                visibilityQualifier.internalNode(),\n+                constKeyword.internalNode(),\n+                annotationKeyword.internalNode(),\n+                typeDescriptor.internalNode(),\n+                annotationTag.internalNode(),\n+                onKeyword.internalNode(),\n+                attachPoints.underlyingListNode().internalNode(),\n+                semicolonToken.internalNode());\n+        return stAnnotationDeclarationNode.createUnlinkedFacade();\n+    }\n+\n+    public static AnnotationAttachPointNode createAnnotationAttachPointNode(\n+            Token sourceKeyword,\n+            Token firstIdent,\n+            Token secondIdent) {\n+        Objects.requireNonNull(sourceKeyword, \"sourceKeyword must not be null\");\n+        Objects.requireNonNull(firstIdent, \"firstIdent must not be null\");\n+        Objects.requireNonNull(secondIdent, \"secondIdent must not be null\");\n+\n+        STNode stAnnotationAttachPointNode = STNodeFactory.createAnnotationAttachPointNode(\n+                sourceKeyword.internalNode(),\n+                firstIdent.internalNode(),\n+                secondIdent.internalNode());\n+        return stAnnotationAttachPointNode.createUnlinkedFacade();\n+    }\n+\n+    public static XMLNamespaceDeclarationNode createXMLNamespaceDeclarationNode(\n+            Token xmlnsKeyword,\n+            ExpressionNode namespaceuri,\n+            Token asKeyword,\n+            IdentifierToken namespacePrefix,\n+            Token semicolonToken) {\n+        Objects.requireNonNull(xmlnsKeyword, \"xmlnsKeyword must not be null\");\n+        Objects.requireNonNull(namespaceuri, \"namespaceuri must not be null\");\n+        Objects.requireNonNull(asKeyword, \"asKeyword must not be null\");\n+        Objects.requireNonNull(namespacePrefix, \"namespacePrefix must not be null\");\n+        Objects.requireNonNull(semicolonToken, \"semicolonToken must not be null\");\n+\n+        STNode stXMLNamespaceDeclarationNode = STNodeFactory.createXMLNamespaceDeclarationNode(\n+                xmlnsKeyword.internalNode(),\n+                namespaceuri.internalNode(),\n+                asKeyword.internalNode(),\n+                namespacePrefix.internalNode(),\n+                semicolonToken.internalNode());\n+        return stXMLNamespaceDeclarationNode.createUnlinkedFacade();\n+    }\n+\n+    public static FunctionBodyBlockNode createFunctionBodyBlockNode(\n+            Token openBraceToken,\n+            NamedWorkerDeclarator namedWorkerDeclarator,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzNzQ1MQ=="}, "originalCommit": {"oid": "1f39fc9c3abf819b37d38fc24356dec8b60c34a2"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3888, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}