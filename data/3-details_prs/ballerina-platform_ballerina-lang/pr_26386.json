{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NzU4NTA4", "number": 26386, "title": "Fix path parameter URL in OpenAPI client generation", "bodyText": "Purpose\n\nEnable the value assigned to the path parameters in client generation code\n\nFixes #26149\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-10-16T10:53:28Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386", "merged": true, "mergeCommit": {"oid": "0541131e2975570434d769ab42d4ef363627fab4"}, "closed": true, "closedAt": "2020-10-19T04:18:54Z", "author": {"login": "lnash94"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTD1KpgH2gAyNTA0NzU4NTA4OjMxOGYxNjcwNDEwODQ4ZGQ1OTIzNmJiYjMzNmI0MDVjNGQxODMxZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdT8UxFgFqTUxMTQwMTY4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/318f1670410848dd59236bbb336b405c4d1831df", "committedDate": "2020-10-16T10:29:35Z", "message": "Fix client generation path parameters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzY3NDIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-510367422", "createdAt": "2020-10-16T11:01:42Z", "commit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMTo0M1rOHi12yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMTo0M1rOHi12yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NjAxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null != path.getParameters() && path.getParameters().size() > 0) {\n          \n          \n            \n                    if (path.getParameters() != null && path.getParameters().size() > 0) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506296011", "createdAt": "2020-10-16T11:01:43Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzY3ODY0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-510367864", "createdAt": "2020-10-16T11:02:27Z", "commit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMjoyN1rOHi146A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMjoyN1rOHi146A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NjU1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n          \n          \n            \n                                .anyMatch(parameter -> parameter.getIn() != null) && parameter.getIn().equals(\"path\"));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506296552", "createdAt": "2020-10-16T11:02:27Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzY4MjA3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-510368207", "createdAt": "2020-10-16T11:02:57Z", "commit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMjo1N1rOHi16gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMjo1N1rOHi16gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5Njk2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (null != operation.getParameters() && operation.getParameters().size() > 0) {\n          \n          \n            \n                            if (operation.getParameters() != null && operation.getParameters().size() > 0) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506296963", "createdAt": "2020-10-16T11:02:57Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (null != operation.getParameters() && operation.getParameters().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzY4NDg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-510368489", "createdAt": "2020-10-16T11:03:24Z", "commit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMzoyNVrOHi177w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowMzoyNVrOHi177w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NzMyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n          \n          \n            \n                                        .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506297327", "createdAt": "2020-10-16T11:03:25Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (null != operation.getParameters() && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream()\n+                            .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318f1670410848dd59236bbb336b405c4d1831df"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/054e9791b0ffd39a4c7f13fef74ddbf195d9ea70", "committedDate": "2020-10-16T11:10:52Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzg4NDQ5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-510388449", "createdAt": "2020-10-16T11:36:12Z", "commit": {"oid": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTozNjoxMlrOHi3iRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTozNjoxMlrOHi3iRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyMzUyNw==", "bodyText": "Shall we assign the string \"path\"  to private static final variable and use it here instead of hard coding the value directly?\nprivate static final String PATH = \"path\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506323527", "createdAt": "2020-10-16T11:36:12Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzg4OTAy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-510388902", "createdAt": "2020-10-16T11:37:02Z", "commit": {"oid": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTozNzowMlrOHi3k9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTozNzowMlrOHi3k9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyNDIxNQ==", "bodyText": "Do the same change here as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506324215", "createdAt": "2020-10-16T11:37:02Z", "author": {"login": "praveennadarajah"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream()\n+                            .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9", "committedDate": "2020-10-16T12:08:18Z", "message": "Add path value as constant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDEyMzE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-510412319", "createdAt": "2020-10-16T12:14:34Z", "commit": {"oid": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDIwMzQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-510420341", "createdAt": "2020-10-16T12:26:36Z", "commit": {"oid": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoyNjozNlrOHi54kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoyNzo1M1rOHi58ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MjAwMQ==", "bodyText": "IMO better to do an early return in here. WDYT?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (path.readOperations().size() > 0) {\n          \n          \n            \n                        return path.readOperations().stream().anyMatch(operation -> {\n          \n          \n            \n                            if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n          \n          \n            \n                                return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n          \n          \n            \n                                        parameter.getIn().equals(GeneratorConstants.PATH));\n          \n          \n            \n                            }\n          \n          \n            \n                            return false;\n          \n          \n            \n                        });\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    if (path.readOperations().isEmpty()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return path.readOperations().stream().anyMatch(operation -> {\n          \n          \n            \n                        if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n          \n          \n            \n                            return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n          \n          \n            \n                                    parameter.getIn().equals(GeneratorConstants.PATH));\n          \n          \n            \n                        }\n          \n          \n            \n                        return false;\n          \n          \n            \n                    });\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506362001", "createdAt": "2020-10-16T12:26:36Z", "author": {"login": "NipunaRanasinghe"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +128,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null && parameter.getIn()\n+                    .equals(GeneratorConstants.PATH));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n+                            parameter.getIn().equals(GeneratorConstants.PATH));\n+                }\n+                return false;\n+            });\n         }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MzAzOA==", "bodyText": "Also, don't we need to validate whether path.readOperations() is null ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506363038", "createdAt": "2020-10-16T12:27:53Z", "author": {"login": "NipunaRanasinghe"}, "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +128,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null && parameter.getIn()\n+                    .equals(GeneratorConstants.PATH));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n+                            parameter.getIn().equals(GeneratorConstants.PATH));\n+                }\n+                return false;\n+            });\n         }\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MjAwMQ=="}, "originalCommit": {"oid": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e08ee8dcad4e1f29a3b473db9cd14b0a948b3d6", "author": {"user": {"login": "lnash94", "name": "Sumudu Nissanka"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e08ee8dcad4e1f29a3b473db9cd14b0a948b3d6", "committedDate": "2020-10-16T14:42:41Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMzk5ODk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-511399896", "createdAt": "2020-10-19T04:11:02Z", "commit": {"oid": "1e08ee8dcad4e1f29a3b473db9cd14b0a948b3d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDAxNjg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#pullrequestreview-511401685", "createdAt": "2020-10-19T04:18:47Z", "commit": {"oid": "1e08ee8dcad4e1f29a3b473db9cd14b0a948b3d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4399, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}