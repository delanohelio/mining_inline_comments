{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2OTI2MjA3", "number": 22396, "title": "Avoid creating new types each time in StdLib extern implementations", "bodyText": "Purpose\n\n$Subject and some API docs improvements\n\nFixes #21063\nFixes #22041", "createdAt": "2020-04-01T11:11:00Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396", "merged": true, "mergeCommit": {"oid": "7de5312910018e8dde1c2185a9515cb822e8e329"}, "closed": true, "closedAt": "2020-04-02T02:58:33Z", "author": {"login": "chamil321"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRqtU7gH2gAyMzk2OTI2MjA3OjIxZmQyMGI1OGNlMTZkMmUyZDkwODg4MjliOTA2OTk3ZDA3ZWEzMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTeAapgH2gAyMzk2OTI2MjA3OjQ0NjRmNTRkZWI2ZTJkMzM2ZjllZTc3YzdhYTFmNzAwMzEwZTFkY2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "21fd20b58ce16d2e2d9088829b906997d07ea305", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21fd20b58ce16d2e2d9088829b906997d07ea305", "committedDate": "2020-03-27T06:28:19Z", "message": "Fix HTTP module types creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0079bcf08063c93f0141ebe780837d80785642c8", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0079bcf08063c93f0141ebe780837d80785642c8", "committedDate": "2020-03-30T15:29:05Z", "message": "Fix sql module types creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8af5ebe40361308745486b7d5e246d913f9e985", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8af5ebe40361308745486b7d5e246d913f9e985", "committedDate": "2020-04-01T09:26:46Z", "message": "Fix stdlib module types creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8bd249e685015ec548858ee3d4415204cf43a850", "committedDate": "2020-04-01T11:02:38Z", "message": "Fix API docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTI3NTU4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#pullrequestreview-385527558", "createdAt": "2020-04-01T12:18:05Z", "commit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "state": "COMMENTED", "comments": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxODowNVrOF-952Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyNTo0MVrOF--Kmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MDI2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + extraPathInfo - The part of the url which matched to '*', if the request is dispatched to a wildcard resource\n          \n          \n            \n            # + extraPathInfo - The part of the URL, which matched to '*' if the request is dispatched to a wildcard resource", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401570265", "createdAt": "2020-04-01T12:18:05Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_request.bal", "diffHunk": "@@ -26,7 +26,7 @@ import ballerina/time;\n # + method - The HTTP request method\n # + httpVersion - The HTTP version supported by the client\n # + userAgent - The user-agent. This value is used when setting the `user-agent` header\n-# + extraPathInfo - Additional information associated with the URL provided by the client\n+# + extraPathInfo - The part of the url which matched to '*', if the request is dispatched to a wildcard resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MDYxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401570618", "createdAt": "2020-04-01T12:18:45Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -87,8 +87,9 @@ public type Response object {\n     # these values is returned.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n-    # + return - The first header value for the specified header name. An exception is thrown if no header is found. Use\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MDcyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Response` must be accessed initially.\n          \n          \n            \n                #              entity-body of the `Response` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401570728", "createdAt": "2020-04-01T12:18:56Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -87,8 +87,9 @@ public type Response object {\n     # these values is returned.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n-    # + return - The first header value for the specified header name. An exception is thrown if no header is found. Use\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MDkwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401570902", "createdAt": "2020-04-01T12:19:13Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -100,7 +101,8 @@ public type Response object {\n     #\n     # + headerName - The header name\n     # + headerValue - The header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTAwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Response` must be accessed initially.\n          \n          \n            \n                #              entity-body of the `Response` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571007", "createdAt": "2020-04-01T12:19:24Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -100,7 +101,8 @@ public type Response object {\n     #\n     # + headerName - The header name\n     # + headerValue - The header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTEzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571135", "createdAt": "2020-04-01T12:19:38Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -109,8 +111,9 @@ public type Response object {\n     # Gets all the header values to which the specified header key maps to.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n-    # + return - The header values the specified header key maps to. An exception is thrown if no header is found. Use\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTIxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Response` must be accessed initially.\n          \n          \n            \n                #              entity-body of the `Response` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571218", "createdAt": "2020-04-01T12:19:45Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -109,8 +111,9 @@ public type Response object {\n     # Gets all the header values to which the specified header key maps to.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n-    # + return - The header values the specified header key maps to. An exception is thrown if no header is found. Use\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTMzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571336", "createdAt": "2020-04-01T12:20:01Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -123,7 +126,8 @@ public type Response object {\n     #\n     # + headerName - The header name\n     # + headerValue - The header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTQwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Response` must be accessed initially.\n          \n          \n            \n                #              entity-body of the `Response` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571408", "createdAt": "2020-04-01T12:20:09Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -123,7 +126,8 @@ public type Response object {\n     #\n     # + headerName - The header name\n     # + headerValue - The header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTUwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571508", "createdAt": "2020-04-01T12:20:21Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -137,23 +141,26 @@ public type Response object {\n     # Removes the specified header from the response.\n     #\n     # + key - The header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTYwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Response` must be accessed initially.\n          \n          \n            \n                #              entity-body of the `Response` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571600", "createdAt": "2020-04-01T12:20:29Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -137,23 +141,26 @@ public type Response object {\n     # Removes the specified header from the response.\n     #\n     # + key - The header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTcxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571716", "createdAt": "2020-04-01T12:20:42Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -137,23 +141,26 @@ public type Response object {\n     # Removes the specified header from the response.\n     #\n     # + key - The header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.\n     public function removeHeader(string key, public mime:HeaderPosition position = mime:LEADING) {\n         mime:Entity entity = self.getEntityWithoutBody();\n         entity.removeHeader(key, position);\n     }\n \n     # Removes all the headers from the response.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTgyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Response` must be accessed initially.\n          \n          \n            \n                #              entity-body of the `Response` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571823", "createdAt": "2020-04-01T12:20:51Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -137,23 +141,26 @@ public type Response object {\n     # Removes the specified header from the response.\n     #\n     # + key - The header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.\n     public function removeHeader(string key, public mime:HeaderPosition position = mime:LEADING) {\n         mime:Entity entity = self.getEntityWithoutBody();\n         entity.removeHeader(key, position);\n     }\n \n     # Removes all the headers from the response.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MTkyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401571926", "createdAt": "2020-04-01T12:21:04Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -137,23 +141,26 @@ public type Response object {\n     # Removes the specified header from the response.\n     #\n     # + key - The header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.\n     public function removeHeader(string key, public mime:HeaderPosition position = mime:LEADING) {\n         mime:Entity entity = self.getEntityWithoutBody();\n         entity.removeHeader(key, position);\n     }\n \n     # Removes all the headers from the response.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.\n     public function removeAllHeaders(public mime:HeaderPosition position = mime:LEADING) {\n         mime:Entity entity = self.getEntityWithoutBody();\n         entity.removeAllHeaders(position);\n     }\n \n     # Gets all the names of the headers of the response.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MjAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Response` must be accessed initially.\n          \n          \n            \n                #              entity-body of the `Response` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401572008", "createdAt": "2020-04-01T12:21:13Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -137,23 +141,26 @@ public type Response object {\n     # Removes the specified header from the response.\n     #\n     # + key - The header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.\n     public function removeHeader(string key, public mime:HeaderPosition position = mime:LEADING) {\n         mime:Entity entity = self.getEntityWithoutBody();\n         entity.removeHeader(key, position);\n     }\n \n     # Removes all the headers from the response.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.\n     public function removeAllHeaders(public mime:HeaderPosition position = mime:LEADING) {\n         mime:Entity entity = self.getEntityWithoutBody();\n         entity.removeAllHeaders(position);\n     }\n \n     # Gets all the names of the headers of the response.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MjE5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401572197", "createdAt": "2020-04-01T12:21:29Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -380,10 +380,11 @@ public type Entity object {\n     # Gets the header value associated with the given header name.\n     #\n     # + headerName - Represents header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MjMxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Entity` must be accessed initially.\n          \n          \n            \n                #              body of the `Entity` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401572317", "createdAt": "2020-04-01T12:21:40Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -380,10 +380,11 @@ public type Entity object {\n     # Gets the header value associated with the given header name.\n     #\n     # + headerName - Represents header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MjY5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401572693", "createdAt": "2020-04-01T12:22:18Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -392,9 +393,10 @@ public type Entity object {\n     # Gets all the header values associated with the given header name.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n-    # + return - All the header values associated with the given header name as a `string[]`. An exception is thrown\n-    #            if no header is found. Use `Entity.hasHeader()` beforehand to check the existence of header.\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3Mjc5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Entity` must be accessed initially.\n          \n          \n            \n                #             body of the `Entity` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401572790", "createdAt": "2020-04-01T12:22:30Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -392,9 +393,10 @@ public type Entity object {\n     # Gets all the header values associated with the given header name.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n-    # + return - All the header values associated with the given header name as a `string[]`. An exception is thrown\n-    #            if no header is found. Use `Entity.hasHeader()` beforehand to check the existence of header.\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3Mjk2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            found. Use `Entity.hasHeader()` beforehand to check the existence of header.\n          \n          \n            \n                #            found. Use the `Entity.hasHeader()` beforehand to check the existence of a header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401572969", "createdAt": "2020-04-01T12:22:50Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -392,9 +393,10 @@ public type Entity object {\n     # Gets all the header values associated with the given header name.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n-    # + return - All the header values associated with the given header name as a `string[]`. An exception is thrown\n-    #            if no header is found. Use `Entity.hasHeader()` beforehand to check the existence of header.\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n+    # + return - All the header values associated with the given header name as a `string[]`. Panic if no header is\n+    #            found. Use `Entity.hasHeader()` beforehand to check the existence of header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MzI1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            `Request.hasHeader()` beforehand to check the existence of header.\n          \n          \n            \n                #            the `Request.hasHeader()` beforehand to check the existence of a header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401573258", "createdAt": "2020-04-01T12:23:22Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_request.bal", "diffHunk": "@@ -125,7 +125,7 @@ public type Request object {\n     # these values is returned.\n     #\n     # + headerName - The header name\n-    # + return - The first header value for the specified header name. An exception is thrown if no header is found. Use\n+    # + return - The first header value for the specified header name. Panic if the header is not found. Use\n     #            `Request.hasHeader()` beforehand to check the existence of header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MzgxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            beforehand to check the existence of header.\n          \n          \n            \n                #            beforehand to check the existence of a header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401573814", "createdAt": "2020-04-01T12:24:22Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -380,10 +380,11 @@ public type Entity object {\n     # Gets the header value associated with the given header name.\n     #\n     # + headerName - Represents header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     # + return - Header value associated with the given header name as a `string`. If multiple header values are\n-    #            present, then the first value is returned. An exception is thrown if no header is found. Use\n-    #            `Entity.hasHeader()` beforehand to check the existence of header.\n+    #            present, then the first value is returned. Panic if no header is found. Use `Entity.hasHeader()`\n+    #            beforehand to check the existence of header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDA1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401574051", "createdAt": "2020-04-01T12:24:47Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -409,7 +411,8 @@ public type Entity object {\n \n     # Gets all header names.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDEzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Entity` must be accessed initially.\n          \n          \n            \n                #              body of the `Entity` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401574138", "createdAt": "2020-04-01T12:24:56Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -409,7 +411,8 @@ public type Entity object {\n \n     # Gets all header names.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDIzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401574236", "createdAt": "2020-04-01T12:25:08Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -426,7 +429,8 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value to be added\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDM0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Entity` must be accessed initially.\n          \n          \n            \n                #              body of the `Entity` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401574344", "createdAt": "2020-04-01T12:25:18Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -426,7 +429,8 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value to be added\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDQ0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401574445", "createdAt": "2020-04-01T12:25:29Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -436,30 +440,34 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDU1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Entity` must be accessed initially.\n          \n          \n            \n                #              body of the `Entity` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401574555", "createdAt": "2020-04-01T12:25:41Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -436,30 +440,34 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTM0OTEy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#pullrequestreview-385534912", "createdAt": "2020-04-01T12:28:24Z", "commit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyODoyNFrOF--Qow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMTo0MVrOF--Xuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjA5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576099", "createdAt": "2020-04-01T12:28:24Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -436,30 +440,34 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function setHeader(@untainted string headerName, string headerValue, public HeaderPosition position = LEADING) {\n         return externSetHeader(self, java:fromString(headerName), java:fromString(headerValue), position);\n     }\n \n     # Removes the given header from the entity.\n     #\n     # + headerName - Represents the header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjE5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Entity` must be accessed initially.\n          \n          \n            \n                #              body of the `Entity` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576197", "createdAt": "2020-04-01T12:28:35Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -436,30 +440,34 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function setHeader(@untainted string headerName, string headerValue, public HeaderPosition position = LEADING) {\n         return externSetHeader(self, java:fromString(headerName), java:fromString(headerValue), position);\n     }\n \n     # Removes the given header from the entity.\n     #\n     # + headerName - Represents the header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjI2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576266", "createdAt": "2020-04-01T12:28:42Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -436,30 +440,34 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function setHeader(@untainted string headerName, string headerValue, public HeaderPosition position = LEADING) {\n         return externSetHeader(self, java:fromString(headerName), java:fromString(headerValue), position);\n     }\n \n     # Removes the given header from the entity.\n     #\n     # + headerName - Represents the header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function removeHeader(@untainted string headerName, public HeaderPosition position = LEADING) {\n         return externRemoveHeader(self, java:fromString(headerName), position);\n     }\n \n     # Removes all headers associated with the entity.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjM2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Entity` must be accessed initially.\n          \n          \n            \n                #              body of the `Entity` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576369", "createdAt": "2020-04-01T12:28:52Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -436,30 +440,34 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function setHeader(@untainted string headerName, string headerValue, public HeaderPosition position = LEADING) {\n         return externSetHeader(self, java:fromString(headerName), java:fromString(headerValue), position);\n     }\n \n     # Removes the given header from the entity.\n     #\n     # + headerName - Represents the header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function removeHeader(@untainted string headerName, public HeaderPosition position = LEADING) {\n         return externRemoveHeader(self, java:fromString(headerName), position);\n     }\n \n     # Removes all headers associated with the entity.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjQ2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n          \n          \n            \n                # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING`, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576460", "createdAt": "2020-04-01T12:29:01Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -436,30 +440,34 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function setHeader(@untainted string headerName, string headerValue, public HeaderPosition position = LEADING) {\n         return externSetHeader(self, java:fromString(headerName), java:fromString(headerValue), position);\n     }\n \n     # Removes the given header from the entity.\n     #\n     # + headerName - Represents the header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function removeHeader(@untainted string headerName, public HeaderPosition position = LEADING) {\n         return externRemoveHeader(self, java:fromString(headerName), position);\n     }\n \n     # Removes all headers associated with the entity.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function removeAllHeaders(public HeaderPosition position = LEADING) {\n         return externRemoveAllHeaders(self, position);\n     }\n \n     # Checks whether the requested header key exists in the header map.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjU0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #              Entity-body of the `Entity` must be accessed initially.\n          \n          \n            \n                #              body of the `Entity` must be accessed initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576549", "createdAt": "2020-04-01T12:29:10Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -436,30 +440,34 @@ public type Entity object {\n     #\n     # + headerName - The header name\n     # + headerValue - Represents the header value\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function setHeader(@untainted string headerName, string headerValue, public HeaderPosition position = LEADING) {\n         return externSetHeader(self, java:fromString(headerName), java:fromString(headerValue), position);\n     }\n \n     # Removes the given header from the entity.\n     #\n     # + headerName - Represents the header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function removeHeader(@untainted string headerName, public HeaderPosition position = LEADING) {\n         return externRemoveHeader(self, java:fromString(headerName), position);\n     }\n \n     # Removes all headers associated with the entity.\n     #\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     public function removeAllHeaders(public HeaderPosition position = LEADING) {\n         return externRemoveAllHeaders(self, position);\n     }\n \n     # Checks whether the requested header key exists in the header map.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjY2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The first header value for the specified header name. Panic if no header is found. Ideally\n          \n          \n            \n                # + return - The first header value for the specified header name. Panic if no header is found. Ideally,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576669", "createdAt": "2020-04-01T12:29:21Z", "author": {"login": "praneesha"}, "path": "stdlib/websub/src/main/ballerina/src/websub/commons.bal", "diffHunk": "@@ -280,17 +280,17 @@ public type Notification object {\n     # these values is returned.\n     #\n     # + headerName - The header name\n-    # + return - The first header value for the specified header name. An exception is thrown if no header is found.\n-    #            Ideally `Notification.hasHeader()` needs to be used to check the existence of header initially.\n+    # + return - The first header value for the specified header name. Panic if no header is found. Ideally", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3Njc3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            `Notification.hasHeader()` needs to be used to check the existence of header initially.\n          \n          \n            \n                #           the `Notification.hasHeader()` needs to be used to check the existence of a header initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576773", "createdAt": "2020-04-01T12:29:33Z", "author": {"login": "praneesha"}, "path": "stdlib/websub/src/main/ballerina/src/websub/commons.bal", "diffHunk": "@@ -280,17 +280,17 @@ public type Notification object {\n     # these values is returned.\n     #\n     # + headerName - The header name\n-    # + return - The first header value for the specified header name. An exception is thrown if no header is found.\n-    #            Ideally `Notification.hasHeader()` needs to be used to check the existence of header initially.\n+    # + return - The first header value for the specified header name. Panic if no header is found. Ideally\n+    #            `Notification.hasHeader()` needs to be used to check the existence of header initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3Njg1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The header values the specified header key maps to. Panic if no header is found. Ideally\n          \n          \n            \n                # + return - The header values the specified header key maps to. Panic if no header is found. Ideally,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576853", "createdAt": "2020-04-01T12:29:43Z", "author": {"login": "praneesha"}, "path": "stdlib/websub/src/main/ballerina/src/websub/commons.bal", "diffHunk": "@@ -280,17 +280,17 @@ public type Notification object {\n     # these values is returned.\n     #\n     # + headerName - The header name\n-    # + return - The first header value for the specified header name. An exception is thrown if no header is found.\n-    #            Ideally `Notification.hasHeader()` needs to be used to check the existence of header initially.\n+    # + return - The first header value for the specified header name. Panic if no header is found. Ideally\n+    #            `Notification.hasHeader()` needs to be used to check the existence of header initially.\n     public function getHeader(string headerName) returns @tainted string {\n         return self.request.getHeader(headerName);\n     }\n \n     # Retrieves all the header values to which the specified header key maps to.\n     #\n     # + headerName - The header name\n-    # + return - The header values the specified header key maps to. An exception is thrown if no header is found.\n-    #            Ideally `Notification.hasHeader()` needs to be used to check the existence of header initially.\n+    # + return - The header values the specified header key maps to. Panic if no header is found. Ideally", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3Njk0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            `Notification.hasHeader()` needs to be used to check the existence of header initially.\n          \n          \n            \n                #            the `Notification.hasHeader()` needs to be used to check the existence of a header initially.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401576940", "createdAt": "2020-04-01T12:29:53Z", "author": {"login": "praneesha"}, "path": "stdlib/websub/src/main/ballerina/src/websub/commons.bal", "diffHunk": "@@ -280,17 +280,17 @@ public type Notification object {\n     # these values is returned.\n     #\n     # + headerName - The header name\n-    # + return - The first header value for the specified header name. An exception is thrown if no header is found.\n-    #            Ideally `Notification.hasHeader()` needs to be used to check the existence of header initially.\n+    # + return - The first header value for the specified header name. Panic if no header is found. Ideally\n+    #            `Notification.hasHeader()` needs to be used to check the existence of header initially.\n     public function getHeader(string headerName) returns @tainted string {\n         return self.request.getHeader(headerName);\n     }\n \n     # Retrieves all the header values to which the specified header key maps to.\n     #\n     # + headerName - The header name\n-    # + return - The header values the specified header key maps to. An exception is thrown if no header is found.\n-    #            Ideally `Notification.hasHeader()` needs to be used to check the existence of header initially.\n+    # + return - The header values the specified header key maps to. Panic if no header is found. Ideally\n+    #            `Notification.hasHeader()` needs to be used to check the existence of header initially.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NzEyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            `Request.hasHeader()` beforehand to check the existence of header.\n          \n          \n            \n                #            the `Request.hasHeader()` beforehand to check the existence of a header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401577122", "createdAt": "2020-04-01T12:30:16Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_request.bal", "diffHunk": "@@ -135,7 +135,7 @@ public type Request object {\n     # Gets all the header values to which the specified header key maps to.\n     #\n     # + headerName - The header name\n-    # + return - The header values the specified header key maps to. An exception is thrown if no header is found. Use\n+    # + return - The header values the specified header key maps to. Panic if the header is not found. Use\n     #            `Request.hasHeader()` beforehand to check the existence of header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NzU0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            `Response.hasHeader()` beforehand to check the existence of header.\n          \n          \n            \n                #            the `Response.hasHeader()` beforehand to check the existence of a header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401577541", "createdAt": "2020-04-01T12:31:01Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -87,8 +87,9 @@ public type Response object {\n     # these values is returned.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n-    # + return - The first header value for the specified header name. An exception is thrown if no header is found. Use\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.\n+    # + return - The first header value for the specified header name. Panic if the header is not found. Use\n     #            `Response.hasHeader()` beforehand to check the existence of header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3Nzc1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            `Response.hasHeader()` beforehand to check the existence of header.\n          \n          \n            \n                #            the `Response.hasHeader()` beforehand to check the existence of a header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401577757", "createdAt": "2020-04-01T12:31:23Z", "author": {"login": "praneesha"}, "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -109,8 +111,9 @@ public type Response object {\n     # Gets all the header values to which the specified header key maps to.\n     #\n     # + headerName - The header name\n-    # + position - Represents the position of the header as an optional parameter\n-    # + return - The header values the specified header key maps to. An exception is thrown if no header is found. Use\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Response` must be accessed initially.\n+    # + return - The header values the specified header key maps to. Panic if the header is not found. Use\n     #            `Response.hasHeader()` beforehand to check the existence of header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NzkxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            present, then the first value is returned. Panic if no header is found. Use `Entity.hasHeader()`\n          \n          \n            \n                #            present, then the first value is returned. Panic if no header is found. Use the `Entity.hasHeader()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#discussion_r401577915", "createdAt": "2020-04-01T12:31:41Z", "author": {"login": "praneesha"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -380,10 +380,11 @@ public type Entity object {\n     # Gets the header value associated with the given header name.\n     #\n     # + headerName - Represents header name\n-    # + position - Represents the position of the header as an optional parameter\n+    # + position - Represents the position of the header as an optional parameter. If the position is `mime:TRAILING` the\n+    #              Entity-body of the `Entity` must be accessed initially.\n     # + return - Header value associated with the given header name as a `string`. If multiple header values are\n-    #            present, then the first value is returned. An exception is thrown if no header is found. Use\n-    #            `Entity.hasHeader()` beforehand to check the existence of header.\n+    #            present, then the first value is returned. Panic if no header is found. Use `Entity.hasHeader()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd249e685015ec548858ee3d4415204cf43a850"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7af8894486c81b5ed1f3b4f0f96d16bd3b1556d", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7af8894486c81b5ed1f3b4f0f96d16bd3b1556d", "committedDate": "2020-04-01T14:12:51Z", "message": "Merge branch 'ballerina-1.2.x' of https://github.com/ballerina-platform/ballerina-lang into type-fix\n\n# Conflicts:\n#\tstdlib/http/src/main/java/org/ballerinalang/net/http/websocket/client/WebSocketClientHandshakeListener.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2954e4abae64b960e12b857a3fc39cbfe0c53bb", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2954e4abae64b960e12b857a3fc39cbfe0c53bb", "committedDate": "2020-04-01T14:37:29Z", "message": "Fix lang server test failure"}, "afterCommit": {"oid": "f67200c80c87c6fefaecbccf12fe5ab91206d13e", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f67200c80c87c6fefaecbccf12fe5ab91206d13e", "committedDate": "2020-04-01T14:43:52Z", "message": "Fix lang server test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1476dfd97e678e9d98ee4cee0476dcd724f353a2", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1476dfd97e678e9d98ee4cee0476dcd724f353a2", "committedDate": "2020-04-01T14:55:22Z", "message": "Fix lang server test failure"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f67200c80c87c6fefaecbccf12fe5ab91206d13e", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f67200c80c87c6fefaecbccf12fe5ab91206d13e", "committedDate": "2020-04-01T14:43:52Z", "message": "Fix lang server test failure"}, "afterCommit": {"oid": "1476dfd97e678e9d98ee4cee0476dcd724f353a2", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1476dfd97e678e9d98ee4cee0476dcd724f353a2", "committedDate": "2020-04-01T14:55:22Z", "message": "Fix lang server test failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzQ3Nzcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22396#pullrequestreview-385747772", "createdAt": "2020-04-01T16:23:10Z", "commit": {"oid": "1476dfd97e678e9d98ee4cee0476dcd724f353a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4464f54deb6e2d336f9ee77c7aa1f700310e1dcb", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4464f54deb6e2d336f9ee77c7aa1f700310e1dcb", "committedDate": "2020-04-01T20:48:15Z", "message": "Merge branch 'ballerina-1.2.x' of https://github.com/ballerina-platform/ballerina-lang into type-fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4142, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}