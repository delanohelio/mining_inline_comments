{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2Njc1MTMx", "number": 23180, "title": "Add table type support to the new parser.", "bodyText": "Purpose\nAdd table type support to the new parser with recovery logic and test cases.\nFixes #23054\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-12T11:52:14Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180", "merged": true, "mergeCommit": {"oid": "3dc36b685400efce90c1a52cb6348bcb74a095d3"}, "closed": true, "closedAt": "2020-05-13T14:35:16Z", "author": {"login": "rdulmina"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgP_UqAH2gAyNDE2Njc1MTMxOjc4NzZiYTA2ZjYzM2E4NWZkZDJiZjJjM2Q2YTRlN2QwYzdjMTFkYjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg439gAFqTQxMDkyMjQ2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7876ba06f633a85fdd2bf2c3d6a4e7d0c7c11db7", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7876ba06f633a85fdd2bf2c3d6a4e7d0c7c11db7", "committedDate": "2020-05-11T13:49:24Z", "message": "Table type descriptor support."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f595f7d74e5f54dc941816de311f7b97f93c84b6", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f595f7d74e5f54dc941816de311f7b97f93c84b6", "committedDate": "2020-05-11T13:50:43Z", "message": "Undo unwanted file change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c6f43252a8b1fa220d51798fd08f67599ee19ef", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c6f43252a8b1fa220d51798fd08f67599ee19ef", "committedDate": "2020-05-11T17:58:12Z", "message": "Recovery logic for table type descriptor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31e2116077fa4869f66608811649a9269a1817c8", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31e2116077fa4869f66608811649a9269a1817c8", "committedDate": "2020-05-12T04:06:28Z", "message": "Changed the parsing logic of table type descriptor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1645c4937023954e5380256180b94f8d245f4ab8", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1645c4937023954e5380256180b94f8d245f4ab8", "committedDate": "2020-05-12T08:30:24Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into table-type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe35bfa7b8bfd556858dd50fcb4be9bf6af55f9f", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe35bfa7b8bfd556858dd50fcb4be9bf6af55f9f", "committedDate": "2020-05-12T08:30:52Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into table-type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72a548b7eb3cdcf19e6ed7c679248ca2ce7e1e12", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72a548b7eb3cdcf19e6ed7c679248ca2ce7e1e12", "committedDate": "2020-05-12T11:44:55Z", "message": "Test cases for table type desc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e3f312223917fd99072e30d592ec22e25607dda", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e3f312223917fd99072e30d592ec22e25607dda", "committedDate": "2020-05-12T11:48:48Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into table-type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aef50d0881855cb08bc79156f1df51a09632fdd5", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aef50d0881855cb08bc79156f1df51a09632fdd5", "committedDate": "2020-05-12T11:55:55Z", "message": "Add new lines to EOF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca", "committedDate": "2020-05-12T11:57:03Z", "message": "Undo unwanted file changed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMDExMzYw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#pullrequestreview-410011360", "createdAt": "2020-05-12T12:56:43Z", "commit": {"oid": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjo1Njo0NFrOGUFN9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzoxMTowMlrOGUF0Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMDE5Nw==", "bodyText": "I think we don't need a context for this one. parseTypeDescriptor  inside parseTypeParameter() does that.\nUnlike in L#8069, for this one TYPE_DESC_IN_ANGLE_BRACKETS is OK, since the table-type ends after this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#discussion_r423710197", "createdAt": "2020-05-12T12:56:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8047,7 +8052,105 @@ private STNode parseBacktickToken(ParserRuleContext ctx) {\n     }\n \n     /**\n-     * Parse function type descriptor.\n+     * Parse table type descriptor.\n+     * <p>\n+     * table-type-descriptor := table row-type-parameter [key-constraint]\n+     * row-type-parameter := type-parameter\n+     * key-constraint := key-specifier | key-type-constraint\n+     * key-specifier := key ( [ field-name (, field-name)* ] )\n+     * key-type-constraint := key type-parameter\n+     * </p>\n+     *\n+     * @return Parsed table type desc node\n+     */\n+    private STNode parseTableTypeDescriptor() {\n+        startContext(ParserRuleContext.TABLE_TYPE_DESCRIPTOR);\n+        STNode tableKeywordToken = parseTableKeyword();\n+        STNode typeParameterNode = parseTypeParameter();\n+        STNode keyConstraintNode;\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.KEY_KEYWORD) {\n+            STNode keyKeywordToken = parseKeyKeyword();\n+            keyConstraintNode = parseKeyConstraint(keyKeywordToken);\n+        } else {\n+            keyConstraintNode = STNodeFactory.createEmptyNode();\n+        }\n+\n+        endContext();\n+        return STNodeFactory.createTableTypeDescriptorNode(tableKeywordToken, typeParameterNode, keyConstraintNode);\n+    }\n+\n+    /** Parse key constraint.\n+     * <p> key-constraint := key-specifier | key-type-constraint</p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseKeyConstraint(STNode keyKeywordToken) {\n+        return parseKeyConstraint(peek().kind, keyKeywordToken);\n+    }\n+\n+    private STNode parseKeyConstraint(SyntaxKind nextTokenKind, STNode keyKeywordToken) {\n+        switch (nextTokenKind) {\n+            case OPEN_PAREN_TOKEN:\n+                return parseKeySpecifier(keyKeywordToken);\n+            case LT_TOKEN:\n+                return parseKeyTypeConstraint(keyKeywordToken);\n+            default:\n+                Solution solution = recover(peek(), ParserRuleContext.KEY_CONSTRAINTS_RHS, keyKeywordToken);\n+\n+                // If the parser recovered by inserting a token, then try to re-parse the same\n+                // rule with the inserted token. This is done to pick the correct branch\n+                // to continue the parsing.\n+                if (solution.action == Action.REMOVE) {\n+                    return solution.recoveredNode;\n+                }\n+                return parseKeyConstraint(solution.tokenKind, keyKeywordToken);\n+        }\n+    }\n+\n+    /**\n+     * Parse key specifier given parsed key keyword token.\n+     * <p>\n+     * <code>key-specifier := key ( [ field-name (, field-name)* ] )</code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseKeySpecifier(STNode keyKeywordToken) {\n+        startContext(ParserRuleContext.KEY_SPECIFIER);\n+        STNode openParenToken = parseOpenParenthesis();\n+        STNode fieldNamesNode = parseFieldNames();\n+        STNode closeParenToken = parseCloseParenthesis();\n+        endContext();\n+        return STNodeFactory.createKeySpecifierNode(keyKeywordToken, openParenToken, fieldNamesNode, closeParenToken);\n+    }\n+\n+    /**\n+     * Parse type parameter node.\n+     * <p>type-parameter := < type-descriptor > </p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTypeParameter() {\n+        STNode ltToken = parseLTToken();\n+        STNode typeNode = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_IN_ANGLE_BRACKETS);\n+        STNode gtToken = parseGTToken();\n+        return STNodeFactory.createTypeParameterNode(ltToken, typeNode, gtToken);\n+    }\n+\n+    /**\n+     * Parse key type constraint.\n+     * <p>key-type-constraint := key type-parameter</p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseKeyTypeConstraint(STNode keyKeywordToken) {\n+        startContext(ParserRuleContext.KEY_TYPE_CONSTRAINT_RHS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMTg2NA==", "bodyText": "We may have to give a different context to the parseTypeParameter method. Inside that method, by default, a TYPE_DESC_IN_ANGLE_BRACKETS is started. (Lemme call it FOO for now)\nThe problem with TYPE_DESC_IN_ANGLE_BRACKETS is, it assumes the immediate > is the end of the type desc. But for table, it is not the end.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#discussion_r423711864", "createdAt": "2020-05-12T12:59:08Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8047,7 +8052,105 @@ private STNode parseBacktickToken(ParserRuleContext ctx) {\n     }\n \n     /**\n-     * Parse function type descriptor.\n+     * Parse table type descriptor.\n+     * <p>\n+     * table-type-descriptor := table row-type-parameter [key-constraint]\n+     * row-type-parameter := type-parameter\n+     * key-constraint := key-specifier | key-type-constraint\n+     * key-specifier := key ( [ field-name (, field-name)* ] )\n+     * key-type-constraint := key type-parameter\n+     * </p>\n+     *\n+     * @return Parsed table type desc node\n+     */\n+    private STNode parseTableTypeDescriptor() {\n+        startContext(ParserRuleContext.TABLE_TYPE_DESCRIPTOR);\n+        STNode tableKeywordToken = parseTableKeyword();\n+        STNode typeParameterNode = parseTypeParameter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxODc2NQ==", "bodyText": "An alternative way is to give an alias to < as use it here. For example say row-type-param-start as the next context.\nThen inside the getNextRule() method, for the row-type-param-start, we can give the FOO (which i mentioned earlier) as the next-rule.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#discussion_r423718765", "createdAt": "2020-05-12T13:09:25Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1857,10 +1873,18 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n             case TABLE_CONSTRUCTOR:\n                 return ParserRuleContext.TABLE_KEYWORD;\n             case TABLE_KEYWORD:\n+                parentCtx = getParentContext();\n+                if (parentCtx == ParserRuleContext.TABLE_TYPE_DESCRIPTOR) {\n+                    return ParserRuleContext.LT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxOTk0Mg==", "bodyText": "Similar to LT, if we can give an alias to >, we can avoid the complication inside getNextRuleForGt", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#discussion_r423719942", "createdAt": "2020-05-12T13:11:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2206,6 +2221,8 @@ private ParserRuleContext getNextRuleForTypeDescriptor() {\n                 return ParserRuleContext.VARIABLE_NAME;\n             case ANNOTATION_DECL:\n                 return ParserRuleContext.IDENTIFIER;\n+            case KEY_TYPE_CONSTRAINT_RHS:\n+                return ParserRuleContext.GT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "699bb0c5d04ce7da8cb1a0d82a79d7e07b79dbca"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dfdf3cb3fc0c17ef3bd29a12391b4f9c613a37e", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7dfdf3cb3fc0c17ef3bd29a12391b4f9c613a37e", "committedDate": "2020-05-13T07:57:14Z", "message": "Changed recovery logic of table type desc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfbd6ded06b789d50e6ed0755ad82dba9db26cd0", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfbd6ded06b789d50e6ed0755ad82dba9db26cd0", "committedDate": "2020-05-13T08:08:27Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into table-type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5bd9ae4fce168f743cdce37792cdd13565fa35", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c5bd9ae4fce168f743cdce37792cdd13565fa35", "committedDate": "2020-05-13T10:44:02Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into table-type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8726eed7e159f2818ea66b584491504471d377bf", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8726eed7e159f2818ea66b584491504471d377bf", "committedDate": "2020-05-13T11:04:01Z", "message": "resolved conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8773e788e8362ab7c63dd8a4bf79de6ab8041fd5", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8773e788e8362ab7c63dd8a4bf79de6ab8041fd5", "committedDate": "2020-05-13T12:22:22Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into table-type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTIyNDY0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23180#pullrequestreview-410922464", "createdAt": "2020-05-13T13:27:28Z", "commit": {"oid": "8773e788e8362ab7c63dd8a4bf79de6ab8041fd5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3307, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}