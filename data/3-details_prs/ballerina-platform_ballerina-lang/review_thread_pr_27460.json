{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NzgyNDUw", "number": 27460, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMToxOTowM1rOFD8HvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjo0Mjo1NlrOFD9-fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Njc1MDY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMToxOTowM1rOID0dWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjowNTowNFrOID18nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg3NjEyMw==", "bodyText": "As discussed offline, let's check if we can use the expected type for the argument here to make use of the contextual information.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27460#discussion_r540876123", "createdAt": "2020-12-11T11:19:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5680,9 +5680,10 @@ private BVarSymbol checkParameterNameForDefaultArgument(BLangIdentifier argName,\n             }\n         }\n         if (incRecordParamAllowAdditionalFields != null) {\n-            LinkedHashMap<String, BField> fields = ((BRecordType) incRecordParamAllowAdditionalFields.type).fields;\n-            if (!fields.containsKey(argName.value) && types.isAssignable(expr.type,\n-                                            ((BRecordType) incRecordParamAllowAdditionalFields.type).restFieldType)) {\n+            BRecordType incRecordType = (BRecordType) incRecordParamAllowAdditionalFields.type;\n+            BType exprType = checkExpr(expr, env);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bcb904d148388e989eda93e7c855e93b5ef18fc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkwMDUwOA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27460#discussion_r540900508", "createdAt": "2020-12-11T12:05:04Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5680,9 +5680,10 @@ private BVarSymbol checkParameterNameForDefaultArgument(BLangIdentifier argName,\n             }\n         }\n         if (incRecordParamAllowAdditionalFields != null) {\n-            LinkedHashMap<String, BField> fields = ((BRecordType) incRecordParamAllowAdditionalFields.type).fields;\n-            if (!fields.containsKey(argName.value) && types.isAssignable(expr.type,\n-                                            ((BRecordType) incRecordParamAllowAdditionalFields.type).restFieldType)) {\n+            BRecordType incRecordType = (BRecordType) incRecordParamAllowAdditionalFields.type;\n+            BType exprType = checkExpr(expr, env);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg3NjEyMw=="}, "originalCommit": {"oid": "7bcb904d148388e989eda93e7c855e93b5ef18fc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzA1MDU3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjo0MTo1NVrOID3IOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjo1NzowMlrOID3owQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxOTg2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LinkedHashMap<String, BField> fields = incRecordType.fields;\n          \n          \n            \n                        if (!fields.containsKey(argName.value)) {\n          \n          \n            \n                        if (!incRecordType.fields.containsKey(argName.value)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27460#discussion_r540919864", "createdAt": "2020-12-11T12:41:55Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5680,9 +5680,10 @@ private BVarSymbol checkParameterNameForDefaultArgument(BLangIdentifier argName,\n             }\n         }\n         if (incRecordParamAllowAdditionalFields != null) {\n-            LinkedHashMap<String, BField> fields = ((BRecordType) incRecordParamAllowAdditionalFields.type).fields;\n-            if (!fields.containsKey(argName.value) && types.isAssignable(expr.type,\n-                                            ((BRecordType) incRecordParamAllowAdditionalFields.type).restFieldType)) {\n+            BRecordType incRecordType = (BRecordType) incRecordParamAllowAdditionalFields.type;\n+            checkExpr(expr, env, incRecordType.restFieldType);\n+            LinkedHashMap<String, BField> fields = incRecordType.fields;\n+            if (!fields.containsKey(argName.value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2096269b1ae220f11edeb96dcfab15b0b410be11"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkyODE5Mw==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27460#discussion_r540928193", "createdAt": "2020-12-11T12:57:02Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5680,9 +5680,10 @@ private BVarSymbol checkParameterNameForDefaultArgument(BLangIdentifier argName,\n             }\n         }\n         if (incRecordParamAllowAdditionalFields != null) {\n-            LinkedHashMap<String, BField> fields = ((BRecordType) incRecordParamAllowAdditionalFields.type).fields;\n-            if (!fields.containsKey(argName.value) && types.isAssignable(expr.type,\n-                                            ((BRecordType) incRecordParamAllowAdditionalFields.type).restFieldType)) {\n+            BRecordType incRecordType = (BRecordType) incRecordParamAllowAdditionalFields.type;\n+            checkExpr(expr, env, incRecordType.restFieldType);\n+            LinkedHashMap<String, BField> fields = incRecordType.fields;\n+            if (!fields.containsKey(argName.value)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxOTg2NA=="}, "originalCommit": {"oid": "2096269b1ae220f11edeb96dcfab15b0b410be11"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzA1NDY5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/functions_with_included_record_parameters.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjo0Mjo1NlrOID3KcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjo1NjozNlrOID3nvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkyMDQzMw==", "bodyText": "Shall we also add a test where the contextually expected type is used? e.g., [1, 2] where a float[] is expected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27460#discussion_r540920433", "createdAt": "2020-12-11T12:42:56Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/functions_with_included_record_parameters.bal", "diffHunk": "@@ -277,6 +283,12 @@ function testFunctionOfFunctionTypedParamWithIncludedRecordParam20() {\n     assertEquality(5, val);\n }\n \n+function testFunctionOfFunctionTypedParamWithIncludedRecordParam21() {\n+    int[] x = [1, 2];\n+    int[] val = functionOfFunctionTypedParamWithIncludedRecordParam21(a = [1, 2]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2096269b1ae220f11edeb96dcfab15b0b410be11"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkyNzkzMw==", "bodyText": "Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27460#discussion_r540927933", "createdAt": "2020-12-11T12:56:36Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/functions_with_included_record_parameters.bal", "diffHunk": "@@ -277,6 +283,12 @@ function testFunctionOfFunctionTypedParamWithIncludedRecordParam20() {\n     assertEquality(5, val);\n }\n \n+function testFunctionOfFunctionTypedParamWithIncludedRecordParam21() {\n+    int[] x = [1, 2];\n+    int[] val = functionOfFunctionTypedParamWithIncludedRecordParam21(a = [1, 2]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkyMDQzMw=="}, "originalCommit": {"oid": "2096269b1ae220f11edeb96dcfab15b0b410be11"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2728, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}