{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5OTcxMDM0", "number": 26604, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToxNjozM1rOEx804A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToxNjozM1rOEx804A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODEyMjU2OnYy", "diffSide": "LEFT", "path": "tests/ballerina-compiler-api-test/src/test/java/io/ballerina/semantic/api/test/TypedescriptorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToxNjozM1rOHoUgIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDoxNjo1N1rOHoq2fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0MDk5NQ==", "bodyText": "Shall we add this call as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26604#discussion_r512040995", "createdAt": "2020-10-26T15:16:33Z", "author": {"login": "pubudu91"}, "path": "tests/ballerina-compiler-api-test/src/test/java/io/ballerina/semantic/api/test/TypedescriptorTest.java", "diffHunk": "@@ -110,16 +109,12 @@ public void testConstantType() {\n     @Test\n     public void testFunctionType() {\n         Symbol symbol = getSymbol(43, 12);\n-        FunctionTypeDescriptor type = (FunctionTypeDescriptor) ((FunctionSymbol) symbol).typeDescriptor();\n+        FunctionTypeDescriptor type = ((FunctionSymbol) symbol).typeDescriptor();\n         assertEquals(type.kind(), TypeDescKind.FUNCTION);\n \n-        List<Parameter> reqParams = type.requiredParams();\n-        assertEquals(reqParams.size(), 1);\n-        validateParam(reqParams.get(0), \"x\", REQUIRED, INT);\n-\n-        List<Parameter> defParams = type.defaultableParams();\n-        assertEquals(defParams.size(), 1);\n-        validateParam(defParams.get(0), \"y\", DEFAULTABLE, FLOAT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1867ab70536e4be852ac4ff7ada96de9daaa4383"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NTk4MA==", "bodyText": "We don't have this API anymore. What if we extract the defaultable parameters and check?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26604#discussion_r512085980", "createdAt": "2020-10-26T16:14:31Z", "author": {"login": "nadeeshaan"}, "path": "tests/ballerina-compiler-api-test/src/test/java/io/ballerina/semantic/api/test/TypedescriptorTest.java", "diffHunk": "@@ -110,16 +109,12 @@ public void testConstantType() {\n     @Test\n     public void testFunctionType() {\n         Symbol symbol = getSymbol(43, 12);\n-        FunctionTypeDescriptor type = (FunctionTypeDescriptor) ((FunctionSymbol) symbol).typeDescriptor();\n+        FunctionTypeDescriptor type = ((FunctionSymbol) symbol).typeDescriptor();\n         assertEquals(type.kind(), TypeDescKind.FUNCTION);\n \n-        List<Parameter> reqParams = type.requiredParams();\n-        assertEquals(reqParams.size(), 1);\n-        validateParam(reqParams.get(0), \"x\", REQUIRED, INT);\n-\n-        List<Parameter> defParams = type.defaultableParams();\n-        assertEquals(defParams.size(), 1);\n-        validateParam(defParams.get(0), \"y\", DEFAULTABLE, FLOAT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0MDk5NQ=="}, "originalCommit": {"oid": "1867ab70536e4be852ac4ff7ada96de9daaa4383"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNzE2Ng==", "bodyText": "Modified", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26604#discussion_r512407166", "createdAt": "2020-10-27T04:16:57Z", "author": {"login": "nadeeshaan"}, "path": "tests/ballerina-compiler-api-test/src/test/java/io/ballerina/semantic/api/test/TypedescriptorTest.java", "diffHunk": "@@ -110,16 +109,12 @@ public void testConstantType() {\n     @Test\n     public void testFunctionType() {\n         Symbol symbol = getSymbol(43, 12);\n-        FunctionTypeDescriptor type = (FunctionTypeDescriptor) ((FunctionSymbol) symbol).typeDescriptor();\n+        FunctionTypeDescriptor type = ((FunctionSymbol) symbol).typeDescriptor();\n         assertEquals(type.kind(), TypeDescKind.FUNCTION);\n \n-        List<Parameter> reqParams = type.requiredParams();\n-        assertEquals(reqParams.size(), 1);\n-        validateParam(reqParams.get(0), \"x\", REQUIRED, INT);\n-\n-        List<Parameter> defParams = type.defaultableParams();\n-        assertEquals(defParams.size(), 1);\n-        validateParam(defParams.get(0), \"y\", DEFAULTABLE, FLOAT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0MDk5NQ=="}, "originalCommit": {"oid": "1867ab70536e4be852ac4ff7ada96de9daaa4383"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4650, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}