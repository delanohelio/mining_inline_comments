{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDkyMjYx", "number": 21488, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoxNDozM1rODlU0-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozODo1MFrODmi0cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDY1MTQ2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoxNDozM1rOFyJ1_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTozNzo1NlrOFyQQwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNDM5OA==", "bodyText": "Shall we do these assertions in Ballerina itself?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388134398", "createdAt": "2020-03-05T08:14:33Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordTest.java", "diffHunk": "@@ -323,4 +323,28 @@ public void testInvalidExprsAsRecordLiteralKeys() {\n         BAssertUtil.validateError(result, index++, \"undefined field 'z' in record 'Foo'\", 46, 48);\n         Assert.assertEquals(result.getErrorCount(), index);\n     }\n+\n+    @Test\n+    public void testOptionalRecordRemove() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");\n+\n+        Assert.assertTrue(((BBoolean) returns[0]).booleanValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzOTU1Mg==", "bodyText": "Will do", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388239552", "createdAt": "2020-03-05T11:37:56Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordTest.java", "diffHunk": "@@ -323,4 +323,28 @@ public void testInvalidExprsAsRecordLiteralKeys() {\n         BAssertUtil.validateError(result, index++, \"undefined field 'z' in record 'Foo'\", 46, 48);\n         Assert.assertEquals(result.getErrorCount(), index);\n     }\n+\n+    @Test\n+    public void testOptionalRecordRemove() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");\n+\n+        Assert.assertTrue(((BBoolean) returns[0]).booleanValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNDM5OA=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDY1NTQwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/RecordRemoveNegativeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoxNjowOVrOFyJ4YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyODoxN1rOFyP_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTAwOA==", "bodyText": "These tests also can be written in Ballerina right? Using trap?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388135008", "createdAt": "2020-03-05T08:16:09Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/RecordRemoveNegativeTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.record;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Negative Test cases for removing required fields in records.\n+ */\n+public class RecordRemoveNegativeTest {\n+\n+    CompileResult result;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/record/negative/record_field_remove.bal\");\n+    }\n+\n+    @Test(expectedExceptions = RuntimeException.class,\n+            expectedExceptionsMessageRegExp = \".*error: \\\\{ballerina/lang.map\\\\}OperationNotSupported.*\")\n+    public void testOpenRecordRequiredFieldRemove() {\n+        BValue[] returns = BRunUtil.invoke(result, \"removeRequiredOpen\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTE2Mg==", "bodyText": "Will fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388235162", "createdAt": "2020-03-05T11:28:17Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/RecordRemoveNegativeTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.record;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Negative Test cases for removing required fields in records.\n+ */\n+public class RecordRemoveNegativeTest {\n+\n+    CompileResult result;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/record/negative/record_field_remove.bal\");\n+    }\n+\n+    @Test(expectedExceptions = RuntimeException.class,\n+            expectedExceptionsMessageRegExp = \".*error: \\\\{ballerina/lang.map\\\\}OperationNotSupported.*\")\n+    public void testOpenRecordRequiredFieldRemove() {\n+        BValue[] returns = BRunUtil.invoke(result, \"removeRequiredOpen\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTAwOA=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDY1ODU3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/closed_record.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoxNzoyNlrOFyJ6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NjoyMlrOFyzF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     error err = error(\"Returned value should be nil.\");\n          \n          \n            \n                     panic err;\n          \n          \n            \n                     panic error(\"Returned value should be nil.\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388135491", "createdAt": "2020-03-05T08:17:26Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/closed_record.bal", "diffHunk": "@@ -301,3 +301,86 @@ function addStringToMapValue(string s) returns string {\n     mapValue = mapValue + s;\n     return mapValue;\n }\n+\n+type FooRecord record {|\n+    string a;\n+    int b?;\n+    int...;\n+|};\n+\n+function removeOptional() returns boolean {\n+    FooRecord fooRecord = {a : \"a\", b : 1};\n+    _ = fooRecord.remove(\"b\");\n+    int? testValue = fooRecord?.b;\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+function removeRest() returns boolean {\n+    FooRecord fooRecord = { a: \"a\", b : 1, \"c\" : 10};\n+    _ = fooRecord.remove(\"c\");\n+    anydata testValue = fooRecord[\"c\"];\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+type Student record {|\n+    int id;\n+    string name?;\n+    Grades...;\n+|};\n+\n+type Grades record {|\n+    int maths;\n+    int physics;\n+\n+    int...;\n+|};\n+\n+function removeIfHasKeyOptional() {\n+    Student s = {id : 1, name : \"Andrew\"};\n+    string? n = <string?> s.removeIfHasKey(\"name\");\n+    if (n is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    if (<string>n !== \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;\n+    }\n+\n+    var age = s.removeIfHasKey(\"age\");\n+    if !(age is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;\n+    }\n+}\n+\n+function removeIfHasKeyRest() {\n+    Grades g1 = {maths: 80, physics:75};\n+    Student s = {id : 1, name : \"Andrew\", \"grade\": g1};\n+    Grades? g2 = <Grades?> s.removeIfHasKey(\"grade\");\n+    if (g2 is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    Grades g3 = <Grades>g2;\n+    if !(g3.maths == g1.maths && g3.physics == g1.physics) {\n+         error err = error(\"Returned value should be identical with expected value.\");\n+         panic err;\n+    }\n+\n+    var g4 = s.removeIfHasKey(\"grade\");\n+    if !(g4 is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MjM5MQ==", "bodyText": "@KavinduZoysa can you please check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388182391", "createdAt": "2020-03-05T09:48:49Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/closed_record.bal", "diffHunk": "@@ -301,3 +301,86 @@ function addStringToMapValue(string s) returns string {\n     mapValue = mapValue + s;\n     return mapValue;\n }\n+\n+type FooRecord record {|\n+    string a;\n+    int b?;\n+    int...;\n+|};\n+\n+function removeOptional() returns boolean {\n+    FooRecord fooRecord = {a : \"a\", b : 1};\n+    _ = fooRecord.remove(\"b\");\n+    int? testValue = fooRecord?.b;\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+function removeRest() returns boolean {\n+    FooRecord fooRecord = { a: \"a\", b : 1, \"c\" : 10};\n+    _ = fooRecord.remove(\"c\");\n+    anydata testValue = fooRecord[\"c\"];\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+type Student record {|\n+    int id;\n+    string name?;\n+    Grades...;\n+|};\n+\n+type Grades record {|\n+    int maths;\n+    int physics;\n+\n+    int...;\n+|};\n+\n+function removeIfHasKeyOptional() {\n+    Student s = {id : 1, name : \"Andrew\"};\n+    string? n = <string?> s.removeIfHasKey(\"name\");\n+    if (n is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    if (<string>n !== \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;\n+    }\n+\n+    var age = s.removeIfHasKey(\"age\");\n+    if !(age is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;\n+    }\n+}\n+\n+function removeIfHasKeyRest() {\n+    Grades g1 = {maths: 80, physics:75};\n+    Student s = {id : 1, name : \"Andrew\", \"grade\": g1};\n+    Grades? g2 = <Grades?> s.removeIfHasKey(\"grade\");\n+    if (g2 is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    Grades g3 = <Grades>g2;\n+    if !(g3.maths == g1.maths && g3.physics == g1.physics) {\n+         error err = error(\"Returned value should be identical with expected value.\");\n+         panic err;\n+    }\n+\n+    var g4 = s.removeIfHasKey(\"grade\");\n+    if !(g4 is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTQ5MQ=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDIwNw==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810207", "createdAt": "2020-03-06T09:56:22Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/closed_record.bal", "diffHunk": "@@ -301,3 +301,86 @@ function addStringToMapValue(string s) returns string {\n     mapValue = mapValue + s;\n     return mapValue;\n }\n+\n+type FooRecord record {|\n+    string a;\n+    int b?;\n+    int...;\n+|};\n+\n+function removeOptional() returns boolean {\n+    FooRecord fooRecord = {a : \"a\", b : 1};\n+    _ = fooRecord.remove(\"b\");\n+    int? testValue = fooRecord?.b;\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+function removeRest() returns boolean {\n+    FooRecord fooRecord = { a: \"a\", b : 1, \"c\" : 10};\n+    _ = fooRecord.remove(\"c\");\n+    anydata testValue = fooRecord[\"c\"];\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+type Student record {|\n+    int id;\n+    string name?;\n+    Grades...;\n+|};\n+\n+type Grades record {|\n+    int maths;\n+    int physics;\n+\n+    int...;\n+|};\n+\n+function removeIfHasKeyOptional() {\n+    Student s = {id : 1, name : \"Andrew\"};\n+    string? n = <string?> s.removeIfHasKey(\"name\");\n+    if (n is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    if (<string>n !== \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;\n+    }\n+\n+    var age = s.removeIfHasKey(\"age\");\n+    if !(age is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;\n+    }\n+}\n+\n+function removeIfHasKeyRest() {\n+    Grades g1 = {maths: 80, physics:75};\n+    Student s = {id : 1, name : \"Andrew\", \"grade\": g1};\n+    Grades? g2 = <Grades?> s.removeIfHasKey(\"grade\");\n+    if (g2 is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    Grades g3 = <Grades>g2;\n+    if !(g3.maths == g1.maths && g3.physics == g1.physics) {\n+         error err = error(\"Returned value should be identical with expected value.\");\n+         panic err;\n+    }\n+\n+    var g4 = s.removeIfHasKey(\"grade\");\n+    if !(g4 is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTQ5MQ=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDY2NzYyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoyMDo1MlrOFyJ_zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NzoxMVrOFyMthQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNjkxMQ==", "bodyText": "Do we need a separate method for this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388136911", "createdAt": "2020-03-05T08:20:52Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MTM4MQ==", "bodyText": "Nope. Will refactor", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388181381", "createdAt": "2020-03-05T09:47:11Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNjkxMQ=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDY2ODk0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoyMToyNFrOFyKAkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0Njo0N1rOFyMswA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzEwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isValid = checkField(m, k);\n          \n          \n            \n                            if (!isValid) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (!m.containsKey(k)) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388137105", "createdAt": "2020-03-05T08:21:24Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MTE4NA==", "bodyText": "+1 will fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388181184", "createdAt": "2020-03-05T09:46:47Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzEwNQ=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDY3MDc1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoyMjowN1rOFyKBvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NTo1MVrOFyMqrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzQwNg==", "bodyText": "Shall we rename this to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean checkForRequiredFields(BRecordType type, String k) {\n          \n          \n            \n                private static boolean isRequiredField(BRecordType type, String k) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388137406", "createdAt": "2020-03-05T08:22:07Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDY1NQ==", "bodyText": "+1 will fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388180655", "createdAt": "2020-03-05T09:45:51Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzQwNg=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDY3MzE4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoyMjo1OFrOFyKDNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NTozN1rOFyMqGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzc4Mw==", "bodyText": "Assuming we rename,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n          \n          \n            \n                            if (isRequired) {\n          \n          \n            \n                            if (isRequiredField((BRecordType) type, k)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388137783", "createdAt": "2020-03-05T08:22:58Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDUwNg==", "bodyText": "Will Fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388180506", "createdAt": "2020-03-05T09:45:37Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzc4Mw=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDY5MjI1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODozMDowNVrOFyKPQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NToyNlrOFyMpqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MDg2Nw==", "bodyText": "Shall we check by tag and also return early if not a record type?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (type instanceof BRecordType) {\n          \n          \n            \n                    if (type.tag != TypeTags.RECORD_TYPE_TAG) {\n          \n          \n            \n                            return;\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388140867", "createdAt": "2020-03-05T08:30:05Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type instanceof BRecordType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDM5NQ==", "bodyText": "Will Fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388180395", "createdAt": "2020-03-05T09:45:26Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type instanceof BRecordType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MDg2Nw=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDY5NDU2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODozMDo1NVrOFyKQog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NToyMFrOFyMpaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MTIxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isRequired = checkForRequiredFields((BRecordType) type, key);\n          \n          \n            \n                            if (isRequired) {\n          \n          \n            \n                            if (isRequiredField((BRecordType) type, key)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388141218", "createdAt": "2020-03-05T08:30:55Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type instanceof BRecordType) {\n+            Map<String, BField> fields = ((BRecordType) type).getFields();\n+            for (String key : fields.keySet()) {\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, key);\n+                if (isRequired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDMyOQ==", "bodyText": "Will Fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388180329", "createdAt": "2020-03-05T09:45:20Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type instanceof BRecordType) {\n+            Map<String, BField> fields = ((BRecordType) type).getFields();\n+            for (String key : fields.keySet()) {\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, key);\n+                if (isRequired) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MTIxOA=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDcwMDkxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODozMzoxMVrOFyKUeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozOToyMFrOFyMcQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MjIwMA==", "bodyText": "Should we add more info to say it failed since it is a required field?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388142200", "createdAt": "2020-03-05T08:33:11Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3Njk2MQ==", "bodyText": "+1 will add", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388176961", "createdAt": "2020-03-05T09:39:20Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MjIwMA=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDcwOTA4OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODozNjowNFrOFyKZag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NjozN1rOFyzGfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MzQ2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     error err = error(\"Returned value should equals 'Andrew'.\");\n          \n          \n            \n                     panic err;\n          \n          \n            \n                     panic error(\"Returned value should equals 'Andrew'.\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388143466", "createdAt": "2020-03-05T08:36:04Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -39,6 +39,25 @@ function testRemoveAll() returns map<string> {\n     return countriesDup;\n }\n \n+function testRemoveIfHasKey() {\n+    map<string> student = {id:\"1\", name:\"Andrew\", country:\"Sri Lanka\", city:\"Colombo\"};\n+    string? s = student.removeIfHasKey(\"name\");\n+    if (s is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+    if (<string> s != \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3Njg3MQ==", "bodyText": "@KavinduZoysa can you check this? :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388176871", "createdAt": "2020-03-05T09:39:12Z", "author": {"login": "dulvinw"}, "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -39,6 +39,25 @@ function testRemoveAll() returns map<string> {\n     return countriesDup;\n }\n \n+function testRemoveIfHasKey() {\n+    map<string> student = {id:\"1\", name:\"Andrew\", country:\"Sri Lanka\", city:\"Colombo\"};\n+    string? s = student.removeIfHasKey(\"name\");\n+    if (s is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+    if (<string> s != \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MzQ2Ng=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDM2NA==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810364", "createdAt": "2020-03-06T09:56:37Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -39,6 +39,25 @@ function testRemoveAll() returns map<string> {\n     return countriesDup;\n }\n \n+function testRemoveIfHasKey() {\n+    map<string> student = {id:\"1\", name:\"Andrew\", country:\"Sri Lanka\", city:\"Colombo\"};\n+    string? s = student.removeIfHasKey(\"name\");\n+    if (s is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+    if (<string> s != \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MzQ2Ng=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc0MTUzOnYy", "diffSide": "RIGHT", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0NjozMlrOFyKtOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1Njo0OVrOFyzG3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0ODUzOQ==", "bodyText": "This could happen for records too right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388148539", "createdAt": "2020-03-05T08:46:32Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+import org.wso2.ballerinalang.compiler.util.Constants;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\", functionName = \"removeIfHasKey\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP), @Argument(name = \"k\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class RemoveIfHasKey {\n+\n+    public static Object removeIfHasKey(Strand strand, MapValue<?, ?> m, String k) {\n+        String op = Constants.REMOVE_IF_HAS_KEY;\n+\n+        checkIsMapOnlyOperation(m.getType(), op);\n+        checkValidFieldForRecord(m, k, op);\n+        try {\n+            return m.remove(k);\n+        } catch (org.ballerinalang.jvm.util.exceptions.BLangFreezeException e) {\n+            throw BallerinaErrors.createError(e.getMessage(),\n+                    \"Failed to remove element from map: \" + e.getDetail());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3Nzk5MA==", "bodyText": "@KavinduZoysa Can you please check :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388177990", "createdAt": "2020-03-05T09:41:07Z", "author": {"login": "dulvinw"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+import org.wso2.ballerinalang.compiler.util.Constants;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\", functionName = \"removeIfHasKey\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP), @Argument(name = \"k\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class RemoveIfHasKey {\n+\n+    public static Object removeIfHasKey(Strand strand, MapValue<?, ?> m, String k) {\n+        String op = Constants.REMOVE_IF_HAS_KEY;\n+\n+        checkIsMapOnlyOperation(m.getType(), op);\n+        checkValidFieldForRecord(m, k, op);\n+        try {\n+            return m.remove(k);\n+        } catch (org.ballerinalang.jvm.util.exceptions.BLangFreezeException e) {\n+            throw BallerinaErrors.createError(e.getMessage(),\n+                    \"Failed to remove element from map: \" + e.getDetail());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0ODUzOQ=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDQ2MQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810461", "createdAt": "2020-03-06T09:56:49Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+import org.wso2.ballerinalang.compiler.util.Constants;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\", functionName = \"removeIfHasKey\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP), @Argument(name = \"k\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class RemoveIfHasKey {\n+\n+    public static Object removeIfHasKey(Strand strand, MapValue<?, ?> m, String k) {\n+        String op = Constants.REMOVE_IF_HAS_KEY;\n+\n+        checkIsMapOnlyOperation(m.getType(), op);\n+        checkValidFieldForRecord(m, k, op);\n+        try {\n+            return m.remove(k);\n+        } catch (org.ballerinalang.jvm.util.exceptions.BLangFreezeException e) {\n+            throw BallerinaErrors.createError(e.getMessage(),\n+                    \"Failed to remove element from map: \" + e.getDetail());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0ODUzOQ=="}, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM1MTE2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0Mjo0MVrOFytAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozMTo0OFrOF0LDxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDUyOQ==", "bodyText": "Is this for the use of remove methods? If so, shall we make the error message specific? Something like below:\nfailed to remove field: 'foo' is a required field in 'FooRec'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388710529", "createdAt": "2020-03-06T04:42:41Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type.getTag() != TypeTags.RECORD_TYPE_TAG) {\n+            return;\n+        }\n+        Map<String, BField> fields = ((BRecordType) type).getFields();\n+        for (String key : fields.keySet()) {\n+            if (isRequiredField((BRecordType) type, key)) {\n+                throw createOpNotSupportedErrorForRecord(type, op);\n+            }\n+        }\n+    }\n+\n+    private static ErrorValue createOpNotSupportedErrorForRecord(BType type, String op) {\n+        return BallerinaErrors.createError(getModulePrefixedReason(MAP_LANG_LIB,\n+                OPERATION_NOT_SUPPORTED_IDENTIFIER),\n+                format(\"%s not supported on type '%s' since there are required fields.\", op, type.getQualifiedName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MzU4MQ==", "bodyText": "+1, I think we should mention the specific field when an attempt to remove a single field fails.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388773581", "createdAt": "2020-03-06T08:39:54Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type.getTag() != TypeTags.RECORD_TYPE_TAG) {\n+            return;\n+        }\n+        Map<String, BField> fields = ((BRecordType) type).getFields();\n+        for (String key : fields.keySet()) {\n+            if (isRequiredField((BRecordType) type, key)) {\n+                throw createOpNotSupportedErrorForRecord(type, op);\n+            }\n+        }\n+    }\n+\n+    private static ErrorValue createOpNotSupportedErrorForRecord(BType type, String op) {\n+        return BallerinaErrors.createError(getModulePrefixedReason(MAP_LANG_LIB,\n+                OPERATION_NOT_SUPPORTED_IDENTIFIER),\n+                format(\"%s not supported on type '%s' since there are required fields.\", op, type.getQualifiedName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDUyOQ=="}, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTQ2Mg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251462", "createdAt": "2020-03-10T11:31:48Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type.getTag() != TypeTags.RECORD_TYPE_TAG) {\n+            return;\n+        }\n+        Map<String, BField> fields = ((BRecordType) type).getFields();\n+        for (String key : fields.keySet()) {\n+            if (isRequiredField((BRecordType) type, key)) {\n+                throw createOpNotSupportedErrorForRecord(type, op);\n+            }\n+        }\n+    }\n+\n+    private static ErrorValue createOpNotSupportedErrorForRecord(BType type, String op) {\n+        return BallerinaErrors.createError(getModulePrefixedReason(MAP_LANG_LIB,\n+                OPERATION_NOT_SUPPORTED_IDENTIFIER),\n+                format(\"%s not supported on type '%s' since there are required fields.\", op, type.getQualifiedName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDUyOQ=="}, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM4MTY2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowNzozMFrOFytS4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NzowNVrOFyzHcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTIzMw==", "bodyText": "Since we are checking if this particular type is a type param, shall we rename this method to isTypeParam()? Check the isTypeParam() method in TypeParamAnalyzer", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388715233", "createdAt": "2020-03-06T05:07:30Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java", "diffHunk": "@@ -217,9 +218,16 @@ public boolean isPureType() {\n \n     private static LinkedHashSet<BType> toFlatTypeSet(LinkedHashSet<BType> types) {\n         return types.stream()\n-                .flatMap(type -> type.tag == TypeTags.UNION ?\n+                .flatMap(type -> type.tag == TypeTags.UNION && !isTypeParamAvailable(type) ?\n                         ((BUnionType) type).memberTypes.stream() : Stream.of(type))\n                 .collect(Collectors.toCollection(LinkedHashSet::new));\n     }\n \n+    private static boolean isTypeParamAvailable(BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDYwOQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810609", "createdAt": "2020-03-06T09:57:05Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java", "diffHunk": "@@ -217,9 +218,16 @@ public boolean isPureType() {\n \n     private static LinkedHashSet<BType> toFlatTypeSet(LinkedHashSet<BType> types) {\n         return types.stream()\n-                .flatMap(type -> type.tag == TypeTags.UNION ?\n+                .flatMap(type -> type.tag == TypeTags.UNION && !isTypeParamAvailable(type) ?\n                         ((BUnionType) type).memberTypes.stream() : Stream.of(type))\n                 .collect(Collectors.toCollection(LinkedHashSet::new));\n     }\n \n+    private static boolean isTypeParamAvailable(BType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTIzMw=="}, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM4MzgwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowOToyMFrOFytUQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NzozOFrOFyzIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTU4Ng==", "bodyText": "Can't we define this constant somewhere else? This constant seems like a random constant in this particular class. Even the one above it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388715586", "createdAt": "2020-03-06T05:09:20Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/Constants.java", "diffHunk": "@@ -47,4 +47,7 @@ private Constants() {\n     public static final int MAX_UNICODE = 0x10FFFF;\n \n     public static final String DESUGARED_MAPPING_CONSTR_KEY = \"$mapping$var$\";\n+\n+    public static final String REMOVE_IF_HAS_KEY = \"removeIfHasKey()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDg4Nw==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810887", "createdAt": "2020-03-06T09:57:38Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/Constants.java", "diffHunk": "@@ -47,4 +47,7 @@ private Constants() {\n     public static final int MAX_UNICODE = 0x10FFFF;\n \n     public static final String DESUGARED_MAPPING_CONSTR_KEY = \"$mapping$var$\";\n+\n+    public static final String REMOVE_IF_HAS_KEY = \"removeIfHasKey()\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTU4Ng=="}, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM4NjUwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Remove.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNToxMDo1MlrOFytVvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozMTo1N1rOF0LECA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTk2Ng==", "bodyText": "Shall we make this a static constant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388715966", "createdAt": "2020-03-06T05:10:52Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Remove.java", "diffHunk": "@@ -42,13 +44,17 @@\n public class Remove {\n \n     public static Object remove(Strand strand, MapValue<?, ?> m, String k) {\n-        checkIsMapOnlyOperation(m.getType(), \"remove()\");\n+        BType type = m.getType();\n+        String op = \"remove()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTUyOA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251528", "createdAt": "2020-03-10T11:31:57Z", "author": {"login": "dulvinw"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Remove.java", "diffHunk": "@@ -42,13 +44,17 @@\n public class Remove {\n \n     public static Object remove(Strand strand, MapValue<?, ?> m, String k) {\n-        checkIsMapOnlyOperation(m.getType(), \"remove()\");\n+        BType type = m.getType();\n+        String op = \"remove()\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTk2Ng=="}, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODc1MDM3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODozNzoxM1rOFywycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozMjoxNVrOF0LEew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MjQ2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BType type = m.getType();\n          \n          \n            \n                    switch (type.getTag()) {\n          \n          \n            \n                        case TypeTags.RECORD_TYPE_TAG:\n          \n          \n            \n                            if (!m.containsKey(k)) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (isRequiredField((BRecordType) type, k)) {\n          \n          \n            \n                                throw createOpNotSupportedErrorForRecord(type, op);\n          \n          \n            \n                            }\n          \n          \n            \n                            return;\n          \n          \n            \n                        default:\n          \n          \n            \n                            return;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (m.getType().getTag() != TypeTags.RECORD_TYPE_TAG) {\n          \n          \n            \n                        return;        \n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (!m.containsKey(k)) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (isRequiredField((BRecordType) type, k)) {\n          \n          \n            \n                        throw createOpNotSupportedErrorForRecord(type, op);\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388772467", "createdAt": "2020-03-06T08:37:13Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTEwNQ==", "bodyText": "The only check we need here is the following right, since we aren't doing anything for the other cases.\nif (type.getTag() == TypeTags.RECORD_TYPE_TAG && isRequiredField((BRecordType) type, k)) {\n    throw createOpNotSupportedErrorForRecord(type, op);\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390091105", "createdAt": "2020-03-10T04:35:27Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MjQ2Nw=="}, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5ODIxMQ==", "bodyText": "Yeah, let's update since m.containsKey(k) will be true anyway for a required field.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390098211", "createdAt": "2020-03-10T05:11:40Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MjQ2Nw=="}, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTY0Mw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251643", "createdAt": "2020-03-10T11:32:15Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MjQ2Nw=="}, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODc1MjIwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODozNzo1MlrOFywzhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozNTozNFrOF0LKtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3Mjc0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388772742", "createdAt": "2020-03-06T08:37:52Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzIzNw==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390253237", "createdAt": "2020-03-10T11:35:34Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3Mjc0Mg=="}, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODgwNzk0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODo1ODowMVrOFyxViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozNToyMVrOF0LKMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTQ0OA==", "bodyText": "Shall we make this a switch instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388781448", "createdAt": "2020-03-06T08:58:01Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -997,19 +999,89 @@ private void createRecordRemoveMethod(ClassWriter cw) {\n             mv.visitEnd();\n         }\n \n-        private void createRecordClearMethod(ClassWriter cw) {\n+        private void createRecordClearMethod(ClassWriter cw, List<BField> fields, String className) {\n             // throw an UnsupportedOperationException, since remove is not supported by for records.\n             MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"remove\", String.format(\"(L%s;)L%s;\", OBJECT, OBJECT),\n                     String.format(\"(L%s;)TV;\", OBJECT), null);\n             mv.visitCode();\n-            mv.visitTypeInsn(NEW, UNSUPPORTED_OPERATION_EXCEPTION);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, UNSUPPORTED_OPERATION_EXCEPTION, \"<init>\", \"()V\", false);\n-            mv.visitInsn(ATHROW);\n+\n+            int fieldNameRegIndex = 1;\n+            int strKeyVarIndex = 2;\n+\n+            // cast key to java.lang.String\n+            mv.visitVarInsn(ALOAD, fieldNameRegIndex);\n+            mv.visitTypeInsn(CHECKCAST, STRING_VALUE);\n+            mv.visitVarInsn(ASTORE, strKeyVarIndex);\n+\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitMethodInsn(INVOKESPECIAL, MAP_VALUE_IMPL, \"validateFreezeStatus\", \"()V\", false);\n+\n+            // sort the fields before generating switch case\n+            @Nilable List<BField> sortedFields = new ArrayList<>(fields);\n+            sortedFields.sort(NAME_HASH_COMPARATOR);\n+\n+            Label defaultCaseLabel = new Label();\n+            List<Label> labels = createLabelsForSwitch(mv, strKeyVarIndex, sortedFields, defaultCaseLabel);\n+            List<Label> targetLabels = createLabelsForEqualCheck(mv, strKeyVarIndex, sortedFields, labels,\n+                    defaultCaseLabel);\n+\n+            int i = 0;\n+            for (BField optionalField : sortedFields) {\n+                BField field = getObjectField(optionalField);\n+                Label targetLabel = targetLabels.get(i);\n+                mv.visitLabel(targetLabel);\n+\n+                //Setting isPresent as zero\n+                if (this.isOptionalRecordField(field)) {\n+                    String fieldName = field.name.value;\n+                    mv.visitVarInsn(ALOAD, 0);\n+                    mv.visitInsn(ICONST_0);\n+                    mv.visitFieldInsn(PUTFIELD, className, this.getFieldIsPresentFlagName(fieldName),\n+                            getTypeDesc(symbolTable.booleanType, false));\n+\n+                    // load the existing value to return\n+                    mv.visitVarInsn(ALOAD, 0);\n+                    mv.visitFieldInsn(GETFIELD, className, fieldName, getTypeDesc(field.type, false));\n+                    addBoxInsn(mv, field.type);\n+\n+                    // Set default value for reference types\n+                    if (checkIfValueIsJReferenceType(field.type)) {\n+                        mv.visitVarInsn(ALOAD, 0);\n+                        mv.visitInsn(ACONST_NULL);\n+                        mv.visitFieldInsn(PUTFIELD, className, fieldName, getTypeDesc(field.type, false));\n+                    }\n+\n+                    mv.visitInsn(ARETURN);\n+                } else {\n+                    mv.visitTypeInsn(NEW, UNSUPPORTED_OPERATION_EXCEPTION);\n+                    mv.visitInsn(DUP);\n+                    mv.visitMethodInsn(INVOKESPECIAL, UNSUPPORTED_OPERATION_EXCEPTION, \"<init>\", \"()V\", false);\n+                    mv.visitInsn(ATHROW);\n+                }\n+                i += 1;\n+            }\n+\n+            // default case\n+            mv.visitLabel(defaultCaseLabel);\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitVarInsn(ALOAD, strKeyVarIndex);\n+            mv.visitMethodInsn(INVOKESPECIAL, MAP_VALUE_IMPL, \"remove\",\n+                    String.format(\"(L%s;)L%s;\", OBJECT, OBJECT), false);\n+            mv.visitInsn(ARETURN);\n+\n             mv.visitMaxs(0, 0);\n             mv.visitEnd();\n         }\n \n+        private boolean checkIfValueIsJReferenceType(BType bType) {\n+            if ((bType.getKind() == TypeKind.INT) || (bType.getKind() == TypeKind.BOOLEAN) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzEwNw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390253107", "createdAt": "2020-03-10T11:35:21Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -997,19 +999,89 @@ private void createRecordRemoveMethod(ClassWriter cw) {\n             mv.visitEnd();\n         }\n \n-        private void createRecordClearMethod(ClassWriter cw) {\n+        private void createRecordClearMethod(ClassWriter cw, List<BField> fields, String className) {\n             // throw an UnsupportedOperationException, since remove is not supported by for records.\n             MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"remove\", String.format(\"(L%s;)L%s;\", OBJECT, OBJECT),\n                     String.format(\"(L%s;)TV;\", OBJECT), null);\n             mv.visitCode();\n-            mv.visitTypeInsn(NEW, UNSUPPORTED_OPERATION_EXCEPTION);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, UNSUPPORTED_OPERATION_EXCEPTION, \"<init>\", \"()V\", false);\n-            mv.visitInsn(ATHROW);\n+\n+            int fieldNameRegIndex = 1;\n+            int strKeyVarIndex = 2;\n+\n+            // cast key to java.lang.String\n+            mv.visitVarInsn(ALOAD, fieldNameRegIndex);\n+            mv.visitTypeInsn(CHECKCAST, STRING_VALUE);\n+            mv.visitVarInsn(ASTORE, strKeyVarIndex);\n+\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitMethodInsn(INVOKESPECIAL, MAP_VALUE_IMPL, \"validateFreezeStatus\", \"()V\", false);\n+\n+            // sort the fields before generating switch case\n+            @Nilable List<BField> sortedFields = new ArrayList<>(fields);\n+            sortedFields.sort(NAME_HASH_COMPARATOR);\n+\n+            Label defaultCaseLabel = new Label();\n+            List<Label> labels = createLabelsForSwitch(mv, strKeyVarIndex, sortedFields, defaultCaseLabel);\n+            List<Label> targetLabels = createLabelsForEqualCheck(mv, strKeyVarIndex, sortedFields, labels,\n+                    defaultCaseLabel);\n+\n+            int i = 0;\n+            for (BField optionalField : sortedFields) {\n+                BField field = getObjectField(optionalField);\n+                Label targetLabel = targetLabels.get(i);\n+                mv.visitLabel(targetLabel);\n+\n+                //Setting isPresent as zero\n+                if (this.isOptionalRecordField(field)) {\n+                    String fieldName = field.name.value;\n+                    mv.visitVarInsn(ALOAD, 0);\n+                    mv.visitInsn(ICONST_0);\n+                    mv.visitFieldInsn(PUTFIELD, className, this.getFieldIsPresentFlagName(fieldName),\n+                            getTypeDesc(symbolTable.booleanType, false));\n+\n+                    // load the existing value to return\n+                    mv.visitVarInsn(ALOAD, 0);\n+                    mv.visitFieldInsn(GETFIELD, className, fieldName, getTypeDesc(field.type, false));\n+                    addBoxInsn(mv, field.type);\n+\n+                    // Set default value for reference types\n+                    if (checkIfValueIsJReferenceType(field.type)) {\n+                        mv.visitVarInsn(ALOAD, 0);\n+                        mv.visitInsn(ACONST_NULL);\n+                        mv.visitFieldInsn(PUTFIELD, className, fieldName, getTypeDesc(field.type, false));\n+                    }\n+\n+                    mv.visitInsn(ARETURN);\n+                } else {\n+                    mv.visitTypeInsn(NEW, UNSUPPORTED_OPERATION_EXCEPTION);\n+                    mv.visitInsn(DUP);\n+                    mv.visitMethodInsn(INVOKESPECIAL, UNSUPPORTED_OPERATION_EXCEPTION, \"<init>\", \"()V\", false);\n+                    mv.visitInsn(ATHROW);\n+                }\n+                i += 1;\n+            }\n+\n+            // default case\n+            mv.visitLabel(defaultCaseLabel);\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitVarInsn(ALOAD, strKeyVarIndex);\n+            mv.visitMethodInsn(INVOKESPECIAL, MAP_VALUE_IMPL, \"remove\",\n+                    String.format(\"(L%s;)L%s;\", OBJECT, OBJECT), false);\n+            mv.visitInsn(ARETURN);\n+\n             mv.visitMaxs(0, 0);\n             mv.visitEnd();\n         }\n \n+        private boolean checkIfValueIsJReferenceType(BType bType) {\n+            if ((bType.getKind() == TypeKind.INT) || (bType.getKind() == TypeKind.BOOLEAN) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTQ0OA=="}, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODgxMTQ0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/OpenRecordTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODo1OTowNlrOFyxXig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozMjoyNFrOF0LEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTk2Mg==", "bodyText": "We can ignore the return values in these tests.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");\n          \n          \n            \n                    BRunUtil.invoke(compileResult, \"removeOptional\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388781962", "createdAt": "2020-03-06T08:59:06Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/OpenRecordTest.java", "diffHunk": "@@ -481,6 +481,26 @@ public void testInvalidExprsAsRecordLiteralKeys() {\n                 \"expected a string literal or an expression\", 28, 26);\n     }\n \n+    @Test\n+    public void testOptionalRecordRemove() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTcwNQ==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251705", "createdAt": "2020-03-10T11:32:24Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/OpenRecordTest.java", "diffHunk": "@@ -481,6 +481,26 @@ public void testInvalidExprsAsRecordLiteralKeys() {\n                 \"expected a string literal or an expression\", 28, 26);\n     }\n \n+    @Test\n+    public void testOptionalRecordRemove() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTk2Mg=="}, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODgxMjY4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/map/MapAccessExprTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODo1OTozMlrOFyxYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDo0NjoyOVrOF0BZwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjE2Ng==", "bodyText": "Can we move these tests to Ballerina?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388782166", "createdAt": "2020-03-06T08:59:32Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/map/MapAccessExprTest.java", "diffHunk": "@@ -197,4 +197,28 @@ public void testMapRemovePositive() {\n     public void testMapRemoveNegative() {\n         BRunUtil.invoke(compileResult, \"testMapRemoveNegative\");\n     }\n+\n+    @Test(description = \"Test removeIfHasKey if key exists.\")\n+    public void testRemoveIfHasKeyPositive1() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testRemoveIfHasKeyPositive1\");\n+        Assert.assertTrue(((BBoolean) returns[0]).booleanValue(), \"Expected booleans to be identified as equal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MzI1MA==", "bodyText": "@KavinduZoysa can you please check", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390093250", "createdAt": "2020-03-10T04:46:29Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/map/MapAccessExprTest.java", "diffHunk": "@@ -197,4 +197,28 @@ public void testMapRemovePositive() {\n     public void testMapRemoveNegative() {\n         BRunUtil.invoke(compileResult, \"testMapRemoveNegative\");\n     }\n+\n+    @Test(description = \"Test removeIfHasKey if key exists.\")\n+    public void testRemoveIfHasKeyPositive1() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testRemoveIfHasKeyPositive1\");\n+        Assert.assertTrue(((BBoolean) returns[0]).booleanValue(), \"Expected booleans to be identified as equal\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjE2Ng=="}, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODgxMzUyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODo1OTo1NFrOFyxY8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozMjozNlrOF0LFHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjMyMQ==", "bodyText": "We can remove the else block.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388782321", "createdAt": "2020-03-06T08:59:54Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {\n+    string a;\n+    int b?;\n+};\n+\n+function removeRequiredOpen() {\n+    Foo foo = {a : \"a\", b : 1};\n+    _ = foo.remove(\"a\");\n+}\n+\n+function testRemoveRequiredOpen() {\n+    error? result = trap removeRequiredOpen();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");\n+    }\n+}\n+\n+type Bar record {|\n+    string a;\n+    int b?;\n+|};\n+\n+function removeRequiredClosed() {\n+    Bar bar = {a : \"a\", b : 1};\n+    _ = bar.remove(\"a\");\n+}\n+\n+function testRemoveRequiredClosed() {\n+    error? result = trap removeRequiredClosed();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTgwNA==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251804", "createdAt": "2020-03-10T11:32:36Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {\n+    string a;\n+    int b?;\n+};\n+\n+function removeRequiredOpen() {\n+    Foo foo = {a : \"a\", b : 1};\n+    _ = foo.remove(\"a\");\n+}\n+\n+function testRemoveRequiredOpen() {\n+    error? result = trap removeRequiredOpen();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");\n+    }\n+}\n+\n+type Bar record {|\n+    string a;\n+    int b?;\n+|};\n+\n+function removeRequiredClosed() {\n+    Bar bar = {a : \"a\", b : 1};\n+    _ = bar.remove(\"a\");\n+}\n+\n+function testRemoveRequiredClosed() {\n+    error? result = trap removeRequiredClosed();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjMyMQ=="}, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODgyNzc0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowNTowNFrOFyxh8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozMjo1MFrOF0LFhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NDYyNA==", "bodyText": "Shall we panic with a proper error.\nUse a proper string without spaces, e.g., \"AssertionError\", as the reason and the include a \"message\" field in the detail field with more info.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388784624", "createdAt": "2020-03-06T09:05:04Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {\n+    string a;\n+    int b?;\n+};\n+\n+function removeRequiredOpen() {\n+    Foo foo = {a : \"a\", b : 1};\n+    _ = foo.remove(\"a\");\n+}\n+\n+function testRemoveRequiredOpen() {\n+    error? result = trap removeRequiredOpen();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");\n+    }\n+}\n+\n+type Bar record {|\n+    string a;\n+    int b?;\n+|};\n+\n+function removeRequiredClosed() {\n+    Bar bar = {a : \"a\", b : 1};\n+    _ = bar.remove(\"a\");\n+}\n+\n+function testRemoveRequiredClosed() {\n+    error? result = trap removeRequiredClosed();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTkwOQ==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251909", "createdAt": "2020-03-10T11:32:50Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {\n+    string a;\n+    int b?;\n+};\n+\n+function removeRequiredOpen() {\n+    Foo foo = {a : \"a\", b : 1};\n+    _ = foo.remove(\"a\");\n+}\n+\n+function testRemoveRequiredOpen() {\n+    error? result = trap removeRequiredOpen();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");\n+    }\n+}\n+\n+type Bar record {|\n+    string a;\n+    int b?;\n+|};\n+\n+function removeRequiredClosed() {\n+    Bar bar = {a : \"a\", b : 1};\n+    _ = bar.remove(\"a\");\n+}\n+\n+function testRemoveRequiredClosed() {\n+    error? result = trap removeRequiredClosed();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NDYyNA=="}, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQyOTYwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozODo1MFrOF0BUCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTozNDozOFrOF0LI9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTc4NA==", "bodyText": "This method is doing the same thing as the checkValidFieldForRecord() method right? Shall we get rid of one of these? Also simplify the logic as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390091784", "createdAt": "2020-03-10T04:38:50Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bd01fffb3fd3e8e70ea65a25504d2f02998151"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5MQ==", "bodyText": "This method validates on all the fields of the RecordType for RemoveAll implementation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390252791", "createdAt": "2020-03-10T11:34:38Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTc4NA=="}, "originalCommit": {"oid": "b1bd01fffb3fd3e8e70ea65a25504d2f02998151"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 925, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}