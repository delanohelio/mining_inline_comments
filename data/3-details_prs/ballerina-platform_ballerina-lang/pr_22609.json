{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzI1ODc3", "number": 22609, "title": "Add is expression support", "bodyText": "Purpose\n\nAdd is expression support\n\nFixes #22436\nApproach\n\nN/A\n\nSamples\n\nN/A\n\nRemarks\n\nN/A\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-14T17:46:12Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609", "merged": true, "mergeCommit": {"oid": "91c5b018d3fd16644a6c56d31c5d1bd569edf13e"}, "closed": true, "closedAt": "2020-04-16T09:35:41Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWMlRJgH2gAyNDAzMzI1ODc3OmNjNjc5M2NmM2UyZWEyYzZkYjk5NDIzZmNiOGM0M2UyNTA5MTQ2MzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYJXw5AFqTM5NDQ1MDgxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cc6793cf3e2ea2c6db99423fcb8c43e250914635", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc6793cf3e2ea2c6db99423fcb8c43e250914635", "committedDate": "2020-04-10T08:11:59Z", "message": "Add is expression support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "531bfe51021e511a43ee8a8cec21becf42cf9ab3", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/531bfe51021e511a43ee8a8cec21becf42cf9ab3", "committedDate": "2020-04-10T08:13:17Z", "message": "Add test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00eae0a7eb9a5f3c0b3fdd761f9bc7bba0822512", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00eae0a7eb9a5f3c0b3fdd761f9bc7bba0822512", "committedDate": "2020-04-13T17:18:14Z", "message": "Add error recovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d328f7ad77eea4074305f4b0503399cc07d94e80", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d328f7ad77eea4074305f4b0503399cc07d94e80", "committedDate": "2020-04-14T13:47:48Z", "message": "Fix TypeDescriptor Recovery for EOF TOKEN"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "246d9377d33851301e7f0d8175a7d3b672e67cfa", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/246d9377d33851301e7f0d8175a7d3b672e67cfa", "committedDate": "2020-04-14T13:50:07Z", "message": "Fix test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29268fe43c9d64ff27a34720495741e58d7c8337", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29268fe43c9d64ff27a34720495741e58d7c8337", "committedDate": "2020-04-14T14:14:37Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "committedDate": "2020-04-14T18:37:35Z", "message": "Fix public node after merging"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c672551260881c27a792f82fbd3ede05d114aa48", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c672551260881c27a792f82fbd3ede05d114aa48", "committedDate": "2020-04-14T17:42:30Z", "message": "Fix public node after merging"}, "afterCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "committedDate": "2020-04-14T18:37:35Z", "message": "Fix public node after merging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDEyNTky", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#pullrequestreview-393412592", "createdAt": "2020-04-15T02:13:39Z", "commit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjoxMzo0MFrOGFnVTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo1MTo1NFrOGFn8cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDQ5NQ==", "bodyText": "Why do we need to special case is keyword here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408540495", "createdAt": "2020-04-15T02:13:40Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2699,6 +2707,8 @@ private STNode parseExpressionRhs(OperatorPrecedence currentPrecedenceLevel, Syn\n                 // that matches to the current operator precedence level, and continue.\n                 SyntaxKind binaryOpKind = getOperatorKindToInsert(currentPrecedenceLevel);\n                 return parseExpressionRhs(currentPrecedenceLevel, binaryOpKind, lhsExpr, isAssignmentLhs);\n+            } else if (solution.ctx == ParserRuleContext.IS_KEYWORD) {\n+                return parseExpressionRhs(currentPrecedenceLevel, SyntaxKind.IS_KEYWORD, lhsExpr, isAssignmentLhs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA==", "bodyText": "Does these two lines needs to be switched?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408540870", "createdAt": "2020-04-15T02:15:12Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4702,5 +4716,37 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Parse is expression.\n+     * <code>\n+     * is-expr := expression is type-descriptor\n+     * </code>\n+     *\n+     * @param lhsExpr Preceding expression of the is expression\n+     * @return Is expression node\n+     */\n+    private STNode parseIsExpression(STNode lhsExpr) {\n+        STNode isKeyword = parseIsKeyword();\n+        startContext(ParserRuleContext.IS_EXPRESSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0NDI3NQ==", "bodyText": "Do we need to start a context at all?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408544275", "createdAt": "2020-04-15T02:28:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4702,5 +4716,37 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Parse is expression.\n+     * <code>\n+     * is-expr := expression is type-descriptor\n+     * </code>\n+     *\n+     * @param lhsExpr Preceding expression of the is expression\n+     * @return Is expression node\n+     */\n+    private STNode parseIsExpression(STNode lhsExpr) {\n+        STNode isKeyword = parseIsKeyword();\n+        startContext(ParserRuleContext.IS_EXPRESSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTI1Mg==", "bodyText": "ParserErrorHandle should handle this IMO", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408549252", "createdAt": "2020-04-15T02:47:03Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1421,7 +1423,12 @@ private STNode parseTypeDescriptor(SyntaxKind tokenKind) {\n                 return parseNilTypeDescriptor();\n             default:\n                 STToken token = peek();\n-                Solution solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                Solution solution;\n+                if (token.kind == SyntaxKind.EOF_TOKEN) {\n+                    solution = recover(token, ParserRuleContext.SIMPLE_TYPE_DESCRIPTOR);\n+                } else {\n+                    solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw==", "bodyText": "Can't we handle this in a similar way to the binary expression?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408550033", "createdAt": "2020-04-15T02:49:54Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -824,6 +824,11 @@ private Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curren\n                 case UNARY_OPERATOR:\n                     hasMatch = isUnaryOperator(nextToken);\n                     break;\n+                case IS_KEYWORD:\n+                    hasMatch = nextToken.kind == SyntaxKind.IS_KEYWORD;\n+                    break;\n+                case IS_EXPRESSION:\n+                    return seekInIsExpression(currentCtx, lookahead, currentDepth, matchingRulesCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDUxNA==", "bodyText": "startContext() is only called at one place currently. Can we stick to that?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408550514", "createdAt": "2020-04-15T02:51:54Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1520,6 +1527,9 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n                 return ParserRuleContext.UNARY_OPERATOR;\n             case UNARY_OPERATOR:\n                 return ParserRuleContext.EXPRESSION;\n+            case IS_KEYWORD:\n+                startContext(ParserRuleContext.IS_EXPRESSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9fd152cb706e6a80c5e2fe4634daa269fc5a2c3", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9fd152cb706e6a80c5e2fe4634daa269fc5a2c3", "committedDate": "2020-04-15T06:30:49Z", "message": "Fix error recovery issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0c2acf271cb4b7ec3a8a4aecfd267b058fd82ea", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0c2acf271cb4b7ec3a8a4aecfd267b058fd82ea", "committedDate": "2020-04-15T06:31:26Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d94e2ace467bcf709be5e35e59f2b86d157d1a4e", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d94e2ace467bcf709be5e35e59f2b86d157d1a4e", "committedDate": "2020-04-15T06:53:22Z", "message": "Generate public nodes from treegen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f7f4749737658a2be7dd48d94ab3209a84e534e", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f7f4749737658a2be7dd48d94ab3209a84e534e", "committedDate": "2020-04-15T11:34:50Z", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/ParserRuleContext.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/ParserTestUtils.java\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f166f840153439b5784d213318851761990aa2", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40f166f840153439b5784d213318851761990aa2", "committedDate": "2020-04-15T11:52:36Z", "message": "Regenerate Tree with new changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa67aeb80eff705a5e7df4f132289d8c6dd1e0d", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6fa67aeb80eff705a5e7df4f132289d8c6dd1e0d", "committedDate": "2020-04-15T12:51:22Z", "message": "Fix functionality after merging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NDUwODE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#pullrequestreview-394450816", "createdAt": "2020-04-16T09:21:25Z", "commit": {"oid": "6fa67aeb80eff705a5e7df4f132289d8c6dd1e0d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToyMToyNVrOGGcYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToyMToyNVrOGGcYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwOTU1Mg==", "bodyText": "Incorrect indentation.\nI'l merge this PR anyway. Please fix it in the next PR.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r409409552", "createdAt": "2020-04-16T09:21:25Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1353,10 +1359,10 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n                     endContext(); // end parameter-list\n                 }\n                 if (parentCtx == ParserRuleContext.NIL_TYPE_DESCRIPTOR) {\n-                    endContext();\n-                    // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n-                    return getNextRuleForTypeDescriptor();\n-                }\n+                endContext();\n+                // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n+                return getNextRuleForTypeDescriptor();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fa67aeb80eff705a5e7df4f132289d8c6dd1e0d"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4061, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}