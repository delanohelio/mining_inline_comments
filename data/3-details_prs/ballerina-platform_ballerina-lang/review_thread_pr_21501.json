{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjQyMTc0", "number": 21501, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowODoxN1rODmjlog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoyMzoxOFrODmjuoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzU1NTU0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowODoxN1rOF0CeKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDoyMDoyOVrOF0oypw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean needsFilling = index >= size;\n          \n          \n            \n                        if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {\n          \n          \n            \n                        if (index >= size && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390110761", "createdAt": "2020-03-10T06:08:17Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -229,9 +229,21 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        if (refValues != null) {\n+            boolean needsFilling = index >= size;\n+            if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTQ4NA==", "bodyText": "Why are we specifically checking for array-typed elements though? This is valid for any array with an element type for which fill member is valid right?\nThe following seems to crash.\npublic function main() {\n    map<int>[] arr = [];\n\n    arr[0][\"i\"] = 1;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390111484", "createdAt": "2020-03-10T06:11:02Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -229,9 +229,21 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        if (refValues != null) {\n+            boolean needsFilling = index >= size;\n+            if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMzA2OA==", "bodyText": "I think we should also check if fill member is valid for this particular element type before calling .getZeroValue().\nThe following also crashes\nimport ballerina/io;\n\npublic function main() {\n    Foo[][2] arr = [];\n\n    arr[0][1] = {s: \"\"}; // should fail here since Foo doesn't have a filler value\n\n    io:println(arr[0][0].s); // fails since this particular `Foo` doesn't have a field `s`\n}\n\ntype Foo record {\n    string s;\n};\nballerina-internal.log\n[2020-03-10 11:46:37,334] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat abc.main(abc.bal:8)\n\tat ___init.$lambda$main$(.)\n\tat org.ballerinalang.jvm.scheduling.SchedulerItem.execute(Scheduler.java:426)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.run(Scheduler.java:218)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.runSafely(Scheduler.java:191)\n\tat java.lang.Thread.run(Thread.java:745)\n \n[2020-03-10 11:46:37,339] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat abc.main(abc.bal:8)\n\tat ___init.$lambda$main$(.)\n\tat org.ballerinalang.jvm.scheduling.SchedulerItem.execute(Scheduler.java:426)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.run(Scheduler.java:218)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.runSafely(Scheduler.java:191)\n\tat java.lang.Thread.run(Thread.java:745)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390113068", "createdAt": "2020-03-10T06:17:36Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -229,9 +229,21 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        if (refValues != null) {\n+            boolean needsFilling = index >= size;\n+            if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNzczMw==", "bodyText": "The add() method has the logic for checking if a particular type has a filler value. Will check and see what's going on here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390117733", "createdAt": "2020-03-10T06:36:54Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -229,9 +229,21 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        if (refValues != null) {\n+            boolean needsFilling = index >= size;\n+            if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczODU5OQ==", "bodyText": "Fixed this by adding a separate fillRead() method instead of relying on the add() method. Some of the logic in the add() method wasn't really applicable to the fill-read case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390738599", "createdAt": "2020-03-11T04:20:29Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -229,9 +229,21 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        if (refValues != null) {\n+            boolean needsFilling = index >= size;\n+            if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzU3NzI0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TupleValueImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoyMjoxM1rOF0CraQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDoxODo1N1rOF0oxcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDE1Mw==", "bodyText": "Shouldn't we implement the same for tuples too?\nThe following fails with an index out of range?\npublic function main() {\n    [boolean, int[]...] x = [true];\n\n    x[1][1] = 1;\n}\nThe following also\npublic function main() {\n    [boolean, [float, int]...] x = [true];\n\n    x[1][1] = 1;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390114153", "createdAt": "2020-03-10T06:22:13Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TupleValueImpl.java", "diffHunk": "@@ -163,6 +163,11 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        return get(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczODI4OQ==", "bodyText": "This was fixed by adding a fillRead() method for tuple as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390738289", "createdAt": "2020-03-11T04:18:57Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TupleValueImpl.java", "diffHunk": "@@ -163,6 +163,11 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        return get(index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDE1Mw=="}, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzU3ODU3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArrayLValueFillTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoyMzoxOFrOF0CsXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0MToyOFrOF0LViw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDM5OA==", "bodyText": "Can't we write these tests in Ballerina? Maybe in a separate PR?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390114398", "createdAt": "2020-03-10T06:23:18Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArrayLValueFillTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValueArray;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.ballerinalang.util.exceptions.BLangRuntimeException;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+/**\n+ * Test cases for filling the elements of a multi-dimensional array when it is used as an LValue.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ArrayLValueFillTest {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        compileResult = BCompileUtil.compile(\"test-src/statements/arrays/array_lvalue_fill_test.bal\");\n+    }\n+\n+    @Test\n+    public void testSimpleBasic2DArrays() {\n+        BRunUtil.invoke(compileResult, \"testSimpleBasic2DArrays\");\n+    }\n+\n+    @Test\n+    public void test2DRecordArrays() {\n+        BRunUtil.invoke(compileResult, \"test2DRecordArrays\");\n+    }\n+\n+    @Test\n+    public void test2DObjectArrays() {\n+        BValueArray arr = (BValueArray) BRunUtil.invokeFunction(compileResult, \"test2DObjectArrays\")[0];\n+\n+        assertEquals(arr.size(), 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NjAxMQ==", "bodyText": "For non-anydata types, there's no direct way to compare values for equality right? That's why I wrote them in Java for objects.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390256011", "createdAt": "2020-03-10T11:41:28Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArrayLValueFillTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValueArray;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.ballerinalang.util.exceptions.BLangRuntimeException;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+/**\n+ * Test cases for filling the elements of a multi-dimensional array when it is used as an LValue.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ArrayLValueFillTest {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        compileResult = BCompileUtil.compile(\"test-src/statements/arrays/array_lvalue_fill_test.bal\");\n+    }\n+\n+    @Test\n+    public void testSimpleBasic2DArrays() {\n+        BRunUtil.invoke(compileResult, \"testSimpleBasic2DArrays\");\n+    }\n+\n+    @Test\n+    public void test2DRecordArrays() {\n+        BRunUtil.invoke(compileResult, \"test2DRecordArrays\");\n+    }\n+\n+    @Test\n+    public void test2DObjectArrays() {\n+        BValueArray arr = (BValueArray) BRunUtil.invokeFunction(compileResult, \"test2DObjectArrays\")[0];\n+\n+        assertEquals(arr.size(), 3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDM5OA=="}, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 934, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}