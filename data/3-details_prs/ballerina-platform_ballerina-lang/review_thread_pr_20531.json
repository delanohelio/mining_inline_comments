{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NTcwODIy", "number": 20531, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDo1ODowM1rODV_ocQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNDozNTo1MlrODWb63g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mzg5MjMzOnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/http_commons.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDo1ODowM1rOFafyvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDozODoxMlrOFavr_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyODE4OA==", "bodyText": "What is the reason to interchange this else if condition?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r363328188", "createdAt": "2020-01-06T14:58:03Z", "author": {"login": "KavinduZoysa"}, "path": "stdlib/http/src/main/ballerina/src/http/http_commons.bal", "diffHunk": "@@ -242,10 +242,10 @@ function buildResponse(ResponseMessage message) returns Response {\n         response.setTextPayload(message);\n     } else if (message is xml) {\n         response.setXmlPayload(message);\n-    } else if (message is json) {\n-        response.setJsonPayload(message);\n     } else if (message is byte[]) {\n         response.setBinaryPayload(message);\n+    } else if (message is json) {\n+        response.setJsonPayload(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32818b96bc8e24be153aea2ba5fabdfe6627c216"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMzMzIzNQ==", "bodyText": "Take the following code snippet\ntype Person record {\n    \n};\n\npublic function main() {\n   int[] | json | Person value = \"\";\n   if (value is json) {\n       // do something\n   } else if( value is int[]) { // <--- error on this line\n       //do something\n   }\n}\nThe above code snippet prints out the following error.\nPerson' will not be matched to 'int[]'\nThis is because the is json check also captures int[], since int can be used as json.\nAnd when we are in the else clause the type is narrowed to Person.\nThe reason for interchanging else if above is because of this but for type byte[]\nps: please correct me if my understanding is wrong here @MaryamZi  @pubudu91 @rdhananjaya  :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r363333235", "createdAt": "2020-01-06T15:09:38Z", "author": {"login": "irshadnilam"}, "path": "stdlib/http/src/main/ballerina/src/http/http_commons.bal", "diffHunk": "@@ -242,10 +242,10 @@ function buildResponse(ResponseMessage message) returns Response {\n         response.setTextPayload(message);\n     } else if (message is xml) {\n         response.setXmlPayload(message);\n-    } else if (message is json) {\n-        response.setJsonPayload(message);\n     } else if (message is byte[]) {\n         response.setBinaryPayload(message);\n+    } else if (message is json) {\n+        response.setJsonPayload(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyODE4OA=="}, "originalCommit": {"oid": "32818b96bc8e24be153aea2ba5fabdfe6627c216"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4ODYwNA==", "bodyText": "Yeah, basically a byte is json, and therefore a byte[] is also json.\nSo, when using the type guard, if the json type test comes before the byte[] type test, the byte[] type test will never be evaluated to true since any byte[] is a json.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r363588604", "createdAt": "2020-01-07T04:38:12Z", "author": {"login": "MaryamZi"}, "path": "stdlib/http/src/main/ballerina/src/http/http_commons.bal", "diffHunk": "@@ -242,10 +242,10 @@ function buildResponse(ResponseMessage message) returns Response {\n         response.setTextPayload(message);\n     } else if (message is xml) {\n         response.setXmlPayload(message);\n-    } else if (message is json) {\n-        response.setJsonPayload(message);\n     } else if (message is byte[]) {\n         response.setBinaryPayload(message);\n+    } else if (message is json) {\n+        response.setJsonPayload(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyODE4OA=="}, "originalCommit": {"oid": "32818b96bc8e24be153aea2ba5fabdfe6627c216"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODUyMzU1OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/nats/src/main/ballerina/src/nats/commons.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNDozMjoxNlrOFbMeTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNTowNzoxNlrOFbMzHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDIzNg==", "bodyText": "Can we check with the std lib team if this order change is OK? Since this used to be the last case, just to make sure we aren't making the least likely usage the first check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r364060236", "createdAt": "2020-01-08T04:32:16Z", "author": {"login": "MaryamZi"}, "path": "stdlib/messaging/nats/src/main/ballerina/src/nats/commons.bal", "diffHunk": "@@ -20,7 +20,9 @@ public type Content byte[] | boolean | string | int | float | decimal | xml | js\n \n function convertData(Content data) returns string | byte[] | error {\n     string | byte[] | error converted;\n-    if (data is boolean) {\n+    if (data is byte[]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b54bce93d3e6eaebe9f988dd17dad3d3bfc59047"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDg5Mg==", "bodyText": "@daneshk @aashikam FYA please.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r364060892", "createdAt": "2020-01-08T04:36:35Z", "author": {"login": "MaryamZi"}, "path": "stdlib/messaging/nats/src/main/ballerina/src/nats/commons.bal", "diffHunk": "@@ -20,7 +20,9 @@ public type Content byte[] | boolean | string | int | float | decimal | xml | js\n \n function convertData(Content data) returns string | byte[] | error {\n     string | byte[] | error converted;\n-    if (data is boolean) {\n+    if (data is byte[]) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDIzNg=="}, "originalCommit": {"oid": "b54bce93d3e6eaebe9f988dd17dad3d3bfc59047"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2NTU2Nw==", "bodyText": "Order doesn't matter. should be fine", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r364065567", "createdAt": "2020-01-08T05:07:16Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/nats/src/main/ballerina/src/nats/commons.bal", "diffHunk": "@@ -20,7 +20,9 @@ public type Content byte[] | boolean | string | int | float | decimal | xml | js\n \n function convertData(Content data) returns string | byte[] | error {\n     string | byte[] | error converted;\n-    if (data is boolean) {\n+    if (data is byte[]) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDIzNg=="}, "originalCommit": {"oid": "b54bce93d3e6eaebe9f988dd17dad3d3bfc59047"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODUyNTEzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/jsontype/json-value.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNDozMzozNVrOFbMfJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNjoyNDoxN1rOFbNntg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDQ1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function testByteAsJsonVal() returns (json) {\n          \n          \n            \n            function testByteAsJsonVal() returns json {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r364060454", "createdAt": "2020-01-08T04:33:35Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/jsontype/json-value.bal", "diffHunk": "@@ -13,6 +13,12 @@ function testFloatAsJsonVal () returns (json) {\n     return j;\n }\n \n+function testByteAsJsonVal() returns (json) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b54bce93d3e6eaebe9f988dd17dad3d3bfc59047"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3OTAzMA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r364079030", "createdAt": "2020-01-08T06:24:17Z", "author": {"login": "irshadnilam"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/jsontype/json-value.bal", "diffHunk": "@@ -13,6 +13,12 @@ function testFloatAsJsonVal () returns (json) {\n     return j;\n }\n \n+function testByteAsJsonVal() returns (json) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDQ1NA=="}, "originalCommit": {"oid": "b54bce93d3e6eaebe9f988dd17dad3d3bfc59047"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODUyNTgxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/byte/byte_as_json_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNDozNDoyM1rOFbMfkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNjoyNDoyNVrOFbNnzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDU2MA==", "bodyText": "Shall we reformat this bit? Noticed it's off to the int tests too, can you please reformat that too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r364060560", "createdAt": "2020-01-08T04:34:23Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/byte/byte_as_json_test.bal", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+byte globalByte0 = 0;\n+byte globalByte30 = 30;\n+byte globalByte255 = 255;\n+\n+function testByteAsJson() returns boolean {\n+    byte b0 = 0;\n+    json j0 = b0;\n+    json ig0 = globalByte0;\n+    boolean byte0AsJson = j0 == ig0 && j0 == 0;\n+\n+    byte b30 = 30;\n+    json j30 = takeAJson(b30);\n+    json jg30 = globalByte30;\n+    boolean byte30AsJson = j30 == jg30 && j30 == 30;\n+\n+    byte b255 = 255;\n+    json j255 = b255;\n+    json jg255 = takeAJson(globalByte255);\n+    boolean byte255AsJson = j255 == jg255 && j255 == 255;\n+\n+    return byte0AsJson && byte30AsJson && byte255AsJson;\n+}\n+\n+function takeAJson(json j) returns json {\n+    return j;\n+}\n+\n+function testByteDowncastFromJson() returns boolean {\n+    json j0 = globalByte0;\n+    byte b0 = <byte> j0;\n+\n+    byte bl178 = 178;\n+    json j178 = bl178;\n+    byte b178 = <byte> j178;\n+\n+    json j255 = globalByte255;\n+    byte b255 = <byte> j255;\n+\n+    return b0 == 0 && b178 == 178 && b255 == 255;\n+}\n+\n+function testByteArrayDowncastFromJsonArray() returns boolean {\n+    byte b0 = 0;\n+    byte[] barr = [b0, 1, globalByte255];\n+    json[] jarr = barr;\n+\n+    byte b178 = 178;\n+    jarr.push(b178);\n+\n+    byte[] barr2 = <byte[]> jarr;\n+\n+    return barr2.length() == 4 &&\n+            barr2[0] == 0 && barr2[1] == <byte> 1 && barr2[2] == globalByte255 && barr2[3] == b178;\n+}\n+\n+function testBytesInJsonArray() returns boolean {\n+    byte b0 = 0;\n+    byte b178 = 178;\n+    byte b255 = 255;\n+\n+    json[] arr = [-1, b0, 120, b178, b255, 340];\n+\n+    foreach [int, json][index, val] in arr.enumerate() {\n+\t\tmatch index {\n+\t\t    1 => {\n+\t\t        if val != b0 {\n+\t\t            return false;\n+\t\t        }\n+\t\t    }\n+            3 => {\n+                if val != 178 {\n+                    return false;\n+                }\n+            }\n+            4 => {\n+                if val != b255 {\n+                    return false;\n+                }\n+            }\n+            _ => {\n+                if val != arr[index] {\n+                    return false;\n+                }\n+            }\n+\t\t}\n+\t}\n+\treturn true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b54bce93d3e6eaebe9f988dd17dad3d3bfc59047"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3OTA1Mg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r364079052", "createdAt": "2020-01-08T06:24:25Z", "author": {"login": "irshadnilam"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/byte/byte_as_json_test.bal", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+byte globalByte0 = 0;\n+byte globalByte30 = 30;\n+byte globalByte255 = 255;\n+\n+function testByteAsJson() returns boolean {\n+    byte b0 = 0;\n+    json j0 = b0;\n+    json ig0 = globalByte0;\n+    boolean byte0AsJson = j0 == ig0 && j0 == 0;\n+\n+    byte b30 = 30;\n+    json j30 = takeAJson(b30);\n+    json jg30 = globalByte30;\n+    boolean byte30AsJson = j30 == jg30 && j30 == 30;\n+\n+    byte b255 = 255;\n+    json j255 = b255;\n+    json jg255 = takeAJson(globalByte255);\n+    boolean byte255AsJson = j255 == jg255 && j255 == 255;\n+\n+    return byte0AsJson && byte30AsJson && byte255AsJson;\n+}\n+\n+function takeAJson(json j) returns json {\n+    return j;\n+}\n+\n+function testByteDowncastFromJson() returns boolean {\n+    json j0 = globalByte0;\n+    byte b0 = <byte> j0;\n+\n+    byte bl178 = 178;\n+    json j178 = bl178;\n+    byte b178 = <byte> j178;\n+\n+    json j255 = globalByte255;\n+    byte b255 = <byte> j255;\n+\n+    return b0 == 0 && b178 == 178 && b255 == 255;\n+}\n+\n+function testByteArrayDowncastFromJsonArray() returns boolean {\n+    byte b0 = 0;\n+    byte[] barr = [b0, 1, globalByte255];\n+    json[] jarr = barr;\n+\n+    byte b178 = 178;\n+    jarr.push(b178);\n+\n+    byte[] barr2 = <byte[]> jarr;\n+\n+    return barr2.length() == 4 &&\n+            barr2[0] == 0 && barr2[1] == <byte> 1 && barr2[2] == globalByte255 && barr2[3] == b178;\n+}\n+\n+function testBytesInJsonArray() returns boolean {\n+    byte b0 = 0;\n+    byte b178 = 178;\n+    byte b255 = 255;\n+\n+    json[] arr = [-1, b0, 120, b178, b255, 340];\n+\n+    foreach [int, json][index, val] in arr.enumerate() {\n+\t\tmatch index {\n+\t\t    1 => {\n+\t\t        if val != b0 {\n+\t\t            return false;\n+\t\t        }\n+\t\t    }\n+            3 => {\n+                if val != 178 {\n+                    return false;\n+                }\n+            }\n+            4 => {\n+                if val != b255 {\n+                    return false;\n+                }\n+            }\n+            _ => {\n+                if val != arr[index] {\n+                    return false;\n+                }\n+            }\n+\t\t}\n+\t}\n+\treturn true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDU2MA=="}, "originalCommit": {"oid": "b54bce93d3e6eaebe9f988dd17dad3d3bfc59047"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODUyNzAyOnYy", "diffSide": "LEFT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionNegativeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNDozNTo1MlrOFbMgWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNjoyNDo0NlrOFbNoDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDc2MA==", "bodyText": "Instead of removing this and the tests in https://github.com/ballerina-platform/ballerina-lang/pull/20531/files#diff-17ddc3514c16ada932b765cb849594b1L228, shall we change the tests to use some other non-JSON compatible field?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r364060760", "createdAt": "2020-01-08T04:35:52Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionNegativeTest.java", "diffHunk": "@@ -87,14 +87,6 @@ public void testTupleConversionFail() {\n                 + \"T2]'\");\n     }\n \n-    @Test(description = \"Test converting an unsupported array to json\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b54bce93d3e6eaebe9f988dd17dad3d3bfc59047"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3OTExOA==", "bodyText": "Fixed with 091f20e", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20531#discussion_r364079118", "createdAt": "2020-01-08T06:24:46Z", "author": {"login": "irshadnilam"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/conversion/NativeConversionNegativeTest.java", "diffHunk": "@@ -87,14 +87,6 @@ public void testTupleConversionFail() {\n                 + \"T2]'\");\n     }\n \n-    @Test(description = \"Test converting an unsupported array to json\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2MDc2MA=="}, "originalCommit": {"oid": "b54bce93d3e6eaebe9f988dd17dad3d3bfc59047"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 614, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}