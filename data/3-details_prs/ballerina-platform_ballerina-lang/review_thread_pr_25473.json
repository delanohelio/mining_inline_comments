{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NjU2ODE2", "number": 25473, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzoyNzoyMFrOEddfhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzozMToyOVrOEddiVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzI3MzY1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzoyNzoyMFrOHIoPhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwNjowMDoxNVrOHJgLFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwOTk5MA==", "bodyText": "Shall we end the join-clause context before parsing the on-clause. like we had earlier?\n\nSince we already have a expr parsing(L9504) within join-clause context, cannot parse another expr under the same parent context as there would be an ambiguity.\nIn the error handler get next rule for the expression-rhs when the parent ctx is  join-clause includes on-clause as an alternative path.\nConsider recovery for, from int a in b join int d in e on <missing expr> select f\nafter recoverying the missing expr, error handler will then check on-clause as the next rule.\ni.e could have two on-clauses after recovery", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25473#discussion_r478809990", "createdAt": "2020-08-28T03:27:20Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9486,16 +9502,8 @@ private STNode parseJoinClause(boolean isRhsExpr) {\n         // allow-actions flag is always false, since there will not be any actions\n         // within the from-clause, due to the precedence.\n         STNode expression = parseExpression(OperatorPrecedence.QUERY, isRhsExpr, false);\n+        STNode onCondition = parseOnClause(isRhsExpr);\n         endContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e581773d8653a2cc563ab804e4e5d8bd82b99f5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxMjg2OQ==", "bodyText": "Pleas update the doc comment above this method indicating optional on-clause as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25473#discussion_r478812869", "createdAt": "2020-08-28T03:39:11Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9486,16 +9502,8 @@ private STNode parseJoinClause(boolean isRhsExpr) {\n         // allow-actions flag is always false, since there will not be any actions\n         // within the from-clause, due to the precedence.\n         STNode expression = parseExpression(OperatorPrecedence.QUERY, isRhsExpr, false);\n+        STNode onCondition = parseOnClause(isRhsExpr);\n         endContext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwOTk5MA=="}, "originalCommit": {"oid": "2e581773d8653a2cc563ab804e4e5d8bd82b99f5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3Njc0OA==", "bodyText": "According to the spec, on-clause is part of the join clause. So I assumed context should be closed ones everything is parsed. I'm confused here on what is context and how it works. Is there documentation which I can refer to?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25473#discussion_r479376748", "createdAt": "2020-08-28T15:26:00Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9486,16 +9502,8 @@ private STNode parseJoinClause(boolean isRhsExpr) {\n         // allow-actions flag is always false, since there will not be any actions\n         // within the from-clause, due to the precedence.\n         STNode expression = parseExpression(OperatorPrecedence.QUERY, isRhsExpr, false);\n+        STNode onCondition = parseOnClause(isRhsExpr);\n         endContext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwOTk5MA=="}, "originalCommit": {"oid": "2e581773d8653a2cc563ab804e4e5d8bd82b99f5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyNjM1Nw==", "bodyText": "Spec says follows, and according to that equals is only valid within a join. So, If we close the join context before finishing up with the join-on-condition, how are we suppose to know, for example on expression should followed by an equals?\njoin-clause := \"join\" typed-binding-pattern \"in\" expression join-on-condition\njoin-on-condition := \"on\" expression \"equals\" expression", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25473#discussion_r479726357", "createdAt": "2020-08-30T06:00:15Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -9486,16 +9502,8 @@ private STNode parseJoinClause(boolean isRhsExpr) {\n         // allow-actions flag is always false, since there will not be any actions\n         // within the from-clause, due to the precedence.\n         STNode expression = parseExpression(OperatorPrecedence.QUERY, isRhsExpr, false);\n+        STNode onCondition = parseOnClause(isRhsExpr);\n         endContext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwOTk5MA=="}, "originalCommit": {"oid": "2e581773d8653a2cc563ab804e4e5d8bd82b99f5"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzI4MDg2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzozMToyOVrOHIoTmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzozMToyOVrOHIoTmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxMTAzNA==", "bodyText": "This is related to above comment. Since we end the join-clause ctx for on-clause we don't need this if condition.\nnext rule will be taken as expresssion under QUERY_EXPRESSION parent context in L2731-L2732", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25473#discussion_r478811034", "createdAt": "2020-08-28T03:31:29Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2730,6 +2730,8 @@ private ParserRuleContext getNextRuleForKeywords(ParserRuleContext currentCtx, i\n                     return ParserRuleContext.CONFLICT_KEYWORD;\n                 } else if (parentCtx == ParserRuleContext.QUERY_EXPRESSION) {\n                     return ParserRuleContext.EXPRESSION;\n+                } else if (parentCtx == ParserRuleContext.JOIN_CLAUSE) {\n+                    return ParserRuleContext.EXPRESSION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e581773d8653a2cc563ab804e4e5d8bd82b99f5"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 290, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}