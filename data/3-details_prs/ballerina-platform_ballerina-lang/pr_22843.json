{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTMwNTk3", "number": 22843, "title": "Add listener functionality to receive emails", "bodyText": "Purpose\nReceive emails as a trigger from the email receive operation of an external POP3/IMAP4 server.\nFixes #22844\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-22T20:31:21Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843", "merged": true, "mergeCommit": {"oid": "2e1d4d0fc308a3ec9dba46baa14292e8768e092b"}, "closed": true, "closedAt": "2020-04-29T12:05:59Z", "author": {"login": "Maninda"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaOTFpAH2gAyNDA3NTMwNTk3OjkyNWM2M2MxNWM5ZGU5N2U1ZmZkYjlhZWU5ZGI3MzQzZmI3NTg0MDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccUd2YAFqTQwMjQ3MjM4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "925c63c15c9de97e5ffdb9aee9db7343fb758406", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/925c63c15c9de97e5ffdb9aee9db7343fb758406", "committedDate": "2020-04-22T20:27:38Z", "message": "Add listener functionality to receive emails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37525b9303d4ce8c71d14dcfec003890a761942f", "committedDate": "2020-04-22T21:00:21Z", "message": "Fix an API doc issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzYxOTIw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-398761920", "createdAt": "2020-04-23T05:06:42Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTowNjo0MlrOGKWxBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTowNjo0MlrOGKWxBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMTk0MA==", "bodyText": "Adding username to above info statement will improve the usability more IMO.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413511940", "createdAt": "2020-04-23T05:06:42Z", "author": {"login": "wggihan"}, "path": "stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java;\n+import ballerina/lang.'object as lang;\n+import ballerina/log;\n+import ballerina/task;\n+\n+# Represents a service listener that monitors the email server location.\n+public type Listener object {\n+\n+    *lang:Listener;\n+\n+    private handle EMPTY_JAVA_STRING = java:fromString(\"\");\n+    private ListenerConfig config = {};\n+    private task:Scheduler? appointment = ();\n+    private handle? serverConnector = ();\n+\n+    # Gets invoked during the `email:Listener` initialization.\n+    #\n+    # + ListenerConfig - Configurations for Email endpoint\n+    public function __init(ListenerConfig listenerConfig) {\n+        self.config = listenerConfig;\n+    }\n+\n+    # Starts the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__start();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to start the listener\n+    public function __start() returns error? {\n+        return self.start();\n+    }\n+\n+    # Stops the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__stop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __stop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Binds a service to the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__attach(helloService, hello);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - `()` or else a `email:Error` upon failure to register the listener\n+    public function __attach(service s, string? name) returns error? {\n+        return self.register(s, name);\n+    }\n+\n+    # Stops consuming messages and detaches the service from the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__detach(helloService);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + return - `()` or else a `email:Error` upon failure to detach the service\n+    public function __detach(service s) returns error? {\n+\n+    }\n+\n+    # Stops the `email:Listener` forcefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__immediateStop();\n+    # ```\n+    #\n+    # + return - `()` or else a `email:Error` upon failure to stop the listener\n+    public function __immediateStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Stops the `email:Listener` gracefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__gracefulStop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __gracefulStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    function start() returns error? {\n+        var scheduler = self.config.cronExpression;\n+        if (scheduler is string) {\n+            task:AppointmentConfiguration config = {appointmentDetails: scheduler};\n+            self.appointment = new(config);\n+        } else {\n+            task:TimerConfiguration config = {intervalInMillis: self.config.pollingInterval, initialDelayInMillis: 100};\n+            self.appointment = new (config);\n+        }\n+        var appointment = self.appointment;\n+        if (appointment is task:Scheduler) {\n+            check appointment.attach(appointmentService, self);\n+            check appointment.start();\n+        }\n+        log:printInfo(\"Listening to remote server at \" + self.config.host + \"...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzYyNTM3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-398762537", "createdAt": "2020-04-23T05:08:42Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTowODo0MlrOGKWzcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTowODo0MlrOGKWzcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMjU2MQ==", "bodyText": "Do we need this? Isn't that the log in line no 134 give the same info?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413512561", "createdAt": "2020-04-23T05:08:42Z", "author": {"login": "wggihan"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -114,21 +114,28 @@ public static Object readMessage(ObjectValue clientConnector, String folder) {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n+            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+                    + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n-            emailFolder.open(Folder.READ_WRITE);\n-            Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n             MapValue mapValue = null;\n-            if (messages.length > 0) {\n-                Flags flags = new Flags();\n-                flags.add(Flags.Flag.SEEN);\n-                emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n-                mapValue = EmailAccessUtil.getMapValue(messages[0]);\n+            if (emailFolder == null) {\n+                log.error(\"Email store folder is not found.\");\n+            } else {\n+                emailFolder.open(Folder.READ_WRITE);\n+                Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n+                if (messages.length > 0) {\n+                    log.debug(\"Emails are available in the store.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzYzMzAz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-398763303", "createdAt": "2020-04-23T05:11:10Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNToxMToxMFrOGKW2uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNToxMToxMFrOGKW2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMzQwMQ==", "bodyText": "Do we need this log, since the error going to dispatch to the onError?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413513401", "createdAt": "2020-04-23T05:11:10Z", "author": {"login": "wggihan"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.client.EmailAccessClient;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+/**\n+ * Provides the capability to read an email and forward it to a listener.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailConsumer {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailConsumer.class);\n+\n+    private EmailListener emailListener;\n+    private ObjectValue client;\n+\n+    /**\n+     * Constructor for the EmailConsumer.\n+     *\n+     * @param emailProperties Map of property values\n+     * @param listener Forwards the received emails to Ballerina code\n+     */\n+    public EmailConsumer(Map<String, Object> emailProperties, EmailListener listener) {\n+        this.emailListener = listener;\n+        String host = (String) emailProperties.get(EmailConstants.PROPS_HOST);\n+        String username = (String) emailProperties.get(EmailConstants.PROPS_USERNAME);\n+        String password = (String) emailProperties.get(EmailConstants.PROPS_PASSWORD);\n+        String protocol = (String) emailProperties.get(EmailConstants.PROPS_PROTOCOL);\n+        MapValue protocolConfig = (MapValue) emailProperties.get(EmailConstants.PROTOCOL_CONFIG);\n+        if (protocol.equals(EmailConstants.IMAP)) {\n+            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.IMAP_CLIENT,\n+                    host, username, password, (MapValue<Object, Object>) protocolConfig);\n+            EmailAccessClient.initImapClientEndpoint(client, host, username, password,\n+                    (MapValue<Object, Object>) protocolConfig);\n+        } else if (protocol.equals(EmailConstants.POP)) {\n+            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.POP_CLIENT,\n+                    host, username, password, (MapValue<Object, Object>) protocolConfig);\n+            EmailAccessClient.initPopClientEndpoint(client, host, username, password,\n+                    (MapValue<Object, Object>) protocolConfig);\n+        } else {\n+            String errorMsg = \"Protocol should either be 'IMAP' or 'POP'.\";\n+            log.error(errorMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzY0NDEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-398764413", "createdAt": "2020-04-23T05:14:39Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNToxNDozOVrOGKW7Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNToxNDozOVrOGKW7Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNDU2Ng==", "bodyText": "Can we have a usecase where privateKeyPath is present but without privateKeyPassword?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413514566", "createdAt": "2020-04-23T05:14:39Z", "author": {"login": "wggihan"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helper class for listener functions.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListenerHelper {\n+\n+    private EmailListenerHelper() {\n+        // private constructor\n+    }\n+\n+    /**\n+     * Register a new listener for an email server endpoint.\n+     * @param emailListener Listener that places emails in Ballerina runtime\n+     * @param serviceEndpointConfig Email server endpoint configuration\n+     * @param service Ballerina service to be listened\n+     * @return Registered new Email connector with listening capability\n+     */\n+    public static EmailConnector register(ObjectValue emailListener, MapValue<Object, Object> serviceEndpointConfig,\n+                                          ObjectValue service) {\n+        EmailConnectorFactory emailConnectorFactory = new EmailConnectorFactory();\n+        final EmailListener listener = new EmailListener(BRuntime.getCurrentRuntime(), service);\n+        Map<String, Object> paramMap = getServerConnectorParamMap(serviceEndpointConfig);\n+        EmailConnector emailConnector = emailConnectorFactory.createServerConnector(paramMap, listener);\n+        emailListener.addNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR, emailConnector);\n+        serviceEndpointConfig.addNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR, emailConnector);\n+        return emailConnector;\n+    }\n+\n+    private static Map<String, Object> getServerConnectorParamMap(MapValue serviceEndpointConfig) {\n+        Map<String, Object> params = new HashMap<>(7);\n+        MapValue secureSocket = serviceEndpointConfig.getMapValue(EmailConstants.ENDPOINT_CONFIG_SECURE_SOCKET);\n+        if (secureSocket != null) {\n+            final MapValue privateKey = secureSocket.getMapValue(EmailConstants.ENDPOINT_CONFIG_PRIVATE_KEY);\n+            if (privateKey != null) {\n+                final String privateKeyPath = privateKey.getStringValue(EmailConstants.ENDPOINT_CONFIG_PATH);\n+                if (privateKeyPath != null && !privateKeyPath.isEmpty()) {\n+                    params.put(EmailConstants.IDENTITY, privateKeyPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDQ4Mjc3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399048277", "createdAt": "2020-04-23T12:28:10Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyODoxMFrOGKmrvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyODoxMFrOGKmrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MjczNQ==", "bodyText": "I think passing string value is working now. We don't need to handle.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413772735", "createdAt": "2020-04-23T12:28:10Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java;\n+import ballerina/lang.'object as lang;\n+import ballerina/log;\n+import ballerina/task;\n+\n+# Represents a service listener that monitors the email server location.\n+public type Listener object {\n+\n+    *lang:Listener;\n+\n+    private handle EMPTY_JAVA_STRING = java:fromString(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDQ4NzQ2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399048746", "createdAt": "2020-04-23T12:28:43Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyODo0M1rOGKmtNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyODo0M1rOGKmtNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MzEwOA==", "bodyText": "Same here. Shall we make the type as string?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413773108", "createdAt": "2020-04-23T12:28:43Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java;\n+import ballerina/lang.'object as lang;\n+import ballerina/log;\n+import ballerina/task;\n+\n+# Represents a service listener that monitors the email server location.\n+public type Listener object {\n+\n+    *lang:Listener;\n+\n+    private handle EMPTY_JAVA_STRING = java:fromString(\"\");\n+    private ListenerConfig config = {};\n+    private task:Scheduler? appointment = ();\n+    private handle? serverConnector = ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDU0NTgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399054583", "createdAt": "2020-04-23T12:36:05Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNjowNVrOGKnAcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNjowNVrOGKnAcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3ODAzMw==", "bodyText": "Shall we make the host, username, and password mandatory? since it is required to login", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413778033", "createdAt": "2020-04-23T12:36:05Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java;\n+import ballerina/lang.'object as lang;\n+import ballerina/log;\n+import ballerina/task;\n+\n+# Represents a service listener that monitors the email server location.\n+public type Listener object {\n+\n+    *lang:Listener;\n+\n+    private handle EMPTY_JAVA_STRING = java:fromString(\"\");\n+    private ListenerConfig config = {};\n+    private task:Scheduler? appointment = ();\n+    private handle? serverConnector = ();\n+\n+    # Gets invoked during the `email:Listener` initialization.\n+    #\n+    # + ListenerConfig - Configurations for Email endpoint\n+    public function __init(ListenerConfig listenerConfig) {\n+        self.config = listenerConfig;\n+    }\n+\n+    # Starts the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__start();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to start the listener\n+    public function __start() returns error? {\n+        return self.start();\n+    }\n+\n+    # Stops the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__stop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __stop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Binds a service to the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__attach(helloService, hello);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - `()` or else a `email:Error` upon failure to register the listener\n+    public function __attach(service s, string? name) returns error? {\n+        return self.register(s, name);\n+    }\n+\n+    # Stops consuming messages and detaches the service from the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__detach(helloService);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + return - `()` or else a `email:Error` upon failure to detach the service\n+    public function __detach(service s) returns error? {\n+\n+    }\n+\n+    # Stops the `email:Listener` forcefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__immediateStop();\n+    # ```\n+    #\n+    # + return - `()` or else a `email:Error` upon failure to stop the listener\n+    public function __immediateStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Stops the `email:Listener` gracefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__gracefulStop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __gracefulStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    function start() returns error? {\n+        var scheduler = self.config.cronExpression;\n+        if (scheduler is string) {\n+            task:AppointmentConfiguration config = {appointmentDetails: scheduler};\n+            self.appointment = new(config);\n+        } else {\n+            task:TimerConfiguration config = {intervalInMillis: self.config.pollingInterval, initialDelayInMillis: 100};\n+            self.appointment = new (config);\n+        }\n+        var appointment = self.appointment;\n+        if (appointment is task:Scheduler) {\n+            check appointment.attach(appointmentService, self);\n+            check appointment.start();\n+        }\n+        log:printInfo(\"Listening to remote server at \" + self.config.host + \"...\");\n+    }\n+\n+    function stop() returns error? {\n+        var appointment = self.appointment;\n+        if (appointment is task:Scheduler) {\n+            check appointment.stop();\n+        }\n+        log:printInfo(\"Stopped listening to remote server at \" + self.config.host);\n+    }\n+\n+    # Polls the email server enspoint.\n+    # ```ballerina\n+    # email:Error? result = emailListener.poll();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to poll the listener\n+    public function poll() returns error? {\n+        return poll(self.config);\n+    }\n+\n+    # Registers for the Email service.\n+    # ```ballerina\n+    # email:Error? result = emailListener.register(helloService, hello);\n+    # ```\n+    #\n+    # + emailService - Type descriptor of the service\n+    # + name - Service name\n+    # + return - `()` or else a `email:Error` upon failure to register the service\n+    public function register(service emailService, string? name) returns error? {\n+        error? response = ();\n+        handle|error result = register(self, self.config,  emailService);\n+        if(result is handle){\n+            self.config.serverConnector = result;\n+        } else {\n+            response = result;\n+        }\n+        return response;\n+    }\n+};\n+\n+service appointmentService = service {\n+    resource function onTrigger(Listener l) {\n+        var result = l.poll();\n+        if (result is error) {\n+            log:printError(\"Error while executing poll function\", result);\n+        }\n+    }\n+};\n+\n+# Configuration for Email listener endpoint.\n+#\n+# + host - Email server host\n+# + username - Email server access username\n+# + password - Email server access password\n+# + protocol - Email server access protocol, \"IMAP\" or \"POP\"\n+# + protocolConfig - POP3 or IMAP4 protocol configuration\n+# + pollingInterval - Periodic time interval to check new update\n+# + cronExpression - Cron expression to check new update\n+# + serverConnector - Server connector for service\n+public type ListenerConfig record {|\n+    string host = \"127.0.0.1\";\n+    string username = \"\";\n+    string password = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDU1MzI0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399055324", "createdAt": "2020-04-23T12:37:04Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNzowNFrOGKnC9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNzowNFrOGKnC9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3ODY3OQ==", "bodyText": "Shall we set a default value, rather having empty value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413778679", "createdAt": "2020-04-23T12:37:04Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java;\n+import ballerina/lang.'object as lang;\n+import ballerina/log;\n+import ballerina/task;\n+\n+# Represents a service listener that monitors the email server location.\n+public type Listener object {\n+\n+    *lang:Listener;\n+\n+    private handle EMPTY_JAVA_STRING = java:fromString(\"\");\n+    private ListenerConfig config = {};\n+    private task:Scheduler? appointment = ();\n+    private handle? serverConnector = ();\n+\n+    # Gets invoked during the `email:Listener` initialization.\n+    #\n+    # + ListenerConfig - Configurations for Email endpoint\n+    public function __init(ListenerConfig listenerConfig) {\n+        self.config = listenerConfig;\n+    }\n+\n+    # Starts the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__start();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to start the listener\n+    public function __start() returns error? {\n+        return self.start();\n+    }\n+\n+    # Stops the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__stop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __stop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Binds a service to the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__attach(helloService, hello);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - `()` or else a `email:Error` upon failure to register the listener\n+    public function __attach(service s, string? name) returns error? {\n+        return self.register(s, name);\n+    }\n+\n+    # Stops consuming messages and detaches the service from the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__detach(helloService);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + return - `()` or else a `email:Error` upon failure to detach the service\n+    public function __detach(service s) returns error? {\n+\n+    }\n+\n+    # Stops the `email:Listener` forcefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__immediateStop();\n+    # ```\n+    #\n+    # + return - `()` or else a `email:Error` upon failure to stop the listener\n+    public function __immediateStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Stops the `email:Listener` gracefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__gracefulStop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __gracefulStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    function start() returns error? {\n+        var scheduler = self.config.cronExpression;\n+        if (scheduler is string) {\n+            task:AppointmentConfiguration config = {appointmentDetails: scheduler};\n+            self.appointment = new(config);\n+        } else {\n+            task:TimerConfiguration config = {intervalInMillis: self.config.pollingInterval, initialDelayInMillis: 100};\n+            self.appointment = new (config);\n+        }\n+        var appointment = self.appointment;\n+        if (appointment is task:Scheduler) {\n+            check appointment.attach(appointmentService, self);\n+            check appointment.start();\n+        }\n+        log:printInfo(\"Listening to remote server at \" + self.config.host + \"...\");\n+    }\n+\n+    function stop() returns error? {\n+        var appointment = self.appointment;\n+        if (appointment is task:Scheduler) {\n+            check appointment.stop();\n+        }\n+        log:printInfo(\"Stopped listening to remote server at \" + self.config.host);\n+    }\n+\n+    # Polls the email server enspoint.\n+    # ```ballerina\n+    # email:Error? result = emailListener.poll();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to poll the listener\n+    public function poll() returns error? {\n+        return poll(self.config);\n+    }\n+\n+    # Registers for the Email service.\n+    # ```ballerina\n+    # email:Error? result = emailListener.register(helloService, hello);\n+    # ```\n+    #\n+    # + emailService - Type descriptor of the service\n+    # + name - Service name\n+    # + return - `()` or else a `email:Error` upon failure to register the service\n+    public function register(service emailService, string? name) returns error? {\n+        error? response = ();\n+        handle|error result = register(self, self.config,  emailService);\n+        if(result is handle){\n+            self.config.serverConnector = result;\n+        } else {\n+            response = result;\n+        }\n+        return response;\n+    }\n+};\n+\n+service appointmentService = service {\n+    resource function onTrigger(Listener l) {\n+        var result = l.poll();\n+        if (result is error) {\n+            log:printError(\"Error while executing poll function\", result);\n+        }\n+    }\n+};\n+\n+# Configuration for Email listener endpoint.\n+#\n+# + host - Email server host\n+# + username - Email server access username\n+# + password - Email server access password\n+# + protocol - Email server access protocol, \"IMAP\" or \"POP\"\n+# + protocolConfig - POP3 or IMAP4 protocol configuration\n+# + pollingInterval - Periodic time interval to check new update\n+# + cronExpression - Cron expression to check new update\n+# + serverConnector - Server connector for service\n+public type ListenerConfig record {|\n+    string host = \"127.0.0.1\";\n+    string username = \"\";\n+    string password = \"\";\n+    string protocol = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDU2Njk4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399056698", "createdAt": "2020-04-23T12:38:51Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozODo1MVrOGKnHeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozODo1MVrOGKnHeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3OTgzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n          \n          \n            \n                        log.debug(\"Access email server with properties, host: \" + host + \" username: \" + username", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413779834", "createdAt": "2020-04-23T12:38:51Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -114,21 +114,28 @@ public static Object readMessage(ObjectValue clientConnector, String folder) {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n+            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDU5NTI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399059525", "createdAt": "2020-04-23T12:42:27Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo0MjoyN1rOGKnRZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo0MjoyN1rOGKnRZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MjM3Mg==", "bodyText": "Shall we mention which folder?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413782372", "createdAt": "2020-04-23T12:42:27Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -114,21 +114,28 @@ public static Object readMessage(ObjectValue clientConnector, String folder) {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n+            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+                    + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n-            emailFolder.open(Folder.READ_WRITE);\n-            Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n             MapValue mapValue = null;\n-            if (messages.length > 0) {\n-                Flags flags = new Flags();\n-                flags.add(Flags.Flag.SEEN);\n-                emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n-                mapValue = EmailAccessUtil.getMapValue(messages[0]);\n+            if (emailFolder == null) {\n+                log.error(\"Email store folder is not found.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDYxMDIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399061022", "createdAt": "2020-04-23T12:44:19Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo0NDoxOVrOGKnWZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo0NDoxOVrOGKnWZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MzY1NA==", "bodyText": "Do we need to initialize a new FlagTerm every time we read the message?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413783654", "createdAt": "2020-04-23T12:44:19Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -114,21 +114,28 @@ public static Object readMessage(ObjectValue clientConnector, String folder) {\n         String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME);\n         String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD);\n         try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {\n+            log.debug(\"Going to access email server with properties, host: \" + host + \" username: \" + username\n+                    + \" folder: \" + folder);\n             store.connect(host, username, password);\n             Folder emailFolder = store.getFolder(folder);\n-            emailFolder.open(Folder.READ_WRITE);\n-            Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));\n             MapValue mapValue = null;\n-            if (messages.length > 0) {\n-                Flags flags = new Flags();\n-                flags.add(Flags.Flag.SEEN);\n-                emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);\n-                mapValue = EmailAccessUtil.getMapValue(messages[0]);\n+            if (emailFolder == null) {\n+                log.error(\"Email store folder is not found.\");\n+            } else {\n+                emailFolder.open(Folder.READ_WRITE);\n+                Message[] messages = emailFolder.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDY1NzMz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399065733", "createdAt": "2020-04-23T12:50:12Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1MDoxMlrOGKnmfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1MDoxMlrOGKnmfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4Nzc3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"Email listener config fields: \" + properties.keySet());\n          \n          \n            \n                    log.debug(\"Email listener configurations: \" + properties.keySet());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413787775", "createdAt": "2020-04-23T12:50:12Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+/**\n+ * Contains the functionality to retrieve emails via consuming.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailConnector {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailConnector.class);\n+\n+    private EmailConsumer consumer;\n+\n+    /**\n+     * Creates the email consumer.\n+     * @param properties Properties to connect to the server\n+     * @param emailListener Listener that polls emails from the server\n+     */\n+    public EmailConnector(Map<String, Object> properties, EmailListener emailListener) {\n+        log.debug(\"Email listener config fields: \" + properties.keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDY3ODU2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399067856", "createdAt": "2020-04-23T12:52:42Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1Mjo0M1rOGKntuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1Mjo0M1rOGKntuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4OTYyNQ==", "bodyText": "Do we need to make this function public?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413789625", "createdAt": "2020-04-23T12:52:43Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java;\n+import ballerina/lang.'object as lang;\n+import ballerina/log;\n+import ballerina/task;\n+\n+# Represents a service listener that monitors the email server location.\n+public type Listener object {\n+\n+    *lang:Listener;\n+\n+    private handle EMPTY_JAVA_STRING = java:fromString(\"\");\n+    private ListenerConfig config = {};\n+    private task:Scheduler? appointment = ();\n+    private handle? serverConnector = ();\n+\n+    # Gets invoked during the `email:Listener` initialization.\n+    #\n+    # + ListenerConfig - Configurations for Email endpoint\n+    public function __init(ListenerConfig listenerConfig) {\n+        self.config = listenerConfig;\n+    }\n+\n+    # Starts the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__start();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to start the listener\n+    public function __start() returns error? {\n+        return self.start();\n+    }\n+\n+    # Stops the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__stop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __stop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Binds a service to the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__attach(helloService, hello);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - `()` or else a `email:Error` upon failure to register the listener\n+    public function __attach(service s, string? name) returns error? {\n+        return self.register(s, name);\n+    }\n+\n+    # Stops consuming messages and detaches the service from the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__detach(helloService);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + return - `()` or else a `email:Error` upon failure to detach the service\n+    public function __detach(service s) returns error? {\n+\n+    }\n+\n+    # Stops the `email:Listener` forcefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__immediateStop();\n+    # ```\n+    #\n+    # + return - `()` or else a `email:Error` upon failure to stop the listener\n+    public function __immediateStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Stops the `email:Listener` gracefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__gracefulStop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __gracefulStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    function start() returns error? {\n+        var scheduler = self.config.cronExpression;\n+        if (scheduler is string) {\n+            task:AppointmentConfiguration config = {appointmentDetails: scheduler};\n+            self.appointment = new(config);\n+        } else {\n+            task:TimerConfiguration config = {intervalInMillis: self.config.pollingInterval, initialDelayInMillis: 100};\n+            self.appointment = new (config);\n+        }\n+        var appointment = self.appointment;\n+        if (appointment is task:Scheduler) {\n+            check appointment.attach(appointmentService, self);\n+            check appointment.start();\n+        }\n+        log:printInfo(\"Listening to remote server at \" + self.config.host + \"...\");\n+    }\n+\n+    function stop() returns error? {\n+        var appointment = self.appointment;\n+        if (appointment is task:Scheduler) {\n+            check appointment.stop();\n+        }\n+        log:printInfo(\"Stopped listening to remote server at \" + self.config.host);\n+    }\n+\n+    # Polls the email server enspoint.\n+    # ```ballerina\n+    # email:Error? result = emailListener.poll();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to poll the listener\n+    public function poll() returns error? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDcwNzQz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399070743", "createdAt": "2020-04-23T12:56:09Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1NjowOVrOGKn3ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1NjowOVrOGKn3ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MjEwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Polling to retrieve emails from the server.\n          \n          \n            \n                 * Polls to retrieve emails from the server.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413792100", "createdAt": "2020-04-23T12:56:09Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+/**\n+ * Contains the functionality to retrieve emails via consuming.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailConnector {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailConnector.class);\n+\n+    private EmailConsumer consumer;\n+\n+    /**\n+     * Creates the email consumer.\n+     * @param properties Properties to connect to the server\n+     * @param emailListener Listener that polls emails from the server\n+     */\n+    public EmailConnector(Map<String, Object> properties, EmailListener emailListener) {\n+        log.debug(\"Email listener config fields: \" + properties.keySet());\n+        consumer = new EmailConsumer(properties, emailListener);\n+    }\n+\n+    /**\n+     * Polling to retrieve emails from the server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDc3MDk0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399077094", "createdAt": "2020-04-23T13:03:42Z", "commit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzowMzo0M1rOGKoMRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzowMzo0M1rOGKoMRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5NzQ0Ng==", "bodyText": "Do we need to pass configuration and initialize Email client in every poll?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r413797446", "createdAt": "2020-04-23T13:03:43Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java;\n+import ballerina/lang.'object as lang;\n+import ballerina/log;\n+import ballerina/task;\n+\n+# Represents a service listener that monitors the email server location.\n+public type Listener object {\n+\n+    *lang:Listener;\n+\n+    private handle EMPTY_JAVA_STRING = java:fromString(\"\");\n+    private ListenerConfig config = {};\n+    private task:Scheduler? appointment = ();\n+    private handle? serverConnector = ();\n+\n+    # Gets invoked during the `email:Listener` initialization.\n+    #\n+    # + ListenerConfig - Configurations for Email endpoint\n+    public function __init(ListenerConfig listenerConfig) {\n+        self.config = listenerConfig;\n+    }\n+\n+    # Starts the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__start();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to start the listener\n+    public function __start() returns error? {\n+        return self.start();\n+    }\n+\n+    # Stops the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__stop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __stop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Binds a service to the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__attach(helloService, hello);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - `()` or else a `email:Error` upon failure to register the listener\n+    public function __attach(service s, string? name) returns error? {\n+        return self.register(s, name);\n+    }\n+\n+    # Stops consuming messages and detaches the service from the `email:Listener`.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__detach(helloService);\n+    # ```\n+    #\n+    # + s - Type descriptor of the service\n+    # + return - `()` or else a `email:Error` upon failure to detach the service\n+    public function __detach(service s) returns error? {\n+\n+    }\n+\n+    # Stops the `email:Listener` forcefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__immediateStop();\n+    # ```\n+    #\n+    # + return - `()` or else a `email:Error` upon failure to stop the listener\n+    public function __immediateStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    # Stops the `email:Listener` gracefully.\n+    # ```ballerina\n+    # email:Error? result = emailListener.__gracefulStop();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to stop the listener\n+    public function __gracefulStop() returns error? {\n+        check self.stop();\n+    }\n+\n+    function start() returns error? {\n+        var scheduler = self.config.cronExpression;\n+        if (scheduler is string) {\n+            task:AppointmentConfiguration config = {appointmentDetails: scheduler};\n+            self.appointment = new(config);\n+        } else {\n+            task:TimerConfiguration config = {intervalInMillis: self.config.pollingInterval, initialDelayInMillis: 100};\n+            self.appointment = new (config);\n+        }\n+        var appointment = self.appointment;\n+        if (appointment is task:Scheduler) {\n+            check appointment.attach(appointmentService, self);\n+            check appointment.start();\n+        }\n+        log:printInfo(\"Listening to remote server at \" + self.config.host + \"...\");\n+    }\n+\n+    function stop() returns error? {\n+        var appointment = self.appointment;\n+        if (appointment is task:Scheduler) {\n+            check appointment.stop();\n+        }\n+        log:printInfo(\"Stopped listening to remote server at \" + self.config.host);\n+    }\n+\n+    # Polls the email server enspoint.\n+    # ```ballerina\n+    # email:Error? result = emailListener.poll();\n+    # ```\n+    #\n+    # + return - () or else error upon failure to poll the listener\n+    public function poll() returns error? {\n+        return poll(self.config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37525b9303d4ce8c71d14dcfec003890a761942f"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f0e7b0fe5fb08c6a3f660634ae17c57885fe747", "committedDate": "2020-04-23T20:15:02Z", "message": "Implement the suggestions given in the PR review and fix bugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5Nzc1MTcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399775172", "createdAt": "2020-04-24T09:12:49Z", "commit": {"oid": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOToxMjo1MFrOGLOTKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOToxMjo1MFrOGLOTKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyMTgwMA==", "bodyText": "Since we initializing Email Consumer in the email listener lifecycle, we need to return an error and allow the system to panic. The error in configuration can't be recovered", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414421800", "createdAt": "2020-04-24T09:12:50Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.client.EmailAccessClient;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+/**\n+ * Provides the capability to read an email and forward it to a listener.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailConsumer {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailConsumer.class);\n+\n+    private EmailListener emailListener;\n+    private ObjectValue client;\n+\n+    /**\n+     * Constructor for the EmailConsumer.\n+     *\n+     * @param emailProperties Map of property values\n+     * @param listener Forwards the received emails to Ballerina code\n+     */\n+    public EmailConsumer(Map<String, Object> emailProperties, EmailListener listener) {\n+        this.emailListener = listener;\n+        String host = (String) emailProperties.get(EmailConstants.PROPS_HOST);\n+        String username = (String) emailProperties.get(EmailConstants.PROPS_USERNAME);\n+        String password = (String) emailProperties.get(EmailConstants.PROPS_PASSWORD);\n+        String protocol = (String) emailProperties.get(EmailConstants.PROPS_PROTOCOL);\n+        MapValue protocolConfig = (MapValue) emailProperties.get(EmailConstants.PROTOCOL_CONFIG);\n+        if (protocol.equals(EmailConstants.IMAP)) {\n+            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.IMAP_CLIENT,\n+                    host, username, password, (MapValue<Object, Object>) protocolConfig);\n+            EmailAccessClient.initImapClientEndpoint(client, host, username, password,\n+                    (MapValue<Object, Object>) protocolConfig);\n+        } else if (protocol.equals(EmailConstants.POP)) {\n+            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.POP_CLIENT,\n+                    host, username, password, (MapValue<Object, Object>) protocolConfig);\n+            EmailAccessClient.initPopClientEndpoint(client, host, username, password,\n+                    (MapValue<Object, Object>) protocolConfig);\n+        } else {\n+            String errorMsg = \"Protocol should either be 'IMAP' or 'POP'.\";\n+            final EmailConnectorException e = new EmailConnectorException(errorMsg);\n+            emailListener.onError(BallerinaErrors.createError(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5Nzc1NDcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399775471", "createdAt": "2020-04-24T09:13:13Z", "commit": {"oid": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOToxMzoxM1rOGLOUPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOToxMzoxM1rOGLOUPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyMjA3OA==", "bodyText": "Can we move the connector creation to the listener init method?\nI think we only need one email connector to the listener. We don't need to create one when registering for each service.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414422078", "createdAt": "2020-04-24T09:13:13Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helper class for listener functions.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListenerHelper {\n+\n+    private EmailListenerHelper() {\n+        // private constructor\n+    }\n+\n+    /**\n+     * Register a new listener for an email server endpoint.\n+     * @param emailListener Listener that places emails in Ballerina runtime\n+     * @param serviceEndpointConfig Email server endpoint configuration\n+     * @param service Ballerina service to be listened\n+     * @return Registered new Email connector with listening capability\n+     */\n+    public static EmailConnector register(ObjectValue emailListener, MapValue<Object, Object> serviceEndpointConfig,\n+                                          ObjectValue service) {\n+        EmailConnectorFactory emailConnectorFactory = new EmailConnectorFactory();\n+        final EmailListener listener = new EmailListener(BRuntime.getCurrentRuntime(), service);\n+        Map<String, Object> paramMap = getServerConnectorParamMap(serviceEndpointConfig);\n+        EmailConnector emailConnector = emailConnectorFactory.createServerConnector(paramMap, listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5Nzc2Njg2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-399776686", "createdAt": "2020-04-24T09:14:51Z", "commit": {"oid": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOToxNDo1MVrOGLOYhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOToxNDo1MVrOGLOYhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyMzE3NA==", "bodyText": "Shall we add some negative test cases as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r414423174", "createdAt": "2020-04-24T09:14:51Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/test/resources/testng.xml", "diffHunk": "@@ -31,6 +31,8 @@\n             <class name=\"org.ballerinalang.stdlib.email.PopComplexEmailReceiveTest\"/>\n             <class name=\"org.ballerinalang.stdlib.email.ImapSimpleSecureEmailReceiveTest\"/>\n             <class name=\"org.ballerinalang.stdlib.email.ImapComplexEmailReceiveTest\"/>\n+            <class name=\"org.ballerinalang.stdlib.email.ListenerImapReceiveTest\"/>\n+            <class name=\"org.ballerinalang.stdlib.email.ListenerPopReceiveTest\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f0e7b0fe5fb08c6a3f660634ae17c57885fe747"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e0f4c5e2849e28981de357f3507b94d2b898f7f", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e0f4c5e2849e28981de357f3507b94d2b898f7f", "committedDate": "2020-04-24T20:58:47Z", "message": "Implement suggestions given in the PR review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c3a1bb61b03439f9ca28abc06e4a2f526c878d", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24c3a1bb61b03439f9ca28abc06e4a2f526c878d", "committedDate": "2020-04-25T11:31:16Z", "message": "Fix API Docs and a log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec5e11d4f381bddcf945ffc09827f6c2dc867343", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec5e11d4f381bddcf945ffc09827f6c2dc867343", "committedDate": "2020-04-25T14:15:13Z", "message": "Fix some issues on code quality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8cd7ef0dbcd4c9c888fa1040d2d56c821917678", "committedDate": "2020-04-28T08:47:12Z", "message": "Add Email Connector compiler plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzgyMzcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-401782371", "createdAt": "2020-04-28T12:26:44Z", "commit": {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjoyNjo0NVrOGNRcOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjoyNjo0NVrOGNRcOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3MDQyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,\n          \n          \n            \n                            runtime.invokeMethodSync(service.getValue(), EmailConstants.ON_MESSAGE,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r416570427", "createdAt": "2020-04-28T12:26:45Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+/**\n+ * Email connector listener for Ballerina.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListener {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailListener.class);\n+\n+    private final BRuntime runtime;\n+\n+    private Map<String, ObjectValue> registeredServices = new HashMap<>();\n+\n+    /**\n+     * Constructor for listener class for email.\n+     * @param runtime Current Ballerina runtime\n+     */\n+    public EmailListener(BRuntime runtime) {\n+        this.runtime = runtime;\n+    }\n+\n+    /**\n+     * Place an email in Ballerina when received.\n+     * @param emailEvent Email object to be received\n+     * @return If successful return true\n+     */\n+    public boolean onMessage(EmailEvent emailEvent) {\n+        Object email = emailEvent.getEmailObject();\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzgyOTI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-401782927", "createdAt": "2020-04-28T12:27:25Z", "commit": {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjoyNzoyNVrOGNRd9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjoyNzoyNVrOGNRd9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3MDg3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_ERROR,\n          \n          \n            \n                            runtime.invokeMethodSync(service.getValue(), EmailConstants.ON_ERROR,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r416570870", "createdAt": "2020-04-28T12:27:25Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+/**\n+ * Email connector listener for Ballerina.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListener {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailListener.class);\n+\n+    private final BRuntime runtime;\n+\n+    private Map<String, ObjectValue> registeredServices = new HashMap<>();\n+\n+    /**\n+     * Constructor for listener class for email.\n+     * @param runtime Current Ballerina runtime\n+     */\n+    public EmailListener(BRuntime runtime) {\n+        this.runtime = runtime;\n+    }\n+\n+    /**\n+     * Place an email in Ballerina when received.\n+     * @param emailEvent Email object to be received\n+     * @return If successful return true\n+     */\n+    public boolean onMessage(EmailEvent emailEvent) {\n+        Object email = emailEvent.getEmailObject();\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,\n+                        email, true);\n+            }\n+        } else {\n+            log.error(\"Runtime should not be null.\");\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Place an error in Ballerina when received.\n+     * @param error Email object to be received\n+     */\n+    public void onError(Object error) {\n+        log.error(((ErrorValue) error).getMessage());\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODE2Mzg2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-401816386", "createdAt": "2020-04-28T13:09:03Z", "commit": {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzowOTowM1rOGNTJTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzowOTowM1rOGNTJTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU5ODM0OQ==", "bodyText": "Shall we compute the serviceKey from service.getType().getName(). AFAIK serviceName not provides correct value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r416598349", "createdAt": "2020-04-28T13:09:03Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+/**\n+ * Email connector listener for Ballerina.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListener {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailListener.class);\n+\n+    private final BRuntime runtime;\n+\n+    private Map<String, ObjectValue> registeredServices = new HashMap<>();\n+\n+    /**\n+     * Constructor for listener class for email.\n+     * @param runtime Current Ballerina runtime\n+     */\n+    public EmailListener(BRuntime runtime) {\n+        this.runtime = runtime;\n+    }\n+\n+    /**\n+     * Place an email in Ballerina when received.\n+     * @param emailEvent Email object to be received\n+     * @return If successful return true\n+     */\n+    public boolean onMessage(EmailEvent emailEvent) {\n+        Object email = emailEvent.getEmailObject();\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_MESSAGE,\n+                        email, true);\n+            }\n+        } else {\n+            log.error(\"Runtime should not be null.\");\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Place an error in Ballerina when received.\n+     * @param error Email object to be received\n+     */\n+    public void onError(Object error) {\n+        log.error(((ErrorValue) error).getMessage());\n+        if (runtime != null) {\n+            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();\n+            for (Map.Entry<String, ObjectValue> service : services) {\n+                runtime.invokeMethodSync(registeredServices.get(service.getKey()), EmailConstants.ON_ERROR,\n+                        error, true);\n+            }\n+        } else {\n+            log.error(\"Runtime should not be null.\");\n+        }\n+    }\n+\n+    protected void addService(ObjectValue service, String serviceName) {\n+        String serviceKey;\n+        if (serviceName.equals(\"\")) {\n+            UUID uuid = UUID.randomUUID();\n+            serviceKey = uuid.toString();\n+        } else {\n+            serviceKey = serviceName;\n+        }\n+        registeredServices.put(serviceKey, service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bc51f58e3bec5f63b073d452278a6c23e4a5782", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7bc51f58e3bec5f63b073d452278a6c23e4a5782", "committedDate": "2020-04-28T18:39:22Z", "message": "Add functionality to provide custom SMTP properties to SMTP Client Configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2ead316c1f3272c1e07edc9a8c723938ef3022", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d2ead316c1f3272c1e07edc9a8c723938ef3022", "committedDate": "2020-04-28T19:57:26Z", "message": "Add API docs to a method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b8efe6bf986499acd4ece2a8e4d75094435ee44", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b8efe6bf986499acd4ece2a8e4d75094435ee44", "committedDate": "2020-04-28T19:57:38Z", "message": "Remove an unwanted line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5358d2dd9f1650f1e6691fbd7088dfd25c8b9c29", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5358d2dd9f1650f1e6691fbd7088dfd25c8b9c29", "committedDate": "2020-04-28T20:05:49Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eef92bd8b7b8cbe1e306aee87fa483cc3727934d", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eef92bd8b7b8cbe1e306aee87fa483cc3727934d", "committedDate": "2020-04-28T20:23:09Z", "message": "Implement suggestions given in the PR review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzQzMTA3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-402343107", "createdAt": "2020-04-29T03:22:37Z", "commit": {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzoyMjozN1rOGNuenQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzoyMjozN1rOGNuenQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NjE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    listener.addService(service, serviceName.getValue());\n          \n          \n            \n                    listener.addService(service, service.getType().getName());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#discussion_r417046173", "createdAt": "2020-04-29T03:22:37Z", "author": {"login": "daneshk"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.server;\n+\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helper class for listener functions.\n+ *\n+ * @since 1.3.0\n+ */\n+public class EmailListenerHelper {\n+\n+    private EmailListenerHelper() {\n+        // private constructor\n+    }\n+\n+    /**\n+     * Initialize a new EmailConnector for the listener.\n+     * @param emailListener Listener that places emails in Ballerina runtime\n+     * @param serviceEndpointConfig Email server endpoint configuration\n+     * @throws EmailConnectorException If the given protocol is invalid\n+     */\n+    public static void init(ObjectValue emailListener, MapValue<Object, Object> serviceEndpointConfig)\n+            throws EmailConnectorException {\n+        final EmailListener listener = new EmailListener(BRuntime.getCurrentRuntime());\n+        Map<String, Object> paramMap = getServerConnectorParamMap(serviceEndpointConfig);\n+        EmailConnector emailConnector = EmailConnectorFactory.createServerConnector(paramMap, listener);\n+        emailListener.addNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR, emailConnector);\n+    }\n+\n+    /**\n+     * Register a new service for the listener.\n+     * @param emailListener Ballerina email listener\n+     * @param service Ballerina service to be listened\n+     * @param serviceName Name of the Ballerina service to be listened\n+     */\n+    public static void register(ObjectValue emailListener, ObjectValue service, BString serviceName) {\n+        EmailConnector emailConnector = (EmailConnector) emailListener.getNativeData(\n+                EmailConstants.EMAIL_SERVER_CONNECTOR);\n+        EmailListener listener = emailConnector.getEmailListener();\n+        listener.addService(service, serviceName.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cd7ef0dbcd4c9c888fa1040d2d56c821917678"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe8c6d6dc829f86b8cb93c5d8cf9ac16a8a066a3", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe8c6d6dc829f86b8cb93c5d8cf9ac16a8a066a3", "committedDate": "2020-04-29T06:49:21Z", "message": "Remove UUID based service map keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5ef57685383604cf6ccbb5ceeebee9b122e4f2c", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5ef57685383604cf6ccbb5ceeebee9b122e4f2c", "committedDate": "2020-04-29T06:51:54Z", "message": "Implement the suggestions given in the PR review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNDcyMTg2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-402472186", "createdAt": "2020-04-29T08:46:28Z", "commit": {"oid": "b5ef57685383604cf6ccbb5ceeebee9b122e4f2c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNDcyMzg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22843#pullrequestreview-402472385", "createdAt": "2020-04-29T08:46:40Z", "commit": {"oid": "b5ef57685383604cf6ccbb5ceeebee9b122e4f2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3438, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}