{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNzM3Nzgw", "number": 26003, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjowNjowNVrOErBjhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTo1MzoxM1rOErJEvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQ5NzAzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/lock/LocksInMainTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjowNjowNVrOHdj0Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjowNjowNVrOHdj0Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1NzU0Ng==", "bodyText": "Can ignore the return values, right?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BValue[] returns = BRunUtil.invoke(parallelCompileResult, \"testLocksWhenGlobalVariablesReferToSameValue\");\n          \n          \n            \n                    BRunUtil.invoke(parallelCompileResult, \"testLocksWhenGlobalVariablesReferToSameValue\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500757546", "createdAt": "2020-10-07T06:06:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/lock/LocksInMainTest.java", "diffHunk": "@@ -279,8 +279,23 @@ public void testParallelRunWithRecursiveInvocationDependencies() {\n     @Test(description = \"Test for parallel run when invocations are imported and contains global var dependencies\")\n     public void testParallelRunWithImportInvocationDependencies() {\n         CompileResult importInvocationDependencies = BCompileUtil.compile(\"test-src/lock/locks-in-imports-test\",\n-                \"mod1\", true);\n+                                                                          \"mod1\", true);\n \n         BRunUtil.invoke(importInvocationDependencies, \"testLockWIthInvokableChainsAccessingGlobal\");\n     }\n+\n+    @Test(description = \"Test for locks on global references\")\n+    public void testLocksWhenGlobalVariablesReferToSameValue() {\n+        BValue[] returns = BRunUtil.invoke(parallelCompileResult, \"testLocksWhenGlobalVariablesReferToSameValue\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTQ5OTQ0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangLock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjowNzowN1rOHdj1fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjowNzowN1rOHdj1fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc1Nzg4Ng==", "bodyText": "What about calling this\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public boolean addAllLockVariable(Set<BVarSymbol> variables) {\n          \n          \n            \n                    public boolean addLockVariables(Set<BVarSymbol> variables) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500757886", "createdAt": "2020-10-07T06:07:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangLock.java", "diffHunk": "@@ -108,6 +108,10 @@ public String toString() {\n         public boolean addLockVariable(BVarSymbol variable) {\n             return lockVariables.add(variable);\n         }\n+\n+        public boolean addAllLockVariable(Set<BVarSymbol> variables) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTU2MDAyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangPackage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjozMToyMVrOHdkY4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjozMToyMVrOHdkY4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2Njk0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Hold global variable dependencies identified from DataflowAnalyzer\n          \n          \n            \n                // Hold global variable dependencies identified in DataflowAnalyzer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500766947", "createdAt": "2020-10-07T06:31:21Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangPackage.java", "diffHunk": "@@ -72,6 +74,9 @@\n     public Queue<BLangLambdaFunction> lambdaFunctions = new ArrayDeque<>();\n     public List<BLangClassDefinition> classDefinitions;\n \n+    // Hold global variable dependencies identified from DataflowAnalyzer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk2Njc4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/lock/parallel-run-lock.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNjo1N1rOHdoNPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNjo1N1rOHdoNPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTUwMA==", "bodyText": "Formatting seems off.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500829500", "createdAt": "2020-10-07T08:26:57Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/lock/parallel-run-lock.bal", "diffHunk": "@@ -194,3 +194,138 @@ function testLockWIthInvokableRecursiveAccessGlobal() {\n         panic error(\"Invalid Value\");\n     }\n }\n+\n+int[] values = [];\n+int[] numbers = values;\n+\n+function testLocksWhenGlobalVariablesReferToSameValue() {\n+    @strand {thread: \"any\"}\n+    worker w1 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        values[values.length()] = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk3NzIyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/lock/parallel-run-lock.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyOTozM1rOHdoTuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyOTozM1rOHdoTuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzMTE2MQ==", "bodyText": "Is this check and message correct?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500831161", "createdAt": "2020-10-07T08:29:33Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/lock/parallel-run-lock.bal", "diffHunk": "@@ -194,3 +194,138 @@ function testLockWIthInvokableRecursiveAccessGlobal() {\n         panic error(\"Invalid Value\");\n     }\n }\n+\n+int[] values = [];\n+int[] numbers = values;\n+\n+function testLocksWhenGlobalVariablesReferToSameValue() {\n+    @strand {thread: \"any\"}\n+    worker w1 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        values[values.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w2 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        values[values.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w3 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        values[values.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w4 {\n+        foreach var i in 1 ... 1000 {\n+            lock {\n+\t\t        numbers[numbers.length()] = 1;\n+            }\n+        }\n+    }\n+    var result = wait {w1, w2, w3, w4};\n+\n+    int length = numbers.length();\n+    if ( length != 4000) {\n+        panic error(\"Expected 4000, but found \" + length.toString());\n+    }\n+\n+}\n+\n+int[] ref = [];\n+int[] toBeUpdateRef = ref;\n+function testForGlobalRefUpdateInsideWorker() {\n+    ref.removeAll();\n+    toBeUpdateRef.removeAll();\n+\n+    @strand {thread: \"any\"}\n+    worker w1 {\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                ref[ref.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w2 {\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                ref[ref.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w3 {\n+        toBeUpdateRef = [];\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                toBeUpdateRef[toBeUpdateRef.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    runtime:sleep(250);\n+    if (toBeUpdateRef.length() == 100 && ref.length() == 200) {\n+        panic error(\"Invalid value 1000 recieved in \\\"testForGlobalRefUpdateInsideWorker\\\"\");\n+    }\n+}\n+\n+int[] refConditional = [];\n+int[] toBeUpdateRefConditional = refConditional;\n+function testForGlobalRefUpdateInsideConditional() {\n+    boolean updateRef = true;\n+\n+    @strand {thread: \"any\"}\n+    worker w1 {\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                refConditional[refConditional.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w2 {\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                refConditional[refConditional.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    @strand {thread: \"any\"}\n+    worker w3 {\n+        if (updateRef) {\n+            toBeUpdateRefConditional = [];\n+        }\n+        foreach var i in 1 ... 100 {\n+            lock {\n+                runtime:sleep(1);\n+                toBeUpdateRefConditional[toBeUpdateRefConditional.length()] = 1;\n+            }\n+        }\n+    }\n+\n+    runtime:sleep(250);\n+    if (toBeUpdateRefConditional.length() == 100 && refConditional.length() == 200) {\n+        panic error(\"Invalid value 1000 recieved in \\\"testForGlobalRefUpdateInsideConditional\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjAwMzQ0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozNTo1OVrOHdoj5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozNTo1OVrOHdoj5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzNTMwMQ==", "bodyText": "Can we access this via env.enclPkg when visiting BLangSimpleVarRef instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500835301", "createdAt": "2020-10-07T08:35:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -393,6 +396,7 @@ public BLangPackage perform(BLangPackage pkgNode) {\n         // Initialize the annotation map\n         annotationDesugar.initializeAnnotationMap(pkgNode);\n         SymbolEnv env = this.symTable.pkgEnvMap.get(pkgNode.symbol);\n+        this.globalVariablesDependsOn = pkgNode.globalVariableDependsOn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjcyODkyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangPackage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTo1MzoxNFrOHdvkig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTo1MzoxNFrOHdvkig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MDE1NA==", "bodyText": "Can't we just call this globalVariableDependencies?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26003#discussion_r500950154", "createdAt": "2020-10-07T11:53:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangPackage.java", "diffHunk": "@@ -72,6 +74,9 @@\n     public Queue<BLangLambdaFunction> lambdaFunctions = new ArrayDeque<>();\n     public List<BLangClassDefinition> classDefinitions;\n \n+    // Hold global variable dependencies identified from DataflowAnalyzer\n+    public Map<BSymbol, Set<BVarSymbol>> globalVariableDependsOn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78ea697fa4d880f3fbfb63c5e92b3f43e2bdeaf"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 7, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}