{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTIwNDY4", "number": 22182, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyMjowMlrODtD8pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMToxNTo0N1rODvg3dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTc3MTg4OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/subtypes/int_subtypes_test.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyMjowMlrOF-RA6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyMjowMlrOF-RA6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNDc5NA==", "bodyText": "Let's remove these lines.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r400834794", "createdAt": "2020-03-31T11:22:02Z", "author": {"login": "hasithaa"}, "path": "langlib/langlib-test/src/test/resources/test-src/subtypes/int_subtypes_test.bal", "diffHunk": "@@ -1063,89 +1064,89 @@ function testBitwiseXor() {\n \n     ints:Signed8 s81 = -1;\n     int res = s81 ^ s81;\n-    assertValueEqual(0, res);\n+    comp:assertValueEqual(0, res);\n \n     byte v1 = 128;\n     ints:Signed16 v2 = 384;\n     int res2 = v1 ^ v2;\n-    assertValueEqual(256, res2);\n+    comp:assertValueEqual(256, res2);\n \n     res2 = v2 ^ v1;\n-    assertValueEqual(256, res2);\n+    comp:assertValueEqual(256, res2);\n \n     int n = c ^ i;\n-    assertValueEqual(-139090, n);\n+    comp:assertValueEqual(-139090, n);\n \n     int o = j ^ b;\n-    assertValueEqual(-31806, o);\n+    comp:assertValueEqual(-31806, o);\n \n     int p = k ^ a;\n-    assertValueEqual(-2137483648, p);\n+    comp:assertValueEqual(-2137483648, p);\n \n     int q = b ^ l;\n-    assertValueEqual(9223372036854774241, q);\n+    comp:assertValueEqual(9223372036854774241, q);\n \n     int r = a ^ 1;\n-    assertValueEqual(0, r);\n+    comp:assertValueEqual(0, r);\n \n     int s = b ^ c;\n-    assertValueEqual(-137517, s);\n+    comp:assertValueEqual(-137517, s);\n \n     int t = d ^ 2;\n-    assertValueEqual(6429487, t);\n+    comp:assertValueEqual(6429487, t);\n \n     byte u = e ^ e;\n-    assertValueEqual(0, u);\n+    comp:assertValueEqual(0, u);\n \n     int v = f ^ d;\n-    assertValueEqual(6429473, v);\n+    comp:assertValueEqual(6429473, v);\n \n     ints:Unsigned16 w = g ^ h;\n-    assertValueEqual(39613, w);\n+    comp:assertValueEqual(39613, w);\n \n     ints:Unsigned8 x = h ^ f;\n-    assertValueEqual(152, x);\n+    comp:assertValueEqual(152, x);\n \n     int y = a ^ h;\n-    assertValueEqual(5739413, y);\n+    comp:assertValueEqual(5739413, y);\n \n     int z = f ^ b;\n-    assertValueEqual(-1555, z);\n+    comp:assertValueEqual(-1555, z);\n }\n \n // Test Functions\n \n-function assertValueEqual(anydata expected, anydata actual) {\n-    if(expected != actual) {\n-        error e = error(\"Not Equal\", message = \"expected: \" + expected.toString() + \", found: \" + actual.toString());\n-        panic e;\n-    }\n-}\n-\n-function assertError(anydata|error value) {\n-    if !(value is error) {\n-        error e = error(\"Not Error\", message = \"expected: Error, found: \" + value.toString());\n-        panic e;\n-    }\n-}\n-\n-function assertNotError(anydata|error value) {\n-    if (value is error) {\n-        error e = error(\"Not Error\", message = \"expected: Error, found: \" + value.toString());\n-        panic e;\n-    }\n-}\n-\n-function assertTrue(boolean value) {\n-    if !(value) {\n-        error e = error(\"Not True\", message = \"expected: true, found: \" + value.toString());\n-        panic e;\n-    }\n-}\n-\n-function assertFalse(boolean value) {\n-    if (value) {\n-        error e = error(\"Not False\", message = \"expected: false, found: \" + value.toString());\n-        panic e;\n-    }\n-}\n+//function assertValueEqual(anydata expected, anydata actual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e57ad43362e6fd19692934a70923c9233630ac"}, "originalPosition": 1296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTc4MTMzOnYy", "diffSide": "RIGHT", "path": "langlib/lang.compilertest/src/main/ballerina/src/lang.compilertest/compilertest.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyNDozNVrOF-RGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyNDozNVrOF-RGPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNjE1OQ==", "bodyText": "Need to add a license header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r400836159", "createdAt": "2020-03-31T11:24:35Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.compilertest/src/main/ballerina/src/lang.compilertest/compilertest.bal", "diffHunk": "@@ -0,0 +1,6 @@\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e57ad43362e6fd19692934a70923c9233630ac"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTc4MjQ4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.compilertest/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyNDo1NlrOF-RG_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozMTo1M1rOF-RVXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNjM0OQ==", "bodyText": "Update year.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r400836349", "createdAt": "2020-03-31T11:24:56Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.compilertest/build.gradle", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e57ad43362e6fd19692934a70923c9233630ac"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0MDAyOQ==", "bodyText": "Check for all newly added files.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r400840029", "createdAt": "2020-03-31T11:31:53Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.compilertest/build.gradle", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNjM0OQ=="}, "originalCommit": {"oid": "57e57ad43362e6fd19692934a70923c9233630ac"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTgwMTI2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.compilertest/src/main/java/org/ballerinalang/langlib/compilertest/AssertError.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozMDozMlrOF-RSsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozMDozMlrOF-RSsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzOTM0Nw==", "bodyText": "Shall we rename java package name to org.ballerinalang.langlib.test and ballerina module name to ballerina/lang.test", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r400839347", "createdAt": "2020-03-31T11:30:32Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.compilertest/src/main/java/org/ballerinalang/langlib/compilertest/AssertError.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.compilertest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e57ad43362e6fd19692934a70923c9233630ac"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTgwMjkzOnYy", "diffSide": "RIGHT", "path": "langlib/lang.compilertest/src/main/java/org/ballerinalang/langlib/compilertest/AssertError.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozMTowNlrOF-RTwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozNDoxNlrOF-RaJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzOTYxNg==", "bodyText": "Wrong version, Let's change this to 1.3.0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r400839616", "createdAt": "2020-03-31T11:31:06Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.compilertest/src/main/java/org/ballerinalang/langlib/compilertest/AssertError.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.compilertest;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+\n+/**\n+ * Native implementation of assertError(anydata|error value).\n+ *\n+ * @since 2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e57ad43362e6fd19692934a70923c9233630ac"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0MTI1NQ==", "bodyText": "Check this for other functions as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r400841255", "createdAt": "2020-03-31T11:34:16Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.compilertest/src/main/java/org/ballerinalang/langlib/compilertest/AssertError.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.compilertest;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+\n+/**\n+ * Native implementation of assertError(anydata|error value).\n+ *\n+ * @since 2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzOTYxNg=="}, "originalCommit": {"oid": "57e57ad43362e6fd19692934a70923c9233630ac"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTgxMTk2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.compilertest/src/main/ballerina/src/lang.compilertest/compilertest.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozMzo1MlrOF-RZVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozMzo1MlrOF-RZVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0MTA0NQ==", "bodyText": "Please add Ballerina documentations.\nBtw, We can improve the API. Let's do it next iteration.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r400841045", "createdAt": "2020-03-31T11:33:52Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.compilertest/src/main/ballerina/src/lang.compilertest/compilertest.bal", "diffHunk": "@@ -0,0 +1,6 @@\n+\n+public function assertValueEqual(anydata expected, anydata actual) = external;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e57ad43362e6fd19692934a70923c9233630ac"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYxMTIxOnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/spotbugs-exclude.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxNDoyM1rOF_cn0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxNDoyM1rOF_cn0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3MzU1NA==", "bodyText": "Do we need this file? We can remove the commented out entries anyway right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402073554", "createdAt": "2020-04-02T06:14:23Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/spotbugs-exclude.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<!--\n+  ~ Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~    http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+<FindBugsFilter>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYxNjMwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxNjo1MlrOF_cq3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxNjo1MlrOF_cq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDMzMg==", "bodyText": "The convention for bal file names is snake case (with lower case).\nShall we rename this as test_functions.bal?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402074332", "createdAt": "2020-04-02T06:16:52Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYxODM2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxNzo1MlrOF_csEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxNzo1MlrOF_csEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDY0Mw==", "bodyText": "How about something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Tests whether passed values are equal .\n          \n          \n            \n            # Tests value equality for two values.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402074643", "createdAt": "2020-04-02T06:17:52Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Tests whether passed values are equal .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYxOTczOnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxODoyOFrOF_cs6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxODoyOFrOF_cs6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDg1Nw==", "bodyText": "Can't these be any|error instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402074857", "createdAt": "2020-04-02T06:18:28Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Tests whether passed values are equal .\n+#\n+# + expected - expected value\n+# + actual - actual value\n+public function assertValueEqual(anydata expected, anydata actual) = external;\n+\n+# Tests whether passed value has error type.\n+#\n+# + value - the passed value to be asserted\n+public function assertError(anydata|error value) = external;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYyMTE0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxODo1N1rOF_ctqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxODo1N1rOF_ctqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NTA0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Tests whether passed value has error type.\n          \n          \n            \n            # Tests whether a value is of type `error`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402075049", "createdAt": "2020-04-02T06:18:57Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Tests whether passed values are equal .\n+#\n+# + expected - expected value\n+# + actual - actual value\n+public function assertValueEqual(anydata expected, anydata actual) = external;\n+\n+# Tests whether passed value has error type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYyMzQwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxOTo0OVrOF_cu4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxOTo0OVrOF_cu4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NTM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Tests whether passed value has not error type.\n          \n          \n            \n            # Tests whether a value is of a non-error type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402075360", "createdAt": "2020-04-02T06:19:49Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Tests whether passed values are equal .\n+#\n+# + expected - expected value\n+# + actual - actual value\n+public function assertValueEqual(anydata expected, anydata actual) = external;\n+\n+# Tests whether passed value has error type.\n+#\n+# + value - the passed value to be asserted\n+public function assertError(anydata|error value) = external;\n+\n+# Tests whether passed value has not error type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYyNDQxOnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMDoxNVrOF_cvdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMDoxNVrOF_cvdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NTUwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Tests whether passed value is True.\n          \n          \n            \n            # Tests whether a value is `true`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402075509", "createdAt": "2020-04-02T06:20:15Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Tests whether passed values are equal .\n+#\n+# + expected - expected value\n+# + actual - actual value\n+public function assertValueEqual(anydata expected, anydata actual) = external;\n+\n+# Tests whether passed value has error type.\n+#\n+# + value - the passed value to be asserted\n+public function assertError(anydata|error value) = external;\n+\n+# Tests whether passed value has not error type.\n+#\n+# + value - the passed value to be asserted\n+public function assertNotError(anydata|error value) = external;\n+\n+# Tests whether passed value is True.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYyNDg0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMDoyN1rOF_cvtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMDoyN1rOF_cvtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NTU3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Tests whether passed value is False.\n          \n          \n            \n            # Tests whether a value is `false`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402075573", "createdAt": "2020-04-02T06:20:27Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/ballerina/src/lang.test/testfunctions.bal", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Tests whether passed values are equal .\n+#\n+# + expected - expected value\n+# + actual - actual value\n+public function assertValueEqual(anydata expected, anydata actual) = external;\n+\n+# Tests whether passed value has error type.\n+#\n+# + value - the passed value to be asserted\n+public function assertError(anydata|error value) = external;\n+\n+# Tests whether passed value has not error type.\n+#\n+# + value - the passed value to be asserted\n+public function assertNotError(anydata|error value) = external;\n+\n+# Tests whether passed value is True.\n+#\n+# + value - the passed value to be asserted\n+public function assertTrue(boolean value) = external;\n+\n+# Tests whether passed value is False.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzY0OTQ5OnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/java/org/ballerinalang/langlib/test/AssertValueEqual.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyOTo0MlrOF_c9ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjozMzozMFrOF_dC-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3OTEzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (TypeChecker.isEqual(expected, actual)) {\n          \n          \n            \n                    } else {\n          \n          \n            \n                        throw BallerinaErrors.createError(\"Not Equal\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if (!TypeChecker.isEqual(expected, actual)) {\n          \n          \n            \n                        throw BallerinaErrors.createError(\"Not Equal\");\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402079134", "createdAt": "2020-04-02T06:29:42Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/java/org/ballerinalang/langlib/test/AssertValueEqual.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.test;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+\n+/**\n+ * Native implementation of assertValueEqual(anydata expected, anydata actual).\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.test\", functionName = \"assertValueEqual\",\n+        args = {@Argument(name = \"expected\", type = TypeKind.ANYDATA),\n+                @Argument(name = \"actual\", type = TypeKind.ANYDATA)},\n+        isPublic = true\n+)\n+public class AssertValueEqual {\n+    public static void assertValueEqual(Strand strand, Object expected, Object actual) {\n+        if (TypeChecker.isEqual(expected, actual)) {\n+        } else {\n+            throw BallerinaErrors.createError(\"Not Equal\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MDUwNg==", "bodyText": "Also the format we use for error reasons is\n{org-name/module-name}specific-reason-with-no-spaces\nSo shall we use something like,\n{ballerina/lang.test}AssertionError\nor if we want to be specific for each error\n{ballerina/lang.test}NotEqualError\nAnd I think we need to add more details specifically in equality checks (vs true/false checks).\nI think we should add the message field with something along the lines of \"expected this, found that\".\nPlease check these for all errors created.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402080506", "createdAt": "2020-04-02T06:33:30Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/java/org/ballerinalang/langlib/test/AssertValueEqual.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.test;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+\n+/**\n+ * Native implementation of assertValueEqual(anydata expected, anydata actual).\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.test\", functionName = \"assertValueEqual\",\n+        args = {@Argument(name = \"expected\", type = TypeKind.ANYDATA),\n+                @Argument(name = \"actual\", type = TypeKind.ANYDATA)},\n+        isPublic = true\n+)\n+public class AssertValueEqual {\n+    public static void assertValueEqual(Strand strand, Object expected, Object actual) {\n+        if (TypeChecker.isEqual(expected, actual)) {\n+        } else {\n+            throw BallerinaErrors.createError(\"Not Equal\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3OTEzNA=="}, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzY4NDQxOnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/java/org/ballerinalang/langlib/test/AssertError.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0MzozMlrOF_dSfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0MzozMlrOF_dSfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NDQ3OQ==", "bodyText": "We don't usually use instanceof checks. Shall we do something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!(value instanceof ErrorValue)) {\n          \n          \n            \n                        throw BallerinaErrors.createError(\"Not an Error\");\n          \n          \n            \n                    }\n          \n          \n            \n                    if (TypeChecker.getType(objVal).getTag() != TypeTags.ERROR) {\n          \n          \n            \n                        throw BallerinaErrors.createError(ERR_REASON);\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r402084479", "createdAt": "2020-04-02T06:43:32Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.test/src/main/java/org/ballerinalang/langlib/test/AssertError.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.test;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+\n+/**\n+ * Native implementation of assertError(anydata|error value).\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.test\", functionName = \"assertError\",\n+        args = {@Argument(name = \"value\", type = TypeKind.UNION)},\n+        isPublic = true\n+)\n+public class AssertError {\n+    public static void assertError(Strand strand, Object value) {\n+        if (!(value instanceof ErrorValue)) {\n+            throw BallerinaErrors.createError(\"Not an Error\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f79ebee77ec0582ebd291fee8ce7651bc88441"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTQ4MTQ5OnYy", "diffSide": "RIGHT", "path": "langlib/lang.test/src/main/java/org/ballerinalang/langlib/test/AssertValueEqual.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMToxNTo0N1rOGB-u0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMToxNTo0N1rOGB-u0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcyOTU1Mw==", "bodyText": "As this can be string data better to differentiate value with its name\neg: expected 'value' but found 'value'\nI can see the previous one has :. eg : expected: 'value' but found: 'value'.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22182#discussion_r404729553", "createdAt": "2020-04-07T11:15:47Z", "author": {"login": "KRVPerera"}, "path": "langlib/lang.test/src/main/java/org/ballerinalang/langlib/test/AssertValueEqual.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.test;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.TypeChecker;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+\n+/**\n+ * Native implementation of assertValueEqual(anydata expected, anydata actual).\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.test\", functionName = \"assertValueEqual\",\n+        args = {@Argument(name = \"expected\", type = TypeKind.ANYDATA),\n+                @Argument(name = \"actual\", type = TypeKind.ANYDATA)},\n+        isPublic = true\n+)\n+public class AssertValueEqual {\n+    public static void assertValueEqual(Strand strand, Object expected, Object actual) {\n+        if (!TypeChecker.isEqual(expected, actual)) {\n+            String reason = \"{ballerina/lang.test}AssertionError\";\n+            String msg = \"expected \" + expected.toString() + \" but found \" + actual.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b0f2fed4343edfa6837b1301fd4f8877a3f43fa"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4541, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}