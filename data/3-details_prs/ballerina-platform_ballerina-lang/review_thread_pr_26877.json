{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MzU3Nzg0", "number": 26877, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjoyMTo1OVrOE39WGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjoyMTo1OVrOE39WGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTEyMjE4OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/providers/ImplementFunctionsCodeAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjoyMTo1OVrOHxmrug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDo1NjoyM1rOHxqhvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3NjA1OA==", "bodyText": "There are some commented code sections. Is this intensional?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26877#discussion_r521776058", "createdAt": "2020-11-12T02:21:59Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/providers/ImplementFunctionsCodeAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.providers;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import org.ballerinalang.annotation.JavaSPIService;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.spi.PositionDetails;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Code Action for implementing functions of an object.\n+ *\n+ * @since 1.2.0\n+ */\n+@JavaSPIService(\"org.ballerinalang.langserver.commons.codeaction.spi.LSCodeActionProvider\")\n+public class ImplementFunctionsCodeAction extends AbstractCodeActionProvider {\n+    private static final String NO_IMPL_FOUND_FOR_FUNCTION = \"no implementation found for the function\";\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return false;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CodeAction> getDiagBasedCodeActions(Diagnostic diagnostic,\n+                                                    PositionDetails positionDetails, List<Diagnostic> allDiagnostics,\n+                                                    SyntaxTree syntaxTree, LSContext context) {\n+        if (!(diagnostic.getMessage().startsWith(NO_IMPL_FOUND_FOR_FUNCTION))) {\n+            return Collections.emptyList();\n+        }\n+//        BLangPackage bLangPackage = context.get(DocumentServiceKeys.CURRENT_BLANG_PACKAGE_CONTEXT_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a109388077df92ad6be965f9bacc05ff757e2b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzOTAzOQ==", "bodyText": "Yes, this is due to spotbugs complaints and had to comment them since fixes are huge. Will send a separate PR for this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26877#discussion_r521839039", "createdAt": "2020-11-12T04:56:23Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/providers/ImplementFunctionsCodeAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.codeaction.providers;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import org.ballerinalang.annotation.JavaSPIService;\n+import org.ballerinalang.langserver.common.constants.CommandConstants;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.codeaction.spi.PositionDetails;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Code Action for implementing functions of an object.\n+ *\n+ * @since 1.2.0\n+ */\n+@JavaSPIService(\"org.ballerinalang.langserver.commons.codeaction.spi.LSCodeActionProvider\")\n+public class ImplementFunctionsCodeAction extends AbstractCodeActionProvider {\n+    private static final String NO_IMPL_FOUND_FOR_FUNCTION = \"no implementation found for the function\";\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return false;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CodeAction> getDiagBasedCodeActions(Diagnostic diagnostic,\n+                                                    PositionDetails positionDetails, List<Diagnostic> allDiagnostics,\n+                                                    SyntaxTree syntaxTree, LSContext context) {\n+        if (!(diagnostic.getMessage().startsWith(NO_IMPL_FOUND_FOR_FUNCTION))) {\n+            return Collections.emptyList();\n+        }\n+//        BLangPackage bLangPackage = context.get(DocumentServiceKeys.CURRENT_BLANG_PACKAGE_CONTEXT_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3NjA1OA=="}, "originalCommit": {"oid": "08a109388077df92ad6be965f9bacc05ff757e2b"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3149, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}