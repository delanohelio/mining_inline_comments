{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODI3NzMz", "number": 21209, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODoxNDowOVrODimgyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzowNDoyOVrODk5drw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjA5MTYyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODoxNDoxMFrOFt8KYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoxNzo0N1rOFwOIgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNTkzOQ==", "bodyText": "The grammar seems to allow annotations, but are we handling them?\nhttps://github.com/ballerina-platform/ballerina-lang/pull/21209/files#diff-0e72b59e6b830c29e9c6161f3bb4177aR844\nThe following should fail since an annotation allowed only on const is being used with a let var, but doesn't.\nint globalVar = 5;\n\nconst annotation v1 on source const;\n\npublic function main() {\n    int b = let @v1 int x = 4 in 2 * x * globalVar;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r383715939", "createdAt": "2020-02-25T08:14:10Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -1436,6 +1436,51 @@ public void exitListConstructorExpr(BallerinaParser.ListConstructorExprContext c\n         this.pkgBuilder.addListConstructorExpression(getCurrentPos(ctx), getWS(ctx), argsAvailable);\n     }\n \n+    @Override\n+    public void enterLetExpression(BallerinaParser.LetExpressionContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startLetVarList();\n+    }\n+\n+    @Override\n+    public void enterLetExpr(BallerinaParser.LetExprContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startLetVarList();\n+    }\n+\n+    @Override\n+    public void exitLetExpression(BallerinaParser.LetExpressionContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.addLetExpression(getCurrentPos(ctx));\n+    }\n+\n+    @Override\n+    public void exitLetVarDecl(BallerinaParser.LetVarDeclContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzUyMg==", "bodyText": "This is fixed:\nThe above code should print the following error:\nannotation 'v1' is not allowed on var\nAlso added test cases to cover this. Please refer tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationAttachmentPointTest.java on this PR", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386107522", "createdAt": "2020-03-01T13:17:47Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -1436,6 +1436,51 @@ public void exitListConstructorExpr(BallerinaParser.ListConstructorExprContext c\n         this.pkgBuilder.addListConstructorExpression(getCurrentPos(ctx), getWS(ctx), argsAvailable);\n     }\n \n+    @Override\n+    public void enterLetExpression(BallerinaParser.LetExpressionContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startLetVarList();\n+    }\n+\n+    @Override\n+    public void enterLetExpr(BallerinaParser.LetExprContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startLetVarList();\n+    }\n+\n+    @Override\n+    public void exitLetExpression(BallerinaParser.LetExpressionContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.addLetExpression(getCurrentPos(ctx));\n+    }\n+\n+    @Override\n+    public void exitLetVarDecl(BallerinaParser.LetVarDeclContext ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNTkzOQ=="}, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjA5NjcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODoxNjowN1rOFt8NkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoyNTo1NlrOFwOK5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNjc1Mg==", "bodyText": "Shall we create an issue for these if we haven't already?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r383716752", "createdAt": "2020-02-25T08:16:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1343,6 +1344,20 @@ private void checkForExportableType(BTypeSymbol symbol, DiagnosticPos pos) {\n         }\n     }\n \n+    public void visit(BLangLetExpression letExpression) {\n+        int ownerSymTag = this.env.scope.owner.tag;\n+        if ((ownerSymTag & SymTag.RECORD) == SymTag.RECORD) {\n+            dlog.error(letExpression.pos, DiagnosticCode.LET_EXPRESSION_NOT_YET_SUPPORTED_RECORD_FIELD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwODEzNQ==", "bodyText": "Please refer to the issue.\n#21382", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386108135", "createdAt": "2020-03-01T13:25:56Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1343,6 +1344,20 @@ private void checkForExportableType(BTypeSymbol symbol, DiagnosticPos pos) {\n         }\n     }\n \n+    public void visit(BLangLetExpression letExpression) {\n+        int ownerSymTag = this.env.scope.owner.tag;\n+        if ((ownerSymTag & SymTag.RECORD) == SymTag.RECORD) {\n+            dlog.error(letExpression.pos, DiagnosticCode.LET_EXPRESSION_NOT_YET_SUPPORTED_RECORD_FIELD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNjc1Mg=="}, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjEwOTIzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/let/let-expression-test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODoyMDo0OVrOFt8VWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoxODowNlrOFwOImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxODc0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return k*2;\n          \n          \n            \n                return k * 2;\n          \n      \n    \n    \n  \n\nShall we fix everywhere?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r383718746", "createdAt": "2020-02-25T08:20:49Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/let/let-expression-test.bal", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const int globalVar = 2;\n+\n+function testBasicLetExpr() {\n+    int b = let int x = 4 in 2*x*globalVar;\n+    int c = let int x = 4 in 3*x*globalVar;\n+    assertTrue(b == 16, \"b == 16\");\n+    assertTrue(c == 24, \"c == 24\");\n+}\n+\n+function testBasicLetExprVar() {\n+    int b = let var x = 4 in 2*x*globalVar;\n+    assertTrue(b == 16, \"b == 16\");\n+}\n+\n+function testMultipleVarDeclLetExpr() {\n+    int b = let int x = globalVar*2, int z = 5 in z*x*globalVar;\n+    assertTrue(b == 40, \"b == 40\");\n+}\n+\n+function testMultipleVarDeclReuseLetExpr() {\n+    int b = let int x = 2, int z = 5+x in z*x*globalVar;\n+    assertTrue(b == 28, \"b == 28\");\n+}\n+\n+function testFunctionCallInVarDeclLetExpr() {\n+    int y = 1;\n+    int b = let int x = 4, int z = func(y + y*2 + globalVar) in z*(x+globalVar+y);\n+    assertTrue(b == 70, \"b == 70\");\n+}\n+\n+function testFunctionCallInLetExpr() {\n+    int y = 1;\n+    int b = let int x = 4, int z = 10 in func(x*z);\n+    assertTrue(b == 80, \"b == 80\");\n+}\n+\n+function testLetExprAsFunctionArg() {\n+    int b = func2(let string x = \"aaa\", string y = \"bbb\" in x+y);\n+    assertTrue(b == 6, \"b == 6\");\n+}\n+\n+function testLetExprInIfStatement() {\n+    int a = 1;\n+    if((let int x = 4, int z = 5 in z*x) == 20) {\n+        a = let int x = 4, int z = 5+a in z+x+a+globalVar;\n+    }\n+    assertTrue(a == 13, \"a == 13\");\n+}\n+\n+function testLetExprInWhileStatement() {\n+    int a = 1;\n+    while(((let int x = 4, int z = 5 in z*x) == 20) && a == 1) {\n+        a = let int x = 4, int z = 5+a in z+x+a+globalVar;\n+    }\n+    assertTrue(a == 13, \"a == 13\");\n+}\n+\n+function testLetExprInCompoundStatement() {\n+    int a = 10;\n+    a -= let int x = 4, int z = 5 in z+x;\n+    assertTrue(a == 1, \"a == 1\");\n+}\n+\n+function testLetExpressionInMatch() {\n+    int a = 1;\n+    match let int x = 4, int z = 5 in z+x {\n+        1 => {\n+            a = 2;\n+        }\n+        9 => {\n+            a = 9;\n+        }\n+    }\n+    assertTrue(a == 9, \"a == 9\");\n+}\n+\n+function testLetExpressionInReturn() {\n+    int result = useLetInReturn();\n+    assertTrue(result == 9, \"result == 9\");\n+}\n+\n+function testLetExprInElvis() {\n+    int|() x = ();\n+    int b;\n+    b = x ?: let int y = 5, int z = 5 in z+y;\n+    assertTrue(b == 10, \"b == 10\");\n+}\n+\n+function testLetExprInUnion() {\n+    int|string x = let int y = 5, int z = 5 in z+y;\n+    assertTrue(x == 10, \"x == 10\");\n+}\n+\n+function testLetExprInTransaction() {\n+    int a = 10;\n+    if (a == 10) {\n+        int c = 8;\n+        transaction with retries = 0 {\n+                int b = let int y = 5+c, int z = 5+a in z+y+a+c+globalVar;\n+                a = b;\n+         }\n+    }\n+    assertTrue(a == 48, \"a == 48\");\n+}\n+\n+function testLetExprInArrowFunction() {\n+   int a = 10;\n+   if (a == 10) {\n+       int b = 11;\n+       transaction with retries = 0 {\n+           int c = a + b;\n+           function (int, int) returns int ar = (x, y) => let int m = 5+x, int n = 5+y in x+y+m+n+a+b+c+globalVar;\n+           a = ar(1, 1);\n+       }\n+   }\n+   assertTrue(a == 58, \"a == 58\");\n+}\n+\n+function testLetExprInJSON() {\n+    json j = {fname:\"Jhon\", lname:\"Doe\", age:let int x = 4 in 2*x*globalVar};\n+    assertTrue(j.age == 16, \"j.age == 16\");\n+\n+    json k = {fname:\"Jhon\", lname:\"Doe\", age:let json x = {age: 16} in x.age};\n+    assertTrue(k.age == 16, \"k.age == 16\");\n+\n+}\n+\n+function testLetExpresionInArrays() {\n+    int[] b = [let int x = globalVar*2, int z = 5 in z*x*globalVar, 2, 3, 4];\n+    assertTrue(b[0] == 40, \"b[0] == 40\");\n+\n+    int[] c = [let int[] x = [2, 3], int z = 5 in z*x[0], 2, 3, 4];\n+    assertTrue(c[0] == 10, \"c[0] == 10\");\n+}\n+\n+function testLetExpresionInTuples() {\n+    [int, string] a = [let int x = globalVar*2, int z = 5 in z*x*globalVar, \"John\"];\n+    assertTrue(a[0] == 40, \"a[0] == 40\");\n+\n+    [int, string] b = [let [int, string] x = [1, \"hello\"], int z = x[0] + 1 in z*x[0]*globalVar, \"John\"];\n+    assertTrue(b[0] == 4, \"b[0] == 4\");\n+}\n+\n+function testLetExprInMap() {\n+    map<string> addrMap = { line1: let string no = \"No, \", string twenty = \"20\" in no+twenty,\n+        line2: \"Palm Grove\", city: \"Colombo 03\", country: \"Sri Lanka\" };\n+    assertTrue(addrMap.get(\"line1\") == \"No, 20\", \"addrMap.get(\\\"line1\\\") == \\\"No, 20\\\"\");\n+\n+    map<string> student = {fname: let map<string> person = {name: \"Irshad\"} in person.get(\"name\"), lname: \"Nilam\"};\n+    assertTrue(student.get(\"fname\") == \"Irshad\", \"student.get(\\\"fname\\\") == \\\"Irshad\\\"\");\n+\n+}\n+\n+//type Student record {\n+//    int marks = let int x = 3, int z = 5 in z*x;\n+//};\n+\n+//function testLetExprInRecord() {\n+//    Student s = {};\n+//    assertTrue(s.marks == 15, \"s.marks == 6\");\n+//}\n+\n+//type Person object {\n+//    public int age = let int x = 3, int z = 5 in z*x;\n+//};\n+\n+//\n+//function testLetExprInOBj() {\n+//    Person s = new;\n+//    assertTrue(s.age == 15, \"s.age == 15\");\n+//}\n+\n+\n+function useLetInReturn() returns int {\n+    return let int x = 4, int z = 5 in z+x;\n+}\n+\n+function func(int k) returns int {\n+    return k*2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzU0NA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386107544", "createdAt": "2020-03-01T13:18:06Z", "author": {"login": "irshadnilam"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/let/let-expression-test.bal", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const int globalVar = 2;\n+\n+function testBasicLetExpr() {\n+    int b = let int x = 4 in 2*x*globalVar;\n+    int c = let int x = 4 in 3*x*globalVar;\n+    assertTrue(b == 16, \"b == 16\");\n+    assertTrue(c == 24, \"c == 24\");\n+}\n+\n+function testBasicLetExprVar() {\n+    int b = let var x = 4 in 2*x*globalVar;\n+    assertTrue(b == 16, \"b == 16\");\n+}\n+\n+function testMultipleVarDeclLetExpr() {\n+    int b = let int x = globalVar*2, int z = 5 in z*x*globalVar;\n+    assertTrue(b == 40, \"b == 40\");\n+}\n+\n+function testMultipleVarDeclReuseLetExpr() {\n+    int b = let int x = 2, int z = 5+x in z*x*globalVar;\n+    assertTrue(b == 28, \"b == 28\");\n+}\n+\n+function testFunctionCallInVarDeclLetExpr() {\n+    int y = 1;\n+    int b = let int x = 4, int z = func(y + y*2 + globalVar) in z*(x+globalVar+y);\n+    assertTrue(b == 70, \"b == 70\");\n+}\n+\n+function testFunctionCallInLetExpr() {\n+    int y = 1;\n+    int b = let int x = 4, int z = 10 in func(x*z);\n+    assertTrue(b == 80, \"b == 80\");\n+}\n+\n+function testLetExprAsFunctionArg() {\n+    int b = func2(let string x = \"aaa\", string y = \"bbb\" in x+y);\n+    assertTrue(b == 6, \"b == 6\");\n+}\n+\n+function testLetExprInIfStatement() {\n+    int a = 1;\n+    if((let int x = 4, int z = 5 in z*x) == 20) {\n+        a = let int x = 4, int z = 5+a in z+x+a+globalVar;\n+    }\n+    assertTrue(a == 13, \"a == 13\");\n+}\n+\n+function testLetExprInWhileStatement() {\n+    int a = 1;\n+    while(((let int x = 4, int z = 5 in z*x) == 20) && a == 1) {\n+        a = let int x = 4, int z = 5+a in z+x+a+globalVar;\n+    }\n+    assertTrue(a == 13, \"a == 13\");\n+}\n+\n+function testLetExprInCompoundStatement() {\n+    int a = 10;\n+    a -= let int x = 4, int z = 5 in z+x;\n+    assertTrue(a == 1, \"a == 1\");\n+}\n+\n+function testLetExpressionInMatch() {\n+    int a = 1;\n+    match let int x = 4, int z = 5 in z+x {\n+        1 => {\n+            a = 2;\n+        }\n+        9 => {\n+            a = 9;\n+        }\n+    }\n+    assertTrue(a == 9, \"a == 9\");\n+}\n+\n+function testLetExpressionInReturn() {\n+    int result = useLetInReturn();\n+    assertTrue(result == 9, \"result == 9\");\n+}\n+\n+function testLetExprInElvis() {\n+    int|() x = ();\n+    int b;\n+    b = x ?: let int y = 5, int z = 5 in z+y;\n+    assertTrue(b == 10, \"b == 10\");\n+}\n+\n+function testLetExprInUnion() {\n+    int|string x = let int y = 5, int z = 5 in z+y;\n+    assertTrue(x == 10, \"x == 10\");\n+}\n+\n+function testLetExprInTransaction() {\n+    int a = 10;\n+    if (a == 10) {\n+        int c = 8;\n+        transaction with retries = 0 {\n+                int b = let int y = 5+c, int z = 5+a in z+y+a+c+globalVar;\n+                a = b;\n+         }\n+    }\n+    assertTrue(a == 48, \"a == 48\");\n+}\n+\n+function testLetExprInArrowFunction() {\n+   int a = 10;\n+   if (a == 10) {\n+       int b = 11;\n+       transaction with retries = 0 {\n+           int c = a + b;\n+           function (int, int) returns int ar = (x, y) => let int m = 5+x, int n = 5+y in x+y+m+n+a+b+c+globalVar;\n+           a = ar(1, 1);\n+       }\n+   }\n+   assertTrue(a == 58, \"a == 58\");\n+}\n+\n+function testLetExprInJSON() {\n+    json j = {fname:\"Jhon\", lname:\"Doe\", age:let int x = 4 in 2*x*globalVar};\n+    assertTrue(j.age == 16, \"j.age == 16\");\n+\n+    json k = {fname:\"Jhon\", lname:\"Doe\", age:let json x = {age: 16} in x.age};\n+    assertTrue(k.age == 16, \"k.age == 16\");\n+\n+}\n+\n+function testLetExpresionInArrays() {\n+    int[] b = [let int x = globalVar*2, int z = 5 in z*x*globalVar, 2, 3, 4];\n+    assertTrue(b[0] == 40, \"b[0] == 40\");\n+\n+    int[] c = [let int[] x = [2, 3], int z = 5 in z*x[0], 2, 3, 4];\n+    assertTrue(c[0] == 10, \"c[0] == 10\");\n+}\n+\n+function testLetExpresionInTuples() {\n+    [int, string] a = [let int x = globalVar*2, int z = 5 in z*x*globalVar, \"John\"];\n+    assertTrue(a[0] == 40, \"a[0] == 40\");\n+\n+    [int, string] b = [let [int, string] x = [1, \"hello\"], int z = x[0] + 1 in z*x[0]*globalVar, \"John\"];\n+    assertTrue(b[0] == 4, \"b[0] == 4\");\n+}\n+\n+function testLetExprInMap() {\n+    map<string> addrMap = { line1: let string no = \"No, \", string twenty = \"20\" in no+twenty,\n+        line2: \"Palm Grove\", city: \"Colombo 03\", country: \"Sri Lanka\" };\n+    assertTrue(addrMap.get(\"line1\") == \"No, 20\", \"addrMap.get(\\\"line1\\\") == \\\"No, 20\\\"\");\n+\n+    map<string> student = {fname: let map<string> person = {name: \"Irshad\"} in person.get(\"name\"), lname: \"Nilam\"};\n+    assertTrue(student.get(\"fname\") == \"Irshad\", \"student.get(\\\"fname\\\") == \\\"Irshad\\\"\");\n+\n+}\n+\n+//type Student record {\n+//    int marks = let int x = 3, int z = 5 in z*x;\n+//};\n+\n+//function testLetExprInRecord() {\n+//    Student s = {};\n+//    assertTrue(s.marks == 15, \"s.marks == 6\");\n+//}\n+\n+//type Person object {\n+//    public int age = let int x = 3, int z = 5 in z*x;\n+//};\n+\n+//\n+//function testLetExprInOBj() {\n+//    Person s = new;\n+//    assertTrue(s.age == 15, \"s.age == 15\");\n+//}\n+\n+\n+function useLetInReturn() returns int {\n+    return let int x = 4, int z = 5 in z+x;\n+}\n+\n+function func(int k) returns int {\n+    return k*2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxODc0Ng=="}, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjExMTgzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/let/let-expression-test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODoyMTozM1rOFt8W6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoxODo1M1rOFwOI1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxOTE0NQ==", "bodyText": "Shall we add test for global variables and queries maybe?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r383719145", "createdAt": "2020-02-25T08:21:33Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/let/let-expression-test.bal", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const int globalVar = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzYwNA==", "bodyText": "Added test case for global let expressions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386107604", "createdAt": "2020-03-01T13:18:53Z", "author": {"login": "irshadnilam"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/let/let-expression-test.bal", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const int globalVar = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxOTE0NQ=="}, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjQyMzM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo1MDozM1rOFt_Yng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoxOTo1MlrOFwOJDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2ODczNA==", "bodyText": "Shall we rename the temp variable from \"$temp_var_0$\" to \"$temp_var$\"(something like this)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r383768734", "createdAt": "2020-02-25T09:50:33Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -987,6 +988,26 @@ public void visit(BLangSimpleVariable varNode) {\n         result = varNode;\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {\n+        SymbolEnv prevEnv = this.env;\n+        this.env = letExpression.env;\n+        BLangExpression expr = letExpression.expr;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(letExpression.pos);\n+        for (BLangVariable var : letExpression.letVarDeclarations) {\n+            BLangSimpleVariableDef varDef = createVarDef(((BLangSimpleVariable) var).name.getValue(), var.type,\n+                    var.expr, var.pos);\n+            blockStmt.addStatement(varDef);\n+        }\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$temp_var_0$\", expr.type, expr, expr.pos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzY2MA==", "bodyText": "Renamed to \"$let_var_%d_$\" where d is let expression count.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386107660", "createdAt": "2020-03-01T13:19:52Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -987,6 +988,26 @@ public void visit(BLangSimpleVariable varNode) {\n         result = varNode;\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {\n+        SymbolEnv prevEnv = this.env;\n+        this.env = letExpression.env;\n+        BLangExpression expr = letExpression.expr;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(letExpression.pos);\n+        for (BLangVariable var : letExpression.letVarDeclarations) {\n+            BLangSimpleVariableDef varDef = createVarDef(((BLangSimpleVariable) var).name.getValue(), var.type,\n+                    var.expr, var.pos);\n+            blockStmt.addStatement(varDef);\n+        }\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$temp_var_0$\", expr.type, expr, expr.pos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2ODczNA=="}, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDMzNTY0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangLetExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOTo0NDo0MFrOFuklTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzoyMDoyNVrOFwOJOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3ODE5MA==", "bodyText": "Shall we override the toString() method as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r384378190", "createdAt": "2020-02-26T09:44:40Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangLetExpression.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.LetExpressionNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.SymbolEnv;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangLetVariable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This represents a let expression in ballerina.\n+ *\n+ * @since 1.2.0\n+ */\n+public class BLangLetExpression extends BLangExpression implements LetExpressionNode {\n+\n+    public List<BLangLetVariable> letVarDeclarations = new ArrayList<>();\n+    public BLangExpression expr;\n+    public SymbolEnv env;\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.LET_EXPR;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzcwNw==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386107707", "createdAt": "2020-03-01T13:20:25Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangLetExpression.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.LetExpressionNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.SymbolEnv;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangLetVariable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This represents a let expression in ballerina.\n+ *\n+ * @since 1.2.0\n+ */\n+public class BLangLetExpression extends BLangExpression implements LetExpressionNode {\n+\n+    public List<BLangLetVariable> letVarDeclarations = new ArrayList<>();\n+    public BLangExpression expr;\n+    public SymbolEnv env;\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.LET_EXPR;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3ODE5MA=="}, "originalCommit": {"oid": "e926288f72286bbaf6a4b1a62a061d3d73e25dac"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjY5ODA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo1NTo0MlrOFwXl4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToyMjo0NlrOFwYXog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MjQ5Ng==", "bodyText": "Do we need this method, I think enterLetExpression cover this parser event", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386262496", "createdAt": "2020-03-02T08:55:42Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -1444,6 +1444,60 @@ public void exitListConstructorExpr(BallerinaParser.ListConstructorExprContext c\n         this.pkgBuilder.addListConstructorExpression(getCurrentPos(ctx), getWS(ctx), argsAvailable);\n     }\n \n+    @Override\n+    public void enterLetExpression(BallerinaParser.LetExpressionContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startLetVarList();\n+    }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "132c1aeee6ac007614857dd55d3d25d0ad8e3af3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NTIzNA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386275234", "createdAt": "2020-03-02T09:22:46Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -1444,6 +1444,60 @@ public void exitListConstructorExpr(BallerinaParser.ListConstructorExprContext c\n         this.pkgBuilder.addListConstructorExpression(getCurrentPos(ctx), getWS(ctx), argsAvailable);\n     }\n \n+    @Override\n+    public void enterLetExpression(BallerinaParser.LetExpressionContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startLetVarList();\n+    }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MjQ5Ng=="}, "originalCommit": {"oid": "132c1aeee6ac007614857dd55d3d25d0ad8e3af3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjcwMzIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo1NzoyNlrOFwXo-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToyMjozOVrOFwYXbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzI5MQ==", "bodyText": "Please see cloneList method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386263291", "createdAt": "2020-03-02T08:57:26Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "diffHunk": "@@ -969,6 +970,14 @@ public void visit(BLangGroupExpr source) {\n         clone.typedescType = source.typedescType;\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression source) {\n+        BLangLetExpression clone = new BLangLetExpression();\n+        source.cloneRef = clone;\n+        clone.letVarDeclarations = source.letVarDeclarations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "132c1aeee6ac007614857dd55d3d25d0ad8e3af3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NTE4MA==", "bodyText": "Seems like cloning letvarDeclarations is missed.\nCannot use cloneList since BLangLetVariable is not a Node,\nFixed with 98c1e00", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386275180", "createdAt": "2020-03-02T09:22:39Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "diffHunk": "@@ -969,6 +970,14 @@ public void visit(BLangGroupExpr source) {\n         clone.typedescType = source.typedescType;\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression source) {\n+        BLangLetExpression clone = new BLangLetExpression();\n+        source.cloneRef = clone;\n+        clone.letVarDeclarations = source.letVarDeclarations;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzI5MQ=="}, "originalCommit": {"oid": "132c1aeee6ac007614857dd55d3d25d0ad8e3af3"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjcyNDEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/SymTag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOToxODo1M1rOFw9vSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOToxODo1M1rOFw9vSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg4NzQ5Ng==", "bodyText": "27?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386887496", "createdAt": "2020-03-03T09:18:53Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/SymTag.java", "diffHunk": "@@ -49,4 +49,5 @@\n     public static final int CONSTANT = 1 << 24 | VARIABLE_NAME | TYPE;\n     public static final int FUNCTION_TYPE = 1 << 25 | TYPE | VARIABLE_NAME;\n     public static final int CONSTRUCTOR = 1 << 26 | INVOKABLE;\n+    public static final int LET = 1 << 26 | CONSTRUCTOR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "518725bba2ce0b72f5bd33a3403eb479c5f12612"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Njg4MDE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/LetExpressionNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDowMTo1NFrOFw_QLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDowNDowOFrOFxfXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxMjMwMA==", "bodyText": "Shall we add a simple example?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386912300", "createdAt": "2020-03-03T10:01:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/LetExpressionNode.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f292a1c5858e660df2659ee01eead2015d58f4c1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODUzOQ==", "bodyText": "Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387438539", "createdAt": "2020-03-04T04:04:08Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/LetExpressionNode.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxMjMwMA=="}, "originalCommit": {"oid": "f292a1c5858e660df2659ee01eead2015d58f4c1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODIwMDU1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTo1NTo0OVrOFxLtug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDowNDoxOFrOFxfX4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNjQ3NA==", "bodyText": "Not aligned?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387116474", "createdAt": "2020-03-03T15:55:49Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1129,10 +1137,28 @@ void addSimpleVariableDefStatement(DiagnosticPos pos, Set<Whitespace> ws, String\n         addStmtToCurrentBlock(varDefNode);\n     }\n \n+    void addSimpleLetVariableDefStatement(DiagnosticPos pos, Set<Whitespace> ws, String identifier,\n+                                       DiagnosticPos identifierPos, boolean isExpressionAvailable,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c6433b9df3860b6869de71044345b728ef5802"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODU2MA==", "bodyText": "Aligned.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387438560", "createdAt": "2020-03-04T04:04:18Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1129,10 +1137,28 @@ void addSimpleVariableDefStatement(DiagnosticPos pos, Set<Whitespace> ws, String\n         addStmtToCurrentBlock(varDefNode);\n     }\n \n+    void addSimpleLetVariableDefStatement(DiagnosticPos pos, Set<Whitespace> ws, String identifier,\n+                                       DiagnosticPos identifierPos, boolean isExpressionAvailable,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNjQ3NA=="}, "originalCommit": {"oid": "49c6433b9df3860b6869de71044345b728ef5802"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODIxNzYyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTo1OTozMVrOFxL4iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDowNDozMFrOFxfYCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExOTI0Mw==", "bodyText": "Can't we do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            BLangBlockStmt defBlock = (BLangBlockStmt) node;\n          \n          \n            \n                            for (BLangStatement stmt : defBlock.stmts) {\n          \n          \n            \n                                blockStmt.addStatement(stmt);\n          \n          \n            \n                            }\n          \n          \n            \n                            blockStmt.stmts.addAll(((BLangBlockStmt) node).stmts);\n          \n      \n    \n    \n  \n\ninstead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387119243", "createdAt": "2020-03-03T15:59:31Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1100,6 +1103,33 @@ public void visit(BLangSimpleVariable varNode) {\n         result = varNode;\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {\n+        SymbolEnv prevEnv = this.env;\n+        this.env = letExpression.env;\n+        BLangExpression expr = letExpression.expr;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(letExpression.pos);\n+        for (BLangLetVariable letVariable : letExpression.letVarDeclarations) {\n+            BLangNode node  = rewrite((BLangNode) letVariable.definitionNode, env);\n+            if (node.getKind() == NodeKind.BLOCK) {\n+                BLangBlockStmt defBlock = (BLangBlockStmt) node;\n+                for (BLangStatement stmt : defBlock.stmts) {\n+                    blockStmt.addStatement(stmt);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c6433b9df3860b6869de71044345b728ef5802"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODYwMQ==", "bodyText": "+1. fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387438601", "createdAt": "2020-03-04T04:04:30Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1100,6 +1103,33 @@ public void visit(BLangSimpleVariable varNode) {\n         result = varNode;\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {\n+        SymbolEnv prevEnv = this.env;\n+        this.env = letExpression.env;\n+        BLangExpression expr = letExpression.expr;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(letExpression.pos);\n+        for (BLangLetVariable letVariable : letExpression.letVarDeclarations) {\n+            BLangNode node  = rewrite((BLangNode) letVariable.definitionNode, env);\n+            if (node.getKind() == NodeKind.BLOCK) {\n+                BLangBlockStmt defBlock = (BLangBlockStmt) node;\n+                for (BLangStatement stmt : defBlock.stmts) {\n+                    blockStmt.addStatement(stmt);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExOTI0Mw=="}, "originalCommit": {"oid": "49c6433b9df3860b6869de71044345b728ef5802"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDE2ODE1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzowNDoyOVrOFxemVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNTo1MjoxM1rOFxgvZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNTg3OQ==", "bodyText": "Shouldn't this be implemented?\nDoes dataflow analysis happen, to identify i here is un-initialized?\npublic function main() {\n    int i;\n    int b = let int x = 4 + i in 2 * x * i;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387425879", "createdAt": "2020-03-04T03:04:29Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -302,6 +303,10 @@ public void visit(BLangBlockStmt blockNode) {\n         blockNode.stmts.forEach(statement -> analyzeNode(statement, blockEnv));\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c6433b9df3860b6869de71044345b728ef5802"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODczNA==", "bodyText": "+1. Fixed in ef33eef", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387438734", "createdAt": "2020-03-04T04:05:17Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -302,6 +303,10 @@ public void visit(BLangBlockStmt blockNode) {\n         blockNode.stmts.forEach(statement -> analyzeNode(statement, blockEnv));\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNTg3OQ=="}, "originalCommit": {"oid": "49c6433b9df3860b6869de71044345b728ef5802"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NDY2NA==", "bodyText": "Shall we add tests too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387444664", "createdAt": "2020-03-04T04:35:34Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -302,6 +303,10 @@ public void visit(BLangBlockStmt blockNode) {\n         blockNode.stmts.forEach(statement -> analyzeNode(statement, blockEnv));\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNTg3OQ=="}, "originalCommit": {"oid": "49c6433b9df3860b6869de71044345b728ef5802"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MDk2NQ==", "bodyText": "Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387460965", "createdAt": "2020-03-04T05:52:13Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -302,6 +303,10 @@ public void visit(BLangBlockStmt blockNode) {\n         blockNode.stmts.forEach(statement -> analyzeNode(statement, blockEnv));\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNTg3OQ=="}, "originalCommit": {"oid": "49c6433b9df3860b6869de71044345b728ef5802"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1132, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}