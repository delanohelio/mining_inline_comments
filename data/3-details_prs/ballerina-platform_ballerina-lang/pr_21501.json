{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjQyMTc0", "number": 21501, "title": "Add filling-read operation for lvalue arrays", "bodyText": "Purpose\n\nThis PR adds filling-read functionality for arrays when it is used as an lvalue.\n\nApproach\n\nThis was achieved by,\n\nadding a new API to the array value which first fills the array if the user provided index is greater than the size of the array.\nWhen generating the BIR, generate mark the field accesses as filling-read ops if the array is used as an lvalue.\nWhen generating the code, invoke the getter with the filling-read op if the field access is marked as one which required filling-read.\n\n\nSamples\nimport ballerina/io;\n\npublic function main() returns error? {\n    int[][][] arr = [];\n    arr[0][0][2] = 102;\n    arr[0][1][1] = 111;\n    \n    arr[1][0][2] = 202;\n    arr[1][1][4] = 214;\n\n    arr[4][0][1] = 501;\n\n    foreach var x in arr {\n        io:print(\"[\");\n        foreach var y in x {\n            io:print(\"[\");\n            foreach var z in y {\n                io:print(z, \", \");\n            }\n            io:print(\"], \");\n        }\n        io:println(\"]\");\n    }\n}\nThe runs without any issues and prints the following:\n[[0, 0, 102, ], [0, 111, ], ]\n[[0, 0, 202, ], [0, 0, 0, 0, 214, ], ]\n[]\n[]\n[[0, 501, ], ]\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-05T12:15:52Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501", "merged": true, "mergeCommit": {"oid": "bb05a791df3188bb72110953301cca9a75da329f"}, "closed": true, "closedAt": "2020-03-11T09:50:45Z", "author": {"login": "pubudu91"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKqpQYABqjMxMDA5NzgzMzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMfPUpAH2gAyMzg0MjQyMTc0OjE3OGIwZDk0NjdiMDZkMjA0M2JkZDI5MTJkOWQ2YmYyZGEwZDFhM2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d101ae034e7be21a0b8bf37caeef3344fc497d58", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d101ae034e7be21a0b8bf37caeef3344fc497d58", "committedDate": "2020-03-05T12:04:01Z", "message": "Add support for filling read for array load ins"}, "afterCommit": {"oid": "8e3c3d1c2a38dc2fc10e08a4664f04e36801ba51", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e3c3d1c2a38dc2fc10e08a4664f04e36801ba51", "committedDate": "2020-03-05T12:25:59Z", "message": "Add support for filling read for array load ins"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e3c3d1c2a38dc2fc10e08a4664f04e36801ba51", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e3c3d1c2a38dc2fc10e08a4664f04e36801ba51", "committedDate": "2020-03-05T12:25:59Z", "message": "Add support for filling read for array load ins"}, "afterCommit": {"oid": "5574196b4c3db66dfd2a16499c486d58483d4c92", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5574196b4c3db66dfd2a16499c486d58483d4c92", "committedDate": "2020-03-09T19:08:57Z", "message": "Add test cases for lvalue arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dad5fcae5d1059793c7744b0490bdfbcb427f7d9", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dad5fcae5d1059793c7744b0490bdfbcb427f7d9", "committedDate": "2020-03-10T05:27:55Z", "message": "Add a getter to array value with filling-read op"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c1a8648c3ec33b669c96e7edc82ae833eb76d0", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/06c1a8648c3ec33b669c96e7edc82ae833eb76d0", "committedDate": "2020-03-10T05:28:00Z", "message": "Add support for filling read for array load ins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2c4a73cb4e4e32d7bdbf3dcf43de75f0d415d80", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2c4a73cb4e4e32d7bdbf3dcf43de75f0d415d80", "committedDate": "2020-03-10T05:28:00Z", "message": "Simplify array filling read op"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b2f144804d9e70c42398ba65062f302e8393fdd", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b2f144804d9e70c42398ba65062f302e8393fdd", "committedDate": "2020-03-10T05:28:00Z", "message": "Ensure a new filler value is created for each ref element in array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "868f55624d68a8882d548b1e3138c2542784c2af", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/868f55624d68a8882d548b1e3138c2542784c2af", "committedDate": "2020-03-10T05:28:00Z", "message": "Enable fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f218c92f3baef5241ad3089588ca441799090c0", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f218c92f3baef5241ad3089588ca441799090c0", "committedDate": "2020-03-10T05:28:00Z", "message": "Add test cases for lvalue arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a507a19851ca97a7c1d0997d1d849781ab687d16", "committedDate": "2020-03-10T05:28:00Z", "message": "Fix checkstyle issue in test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a3ac97403b2d1a1e9bcc0f35e3371e00b157ae0", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a3ac97403b2d1a1e9bcc0f35e3371e00b157ae0", "committedDate": "2020-03-10T05:03:17Z", "message": "Fix checkstyle issue in test"}, "afterCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a507a19851ca97a7c1d0997d1d849781ab687d16", "committedDate": "2020-03-10T05:28:00Z", "message": "Fix checkstyle issue in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjk5NDA3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#pullrequestreview-371699407", "createdAt": "2020-03-10T06:08:16Z", "commit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowODoxN1rOF0CeKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowODoxN1rOF0CeKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean needsFilling = index >= size;\n          \n          \n            \n                        if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {\n          \n          \n            \n                        if (index >= size && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390110761", "createdAt": "2020-03-10T06:08:17Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -229,9 +229,21 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        if (refValues != null) {\n+            boolean needsFilling = index >= size;\n+            if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzAwMjIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#pullrequestreview-371700221", "createdAt": "2020-03-10T06:11:02Z", "commit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoxMTowMlrOF0Cg_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoyMzoxOFrOF0CsXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTQ4NA==", "bodyText": "Why are we specifically checking for array-typed elements though? This is valid for any array with an element type for which fill member is valid right?\nThe following seems to crash.\npublic function main() {\n    map<int>[] arr = [];\n\n    arr[0][\"i\"] = 1;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390111484", "createdAt": "2020-03-10T06:11:02Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -229,9 +229,21 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        if (refValues != null) {\n+            boolean needsFilling = index >= size;\n+            if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMzA2OA==", "bodyText": "I think we should also check if fill member is valid for this particular element type before calling .getZeroValue().\nThe following also crashes\nimport ballerina/io;\n\npublic function main() {\n    Foo[][2] arr = [];\n\n    arr[0][1] = {s: \"\"}; // should fail here since Foo doesn't have a filler value\n\n    io:println(arr[0][0].s); // fails since this particular `Foo` doesn't have a field `s`\n}\n\ntype Foo record {\n    string s;\n};\nballerina-internal.log\n[2020-03-10 11:46:37,334] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat abc.main(abc.bal:8)\n\tat ___init.$lambda$main$(.)\n\tat org.ballerinalang.jvm.scheduling.SchedulerItem.execute(Scheduler.java:426)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.run(Scheduler.java:218)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.runSafely(Scheduler.java:191)\n\tat java.lang.Thread.run(Thread.java:745)\n \n[2020-03-10 11:46:37,339] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat abc.main(abc.bal:8)\n\tat ___init.$lambda$main$(.)\n\tat org.ballerinalang.jvm.scheduling.SchedulerItem.execute(Scheduler.java:426)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.run(Scheduler.java:218)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.runSafely(Scheduler.java:191)\n\tat java.lang.Thread.run(Thread.java:745)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390113068", "createdAt": "2020-03-10T06:17:36Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -229,9 +229,21 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        if (refValues != null) {\n+            boolean needsFilling = index >= size;\n+            if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDE1Mw==", "bodyText": "Shouldn't we implement the same for tuples too?\nThe following fails with an index out of range?\npublic function main() {\n    [boolean, int[]...] x = [true];\n\n    x[1][1] = 1;\n}\nThe following also\npublic function main() {\n    [boolean, [float, int]...] x = [true];\n\n    x[1][1] = 1;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390114153", "createdAt": "2020-03-10T06:22:13Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TupleValueImpl.java", "diffHunk": "@@ -163,6 +163,11 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        return get(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDM5OA==", "bodyText": "Can't we write these tests in Ballerina? Maybe in a separate PR?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390114398", "createdAt": "2020-03-10T06:23:18Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArrayLValueFillTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValueArray;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.ballerinalang.util.exceptions.BLangRuntimeException;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+/**\n+ * Test cases for filling the elements of a multi-dimensional array when it is used as an LValue.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ArrayLValueFillTest {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        compileResult = BCompileUtil.compile(\"test-src/statements/arrays/array_lvalue_fill_test.bal\");\n+    }\n+\n+    @Test\n+    public void testSimpleBasic2DArrays() {\n+        BRunUtil.invoke(compileResult, \"testSimpleBasic2DArrays\");\n+    }\n+\n+    @Test\n+    public void test2DRecordArrays() {\n+        BRunUtil.invoke(compileResult, \"test2DRecordArrays\");\n+    }\n+\n+    @Test\n+    public void test2DObjectArrays() {\n+        BValueArray arr = (BValueArray) BRunUtil.invokeFunction(compileResult, \"test2DObjectArrays\")[0];\n+\n+        assertEquals(arr.size(), 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f1d6d0646b2b2f25b5c5c1ff76b73efef8b3dfa", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f1d6d0646b2b2f25b5c5c1ff76b73efef8b3dfa", "committedDate": "2020-03-10T06:51:56Z", "message": "Support filling-read for 1D arrays as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82090955869e433d10c1cd11e84b464448048f56", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/82090955869e433d10c1cd11e84b464448048f56", "committedDate": "2020-03-10T11:47:46Z", "message": "Implement filling-read op for tuples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a4d9991eaf5181af399ae9dcaba403520a0d963", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a4d9991eaf5181af399ae9dcaba403520a0d963", "committedDate": "2020-03-10T19:24:33Z", "message": "Add fillRead() method instead of using add()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5c9f0db67795aff1fc45dbdc031767f464c9128", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5c9f0db67795aff1fc45dbdc031767f464c9128", "committedDate": "2020-03-10T19:34:26Z", "message": "Add fillRead() method to tuple instead of using add()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "178b0d9467b06d2043bdd2912d9d6bf2da0d1a3c", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/178b0d9467b06d2043bdd2912d9d6bf2da0d1a3c", "committedDate": "2020-03-11T04:16:58Z", "message": "Fix checkstyle issue"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3976, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}