{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDAyNjUz", "number": 20652, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTozMzozMFrODYyoLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNToxMjo0NFrODZYKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzIxOTAxOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTozMzozMFrOFe2bMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDoxMzoxOVrOFfK6VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MzI5OQ==", "bodyText": "Since we are setting this value in the constructor, Do we need to initialize this with an empty string?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r367893299", "createdAt": "2020-01-17T11:33:30Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -115,27 +119,46 @@ public type ConsumerConfig record {|\n # + timestamp - Timestamp of the record, in milliseconds since epoch.\n # + topic - Topic to which the record belongs to.\n public type ConsumerRecord record {|\n-    byte[] key;\n-    byte[] value;\n+    Data key;\n+    Data value;\n     int offset;\n     int partition;\n     int timestamp;\n     string topic;\n |};\n \n+# In-built Kafka byte array deserializer.\n+public const DES_BYTE_ARRAY = \"BYTE_ARRAY\";\n+\n+# In-built Kafka string deserializer.\n+public const DES_STRING = \"STRING\";\n+\n+# In-built Kafka int deserializer.\n+public const DES_INT = \"INT\";\n+\n+# In-built Kafka float deserializer.\n+public const DES_FLOAT = \"FLOAT\";\n+\n+# Kafka in-built deserializer type.\n+public type DeserializerType DES_BYTE_ARRAY|DES_STRING|DES_INT|DES_FLOAT;\n+\n # Represent a Kafka consumer endpoint.\n #\n # + consumerConfig - Used to store configurations related to a Kafka connection.\n public type Consumer client object {\n-    *lang:Listener;\n+    *'object:Listener;\n \n     public ConsumerConfig? consumerConfig = ();\n+    private string keyDeserializer = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a180de69e612609a6a85797a1b04a2946c8de7ee"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyODk0OA==", "bodyText": "Ah yes. Agreed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368228948", "createdAt": "2020-01-18T14:13:19Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -115,27 +119,46 @@ public type ConsumerConfig record {|\n # + timestamp - Timestamp of the record, in milliseconds since epoch.\n # + topic - Topic to which the record belongs to.\n public type ConsumerRecord record {|\n-    byte[] key;\n-    byte[] value;\n+    Data key;\n+    Data value;\n     int offset;\n     int partition;\n     int timestamp;\n     string topic;\n |};\n \n+# In-built Kafka byte array deserializer.\n+public const DES_BYTE_ARRAY = \"BYTE_ARRAY\";\n+\n+# In-built Kafka string deserializer.\n+public const DES_STRING = \"STRING\";\n+\n+# In-built Kafka int deserializer.\n+public const DES_INT = \"INT\";\n+\n+# In-built Kafka float deserializer.\n+public const DES_FLOAT = \"FLOAT\";\n+\n+# Kafka in-built deserializer type.\n+public type DeserializerType DES_BYTE_ARRAY|DES_STRING|DES_INT|DES_FLOAT;\n+\n # Represent a Kafka consumer endpoint.\n #\n # + consumerConfig - Used to store configurations related to a Kafka connection.\n public type Consumer client object {\n-    *lang:Listener;\n+    *'object:Listener;\n \n     public ConsumerConfig? consumerConfig = ();\n+    private string keyDeserializer = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MzI5OQ=="}, "originalCommit": {"oid": "a180de69e612609a6a85797a1b04a2946c8de7ee"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjcyNzU0OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODoxNTowNFrOFfWILQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1NzoyNFrOFfdhWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMjcxNw==", "bodyText": "Shall we move these sub logic to a sub function?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368412717", "createdAt": "2020-01-20T08:15:04Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,11 +199,176 @@ public type Producer client object {\n     # + partition - Partition to which the record should be sent.\n     # + timestamp - Timestamp of the record, in milliseconds since epoch.\n     # + return - Returns `kafka:ProducerError` if send action fails to send data, nil otherwise.\n-    public remote function send(byte[] value, string topic, public byte[]? key = (), public int? partition = (),\n+    public remote function send(Data value, string topic, public Data? key = (), public int? partition = (),\n                                 public int? timestamp = ()) returns ProducerError? {\n-        return producerSend(self, value, java:fromString(topic), key, partition, timestamp);\n-    }\n \n+        handle topicHandle = java:fromString(topic);\n+\n+        // Handle string values\n+        if (self.valueSerializer == SER_STRING) {\n+            if (value is string) {\n+                handle valueHandle = java:fromString(value);\n+\n+                if (key is ()) {\n+                    return producerSendString(self, valueHandle, topicHandle, partition, timestamp);\n+                }\n+\n+                if (self.keySerializer == SER_STRING) {\n+                    if (key is string) {\n+                        handle keyHandle = java:fromString(key);\n+                        return producerSendStringString(self, valueHandle, topicHandle, keyHandle, partition,\n+                                                        timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"string\");\n+                }\n+\n+                if (self.keySerializer == SER_INT) {\n+                    if (key is int) {\n+                        return producerSendStringInt(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"int\");\n+                }\n+\n+                if (self.keySerializer == SER_FLOAT) {\n+                    if (key is float) {\n+                        return producerSendStringFloat(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"float\");\n+                }\n+\n+                if (self.keySerializer == SER_BYTE_ARRAY) {\n+                    if (key is byte[]) {\n+                        return producerSendStringByteArray(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"byte[]\");\n+                }\n+            }\n+\n+            panic getValueTypeMismatchError(\"string\");\n+        }\n+\n+        // Handle int values\n+        if (self.valueSerializer == SER_INT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79eb30024bc11d187d92ef2cc1a7e26dbd65c82"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMzg1MQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368533851", "createdAt": "2020-01-20T12:57:24Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,11 +199,176 @@ public type Producer client object {\n     # + partition - Partition to which the record should be sent.\n     # + timestamp - Timestamp of the record, in milliseconds since epoch.\n     # + return - Returns `kafka:ProducerError` if send action fails to send data, nil otherwise.\n-    public remote function send(byte[] value, string topic, public byte[]? key = (), public int? partition = (),\n+    public remote function send(Data value, string topic, public Data? key = (), public int? partition = (),\n                                 public int? timestamp = ()) returns ProducerError? {\n-        return producerSend(self, value, java:fromString(topic), key, partition, timestamp);\n-    }\n \n+        handle topicHandle = java:fromString(topic);\n+\n+        // Handle string values\n+        if (self.valueSerializer == SER_STRING) {\n+            if (value is string) {\n+                handle valueHandle = java:fromString(value);\n+\n+                if (key is ()) {\n+                    return producerSendString(self, valueHandle, topicHandle, partition, timestamp);\n+                }\n+\n+                if (self.keySerializer == SER_STRING) {\n+                    if (key is string) {\n+                        handle keyHandle = java:fromString(key);\n+                        return producerSendStringString(self, valueHandle, topicHandle, keyHandle, partition,\n+                                                        timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"string\");\n+                }\n+\n+                if (self.keySerializer == SER_INT) {\n+                    if (key is int) {\n+                        return producerSendStringInt(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"int\");\n+                }\n+\n+                if (self.keySerializer == SER_FLOAT) {\n+                    if (key is float) {\n+                        return producerSendStringFloat(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"float\");\n+                }\n+\n+                if (self.keySerializer == SER_BYTE_ARRAY) {\n+                    if (key is byte[]) {\n+                        return producerSendStringByteArray(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"byte[]\");\n+                }\n+            }\n+\n+            panic getValueTypeMismatchError(\"string\");\n+        }\n+\n+        // Handle int values\n+        if (self.valueSerializer == SER_INT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMjcxNw=="}, "originalCommit": {"oid": "b79eb30024bc11d187d92ef2cc1a7e26dbd65c82"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTM2ODA0OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNToxMjo0NFrOFfuofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOTo0NDozN1rOFfzwow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNDIwNQ==", "bodyText": "Shall we change indentations as previous?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368814205", "createdAt": "2020-01-21T05:12:44Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,13 +199,174 @@ public type Producer client object {\n     # + partition - Partition to which the record should be sent.\n     # + timestamp - Timestamp of the record, in milliseconds since epoch.\n     # + return - Returns `kafka:ProducerError` if send action fails to send data, nil otherwise.\n-    public remote function send(byte[] value, string topic, public byte[]? key = (), public int? partition = (),\n-                                public int? timestamp = ()) returns ProducerError? {\n-        return producerSend(self, value, java:fromString(topic), key, partition, timestamp);\n+    public remote function send(Data value, string topic, public Data? key = (), public int? partition = (),\n+                                                            public int? timestamp = ()) returns ProducerError? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca87e5861403af5fca6f20c65888deecb4ef246f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5ODIxMQ==", "bodyText": "There are a few styling issues and also the java methods needed to re-arrange after the inter-op migration. This will be addressed in that PR.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368898211", "createdAt": "2020-01-21T09:44:37Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,13 +199,174 @@ public type Producer client object {\n     # + partition - Partition to which the record should be sent.\n     # + timestamp - Timestamp of the record, in milliseconds since epoch.\n     # + return - Returns `kafka:ProducerError` if send action fails to send data, nil otherwise.\n-    public remote function send(byte[] value, string topic, public byte[]? key = (), public int? partition = (),\n-                                public int? timestamp = ()) returns ProducerError? {\n-        return producerSend(self, value, java:fromString(topic), key, partition, timestamp);\n+    public remote function send(Data value, string topic, public Data? key = (), public int? partition = (),\n+                                                            public int? timestamp = ()) returns ProducerError? {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNDIwNQ=="}, "originalCommit": {"oid": "ca87e5861403af5fca6f20c65888deecb4ef246f"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 510, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}