{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MDEzMDcx", "number": 22447, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxODoyNVrODugrmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzozMTo0NVrODv0dmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDk2NTM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxODoyNVrOGAiWpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzoxMzoxNFrOGAvzaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNjAzNw==", "bodyText": "Why have we commented these (here and L2298) out instead of removing?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22447#discussion_r403216037", "createdAt": "2020-04-03T18:18:25Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2285,18 +2285,20 @@ public void visit(BLangIntRangeExpression intRangeExpression) {\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n \n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        if (recordTypeNode.isFieldAnalyseRequired) {\n-            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n-        }\n+//        if (recordTypeNode.isFieldAnalyseRequired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe16377caf1abeced1675ba5078ffdae4619f9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzNjM5Mw==", "bodyText": "removed 3e4ef54", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22447#discussion_r403436393", "createdAt": "2020-04-04T07:13:14Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2285,18 +2285,20 @@ public void visit(BLangIntRangeExpression intRangeExpression) {\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n \n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        if (recordTypeNode.isFieldAnalyseRequired) {\n-            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n-        }\n+//        if (recordTypeNode.isFieldAnalyseRequired) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNjAzNw=="}, "originalCommit": {"oid": "afe16377caf1abeced1675ba5078ffdae4619f9b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDk2ODM0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxODo1NlrOGAiYJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzoxMToxOFrOGBW94w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNjQyMg==", "bodyText": "Shall we replace this and below with foreach loops?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22447#discussion_r403216422", "createdAt": "2020-04-03T18:18:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2285,18 +2285,20 @@ public void visit(BLangIntRangeExpression intRangeExpression) {\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n \n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        if (recordTypeNode.isFieldAnalyseRequired) {\n-            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n-        }\n+//        if (recordTypeNode.isFieldAnalyseRequired) {\n+//            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n+//        }\n+        recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe16377caf1abeced1675ba5078ffdae4619f9b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTE2Nw==", "bodyText": "Fixed by : 3e8d2fb", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22447#discussion_r403439167", "createdAt": "2020-04-04T07:45:17Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2285,18 +2285,20 @@ public void visit(BLangIntRangeExpression intRangeExpression) {\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n \n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        if (recordTypeNode.isFieldAnalyseRequired) {\n-            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n-        }\n+//        if (recordTypeNode.isFieldAnalyseRequired) {\n+//            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n+//        }\n+        recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNjQyMg=="}, "originalCommit": {"oid": "afe16377caf1abeced1675ba5078ffdae4619f9b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1MzcyNQ==", "bodyText": "Can we use simple for-each loops instead.\n            for (BLangSimpleVariable field : recordTypeNode.fields) {\n                analyzeNode(field, recordEnv);\n            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22447#discussion_r403853725", "createdAt": "2020-04-06T06:24:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2285,18 +2285,20 @@ public void visit(BLangIntRangeExpression intRangeExpression) {\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n \n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        if (recordTypeNode.isFieldAnalyseRequired) {\n-            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n-        }\n+//        if (recordTypeNode.isFieldAnalyseRequired) {\n+//            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n+//        }\n+        recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNjQyMg=="}, "originalCommit": {"oid": "afe16377caf1abeced1675ba5078ffdae4619f9b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3ODA1MQ==", "bodyText": "done : a043994", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22447#discussion_r404078051", "createdAt": "2020-04-06T13:11:18Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2285,18 +2285,20 @@ public void visit(BLangIntRangeExpression intRangeExpression) {\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n \n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        if (recordTypeNode.isFieldAnalyseRequired) {\n-            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n-        }\n+//        if (recordTypeNode.isFieldAnalyseRequired) {\n+//            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n+//        }\n+        recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNjQyMg=="}, "originalCommit": {"oid": "afe16377caf1abeced1675ba5078ffdae4619f9b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDY5MjExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzozMTo0NVrOGCdybA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxMzo1OFrOGCgZVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzODM4MA==", "bodyText": "Shall we use a meaningful name instead of o?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22447#discussion_r405238380", "createdAt": "2020-04-08T03:31:45Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2326,24 +2324,29 @@ public void visit(BLangIntRangeExpression intRangeExpression) {\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n \n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        if (recordTypeNode.isFieldAnalyseRequired) {\n-            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            analyzeNode(field, recordEnv);\n         }\n     }\n \n     @Override\n     public void visit(BLangObjectTypeNode objectTypeNode) {\n \n         SymbolEnv objectEnv = SymbolEnv.createTypeEnv(objectTypeNode, objectTypeNode.symbol.scope, env);\n-        if (objectTypeNode.isFieldAnalyseRequired) {\n-            objectTypeNode.fields.forEach(field -> analyzeNode(field, objectEnv));\n+        for (BLangSimpleVariable field : objectTypeNode.fields) {\n+            analyzeNode(field, objectEnv);\n+        }\n+\n+        List<BLangFunction> bLangFunctionList = new ArrayList<>(objectTypeNode.functions);\n+        if (objectTypeNode.initFunction != null) {\n+            bLangFunctionList.add(objectTypeNode.initFunction);\n         }\n \n         // To ensure the order of the compile errors\n-        Stream.concat(objectTypeNode.functions.stream(),\n-                Optional.ofNullable(objectTypeNode.initFunction).map(Stream::of).orElseGet(Stream::empty))\n-                .sorted(Comparator.comparingInt(fn -> fn.pos.sLine))\n-                .forEachOrdered(fn -> this.analyzeNode(fn, objectEnv));\n+        bLangFunctionList.sort(Comparator.comparingInt(o -> o.pos.sLine));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04399453de1bfea94fff526dc43c541815c2dd1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MTExMA==", "bodyText": "done : a9ac13b", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22447#discussion_r405281110", "createdAt": "2020-04-08T06:13:58Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2326,24 +2324,29 @@ public void visit(BLangIntRangeExpression intRangeExpression) {\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n \n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        if (recordTypeNode.isFieldAnalyseRequired) {\n-            recordTypeNode.fields.forEach(field -> analyzeNode(field, recordEnv));\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            analyzeNode(field, recordEnv);\n         }\n     }\n \n     @Override\n     public void visit(BLangObjectTypeNode objectTypeNode) {\n \n         SymbolEnv objectEnv = SymbolEnv.createTypeEnv(objectTypeNode, objectTypeNode.symbol.scope, env);\n-        if (objectTypeNode.isFieldAnalyseRequired) {\n-            objectTypeNode.fields.forEach(field -> analyzeNode(field, objectEnv));\n+        for (BLangSimpleVariable field : objectTypeNode.fields) {\n+            analyzeNode(field, objectEnv);\n+        }\n+\n+        List<BLangFunction> bLangFunctionList = new ArrayList<>(objectTypeNode.functions);\n+        if (objectTypeNode.initFunction != null) {\n+            bLangFunctionList.add(objectTypeNode.initFunction);\n         }\n \n         // To ensure the order of the compile errors\n-        Stream.concat(objectTypeNode.functions.stream(),\n-                Optional.ofNullable(objectTypeNode.initFunction).map(Stream::of).orElseGet(Stream::empty))\n-                .sorted(Comparator.comparingInt(fn -> fn.pos.sLine))\n-                .forEachOrdered(fn -> this.analyzeNode(fn, objectEnv));\n+        bLangFunctionList.sort(Comparator.comparingInt(o -> o.pos.sLine));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzODM4MA=="}, "originalCommit": {"oid": "a04399453de1bfea94fff526dc43c541815c2dd1"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4523, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}