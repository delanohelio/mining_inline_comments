{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODk4NjQ0", "number": 25664, "title": "Add testcases for BIR variable optimization", "bodyText": "Purpose\n\nResolve #25157\n\nApproach\n\nThe tests are written to assert the birs by matching the generated bir dump with the expected bir dump\n\nSamples\n\nN/A\n\nRemarks\n\nN/A\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-09-08T09:07:54Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664", "merged": true, "mergeCommit": {"oid": "bddf7f785a440a09021d8b7320f03343b276bc08"}, "closed": true, "closedAt": "2020-09-10T11:02:14Z", "author": {"login": "riyafa"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHEDHsAFqTQ4NDY0Mzg5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHet1LgFqTQ4NTgxNzcyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NjQzODk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#pullrequestreview-484643899", "createdAt": "2020-09-09T03:57:44Z", "commit": {"oid": "8787ba5794cb8def3439bd86c8a8c0d81d214b97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzo1Nzo0NFrOHO1uzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzo1Nzo0NFrOHO1uzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyMjQ0Nw==", "bodyText": "will it print the reason as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#discussion_r485322447", "createdAt": "2020-09-09T03:57:44Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/bir/BirVariableOptimizationTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.bir;\n+\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.bir.emit.BIREmitter;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.optimizer.LivenessAnalyzer;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Test to confirm the functionality of the {@link LivenessAnalyzer}.\n+ */\n+public class BirVariableOptimizationTest {\n+    private final BIREmitter birEmitter;\n+    private CompileResult result;\n+\n+    public BirVariableOptimizationTest() {\n+        birEmitter = BIREmitter.getInstance(new CompilerContext());\n+        result = BCompileUtil.compileAndGetBIR(\"test-src/bir/biroptimizer.bal\");\n+    }\n+\n+    @Test(description = \"Test the liveness analysis on functions\")\n+    public void testFunctions() {\n+        ((BLangPackage) result.getAST()).symbol.bir.functions.forEach(this::assertFunctions);\n+    }\n+\n+    @Test(description = \"Test the liveness analysis on attached functions\")\n+    public void testAttachedFunctions() {\n+        ((BLangPackage) result.getAST()).symbol.bir.typeDefs.forEach(\n+                typeDefinition -> typeDefinition.attachedFuncs.forEach(this::assertFunctions));\n+    }\n+\n+    private void assertFunctions(BIRNode.BIRFunction func) {\n+        String expectedBir = null;\n+        try {\n+            expectedBir = readFile(func.getName().getValue());\n+        } catch (IOException e) {\n+            Assert.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8787ba5794cb8def3439bd86c8a8c0d81d214b97"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8787ba5794cb8def3439bd86c8a8c0d81d214b97", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8787ba5794cb8def3439bd86c8a8c0d81d214b97", "committedDate": "2020-09-08T09:05:15Z", "message": "Add testcases for BIR variable optimization\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/25157"}, "afterCommit": {"oid": "670e17627d492f14ac4548a643088e4f8af6b2f8", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/670e17627d492f14ac4548a643088e4f8af6b2f8", "committedDate": "2020-09-09T05:02:57Z", "message": "Add testcases for BIR variable optimization\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/25157"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbc48b045539aa96f16c6138cbd3aab678730462", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbc48b045539aa96f16c6138cbd3aab678730462", "committedDate": "2020-09-09T06:43:37Z", "message": "Add testcases for BIR variable optimization\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/25157"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "670e17627d492f14ac4548a643088e4f8af6b2f8", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/670e17627d492f14ac4548a643088e4f8af6b2f8", "committedDate": "2020-09-09T05:02:57Z", "message": "Add testcases for BIR variable optimization\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/25157"}, "afterCommit": {"oid": "cbc48b045539aa96f16c6138cbd3aab678730462", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbc48b045539aa96f16c6138cbd3aab678730462", "committedDate": "2020-09-09T06:43:37Z", "message": "Add testcases for BIR variable optimization\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/25157"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzIwMjcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#pullrequestreview-485320273", "createdAt": "2020-09-09T19:12:46Z", "commit": {"oid": "cbc48b045539aa96f16c6138cbd3aab678730462"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxMjo0NlrOHPWBLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxMjo0NlrOHPWBLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTQzNw==", "bodyText": "So if the expectedBir is an empty string, then the test case would pass here? Don't we have to fail that case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#discussion_r485851437", "createdAt": "2020-09-09T19:12:46Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/bir/BirVariableOptimizationTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.bir;\n+\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.bir.emit.BIREmitter;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.optimizer.LivenessAnalyzer;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Test to confirm the functionality of the {@link LivenessAnalyzer}.\n+ */\n+public class BirVariableOptimizationTest {\n+    private final BIREmitter birEmitter;\n+    private CompileResult result;\n+\n+    public BirVariableOptimizationTest() {\n+        birEmitter = BIREmitter.getInstance(new CompilerContext());\n+        result = BCompileUtil.compileAndGetBIR(\"test-src/bir/biroptimizer.bal\");\n+    }\n+\n+    @Test(description = \"Test the liveness analysis on functions\")\n+    public void testFunctions() {\n+        ((BLangPackage) result.getAST()).symbol.bir.functions.forEach(this::assertFunctions);\n+    }\n+\n+    @Test(description = \"Test the liveness analysis on attached functions\")\n+    public void testAttachedFunctions() {\n+        ((BLangPackage) result.getAST()).symbol.bir.typeDefs.forEach(\n+                typeDefinition -> typeDefinition.attachedFuncs.forEach(this::assertFunctions));\n+    }\n+\n+    private void assertFunctions(BIRNode.BIRFunction func) {\n+        String expectedBir = null;\n+        try {\n+            expectedBir = readFile(func.getName().getValue());\n+        } catch (IOException e) {\n+            Assert.fail(\"Failed when reading file\", e);\n+        }\n+        if (!\"\".equals(expectedBir)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbc48b045539aa96f16c6138cbd3aab678730462"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1ODE3NzI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25664#pullrequestreview-485817727", "createdAt": "2020-09-10T11:01:55Z", "commit": {"oid": "cbc48b045539aa96f16c6138cbd3aab678730462"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4844, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}