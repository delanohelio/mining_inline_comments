{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjg2OTY1", "number": 23533, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowMTo1OFrOEAXszQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowNjo1N1rOEAXwsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODIzNzU3OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/DocCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowMTo1OFrOGbmu5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzoxNjo1N1rOGbojsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5OTMzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null != this.jsonLoc) {\n          \n          \n            \n                    if (this.jsonLoc != null) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431599332", "createdAt": "2020-05-28T06:01:58Z", "author": {"login": "suganyasuven"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/DocCommand.java", "diffHunk": "@@ -104,6 +118,38 @@ public void execute() {\n             CommandUtil.exitError(true);\n             return;\n         }\n+        Path sourcePath = null;\n+        Path targetPath;\n+        // validation and decide source root and source full path\n+        this.sourceRootPath = null != this.sourceRoot ?\n+                Paths.get(this.sourceRoot).toAbsolutePath() : this.sourceRootPath;\n+        // Generating API Docs through a JSON file\n+        if (null != this.jsonLoc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyOTIzMg==", "bodyText": "Added the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431629232", "createdAt": "2020-05-28T07:16:57Z", "author": {"login": "shehan360"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/DocCommand.java", "diffHunk": "@@ -104,6 +118,38 @@ public void execute() {\n             CommandUtil.exitError(true);\n             return;\n         }\n+        Path sourcePath = null;\n+        Path targetPath;\n+        // validation and decide source root and source full path\n+        this.sourceRootPath = null != this.sourceRoot ?\n+                Paths.get(this.sourceRoot).toAbsolutePath() : this.sourceRootPath;\n+        // Generating API Docs through a JSON file\n+        if (null != this.jsonLoc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5OTMzMg=="}, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODIzOTA2OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CreateDocsTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowMjo0MVrOGbmv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzoxNzowNVrOGboj9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5OTU3MA==", "bodyText": "shall we remove this extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431599570", "createdAt": "2020-05-28T06:02:41Z", "author": {"login": "suganyasuven"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CreateDocsTask.java", "diffHunk": "@@ -41,29 +41,48 @@\n  */\n public class CreateDocsTask implements Task {\n \n+    private boolean excludeIndex;\n+    private boolean toJson;\n+    private Path jsonPath;\n \n-    public CreateDocsTask() { }\n+    public CreateDocsTask(boolean toJson, Path jsonPath, boolean excludeIndex) {\n+        this.excludeIndex = excludeIndex;\n+        this.toJson = toJson;\n+        this.jsonPath = jsonPath;\n+    }\n \n     @Override\n     public void execute(BuildContext buildContext) {\n         Path sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n         Path targetDir = buildContext.get(BuildContextField.TARGET_DIR);\n         Path outputPath = targetDir.resolve(TARGET_API_DOC_DIRECTORY);\n-        List<BLangPackage> modules = buildContext.getModules();\n         buildContext.out().println();\n-        buildContext.out().println(\"Generating API Documentation\");\n-        try {\n-            // disable deprecated verbose logs from docerina\n-            BallerinaDocGenerator.setPrintStream(new EmptyPrintStream());\n-            Map<String, ModuleDoc> moduleDocMap = BallerinaDocGenerator\n-                    .generateModuleDocsFromBLangPackages(sourceRootPath.toString(), modules);\n-            Files.createDirectories(outputPath);\n-            BallerinaDocGenerator.writeAPIDocsForModules(moduleDocMap,\n-                    outputPath.toString());\n+        if (jsonPath != null) {\n+            buildContext.out().println(\"Generating API Documentation using data in JSON\");\n+            BallerinaDocGenerator.writeAPIDocsForModulesFromJson(jsonPath, outputPath.toString(), excludeIndex);\n             buildContext.out().println(\"\\t\" + sourceRootPath.relativize(outputPath).toString());\n-        } catch (IOException e) {\n-            throw createLauncherException(\"Unable to generate API Documentation.\");\n+        } else {\n+            buildContext.out().println(\"Generating API Documentation\");\n+            List<BLangPackage> modules = buildContext.getModules();\n+            try {\n+                // disable deprecated verbose logs from docerina\n+                BallerinaDocGenerator.setPrintStream(new EmptyPrintStream());\n+                Map<String, ModuleDoc> moduleDocMap = BallerinaDocGenerator\n+                        .generateModuleDocsFromBLangPackages(sourceRootPath.toString(), modules);\n+                Files.createDirectories(outputPath);\n+                if (toJson) {\n+                    BallerinaDocGenerator.writeAPIDocsToJSON(moduleDocMap, outputPath.toString());\n+                    buildContext.out().println(\"\\t\" + \"data saved as a JSON in: \" +\n+                            sourceRootPath.relativize(outputPath).toString());\n+                } else {\n+                    BallerinaDocGenerator.writeAPIDocsForModules(moduleDocMap, outputPath.toString(), excludeIndex);\n+                    buildContext.out().println(\"\\t\" + sourceRootPath.relativize(outputPath).toString());\n+                }\n+            } catch (IOException e) {\n+                throw createLauncherException(\"Unable to generate API Documentation.\");\n+            }\n         }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyOTMwMQ==", "bodyText": "Added the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431629301", "createdAt": "2020-05-28T07:17:05Z", "author": {"login": "shehan360"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CreateDocsTask.java", "diffHunk": "@@ -41,29 +41,48 @@\n  */\n public class CreateDocsTask implements Task {\n \n+    private boolean excludeIndex;\n+    private boolean toJson;\n+    private Path jsonPath;\n \n-    public CreateDocsTask() { }\n+    public CreateDocsTask(boolean toJson, Path jsonPath, boolean excludeIndex) {\n+        this.excludeIndex = excludeIndex;\n+        this.toJson = toJson;\n+        this.jsonPath = jsonPath;\n+    }\n \n     @Override\n     public void execute(BuildContext buildContext) {\n         Path sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n         Path targetDir = buildContext.get(BuildContextField.TARGET_DIR);\n         Path outputPath = targetDir.resolve(TARGET_API_DOC_DIRECTORY);\n-        List<BLangPackage> modules = buildContext.getModules();\n         buildContext.out().println();\n-        buildContext.out().println(\"Generating API Documentation\");\n-        try {\n-            // disable deprecated verbose logs from docerina\n-            BallerinaDocGenerator.setPrintStream(new EmptyPrintStream());\n-            Map<String, ModuleDoc> moduleDocMap = BallerinaDocGenerator\n-                    .generateModuleDocsFromBLangPackages(sourceRootPath.toString(), modules);\n-            Files.createDirectories(outputPath);\n-            BallerinaDocGenerator.writeAPIDocsForModules(moduleDocMap,\n-                    outputPath.toString());\n+        if (jsonPath != null) {\n+            buildContext.out().println(\"Generating API Documentation using data in JSON\");\n+            BallerinaDocGenerator.writeAPIDocsForModulesFromJson(jsonPath, outputPath.toString(), excludeIndex);\n             buildContext.out().println(\"\\t\" + sourceRootPath.relativize(outputPath).toString());\n-        } catch (IOException e) {\n-            throw createLauncherException(\"Unable to generate API Documentation.\");\n+        } else {\n+            buildContext.out().println(\"Generating API Documentation\");\n+            List<BLangPackage> modules = buildContext.getModules();\n+            try {\n+                // disable deprecated verbose logs from docerina\n+                BallerinaDocGenerator.setPrintStream(new EmptyPrintStream());\n+                Map<String, ModuleDoc> moduleDocMap = BallerinaDocGenerator\n+                        .generateModuleDocsFromBLangPackages(sourceRootPath.toString(), modules);\n+                Files.createDirectories(outputPath);\n+                if (toJson) {\n+                    BallerinaDocGenerator.writeAPIDocsToJSON(moduleDocMap, outputPath.toString());\n+                    buildContext.out().println(\"\\t\" + \"data saved as a JSON in: \" +\n+                            sourceRootPath.relativize(outputPath).toString());\n+                } else {\n+                    BallerinaDocGenerator.writeAPIDocsForModules(moduleDocMap, outputPath.toString(), excludeIndex);\n+                    buildContext.out().println(\"\\t\" + sourceRootPath.relativize(outputPath).toString());\n+                }\n+            } catch (IOException e) {\n+                throw createLauncherException(\"Unable to generate API Documentation.\");\n+            }\n         }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5OTU3MA=="}, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODI0MTE2OnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowMzozOVrOGbmxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzoxNzoxMlrOGbokKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5OTg5NQ==", "bodyText": "Shall we remove this extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431599895", "createdAt": "2020-05-28T06:03:39Z", "author": {"login": "suganyasuven"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocGenerator.java", "diffHunk": "@@ -297,11 +344,37 @@ public static void writeAPIDocsForModules(Map<String, ModuleDoc> docsMap, String\n                 if (BallerinaDocUtils.isDebugEnabled()) {\n                     out.println(\"docerina: generated docs for module: \" + module.id);\n                 }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyOTM1Mg==", "bodyText": "Added the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431629352", "createdAt": "2020-05-28T07:17:12Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocGenerator.java", "diffHunk": "@@ -297,11 +344,37 @@ public static void writeAPIDocsForModules(Map<String, ModuleDoc> docsMap, String\n                 if (BallerinaDocUtils.isDebugEnabled()) {\n                     out.println(\"docerina: generated docs for module: \" + module.id);\n                 }\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU5OTg5NQ=="}, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODI0NDg2OnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/utils/PathToJson.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowNToyOVrOGbmzSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzoxNzoyMFrOGbokcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMDQ1Ng==", "bodyText": "Please include 'since' annotation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431600456", "createdAt": "2020-05-28T06:05:29Z", "author": {"login": "suganyasuven"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/utils/PathToJson.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.docgen.docs.utils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Used to convert Path objects to JSON.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyOTQyNw==", "bodyText": "Addded the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431629427", "createdAt": "2020-05-28T07:17:20Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/utils/PathToJson.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.docgen.docs.utils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Used to convert Path objects to JSON.\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMDQ1Ng=="}, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODI0NzUyOnYy", "diffSide": "RIGHT", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/Module.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowNjo1N1rOGbm0_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzoxNzoyOFrOGbokrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMDg5NQ==", "bodyText": "Please remove this extra line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431600895", "createdAt": "2020-05-28T06:06:57Z", "author": {"login": "suganyasuven"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/Module.java", "diffHunk": "@@ -15,29 +15,49 @@\n  */\n package org.ballerinalang.docgen.generator.model;\n \n+import com.google.gson.annotations.Expose;\n+\n+import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n  * Represents a Ballerina Module.\n  */\n public class Module {\n-\n+    @Expose\n     public String id;\n+    @Expose\n     public String summary;\n+    @Expose\n     public String description;\n+    @Expose\n     public String orgName;\n+    @Expose\n     public String version;\n \n     // constructs\n+    @Expose\n     public List<Record> records = new ArrayList<>();\n+    @Expose\n     public List<Object> objects = new ArrayList<>();\n+    @Expose\n     public List<Client> clients = new ArrayList<>();\n+    @Expose\n     public List<Listener> listeners = new ArrayList<>();\n+    @Expose\n     public List<Function> functions = new ArrayList<>();\n+    @Expose\n     public List<Constant> constants = new ArrayList<>();\n+    @Expose\n     public List<Annotation> annotations = new ArrayList<>();\n+    @Expose\n     public List<Error> errors = new ArrayList<>();\n+    @Expose\n     public List<FiniteType> finiteTypes = new ArrayList<>();\n+    @Expose\n     public List<UnionType> unionTypes = new ArrayList<>();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyOTQ4Ng==", "bodyText": "Added the changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23533#discussion_r431629486", "createdAt": "2020-05-28T07:17:28Z", "author": {"login": "shehan360"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/generator/model/Module.java", "diffHunk": "@@ -15,29 +15,49 @@\n  */\n package org.ballerinalang.docgen.generator.model;\n \n+import com.google.gson.annotations.Expose;\n+\n+import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n  * Represents a Ballerina Module.\n  */\n public class Module {\n-\n+    @Expose\n     public String id;\n+    @Expose\n     public String summary;\n+    @Expose\n     public String description;\n+    @Expose\n     public String orgName;\n+    @Expose\n     public String version;\n \n     // constructs\n+    @Expose\n     public List<Record> records = new ArrayList<>();\n+    @Expose\n     public List<Object> objects = new ArrayList<>();\n+    @Expose\n     public List<Client> clients = new ArrayList<>();\n+    @Expose\n     public List<Listener> listeners = new ArrayList<>();\n+    @Expose\n     public List<Function> functions = new ArrayList<>();\n+    @Expose\n     public List<Constant> constants = new ArrayList<>();\n+    @Expose\n     public List<Annotation> annotations = new ArrayList<>();\n+    @Expose\n     public List<Error> errors = new ArrayList<>();\n+    @Expose\n     public List<FiniteType> finiteTypes = new ArrayList<>();\n+    @Expose\n     public List<UnionType> unionTypes = new ArrayList<>();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMDg5NQ=="}, "originalCommit": {"oid": "90e75d6d96f29f6f75292a3017319ffd57f42405"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3504, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}