{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzA2NjYy", "number": 23137, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MjowNlrOD8Jxxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NzowNVrOD8J42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDAxMzUwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MjowN1rOGU6vgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NDo1NlrOGkKNog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzEzNw==", "bodyText": "Missing the licence header. Let's update it in a separate PR.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r424587137", "createdAt": "2020-05-13T16:52:07Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTI1MA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r440569250", "createdAt": "2020-06-16T03:44:56Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzEzNw=="}, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDAxNzIzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MzoxMFrOGU6yFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NTo0M1rOGkKOYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Nzc5OA==", "bodyText": "Shall we add assertions for result2 and result3 also? Please check for all tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r424587798", "createdAt": "2020-05-13T16:53:10Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {\n+    future<int> f1 = start add(5, 2);\n+    future<boolean> f2 = start status();\n+    future<string> f3 = start concat(\"foo\");\n+\n+    int result1 = wait f1;\n+    boolean result2 = wait f2;\n+    string result3 = wait f3;\n+\n+    assertEquality(7, result1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTQ0MQ==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r440569441", "createdAt": "2020-06-16T03:45:43Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {\n+    future<int> f1 = start add(5, 2);\n+    future<boolean> f2 = start status();\n+    future<string> f3 = start concat(\"foo\");\n+\n+    int result1 = wait f1;\n+    boolean result2 = wait f2;\n+    string result3 = wait f3;\n+\n+    assertEquality(7, result1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Nzc5OA=="}, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDAyMzkyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NTowM1rOGU62pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NTo1OFrOGkKOnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODk2NQ==", "bodyText": "Given that we are returning an int here, IMO jsonObject is kinda misleading. Shall we call this something like getJson instead?\nAlso, we don't usually use parentheses around the return type.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function jsonObject() returns (json) {\n          \n          \n            \n            function jsonObject() returns json {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r424588965", "createdAt": "2020-05-13T16:55:03Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {\n+    future<int> f1 = start add(5, 2);\n+    future<boolean> f2 = start status();\n+    future<string> f3 = start concat(\"foo\");\n+\n+    int result1 = wait f1;\n+    boolean result2 = wait f2;\n+    string result3 = wait f3;\n+\n+    assertEquality(7, result1);\n+}\n+\n+function testBasicTypesWithoutFutureConstraint() {\n+    future f1 = start add(5, 2);\n+    future f2 = start status();\n+    future f3 = start concat(\"foo\");\n+\n+    any|error result1 = wait f1;\n+    any|error result2 = wait f2;\n+    any|error result3 = wait f3;\n+\n+    assertEquality(7, result1); \n+}\n+\n+function testRefTypes() {\n+    future<xml> a = start xmlFile();\n+    future<json> b = start jsonObject();\n+\n+    xml x = wait a;\n+    json y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());\n+}\n+\n+function testRefTypesWithoutFutureConstraint() {\n+    future a = start xmlFile();\n+    future b = start jsonObject();\n+\n+    any|error x = wait a;\n+    any|error y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());\n+}\n+\n+function testArrayTypes() {\n+    future<int[]> a = start intArray();\n+    \n+    int[] x = wait a;\n+    \n+    assertEquality(intArray(), x);\n+}\n+\n+function testArrayTypesWithoutFutureConstraint() {\n+    future a = start intArray();\n+    \n+    any|error x = wait a;\n+    \n+    assertEquality(intArray(), x);\n+}\n+\n+function testRecordTypes() {\n+    future<Person> a = start getNewPerson();\n+    \n+    Person x = wait a;\n+    \n+    assertEquality(getNewPerson(), x);\n+}\n+\n+function testRecordTypesWithoutFutureConstraint() {\n+    future a = start getNewPerson();\n+    \n+    any|error x = wait a;\n+    \n+    assertEquality(getNewPerson(), x);\n+}\n+\n+function testObjectTypes() {\n+    future<PersonA> a = start getPersonAObject();\n+\n+    PersonA x = wait a;\n+    string name = x.getName();\n+    \n+    assertEquality(\"sample name\", name);\n+}\n+\n+function testObjectTypesWithoutFutureConstraint() {\n+    future a = start getPersonAObject();\n+\n+    any|error x = wait a;\n+    \n+    assertEquality(\"object PersonA\", x.toString());\n+}\n+\n+function testCustomErrorFuture() {\n+    future<error> te = start getError();\n+\n+    error x = wait te;\n+\n+    assertEquality(\"SimpleErrorType\", x.reason());\n+}\n+\n+function testCustomErrorFutureWithoutConstraint() {\n+    future te = start getError();\n+\n+    any|error x = wait te;\n+\n+    assertEquality(getError().toString(), x.toString());\n+}\n+\n+function add(int i, int j) returns int {\n+    int k = i + j;\n+    return k;\n+}\n+\n+function concat(string name) returns string {\n+    return \"hello \" + name;\n+}\n+\n+function status() returns boolean {\n+    return true;\n+}\n+\n+function xmlFile() returns xml {\n+    xml x1 = xml `aaa`;\n+    return x1;\n+}\n+\n+function jsonObject() returns (json) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTUwMA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r440569500", "createdAt": "2020-06-16T03:45:58Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {\n+    future<int> f1 = start add(5, 2);\n+    future<boolean> f2 = start status();\n+    future<string> f3 = start concat(\"foo\");\n+\n+    int result1 = wait f1;\n+    boolean result2 = wait f2;\n+    string result3 = wait f3;\n+\n+    assertEquality(7, result1);\n+}\n+\n+function testBasicTypesWithoutFutureConstraint() {\n+    future f1 = start add(5, 2);\n+    future f2 = start status();\n+    future f3 = start concat(\"foo\");\n+\n+    any|error result1 = wait f1;\n+    any|error result2 = wait f2;\n+    any|error result3 = wait f3;\n+\n+    assertEquality(7, result1); \n+}\n+\n+function testRefTypes() {\n+    future<xml> a = start xmlFile();\n+    future<json> b = start jsonObject();\n+\n+    xml x = wait a;\n+    json y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());\n+}\n+\n+function testRefTypesWithoutFutureConstraint() {\n+    future a = start xmlFile();\n+    future b = start jsonObject();\n+\n+    any|error x = wait a;\n+    any|error y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());\n+}\n+\n+function testArrayTypes() {\n+    future<int[]> a = start intArray();\n+    \n+    int[] x = wait a;\n+    \n+    assertEquality(intArray(), x);\n+}\n+\n+function testArrayTypesWithoutFutureConstraint() {\n+    future a = start intArray();\n+    \n+    any|error x = wait a;\n+    \n+    assertEquality(intArray(), x);\n+}\n+\n+function testRecordTypes() {\n+    future<Person> a = start getNewPerson();\n+    \n+    Person x = wait a;\n+    \n+    assertEquality(getNewPerson(), x);\n+}\n+\n+function testRecordTypesWithoutFutureConstraint() {\n+    future a = start getNewPerson();\n+    \n+    any|error x = wait a;\n+    \n+    assertEquality(getNewPerson(), x);\n+}\n+\n+function testObjectTypes() {\n+    future<PersonA> a = start getPersonAObject();\n+\n+    PersonA x = wait a;\n+    string name = x.getName();\n+    \n+    assertEquality(\"sample name\", name);\n+}\n+\n+function testObjectTypesWithoutFutureConstraint() {\n+    future a = start getPersonAObject();\n+\n+    any|error x = wait a;\n+    \n+    assertEquality(\"object PersonA\", x.toString());\n+}\n+\n+function testCustomErrorFuture() {\n+    future<error> te = start getError();\n+\n+    error x = wait te;\n+\n+    assertEquality(\"SimpleErrorType\", x.reason());\n+}\n+\n+function testCustomErrorFutureWithoutConstraint() {\n+    future te = start getError();\n+\n+    any|error x = wait te;\n+\n+    assertEquality(getError().toString(), x.toString());\n+}\n+\n+function add(int i, int j) returns int {\n+    int k = i + j;\n+    return k;\n+}\n+\n+function concat(string name) returns string {\n+    return \"hello \" + name;\n+}\n+\n+function status() returns boolean {\n+    return true;\n+}\n+\n+function xmlFile() returns xml {\n+    xml x1 = xml `aaa`;\n+    return x1;\n+}\n+\n+function jsonObject() returns (json) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODk2NQ=="}, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDAzMTYyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NzowNVrOGU671w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NjowN1rOGkKOwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDI5NQ==", "bodyText": "IMO wherever possible it's always better to test against the exact value instead of a toString() representation since we'll also validate the type.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertEquality(\"5\", y.toString());\n          \n          \n            \n                assertEquality(5, y);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r424590295", "createdAt": "2020-05-13T16:57:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {\n+    future<int> f1 = start add(5, 2);\n+    future<boolean> f2 = start status();\n+    future<string> f3 = start concat(\"foo\");\n+\n+    int result1 = wait f1;\n+    boolean result2 = wait f2;\n+    string result3 = wait f3;\n+\n+    assertEquality(7, result1);\n+}\n+\n+function testBasicTypesWithoutFutureConstraint() {\n+    future f1 = start add(5, 2);\n+    future f2 = start status();\n+    future f3 = start concat(\"foo\");\n+\n+    any|error result1 = wait f1;\n+    any|error result2 = wait f2;\n+    any|error result3 = wait f3;\n+\n+    assertEquality(7, result1); \n+}\n+\n+function testRefTypes() {\n+    future<xml> a = start xmlFile();\n+    future<json> b = start jsonObject();\n+\n+    xml x = wait a;\n+    json y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());\n+}\n+\n+function testRefTypesWithoutFutureConstraint() {\n+    future a = start xmlFile();\n+    future b = start jsonObject();\n+\n+    any|error x = wait a;\n+    any|error y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTUzNg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23137#discussion_r440569536", "createdAt": "2020-06-16T03:46:07Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/future/future_positive.bal", "diffHunk": "@@ -0,0 +1,180 @@\n+function testBasicTypes() {\n+    future<int> f1 = start add(5, 2);\n+    future<boolean> f2 = start status();\n+    future<string> f3 = start concat(\"foo\");\n+\n+    int result1 = wait f1;\n+    boolean result2 = wait f2;\n+    string result3 = wait f3;\n+\n+    assertEquality(7, result1);\n+}\n+\n+function testBasicTypesWithoutFutureConstraint() {\n+    future f1 = start add(5, 2);\n+    future f2 = start status();\n+    future f3 = start concat(\"foo\");\n+\n+    any|error result1 = wait f1;\n+    any|error result2 = wait f2;\n+    any|error result3 = wait f3;\n+\n+    assertEquality(7, result1); \n+}\n+\n+function testRefTypes() {\n+    future<xml> a = start xmlFile();\n+    future<json> b = start jsonObject();\n+\n+    xml x = wait a;\n+    json y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());\n+}\n+\n+function testRefTypesWithoutFutureConstraint() {\n+    future a = start xmlFile();\n+    future b = start jsonObject();\n+\n+    any|error x = wait a;\n+    any|error y = wait b;\n+    \n+    assertEquality(\"5\", y.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDI5NQ=="}, "originalCommit": {"oid": "ffbdc8406493efd482970388b322ee3a2ab15905"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3736, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}