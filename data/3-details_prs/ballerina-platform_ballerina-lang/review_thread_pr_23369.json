{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDcxNDQw", "number": 23369, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToxMDo1NFrOD92BKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzoyNDo1OVrOEDvjVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTc0NzYzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToxMDo1NFrOGXlPWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0MTowNlrOGXzqXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDU2OA==", "bodyText": "Shall we refactor this block a bit?\n        for (AttachedFunction lhsFunc : targetFuncs) {\n            AttachedFunction rhsFunc = getMatchingInvokableType(sourceFuncs, lhsFunc, unresolvedTypes);\n\n            if (rhsFunc == null) {\n                return false;\n            }\n\n            if (!isInSameVisibilityRegion(...))  {\n                return false;\n            }\n\n            if (Flags.isFlagOn(lhsFunc.flags, Flags.REMOTE) && !Flags.isFlagOn(rhsFunc.flags, Flags.REMOTE)) {\n                return false;\n            }\n        }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427380568", "createdAt": "2020-05-19T15:10:54Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1073,7 +1073,7 @@ private static boolean checkObjectEquivalency(BType sourceType, BObjectType targ\n                                     .map(BPackage::getName)\n                                     .orElse(\"\"),\n                             Optional.ofNullable(rhsFunc.type.getPackage()).map(BPackage::getName).orElse(\"\"),\n-                            lhsFunc.flags, rhsFunc.flags)) {\n+                            lhsFunc.flags, rhsFunc.flags) || !isSameMethodType(lhsFunc.flags, rhsFunc.flags)) {\n                 return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306ea05aa26fb3f839392c280ddb969adfc555"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MTg2MQ==", "bodyText": "I've removed the separate method and moved the logic here since the current method name doesn't seem quite accurate, it's only used here and it's a simple check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427381861", "createdAt": "2020-05-19T15:12:38Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1073,7 +1073,7 @@ private static boolean checkObjectEquivalency(BType sourceType, BObjectType targ\n                                     .map(BPackage::getName)\n                                     .orElse(\"\"),\n                             Optional.ofNullable(rhsFunc.type.getPackage()).map(BPackage::getName).orElse(\"\"),\n-                            lhsFunc.flags, rhsFunc.flags)) {\n+                            lhsFunc.flags, rhsFunc.flags) || !isSameMethodType(lhsFunc.flags, rhsFunc.flags)) {\n                 return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDU2OA=="}, "originalCommit": {"oid": "fc306ea05aa26fb3f839392c280ddb969adfc555"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4Mzg0NA==", "bodyText": "Also, shouldn't the check be for something like\nFlags.isFlagOn(lhsFunc.flags, Flags.REMOTE) != Flags.isFlagOn(rhsFunc.flags, Flags.REMOTE) ?\nIf the RHS's function has remote but the LHS's doesn't shouldn't that be an error? @hasithaa", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427383844", "createdAt": "2020-05-19T15:15:10Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1073,7 +1073,7 @@ private static boolean checkObjectEquivalency(BType sourceType, BObjectType targ\n                                     .map(BPackage::getName)\n                                     .orElse(\"\"),\n                             Optional.ofNullable(rhsFunc.type.getPackage()).map(BPackage::getName).orElse(\"\"),\n-                            lhsFunc.flags, rhsFunc.flags)) {\n+                            lhsFunc.flags, rhsFunc.flags) || !isSameMethodType(lhsFunc.flags, rhsFunc.flags)) {\n                 return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDU2OA=="}, "originalCommit": {"oid": "fc306ea05aa26fb3f839392c280ddb969adfc555"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNjg2MA==", "bodyText": "Changed logic to check whether the remote qualifier is available or not with both functions of LHS and RHS as mentioned.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427616860", "createdAt": "2020-05-19T21:41:06Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1073,7 +1073,7 @@ private static boolean checkObjectEquivalency(BType sourceType, BObjectType targ\n                                     .map(BPackage::getName)\n                                     .orElse(\"\"),\n                             Optional.ofNullable(rhsFunc.type.getPackage()).map(BPackage::getName).orElse(\"\"),\n-                            lhsFunc.flags, rhsFunc.flags)) {\n+                            lhsFunc.flags, rhsFunc.flags) || !isSameMethodType(lhsFunc.flags, rhsFunc.flags)) {\n                 return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MDU2OA=="}, "originalCommit": {"oid": "fc306ea05aa26fb3f839392c280ddb969adfc555"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTc3MzA3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/Flags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToxNjoyOFrOGXlf-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMToyNToxMlrOGXzMmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NDgyNQ==", "bodyText": "Can we move this to L35 so that the order is preserved?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427384825", "createdAt": "2020-05-19T15:16:28Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/Flags.java", "diffHunk": "@@ -34,6 +34,7 @@\n     public static final int OPTIONAL = 8192;\n     public static final int RESOURCE = 262144;\n     public static final int SERVICE = 524288;\n+    public static final int REMOTE = 65536;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306ea05aa26fb3f839392c280ddb969adfc555"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwOTI0Mw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427609243", "createdAt": "2020-05-19T21:25:12Z", "author": {"login": "chiranSachintha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/Flags.java", "diffHunk": "@@ -34,6 +34,7 @@\n     public static final int OPTIONAL = 8192;\n     public static final int RESOURCE = 262144;\n     public static final int SERVICE = 524288;\n+    public static final int REMOTE = 65536;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NDgyNQ=="}, "originalCommit": {"oid": "fc306ea05aa26fb3f839392c280ddb969adfc555"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTc4NzM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToxOTozMFrOGXlpCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMToyNToyMVrOGXzM8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NzE0Ng==", "bodyText": "Same comment as for the jvm/TypeChecker.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427387146", "createdAt": "2020-05-19T15:19:30Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2200,6 +2201,13 @@ private boolean isInSameVisibilityRegion(BSymbol lhsSym, BSymbol rhsSym) {\n         return !Symbols.isPrivate(rhsSym) && !Symbols.isPublic(rhsSym) && lhsSym.pkgID.equals(rhsSym.pkgID);\n     }\n \n+    private boolean isSameMethodType(BSymbol lhsSym, BSymbol rhsSym) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306ea05aa26fb3f839392c280ddb969adfc555"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwOTMyOA==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r427609328", "createdAt": "2020-05-19T21:25:21Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2200,6 +2201,13 @@ private boolean isInSameVisibilityRegion(BSymbol lhsSym, BSymbol rhsSym) {\n         return !Symbols.isPrivate(rhsSym) && !Symbols.isPublic(rhsSym) && lhsSym.pkgID.equals(rhsSym.pkgID);\n     }\n \n+    private boolean isSameMethodType(BSymbol lhsSym, BSymbol rhsSym) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NzE0Ng=="}, "originalCommit": {"oid": "fc306ea05aa26fb3f839392c280ddb969adfc555"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzYwNjQ1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/ObjectEquivalencyTest/object-equivalency.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTozOTozMlrOGZ-VrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMToyODo0NlrOGbw8Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4ODk0MA==", "bodyText": "Shall we also add a negative runtime test?\nHow about something like\ntype Foo object {\n    function foo() {\n\n    }\n};\n\ntype Bar client object {\n    remote function foo() {\n\n    }\n};\n\ntype Baz record {|\n    Foo f;\n|};\n\npublic function main() {\n    Baz b = {f: new};\n    record {|\n        object {}...;\n    |} r = b;\n\n    r[\"f\"] = new Bar();\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r429888940", "createdAt": "2020-05-25T11:39:32Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/ObjectEquivalencyTest/object-equivalency.bal", "diffHunk": "@@ -626,3 +626,55 @@ function testInherentTypeViolationWithNilType() {\n     ObjectWithAnyTypeVariables o2 = o1;\n     o2.x = (); // panic\n }\n+\n+type NonClientObject object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type ClientObjectWithoutRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+function testObjectEqualityBetweenNonClientAndClientObject() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337c5ba18cea039ecc095a92c181f68a83452a21"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2NjU4Nw==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r431766587", "createdAt": "2020-05-28T11:28:46Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/ObjectEquivalencyTest/object-equivalency.bal", "diffHunk": "@@ -626,3 +626,55 @@ function testInherentTypeViolationWithNilType() {\n     ObjectWithAnyTypeVariables o2 = o1;\n     o2.x = (); // panic\n }\n+\n+type NonClientObject object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type ClientObjectWithoutRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+function testObjectEqualityBetweenNonClientAndClientObject() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4ODk0MA=="}, "originalCommit": {"oid": "337c5ba18cea039ecc095a92c181f68a83452a21"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTM3ODU5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/ObjectSubtypingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxOToyMVrOGdlE-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxOToyMVrOGdlE-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2OTM2OQ==", "bodyText": "We can write these tests also in Ballerina. See \n  \n    \n      ballerina-lang/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal\n    \n    \n         Line 149\n      in\n      02b2ec6\n    \n    \n    \n    \n\n        \n          \n           var fn = function() { \n        \n    \n  \n\n.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r433669369", "createdAt": "2020-06-02T07:19:21Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/ObjectSubtypingTest.java", "diffHunk": "@@ -58,6 +58,19 @@ public void testCastingRuntimeError() {\n         BRunUtil.invoke(compileResult, \"testCastingRuntimeError\");\n     }\n \n+    @Test(expectedExceptions = BLangRuntimeException.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972e3063d872a673ff0fdc75d96310c141dc50d1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTU2ODk0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/object/ObjectInBaloTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo0NDoxMFrOGfJe7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODo0OTo0OFrOGfl7LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNDQxNA==", "bodyText": "We don't need the result right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r435314414", "createdAt": "2020-06-04T14:44:10Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/object/ObjectInBaloTest.java", "diffHunk": "@@ -377,6 +377,28 @@ public void testFieldWithExpr() {\n         Assert.assertEquals(returns[1].stringValue(), \"sanjiva\");\n     }\n \n+    @Test(description = \"Test object subtyping\")\n+    public void testObjectEqualityBetweenNonClientAndClientObject() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/balo/test_balo/object\" +\n+                \"/object_subtyping_tests.bal\");\n+        BValue[] returns = BRunUtil.invoke(result, \"testObjectEqualityBetweenNonClientAndClientObject\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c7f8b4bdc5c235f1de7cb76b79e6e30d71e2c6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4MDM5Nw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r435780397", "createdAt": "2020-06-05T08:49:48Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/object/ObjectInBaloTest.java", "diffHunk": "@@ -377,6 +377,28 @@ public void testFieldWithExpr() {\n         Assert.assertEquals(returns[1].stringValue(), \"sanjiva\");\n     }\n \n+    @Test(description = \"Test object subtyping\")\n+    public void testObjectEqualityBetweenNonClientAndClientObject() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/balo/test_balo/object\" +\n+                \"/object_subtyping_tests.bal\");\n+        BValue[] returns = BRunUtil.invoke(result, \"testObjectEqualityBetweenNonClientAndClientObject\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNDQxNA=="}, "originalCommit": {"oid": "f1c7f8b4bdc5c235f1de7cb76b79e6e30d71e2c6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzU5MzMwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/object-equivalency-01-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzoyMTo1NVrOGg78IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo1MDowM1rOGg84hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4OTY2NA==", "bodyText": "Shouldn't we have a variable here and below?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r437189664", "createdAt": "2020-06-09T07:21:55Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/object-equivalency-01-negative.bal", "diffHunk": "@@ -401,4 +401,76 @@ function testObjectMemberOrder() returns [PersonInOrder, PersonNotInOrder] {\n     PersonInOrder p4 = p3;\n \n     return [p4, p2];\n-}\n\\ No newline at end of file\n+}\n+\n+type ObjWithOnlyRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public remote function send(string message) returns error? {\n+    }\n+    public remote function receive(string message) {\n+    }\n+};\n+\n+type ObjWithRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public remote function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type NonClientObj object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type ClientObjWithoutRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods1() {\n+    NonClientObj e = new (\"email-1\");\n+    ObjWithRemoteMethod p = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods2() {\n+    ClientObjWithoutRemoteMethod e = new (\"email-2\");\n+    ObjWithRemoteMethod p = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods3() {\n+    ClientObjWithoutRemoteMethod e = new (\"email-3\");\n+    ObjWithOnlyRemoteMethod = e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a28d0405c25b4c872df9a75a81b95725d7a3f71"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwNTEyNg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r437205126", "createdAt": "2020-06-09T07:50:03Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/object-equivalency-01-negative.bal", "diffHunk": "@@ -401,4 +401,76 @@ function testObjectMemberOrder() returns [PersonInOrder, PersonNotInOrder] {\n     PersonInOrder p4 = p3;\n \n     return [p4, p2];\n-}\n\\ No newline at end of file\n+}\n+\n+type ObjWithOnlyRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public remote function send(string message) returns error? {\n+    }\n+    public remote function receive(string message) {\n+    }\n+};\n+\n+type ObjWithRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public remote function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type NonClientObj object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type ClientObjWithoutRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods1() {\n+    NonClientObj e = new (\"email-1\");\n+    ObjWithRemoteMethod p = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods2() {\n+    ClientObjWithoutRemoteMethod e = new (\"email-2\");\n+    ObjWithRemoteMethod p = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods3() {\n+    ClientObjWithoutRemoteMethod e = new (\"email-3\");\n+    ObjWithOnlyRemoteMethod = e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4OTY2NA=="}, "originalCommit": {"oid": "5a28d0405c25b4c872df9a75a81b95725d7a3f71"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzYwMjc5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/object-equivalency-01-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzoyNDo1OVrOGg8CSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo1MDo0NFrOGg86Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5MTI0Mg==", "bodyText": "Aren't all these tests testing the source without remote and the target with? Can we add the opposite too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r437191242", "createdAt": "2020-06-09T07:24:59Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/object-equivalency-01-negative.bal", "diffHunk": "@@ -401,4 +401,76 @@ function testObjectMemberOrder() returns [PersonInOrder, PersonNotInOrder] {\n     PersonInOrder p4 = p3;\n \n     return [p4, p2];\n-}\n\\ No newline at end of file\n+}\n+\n+type ObjWithOnlyRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public remote function send(string message) returns error? {\n+    }\n+    public remote function receive(string message) {\n+    }\n+};\n+\n+type ObjWithRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public remote function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type NonClientObj object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type ClientObjWithoutRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods1() {\n+    NonClientObj e = new (\"email-1\");\n+    ObjWithRemoteMethod p = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods2() {\n+    ClientObjWithoutRemoteMethod e = new (\"email-2\");\n+    ObjWithRemoteMethod p = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods3() {\n+    ClientObjWithoutRemoteMethod e = new (\"email-3\");\n+    ObjWithOnlyRemoteMethod = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods4() {\n+    NonClientObj e = new (\"email-4\");\n+    ObjWithOnlyRemoteMethod = e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a28d0405c25b4c872df9a75a81b95725d7a3f71"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwNTU4Mg==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23369#discussion_r437205582", "createdAt": "2020-06-09T07:50:44Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/object-equivalency-01-negative.bal", "diffHunk": "@@ -401,4 +401,76 @@ function testObjectMemberOrder() returns [PersonInOrder, PersonNotInOrder] {\n     PersonInOrder p4 = p3;\n \n     return [p4, p2];\n-}\n\\ No newline at end of file\n+}\n+\n+type ObjWithOnlyRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public remote function send(string message) returns error? {\n+    }\n+    public remote function receive(string message) {\n+    }\n+};\n+\n+type ObjWithRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public remote function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type NonClientObj object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+type ClientObjWithoutRemoteMethod client object {\n+    public string name;\n+    public string id = \"\";\n+\n+    function __init(string name) {\n+        self.name = name;\n+    }\n+    public function send(string message) returns error? {\n+    }\n+    public function receive(string message) {\n+    }\n+};\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods1() {\n+    NonClientObj e = new (\"email-1\");\n+    ObjWithRemoteMethod p = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods2() {\n+    ClientObjWithoutRemoteMethod e = new (\"email-2\");\n+    ObjWithRemoteMethod p = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods3() {\n+    ClientObjWithoutRemoteMethod e = new (\"email-3\");\n+    ObjWithOnlyRemoteMethod = e;\n+}\n+\n+function testEqOfObjectsWithAndWithoutRemoteMethods4() {\n+    NonClientObj e = new (\"email-4\");\n+    ObjWithOnlyRemoteMethod = e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5MTI0Mg=="}, "originalCommit": {"oid": "5a28d0405c25b4c872df9a75a81b95725d7a3f71"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3674, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}