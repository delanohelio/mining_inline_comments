{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0ODY2NjA3", "number": 25738, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoyODo0NVrOEihgnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozNToyMVrOEihomQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjM2MDYwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ErrorValue.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoyODo0NVrOHQc0DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjo0Nzo0MVrOHQdaTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMTM0MA==", "bodyText": "wondering whether we can reuse and share between error and mapvalueImpl stringValue methods @mohanvive wdyt?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487011340", "createdAt": "2020-09-11T12:28:45Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ErrorValue.java", "diffHunk": "@@ -73,21 +78,54 @@ public ErrorValue(BType type, BString message, ErrorValue cause, Object details)\n     }\n \n     @Override\n-    public String stringValue() {\n+    public String stringValue(BLink parent) {\n+        CycleUtils.Node linkParent = new CycleUtils.Node(this, parent);\n         if (isEmptyDetail()) {\n-            return \"error \" + message.getValue();\n+            return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) + \")\";\n         }\n-        return \"error \" + message.getValue() + \" \" + getCauseToString() +\n-                org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(details);\n+        return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) +\n+                getCauseToString(linkParent) + getDetailsToString(linkParent) + \")\";\n     }\n \n-    private String getCauseToString() {\n+    private String getCauseToString(BLink parent) {\n         if (cause != null) {\n-            return org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(cause) + \" \";\n+            return \", \" + cause.informalStringValue(parent);\n         }\n         return \"\";\n     }\n \n+    private String getDetailsToString(BLink parent) {\n+        StringJoiner sj = new StringJoiner(\", \");\n+        for (Object key : ((MapValue) details).getKeys()) {\n+            Object value = ((MapValue) details).get(key);\n+            if (value == null) {\n+                sj.add(key + \"=null\");\n+            } else {\n+                BType type = TypeChecker.getType(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMTc3OA==", "bodyText": "from line 104 to 120", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487011778", "createdAt": "2020-09-11T12:29:39Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ErrorValue.java", "diffHunk": "@@ -73,21 +78,54 @@ public ErrorValue(BType type, BString message, ErrorValue cause, Object details)\n     }\n \n     @Override\n-    public String stringValue() {\n+    public String stringValue(BLink parent) {\n+        CycleUtils.Node linkParent = new CycleUtils.Node(this, parent);\n         if (isEmptyDetail()) {\n-            return \"error \" + message.getValue();\n+            return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) + \")\";\n         }\n-        return \"error \" + message.getValue() + \" \" + getCauseToString() +\n-                org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(details);\n+        return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) +\n+                getCauseToString(linkParent) + getDetailsToString(linkParent) + \")\";\n     }\n \n-    private String getCauseToString() {\n+    private String getCauseToString(BLink parent) {\n         if (cause != null) {\n-            return org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(cause) + \" \";\n+            return \", \" + cause.informalStringValue(parent);\n         }\n         return \"\";\n     }\n \n+    private String getDetailsToString(BLink parent) {\n+        StringJoiner sj = new StringJoiner(\", \");\n+        for (Object key : ((MapValue) details).getKeys()) {\n+            Object value = ((MapValue) details).get(key);\n+            if (value == null) {\n+                sj.add(key + \"=null\");\n+            } else {\n+                BType type = TypeChecker.getType(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMTM0MA=="}, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMzgyNg==", "bodyText": "BTW, there should be space between equal and null right? Isn't it ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487013826", "createdAt": "2020-09-11T12:33:38Z", "author": {"login": "mohanvive"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ErrorValue.java", "diffHunk": "@@ -73,21 +78,54 @@ public ErrorValue(BType type, BString message, ErrorValue cause, Object details)\n     }\n \n     @Override\n-    public String stringValue() {\n+    public String stringValue(BLink parent) {\n+        CycleUtils.Node linkParent = new CycleUtils.Node(this, parent);\n         if (isEmptyDetail()) {\n-            return \"error \" + message.getValue();\n+            return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) + \")\";\n         }\n-        return \"error \" + message.getValue() + \" \" + getCauseToString() +\n-                org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(details);\n+        return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) +\n+                getCauseToString(linkParent) + getDetailsToString(linkParent) + \")\";\n     }\n \n-    private String getCauseToString() {\n+    private String getCauseToString(BLink parent) {\n         if (cause != null) {\n-            return org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(cause) + \" \";\n+            return \", \" + cause.informalStringValue(parent);\n         }\n         return \"\";\n     }\n \n+    private String getDetailsToString(BLink parent) {\n+        StringJoiner sj = new StringJoiner(\", \");\n+        for (Object key : ((MapValue) details).getKeys()) {\n+            Object value = ((MapValue) details).get(key);\n+            if (value == null) {\n+                sj.add(key + \"=null\");\n+            } else {\n+                BType type = TypeChecker.getType(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMTM0MA=="}, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxNDA4Mw==", "bodyText": "I think, there is a delimeter difference between them.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487014083", "createdAt": "2020-09-11T12:34:16Z", "author": {"login": "mohanvive"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ErrorValue.java", "diffHunk": "@@ -73,21 +78,54 @@ public ErrorValue(BType type, BString message, ErrorValue cause, Object details)\n     }\n \n     @Override\n-    public String stringValue() {\n+    public String stringValue(BLink parent) {\n+        CycleUtils.Node linkParent = new CycleUtils.Node(this, parent);\n         if (isEmptyDetail()) {\n-            return \"error \" + message.getValue();\n+            return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) + \")\";\n         }\n-        return \"error \" + message.getValue() + \" \" + getCauseToString() +\n-                org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(details);\n+        return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) +\n+                getCauseToString(linkParent) + getDetailsToString(linkParent) + \")\";\n     }\n \n-    private String getCauseToString() {\n+    private String getCauseToString(BLink parent) {\n         if (cause != null) {\n-            return org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(cause) + \" \";\n+            return \", \" + cause.informalStringValue(parent);\n         }\n         return \"\";\n     }\n \n+    private String getDetailsToString(BLink parent) {\n+        StringJoiner sj = new StringJoiner(\", \");\n+        for (Object key : ((MapValue) details).getKeys()) {\n+            Object value = ((MapValue) details).get(key);\n+            if (value == null) {\n+                sj.add(key + \"=null\");\n+            } else {\n+                BType type = TypeChecker.getType(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMTM0MA=="}, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxNzY1NA==", "bodyText": "Should there be a space specifically for null?\nIn James's example here ballerina-platform/ballerina-spec#499 (comment) , there's no space between the key and the value (accountID=123 and detail=\"Failed to get account balance\")", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487017654", "createdAt": "2020-09-11T12:41:18Z", "author": {"login": "lasinicl"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ErrorValue.java", "diffHunk": "@@ -73,21 +78,54 @@ public ErrorValue(BType type, BString message, ErrorValue cause, Object details)\n     }\n \n     @Override\n-    public String stringValue() {\n+    public String stringValue(BLink parent) {\n+        CycleUtils.Node linkParent = new CycleUtils.Node(this, parent);\n         if (isEmptyDetail()) {\n-            return \"error \" + message.getValue();\n+            return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) + \")\";\n         }\n-        return \"error \" + message.getValue() + \" \" + getCauseToString() +\n-                org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(details);\n+        return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) +\n+                getCauseToString(linkParent) + getDetailsToString(linkParent) + \")\";\n     }\n \n-    private String getCauseToString() {\n+    private String getCauseToString(BLink parent) {\n         if (cause != null) {\n-            return org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(cause) + \" \";\n+            return \", \" + cause.informalStringValue(parent);\n         }\n         return \"\";\n     }\n \n+    private String getDetailsToString(BLink parent) {\n+        StringJoiner sj = new StringJoiner(\", \");\n+        for (Object key : ((MapValue) details).getKeys()) {\n+            Object value = ((MapValue) details).get(key);\n+            if (value == null) {\n+                sj.add(key + \"=null\");\n+            } else {\n+                BType type = TypeChecker.getType(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMTM0MA=="}, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxODAwNg==", "bodyText": "Ah, Ok. Cool.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487018006", "createdAt": "2020-09-11T12:41:56Z", "author": {"login": "mohanvive"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ErrorValue.java", "diffHunk": "@@ -73,21 +78,54 @@ public ErrorValue(BType type, BString message, ErrorValue cause, Object details)\n     }\n \n     @Override\n-    public String stringValue() {\n+    public String stringValue(BLink parent) {\n+        CycleUtils.Node linkParent = new CycleUtils.Node(this, parent);\n         if (isEmptyDetail()) {\n-            return \"error \" + message.getValue();\n+            return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) + \")\";\n         }\n-        return \"error \" + message.getValue() + \" \" + getCauseToString() +\n-                org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(details);\n+        return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) +\n+                getCauseToString(linkParent) + getDetailsToString(linkParent) + \")\";\n     }\n \n-    private String getCauseToString() {\n+    private String getCauseToString(BLink parent) {\n         if (cause != null) {\n-            return org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(cause) + \" \";\n+            return \", \" + cause.informalStringValue(parent);\n         }\n         return \"\";\n     }\n \n+    private String getDetailsToString(BLink parent) {\n+        StringJoiner sj = new StringJoiner(\", \");\n+        for (Object key : ((MapValue) details).getKeys()) {\n+            Object value = ((MapValue) details).get(key);\n+            if (value == null) {\n+                sj.add(key + \"=null\");\n+            } else {\n+                BType type = TypeChecker.getType(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMTM0MA=="}, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMTEzNA==", "bodyText": "Yes. There's a difference. map uses {\"key1\": \"value1\", \"key1\": \"value2\"} format. here it should be key1=\"value1\", key2=\"value2\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487021134", "createdAt": "2020-09-11T12:47:41Z", "author": {"login": "lasinicl"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ErrorValue.java", "diffHunk": "@@ -73,21 +78,54 @@ public ErrorValue(BType type, BString message, ErrorValue cause, Object details)\n     }\n \n     @Override\n-    public String stringValue() {\n+    public String stringValue(BLink parent) {\n+        CycleUtils.Node linkParent = new CycleUtils.Node(this, parent);\n         if (isEmptyDetail()) {\n-            return \"error \" + message.getValue();\n+            return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) + \")\";\n         }\n-        return \"error \" + message.getValue() + \" \" + getCauseToString() +\n-                org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(details);\n+        return \"error\" + getModuleName() + \"(\" + ((StringValue) message).informalStringValue(linkParent) +\n+                getCauseToString(linkParent) + getDetailsToString(linkParent) + \")\";\n     }\n \n-    private String getCauseToString() {\n+    private String getCauseToString(BLink parent) {\n         if (cause != null) {\n-            return org.ballerinalang.jvm.values.utils.StringUtils.getStringValue(cause) + \" \";\n+            return \", \" + cause.informalStringValue(parent);\n         }\n         return \"\";\n     }\n \n+    private String getDetailsToString(BLink parent) {\n+        StringJoiner sj = new StringJoiner(\", \");\n+        for (Object key : ((MapValue) details).getKeys()) {\n+            Object value = ((MapValue) details).get(key);\n+            if (value == null) {\n+                sj.add(key + \"=null\");\n+            } else {\n+                BType type = TypeChecker.getType(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMTM0MA=="}, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjM2NTQ2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/MapValueImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozMDoxNlrOHQc3GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozMDoxNlrOHQc3GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMjEyMQ==", "bodyText": "This is the reusable part for detail of errorvalue @mohanvive", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487012121", "createdAt": "2020-09-11T12:30:16Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/MapValueImpl.java", "diffHunk": "@@ -408,14 +411,34 @@ public Object frozenCopy(Map<Object, Object> refs) {\n     }\n \n     @Override\n-    public String stringValue() {\n-        StringJoiner sj = new StringJoiner(\" \");\n+    public String stringValue(BLink parent) {\n+        StringJoiner sj = new StringJoiner(\", \");\n         for (Map.Entry<K, V> kvEntry : this.entrySet()) {\n             K key = kvEntry.getKey();\n             V value = kvEntry.getValue();\n-            sj.add(key + \"=\" + StringUtils.getStringValue(value));\n+            if (value == null) {\n+                sj.add(\"\\\"\" + key + \"\\\": null\");\n+            } else {\n+                BType type = TypeChecker.getType(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjM4MTA1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozNToyMVrOHQdAsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozNzoxNFrOHQdEbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxNDU3OA==", "bodyText": "is it possible to move XML toString part to the SrtingUtil as well? this is same as in mapvalueimpl and detail in errorvalue", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487014578", "createdAt": "2020-09-11T12:35:21Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -576,16 +579,36 @@ public String stringValue() {\n             case TypeTags.STRING_TAG:\n             case TypeTags.CHAR_STRING_TAG:\n                 for (int i = 0; i < size; i++) {\n-                    sj.add(bStringValues[i].getValue());\n+                    sj.add(((BValue) (bStringValues[i])).informalStringValue(parent));\n                 }\n                 break;\n             default:\n                 for (int i = 0; i < size; i++) {\n-                    sj.add(StringUtils.getStringValue(refValues[i]));\n+                    if (refValues[i] == null) {\n+                        sj.add(\"null\");\n+                    } else {\n+                        BType type = TypeChecker.getType(refValues[i]);\n+                        switch (type.getTag()) {\n+                            case TypeTags.STRING_TAG:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxNTUzNA==", "bodyText": "I don't think, it is possible since toString value of a string and string in a array is different.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25738#discussion_r487015534", "createdAt": "2020-09-11T12:37:14Z", "author": {"login": "mohanvive"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -576,16 +579,36 @@ public String stringValue() {\n             case TypeTags.STRING_TAG:\n             case TypeTags.CHAR_STRING_TAG:\n                 for (int i = 0; i < size; i++) {\n-                    sj.add(bStringValues[i].getValue());\n+                    sj.add(((BValue) (bStringValues[i])).informalStringValue(parent));\n                 }\n                 break;\n             default:\n                 for (int i = 0; i < size; i++) {\n-                    sj.add(StringUtils.getStringValue(refValues[i]));\n+                    if (refValues[i] == null) {\n+                        sj.add(\"null\");\n+                    } else {\n+                        BType type = TypeChecker.getType(refValues[i]);\n+                        switch (type.getTag()) {\n+                            case TypeTags.STRING_TAG:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxNDU3OA=="}, "originalCommit": {"oid": "96d920f636ec066693e6657888c32f54d7274f78"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 74, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}