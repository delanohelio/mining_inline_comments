{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNjMwNjU1", "number": 23838, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToxMToxNVrOEDyFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToxMzo1NlrOEDyI-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDAxNzU3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToxMToxNVrOGhAF_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMzowOTozM1rOGhjV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1NzcyNA==", "bodyText": "please use addToTop function instead. because compilationUnit can be null in lang-server", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23838#discussion_r437257724", "createdAt": "2020-06-09T09:11:15Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2297,6 +2304,99 @@ public BLangNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n         return arrayTypeNode;\n     }\n \n+    public void addEnumDeclarationNode(\n+            EnumDeclarationNode enumDeclarationNode,\n+            BLangCompilationUnit compInit) {\n+\n+        Boolean publicQualifier = false;\n+        if (enumDeclarationNode.qualifier() != null &&\n+                enumDeclarationNode.qualifier().kind()\n+                        == SyntaxKind.PUBLIC_KEYWORD) {\n+            publicQualifier = true;\n+        }\n+        for (Node member : enumDeclarationNode.enumMemberList()) {\n+            compInit.addTopLevelNode(transformEnumMember(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b265bdf70c3861bfadeeacf8aa26dcee2eda27b1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzNTIzNg==", "bodyText": "alright :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23838#discussion_r437835236", "createdAt": "2020-06-10T03:09:33Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2297,6 +2304,99 @@ public BLangNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n         return arrayTypeNode;\n     }\n \n+    public void addEnumDeclarationNode(\n+            EnumDeclarationNode enumDeclarationNode,\n+            BLangCompilationUnit compInit) {\n+\n+        Boolean publicQualifier = false;\n+        if (enumDeclarationNode.qualifier() != null &&\n+                enumDeclarationNode.qualifier().kind()\n+                        == SyntaxKind.PUBLIC_KEYWORD) {\n+            publicQualifier = true;\n+        }\n+        for (Node member : enumDeclarationNode.enumMemberList()) {\n+            compInit.addTopLevelNode(transformEnumMember(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1NzcyNA=="}, "originalCommit": {"oid": "b265bdf70c3861bfadeeacf8aa26dcee2eda27b1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDAyMTcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToxMjoyNVrOGhAIsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToxMjoyNVrOGhAIsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1ODQxNg==", "bodyText": "do we need a separate Boolean, can we set the flag then and there.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23838#discussion_r437258416", "createdAt": "2020-06-09T09:12:25Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2297,6 +2304,99 @@ public BLangNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n         return arrayTypeNode;\n     }\n \n+    public void addEnumDeclarationNode(\n+            EnumDeclarationNode enumDeclarationNode,\n+            BLangCompilationUnit compInit) {\n+\n+        Boolean publicQualifier = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b265bdf70c3861bfadeeacf8aa26dcee2eda27b1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDAyNjgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToxMzo1NlrOGhAMDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMzowOTo0OFrOGhjWHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1OTI3Nw==", "bodyText": "see if you can reuse the deSugarTypeAsUserDefType function instead.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23838#discussion_r437259277", "createdAt": "2020-06-09T09:13:56Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2297,6 +2304,99 @@ public BLangNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n         return arrayTypeNode;\n     }\n \n+    public void addEnumDeclarationNode(\n+            EnumDeclarationNode enumDeclarationNode,\n+            BLangCompilationUnit compInit) {\n+\n+        Boolean publicQualifier = false;\n+        if (enumDeclarationNode.qualifier() != null &&\n+                enumDeclarationNode.qualifier().kind()\n+                        == SyntaxKind.PUBLIC_KEYWORD) {\n+            publicQualifier = true;\n+        }\n+        for (Node member : enumDeclarationNode.enumMemberList()) {\n+            compInit.addTopLevelNode(transformEnumMember(\n+                    (EnumMemberNode) member,\n+                    publicQualifier));\n+        }\n+\n+        BLangTypeDefinition bLangTypeDefinition =\n+                (BLangTypeDefinition) TreeBuilder.createTypeDefinition();\n+        if (publicQualifier) {\n+            bLangTypeDefinition.flagSet.add(Flag.PUBLIC);\n+        }\n+\n+        bLangTypeDefinition.setName(\n+                (BLangIdentifier)transform(enumDeclarationNode.identifier()));\n+\n+        BLangUnionTypeNode bLangUnionTypeNode =\n+                (BLangUnionTypeNode) TreeBuilder.createUnionTypeNode();\n+        for (Node member : enumDeclarationNode.enumMemberList()) {\n+            bLangUnionTypeNode.memberTypeNodes.\n+                    add(createTypeNode(\n+                            ((EnumMemberNode) member).identifier()));\n+        }\n+        Collections.reverse(bLangUnionTypeNode.memberTypeNodes);\n+        bLangTypeDefinition.setTypeNode(bLangUnionTypeNode);\n+        compInit.addTopLevelNode(bLangTypeDefinition);\n+    }\n+\n+    public BLangConstant transformEnumMember(EnumMemberNode member,\n+                                             Boolean publicQualifier) {\n+        BLangConstant bLangConstant =\n+                (BLangConstant) TreeBuilder.createConstantNode();\n+\n+        bLangConstant.flagSet.add(Flag.CONSTANT);\n+\n+        if (publicQualifier) {\n+            bLangConstant.flagSet.add(Flag.PUBLIC);\n+        }\n+        BLangTypeDefinition assosiatedTypeDef =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b265bdf70c3861bfadeeacf8aa26dcee2eda27b1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzNTI5NQ==", "bodyText": "sure :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23838#discussion_r437835295", "createdAt": "2020-06-10T03:09:48Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2297,6 +2304,99 @@ public BLangNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n         return arrayTypeNode;\n     }\n \n+    public void addEnumDeclarationNode(\n+            EnumDeclarationNode enumDeclarationNode,\n+            BLangCompilationUnit compInit) {\n+\n+        Boolean publicQualifier = false;\n+        if (enumDeclarationNode.qualifier() != null &&\n+                enumDeclarationNode.qualifier().kind()\n+                        == SyntaxKind.PUBLIC_KEYWORD) {\n+            publicQualifier = true;\n+        }\n+        for (Node member : enumDeclarationNode.enumMemberList()) {\n+            compInit.addTopLevelNode(transformEnumMember(\n+                    (EnumMemberNode) member,\n+                    publicQualifier));\n+        }\n+\n+        BLangTypeDefinition bLangTypeDefinition =\n+                (BLangTypeDefinition) TreeBuilder.createTypeDefinition();\n+        if (publicQualifier) {\n+            bLangTypeDefinition.flagSet.add(Flag.PUBLIC);\n+        }\n+\n+        bLangTypeDefinition.setName(\n+                (BLangIdentifier)transform(enumDeclarationNode.identifier()));\n+\n+        BLangUnionTypeNode bLangUnionTypeNode =\n+                (BLangUnionTypeNode) TreeBuilder.createUnionTypeNode();\n+        for (Node member : enumDeclarationNode.enumMemberList()) {\n+            bLangUnionTypeNode.memberTypeNodes.\n+                    add(createTypeNode(\n+                            ((EnumMemberNode) member).identifier()));\n+        }\n+        Collections.reverse(bLangUnionTypeNode.memberTypeNodes);\n+        bLangTypeDefinition.setTypeNode(bLangUnionTypeNode);\n+        compInit.addTopLevelNode(bLangTypeDefinition);\n+    }\n+\n+    public BLangConstant transformEnumMember(EnumMemberNode member,\n+                                             Boolean publicQualifier) {\n+        BLangConstant bLangConstant =\n+                (BLangConstant) TreeBuilder.createConstantNode();\n+\n+        bLangConstant.flagSet.add(Flag.CONSTANT);\n+\n+        if (publicQualifier) {\n+            bLangConstant.flagSet.add(Flag.PUBLIC);\n+        }\n+        BLangTypeDefinition assosiatedTypeDef =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1OTI3Nw=="}, "originalCommit": {"oid": "b265bdf70c3861bfadeeacf8aa26dcee2eda27b1"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3494, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}