{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MDEyOTY2", "number": 25787, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNTowMFrOEjc4iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1Mzo1M1rOEjiPrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjA4ODQxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalEnv.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNTowMFrOHRzn4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNTowMFrOHRzn4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMzYzNQ==", "bodyText": "lets add @ since 2.0.0 version", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25787#discussion_r488433635", "createdAt": "2020-09-15T07:05:00Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalEnv.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.ballerinalang.jvm.api;\n+\n+import org.ballerinalang.jvm.scheduling.Scheduler;\n+import org.ballerinalang.jvm.scheduling.State;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+\n+/**\n+ * When this class is used as the first argument of an interop method, Ballerina\n+ * will inject an instance of the class when calling. That instance can be used to\n+ * communicate with currently executing Ballerina runtime.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc9cc1b646d5f5180efac78713e942605a918d8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjA4OTQ1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalEnv.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNToxNVrOHRzoaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNToxNVrOHRzoaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMzc2OQ==", "bodyText": "missing license header", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25787#discussion_r488433769", "createdAt": "2020-09-15T07:05:15Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalEnv.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.ballerinalang.jvm.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc9cc1b646d5f5180efac78713e942605a918d8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjA5MDQ1OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalFuture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNTozM1rOHRzpBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNTozM1rOHRzpBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMzkyNA==", "bodyText": "missing license header", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25787#discussion_r488433924", "createdAt": "2020-09-15T07:05:33Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalFuture.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.ballerinalang.jvm.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc9cc1b646d5f5180efac78713e942605a918d8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjA5MTM3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalFuture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNTo0OFrOHRzpiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNTo0OFrOHRzpiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzNDA1Nw==", "bodyText": "lets add @ since 2.0.0 version", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25787#discussion_r488434057", "createdAt": "2020-09-15T07:05:48Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalFuture.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.ballerinalang.jvm.api;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+\n+/**\n+ * A future that will resume the underling strand when completed.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc9cc1b646d5f5180efac78713e942605a918d8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjA5ODE1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/static_method_tests.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNzo0OFrOHRztlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNzo0OFrOHRztlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzNTA5NQ==", "bodyText": "missing eof line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25787#discussion_r488435095", "createdAt": "2020-09-15T07:07:48Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/static_method_tests.bal", "diffHunk": "@@ -187,3 +187,51 @@ function decimalParamAndReturn(decimal a1) returns decimal = @java:Method {\n     class:\"org/ballerinalang/nativeimpl/jvm/tests/StaticMethods\"\n } external;\n \n+ public function addTwoNumbersSlowAsyncVoidSig(int a, int b) returns int = @java:Method {\n+    'class:\"org/ballerinalang/nativeimpl/jvm/tests/StaticMethods\"\n+} external;\n+\n+ public function addTwoNumbersFastAsyncVoidSig(int a, int b) returns int = @java:Method {\n+    'class:\"org/ballerinalang/nativeimpl/jvm/tests/StaticMethods\"\n+} external;\n+\n+ public function addTwoNumbersSlowAsync(int a, int b) returns int = @java:Method {\n+    'class:\"org/ballerinalang/nativeimpl/jvm/tests/StaticMethods\"\n+} external;\n+\n+ public function addTwoNumbersFastAsync(int a, int b) returns int = @java:Method {\n+    'class:\"org/ballerinalang/nativeimpl/jvm/tests/StaticMethods\"\n+} external;\n+\n+public function testBalEnvSlowAsyncVoidSig() {\n+    int added = addTwoNumbersSlowAsyncVoidSig(1, 2);\n+    assertEquality(3, added);\n+}\n+\n+public function testBalEnvFastAsyncVoidSig() {\n+    int added = addTwoNumbersFastAsyncVoidSig(1, 2);\n+    assertEquality(3, added);\n+}\n+\n+public function testBalEnvSlowAsync() {\n+    int added = addTwoNumbersSlowAsync(1, 2);\n+    assertEquality(3, added);\n+}\n+\n+public function testBalEnvFastAsync() {\n+    int added = addTwoNumbersFastAsync(1, 2);\n+    assertEquality(3, added);\n+}\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertEquality(any|error expected, any|error actual) {\n+    if expected is anydata && actual is anydata && expected == actual {\n+        return;\n+    }\n+    if expected === actual {\n+        return;\n+    }\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expected.toString() + \"', found '\" + actual.toString () + \"'\");\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc9cc1b646d5f5180efac78713e942605a918d8"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njk2NTU4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalFuture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1MzozMFrOHR8GIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1MzozMFrOHR8GIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MjQ0OQ==", "bodyText": "looks like these two line are not formatted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25787#discussion_r488572449", "createdAt": "2020-09-15T10:53:30Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalFuture.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm.api;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+\n+/**\n+ * A future that will resume the underling strand when completed.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BalFuture {\n+    private final Strand strand;\n+\n+    public BalFuture(Strand strand) {\n+        this.strand = strand;\n+    }\n+\n+    public void complete(Object returnValue) {\n+            strand.returnValue = returnValue;\n+            strand.scheduler.unblockStrand(strand);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1791c38358d36b58cb385c42e0c83776de764d14"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Njk2Njg2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalEnv.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1Mzo1M1rOHR8G8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1Mzo1M1rOHR8G8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MjY1Ng==", "bodyText": "Should there be a new line break between in here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25787#discussion_r488572656", "createdAt": "2020-09-15T10:53:53Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/api/BalEnv.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.jvm.api;\n+\n+import org.ballerinalang.jvm.scheduling.Scheduler;\n+import org.ballerinalang.jvm.scheduling.State;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+\n+/**\n+ * When this class is used as the first argument of an interop method, Ballerina\n+ * will inject an instance of the class when calling. That instance can be used to\n+ * communicate with currently executing Ballerina runtime.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BalEnv {\n+    private Strand strand;\n+\n+    public BalEnv(Strand strand) {\n+        this.strand = strand;\n+    }\n+\n+    /**\n+     * Mark the current executing strand as async. Execution of Ballerina code after the current\n+     * interop will stop until given BalFuture is completed. However the java thread will not be blocked\n+     * and will be reused for running other Ballerina code in the meantime. Therefor callee of this method\n+     * must return as soon as possible to avoid starvation of ballerina code execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1791c38358d36b58cb385c42e0c83776de764d14"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 107, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}