{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODk4OTU4", "number": 25285, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMTozMjoyMFrOEYb7OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTowOTozMlrOEa7S3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDU4ODA4OnYy", "diffSide": "RIGHT", "path": "docs/bir-spec/src/test/resources/test-src/basic/function.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMTozMjoyMFrOHAxUHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzoyNDo0NlrOHEL_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MDAxNA==", "bodyText": "We add license header for test cases as well if I am not mistaken", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25285#discussion_r470570014", "createdAt": "2020-08-14T11:32:20Z", "author": {"login": "riyafa"}, "path": "docs/bir-spec/src/test/resources/test-src/basic/function.bal", "diffHunk": "@@ -0,0 +1,3 @@\n+function testFunction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4053cee3c3ee6f5cbe4aabbfec16a99c79deb48b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1Mjc5Mw==", "bodyText": "ack", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25285#discussion_r474152793", "createdAt": "2020-08-20T17:24:46Z", "author": {"login": "Kishanthan"}, "path": "docs/bir-spec/src/test/resources/test-src/basic/function.bal", "diffHunk": "@@ -0,0 +1,3 @@\n+function testFunction() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MDAxNA=="}, "originalCommit": {"oid": "4053cee3c3ee6f5cbe4aabbfec16a99c79deb48b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDU5NzE5OnYy", "diffSide": "RIGHT", "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRSpecTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMTozNToyMVrOHAxZKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMTo0NTo1M1rOHAxqXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MTMwNA==", "bodyText": "There seems to be lots of work in validating a very simple bir? Can't we simplify this. I mean some assert function that would validate the expected and the current would be useful.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25285#discussion_r470571304", "createdAt": "2020-08-14T11:35:21Z", "author": {"login": "riyafa"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRSpecTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.birspec;\n+\n+import io.kaitai.struct.ByteBufferKaitaiStream;\n+import org.ballerinalang.build.kaitai.Bir;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BPackageSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.programfile.CompiledBinaryFile.BIRPackageFile;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Test cases to verify BIR binary against the spec.\n+ */\n+public class BIRSpecTest {\n+\n+    @Test(description = \"A simple test to verify BIR binary of a ballerina source with an empty method\")\n+    public void basicTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4053cee3c3ee6f5cbe4aabbfec16a99c79deb48b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3NTcxMQ==", "bodyText": "Then the expected and the current would be more obvious. I think they are hidden in some complex code at the present", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25285#discussion_r470575711", "createdAt": "2020-08-14T11:45:53Z", "author": {"login": "riyafa"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRSpecTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.birspec;\n+\n+import io.kaitai.struct.ByteBufferKaitaiStream;\n+import org.ballerinalang.build.kaitai.Bir;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BPackageSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.programfile.CompiledBinaryFile.BIRPackageFile;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Test cases to verify BIR binary against the spec.\n+ */\n+public class BIRSpecTest {\n+\n+    @Test(description = \"A simple test to verify BIR binary of a ballerina source with an empty method\")\n+    public void basicTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MTMwNA=="}, "originalCommit": {"oid": "4053cee3c3ee6f5cbe4aabbfec16a99c79deb48b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjY5OTE4OnYy", "diffSide": "RIGHT", "path": "docs/bir-spec/src/main/resources/kaitai/bir.ksy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTowOTozMlrOHEpLLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTo1MTo1NVrOHFVe0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYzMDk1OQ==", "bodyText": "shall we change\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  type_tag:\n          \n          \n            \n                    value: _root.constant_pool.constant_pool_entries[constant_value_type_cp_index].cp_info.as<shape_cp_info>.shape.type_tag\n          \n          \n            \n                  type:\n          \n          \n            \n                    value: _root.constant_pool.constant_pool_entries[constant_value_type_cp_index].cp_info.as<shape_cp_info>\n          \n      \n    \n    \n  \n\nand above switch-on: type_tag to switch-on: type.shape.type_tag\nthat way, the parsed model will be more useful for the LLVM team.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25285#discussion_r474630959", "createdAt": "2020-08-21T11:09:32Z", "author": {"login": "manuranga"}, "path": "docs/bir-spec/src/main/resources/kaitai/bir.ksy", "diffHunk": "@@ -185,6 +198,95 @@ types:\n         type: markdown\n       - id: type_cp_index\n         type: s4\n+  type_definition:\n+    seq:\n+      - id: position\n+        type: position\n+      - id: name_cp_index\n+        type: s4\n+      - id: flags\n+        type: s4\n+      - id: label\n+        type: s1\n+      - id: doc\n+        type: markdown\n+      - id: type_cp_index\n+        type: s4\n+  constant:\n+    seq:\n+      - id: name_cp_index\n+        type: s4\n+      - id: flags\n+        type: s4\n+      - id: doc\n+        type: markdown\n+      - id: type_cp_index\n+        type: s4\n+      - id: length\n+        type: s8\n+      - id: constant_value\n+        type: constant_value\n+  constant_value:\n+    seq:\n+      - id: constant_value_type_cp_index\n+        type: s4\n+      - id: constant_value_info\n+        type:\n+          switch-on: type_tag\n+          cases:\n+            'type_tag_enum::type_tag_int': int_constant_info\n+            'type_tag_enum::type_tag_byte': byte_constant_info\n+            'type_tag_enum::type_tag_float': float_constant_info\n+            'type_tag_enum::type_tag_string': string_constant_info\n+            'type_tag_enum::type_tag_decimal': decimal_constant_info\n+            'type_tag_enum::type_tag_boolean': boolean_constant_info\n+            'type_tag_enum::type_tag_nil': nil_constant_info\n+            'type_tag_enum::type_tag_map': map_constant_info\n+    instances:\n+      type_tag:\n+        value: _root.constant_pool.constant_pool_entries[constant_value_type_cp_index].cp_info.as<shape_cp_info>.shape.type_tag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c21bae6a507c1f8913f39f5b27d0746b670ce83"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1Njg4Mg==", "bodyText": "ack. changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25285#discussion_r475356882", "createdAt": "2020-08-24T05:51:55Z", "author": {"login": "Kishanthan"}, "path": "docs/bir-spec/src/main/resources/kaitai/bir.ksy", "diffHunk": "@@ -185,6 +198,95 @@ types:\n         type: markdown\n       - id: type_cp_index\n         type: s4\n+  type_definition:\n+    seq:\n+      - id: position\n+        type: position\n+      - id: name_cp_index\n+        type: s4\n+      - id: flags\n+        type: s4\n+      - id: label\n+        type: s1\n+      - id: doc\n+        type: markdown\n+      - id: type_cp_index\n+        type: s4\n+  constant:\n+    seq:\n+      - id: name_cp_index\n+        type: s4\n+      - id: flags\n+        type: s4\n+      - id: doc\n+        type: markdown\n+      - id: type_cp_index\n+        type: s4\n+      - id: length\n+        type: s8\n+      - id: constant_value\n+        type: constant_value\n+  constant_value:\n+    seq:\n+      - id: constant_value_type_cp_index\n+        type: s4\n+      - id: constant_value_info\n+        type:\n+          switch-on: type_tag\n+          cases:\n+            'type_tag_enum::type_tag_int': int_constant_info\n+            'type_tag_enum::type_tag_byte': byte_constant_info\n+            'type_tag_enum::type_tag_float': float_constant_info\n+            'type_tag_enum::type_tag_string': string_constant_info\n+            'type_tag_enum::type_tag_decimal': decimal_constant_info\n+            'type_tag_enum::type_tag_boolean': boolean_constant_info\n+            'type_tag_enum::type_tag_nil': nil_constant_info\n+            'type_tag_enum::type_tag_map': map_constant_info\n+    instances:\n+      type_tag:\n+        value: _root.constant_pool.constant_pool_entries[constant_value_type_cp_index].cp_info.as<shape_cp_info>.shape.type_tag", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYzMDk1OQ=="}, "originalCommit": {"oid": "0c21bae6a507c1f8913f39f5b27d0746b670ce83"}, "originalPosition": 213}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 219, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}