{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwOTIyNDkx", "number": 23795, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODoyOTozOFrOEEly5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoxMDozOVrOEErJxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjQ4OTk2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODoyOTozOFrOGiTmoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxODowOToyNFrOGjYrWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyNTk1Mg==", "bodyText": "IMO using !(A || B) is much readable than (!A && !B)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23795#discussion_r438625952", "createdAt": "2020-06-11T08:29:38Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1295,6 +1291,21 @@ public static boolean isSelectivelyImmutableType(BType type, Set<BType> unresolv\n \n                 return isInherentlyImmutableType(recordRestType) ||\n                         isSelectivelyImmutableType(recordRestType, unresolvedTypes);\n+            case TypeTags.OBJECT_TYPE_TAG:\n+                BObjectType objectType = (BObjectType) type;\n+\n+                if (!Flags.isFlagOn(objectType.flags, Flags.ABSTRACT)) {\n+                    return false;\n+                }\n+\n+                for (BField field : objectType.getFields().values()) {\n+                    BType fieldType = field.type;\n+                    if (!isInherentlyImmutableType(fieldType) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e19b6841b67b5580cc8accb63a2f5f23e9c7921"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1NzY1Ng==", "bodyText": "I personally find !A && !B more readable, especially when there are few conditions. :D I find it easier to read \"if fieldType is not inherently immutable and is not selectively immutable\".", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23795#discussion_r439757656", "createdAt": "2020-06-13T18:09:24Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1295,6 +1291,21 @@ public static boolean isSelectivelyImmutableType(BType type, Set<BType> unresolv\n \n                 return isInherentlyImmutableType(recordRestType) ||\n                         isSelectivelyImmutableType(recordRestType, unresolvedTypes);\n+            case TypeTags.OBJECT_TYPE_TAG:\n+                BObjectType objectType = (BObjectType) type;\n+\n+                if (!Flags.isFlagOn(objectType.flags, Flags.ABSTRACT)) {\n+                    return false;\n+                }\n+\n+                for (BField field : objectType.getFields().values()) {\n+                    BType fieldType = field.type;\n+                    if (!isInherentlyImmutableType(fieldType) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyNTk1Mg=="}, "originalCommit": {"oid": "1e19b6841b67b5580cc8accb63a2f5f23e9c7921"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzM2Nzc0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoxMDozOVrOGicWSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoxMDozOVrOGicWSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2OTIyNw==", "bodyText": "@Kishanthan, this PR introduces some changes to support object/record intersection types, where for something like\nimport ballerina/http;\n\npublic function main() {\n    http:Versioning & readonly v = {};\n}\nthe name of the type of v has a name like (ballerina/http:1.0.0:Versioning & readonly), with / and . in the name, which results in errors. So I've replaced them with _ too.\nI also had to call this method when calculating the type field name (org.wso2.ballerinalang.compiler.bir.codegen.JvmTypeGen#getTypeFieldName), since that too would have these characters.\nDo you see any issue with this change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23795#discussion_r438769227", "createdAt": "2020-06-11T13:10:39Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1207,7 +1207,8 @@ private static String getFrameClassName(String pkgName, String funcName, BType a\n      * @return cleaned name\n      */\n     static String cleanupTypeName(String name) {\n-\n+        name = name.replace(\"/\", \"_\");\n+        name = name.replace(\".\", \"_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e19b6841b67b5580cc8accb63a2f5f23e9c7921"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3471, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}