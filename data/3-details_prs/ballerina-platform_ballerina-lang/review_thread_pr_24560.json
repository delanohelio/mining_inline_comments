{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDI1MTMy", "number": 24560, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowNzoyMlrOELOsPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNzo1NFrOELO3KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEwNDkyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowNzoyMlrOGsuUJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxOToxOVrOGvGrqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTM1MQ==", "bodyText": "Commented code block?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449549351", "createdAt": "2020-07-03T12:07:22Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -171,17 +176,48 @@ private BLangFunctionBody generateBody() {\n     }\n \n     private List<BLangStatement> generateStatements() {\n-        List<BLangStatement> statements = new ArrayList<>();\n-\n+        // <MockFunctionObj>.functionToMock = (functionToMock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NTczOQ==", "bodyText": "The commented part is a reference and not the actual code. It simply shows what code it is that we are trying to generate.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r452045739", "createdAt": "2020-07-09T08:19:19Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -171,17 +176,48 @@ private BLangFunctionBody generateBody() {\n     }\n \n     private List<BLangStatement> generateStatements() {\n-        List<BLangStatement> statements = new ArrayList<>();\n-\n+        // <MockFunctionObj>.functionToMock = (functionToMock);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTM1MQ=="}, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEwNTYzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowNzozOFrOGsuUmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxOToyMVrOGvGrxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTQ2NQ==", "bodyText": "Commented code?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449549465", "createdAt": "2020-07-03T12:07:38Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -171,17 +176,48 @@ private BLangFunctionBody generateBody() {\n     }\n \n     private List<BLangStatement> generateStatements() {\n-        List<BLangStatement> statements = new ArrayList<>();\n-\n+        // <MockFunctionObj>.functionToMock = (functionToMock);\n+        BLangAssignment bLangAssignment =\n+                ASTBuilderUtil.createAssignmentStmt(bLangPackage.pos, generateFieldBasedAccess(), generateRHSExpr());\n         // BLangReturn Statement <retType> test:MockHandler(<MockFunctionObj>, [<args?>])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NTc2Nw==", "bodyText": "The commented part is a reference. It simply shows what code it is that we are trying to generate", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r452045767", "createdAt": "2020-07-09T08:19:21Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -171,17 +176,48 @@ private BLangFunctionBody generateBody() {\n     }\n \n     private List<BLangStatement> generateStatements() {\n-        List<BLangStatement> statements = new ArrayList<>();\n-\n+        // <MockFunctionObj>.functionToMock = (functionToMock);\n+        BLangAssignment bLangAssignment =\n+                ASTBuilderUtil.createAssignmentStmt(bLangPackage.pos, generateFieldBasedAccess(), generateRHSExpr());\n         // BLangReturn Statement <retType> test:MockHandler(<MockFunctionObj>, [<args?>])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTQ2NQ=="}, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEwODcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowODo1NFrOGsuWbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyNDozOFrOGvG4JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTkzMw==", "bodyText": "mockHandlerSymbol local variable seems redundant", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449549933", "createdAt": "2020-07-03T12:08:54Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -213,6 +246,7 @@ private BLangInvocation generateBLangInvocation() {\n \n     private BInvokableSymbol getMockHandlerInvokableSymbol() {\n         BSymbol testPkg = bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(\"test\")).symbol;\n+\n         BInvokableSymbol mockHandlerSymbol =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0ODkzMg==", "bodyText": "I could compress the code into a single line, however, that would make it difficult to read. It would be something like (BInvokableSymbol) bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(\"test\")).symbol.testPkg.scope.lookup(new Name(\"mockHandler\")).symbol.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r452048932", "createdAt": "2020-07-09T08:24:38Z", "author": {"login": "Ibaqu"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -213,6 +246,7 @@ private BLangInvocation generateBLangInvocation() {\n \n     private BInvokableSymbol getMockHandlerInvokableSymbol() {\n         BSymbol testPkg = bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(\"test\")).symbol;\n+\n         BInvokableSymbol mockHandlerSymbol =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTkzMw=="}, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjExMDI4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowOTozMFrOGsuXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowOTozMFrOGsuXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MDE5MA==", "bodyText": "bLangSimpleVarRef local variable seems redundant", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449550190", "createdAt": "2020-07-03T12:09:30Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -240,13 +272,13 @@ private BLangSimpleVarRef getMockFunctionReference() {\n                 (BVarSymbol) bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(mockObjName)).symbol;\n \n         BLangSimpleVarRef bLangSimpleVarRef = ASTBuilderUtil.createVariableRef(bLangPackage.pos, mockObjectSymbol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjExNzA3OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMTo1MVrOGsubSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMTo1MVrOGsubSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTE3Nw==", "bodyText": "Do we really need continue here? Since there no statements after this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449551177", "createdAt": "2020-07-03T12:11:51Z", "author": {"login": "pramodya1994"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -431,6 +427,51 @@ private String formatPackageName(String value) {\n         return value;\n     }\n \n+    /**\n+     * Validates the function name provided in the annotation.\n+     * @param functionName Function to mock\n+     * @param variableNode  MockFunction object variable node\n+     * @param attachmentNode  MockFunction object attachment node\n+     */\n+    private void validateFunctionName(String functionName, SimpleVariableNode variableNode,\n+                                      AnnotationAttachmentNode attachmentNode) {\n+        PackageID packageID = ((BLangTestablePackage) ((BLangSimpleVariable) variableNode).parent).packageID;\n+\n+        if (functionName == null) {\n+            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, attachmentNode.getPosition(),\n+                    \"Function name cannot be empty\");\n+        } else {\n+            // Iterate through package map entries\n+            for (Map.Entry<BPackageSymbol, SymbolEnv> entry : this.packageEnvironmentMap.entrySet()) {\n+\n+                // Consider both instances of the current package\n+                if (entry.getKey().pkgID.equals(packageID)) {\n+                    // Check if the current package has the function name\n+                    if (entry.getValue().scope.entries.containsKey(new Name(functionName))) {\n+\n+                        // Functions within a test package are not allowed to be mocked\n+                        if (entry.getValue().scope.entries.containsKey(new Name(\"test\"))) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR,\n+                                    attachmentNode.getPosition(),\n+                                    \"Function \\'\" + functionName +\n+                                            \"\\' defined within the tests folder cannot be mocked\");\n+                        }\n+\n+                        //Exit validate function if the function exists in the entry\n+                        return;\n+                    } else {\n+                        // We need to continue to make sure both packages are checked\n+                        continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEyMDA5OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMjo1M1rOGsuc-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMjo1M1rOGsuc-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTYwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    //Exit validate function if the function exists in the entry\n          \n          \n            \n                                    // Exit validate function if the function exists in the entry", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449551608", "createdAt": "2020-07-03T12:12:53Z", "author": {"login": "pramodya1994"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -431,6 +427,51 @@ private String formatPackageName(String value) {\n         return value;\n     }\n \n+    /**\n+     * Validates the function name provided in the annotation.\n+     * @param functionName Function to mock\n+     * @param variableNode  MockFunction object variable node\n+     * @param attachmentNode  MockFunction object attachment node\n+     */\n+    private void validateFunctionName(String functionName, SimpleVariableNode variableNode,\n+                                      AnnotationAttachmentNode attachmentNode) {\n+        PackageID packageID = ((BLangTestablePackage) ((BLangSimpleVariable) variableNode).parent).packageID;\n+\n+        if (functionName == null) {\n+            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, attachmentNode.getPosition(),\n+                    \"Function name cannot be empty\");\n+        } else {\n+            // Iterate through package map entries\n+            for (Map.Entry<BPackageSymbol, SymbolEnv> entry : this.packageEnvironmentMap.entrySet()) {\n+\n+                // Consider both instances of the current package\n+                if (entry.getKey().pkgID.equals(packageID)) {\n+                    // Check if the current package has the function name\n+                    if (entry.getValue().scope.entries.containsKey(new Name(functionName))) {\n+\n+                        // Functions within a test package are not allowed to be mocked\n+                        if (entry.getValue().scope.entries.containsKey(new Name(\"test\"))) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR,\n+                                    attachmentNode.getPosition(),\n+                                    \"Function \\'\" + functionName +\n+                                            \"\\' defined within the tests folder cannot be mocked\");\n+                        }\n+\n+                        //Exit validate function if the function exists in the entry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEyNjU1OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNToyNFrOGsug1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyMTowMVrOGvGvtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjU5OQ==", "bodyText": "Is there a possibility to break down some child methods, since this method is very long.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449552599", "createdAt": "2020-07-03T12:15:24Z", "author": {"login": "pramodya1994"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "diffHunk": "@@ -92,26 +93,93 @@ private static Object callFunction(String returnVal, ArrayValue args) {\n                 methodName, argsList.toArray());\n     }\n \n-    private static String getClassName(String methodName, String orgName, String packageName, String version)\n-            throws IOException, ClassNotFoundException {\n+    private static String getClassName(String mockMethodName, String orgName, String packageName, String version,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0Njc3Mg==", "bodyText": "I separated the validation part into a different function called validateFunctionSignature", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r452046772", "createdAt": "2020-07-09T08:21:01Z", "author": {"login": "Ibaqu"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "diffHunk": "@@ -92,26 +93,93 @@ private static Object callFunction(String returnVal, ArrayValue args) {\n                 methodName, argsList.toArray());\n     }\n \n-    private static String getClassName(String methodName, String orgName, String packageName, String version)\n-            throws IOException, ClassNotFoundException {\n+    private static String getClassName(String mockMethodName, String orgName, String packageName, String version,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjU5OQ=="}, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEyODE2OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNTo1OVrOGsuhtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjowODo1OFrOGs0UwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjgyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // Methods type and paramters\n          \n          \n            \n                            // Methods type and parameters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449552821", "createdAt": "2020-07-03T12:15:59Z", "author": {"login": "pramodya1994"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "diffHunk": "@@ -92,26 +93,93 @@ private static Object callFunction(String returnVal, ArrayValue args) {\n                 methodName, argsList.toArray());\n     }\n \n-    private static String getClassName(String methodName, String orgName, String packageName, String version)\n-            throws IOException, ClassNotFoundException {\n+    private static String getClassName(String mockMethodName, String orgName, String packageName, String version,\n+                                       String originalMethodName) throws IOException, ClassNotFoundException {\n         String jarName = orgName + \"-\" + packageName + \"-\" + version + \"-testable.jar\";\n         Path jarPath = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"caches\", \"jar_cache\", orgName,\n                 packageName, version, jarName);\n+\n         try (JarFile jar = new JarFile(jarPath.toString())) {\n-            for (Enumeration<JarEntry> entries = jar.entries(); entries.hasMoreElements(); ) {\n-                JarEntry entry = entries.nextElement();\n-                String file = entry.getName();\n-                if (file.endsWith(\".class\") && file.contains(\"tests/\")) {\n-                    String classname = file.replace('/', '.').substring(0, file.length() - 6);\n-                    Class<?> clazz = Class.forName(classname);\n-                    for (Method method : clazz.getDeclaredMethods()) {\n-                        if (methodName.equals(method.getName())) {\n-                            return clazz.getSimpleName();\n-                        }\n+            // Method definition\n+            Method mockMethod = null;\n+            Method originalMethod = null;\n+\n+            for (Enumeration<JarEntry> entries = jar.entries(); entries.hasMoreElements();) {\n+                String file = entries.nextElement().getName();\n+\n+                // Get .class files but dont contain '..Frame.class'\n+                if (file.endsWith(\".class\") && !file.contains(\"Frame.class\") && !file.contains(\"__init\")) {\n+\n+                    // Find mock method if still null\n+                    if (file.contains(\"/tests/\") && mockMethod == null) {\n+                        mockMethod = getClassDeclaredMethod(file, mockMethodName);\n                     }\n+\n+                    // Find original method if still null\n+                    if (!file.contains(\"/tests/\") && originalMethod == null) {\n+                        originalMethod = getClassDeclaredMethod(file, originalMethodName);\n+                    }\n+                }\n+\n+                if (mockMethod != null && originalMethod != null) {\n+                    break;\n                 }\n+\n             }\n+\n+            // Validation\n+            if (mockMethod != null && originalMethod != null) {\n+\n+                // Methods type and paramters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0NzgwOA==", "bodyText": "Corrected typo", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449647808", "createdAt": "2020-07-03T16:08:58Z", "author": {"login": "Ibaqu"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "diffHunk": "@@ -92,26 +93,93 @@ private static Object callFunction(String returnVal, ArrayValue args) {\n                 methodName, argsList.toArray());\n     }\n \n-    private static String getClassName(String methodName, String orgName, String packageName, String version)\n-            throws IOException, ClassNotFoundException {\n+    private static String getClassName(String mockMethodName, String orgName, String packageName, String version,\n+                                       String originalMethodName) throws IOException, ClassNotFoundException {\n         String jarName = orgName + \"-\" + packageName + \"-\" + version + \"-testable.jar\";\n         Path jarPath = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"caches\", \"jar_cache\", orgName,\n                 packageName, version, jarName);\n+\n         try (JarFile jar = new JarFile(jarPath.toString())) {\n-            for (Enumeration<JarEntry> entries = jar.entries(); entries.hasMoreElements(); ) {\n-                JarEntry entry = entries.nextElement();\n-                String file = entry.getName();\n-                if (file.endsWith(\".class\") && file.contains(\"tests/\")) {\n-                    String classname = file.replace('/', '.').substring(0, file.length() - 6);\n-                    Class<?> clazz = Class.forName(classname);\n-                    for (Method method : clazz.getDeclaredMethods()) {\n-                        if (methodName.equals(method.getName())) {\n-                            return clazz.getSimpleName();\n-                        }\n+            // Method definition\n+            Method mockMethod = null;\n+            Method originalMethod = null;\n+\n+            for (Enumeration<JarEntry> entries = jar.entries(); entries.hasMoreElements();) {\n+                String file = entries.nextElement().getName();\n+\n+                // Get .class files but dont contain '..Frame.class'\n+                if (file.endsWith(\".class\") && !file.contains(\"Frame.class\") && !file.contains(\"__init\")) {\n+\n+                    // Find mock method if still null\n+                    if (file.contains(\"/tests/\") && mockMethod == null) {\n+                        mockMethod = getClassDeclaredMethod(file, mockMethodName);\n                     }\n+\n+                    // Find original method if still null\n+                    if (!file.contains(\"/tests/\") && originalMethod == null) {\n+                        originalMethod = getClassDeclaredMethod(file, originalMethodName);\n+                    }\n+                }\n+\n+                if (mockMethod != null && originalMethod != null) {\n+                    break;\n                 }\n+\n             }\n+\n+            // Validation\n+            if (mockMethod != null && originalMethod != null) {\n+\n+                // Methods type and paramters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjgyMQ=="}, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEzMjg4OnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/MockTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNzo1NFrOGsukuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNzo1NFrOGsukuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MzU5NQ==", "bodyText": "msg3 is never used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449553595", "createdAt": "2020-07-03T12:17:54Z", "author": {"login": "pramodya1994"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/MockTest.java", "diffHunk": "@@ -41,16 +41,25 @@ public void setup() throws BallerinaTestException {\n     }\n \n     @Test\n-    public void testAssertTrue() throws BallerinaTestException {\n+    public void testFunctionMocking() throws BallerinaTestException {\n         String msg1 = \"4 passing\";\n-        String msg2 = \"1 passing\";\n+        String msg2 = \"3 failing\";\n+        String msg3 = \"1 passing\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3214, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}