{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjM0MzA5", "number": 22632, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDozN1rODyJpsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMzo0M1rODyJuQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzNTIzOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/utils/Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDozN1rOGGB7XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMDozN1rOGGB7XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjIyMQ==", "bodyText": "Can we lift up this line to before line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22632#discussion_r408976221", "createdAt": "2020-04-15T16:30:37Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/utils/Utils.java", "diffHunk": "@@ -90,6 +104,411 @@ public static void closeResources(ResultSet resultSet, Statement statement, Conn\n         }\n     }\n \n+    static String getSqlQuery(MapValue<String, Object> paramString) throws ApplicationError {\n+        ArrayValue partsArray = paramString.getArrayValue(Constants.ParameterizedStingFields.PARTS);\n+        ArrayValue insertionsArray = paramString.getArrayValue(Constants.ParameterizedStingFields.INSERTIONS);\n+        if (partsArray.size() - 1 == insertionsArray.size()) {\n+            StringBuilder sqlQuery = new StringBuilder();\n+            for (int i = 0; i < partsArray.size(); i++) {\n+                if (i > 0) {\n+                    sqlQuery.append(\" ? \");\n+                }\n+                sqlQuery.append(partsArray.get(i).toString());\n+            }\n+            return sqlQuery.toString();\n+        } else {\n+            throw new ApplicationError(\"Parts and insertions count doesn't match in ParametrizedString passed. \"\n+                    + paramString.toString());\n+        }\n+    }\n+\n+    static void setParams(Connection connection, PreparedStatement preparedStatement, MapValue<String,\n+            Object> paramString)\n+            throws SQLException, ApplicationError, IOException, ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a31056b285d49018373d8eeea8a1472ca4b9f83"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTE0Njg5OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/test/java/org/ballerinalang/mysql/query/ParamsQueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMzo0M1rOGGCCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMzo0M1rOGGCCmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODA3Mg==", "bodyText": "Remove this extra line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22632#discussion_r408978072", "createdAt": "2020-04-15T16:33:43Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/database/mysql/src/test/java/org/ballerinalang/mysql/query/ParamsQueryTest.java", "diffHunk": "@@ -0,0 +1,456 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.mysql.query;\n+\n+import org.ballerinalang.model.values.BBoolean;\n+import org.ballerinalang.model.values.BDecimal;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BFloat;\n+import org.ballerinalang.model.values.BInteger;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BString;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.mysql.BaseTest;\n+import org.ballerinalang.mysql.utils.SQLDBUtils;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+import java.io.File;\n+import java.text.DecimalFormat;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * This test class verifies the behaviour of the ParameterizedString passed into the testQuery operation.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ParamsQueryTest {\n+    private CompileResult result;\n+    private static final String DB_NAME = \"TEST_SQL_PARAMS_QUERY\";\n+    private static final String SQL_SCRIPT = SQLDBUtils.SQL_RESOURCE_DIR + File.separator + SQLDBUtils.QUERY_DIR +\n+            File.separator + \"simple-params-test-data.sql\";\n+\n+    static {\n+        BaseTest.addDBSchema(DB_NAME, SQL_SCRIPT);\n+    }\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compileOffline(SQLDBUtils.getBalFilesDir(SQLDBUtils.QUERY_DIR,\n+                \"simple-params-query-test.bal\"));\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a31056b285d49018373d8eeea8a1472ca4b9f83"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3845, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}