{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NjIxMzcw", "number": 21662, "title": "Add Avro support for Ballerina Kafka", "bodyText": "Purpose\n\n\nThis will introduce the Ballerina Kafka V2.0.0.\nkafka:ProducerConfig and kafka:ConsumerConfig records are renamed to kafka:ProducerConfiguration and kafka:ConsumerConfiguration to align with Ballerina conventions.\nWill introduce the Apache Avro Serialization / Deserialization support for Ballerina Kafka module.\nNon-required fields in kafka:ProducerConfiguration and kafka:ConsumerConfiguration are now optional fields, as opposite to previously defined nil fields or default values.\n\n\nResolves #19695\nFixes #21398\nFixes #21630\nApproach\n\nNew configuration fields are introduced to add Avro support.\nkafka:ProducerConfiguration\n\nschemaRegistryUrl - To specify the schema registry to use in Avro serialization.\nAdditionally, kafka:SER_AVRO is introduced as a kafka:SerializerType to represent Avro deserialization.\n\nkafka:ConsumerConfiguration\n\nschemaRegistryUrl - To specify the schema registry to use in Avro deserialization.\nAdditionally, kafka:DE_AVRO is introduced as a kafka:DeserializerType to represent Avro serialization.\n\n\nSamples\n\nProducer\nTo use Avro serialization, kafka:Producer should be created as follows:\nkafka:ProducerConfiguration producerConfiguration = {\n   // Other configuration values\n    valueSerializerType: kafka:SER_AVRO,\n    schemaRegistryUrl: \"<schema_registry_url>\"\n};\n\nkafka:Producer producer = new(producerConfiguration);\nConsumer\nTo use Avro deserialization, kafka:Consumer should be created as follows:\nkafka:ConsumerConfiguration consumerConfiguration = {\n    // Other configuration values\n    valueDeserializerType: kafka:DES_AVRO,\n    schemaRegistryUrl: \"<schema_registry_url>\"\n}\n\nRemarks\n\nUser should add all the required dependencies through the Ballerina.toml file in the project, in order to Avro serialization to work.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-11T11:02:49Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662", "merged": true, "mergeCommit": {"oid": "5eae1202aeebb050a8ecd12b239fe75c40ac9c5e"}, "closed": true, "closedAt": "2020-03-11T17:12:35Z", "author": {"login": "ThisaruGuruge"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKsARtgH2gAyMzg2NjIxMzcwOjY1MWI1MjA1MGRiZmVkMDM3MmY1N2IwMzE3ODQ0MGI4YTBmYWQ4NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMqMAZAFqTM3Mjk1MzIzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "651b52050dbfed0372f57b03178440b8a0fad859", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/651b52050dbfed0372f57b03178440b8a0fad859", "committedDate": "2020-03-05T14:01:27Z", "message": "Make optional fields optional instead of union-typing them"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fdfd76aa6010f439ae1e077eedbf787a4c881cf", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fdfd76aa6010f439ae1e077eedbf787a4c881cf", "committedDate": "2020-03-05T14:01:46Z", "message": "Bump kafka module version to 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82aa748330037311526986a9b982b377b2099a5d", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/82aa748330037311526986a9b982b377b2099a5d", "committedDate": "2020-03-05T15:46:24Z", "message": "Rename ConsumerConfig to ConsumerConfiguration and producerConfig to ProducerConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e9f3f4b4cffe83e300cb0f521fb848552a06ce8", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e9f3f4b4cffe83e300cb0f521fb848552a06ce8", "committedDate": "2020-03-05T15:51:16Z", "message": "Update examples and integration tests to reflect record name changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cac7bfe4f80791332c224f1b97ca966d5e58d2d2", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cac7bfe4f80791332c224f1b97ca966d5e58d2d2", "committedDate": "2020-03-05T16:17:35Z", "message": "Move constant definitions to new file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815d7953399641d0c36502e14b954c89079fe6c6", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/815d7953399641d0c36502e14b954c89079fe6c6", "committedDate": "2020-03-10T04:31:35Z", "message": "Change data type from any to anydata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d01f987e73cc4f12e1cbd350dab919ef0b2f06d1", "committedDate": "2020-03-11T10:43:17Z", "message": "Add avro support for Kafka value serialization / deserialization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNzMyMDE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#pullrequestreview-372732019", "createdAt": "2020-03-11T12:57:46Z", "commit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1Nzo0N1rOF01v3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1Nzo0N1rOF01v3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDg3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n          \n          \n            \n                # + return - An `error` if encounters an error while starting the server, returns nil otherwise.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390950876", "createdAt": "2020-03-11T12:57:47Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -167,57 +160,90 @@ public type Consumer client object {\n     # Creates a new Kafka `Consumer`.\n     #\n     # + config - Configurations related to consumer endpoint.\n-    public function __init (ConsumerConfig config) {\n+    public function __init (ConsumerConfiguration config) {\n         self.consumerConfig = config;\n         self.keyDeserializerType = config.keyDeserializerType;\n         self.valueDeserializerType = config.valueDeserializerType;\n \n         if (self.keyDeserializerType == DES_CUSTOM) {\n-            var keyDeserializerObject = config.keyDeserializer;\n+            var keyDeserializerObject = config?.keyDeserializer;\n             if (keyDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid keyDeserializer config: Please Provide a \" +\n                                         \"valid custom deserializer for the keyDeserializer\");\n             } else {\n                 self.keyDeserializer = keyDeserializerObject;\n             }\n         }\n+        if (self.keyDeserializerType == DES_AVRO) {\n+            panic error(CONSUMER_ERROR, message = \"Key deserialization using Avro is not yet supported.\");\n+            //var schemaRegistryUrl = config.schemaRegistryUrl;\n+            //if (schemaRegistryUrl is ()) {\n+            //    panic error(PRODUCER_ERROR, message = \"Missing schema registry URL for the Avro serializer. Please \" +\n+            //                \"provide 'schemaRegistryUrl' configuration in 'kafka:ProducerConfiguration'.\");\n+            //}\n+        }\n \n         if (self.valueDeserializerType == DES_CUSTOM) {\n-            var valueDeserializerObject = config.valueDeserializer;\n+            var valueDeserializerObject = config?.valueDeserializer;\n             if (valueDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid valueDeserializer config: Please Provide a\" +\n                                         \" valid custom deserializer for the valueDeserializer\");\n             } else {\n                 self.valueDeserializer = valueDeserializerObject;\n             }\n         }\n+        if (self.valueDeserializerType == DES_AVRO) {\n+            var schemaRegistryUrl = config?.schemaRegistryUrl;\n+            if (schemaRegistryUrl is ()) {\n+                panic error(CONSUMER_ERROR, message = \"Missing schema registry URL for the Avro deserializer. Please \" +\n+                            \"provide 'schemaRegistryUrl' configuration in 'kafka:ConsumerConfiguration'.\");\n+            }\n+        }\n \n         checkpanic self.init(config);\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNzMyNjk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#pullrequestreview-372732696", "createdAt": "2020-03-11T12:58:44Z", "commit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1ODo0NFrOF01xyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1ODo0NFrOF01xyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTM2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n          \n          \n            \n                # + return - An `error` if encounters an error while attaching the service, returns nil otherwise.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390951368", "createdAt": "2020-03-11T12:58:44Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -167,57 +160,90 @@ public type Consumer client object {\n     # Creates a new Kafka `Consumer`.\n     #\n     # + config - Configurations related to consumer endpoint.\n-    public function __init (ConsumerConfig config) {\n+    public function __init (ConsumerConfiguration config) {\n         self.consumerConfig = config;\n         self.keyDeserializerType = config.keyDeserializerType;\n         self.valueDeserializerType = config.valueDeserializerType;\n \n         if (self.keyDeserializerType == DES_CUSTOM) {\n-            var keyDeserializerObject = config.keyDeserializer;\n+            var keyDeserializerObject = config?.keyDeserializer;\n             if (keyDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid keyDeserializer config: Please Provide a \" +\n                                         \"valid custom deserializer for the keyDeserializer\");\n             } else {\n                 self.keyDeserializer = keyDeserializerObject;\n             }\n         }\n+        if (self.keyDeserializerType == DES_AVRO) {\n+            panic error(CONSUMER_ERROR, message = \"Key deserialization using Avro is not yet supported.\");\n+            //var schemaRegistryUrl = config.schemaRegistryUrl;\n+            //if (schemaRegistryUrl is ()) {\n+            //    panic error(PRODUCER_ERROR, message = \"Missing schema registry URL for the Avro serializer. Please \" +\n+            //                \"provide 'schemaRegistryUrl' configuration in 'kafka:ProducerConfiguration'.\");\n+            //}\n+        }\n \n         if (self.valueDeserializerType == DES_CUSTOM) {\n-            var valueDeserializerObject = config.valueDeserializer;\n+            var valueDeserializerObject = config?.valueDeserializer;\n             if (valueDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid valueDeserializer config: Please Provide a\" +\n                                         \" valid custom deserializer for the valueDeserializer\");\n             } else {\n                 self.valueDeserializer = valueDeserializerObject;\n             }\n         }\n+        if (self.valueDeserializerType == DES_AVRO) {\n+            var schemaRegistryUrl = config?.schemaRegistryUrl;\n+            if (schemaRegistryUrl is ()) {\n+                panic error(CONSUMER_ERROR, message = \"Missing schema registry URL for the Avro deserializer. Please \" +\n+                            \"provide 'schemaRegistryUrl' configuration in 'kafka:ConsumerConfiguration'.\");\n+            }\n+        }\n \n         checkpanic self.init(config);\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return start(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __gracefulStop() returns error? {\n-        return ();\n+        return stop(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __immediateStop() returns error? {\n         return stop(self);\n     }\n \n+    # Gets called every time a service attaches itself to this listener.\n+    #\n+    # + s - The type of the service to be registered.\n+    # + name - Name of the service.\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNzMyOTgx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#pullrequestreview-372732981", "createdAt": "2020-03-11T12:59:07Z", "commit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1OTowN1rOF01ypQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1OTowN1rOF01ypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTU4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - error if occurred during detaching of a service or `nil`\n          \n          \n            \n                # + return - An `error` if an error occurred during detaching a service or `nil`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390951589", "createdAt": "2020-03-11T12:59:07Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -167,57 +160,90 @@ public type Consumer client object {\n     # Creates a new Kafka `Consumer`.\n     #\n     # + config - Configurations related to consumer endpoint.\n-    public function __init (ConsumerConfig config) {\n+    public function __init (ConsumerConfiguration config) {\n         self.consumerConfig = config;\n         self.keyDeserializerType = config.keyDeserializerType;\n         self.valueDeserializerType = config.valueDeserializerType;\n \n         if (self.keyDeserializerType == DES_CUSTOM) {\n-            var keyDeserializerObject = config.keyDeserializer;\n+            var keyDeserializerObject = config?.keyDeserializer;\n             if (keyDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid keyDeserializer config: Please Provide a \" +\n                                         \"valid custom deserializer for the keyDeserializer\");\n             } else {\n                 self.keyDeserializer = keyDeserializerObject;\n             }\n         }\n+        if (self.keyDeserializerType == DES_AVRO) {\n+            panic error(CONSUMER_ERROR, message = \"Key deserialization using Avro is not yet supported.\");\n+            //var schemaRegistryUrl = config.schemaRegistryUrl;\n+            //if (schemaRegistryUrl is ()) {\n+            //    panic error(PRODUCER_ERROR, message = \"Missing schema registry URL for the Avro serializer. Please \" +\n+            //                \"provide 'schemaRegistryUrl' configuration in 'kafka:ProducerConfiguration'.\");\n+            //}\n+        }\n \n         if (self.valueDeserializerType == DES_CUSTOM) {\n-            var valueDeserializerObject = config.valueDeserializer;\n+            var valueDeserializerObject = config?.valueDeserializer;\n             if (valueDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid valueDeserializer config: Please Provide a\" +\n                                         \" valid custom deserializer for the valueDeserializer\");\n             } else {\n                 self.valueDeserializer = valueDeserializerObject;\n             }\n         }\n+        if (self.valueDeserializerType == DES_AVRO) {\n+            var schemaRegistryUrl = config?.schemaRegistryUrl;\n+            if (schemaRegistryUrl is ()) {\n+                panic error(CONSUMER_ERROR, message = \"Missing schema registry URL for the Avro deserializer. Please \" +\n+                            \"provide 'schemaRegistryUrl' configuration in 'kafka:ConsumerConfiguration'.\");\n+            }\n+        }\n \n         checkpanic self.init(config);\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return start(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __gracefulStop() returns error? {\n-        return ();\n+        return stop(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __immediateStop() returns error? {\n         return stop(self);\n     }\n \n+    # Gets called every time a service attaches itself to this listener.\n+    #\n+    # + s - The type of the service to be registered.\n+    # + name - Name of the service.\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n     public function __attach(service s, string? name = ()) returns error? {\n         return register(self, s, name);\n     }\n \n+    # Detaches a consumer service from the listener.\n+    #\n+    # + s - The service to be detached\n+    # + return - error if occurred during detaching of a service or `nil`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "originalPosition": 235}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNzM1MDIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#pullrequestreview-372735022", "createdAt": "2020-03-11T13:01:57Z", "commit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMTo1N1rOF014cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMTo1N1rOF014cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzA3Mg==", "bodyText": "Is bootstrapServers field required now?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390953072", "createdAt": "2020-03-11T13:01:57Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -56,86 +58,63 @@ import ballerinax/java;\n # + transactionTimeoutInMillis - Timeout for transaction status update from the producer.\n # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled.\n # + secureSocket - Configurations related to SSL/TLS.\n-public type ProducerConfig record {|\n-    string? bootstrapServers = ();\n-    Producer_Acks acks = ACKS_SINGLE;\n-    string? compressionType = ();\n-    string? clientId = ();\n-    string? metricsRecordingLevel = ();\n-    string? metricReporterClasses = ();\n-    string? partitionerClass = ();\n-    string? interceptorClasses = ();\n-    string? transactionalId = ();\n+public type ProducerConfiguration record {|\n+    string bootstrapServers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5752eeafdda7ca5e52a96f3b04fc8a9d12dbb4e1", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5752eeafdda7ca5e52a96f3b04fc8a9d12dbb4e1", "committedDate": "2020-03-11T15:37:38Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyOTUzMjMy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#pullrequestreview-372953232", "createdAt": "2020-03-11T17:02:18Z", "commit": {"oid": "5752eeafdda7ca5e52a96f3b04fc8a9d12dbb4e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3873, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}