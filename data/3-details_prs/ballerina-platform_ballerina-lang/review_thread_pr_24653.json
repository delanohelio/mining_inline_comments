{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MTQ2MTg2", "number": 24653, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0MzowOVrOENKH4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0MzowOVrOENKH4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjMyODAxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0MzowOVrOGvrqhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzoxNTo0MlrOGvsf5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTY1NA==", "bodyText": "Any clue on why do we need to special-case start-acton here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24653#discussion_r452651654", "createdAt": "2020-07-10T06:43:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2457,6 +2457,20 @@ public BLangNode transform(ExpressionStatementNode expressionStatement) {\n         switch (kind) {\n             case ASYNC_SEND_ACTION:\n                 return expressionStatement.expression().apply(this);\n+            case WAIT_ACTION:\n+                WaitActionNode waitActionNode =\n+                        (WaitActionNode) expressionStatement.expression();\n+                if (waitActionNode.waitFutureExpr().kind() == SyntaxKind.START_ACTION) {\n+                    BLangWorkerSend bLangWorkerSend =\n+                            (BLangWorkerSend) TreeBuilder.createWorkerSendNode();\n+                    bLangWorkerSend.expr = createExpression(expressionStatement.expression());\n+                    bLangWorkerSend.pos = getPosition(expressionStatement);\n+                    AsyncSendActionNode asyncSendActionNode =\n+                            (AsyncSendActionNode) ((StartActionNode) waitActionNode.waitFutureExpr()).expression();\n+                    bLangWorkerSend.setWorkerName(createIdentifier(asyncSendActionNode.peerWorker().name()));\n+                    return bLangWorkerSend;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5619dfb6ffc87d0648e76fab42a179dc10638a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MzA1Ng==", "bodyText": "no Idea, that's just the way the node is getting transformed. it doesn't follow that path for anything else.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24653#discussion_r452653056", "createdAt": "2020-07-10T06:47:02Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2457,6 +2457,20 @@ public BLangNode transform(ExpressionStatementNode expressionStatement) {\n         switch (kind) {\n             case ASYNC_SEND_ACTION:\n                 return expressionStatement.expression().apply(this);\n+            case WAIT_ACTION:\n+                WaitActionNode waitActionNode =\n+                        (WaitActionNode) expressionStatement.expression();\n+                if (waitActionNode.waitFutureExpr().kind() == SyntaxKind.START_ACTION) {\n+                    BLangWorkerSend bLangWorkerSend =\n+                            (BLangWorkerSend) TreeBuilder.createWorkerSendNode();\n+                    bLangWorkerSend.expr = createExpression(expressionStatement.expression());\n+                    bLangWorkerSend.pos = getPosition(expressionStatement);\n+                    AsyncSendActionNode asyncSendActionNode =\n+                            (AsyncSendActionNode) ((StartActionNode) waitActionNode.waitFutureExpr()).expression();\n+                    bLangWorkerSend.setWorkerName(createIdentifier(asyncSendActionNode.peerWorker().name()));\n+                    return bLangWorkerSend;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTY1NA=="}, "originalCommit": {"oid": "2c5619dfb6ffc87d0648e76fab42a179dc10638a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NDA4Nw==", "bodyText": "no i meant, what was the reason to special case the start-action?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24653#discussion_r452654087", "createdAt": "2020-07-10T06:49:52Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2457,6 +2457,20 @@ public BLangNode transform(ExpressionStatementNode expressionStatement) {\n         switch (kind) {\n             case ASYNC_SEND_ACTION:\n                 return expressionStatement.expression().apply(this);\n+            case WAIT_ACTION:\n+                WaitActionNode waitActionNode =\n+                        (WaitActionNode) expressionStatement.expression();\n+                if (waitActionNode.waitFutureExpr().kind() == SyntaxKind.START_ACTION) {\n+                    BLangWorkerSend bLangWorkerSend =\n+                            (BLangWorkerSend) TreeBuilder.createWorkerSendNode();\n+                    bLangWorkerSend.expr = createExpression(expressionStatement.expression());\n+                    bLangWorkerSend.pos = getPosition(expressionStatement);\n+                    AsyncSendActionNode asyncSendActionNode =\n+                            (AsyncSendActionNode) ((StartActionNode) waitActionNode.waitFutureExpr()).expression();\n+                    bLangWorkerSend.setWorkerName(createIdentifier(asyncSendActionNode.peerWorker().name()));\n+                    return bLangWorkerSend;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTY1NA=="}, "originalCommit": {"oid": "2c5619dfb6ffc87d0648e76fab42a179dc10638a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NDc0MA==", "bodyText": "well when we have a start action inside a wait action the old parser doesnt return an expressionstmt node but rather a workersendNode. so thats the reason", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24653#discussion_r452654740", "createdAt": "2020-07-10T06:51:33Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2457,6 +2457,20 @@ public BLangNode transform(ExpressionStatementNode expressionStatement) {\n         switch (kind) {\n             case ASYNC_SEND_ACTION:\n                 return expressionStatement.expression().apply(this);\n+            case WAIT_ACTION:\n+                WaitActionNode waitActionNode =\n+                        (WaitActionNode) expressionStatement.expression();\n+                if (waitActionNode.waitFutureExpr().kind() == SyntaxKind.START_ACTION) {\n+                    BLangWorkerSend bLangWorkerSend =\n+                            (BLangWorkerSend) TreeBuilder.createWorkerSendNode();\n+                    bLangWorkerSend.expr = createExpression(expressionStatement.expression());\n+                    bLangWorkerSend.pos = getPosition(expressionStatement);\n+                    AsyncSendActionNode asyncSendActionNode =\n+                            (AsyncSendActionNode) ((StartActionNode) waitActionNode.waitFutureExpr()).expression();\n+                    bLangWorkerSend.setWorkerName(createIdentifier(asyncSendActionNode.peerWorker().name()));\n+                    return bLangWorkerSend;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTY1NA=="}, "originalCommit": {"oid": "2c5619dfb6ffc87d0648e76fab42a179dc10638a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2NTMxOQ==", "bodyText": "even when the original node is an expressionstatement node", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24653#discussion_r452665319", "createdAt": "2020-07-10T07:15:42Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2457,6 +2457,20 @@ public BLangNode transform(ExpressionStatementNode expressionStatement) {\n         switch (kind) {\n             case ASYNC_SEND_ACTION:\n                 return expressionStatement.expression().apply(this);\n+            case WAIT_ACTION:\n+                WaitActionNode waitActionNode =\n+                        (WaitActionNode) expressionStatement.expression();\n+                if (waitActionNode.waitFutureExpr().kind() == SyntaxKind.START_ACTION) {\n+                    BLangWorkerSend bLangWorkerSend =\n+                            (BLangWorkerSend) TreeBuilder.createWorkerSendNode();\n+                    bLangWorkerSend.expr = createExpression(expressionStatement.expression());\n+                    bLangWorkerSend.pos = getPosition(expressionStatement);\n+                    AsyncSendActionNode asyncSendActionNode =\n+                            (AsyncSendActionNode) ((StartActionNode) waitActionNode.waitFutureExpr()).expression();\n+                    bLangWorkerSend.setWorkerName(createIdentifier(asyncSendActionNode.peerWorker().name()));\n+                    return bLangWorkerSend;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTY1NA=="}, "originalCommit": {"oid": "2c5619dfb6ffc87d0648e76fab42a179dc10638a"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3233, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}