{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NjEzNzcz", "number": 22318, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNTo1NFrODtQFXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxODoxNVrODzz28g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzc2MDMwOnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNTo1NFrOF-keIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNTo1NFrOF-keIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzU3MQ==", "bodyText": "Unnecessary change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401153571", "createdAt": "2020-03-31T19:15:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -124,7 +124,6 @@ public static Types getInstance(CompilerContext context) {\n         if (types == null) {\n             types = new Types(context);\n         }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzc2MTYwOnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNjoyM1rOF-kfCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNjoyM1rOF-kfCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzgwMw==", "bodyText": "Why are removing these? Can we also add new lines between the newly added error messages?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401153803", "createdAt": "2020-03-31T19:16:23Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1225,12 +1225,13 @@ error.unsupported.primitive.type.reason=\\\n \n error.method.signature.not.match=\\\n   '{ballerina/java}'METHOD_SIGNATURE_DOES_NOT_MATCH ''{0}''\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA1ODQ5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDo1MDoxMVrOF-wuhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDo1MDoxMVrOF-wuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NDM3NQ==", "bodyText": "Can we call this something like initModifierFunctions() instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401354375", "createdAt": "2020-04-01T04:50:11Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -229,6 +231,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        init();\n+    }\n+\n+    private void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA2NjIxOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDo1NDo0OVrOF-wy8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDo1NDo0OVrOF-wy8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NTUwNw==", "bodyText": "Can we add tests for inferred size too?\n   int[*] x = [1, 2, 3, 4];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401355507", "createdAt": "2020-04-01T04:54:49Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,45 @@\n+function testPushOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA2Nzc0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Push.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDo1NTo1NFrOF-wz4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDo1NTo1NFrOF-wz4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NTc0Nw==", "bodyText": "Unused? Can we also make this private?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401355747", "createdAt": "2020-04-01T04:55:54Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Push.java", "diffHunk": "@@ -43,6 +43,8 @@\n )\n public class Push {\n \n+    public static final String FUNCTION_SIGNATURE = \"push()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA2ODEyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Pop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDo1NjoxMVrOF-w0Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDo1NjoxMVrOF-w0Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NTgwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String FUNCTION_SIGNATURE = \"pop()\";\n          \n          \n            \n                private static final String FUNCTION_SIGNATURE = \"pop()\";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401355807", "createdAt": "2020-04-01T04:56:11Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Pop.java", "diffHunk": "@@ -40,8 +40,10 @@\n )\n public class Pop {\n \n+    public static final String FUNCTION_SIGNATURE = \"pop()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA4MTU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowNTo0MVrOF-w8WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowNTo0MVrOF-w8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NzkxMw==", "bodyText": "What about unions of arrays, tuples, and combinations of arrays and tuples?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401357913", "createdAt": "2020-04-01T05:05:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1769,6 +1779,26 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        if (varRefType.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA4MjEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowNjowNlrOF-w8qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNToxNzoxNFrOF-xHgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1Nzk5NQ==", "bodyText": "I think we'll have to use one error and say\n  cannot call ''{0}'' on fixed length lists\n\nto handle unions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401357995", "createdAt": "2020-04-01T05:06:06Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1225,12 +1225,13 @@ error.unsupported.primitive.type.reason=\\\n \n error.method.signature.not.match=\\\n   '{ballerina/java}'METHOD_SIGNATURE_DOES_NOT_MATCH ''{0}''\n-\n error.invalid.deprecation.documentation=\\\n   invalid documentation: ''Deprecated'' documentation is only allowed on constructs annotated as ''@deprecated''\n-\n error.deprecation.documentation.should.available=\\\n   constructs annotated as ''@deprecated'' must have ''Deprecated'' documentation\n-\n error.invalid.attribute.reference=\\\n   invalid attribute reference\n+error.illegal.function.array.size=\\\n+  cannot call ''{0}'' on fixed length array ''{1}''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM2MDc2OA==", "bodyText": "Or have three errors\n  cannot call ''{0}'' on fixed length arrays\n\n  cannot call ''{0}'' on fixed length tuples\n\n  cannot call ''{0}'' on fixed length lists // for unions of arrays + tuples", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401360768", "createdAt": "2020-04-01T05:17:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1225,12 +1225,13 @@ error.unsupported.primitive.type.reason=\\\n \n error.method.signature.not.match=\\\n   '{ballerina/java}'METHOD_SIGNATURE_DOES_NOT_MATCH ''{0}''\n-\n error.invalid.deprecation.documentation=\\\n   invalid documentation: ''Deprecated'' documentation is only allowed on constructs annotated as ''@deprecated''\n-\n error.deprecation.documentation.should.available=\\\n   constructs annotated as ''@deprecated'' must have ''Deprecated'' documentation\n-\n error.invalid.attribute.reference=\\\n   invalid attribute reference\n+error.illegal.function.array.size=\\\n+  cannot call ''{0}'' on fixed length array ''{1}''", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1Nzk5NQ=="}, "originalCommit": {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTI1MzMyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo1Nzo0N1rOF_shKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo1Nzo0N1rOF_shKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzMzk5Mg==", "bodyText": "Can we call these function something like isFixedLengthList?\nWe don't use the term sealed anymore.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402333992", "createdAt": "2020-04-02T13:57:47Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTI2MDk0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo1OToxNFrOF_sl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo1OToxNFrOF_sl2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNTE5Mg==", "bodyText": "We don't use streams due to potential performance impacts, we can use an ordinary foreach loop maybe.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402335192", "createdAt": "2020-04-02T13:59:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return isPureSealed((BArrayType) type);\n+            case TypeTags.TUPLE:\n+                return isPureSealed((BTupleType) type);\n+            case TypeTags.UNION:\n+                return isPureSealed((BUnionType) type);\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPureSealed(BArrayType arrayType) {\n+        return (arrayType.state == BArrayState.CLOSED_SEALED);\n+    }\n+\n+    private boolean isPureSealed(BTupleType tupleType) {\n+        return (tupleType.restType == null);\n+    }\n+\n+    private boolean isPureSealed(BUnionType unionType) {\n+        return unionType.getMemberTypes().stream().allMatch(type -> isPureSealed(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTI2NDQ2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo1OTo1N1rOF_soFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo1OTo1N1rOF_soFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNTc2NA==", "bodyText": "We don't need separate functions for these right? These are just one line single condition checks.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402335764", "createdAt": "2020-04-02T13:59:57Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return isPureSealed((BArrayType) type);\n+            case TypeTags.TUPLE:\n+                return isPureSealed((BTupleType) type);\n+            case TypeTags.UNION:\n+                return isPureSealed((BUnionType) type);\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPureSealed(BArrayType arrayType) {\n+        return (arrayType.state == BArrayState.CLOSED_SEALED);\n+    }\n+\n+    private boolean isPureSealed(BTupleType tupleType) {\n+        return (tupleType.restType == null);\n+    }\n+\n+    private boolean isPureSealed(BUnionType unionType) {\n+        return unionType.getMemberTypes().stream().allMatch(type -> isPureSealed(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTI3MDc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowMToyNVrOF_ssNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowMToyNVrOF_ssNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNjgyMg==", "bodyText": "Shall we extract iExpr.name.getValue() out to a variable? We seem to be reusing it at L1747 (at times).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402336822", "createdAt": "2020-04-02T14:01:25Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return isPureSealed((BArrayType) type);\n+            case TypeTags.TUPLE:\n+                return isPureSealed((BTupleType) type);\n+            case TypeTags.UNION:\n+                return isPureSealed((BUnionType) type);\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPureSealed(BArrayType arrayType) {\n+        return (arrayType.state == BArrayState.CLOSED_SEALED);\n+    }\n+\n+    private boolean isPureSealed(BTupleType tupleType) {\n+        return (tupleType.restType == null);\n+    }\n+\n+    private boolean isPureSealed(BUnionType unionType) {\n+        return unionType.getMemberTypes().stream().allMatch(type -> isPureSealed(type));\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        if (!modifierFunctions.contains(iExpr.name.getValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTI3NjQ5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowMjo0M1rOF_svuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowMjo0M1rOF_svuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNzcyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [int, int][1] | [float, float][1] fixedLengthArray = <[float, float][1]> [[1.0, 2.3]];\n          \n          \n            \n                [int, int][1]|[float, float][1] fixedLengthArray = <[float, float][1]> [[1.0, 2.3]];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402337723", "createdAt": "2020-04-02T14:02:43Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,70 @@\n+function testPushOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    fixedLengthArray.push(4);\n+}\n+\n+function testPushOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    fixedLengthTuple.push(4);\n+}\n+\n+function testPopOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    int popped = fixedLengthArray.pop();\n+}\n+\n+function testPopOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    int popped = fixedLengthTuple.pop();\n+}\n+\n+function testShift() returns [int[], int] {\n+    int[] s = [1, 2, 3, 4, 5];\n+    var e = s.shift();\n+    return [s, e];\n+}\n+\n+function testShiftOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    int x = fixedLengthArray.shift();\n+}\n+\n+function testUnShiftOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    fixedLengthArray.unshift(5);\n+}\n+\n+function testShiftOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    int popped = fixedLengthTuple.shift();\n+}\n+\n+function testUnShiftOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    fixedLengthTuple.unshift();\n+}\n+\n+// inferred fixed length arrays\n+function testPushPopShiftUnshitOnInferredFixedLengthArray() {\n+    int[*] fixedLengthArray = [1, 2];\n+    fixedLengthArray.push(4);\n+    int x = fixedLengthArray.pop();\n+    x = fixedLengthArray.shift();\n+    fixedLengthArray.unshift();\n+}\n+\n+function testPushOnFixedLengthArrayUnions() {\n+    int[1]|float[1] fixedLengthArray = <int[1]> [1];\n+    fixedLengthArray.push(4);\n+}\n+\n+function testPushOnFixedLengthTupleUnion() {\n+    [int, int][1] | [float, float][1] fixedLengthArray = <[float, float][1]> [[1.0, 2.3]];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTI3NzYyOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowMzowMlrOF_swfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowMzowMlrOF_swfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNzkxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [int, int][1] | [float, float][] fixedLengthArray = <[float, float][1]> [[1, 2]];\n          \n          \n            \n                [int, int][1]|[float, float][] fixedLengthArray = <[float, float][1]> [[1, 2]];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402337916", "createdAt": "2020-04-02T14:03:02Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,70 @@\n+function testPushOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    fixedLengthArray.push(4);\n+}\n+\n+function testPushOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    fixedLengthTuple.push(4);\n+}\n+\n+function testPopOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    int popped = fixedLengthArray.pop();\n+}\n+\n+function testPopOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    int popped = fixedLengthTuple.pop();\n+}\n+\n+function testShift() returns [int[], int] {\n+    int[] s = [1, 2, 3, 4, 5];\n+    var e = s.shift();\n+    return [s, e];\n+}\n+\n+function testShiftOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    int x = fixedLengthArray.shift();\n+}\n+\n+function testUnShiftOnFixedLengthArray() {\n+    int[1] fixedLengthArray = [1];\n+    fixedLengthArray.unshift(5);\n+}\n+\n+function testShiftOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    int popped = fixedLengthTuple.shift();\n+}\n+\n+function testUnShiftOnFixedLengthTuple() {\n+    [int, int] fixedLengthTuple = [1, 2];\n+    fixedLengthTuple.unshift();\n+}\n+\n+// inferred fixed length arrays\n+function testPushPopShiftUnshitOnInferredFixedLengthArray() {\n+    int[*] fixedLengthArray = [1, 2];\n+    fixedLengthArray.push(4);\n+    int x = fixedLengthArray.pop();\n+    x = fixedLengthArray.shift();\n+    fixedLengthArray.unshift();\n+}\n+\n+function testPushOnFixedLengthArrayUnions() {\n+    int[1]|float[1] fixedLengthArray = <int[1]> [1];\n+    fixedLengthArray.push(4);\n+}\n+\n+function testPushOnFixedLengthTupleUnion() {\n+    [int, int][1] | [float, float][1] fixedLengthArray = <[float, float][1]> [[1.0, 2.3]];\n+    fixedLengthArray.push(<[float, float]>[1, 2]);\n+}\n+\n+// run time panic no compile time error\n+function testPushOnFixedLengthAndDynamicTupleUnion() {\n+    [int, int][1] | [float, float][] fixedLengthArray = <[float, float][1]> [[1, 2]];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15e66fa25085007377745fbfd4977196bb90844"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzkyMjM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjoxMjozMlrOGAGT2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjoxMjozMlrOGAGT2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1NjU3MA==", "bodyText": "When we reach this point the state of inferred array types is always set as CLOSED_SEALED right? Or we'll have to check\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return (((BArrayType) type).state == BArrayState.CLOSED_SEALED);\n          \n          \n            \n                            return (((BArrayType) type).state != BArrayState.UNSEALED);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402756570", "createdAt": "2020-04-03T06:12:32Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,40 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state == BArrayState.CLOSED_SEALED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzk4MTc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjozOTozNVrOGAG3dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0OTowNFrOGAbSQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA==", "bodyText": "Have a small doubt regarding shift() on a tuple, created a spec issue - ballerina-platform/ballerina-spec#474.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402765684", "createdAt": "2020-04-03T06:39:35Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +229,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {\n+        this.modifierFunctions.add(\"push\");\n+        this.modifierFunctions.add(\"pop\");\n+        this.modifierFunctions.add(\"shift\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3ODA0Mg==", "bodyText": "I think that is just a extention of this. Spec says known to be fixed length we should error out. The example given we cannot properly define right ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402778042", "createdAt": "2020-04-03T07:10:48Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +229,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {\n+        this.modifierFunctions.add(\"push\");\n+        this.modifierFunctions.add(\"pop\");\n+        this.modifierFunctions.add(\"shift\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA=="}, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MjA4MQ==", "bodyText": "I think we can improve this based on the spec discussion.\nCan you also check the runtime behaviour?\nUpdate: let's create an issue if there are issues in the runtime implementation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402972081", "createdAt": "2020-04-03T12:33:24Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +229,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {\n+        this.modifierFunctions.add(\"push\");\n+        this.modifierFunctions.add(\"pop\");\n+        this.modifierFunctions.add(\"shift\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA=="}, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyNDA5Mw==", "bodyText": "added case I :  by 714edb4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403024093", "createdAt": "2020-04-03T13:57:28Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +229,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {\n+        this.modifierFunctions.add(\"push\");\n+        this.modifierFunctions.add(\"pop\");\n+        this.modifierFunctions.add(\"shift\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA=="}, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwMDIyNQ==", "bodyText": "Improved for case I 714edb4.\nWill check run time behavior.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403100225", "createdAt": "2020-04-03T15:49:04Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +229,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {\n+        this.modifierFunctions.add(\"push\");\n+        this.modifierFunctions.add(\"pop\");\n+        this.modifierFunctions.add(\"shift\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA=="}, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzk4Mjk5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo0MDowOVrOGAG4Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowMzoyNVrOGAJe7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTg2Ng==", "bodyText": "Shall we add the licence header for the bal file too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402765866", "createdAt": "2020-04-03T06:40:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,70 @@\n+function testPushOnFixedLengthArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NjU2MQ==", "bodyText": "Test cases dont need license header right.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402776561", "createdAt": "2020-04-03T07:07:33Z", "author": {"login": "KRVPerera"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,70 @@\n+function testPushOnFixedLengthArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTg2Ng=="}, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTgxNg==", "bodyText": "We've added the licence header in most of the new tests we've added. And given that the Java class for a test always has the licence header, I think we should include it in the bal file too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402779816", "createdAt": "2020-04-03T07:14:34Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,70 @@\n+function testPushOnFixedLengthArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTg2Ng=="}, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwODU1Nw==", "bodyText": "added by 35e88fa", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402808557", "createdAt": "2020-04-03T08:03:25Z", "author": {"login": "KRVPerera"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test_negative.bal", "diffHunk": "@@ -0,0 +1,70 @@\n+function testPushOnFixedLengthArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTg2Ng=="}, "originalCommit": {"oid": "d157249c7e44fa709b32e93629ddc88fbf04cb61"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTgxNTc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyNzozN1rOGAX5eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowOTozMlrOGAesqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NDcyOQ==", "bodyText": "We could initialize this in a static block.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403044729", "createdAt": "2020-04-03T14:27:37Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +233,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714edb48df99b7d411f8100bd5df60c0b2e2b05b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1NjEzNg==", "bodyText": "fixed by d9d1222", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403156136", "createdAt": "2020-04-03T17:09:32Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +233,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NDcyOQ=="}, "originalCommit": {"oid": "714edb48df99b7d411f8100bd5df60c0b2e2b05b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTgxNzU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyODowMlrOGAX6rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowOToyM1rOGAesJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NTAzNg==", "bodyText": "This could be a static variable", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403045036", "createdAt": "2020-04-03T14:28:02Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -194,6 +198,8 @@\n     private BLangAnonymousModelHelper anonymousModelHelper;\n     private SemanticAnalyzer semanticAnalyzer;\n     private boolean nonErrorLoggingCheck = false;\n+    private Set<String> modifierFunctions = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714edb48df99b7d411f8100bd5df60c0b2e2b05b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1NjAwNQ==", "bodyText": "fixed by d9d1222", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403156005", "createdAt": "2020-04-03T17:09:23Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -194,6 +198,8 @@\n     private BLangAnonymousModelHelper anonymousModelHelper;\n     private SemanticAnalyzer semanticAnalyzer;\n     private boolean nonErrorLoggingCheck = false;\n+    private Set<String> modifierFunctions = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NTAzNg=="}, "originalCommit": {"oid": "714edb48df99b7d411f8100bd5df60c0b2e2b05b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjcwMzA4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyNzoyMFrOGFqSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDowMToyN1rOGGd7Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODgyMg==", "bodyText": "Shall we follow a FUNCTION_NAME_XXX format instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r408588822", "createdAt": "2020-04-15T05:27:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -176,9 +176,14 @@\n  */\n public class TypeChecker extends BLangNodeVisitor {\n \n-    private static final CompilerContext.Key<TypeChecker> TYPE_CHECKER_KEY =\n-            new CompilerContext.Key<>();\n+    private static final CompilerContext.Key<TypeChecker> TYPE_CHECKER_KEY = new CompilerContext.Key<>();\n+    private static Set<String> modifierFunctions = new HashSet<>();\n+\n     private static final String TABLE_TNAME = \"table\";\n+    private static final String FUNCTION_PUSH_NAME = \"push\";\n+    private static final String FUNCTION_POP_NAME = \"pop\";\n+    private static final String FUNCTION_SHIFT_NAME = \"shift\";\n+    private static final String FUNCTION_UNSHIFT_NAME = \"unshift\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzNDg4Ng==", "bodyText": "Done\nad71378", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r409434886", "createdAt": "2020-04-16T10:01:27Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -176,9 +176,14 @@\n  */\n public class TypeChecker extends BLangNodeVisitor {\n \n-    private static final CompilerContext.Key<TypeChecker> TYPE_CHECKER_KEY =\n-            new CompilerContext.Key<>();\n+    private static final CompilerContext.Key<TypeChecker> TYPE_CHECKER_KEY = new CompilerContext.Key<>();\n+    private static Set<String> modifierFunctions = new HashSet<>();\n+\n     private static final String TABLE_TNAME = \"table\";\n+    private static final String FUNCTION_PUSH_NAME = \"push\";\n+    private static final String FUNCTION_POP_NAME = \"pop\";\n+    private static final String FUNCTION_SHIFT_NAME = \"shift\";\n+    private static final String FUNCTION_UNSHIFT_NAME = \"unshift\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODgyMg=="}, "originalCommit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjcwODE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyOTo1NFrOGFqU_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToyOTo1NFrOGFqU_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4OTU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              cannot call ''{0}'' on tuple of type ''{1}'': change inherent shape\n          \n          \n            \n              cannot call ''{0}'' on tuple(s) of type ''{1}''; cannot violate inherent type", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r408589565", "createdAt": "2020-04-15T05:29:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1237,3 +1237,9 @@ error.deprecated.parameters.documentation.not.allowed=\\\n \n error.invalid.attribute.reference=\\\n   invalid attribute reference\n+\n+error.illegal.function.change.list.size=\\\n+  cannot call ''{0}'' on fixed length list(s) of type ''{1}''\n+\n+error.illegal.function.change.tuple.shape=\\\n+  cannot call ''{0}'' on tuple of type ''{1}'': change inherent shape", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjc3Mzc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjowMjozN1rOGFq7xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDowMDo1M1rOGGd51w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTQ5Mg==", "bodyText": "What about unions of tuples?\nThis should be an error for tuple unions which will always fail too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r408599492", "createdAt": "2020-04-15T06:02:37Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1695,7 +1707,60 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n         }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.TUPLE) && hasDifferentTypeThanRest((BTupleType) varRefType) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzNDU4Mw==", "bodyText": "Done\n2fe86c1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r409434583", "createdAt": "2020-04-16T10:00:53Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1695,7 +1707,60 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n         }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.TUPLE) && hasDifferentTypeThanRest((BTupleType) varRefType) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTQ5Mg=="}, "originalCommit": {"oid": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0OTg3MjEzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTozNToyOFrOGHngEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTozNToyOFrOGHngEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0MDQwMQ==", "bodyText": "We can return here right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r410640401", "createdAt": "2020-04-18T05:35:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1710,7 +1722,80 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0OTk0MDk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTo1NTozM1rOGHn-lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTo1NTozM1rOGHn-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0ODIxMg==", "bodyText": "Shall we extract this tuple check logic to a function like isShiftOnIncompatibleTuples and handle both individual tuples and unions?\nThen we can do\nif (isShiftOnIncompatibleTuples(varRefType, invocationName)) {\n      dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n                 varRefType);\n      resultType = symTable.semanticError;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r410648212", "createdAt": "2020-04-18T05:55:33Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1710,7 +1722,80 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.TUPLE) && hasDifferentTypeThanRest((BTupleType) varRefType) &&\n+                (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n+                       varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.UNION) && (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0)) {\n+            BUnionType unionVarRef = (BUnionType) varRefType;\n+            boolean allTuplesHasFixedShape = true;\n+            for (BType member : unionVarRef.getMemberTypes()) {\n+                if (member.tag != TypeTags.TUPLE) {\n+                    break;\n+                }\n+                if (!hasDifferentTypeThanRest((BTupleType) varRefType)) {\n+                    allTuplesHasFixedShape = false;\n+                    break;\n+                }\n+            }\n+            if (allTuplesHasFixedShape) {\n+                dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n+                           varRefType);\n+                resultType = symTable.semanticError;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0OTk0MTYyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTo1NTo0OFrOGHn-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTo1NTo0OFrOGHn-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0ODI4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              cannot call ''{0}'' on tuple(s) of type ''{1}''; cannot violate inherent type\n          \n          \n            \n              cannot call ''{0}'' on tuple(s) of type ''{1}'': cannot violate inherent type", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r410648280", "createdAt": "2020-04-18T05:55:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1243,3 +1243,9 @@ error.deprecated.parameters.documentation.not.allowed=\\\n \n error.invalid.attribute.reference=\\\n   invalid attribute reference\n+\n+error.illegal.function.change.list.size=\\\n+  cannot call ''{0}'' on fixed length list(s) of type ''{1}''\n+\n+error.illegal.function.change.tuple.shape=\\\n+  cannot call ''{0}'' on tuple(s) of type ''{1}''; cannot violate inherent type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDAzOTA5OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo1MDowN1rOGIFpcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo1MDowN1rOGIFpcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzNDMyMQ==", "bodyText": "may change the error message in the future.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r411134321", "createdAt": "2020-04-20T06:50:07Z", "author": {"login": "KRVPerera"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "diffHunk": "@@ -513,6 +513,25 @@ function testInvalidPushOnUnionOfSameBasicType() {\n     assertValueEquality(\"incompatible types: expected 'int', found 'string'\", err.detail()?.message);\n }\n \n+function testShiftOperation() {\n+    testShiftOnTupleWithoutValuesForRestParameter();\n+}\n+\n+function testShiftOnTupleWithoutValuesForRestParameter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cb9ab44b3c92610eb1049865be003fec253a28"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUzNjE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxODoxNVrOGIcpiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxODoxNVrOGIcpiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTE3OQ==", "bodyText": "When we are fixing #22771, I think we should refactor checkIllegalStorageSizeChangeMethodCall and this method a bit.\nAt L1873 if the invocationName is shift we can call something like\nprivate boolean isShiftValidOnLists(BType varRefType) {\n     int tag = varRefType.tag;\n\n     if (tag == TypeTags.ARRAY) {\n         return !isFixedLengthList(varRefType);\n     }\n\n     if (tag == TypeTags.TUPLE) {\n         return !hasDifferentTypeThanRest((BTupleType) member);\n     }\n\n     // Union type here.\n    BUnionType unionVarRef = (BUnionType) varRefType;\n    for (BType member : unionVarRef.getMemberTypes()) {\n        if (!isShiftValidOnLists(member)) {\n            return false;\n        }\n    }\n    return true;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r411511179", "createdAt": "2020-04-20T16:18:15Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1821,7 +1833,86 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        if (isShiftOnIncompatibleTuples(varRefType, invocationName)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n+                       varRefType);\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private boolean isShiftOnIncompatibleTuples(BType varRefType, String invocationName) {\n+        if ((varRefType.tag == TypeTags.TUPLE) && (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0) &&\n+                hasDifferentTypeThanRest((BTupleType) varRefType)) {\n+            return true;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.UNION) && (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0)) {\n+            BUnionType unionVarRef = (BUnionType) varRefType;\n+            boolean allMemberAreFixedShapeTuples = true;\n+            for (BType member : unionVarRef.getMemberTypes()) {\n+                if (member.tag != TypeTags.TUPLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11389a44fff652021235ea9f10b38c64ba5ed71"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4452, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}