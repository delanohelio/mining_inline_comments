{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MTQ2MjMw", "number": 24927, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNToyODozMFrOESqD3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo0NToxMFrOESvJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTk4OTQwOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/test/resources/test-resources/valid-project/src/mytemplate/tests/main_test.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNToyODozMFrOG39Kjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNTo1OTo0MFrOG39xzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMyNjk5MQ==", "bodyText": "Better to add a new line at the end there are some more files you need to fix.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24927#discussion_r461326991", "createdAt": "2020-07-28T05:28:30Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-packerina/src/test/resources/test-resources/valid-project/src/mytemplate/tests/main_test.bal", "diffHunk": "@@ -33,7 +33,7 @@ function afterFunc () {\n \n # After Suite Function\n \n-@test:AfterSuite\n+@test:AfterSuite {}\n function afterSuiteFunc () {\n     io:println(\"I'm the after suite function!\");\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba67614b4d2e3fba1404b985e02e5984713fdea8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMzNzAzNw==", "bodyText": "Added to necessary files in f6db6be", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24927#discussion_r461337037", "createdAt": "2020-07-28T05:59:40Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/test/resources/test-resources/valid-project/src/mytemplate/tests/main_test.bal", "diffHunk": "@@ -33,7 +33,7 @@ function afterFunc () {\n \n # After Suite Function\n \n-@test:AfterSuite\n+@test:AfterSuite {}\n function afterSuiteFunc () {\n     io:println(\"I'm the after suite function!\");\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMyNjk5MQ=="}, "originalCommit": {"oid": "ba67614b4d2e3fba1404b985e02e5984713fdea8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDgxNDU2OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo0MzoxM1rOG4FAZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzozOTowMlrOG4sW_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1NTQ2Mg==", "bodyText": "Instead of instanceof can we check the node kind? i.e. attachmentNode.getExpression().getKind() == NodeKind.RECORD_LITERAL_EXP", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24927#discussion_r461455462", "createdAt": "2020-07-28T09:43:13Z", "author": {"login": "anupama-pathirage"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -148,7 +149,22 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n             if (BEFORE_SUITE_ANNOTATION_NAME.equals(annotationName)) {\n                 suite.addBeforeSuiteFunction(functionName);\n             } else if (AFTER_SUITE_ANNOTATION_NAME.equals(annotationName)) {\n-                suite.addAfterSuiteFunction(functionName);\n+                AtomicBoolean alwaysRun = new AtomicBoolean(false);\n+                if (attachmentNode.getExpression() instanceof BLangRecordLiteral) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6db6befef8716d1b1ee73a377f41b6f2a9145ee"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwMDIyMA==", "bodyText": "Fixed in f9d41bc", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24927#discussion_r462100220", "createdAt": "2020-07-29T07:39:02Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -148,7 +149,22 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n             if (BEFORE_SUITE_ANNOTATION_NAME.equals(annotationName)) {\n                 suite.addBeforeSuiteFunction(functionName);\n             } else if (AFTER_SUITE_ANNOTATION_NAME.equals(annotationName)) {\n-                suite.addAfterSuiteFunction(functionName);\n+                AtomicBoolean alwaysRun = new AtomicBoolean(false);\n+                if (attachmentNode.getExpression() instanceof BLangRecordLiteral) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1NTQ2Mg=="}, "originalCommit": {"oid": "f6db6befef8716d1b1ee73a377f41b6f2a9145ee"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDgyMTg3OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/BTestRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTo0NToxMFrOG4FE9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzozODozNFrOG4sWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1NjYzMA==", "bodyText": "Shall we have a more meaningful variable name here or simply avoid 2 at the end?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24927#discussion_r461456630", "createdAt": "2020-07-28T09:45:10Z", "author": {"login": "anupama-pathirage"}, "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/BTestRunner.java", "diffHunk": "@@ -406,41 +411,53 @@ private void executeFunction(Test test, TestSuite suite, String packageName, Cla\n         }\n     }\n \n-    private void executeAfterFunction(Test test, TestSuite suite, ClassLoader classLoader, Scheduler scheduler)  {\n-        try {\n-            if (test.getAfterTestFunction() != null) {\n-                invokeTestFunction(suite, test.getAfterTestFunction(), classLoader, scheduler);\n+    private void executeAfterFunction(Test test, TestSuite suite, ClassLoader classLoader, Scheduler scheduler,\n+                                      AtomicBoolean shouldSkip, AtomicBoolean shouldSkipTest,\n+                                      List<String> failedAfterFuncTests)  {\n+        if (!shouldSkip.get() && !shouldSkipTest.get()) {\n+            try {\n+                if (test.getAfterTestFunction() != null) {\n+                    invokeTestFunction(suite, test.getAfterTestFunction(), classLoader, scheduler);\n+                }\n+            } catch (Throwable e) {\n+                failedAfterFuncTests.add(test.getTestName());\n+                String error = String.format(\"\\t[fail] \" + test + \" [after test function for the test %s] :\\n\\t    %s\",\n+                        test, formatErrorMessage(e));\n+                errStream.println(error);\n             }\n-        } catch (Throwable e) {\n-            String error = String.format(\"\\t[fail] \" + test + \" [after test function for the test %s] :\\n\\t    %s\",\n-                                  test, formatErrorMessage(e));\n-            errStream.println(error);\n         }\n     }\n \n-    private void executeAfterEachFunction(Test test, TestSuite suite, ClassLoader classLoader, Scheduler scheduler) {\n-        suite.getAfterEachFunctionNames().forEach(afterEachTest -> {\n-            String errorMsg2;\n-            try {\n-                invokeTestFunction(suite, afterEachTest, classLoader, scheduler);\n-            } catch (Throwable e) {\n-                errorMsg2 = String.format(\"\\t[fail] \" + afterEachTest +\n-                                                  \" [after each test function for the test %s] :\\n\\t    %s\",\n-                                          test, formatErrorMessage(e));\n-                errStream.println(errorMsg2);\n-            }\n-        });\n+    private void executeAfterEachFunction(Test test, TestSuite suite, ClassLoader classLoader, Scheduler scheduler,\n+                                          AtomicBoolean shouldSkip, AtomicBoolean shouldSkipTest) {\n+        if (!shouldSkip.get() && !shouldSkipTest.get()) {\n+            suite.getAfterEachFunctionNames().forEach(afterEachTest -> {\n+                String errorMsg2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6db6befef8716d1b1ee73a377f41b6f2a9145ee"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5OTk3Nw==", "bodyText": "Fixed in f9d41bc", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24927#discussion_r462099977", "createdAt": "2020-07-29T07:38:34Z", "author": {"login": "azinneera"}, "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/BTestRunner.java", "diffHunk": "@@ -406,41 +411,53 @@ private void executeFunction(Test test, TestSuite suite, String packageName, Cla\n         }\n     }\n \n-    private void executeAfterFunction(Test test, TestSuite suite, ClassLoader classLoader, Scheduler scheduler)  {\n-        try {\n-            if (test.getAfterTestFunction() != null) {\n-                invokeTestFunction(suite, test.getAfterTestFunction(), classLoader, scheduler);\n+    private void executeAfterFunction(Test test, TestSuite suite, ClassLoader classLoader, Scheduler scheduler,\n+                                      AtomicBoolean shouldSkip, AtomicBoolean shouldSkipTest,\n+                                      List<String> failedAfterFuncTests)  {\n+        if (!shouldSkip.get() && !shouldSkipTest.get()) {\n+            try {\n+                if (test.getAfterTestFunction() != null) {\n+                    invokeTestFunction(suite, test.getAfterTestFunction(), classLoader, scheduler);\n+                }\n+            } catch (Throwable e) {\n+                failedAfterFuncTests.add(test.getTestName());\n+                String error = String.format(\"\\t[fail] \" + test + \" [after test function for the test %s] :\\n\\t    %s\",\n+                        test, formatErrorMessage(e));\n+                errStream.println(error);\n             }\n-        } catch (Throwable e) {\n-            String error = String.format(\"\\t[fail] \" + test + \" [after test function for the test %s] :\\n\\t    %s\",\n-                                  test, formatErrorMessage(e));\n-            errStream.println(error);\n         }\n     }\n \n-    private void executeAfterEachFunction(Test test, TestSuite suite, ClassLoader classLoader, Scheduler scheduler) {\n-        suite.getAfterEachFunctionNames().forEach(afterEachTest -> {\n-            String errorMsg2;\n-            try {\n-                invokeTestFunction(suite, afterEachTest, classLoader, scheduler);\n-            } catch (Throwable e) {\n-                errorMsg2 = String.format(\"\\t[fail] \" + afterEachTest +\n-                                                  \" [after each test function for the test %s] :\\n\\t    %s\",\n-                                          test, formatErrorMessage(e));\n-                errStream.println(errorMsg2);\n-            }\n-        });\n+    private void executeAfterEachFunction(Test test, TestSuite suite, ClassLoader classLoader, Scheduler scheduler,\n+                                          AtomicBoolean shouldSkip, AtomicBoolean shouldSkipTest) {\n+        if (!shouldSkip.get() && !shouldSkipTest.get()) {\n+            suite.getAfterEachFunctionNames().forEach(afterEachTest -> {\n+                String errorMsg2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1NjYzMA=="}, "originalCommit": {"oid": "f6db6befef8716d1b1ee73a377f41b6f2a9145ee"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 438, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}