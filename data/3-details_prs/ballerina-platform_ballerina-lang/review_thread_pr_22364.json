{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Nzk1NDE2", "number": 22364, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTozNToyMVrODtfiCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo0NjoxMFrODwGU2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI5MTMwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array_fill_runtime_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTozNToyMVrOF-8kxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODowODoyMFrOF_MkDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0ODQ4Nw==", "bodyText": "Do we have an issue to track this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401548487", "createdAt": "2020-04-01T11:35:21Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array_fill_runtime_test.bal", "diffHunk": "@@ -106,13 +106,28 @@ function testTwoDimensionalSealedArrayFill() {\n     }\n }\n \n+const FOO_ZERO = 0;\n+type FOO_FOUR_THREE  4 | 3;\n+type BarMultiple FOO_ZERO | 1 | FOO_FOUR_THREE;\n+function createMultipleConstLiteralAutoFilledSealedArray() {\n+    BarMultiple a = 1;\n+    BarMultiple[5] sealedArray = [a, a];\n+    sealedArray[3] = a;\n+    assertEqualPanic(1, sealedArray[0]);\n+    assertEqualPanic(1, sealedArray[1]);\n+    // TODO : enable this after fixing - does not get filled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1490a02551cc272f92c2020674c1d4931eec49"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxMDQ0NA==", "bodyText": "create one 22403", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401810444", "createdAt": "2020-04-01T18:08:20Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array_fill_runtime_test.bal", "diffHunk": "@@ -106,13 +106,28 @@ function testTwoDimensionalSealedArrayFill() {\n     }\n }\n \n+const FOO_ZERO = 0;\n+type FOO_FOUR_THREE  4 | 3;\n+type BarMultiple FOO_ZERO | 1 | FOO_FOUR_THREE;\n+function createMultipleConstLiteralAutoFilledSealedArray() {\n+    BarMultiple a = 1;\n+    BarMultiple[5] sealedArray = [a, a];\n+    sealedArray[3] = a;\n+    assertEqualPanic(1, sealedArray[0]);\n+    assertEqualPanic(1, sealedArray[1]);\n+    // TODO : enable this after fixing - does not get filled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0ODQ4Nw=="}, "originalCommit": {"oid": "bb1490a02551cc272f92c2020674c1d4931eec49"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDM1OTYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1NzoyNlrOF-9P8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0NjozOFrOF_G7wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1OTUzNg==", "bodyText": "Where do we do the check too see if the filler value is part of this type?\ne.g.,\nconst FOO = 1;\ntype Bar FOO | 2;\n\npublic function main() {\n    Bar[2] b = [];\n}\nDoes this result in an error?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401559536", "createdAt": "2020-04-01T11:57:26Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2904,14 +2904,35 @@ private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1490a02551cc272f92c2020674c1d4931eec49"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxODIxMA==", "bodyText": "fixed thanks. 41ae360", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401718210", "createdAt": "2020-04-01T15:46:38Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2904,14 +2904,35 @@ private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1OTUzNg=="}, "originalCommit": {"oid": "bb1490a02551cc272f92c2020674c1d4931eec49"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTYxMzUxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1MTo0MlrOF_Jpmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMzoyN1rOF_NGGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MjcxNA==", "bodyText": "I think we should rename this to hasFillerValue and isImplicitDefaultValue to isFillerValue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401762714", "createdAt": "2020-04-01T16:51:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,59 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ae36005fc63e09d9c63bcf6f14af7634f495f9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxOTE2Mg==", "bodyText": "We could change the parameter to Set<BLangExpression> instead to avoid ambiguity.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401819162", "createdAt": "2020-04-01T18:23:27Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,59 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MjcxNA=="}, "originalCommit": {"oid": "41ae36005fc63e09d9c63bcf6f14af7634f495f9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjE1NzM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOToxNjo1MlrOF_PALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOToxNjo1MlrOF_PALg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MDQxNA==", "bodyText": "Shouldn't this be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean valueTypePresent = false;\n          \n          \n            \n                    boolean finiteTypePresent = false;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401850414", "createdAt": "2020-04-01T19:16:52Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjE2NzE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOToxOTo0N1rOF_PGTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTozNDozN1rOF_PmLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MTk4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Set<BType> getUniqueValues(BFiniteType member) {\n          \n          \n            \n                private Set<BType> getValueTypes(Set<BLangExpression> valueSpace) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401851983", "createdAt": "2020-04-01T19:19:47Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;\n+        }\n+        return false;\n+    }\n+\n+    private Set<BType> getUniqueValues(BFiniteType member) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MDE0Mg==", "bodyText": "Since it's not really unique and we get the types.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401860142", "createdAt": "2020-04-01T19:34:37Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;\n+        }\n+        return false;\n+    }\n+\n+    private Set<BType> getUniqueValues(BFiniteType member) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MTk4Mw=="}, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjIxNzM5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTozNDoxNlrOF_PlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0MTo1OFrOF_hFyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1OTk2OA==", "bodyText": "Not sure if this is correct.\nConsider something like\nconst FOO = 1;\n\ntype Bar int|FOO; // We currently allow this\n\npublic function main() {\n    Bar[2] x = [];\n}\nDoes this work with the current logic?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401859968", "createdAt": "2020-04-01T19:34:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMDk2OQ==", "bodyText": "No working on this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r402030969", "createdAt": "2020-04-02T03:25:14Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1OTk2OA=="}, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0Njc2MQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r402146761", "createdAt": "2020-04-02T08:41:58Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1OTk2OA=="}, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjIyNTU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTozNjo1M1rOF_PqxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0MTo0NFrOF_hFHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MTMxNw==", "bodyText": "Is it correct to return false here?\nI don't think the following will work.\nimport ballerina/lang.'int;\n\npublic function main() {\n    ('int:Unsigned16|'int:Signed32)[2] x = [];\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401861317", "createdAt": "2020-04-01T19:36:53Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NjU4OA==", "bodyText": "Fixed by a88df61", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r402146588", "createdAt": "2020-04-02T08:41:44Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MTMxNw=="}, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzYxODgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo0NjoxMFrOGC6JjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzowMzowN1rOGFsXDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzA1Mw==", "bodyText": "@KRVPerera, @rdhananjaya did we clarify/follow up on the concerns we had regarding filler values for XML?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r405703053", "createdAt": "2020-04-08T17:46:10Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2842,6 +2842,14 @@ public boolean hasFillerValue(BType type) {\n                 BTupleType tupleType = (BTupleType) type;\n                 return tupleType.getTupleTypes().stream().allMatch(eleType -> hasFillerValue(eleType));\n             default:\n+                // filler value is 0\n+                if (TypeTags.isIntegerTypeTag(type.tag)) {\n+                    return true;\n+                }\n+                // TODO : clarify", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1ac4aa180aa3bfb06a84b9311f2d3968398f77"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzQxOA==", "bodyText": "We agreed to handle xml type for now. Shall we create a followup issue after clarification?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r406647418", "createdAt": "2020-04-10T07:51:48Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2842,6 +2842,14 @@ public boolean hasFillerValue(BType type) {\n                 BTupleType tupleType = (BTupleType) type;\n                 return tupleType.getTupleTypes().stream().allMatch(eleType -> hasFillerValue(eleType));\n             default:\n+                // filler value is 0\n+                if (TypeTags.isIntegerTypeTag(type.tag)) {\n+                    return true;\n+                }\n+                // TODO : clarify", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzA1Mw=="}, "originalCommit": {"oid": "ff1ac4aa180aa3bfb06a84b9311f2d3968398f77"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjg2MA==", "bodyText": "ballerina-platform/ballerina-spec#490", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r408622860", "createdAt": "2020-04-15T07:03:07Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2842,6 +2842,14 @@ public boolean hasFillerValue(BType type) {\n                 BTupleType tupleType = (BTupleType) type;\n                 return tupleType.getTupleTypes().stream().allMatch(eleType -> hasFillerValue(eleType));\n             default:\n+                // filler value is 0\n+                if (TypeTags.isIntegerTypeTag(type.tag)) {\n+                    return true;\n+                }\n+                // TODO : clarify", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzA1Mw=="}, "originalCommit": {"oid": "ff1ac4aa180aa3bfb06a84b9311f2d3968398f77"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4481, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}