{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNzA3NjIz", "number": 23478, "title": "Fix union types with finite types in transformer", "bodyText": "", "createdAt": "2020-05-25T11:41:53Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23478", "merged": true, "mergeCommit": {"oid": "d87ff844b6fe6ea13728ffeda7abf4f63762248f"}, "closed": true, "closedAt": "2020-05-26T09:43:40Z", "author": {"login": "manuranga"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckuu-hABqjMzNjk5Nzk2OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclBdpXAFqTQxODEzNjM4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebd4ea989fd2509ca6da636ae5412676e04455e9", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ebd4ea989fd2509ca6da636ae5412676e04455e9", "committedDate": "2020-05-25T11:36:59Z", "message": "Fix union types with finite types in transformer"}, "afterCommit": {"oid": "bb6b899068892fa0cfbbc9e0bea9b69f919c6965", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bb6b899068892fa0cfbbc9e0bea9b69f919c6965", "committedDate": "2020-05-25T11:54:06Z", "message": "Fix union types with finite types in transformer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb6b899068892fa0cfbbc9e0bea9b69f919c6965", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bb6b899068892fa0cfbbc9e0bea9b69f919c6965", "committedDate": "2020-05-25T11:54:06Z", "message": "Fix union types with finite types in transformer"}, "afterCommit": {"oid": "9b15b9564699314e8e4b64a4b0c327de68cad35f", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b15b9564699314e8e4b64a4b0c327de68cad35f", "committedDate": "2020-05-25T14:47:05Z", "message": "Fix union types with finite types in transformer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6defeb567dbd2d8538fdf81f8b0f00c503bd3ad3", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6defeb567dbd2d8538fdf81f8b0f00c503bd3ad3", "committedDate": "2020-05-26T05:25:05Z", "message": "Fix union types with finite types in transformer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b15b9564699314e8e4b64a4b0c327de68cad35f", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b15b9564699314e8e4b64a4b0c327de68cad35f", "committedDate": "2020-05-25T14:47:05Z", "message": "Fix union types with finite types in transformer"}, "afterCommit": {"oid": "6defeb567dbd2d8538fdf81f8b0f00c503bd3ad3", "author": {"user": {"login": "manuranga", "name": "manuranga perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6defeb567dbd2d8538fdf81f8b0f00c503bd3ad3", "committedDate": "2020-05-26T05:25:05Z", "message": "Fix union types with finite types in transformer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTI0MTk4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23478#pullrequestreview-418124198", "createdAt": "2020-05-26T09:27:29Z", "commit": {"oid": "6defeb567dbd2d8538fdf81f8b0f00c503bd3ad3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOToyNzoyOVrOGaWFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOToyNzoyOVrOGaWFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Nzk1Mw==", "bodyText": "If you wan't to add another top-level node can achieve with additionalTopLevelNodes.add(bLTypeDef), these nodes will be added to current compilation unit in here or here. The idea is if someone started transformation from modulePart, they will get the compilation unit with additional top level nodes. if someone just wanted to tranform a inner node; still possible with accept() method(and might result a list of BLang nodes).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23478#discussion_r430277953", "createdAt": "2020-05-26T09:27:29Z", "author": {"login": "rasika"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -466,10 +470,91 @@ public BLangNode transform(TypeDefinitionNode typeDefNode) {\n \n     @Override\n     public BLangNode transform(UnionTypeDescriptorNode unionTypeDescriptorNode) {\n-        BLangType rhsTypeNode = createTypeNode(unionTypeDescriptorNode.rightTypeDesc());\n-        BLangType lhsTypeNode = createTypeNode(unionTypeDescriptorNode.leftTypeDesc());\n+        List<TypeDescriptorNode> nodes = flattenUnionType(unionTypeDescriptorNode);\n+\n+        List<TypeDescriptorNode> finiteTypeElements = new ArrayList<>();\n+        List<List<TypeDescriptorNode>> unionTypeElementsCollection = new ArrayList<>();\n+        for (TypeDescriptorNode type : nodes) {\n+            if (type.kind() == SyntaxKind.SINGLETON_TYPE_DESC) {\n+                finiteTypeElements.add(type);\n+                unionTypeElementsCollection.add(new ArrayList<>());\n+            } else {\n+                List<TypeDescriptorNode> lastOfOthers;\n+                if (unionTypeElementsCollection.isEmpty()) {\n+                    lastOfOthers = new ArrayList<>();\n+                    unionTypeElementsCollection.add(lastOfOthers);\n+                } else {\n+                    lastOfOthers = unionTypeElementsCollection.get(unionTypeElementsCollection.size() - 1);\n+                }\n+\n+                lastOfOthers.add(type);\n+            }\n+        }\n+\n+        List<TypeDescriptorNode> unionElements = new ArrayList<>();\n+        reverseFlatMap(unionTypeElementsCollection, unionElements);\n+\n+        BLangFiniteTypeNode bLangFiniteTypeNode = (BLangFiniteTypeNode) TreeBuilder.createFiniteTypeNode();\n+        for (TypeDescriptorNode finiteTypeEl : finiteTypeElements) {\n+            SingletonTypeDescriptorNode singletonTypeNode = (SingletonTypeDescriptorNode) finiteTypeEl;\n+            BLangLiteral literal = createSimpleLiteral(singletonTypeNode.simpleContExprNode());\n+            bLangFiniteTypeNode.addValue(literal);\n+        }\n+\n+        if (unionElements.isEmpty()) {\n+            return bLangFiniteTypeNode;\n+        }\n \n-        return addUnionType(lhsTypeNode, rhsTypeNode, getPosition(unionTypeDescriptorNode));\n+        BLangUnionTypeNode unionTypeNode = (BLangUnionTypeNode) TreeBuilder.createUnionTypeNode();\n+        for (TypeDescriptorNode unionElement : unionElements) {\n+            unionTypeNode.memberTypeNodes.add(createTypeNode(unionElement));\n+        }\n+\n+        if (!finiteTypeElements.isEmpty()) {\n+            unionTypeNode.memberTypeNodes.add(deSugarFiniteTypeAsUserDefType(bLangFiniteTypeNode));\n+        }\n+        return unionTypeNode;\n+    }\n+\n+    private List<TypeDescriptorNode> flattenUnionType(UnionTypeDescriptorNode unionTypeDescriptorNode) {\n+        List<TypeDescriptorNode> list = new ArrayList<>();\n+        list.add(unionTypeDescriptorNode.leftTypeDesc());\n+        while (unionTypeDescriptorNode.rightTypeDesc().kind() == SyntaxKind.UNION_TYPE_DESC) {\n+            unionTypeDescriptorNode = (UnionTypeDescriptorNode) unionTypeDescriptorNode.rightTypeDesc();\n+            list.add(unionTypeDescriptorNode.leftTypeDesc());\n+        }\n+        list.add(unionTypeDescriptorNode.rightTypeDesc());\n+        return list;\n+    }\n+\n+    private <T> void reverseFlatMap(List<List<T>> listOfLists, List<T> result) {\n+        for (int i = listOfLists.size() - 1; i >= 0; i--) {\n+            result.addAll(listOfLists.get(i));\n+        }\n+    }\n+\n+    private BLangUserDefinedType deSugarFiniteTypeAsUserDefType(BLangFiniteTypeNode toIndirect) {\n+        DiagnosticPos pos = toIndirect.pos;\n+        BLangUserDefinedType bLUserDefinedType;\n+        BLangTypeDefinition bLTypeDef = (BLangTypeDefinition) TreeBuilder.createTypeDefinition();\n+\n+        // Generate a name for the anonymous object\n+        String genName = anonymousModelHelper.getNextAnonymousTypeKey(diagnosticSource.pkgID);\n+        IdentifierNode anonTypeGenName = createIdentifier(pos, genName);\n+        bLTypeDef.setName(anonTypeGenName);\n+        bLTypeDef.flagSet.add(Flag.PUBLIC);\n+        bLTypeDef.flagSet.add(Flag.ANONYMOUS);\n+\n+        bLTypeDef.typeNode = toIndirect;\n+        bLTypeDef.pos = pos;\n+        currentCompilationUnit.addTopLevelNode(bLTypeDef);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6defeb567dbd2d8538fdf81f8b0f00c503bd3ad3"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTM2Mzgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23478#pullrequestreview-418136383", "createdAt": "2020-05-26T09:43:34Z", "commit": {"oid": "6defeb567dbd2d8538fdf81f8b0f00c503bd3ad3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4542, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}