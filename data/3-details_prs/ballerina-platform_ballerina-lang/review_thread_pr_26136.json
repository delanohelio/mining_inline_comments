{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MDM5Njgy", "number": 26136, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODowNjowOFrOEo6ojQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo0OTozOFrOEo-ZSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzM5MTQ5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODowNjowOFrOHaR9Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODowNzoyOFrOHaSAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxOTIwMg==", "bodyText": "Shall we remove this commented code", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497319202", "createdAt": "2020-09-30T08:06:08Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1031,125 +1028,131 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addFinalQualifier(objFieldNode.finalKeyword(), simpleVar);\n-        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n-        return simpleVar;\n-    }\n-\n-    @Override\n-    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-    }\n-\n-    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-        // Any Service can be represented in two major components.\n-        //  1) A anonymous type node (Object)\n-        //  2) Variable assignment with \"serviceName\".\n-        //      This is a global variable if the service is defined in module level.\n-        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-        ServiceDeclarationNode serviceDeclrNode = null;\n-        ServiceConstructorExpressionNode serviceConstructorNode;\n-        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-        //TODO handle service.expression\n-        // TODO: Look for generify this into sepearte method for type as well\n-        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-\n-        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-        if (serviceNode instanceof ServiceDeclarationNode) {\n-            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-        }\n-        String serviceName;\n-        DiagnosticPos identifierPos;\n-        if (isAnonServiceValue || serviceNameNode == null) {\n-            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-            identifierPos = pos;\n-        } else {\n-            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-            } else {\n-                serviceName = serviceNameNode.text();\n-            }\n-            identifierPos = getPosition(serviceNameNode);\n-        }\n-\n-        String serviceTypeName =\n-                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-        serviceVar.pos = identifierPos;\n-        bLService.setName(serviceVar);\n-        if (!isAnonServiceValue) {\n-            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-            for (Node expr : serviceDeclrNode.expressions()) {\n-                bLService.attachedExprs.add(createExpression(expr));\n+        NodeList<Token> qualifierList = objFieldNode.qualifierList();\n+        for (Token token : qualifierList) {\n+            if (token.kind() == SyntaxKind.FINAL_KEYWORD) {\n+                addFinalQualifier(token, simpleVar);\n             }\n         }\n \n-        if (isAnonServiceValue) {\n-            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-        } else {\n-            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-        }\n-\n-        // We add all service nodes to top level, only for future reference.\n-        addToTop(bLService);\n-\n-        // 1) Define type nodeDefinition for service type.\n-        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-        serviceTypeID.pos = pos;\n-        classDef.setName(serviceTypeID);\n-        classDef.flagSet.add(SERVICE);\n-\n-        if (!isAnonServiceValue) {\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-            bLService.markdownDocumentationAttachment =\n-                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-        } else {\n-            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-        }\n-\n-        classDef.pos = pos;\n-        addToTop(classDef);\n-        bLService.serviceClass = classDef;\n-\n-        // 2) Create service constructor.\n-        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-                .createServiceConstructorNode();\n-        serviceConstNode.serviceNode = bLService;\n-        serviceConstNode.pos = pos;\n-\n-        // Crate Global variable for service.\n-        bLService.pos = pos;\n-        if (!isAnonServiceValue) {\n-            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-                    Collections.emptySet(),\n-                    serviceName, identifierPos,\n-                    serviceConstNode);\n-            var.flagSet.add(Flag.FINAL);\n-            var.flagSet.add(SERVICE);\n-\n-            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-            bLUserDefinedType.typeName = classDef.name;\n-            bLUserDefinedType.pos = pos;\n-\n-            var.typeNode = bLUserDefinedType;\n-            bLService.variableNode = var;\n-            return var;\n-        } else {\n-            BLangServiceConstructorExpr serviceConstructorExpr =\n-                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-            serviceConstructorExpr.serviceNode = bLService;\n-            return serviceConstructorExpr;\n-        }\n+        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n+        return simpleVar;\n     }\n \n+//    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxOTk3OQ==", "bodyText": "sure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497319979", "createdAt": "2020-09-30T08:07:28Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1031,125 +1028,131 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addFinalQualifier(objFieldNode.finalKeyword(), simpleVar);\n-        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n-        return simpleVar;\n-    }\n-\n-    @Override\n-    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-    }\n-\n-    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-        // Any Service can be represented in two major components.\n-        //  1) A anonymous type node (Object)\n-        //  2) Variable assignment with \"serviceName\".\n-        //      This is a global variable if the service is defined in module level.\n-        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-        ServiceDeclarationNode serviceDeclrNode = null;\n-        ServiceConstructorExpressionNode serviceConstructorNode;\n-        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-        //TODO handle service.expression\n-        // TODO: Look for generify this into sepearte method for type as well\n-        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-\n-        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-        if (serviceNode instanceof ServiceDeclarationNode) {\n-            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-        }\n-        String serviceName;\n-        DiagnosticPos identifierPos;\n-        if (isAnonServiceValue || serviceNameNode == null) {\n-            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-            identifierPos = pos;\n-        } else {\n-            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-            } else {\n-                serviceName = serviceNameNode.text();\n-            }\n-            identifierPos = getPosition(serviceNameNode);\n-        }\n-\n-        String serviceTypeName =\n-                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-        serviceVar.pos = identifierPos;\n-        bLService.setName(serviceVar);\n-        if (!isAnonServiceValue) {\n-            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-            for (Node expr : serviceDeclrNode.expressions()) {\n-                bLService.attachedExprs.add(createExpression(expr));\n+        NodeList<Token> qualifierList = objFieldNode.qualifierList();\n+        for (Token token : qualifierList) {\n+            if (token.kind() == SyntaxKind.FINAL_KEYWORD) {\n+                addFinalQualifier(token, simpleVar);\n             }\n         }\n \n-        if (isAnonServiceValue) {\n-            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-        } else {\n-            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-        }\n-\n-        // We add all service nodes to top level, only for future reference.\n-        addToTop(bLService);\n-\n-        // 1) Define type nodeDefinition for service type.\n-        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-        serviceTypeID.pos = pos;\n-        classDef.setName(serviceTypeID);\n-        classDef.flagSet.add(SERVICE);\n-\n-        if (!isAnonServiceValue) {\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-            bLService.markdownDocumentationAttachment =\n-                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-        } else {\n-            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-        }\n-\n-        classDef.pos = pos;\n-        addToTop(classDef);\n-        bLService.serviceClass = classDef;\n-\n-        // 2) Create service constructor.\n-        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-                .createServiceConstructorNode();\n-        serviceConstNode.serviceNode = bLService;\n-        serviceConstNode.pos = pos;\n-\n-        // Crate Global variable for service.\n-        bLService.pos = pos;\n-        if (!isAnonServiceValue) {\n-            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-                    Collections.emptySet(),\n-                    serviceName, identifierPos,\n-                    serviceConstNode);\n-            var.flagSet.add(Flag.FINAL);\n-            var.flagSet.add(SERVICE);\n-\n-            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-            bLUserDefinedType.typeName = classDef.name;\n-            bLUserDefinedType.pos = pos;\n-\n-            var.typeNode = bLUserDefinedType;\n-            bLService.variableNode = var;\n-            return var;\n-        } else {\n-            BLangServiceConstructorExpr serviceConstructorExpr =\n-                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-            serviceConstructorExpr.serviceNode = bLService;\n-            return serviceConstructorExpr;\n-        }\n+        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n+        return simpleVar;\n     }\n \n+//    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxOTIwMg=="}, "originalCommit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzc5OTAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo0OToyN1rOHaV3lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDowMzo1N1rOHaWaHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzMxOQ==", "bodyText": "this looks like dead code, if so shall we remove it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497383319", "createdAt": "2020-09-30T09:49:27Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1031,125 +1028,131 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addFinalQualifier(objFieldNode.finalKeyword(), simpleVar);\n-        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n-        return simpleVar;\n-    }\n-\n-    @Override\n-    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-    }\n-\n-    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-        // Any Service can be represented in two major components.\n-        //  1) A anonymous type node (Object)\n-        //  2) Variable assignment with \"serviceName\".\n-        //      This is a global variable if the service is defined in module level.\n-        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-        ServiceDeclarationNode serviceDeclrNode = null;\n-        ServiceConstructorExpressionNode serviceConstructorNode;\n-        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-        //TODO handle service.expression\n-        // TODO: Look for generify this into sepearte method for type as well\n-        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-\n-        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-        if (serviceNode instanceof ServiceDeclarationNode) {\n-            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-        }\n-        String serviceName;\n-        DiagnosticPos identifierPos;\n-        if (isAnonServiceValue || serviceNameNode == null) {\n-            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-            identifierPos = pos;\n-        } else {\n-            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-            } else {\n-                serviceName = serviceNameNode.text();\n-            }\n-            identifierPos = getPosition(serviceNameNode);\n-        }\n-\n-        String serviceTypeName =\n-                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-        serviceVar.pos = identifierPos;\n-        bLService.setName(serviceVar);\n-        if (!isAnonServiceValue) {\n-            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-            for (Node expr : serviceDeclrNode.expressions()) {\n-                bLService.attachedExprs.add(createExpression(expr));\n+        NodeList<Token> qualifierList = objFieldNode.qualifierList();\n+        for (Token token : qualifierList) {\n+            if (token.kind() == SyntaxKind.FINAL_KEYWORD) {\n+                addFinalQualifier(token, simpleVar);\n             }\n         }\n \n-        if (isAnonServiceValue) {\n-            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-        } else {\n-            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-        }\n-\n-        // We add all service nodes to top level, only for future reference.\n-        addToTop(bLService);\n-\n-        // 1) Define type nodeDefinition for service type.\n-        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-        serviceTypeID.pos = pos;\n-        classDef.setName(serviceTypeID);\n-        classDef.flagSet.add(SERVICE);\n-\n-        if (!isAnonServiceValue) {\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-            bLService.markdownDocumentationAttachment =\n-                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-        } else {\n-            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-        }\n-\n-        classDef.pos = pos;\n-        addToTop(classDef);\n-        bLService.serviceClass = classDef;\n-\n-        // 2) Create service constructor.\n-        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-                .createServiceConstructorNode();\n-        serviceConstNode.serviceNode = bLService;\n-        serviceConstNode.pos = pos;\n-\n-        // Crate Global variable for service.\n-        bLService.pos = pos;\n-        if (!isAnonServiceValue) {\n-            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-                    Collections.emptySet(),\n-                    serviceName, identifierPos,\n-                    serviceConstNode);\n-            var.flagSet.add(Flag.FINAL);\n-            var.flagSet.add(SERVICE);\n-\n-            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-            bLUserDefinedType.typeName = classDef.name;\n-            bLUserDefinedType.pos = pos;\n-\n-            var.typeNode = bLUserDefinedType;\n-            bLService.variableNode = var;\n-            return var;\n-        } else {\n-            BLangServiceConstructorExpr serviceConstructorExpr =\n-                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-            serviceConstructorExpr.serviceNode = bLService;\n-            return serviceConstructorExpr;\n-        }\n+        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n+        return simpleVar;\n     }\n \n+//    @Override\n+//    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n+//        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n+//    }\n+\n+//    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n+//        // Any Service can be represented in two major components.\n+//        //  1) A anonymous type node (Object)\n+//        //  2) Variable assignment with \"serviceName\".\n+//        //      This is a global variable if the service is defined in module level.\n+//        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n+//        ServiceDeclarationNode serviceDeclrNode = null;\n+//        ServiceConstructorExpressionNode serviceConstructorNode;\n+//        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n+//        //TODO handle service.expression\n+//        // TODO: Look for generify this into sepearte method for type as well\n+//        bLService.isAnonymousServiceValue = isAnonServiceValue;\n+//\n+//        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n+//        if (serviceNode instanceof ServiceDeclarationNode) {\n+//            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n+//        }\n+//        String serviceName;\n+//        DiagnosticPos identifierPos;\n+//        if (isAnonServiceValue || serviceNameNode == null) {\n+//            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n+//            identifierPos = pos;\n+//        } else {\n+//            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n+//                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n+//            } else {\n+//                serviceName = serviceNameNode.text();\n+//            }\n+//            identifierPos = getPosition(serviceNameNode);\n+//        }\n+//\n+//        String serviceTypeName =\n+//                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n+//        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n+//        serviceVar.pos = identifierPos;\n+//        bLService.setName(serviceVar);\n+//        if (!isAnonServiceValue) {\n+//            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n+//            for (Node expr : serviceDeclrNode.expressions()) {\n+//                bLService.attachedExprs.add(createExpression(expr));\n+//            }\n+//        }\n+//\n+//        if (isAnonServiceValue) {\n+//            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n+//        } else {\n+//            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n+//        }\n+//\n+//        // We add all service nodes to top level, only for future reference.\n+//        addToTop(bLService);\n+//\n+//        // 1) Define type nodeDefinition for service type.\n+//        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n+//        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n+//        serviceTypeID.pos = pos;\n+//        classDef.setName(serviceTypeID);\n+//        classDef.flagSet.add(SERVICE);\n+//\n+//        if (!isAnonServiceValue) {\n+//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n+//            bLService.markdownDocumentationAttachment =\n+//                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n+//        } else {\n+//            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n+//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n+//            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n+//        }\n+//\n+//        classDef.pos = pos;\n+//        addToTop(classDef);\n+//        bLService.serviceClass = classDef;\n+//\n+//        // 2) Create service constructor.\n+//        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n+//                .createServiceConstructorNode();\n+//        serviceConstNode.serviceNode = bLService;\n+//        serviceConstNode.pos = pos;\n+//\n+//        // Crate Global variable for service.\n+//        bLService.pos = pos;\n+//        if (!isAnonServiceValue) {\n+//            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n+//                    Collections.emptySet(),\n+//                    serviceName, identifierPos,\n+//                    serviceConstNode);\n+//            var.flagSet.add(Flag.FINAL);\n+//            var.flagSet.add(SERVICE);\n+//\n+//            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n+//            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n+//            bLUserDefinedType.typeName = classDef.name;\n+//            bLUserDefinedType.pos = pos;\n+//\n+//            var.typeNode = bLUserDefinedType;\n+//            bLService.variableNode = var;\n+//            return var;\n+//        } else {\n+//            BLangServiceConstructorExpr serviceConstructorExpr =\n+//                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n+//            serviceConstructorExpr.serviceNode = bLService;\n+//            return serviceConstructorExpr;\n+//        }\n+//    }\n+\n     public void addServiceConstructsToClassDefinition(ServiceBodyNode serviceBodyNode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5MjE1Nw==", "bodyText": "yea. will remove. thanks", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497392157", "createdAt": "2020-09-30T10:03:57Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1031,125 +1028,131 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addFinalQualifier(objFieldNode.finalKeyword(), simpleVar);\n-        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n-        return simpleVar;\n-    }\n-\n-    @Override\n-    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n-        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n-    }\n-\n-    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n-        // Any Service can be represented in two major components.\n-        //  1) A anonymous type node (Object)\n-        //  2) Variable assignment with \"serviceName\".\n-        //      This is a global variable if the service is defined in module level.\n-        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n-        ServiceDeclarationNode serviceDeclrNode = null;\n-        ServiceConstructorExpressionNode serviceConstructorNode;\n-        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n-        //TODO handle service.expression\n-        // TODO: Look for generify this into sepearte method for type as well\n-        bLService.isAnonymousServiceValue = isAnonServiceValue;\n-\n-        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n-        if (serviceNode instanceof ServiceDeclarationNode) {\n-            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n-        }\n-        String serviceName;\n-        DiagnosticPos identifierPos;\n-        if (isAnonServiceValue || serviceNameNode == null) {\n-            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n-            identifierPos = pos;\n-        } else {\n-            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n-                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n-            } else {\n-                serviceName = serviceNameNode.text();\n-            }\n-            identifierPos = getPosition(serviceNameNode);\n-        }\n-\n-        String serviceTypeName =\n-                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n-        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n-        serviceVar.pos = identifierPos;\n-        bLService.setName(serviceVar);\n-        if (!isAnonServiceValue) {\n-            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n-            for (Node expr : serviceDeclrNode.expressions()) {\n-                bLService.attachedExprs.add(createExpression(expr));\n+        NodeList<Token> qualifierList = objFieldNode.qualifierList();\n+        for (Token token : qualifierList) {\n+            if (token.kind() == SyntaxKind.FINAL_KEYWORD) {\n+                addFinalQualifier(token, simpleVar);\n             }\n         }\n \n-        if (isAnonServiceValue) {\n-            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n-        } else {\n-            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n-        }\n-\n-        // We add all service nodes to top level, only for future reference.\n-        addToTop(bLService);\n-\n-        // 1) Define type nodeDefinition for service type.\n-        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n-        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n-        serviceTypeID.pos = pos;\n-        classDef.setName(serviceTypeID);\n-        classDef.flagSet.add(SERVICE);\n-\n-        if (!isAnonServiceValue) {\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n-            bLService.markdownDocumentationAttachment =\n-                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n-        } else {\n-            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n-            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n-            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n-        }\n-\n-        classDef.pos = pos;\n-        addToTop(classDef);\n-        bLService.serviceClass = classDef;\n-\n-        // 2) Create service constructor.\n-        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n-                .createServiceConstructorNode();\n-        serviceConstNode.serviceNode = bLService;\n-        serviceConstNode.pos = pos;\n-\n-        // Crate Global variable for service.\n-        bLService.pos = pos;\n-        if (!isAnonServiceValue) {\n-            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n-                    Collections.emptySet(),\n-                    serviceName, identifierPos,\n-                    serviceConstNode);\n-            var.flagSet.add(Flag.FINAL);\n-            var.flagSet.add(SERVICE);\n-\n-            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n-            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n-            bLUserDefinedType.typeName = classDef.name;\n-            bLUserDefinedType.pos = pos;\n-\n-            var.typeNode = bLUserDefinedType;\n-            bLService.variableNode = var;\n-            return var;\n-        } else {\n-            BLangServiceConstructorExpr serviceConstructorExpr =\n-                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n-            serviceConstructorExpr.serviceNode = bLService;\n-            return serviceConstructorExpr;\n-        }\n+        simpleVar.pos = getPositionWithoutMetadata(objFieldNode);\n+        return simpleVar;\n     }\n \n+//    @Override\n+//    public BLangNode transform(ServiceDeclarationNode serviceDeclrNode) {\n+//        return createService(serviceDeclrNode, serviceDeclrNode.serviceName(), false);\n+//    }\n+\n+//    private BLangNode createService(Node serviceNode, IdentifierToken serviceNameNode, boolean isAnonServiceValue) {\n+//        // Any Service can be represented in two major components.\n+//        //  1) A anonymous type node (Object)\n+//        //  2) Variable assignment with \"serviceName\".\n+//        //      This is a global variable if the service is defined in module level.\n+//        //      Otherwise (isAnonServiceValue = true) it is a local variable definition, which is written by user.\n+//        ServiceDeclarationNode serviceDeclrNode = null;\n+//        ServiceConstructorExpressionNode serviceConstructorNode;\n+//        BLangService bLService = (BLangService) TreeBuilder.createServiceNode();\n+//        //TODO handle service.expression\n+//        // TODO: Look for generify this into sepearte method for type as well\n+//        bLService.isAnonymousServiceValue = isAnonServiceValue;\n+//\n+//        DiagnosticPos pos = getPositionWithoutMetadata(serviceNode);\n+//        if (serviceNode instanceof ServiceDeclarationNode) {\n+//            trimLeft(pos, getPosition(((ServiceDeclarationNode) serviceNode).serviceKeyword()));\n+//        }\n+//        String serviceName;\n+//        DiagnosticPos identifierPos;\n+//        if (isAnonServiceValue || serviceNameNode == null) {\n+//            serviceName = this.anonymousModelHelper.getNextAnonymousServiceVarKey(diagnosticSource.pkgID);\n+//            identifierPos = pos;\n+//        } else {\n+//            if (serviceNameNode == null || serviceNameNode.isMissing()) {\n+//                serviceName = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n+//            } else {\n+//                serviceName = serviceNameNode.text();\n+//            }\n+//            identifierPos = getPosition(serviceNameNode);\n+//        }\n+//\n+//        String serviceTypeName =\n+//                this.anonymousModelHelper.getNextAnonymousServiceTypeKey(diagnosticSource.pkgID, serviceName);\n+//        BLangIdentifier serviceVar = createIdentifier(identifierPos, serviceName);\n+//        serviceVar.pos = identifierPos;\n+//        bLService.setName(serviceVar);\n+//        if (!isAnonServiceValue) {\n+//            serviceDeclrNode = (ServiceDeclarationNode) serviceNode;\n+//            for (Node expr : serviceDeclrNode.expressions()) {\n+//                bLService.attachedExprs.add(createExpression(expr));\n+//            }\n+//        }\n+//\n+//        if (isAnonServiceValue) {\n+//            bLService.annAttachments = applyAll(((ServiceConstructorExpressionNode) serviceNode).annotations());\n+//        } else {\n+//            bLService.annAttachments = applyAll(getAnnotations(serviceDeclrNode.metadata()));\n+//        }\n+//\n+//        // We add all service nodes to top level, only for future reference.\n+//        addToTop(bLService);\n+//\n+//        // 1) Define type nodeDefinition for service type.\n+//        BLangClassDefinition classDef = (BLangClassDefinition) TreeBuilder.createClassDefNode();\n+//        BLangIdentifier serviceTypeID = createIdentifier(identifierPos, serviceTypeName);\n+//        serviceTypeID.pos = pos;\n+//        classDef.setName(serviceTypeID);\n+//        classDef.flagSet.add(SERVICE);\n+//\n+//        if (!isAnonServiceValue) {\n+//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceDeclrNode.serviceBody(), classDef);\n+//            bLService.markdownDocumentationAttachment =\n+//                    createMarkdownDocumentationAttachment(getDocumentationString(serviceDeclrNode.metadata()));\n+//        } else {\n+//            serviceConstructorNode = (ServiceConstructorExpressionNode) serviceNode;\n+//            addServiceConstructsToClassDefinition((ServiceBodyNode) serviceConstructorNode.serviceBody(), classDef);\n+//            bLService.annAttachments = applyAll(serviceConstructorNode.annotations());\n+//        }\n+//\n+//        classDef.pos = pos;\n+//        addToTop(classDef);\n+//        bLService.serviceClass = classDef;\n+//\n+//        // 2) Create service constructor.\n+//        final BLangServiceConstructorExpr serviceConstNode = (BLangServiceConstructorExpr) TreeBuilder\n+//                .createServiceConstructorNode();\n+//        serviceConstNode.serviceNode = bLService;\n+//        serviceConstNode.pos = pos;\n+//\n+//        // Crate Global variable for service.\n+//        bLService.pos = pos;\n+//        if (!isAnonServiceValue) {\n+//            BLangSimpleVariable var = (BLangSimpleVariable) createBasicVarNodeWithoutType(identifierPos,\n+//                    Collections.emptySet(),\n+//                    serviceName, identifierPos,\n+//                    serviceConstNode);\n+//            var.flagSet.add(Flag.FINAL);\n+//            var.flagSet.add(SERVICE);\n+//\n+//            BLangUserDefinedType bLUserDefinedType = (BLangUserDefinedType) TreeBuilder.createUserDefinedTypeNode();\n+//            bLUserDefinedType.pkgAlias = (BLangIdentifier) TreeBuilder.createIdentifierNode();\n+//            bLUserDefinedType.typeName = classDef.name;\n+//            bLUserDefinedType.pos = pos;\n+//\n+//            var.typeNode = bLUserDefinedType;\n+//            bLService.variableNode = var;\n+//            return var;\n+//        } else {\n+//            BLangServiceConstructorExpr serviceConstructorExpr =\n+//                    (BLangServiceConstructorExpr) TreeBuilder.createServiceConstructorNode();\n+//            serviceConstructorExpr.serviceNode = bLService;\n+//            return serviceConstructorExpr;\n+//        }\n+//    }\n+\n     public void addServiceConstructsToClassDefinition(ServiceBodyNode serviceBodyNode,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzMxOQ=="}, "originalCommit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDAwNzc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo0OTozOFrOHaX4vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo0OTozOFrOHaX4vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxNjM4Mg==", "bodyText": "Please check if all messages removed here are removed from *message.properties files", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26136#discussion_r497416382", "createdAt": "2020-09-30T10:49:38Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/diagnostics/DiagnosticErrorCode.java", "diffHunk": "@@ -241,17 +241,12 @@\n     ERROR_ANNOTATIONS_ATTACHED_TO_EXPRESSION(\"BCE206\", \"error.annotations.attached.to.expression\"),\n     // Expression followed by the start keyword must be a func-call, a method-call or a remote-method-call\n     ERROR_INVALID_EXPRESSION_IN_START_ACTION(\"BCE207\", \"error.invalid.expression.in.start.action\"),\n-    // Cannot have the  same qualifier twice\n-    ERROR_DUPLICATE_OBJECT_TYPE_QUALIFIER(\"BCE208\", \"error.duplicate.object.type.qualifier\"),\n-    ERROR_DUPLICATE_CLASS_TYPE_QUALIFIER(\"BCE209\", \"error.duplicate.class.type.qualifier\"),\n-    ERROR_DUPLICATE_OBJECT_METHOD_QUALIFIER(\"BCE210\", \"error.duplicate.object.method.qualifier\"),\n-    ERROR_QUALIFIER_NOT_ALLOWED(\"BCE211\", \"error.qualifier.not.allowed\"),\n-    ERROR_ABSTRACT_QUALIFIER_NOT_ALLOWED_IN_OBJECT(\"BCE212\", \"error.abstract.qualifier.not.allowed.in.object\"),\n-    ERROR_READONLY_QUALIFIER_NOT_ALLOWED_IN_OBJECT(\"BCE213\", \"error.readonly.qualifier.not.allowed.in.object\"),\n+    // Cannot have the same qualifier twice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b28819ede00db3f3fe56ca345821963b85a6d79b"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4826, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}