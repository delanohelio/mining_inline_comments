{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDg3MjU4", "number": 21487, "title": "Block new strand generation within locks.", "bodyText": "Purpose\n\n$title\n\nThis PR will also disable --experimental tag checking for lock statement since from 1.2 lock statement is stabilized.\nFixes #21357\nFixes #21232\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-05T06:13:50Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487", "merged": true, "mergeCommit": {"oid": "45d256e387b4cc2f58405f43ef40a64b7700883c"}, "closed": true, "closedAt": "2020-03-10T15:14:41Z", "author": {"login": "dulvinw"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKssY9AFqTM2OTYxNzk2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMOq9XAFqTM3MTc3MTAwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NjE3OTYy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#pullrequestreview-369617962", "createdAt": "2020-03-05T14:34:44Z", "commit": {"oid": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDozNDo0NFrOFyV4Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo0OTozNFrOFyWdpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMTUzMQ==", "bodyText": "Shall we validate the error message also?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388331531", "createdAt": "2020-03-05T14:34:44Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/worker/WorkerTest.java", "diffHunk": "@@ -347,4 +348,16 @@ public void waitInReturn() {\n         Assert.assertEquals(mapResult.get(\"w1\").stringValue(), \"w1\");\n         Assert.assertEquals(mapResult.get(\"w2\").stringValue(), \"w2\");\n     }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class)\n+    public void testFunctionWithWorkerInsideLock() {\n+        BValue[] returns = BRunUtil.invoke(result, \"testPanicWorkerInsideLock\");\n+    }\n+\n+    @Test\n+    public void testWorkerInsideLock() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/workers/worker-in-lock.bal\");\n+        int index = 0;\n+        BAssertUtil.validateError(result, index++, 4, 20);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMjM5Ng==", "bodyText": "We can combine the checks right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (lock != null) {\n          \n          \n            \n                        if (!lock.isLockFree()) {\n          \n          \n            \n                    if (lock != null && !lock.isLockFree()) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388332396", "createdAt": "2020-03-05T14:36:03Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BLockStore.java", "diffHunk": "@@ -40,9 +40,18 @@ public void addLockToMap(String lockName) {\n         globalLockMap.put(lockName, new BLock());\n     }\n \n-    public synchronized BLock getLockFromMap(String lockName) {\n+    public BLock getLockFromMap(String lockName) {\n         return globalLockMap.computeIfAbsent(lockName, (k) -> {\n             return new BLock();\n         });\n     }\n+\n+    public void panicIfInLock(String lockName) {\n+        BLock lock = globalLockMap.get(lockName);\n+        if (lock != null) {\n+            if (!lock.isLockFree()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMzMzMg==", "bodyText": "This method is only called in BLockStore.java right? Shall we move the method there?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388333332", "createdAt": "2020-03-05T14:37:33Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaErrors.java", "diffHunk": "@@ -162,6 +163,10 @@ public static ErrorValue createNumericConversionError(Object inputValue, BType i\n                 RuntimeErrors.INCOMPATIBLE_SIMPLE_TYPE_CONVERT_OPERATION, inputType, inputValue, targetType));\n     }\n \n+    public static ErrorValue createAsyncCallInsideLockError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNDUyNQ==", "bodyText": "Shall we move this constant to BallerinaErrorReasons.java and prefix it with \"{ballerina}\"? (Check BallerinaErrorReasons for examples).\nAnd I guess we should suffix it with \"Error\"?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String ASYNC_CALL_INSIDE_LOCK = \"AsyncCallInsideLock\";\n          \n          \n            \n                public static final String ASYNC_CALL_INSIDE_LOCK = \"AsyncCallInsideLockError\";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388334525", "createdAt": "2020-03-05T14:39:26Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BallerinaErrors.java", "diffHunk": "@@ -61,6 +61,7 @@\n     public static final String GENERATE_PKG_START = \"___start_\";\n     public static final String GENERATE_PKG_STOP = \"___stop_\";\n     public static final String GENERATE_OBJECT_CLASS_PREFIX = \".$value$\";\n+    public static final String ASYNC_CALL_INSIDE_LOCK = \"AsyncCallInsideLock\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNzkzMw==", "bodyText": "Is it correct to do this for all action invocations too? They may or may not be async right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388337933", "createdAt": "2020-03-05T14:44:38Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1998,7 +2000,12 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0MDg0Nw==", "bodyText": "Can we differentiate between this error being cause due to start vs named worker?\nShall we also reword this to something like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              usage of async call ''{0}'' inside of lock statment is prohibited\n          \n          \n            \n              cannot use an async call inside a lock statement\n          \n      \n    \n    \n  \n\nand\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              usage of async call ''{0}'' inside of lock statment is prohibited\n          \n          \n            \n              cannot use a named worker inside a lock statement\n          \n      \n    \n    \n  \n\n@hasithaa, @pubudu91, thoughts?\nThere's a typo in \"statment\" btw.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388340847", "createdAt": "2020-03-05T14:49:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -20,6 +20,9 @@\n # Compiler warning messages\n # -------------------------\n \n+error.usage.of.async.call.within.lock.is.prohibited=\\\n+  usage of async call ''{0}'' inside of lock statment is prohibited", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0MTE1OA==", "bodyText": "Can we add a test for start too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388341158", "createdAt": "2020-03-05T14:49:34Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/workers/worker-in-lock.bal", "diffHunk": "@@ -0,0 +1,9 @@\n+function testWorkerInsideLock() {\n+    lock {\n+        fork {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7f7899cf2b2fb0cc7c9e1f7c400e3f8c8d7c51"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDQ1MjQ4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#pullrequestreview-370045248", "createdAt": "2020-03-06T02:21:08Z", "commit": {"oid": "bf71bd19285a6cde0dde76e424f751ca1a727577"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjoyMTowOFrOFyrOXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjoyMTowOFrOFyrOXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4MTMwOQ==", "bodyText": "Shouldn't this be a recursive check?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388681309", "createdAt": "2020-03-06T02:21:08Z", "author": {"login": "hasithaa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BLock.java", "diffHunk": "@@ -61,11 +61,11 @@ public synchronized void unlock() {\n         }\n     }\n \n-    private boolean isLockFree() {\n+    public boolean isLockFree() {\n         return this.current.isEmpty();\n     }\n \n-    private boolean lockedBySameContext(Strand ctx) {\n+    public boolean lockedBySameContext(Strand ctx) {\n         return this.current.getLast() == ctx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf71bd19285a6cde0dde76e424f751ca1a727577"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDQ2MzA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#pullrequestreview-370046309", "createdAt": "2020-03-06T02:25:01Z", "commit": {"oid": "bf71bd19285a6cde0dde76e424f751ca1a727577"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjoyNTowMVrOFyrR7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjoyNTowMVrOFyrR7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4MjIyMQ==", "bodyText": "Make this work for multiple levels.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r388682221", "createdAt": "2020-03-06T02:25:01Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/workers/workers.bal", "diffHunk": "@@ -542,3 +542,15 @@ function waitInReturn() returns any {\n \n     return wait {w1, w2};\n }\n+\n+function testPanicWorkerInsideLock() {\n+    lock {\n+        panicWorkerInsideLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf71bd19285a6cde0dde76e424f751ca1a727577"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzI1MDgx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#pullrequestreview-370725081", "createdAt": "2020-03-07T05:45:41Z", "commit": {"oid": "19c003adb986f632f41df2424e569000e50905c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNTo0NTo0MVrOFzMxQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNTo0NTo0MVrOFzMxQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDkxMg==", "bodyText": "A lock-stmt can be written inside another lock-stmt right? In that case, I think we should maintain the previous this.withinLockBlock before setting this.withinLockBlock to true at L1237 and reset the previous value here.\nOr something like the following may not fail?\nfunction testFunc() {\n    lock {\n        lock {\n            \n        }\n\n        fork {\n            worker w1 {\n                \n            }\n        }\n    }\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r389230912", "createdAt": "2020-03-07T05:45:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1232,9 +1233,10 @@ public void visit(BLangWhile whileNode) {\n     @Override\n     public void visit(BLangLock lockNode) {\n \n-        checkExperimentalFeatureValidity(ExperimentalFeatures.LOCK, lockNode.pos);\n         this.checkStatementExecutionValidity(lockNode);\n+        this.withinLockBlock = true;\n         lockNode.body.stmts.forEach(e -> analyzeNode(e, env));\n+        this.withinLockBlock = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c003adb986f632f41df2424e569000e50905c8"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzI1MTA1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#pullrequestreview-370725105", "createdAt": "2020-03-07T05:46:27Z", "commit": {"oid": "19c003adb986f632f41df2424e569000e50905c8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNTo0NjoyN1rOFzMxcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNTo1NzozOVrOFzMzfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDk2Mg==", "bodyText": "Do we need a separate method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r389230962", "createdAt": "2020-03-07T05:46:27Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1998,8 +2000,24 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (invocationExpr.async && this.withinLockBlock) {\n+                logAsyncCallWithinLockError(invocationExpr);\n+            } else {\n+                validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            }\n+        }\n+    }\n+\n+    private void logAsyncCallWithinLockError(BLangInvocation invocationExpr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c003adb986f632f41df2424e569000e50905c8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMTAyNw==", "bodyText": "Shall we switch the checks and return early?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (invocationExpr.async && this.withinLockBlock) {\n          \n          \n            \n                            logAsyncCallWithinLockError(invocationExpr);\n          \n          \n            \n                        } else {\n          \n          \n            \n                            validateActionInvocation(invocationExpr.pos, invocationExpr);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (!invocationExpr.async || !this.withinLockBlock) {\n          \n          \n            \n                            validateActionInvocation(invocationExpr.pos, invocationExpr);\n          \n          \n            \n                            return;\n          \n          \n            \n                        }\n          \n          \n            \n                        // log the error here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r389231027", "createdAt": "2020-03-07T05:48:18Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1998,8 +2000,24 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (invocationExpr.async && this.withinLockBlock) {\n+                logAsyncCallWithinLockError(invocationExpr);\n+            } else {\n+                validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c003adb986f632f41df2424e569000e50905c8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMTQ4Ng==", "bodyText": "We can simplify this using a ternary operator?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DiagnosticCode code;\n          \n          \n            \n            \n          \n          \n            \n                    if (invocationExpr.functionPointerInvocation) {\n          \n          \n            \n                        code = DiagnosticCode.USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        code = DiagnosticCode.USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    dlog.error(invocationExpr.pos, code);\n          \n          \n            \n                    dlog.error(invocationExpr.pos, invocationExpr.functionPointerInvocation ?  \n          \n          \n            \n                               DiagnosticCode.USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED : \n          \n          \n            \n                               DiagnosticCode.USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r389231486", "createdAt": "2020-03-07T05:57:39Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1998,8 +2000,24 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (invocationExpr.async && this.withinLockBlock) {\n+                logAsyncCallWithinLockError(invocationExpr);\n+            } else {\n+                validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            }\n+        }\n+    }\n+\n+    private void logAsyncCallWithinLockError(BLangInvocation invocationExpr) {\n+        DiagnosticCode code;\n+\n+        if (invocationExpr.functionPointerInvocation) {\n+            code = DiagnosticCode.USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED;\n+        } else {\n+            code = DiagnosticCode.USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED;\n         }\n+\n+        dlog.error(invocationExpr.pos, code);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c003adb986f632f41df2424e569000e50905c8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a667ba7e08bd7c0d3d781bac57cf6772ef43dc", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64a667ba7e08bd7c0d3d781bac57cf6772ef43dc", "committedDate": "2020-03-10T06:52:29Z", "message": "Backend changes completed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61e4b2cf72849c16f7b0ad6240ef75fcb0f0ab09", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61e4b2cf72849c16f7b0ad6240ef75fcb0f0ab09", "committedDate": "2020-03-10T06:52:29Z", "message": "Fix codeanalyzer for identifying asyncalls within locks in compile time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "553b9c0dd42d25a0bcbede4c583d2bfc675404b7", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/553b9c0dd42d25a0bcbede4c583d2bfc675404b7", "committedDate": "2020-03-10T06:52:29Z", "message": "Fix unit testcases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "661b59bbd0ecb69b745b2fc0e8291d707a8af579", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/661b59bbd0ecb69b745b2fc0e8291d707a8af579", "committedDate": "2020-03-10T06:52:30Z", "message": "Fix checkstyle Issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ab7b8ce3556b98ad050fabfda86990c61fe661", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16ab7b8ce3556b98ad050fabfda86990c61fe661", "committedDate": "2020-03-10T06:52:30Z", "message": "Change throwing logic and revert unncessary bal files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6e7a1dda8f7a75fc49b3434d169ba89f8af3293", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6e7a1dda8f7a75fc49b3434d169ba89f8af3293", "committedDate": "2020-03-10T06:52:30Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4725ee69896209987b42755e14958c68f12a5641", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4725ee69896209987b42755e14958c68f12a5641", "committedDate": "2020-03-10T06:52:30Z", "message": "Fix review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19c003adb986f632f41df2424e569000e50905c8", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/19c003adb986f632f41df2424e569000e50905c8", "committedDate": "2020-03-06T08:36:50Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "4725ee69896209987b42755e14958c68f12a5641", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4725ee69896209987b42755e14958c68f12a5641", "committedDate": "2020-03-10T06:52:30Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzQ3NTk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#pullrequestreview-371747599", "createdAt": "2020-03-10T08:18:30Z", "commit": {"oid": "642b4610edc44cb14579c96e97368e3c1d21ee83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoxODozMFrOF0E4ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoxODozMFrOF0E4ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MDMzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!invocationExpr.async || !this.withinLockBlock) {\n          \n          \n            \n                        if (invocationExpr.actionInvocation || !this.withinLockBlock) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390150330", "createdAt": "2020-03-10T08:18:30Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2000,7 +2003,14 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (!invocationExpr.async || !this.withinLockBlock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642b4610edc44cb14579c96e97368e3c1d21ee83"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzQ3ODYy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#pullrequestreview-371747862", "createdAt": "2020-03-10T08:19:01Z", "commit": {"oid": "642b4610edc44cb14579c96e97368e3c1d21ee83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoxOTowMVrOF0E5lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoxOTowMVrOF0E5lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MDU0OQ==", "bodyText": "Shall we indent these two lines to align with the beginning of invocationExpr.pos?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#discussion_r390150549", "createdAt": "2020-03-10T08:19:01Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2000,7 +2003,14 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n \n         if (invocationExpr.actionInvocation || invocationExpr.async) {\n-            validateActionInvocation(invocationExpr.pos, invocationExpr);\n+            if (!invocationExpr.async || !this.withinLockBlock) {\n+                validateActionInvocation(invocationExpr.pos, invocationExpr);\n+                return;\n+            }\n+\n+            dlog.error(invocationExpr.pos, invocationExpr.functionPointerInvocation ? \n+            DiagnosticCode.USAGE_OF_WORKER_WITHIN_LOCK_IS_PROHIBITED : \n+            DiagnosticCode.USAGE_OF_START_WITHIN_LOCK_IS_PROHIBITED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642b4610edc44cb14579c96e97368e3c1d21ee83"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "642b4610edc44cb14579c96e97368e3c1d21ee83", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/642b4610edc44cb14579c96e97368e3c1d21ee83", "committedDate": "2020-03-10T07:55:41Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "f1e5eb6e4d054bc818f71e25e274951fd341c86b", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1e5eb6e4d054bc818f71e25e274951fd341c86b", "committedDate": "2020-03-10T08:41:30Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73a27b8abc638044d10051166563f13e6a0abf4d", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73a27b8abc638044d10051166563f13e6a0abf4d", "committedDate": "2020-03-10T08:42:49Z", "message": "Fix review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1e5eb6e4d054bc818f71e25e274951fd341c86b", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1e5eb6e4d054bc818f71e25e274951fd341c86b", "committedDate": "2020-03-10T08:41:30Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "73a27b8abc638044d10051166563f13e6a0abf4d", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73a27b8abc638044d10051166563f13e6a0abf4d", "committedDate": "2020-03-10T08:42:49Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzcxMDAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21487#pullrequestreview-371771000", "createdAt": "2020-03-10T08:58:46Z", "commit": {"oid": "73a27b8abc638044d10051166563f13e6a0abf4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3959, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}